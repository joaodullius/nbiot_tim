
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20025648 	.word	0x20025648
}
   4:	000027a9 	.word	0x000027a9
   8:	00006e3d 	.word	0x00006e3d
   c:	000027d9 	.word	0x000027d9
  10:	000027d9 	.word	0x000027d9
  14:	000027d9 	.word	0x000027d9
  18:	000027d9 	.word	0x000027d9
  1c:	000027d9 	.word	0x000027d9
	...
  2c:	00002661 	.word	0x00002661
  30:	000027d9 	.word	0x000027d9
  34:	00000000 	.word	0x00000000
  38:	00002619 	.word	0x00002619
  3c:	00006d8b 	.word	0x00006d8b

00000040 <_irq_vector_table>:
  40:	00002781 00002781 00002781 00002781     .'...'...'...'..
  50:	00002781 00002781 00002781 00002781     .'...'...'...'..
  60:	00002781 00002781 00002781 00002781     .'...'...'...'..
  70:	00002781 00002781 00002781 00002781     .'...'...'...'..
  80:	00002781 00002781 00002781 00002781     .'...'...'...'..
  90:	00002781 00002781 00002781 00002781     .'...'...'...'..
  a0:	00002781 00002781 00002781 00002781     .'...'...'...'..
  b0:	00002781 00002781 00002781 00002781     .'...'...'...'..
  c0:	00002781 00002781 00002781 00002781     .'...'...'...'..
  d0:	00002781 00002781 00002781 00002781     .'...'...'...'..
  e0:	00002781 00002781 00002781 00002781     .'...'...'...'..
  f0:	00002781 00002781 00002781 00002781     .'...'...'...'..
 100:	00002781 00002781 00002781 00002781     .'...'...'...'..
 110:	00002781 00002781 00002781 00002781     .'...'...'...'..
 120:	00002781 00002781 00002781 00002781     .'...'...'...'..
 130:	00002781 00002781 00002781 00002781     .'...'...'...'..
 140:	00002781                                .'..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b970 	b.w	43c <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     178:	9e08      	ldr	r6, [sp, #32]
     17a:	460d      	mov	r5, r1
     17c:	4604      	mov	r4, r0
     17e:	468a      	mov	sl, r1
     180:	2b00      	cmp	r3, #0
     182:	d17f      	bne.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     184:	428a      	cmp	r2, r1
     186:	4617      	mov	r7, r2
     188:	d941      	bls.n	20e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xe>
     18a:	fab2 f282 	clz	r2, r2
     18e:	b14a      	cbz	r2, 1a4 <__udivmoddi4+0x30>
     190:	f1c2 0120 	rsb	r1, r2, #32
     194:	fa05 f302 	lsl.w	r3, r5, r2
     198:	4097      	lsls	r7, r2
     19a:	4094      	lsls	r4, r2
     19c:	fa20 f101 	lsr.w	r1, r0, r1
     1a0:	ea41 0a03 	orr.w	sl, r1, r3
     1a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1a8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1ac:	fa1f f987 	uxth.w	r9, r7
     1b0:	fbba fef8 	udiv	lr, sl, r8
     1b4:	fb08 a31e 	mls	r3, r8, lr, sl
     1b8:	fb0e f109 	mul.w	r1, lr, r9
     1bc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1c0:	4299      	cmp	r1, r3
     1c2:	d906      	bls.n	1d2 <__udivmoddi4+0x5e>
     1c4:	18fb      	adds	r3, r7, r3
     1c6:	d202      	bcs.n	1ce <__udivmoddi4+0x5a>
     1c8:	4299      	cmp	r1, r3
     1ca:	f200 8124 	bhi.w	416 <CONFIG_FLASH_SIZE+0x16>
     1ce:	f10e 3eff 	add.w	lr, lr, #4294967295
     1d2:	1a59      	subs	r1, r3, r1
     1d4:	b2a3      	uxth	r3, r4
     1d6:	fbb1 f0f8 	udiv	r0, r1, r8
     1da:	fb08 1110 	mls	r1, r8, r0, r1
     1de:	fb00 f909 	mul.w	r9, r0, r9
     1e2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1e6:	45a1      	cmp	r9, r4
     1e8:	d905      	bls.n	1f6 <__udivmoddi4+0x82>
     1ea:	193c      	adds	r4, r7, r4
     1ec:	d202      	bcs.n	1f4 <__udivmoddi4+0x80>
     1ee:	45a1      	cmp	r9, r4
     1f0:	f200 810e 	bhi.w	410 <CONFIG_FLASH_SIZE+0x10>
     1f4:	3801      	subs	r0, #1
     1f6:	eba4 0409 	sub.w	r4, r4, r9
     1fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1fe:	2100      	movs	r1, #0
     200:	b11e      	cbz	r6, 20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     202:	40d4      	lsrs	r4, r2
     204:	2300      	movs	r3, #0
     206:	e9c6 4300 	strd	r4, r3, [r6]
     20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     20e:	b902      	cbnz	r2, 212 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x12>
     210:	deff      	udf	#255	; 0xff
     212:	fab2 f282 	clz	r2, r2
     216:	2a00      	cmp	r2, #0
     218:	d14f      	bne.n	2ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x3a>
     21a:	1bcb      	subs	r3, r1, r7
     21c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     220:	fa1f f887 	uxth.w	r8, r7
     224:	2101      	movs	r1, #1
     226:	0c25      	lsrs	r5, r4, #16
     228:	fbb3 fcfe 	udiv	ip, r3, lr
     22c:	fb0e 301c 	mls	r0, lr, ip, r3
     230:	462b      	mov	r3, r5
     232:	fb08 f90c 	mul.w	r9, r8, ip
     236:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     23a:	45a9      	cmp	r9, r5
     23c:	d90a      	bls.n	254 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x54>
     23e:	197d      	adds	r5, r7, r5
     240:	bf2c      	ite	cs
     242:	2301      	movcs	r3, #1
     244:	2300      	movcc	r3, #0
     246:	45a9      	cmp	r9, r5
     248:	d902      	bls.n	250 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x50>
     24a:	2b00      	cmp	r3, #0
     24c:	f000 80d9 	beq.w	402 <CONFIG_FLASH_SIZE+0x2>
     250:	f10c 3cff 	add.w	ip, ip, #4294967295
     254:	eba5 0509 	sub.w	r5, r5, r9
     258:	b2a3      	uxth	r3, r4
     25a:	fbb5 f0fe 	udiv	r0, r5, lr
     25e:	fb0e 5510 	mls	r5, lr, r0, r5
     262:	fb08 f800 	mul.w	r8, r8, r0
     266:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     26a:	45a0      	cmp	r8, r4
     26c:	d905      	bls.n	27a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x7a>
     26e:	193c      	adds	r4, r7, r4
     270:	d202      	bcs.n	278 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x78>
     272:	45a0      	cmp	r8, r4
     274:	f200 80c9 	bhi.w	40a <CONFIG_FLASH_SIZE+0xa>
     278:	3801      	subs	r0, #1
     27a:	eba4 0408 	sub.w	r4, r4, r8
     27e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     282:	e7bd      	b.n	200 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD>
     284:	428b      	cmp	r3, r1
     286:	d908      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     288:	2e00      	cmp	r6, #0
     28a:	f000 80b1 	beq.w	3f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x170>
     28e:	2100      	movs	r1, #0
     290:	e9c6 0500 	strd	r0, r5, [r6]
     294:	4608      	mov	r0, r1
     296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     29a:	fab3 f183 	clz	r1, r3
     29e:	2900      	cmp	r1, #0
     2a0:	d146      	bne.n	330 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb0>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f0c0 80a7 	bcc.w	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     2a8:	4282      	cmp	r2, r0
     2aa:	f240 80a4 	bls.w	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     2ae:	4608      	mov	r0, r1
     2b0:	2e00      	cmp	r6, #0
     2b2:	d0aa      	beq.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     2b4:	e9c6 4a00 	strd	r4, sl, [r6]
     2b8:	e7a7      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     2ba:	f1c2 0020 	rsb	r0, r2, #32
     2be:	4097      	lsls	r7, r2
     2c0:	fa01 f302 	lsl.w	r3, r1, r2
     2c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2c8:	40c1      	lsrs	r1, r0
     2ca:	fa24 f500 	lsr.w	r5, r4, r0
     2ce:	fa1f f887 	uxth.w	r8, r7
     2d2:	4094      	lsls	r4, r2
     2d4:	431d      	orrs	r5, r3
     2d6:	fbb1 f0fe 	udiv	r0, r1, lr
     2da:	0c2b      	lsrs	r3, r5, #16
     2dc:	fb0e 1110 	mls	r1, lr, r0, r1
     2e0:	fb00 fc08 	mul.w	ip, r0, r8
     2e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2e8:	459c      	cmp	ip, r3
     2ea:	d909      	bls.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     2ec:	18fb      	adds	r3, r7, r3
     2ee:	bf2c      	ite	cs
     2f0:	2101      	movcs	r1, #1
     2f2:	2100      	movcc	r1, #0
     2f4:	459c      	cmp	ip, r3
     2f6:	d902      	bls.n	2fe <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7e>
     2f8:	2900      	cmp	r1, #0
     2fa:	f000 8095 	beq.w	428 <CONFIG_FLASH_SIZE+0x28>
     2fe:	3801      	subs	r0, #1
     300:	eba3 030c 	sub.w	r3, r3, ip
     304:	b2ad      	uxth	r5, r5
     306:	fbb3 f1fe 	udiv	r1, r3, lr
     30a:	fb0e 3311 	mls	r3, lr, r1, r3
     30e:	fb01 fc08 	mul.w	ip, r1, r8
     312:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     316:	45ac      	cmp	ip, r5
     318:	d905      	bls.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>
     31a:	197d      	adds	r5, r7, r5
     31c:	d202      	bcs.n	324 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa4>
     31e:	45ac      	cmp	ip, r5
     320:	f200 8089 	bhi.w	436 <CONFIG_FLASH_SIZE+0x36>
     324:	3901      	subs	r1, #1
     326:	eba5 030c 	sub.w	r3, r5, ip
     32a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     32e:	e77a      	b.n	226 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x26>
     330:	f1c1 0420 	rsb	r4, r1, #32
     334:	408b      	lsls	r3, r1
     336:	fa02 f701 	lsl.w	r7, r2, r1
     33a:	fa05 fc01 	lsl.w	ip, r5, r1
     33e:	40e2      	lsrs	r2, r4
     340:	fa20 f804 	lsr.w	r8, r0, r4
     344:	40e5      	lsrs	r5, r4
     346:	fa00 fe01 	lsl.w	lr, r0, r1
     34a:	4313      	orrs	r3, r2
     34c:	ea48 020c 	orr.w	r2, r8, ip
     350:	ea4f 4813 	mov.w	r8, r3, lsr #16
     354:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     358:	fa1f f983 	uxth.w	r9, r3
     35c:	fbb5 faf8 	udiv	sl, r5, r8
     360:	fb08 551a 	mls	r5, r8, sl, r5
     364:	fb0a f009 	mul.w	r0, sl, r9
     368:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     36c:	4560      	cmp	r0, ip
     36e:	d90a      	bls.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     370:	eb13 0c0c 	adds.w	ip, r3, ip
     374:	bf2c      	ite	cs
     376:	2501      	movcs	r5, #1
     378:	2500      	movcc	r5, #0
     37a:	4560      	cmp	r0, ip
     37c:	d901      	bls.n	382 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x102>
     37e:	2d00      	cmp	r5, #0
     380:	d055      	beq.n	42e <CONFIG_FLASH_SIZE+0x2e>
     382:	f10a 3aff 	add.w	sl, sl, #4294967295
     386:	ebac 0c00 	sub.w	ip, ip, r0
     38a:	b292      	uxth	r2, r2
     38c:	fbbc f0f8 	udiv	r0, ip, r8
     390:	fb08 cc10 	mls	ip, r8, r0, ip
     394:	fb00 f909 	mul.w	r9, r0, r9
     398:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     39c:	45e1      	cmp	r9, ip
     39e:	d905      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a0:	eb13 0c0c 	adds.w	ip, r3, ip
     3a4:	d201      	bcs.n	3aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12a>
     3a6:	45e1      	cmp	r9, ip
     3a8:	d83b      	bhi.n	422 <CONFIG_FLASH_SIZE+0x22>
     3aa:	3801      	subs	r0, #1
     3ac:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3b0:	ebac 0c09 	sub.w	ip, ip, r9
     3b4:	fba0 8907 	umull	r8, r9, r0, r7
     3b8:	45cc      	cmp	ip, r9
     3ba:	4645      	mov	r5, r8
     3bc:	464a      	mov	r2, r9
     3be:	d302      	bcc.n	3c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x146>
     3c0:	d106      	bne.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c2:	45c6      	cmp	lr, r8
     3c4:	d204      	bcs.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c6:	3801      	subs	r0, #1
     3c8:	ebb8 0507 	subs.w	r5, r8, r7
     3cc:	eb69 0203 	sbc.w	r2, r9, r3
     3d0:	b32e      	cbz	r6, 41e <CONFIG_FLASH_SIZE+0x1e>
     3d2:	ebbe 0305 	subs.w	r3, lr, r5
     3d6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3da:	fa23 f201 	lsr.w	r2, r3, r1
     3de:	fa0c f404 	lsl.w	r4, ip, r4
     3e2:	fa2c f301 	lsr.w	r3, ip, r1
     3e6:	2100      	movs	r1, #0
     3e8:	4314      	orrs	r4, r2
     3ea:	e9c6 4300 	strd	r4, r3, [r6]
     3ee:	e70c      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     3f0:	4631      	mov	r1, r6
     3f2:	4630      	mov	r0, r6
     3f4:	e709      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     3f6:	1a84      	subs	r4, r0, r2
     3f8:	eb65 0303 	sbc.w	r3, r5, r3
     3fc:	2001      	movs	r0, #1
     3fe:	469a      	mov	sl, r3
     400:	e756      	b.n	2b0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x30>
     402:	f1ac 0c02 	sub.w	ip, ip, #2
     406:	443d      	add	r5, r7
     408:	e724      	b.n	254 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x54>
     40a:	3802      	subs	r0, #2
     40c:	443c      	add	r4, r7
     40e:	e734      	b.n	27a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x7a>
     410:	3802      	subs	r0, #2
     412:	443c      	add	r4, r7
     414:	e6ef      	b.n	1f6 <__udivmoddi4+0x82>
     416:	f1ae 0e02 	sub.w	lr, lr, #2
     41a:	443b      	add	r3, r7
     41c:	e6d9      	b.n	1d2 <__udivmoddi4+0x5e>
     41e:	4631      	mov	r1, r6
     420:	e6f3      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     422:	3802      	subs	r0, #2
     424:	449c      	add	ip, r3
     426:	e7c1      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     428:	3802      	subs	r0, #2
     42a:	443b      	add	r3, r7
     42c:	e768      	b.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     42e:	f1aa 0a02 	sub.w	sl, sl, #2
     432:	449c      	add	ip, r3
     434:	e7a7      	b.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     436:	3902      	subs	r1, #2
     438:	443d      	add	r5, r7
     43a:	e774      	b.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>

0000043c <__aeabi_idiv0>:
     43c:	4770      	bx	lr
     43e:	bf00      	nop

00000440 <main>:
}
#endif/* defined(CONFIG_LOG) && !defined(CONFIG_LOG_IMMEDIATE) &&\
        !defined(CONFIG_LOG_PROCESS_THREAD) */

void main(void)
{
     440:	b530      	push	{r4, r5, lr}
     442:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    int rc;

    BOOT_LOG_INF("Starting bootloader");
     444:	f04f 0000 	mov.w	r0, #0
     448:	2303      	movs	r3, #3
     44a:	f363 0002 	bfi	r0, r3, #0, #3
     44e:	f36f 00c5 	bfc	r0, #3, #3
     452:	4b3e      	ldr	r3, [pc, #248]	; (54c <main+0x10c>)
     454:	4a3e      	ldr	r2, [pc, #248]	; (550 <main+0x110>)
     456:	1a9b      	subs	r3, r3, r2
     458:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     45c:	f363 108f 	bfi	r0, r3, #6, #10
     460:	493c      	ldr	r1, [pc, #240]	; (554 <main+0x114>)
     462:	f006 fa4e 	bl	6902 <log_string_sync>

    os_heap_init();
     466:	f000 f8b5 	bl	5d4 <os_heap_init>

    ZEPHYR_BOOT_LOG_START();

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     46a:	483b      	ldr	r0, [pc, #236]	; (558 <main+0x118>)
     46c:	f000 f882 	bl	574 <flash_device_get_binding>
     470:	b1a8      	cbz	r0, 49e <main+0x5e>
        wait_for_usb_dfu();
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    rc = boot_go(&rsp);
     472:	a801      	add	r0, sp, #4
     474:	f000 fdca 	bl	100c <boot_go>
    if (rc != 0) {
     478:	b310      	cbz	r0, 4c0 <main+0x80>
        BOOT_LOG_ERR("Unable to find bootable image");
     47a:	f04f 0000 	mov.w	r0, #0
     47e:	2301      	movs	r3, #1
     480:	f363 0002 	bfi	r0, r3, #0, #3
     484:	f36f 00c5 	bfc	r0, #3, #3
     488:	4b30      	ldr	r3, [pc, #192]	; (54c <main+0x10c>)
     48a:	4a31      	ldr	r2, [pc, #196]	; (550 <main+0x110>)
     48c:	1a9b      	subs	r3, r3, r2
     48e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     492:	f363 108f 	bfi	r0, r3, #6, #10
     496:	4931      	ldr	r1, [pc, #196]	; (55c <main+0x11c>)
     498:	f006 fa33 	bl	6902 <log_string_sync>
        while (1)
     49c:	e7fe      	b.n	49c <main+0x5c>
        BOOT_LOG_ERR("Flash device %s not found",
     49e:	2301      	movs	r3, #1
     4a0:	f363 0002 	bfi	r0, r3, #0, #3
     4a4:	f36f 00c5 	bfc	r0, #3, #3
     4a8:	4b28      	ldr	r3, [pc, #160]	; (54c <main+0x10c>)
     4aa:	4a29      	ldr	r2, [pc, #164]	; (550 <main+0x110>)
     4ac:	1a9b      	subs	r3, r3, r2
     4ae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     4b2:	f363 108f 	bfi	r0, r3, #6, #10
     4b6:	4a28      	ldr	r2, [pc, #160]	; (558 <main+0x118>)
     4b8:	4929      	ldr	r1, [pc, #164]	; (560 <main+0x120>)
     4ba:	f006 fa22 	bl	6902 <log_string_sync>
        while (1)
     4be:	e7fe      	b.n	4be <main+0x7e>
            ;
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     4c0:	2503      	movs	r5, #3
     4c2:	f04f 0000 	mov.w	r0, #0
     4c6:	f365 0002 	bfi	r0, r5, #0, #3
     4ca:	f36f 00c5 	bfc	r0, #3, #3
     4ce:	4c1f      	ldr	r4, [pc, #124]	; (54c <main+0x10c>)
     4d0:	4b1f      	ldr	r3, [pc, #124]	; (550 <main+0x110>)
     4d2:	1ae4      	subs	r4, r4, r3
     4d4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
     4d8:	f364 108f 	bfi	r0, r4, #6, #10
     4dc:	9a03      	ldr	r2, [sp, #12]
     4de:	4921      	ldr	r1, [pc, #132]	; (564 <main+0x124>)
     4e0:	f006 fa0f 	bl	6902 <log_string_sync>
                 rsp.br_image_off);

    BOOT_LOG_INF("Jumping to the first image slot");
     4e4:	f04f 0000 	mov.w	r0, #0
     4e8:	f365 0002 	bfi	r0, r5, #0, #3
     4ec:	f36f 00c5 	bfc	r0, #3, #3
     4f0:	f364 108f 	bfi	r0, r4, #6, #10
     4f4:	491c      	ldr	r1, [pc, #112]	; (568 <main+0x128>)
     4f6:	f006 fa04 	bl	6902 <log_string_sync>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     4fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     4fe:	2000      	movs	r0, #0
     500:	f003 f814 	bl	352c <fprotect_area>

    if (rc != 0) {
     504:	b160      	cbz	r0, 520 <main+0xe0>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     506:	f04f 0000 	mov.w	r0, #0
     50a:	2301      	movs	r3, #1
     50c:	f363 0002 	bfi	r0, r3, #0, #3
     510:	f36f 00c5 	bfc	r0, #3, #3
     514:	f364 108f 	bfi	r0, r4, #6, #10
     518:	4914      	ldr	r1, [pc, #80]	; (56c <main+0x12c>)
     51a:	f006 f9f2 	bl	6902 <log_string_sync>
        while (1)
     51e:	e7fe      	b.n	51e <main+0xde>
    pcd_lock_ram();
#endif

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);
     520:	a801      	add	r0, sp, #4
     522:	f005 f869 	bl	55f8 <do_boot>

    BOOT_LOG_ERR("Never should get here");
     526:	f04f 0000 	mov.w	r0, #0
     52a:	2301      	movs	r3, #1
     52c:	f363 0002 	bfi	r0, r3, #0, #3
     530:	f36f 00c5 	bfc	r0, #3, #3
     534:	4b05      	ldr	r3, [pc, #20]	; (54c <main+0x10c>)
     536:	4a06      	ldr	r2, [pc, #24]	; (550 <main+0x110>)
     538:	1a9b      	subs	r3, r3, r2
     53a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     53e:	f363 108f 	bfi	r0, r3, #6, #10
     542:	490b      	ldr	r1, [pc, #44]	; (570 <main+0x130>)
     544:	f006 f9dd 	bl	6902 <log_string_sync>
    while (1)
     548:	e7fe      	b.n	548 <main+0x108>
     54a:	bf00      	nop
     54c:	000094ec 	.word	0x000094ec
     550:	000094e4 	.word	0x000094e4
     554:	00009558 	.word	0x00009558
     558:	0000956c 	.word	0x0000956c
     55c:	0000959c 	.word	0x0000959c
     560:	00009580 	.word	0x00009580
     564:	000095bc 	.word	0x000095bc
     568:	000095e8 	.word	0x000095e8
     56c:	00009608 	.word	0x00009608
     570:	00009638 	.word	0x00009638

00000574 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     574:	b508      	push	{r3, lr}
    if (!flash_dev) {
     576:	4b05      	ldr	r3, [pc, #20]	; (58c <flash_device_get_binding+0x18>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	b113      	cbz	r3, 582 <flash_device_get_binding+0xe>
        flash_dev = device_get_binding(dev_name);
    }
    return flash_dev;
}
     57c:	4b03      	ldr	r3, [pc, #12]	; (58c <flash_device_get_binding+0x18>)
     57e:	6818      	ldr	r0, [r3, #0]
     580:	bd08      	pop	{r3, pc}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     582:	f004 f973 	bl	486c <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     586:	4b01      	ldr	r3, [pc, #4]	; (58c <flash_device_get_binding+0x18>)
     588:	6018      	str	r0, [r3, #0]
     58a:	e7f7      	b.n	57c <flash_device_get_binding+0x8>
     58c:	20020260 	.word	0x20020260

00000590 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     590:	b910      	cbnz	r0, 598 <flash_device_base+0x8>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
    }
    *ret = FLASH_DEVICE_BASE;
     592:	2000      	movs	r0, #0
     594:	6008      	str	r0, [r1, #0]
    return 0;
}
     596:	4770      	bx	lr
{
     598:	b508      	push	{r3, lr}
     59a:	4602      	mov	r2, r0
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     59c:	f04f 0000 	mov.w	r0, #0
     5a0:	2301      	movs	r3, #1
     5a2:	f363 0002 	bfi	r0, r3, #0, #3
     5a6:	f36f 00c5 	bfc	r0, #3, #3
     5aa:	4b07      	ldr	r3, [pc, #28]	; (5c8 <flash_device_base+0x38>)
     5ac:	4907      	ldr	r1, [pc, #28]	; (5cc <flash_device_base+0x3c>)
     5ae:	1a5b      	subs	r3, r3, r1
     5b0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     5b4:	f363 108f 	bfi	r0, r3, #6, #10
     5b8:	2300      	movs	r3, #0
     5ba:	4905      	ldr	r1, [pc, #20]	; (5d0 <flash_device_base+0x40>)
     5bc:	f006 f9a1 	bl	6902 <log_string_sync>
        return -EINVAL;
     5c0:	f06f 0015 	mvn.w	r0, #21
}
     5c4:	bd08      	pop	{r3, pc}
     5c6:	bf00      	nop
     5c8:	000094ec 	.word	0x000094ec
     5cc:	000094e4 	.word	0x000094e4
     5d0:	00009658 	.word	0x00009658

000005d4 <os_heap_init>:

/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
     5d4:	b508      	push	{r3, lr}
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     5d6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     5da:	4802      	ldr	r0, [pc, #8]	; (5e4 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x8>)
     5dc:	f003 fbb0 	bl	3d40 <mbedtls_memory_buffer_alloc_init>
}
     5e0:	bd08      	pop	{r3, pc}
     5e2:	bf00      	nop
     5e4:	20020264 	.word	0x20020264

000005e8 <bootutil_find_key>:

#ifdef EXPECTED_SIG_TLV
#if !defined(MCUBOOT_HW_KEY)
static int
bootutil_find_key(uint8_t *keyhash, uint8_t keyhash_len)
{
     5e8:	b570      	push	{r4, r5, r6, lr}
     5ea:	b0a4      	sub	sp, #144	; 0x90
    bootutil_sha256_context sha256_ctx;
    int i;
    const struct bootutil_key *key;
    uint8_t hash[32];

    if (keyhash_len > 32) {
     5ec:	2920      	cmp	r1, #32
     5ee:	d828      	bhi.n	642 <bootutil_find_key+0x5a>
     5f0:	4606      	mov	r6, r0
     5f2:	460d      	mov	r5, r1
        return -1;
    }

    for (i = 0; i < bootutil_key_cnt; i++) {
     5f4:	2400      	movs	r4, #0
     5f6:	4b14      	ldr	r3, [pc, #80]	; (648 <bootutil_find_key+0x60>)
     5f8:	681b      	ldr	r3, [r3, #0]
     5fa:	42a3      	cmp	r3, r4
     5fc:	dd1c      	ble.n	638 <bootutil_find_key+0x50>
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     5fe:	a809      	add	r0, sp, #36	; 0x24
     600:	f008 fb85 	bl	8d0e <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     604:	2100      	movs	r1, #0
     606:	a809      	add	r0, sp, #36	; 0x24
     608:	f003 fcc8 	bl	3f9c <mbedtls_sha256_starts_ret>
        key = &bootutil_keys[i];
        bootutil_sha256_init(&sha256_ctx);
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     60c:	4b0f      	ldr	r3, [pc, #60]	; (64c <bootutil_find_key+0x64>)
     60e:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
     612:	6852      	ldr	r2, [r2, #4]

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
     614:	6812      	ldr	r2, [r2, #0]
     616:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
     61a:	a809      	add	r0, sp, #36	; 0x24
     61c:	f008 fb7d 	bl	8d1a <mbedtls_sha256_update_ret>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
     620:	a901      	add	r1, sp, #4
     622:	a809      	add	r0, sp, #36	; 0x24
     624:	f008 fbbc 	bl	8da0 <mbedtls_sha256_finish_ret>
        bootutil_sha256_finish(&sha256_ctx, hash);
        if (!memcmp(hash, keyhash, keyhash_len)) {
     628:	462a      	mov	r2, r5
     62a:	4631      	mov	r1, r6
     62c:	a801      	add	r0, sp, #4
     62e:	f006 fc6d 	bl	6f0c <memcmp>
     632:	b118      	cbz	r0, 63c <bootutil_find_key+0x54>
    for (i = 0; i < bootutil_key_cnt; i++) {
     634:	3401      	adds	r4, #1
     636:	e7de      	b.n	5f6 <bootutil_find_key+0xe>
            return i;
        }
    }
    return -1;
     638:	f04f 34ff 	mov.w	r4, #4294967295
}
     63c:	4620      	mov	r0, r4
     63e:	b024      	add	sp, #144	; 0x90
     640:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
     642:	f04f 34ff 	mov.w	r4, #4294967295
     646:	e7f9      	b.n	63c <bootutil_find_key+0x54>
     648:	0000967c 	.word	0x0000967c
     64c:	00009680 	.word	0x00009680

00000650 <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     654:	b0d6      	sub	sp, #344	; 0x158
     656:	4614      	mov	r4, r2
     658:	461d      	mov	r5, r3
    uint32_t security_cnt = UINT32_MAX;
    uint32_t img_security_cnt = 0;
    int32_t security_counter_valid = 0;
#endif

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
     65a:	9e5f      	ldr	r6, [sp, #380]	; 0x17c
     65c:	9604      	str	r6, [sp, #16]
     65e:	9e5e      	ldr	r6, [sp, #376]	; 0x178
     660:	9603      	str	r6, [sp, #12]
     662:	ae06      	add	r6, sp, #24
     664:	9602      	str	r6, [sp, #8]
     666:	9e5d      	ldr	r6, [sp, #372]	; 0x174
     668:	9601      	str	r6, [sp, #4]
     66a:	9e5c      	ldr	r6, [sp, #368]	; 0x170
     66c:	9600      	str	r6, [sp, #0]
     66e:	f005 f808 	bl	5682 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
     672:	4606      	mov	r6, r0
     674:	2800      	cmp	r0, #0
     676:	f040 8082 	bne.w	77e <bootutil_img_validate+0x12e>
        return rc;
    }

    if (out_hash) {
     67a:	9b60      	ldr	r3, [sp, #384]	; 0x180
     67c:	b123      	cbz	r3, 688 <bootutil_img_validate+0x38>
        memcpy(out_hash, hash, 32);
     67e:	2220      	movs	r2, #32
     680:	a906      	add	r1, sp, #24
     682:	4618      	mov	r0, r3
     684:	f006 fc59 	bl	6f3a <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     688:	2300      	movs	r3, #0
     68a:	9300      	str	r3, [sp, #0]
     68c:	f64f 73ff 	movw	r3, #65535	; 0xffff
     690:	462a      	mov	r2, r5
     692:	4621      	mov	r1, r4
     694:	a84e      	add	r0, sp, #312	; 0x138
     696:	f005 f833 	bl	5700 <bootutil_tlv_iter_begin>
    if (rc) {
     69a:	4606      	mov	r6, r0
     69c:	2800      	cmp	r0, #0
     69e:	d16e      	bne.n	77e <bootutil_img_validate+0x12e>
    int valid_signature = 0;
     6a0:	4607      	mov	r7, r0
    int sha256_valid = 0;
     6a2:	4680      	mov	r8, r0
    int key_id = -1;
     6a4:	f04f 34ff 	mov.w	r4, #4294967295
     6a8:	e01d      	b.n	6e6 <bootutil_img_validate+0x96>
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
                key_id = -1;
     6aa:	f04f 34ff 	mov.w	r4, #4294967295
     6ae:	e01a      	b.n	6e6 <bootutil_img_validate+0x96>
     6b0:	f04f 34ff 	mov.w	r4, #4294967295
     6b4:	e017      	b.n	6e6 <bootutil_img_validate+0x96>
            }
            rc = bootutil_verify_sig(hash, sizeof(hash), buf, len, key_id);
            if (rc == 0) {
                valid_signature = 1;
            }
            key_id = -1;
     6b6:	f04f 34ff 	mov.w	r4, #4294967295
                valid_signature = 1;
     6ba:	2701      	movs	r7, #1
     6bc:	e013      	b.n	6e6 <bootutil_img_validate+0x96>
            if (len != sizeof(hash)) {
     6be:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     6c2:	2b20      	cmp	r3, #32
     6c4:	d15f      	bne.n	786 <bootutil_img_validate+0x136>
            rc = flash_area_read(fap, off, buf, sizeof hash);
     6c6:	aa0e      	add	r2, sp, #56	; 0x38
     6c8:	9955      	ldr	r1, [sp, #340]	; 0x154
     6ca:	4628      	mov	r0, r5
     6cc:	f006 fa02 	bl	6ad4 <flash_area_read>
            if (rc) {
     6d0:	2800      	cmp	r0, #0
     6d2:	d15b      	bne.n	78c <bootutil_img_validate+0x13c>
            if (memcmp(hash, buf, sizeof(hash))) {
     6d4:	2220      	movs	r2, #32
     6d6:	a90e      	add	r1, sp, #56	; 0x38
     6d8:	a806      	add	r0, sp, #24
     6da:	f006 fc17 	bl	6f0c <memcmp>
     6de:	2800      	cmp	r0, #0
     6e0:	d156      	bne.n	790 <bootutil_img_validate+0x140>
            sha256_valid = 1;
     6e2:	f04f 0801 	mov.w	r8, #1
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     6e6:	ab54      	add	r3, sp, #336	; 0x150
     6e8:	f50d 72a9 	add.w	r2, sp, #338	; 0x152
     6ec:	a955      	add	r1, sp, #340	; 0x154
     6ee:	a84e      	add	r0, sp, #312	; 0x138
     6f0:	f005 f86b 	bl	57ca <bootutil_tlv_iter_next>
        if (rc < 0) {
     6f4:	2800      	cmp	r0, #0
     6f6:	db40      	blt.n	77a <bootutil_img_validate+0x12a>
        } else if (rc > 0) {
     6f8:	dc38      	bgt.n	76c <bootutil_img_validate+0x11c>
        if (type == IMAGE_TLV_SHA256) {
     6fa:	f8bd 2150 	ldrh.w	r2, [sp, #336]	; 0x150
     6fe:	2a10      	cmp	r2, #16
     700:	d0dd      	beq.n	6be <bootutil_img_validate+0x6e>
        } else if (type == IMAGE_TLV_KEYHASH) {
     702:	2a01      	cmp	r2, #1
     704:	d021      	beq.n	74a <bootutil_img_validate+0xfa>
        } else if (type == EXPECTED_SIG_TLV) {
     706:	2a20      	cmp	r2, #32
     708:	d1ed      	bne.n	6e6 <bootutil_img_validate+0x96>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     70a:	2c00      	cmp	r4, #0
     70c:	dbcd      	blt.n	6aa <bootutil_img_validate+0x5a>
     70e:	4b29      	ldr	r3, [pc, #164]	; (7b4 <bootutil_img_validate+0x164>)
     710:	681b      	ldr	r3, [r3, #0]
     712:	42a3      	cmp	r3, r4
     714:	ddcc      	ble.n	6b0 <bootutil_img_validate+0x60>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     716:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     71a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     71e:	d13f      	bne.n	7a0 <bootutil_img_validate+0x150>
            rc = flash_area_read(fap, off, buf, len);
     720:	aa0e      	add	r2, sp, #56	; 0x38
     722:	9955      	ldr	r1, [sp, #340]	; 0x154
     724:	4628      	mov	r0, r5
     726:	f006 f9d5 	bl	6ad4 <flash_area_read>
            if (rc) {
     72a:	2800      	cmp	r0, #0
     72c:	d13b      	bne.n	7a6 <bootutil_img_validate+0x156>
            rc = bootutil_verify_sig(hash, sizeof(hash), buf, len, key_id);
     72e:	b2e4      	uxtb	r4, r4
     730:	9400      	str	r4, [sp, #0]
     732:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     736:	aa0e      	add	r2, sp, #56	; 0x38
     738:	2120      	movs	r1, #32
     73a:	a806      	add	r0, sp, #24
     73c:	f000 f8ae 	bl	89c <bootutil_verify_sig>
            if (rc == 0) {
     740:	2800      	cmp	r0, #0
     742:	d0b8      	beq.n	6b6 <bootutil_img_validate+0x66>
            key_id = -1;
     744:	f04f 34ff 	mov.w	r4, #4294967295
     748:	e7cd      	b.n	6e6 <bootutil_img_validate+0x96>
            if (len > 32) {
     74a:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     74e:	2b20      	cmp	r3, #32
     750:	d821      	bhi.n	796 <bootutil_img_validate+0x146>
            rc = flash_area_read(fap, off, buf, len);
     752:	aa0e      	add	r2, sp, #56	; 0x38
     754:	9955      	ldr	r1, [sp, #340]	; 0x154
     756:	4628      	mov	r0, r5
     758:	f006 f9bc 	bl	6ad4 <flash_area_read>
            if (rc) {
     75c:	b9f0      	cbnz	r0, 79c <bootutil_img_validate+0x14c>
            key_id = bootutil_find_key(buf, len);
     75e:	f89d 1152 	ldrb.w	r1, [sp, #338]	; 0x152
     762:	a80e      	add	r0, sp, #56	; 0x38
     764:	f7ff ff40 	bl	5e8 <bootutil_find_key>
     768:	4604      	mov	r4, r0
     76a:	e7bc      	b.n	6e6 <bootutil_img_validate+0x96>
            security_counter_valid = 1;
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    if (!sha256_valid) {
     76c:	f1b8 0f00 	cmp.w	r8, #0
     770:	d01c      	beq.n	7ac <bootutil_img_validate+0x15c>
        return -1;
#ifdef EXPECTED_SIG_TLV
    } else if (!valid_signature) {
     772:	b927      	cbnz	r7, 77e <bootutil_img_validate+0x12e>
        return -1;
     774:	f04f 36ff 	mov.w	r6, #4294967295
     778:	e001      	b.n	77e <bootutil_img_validate+0x12e>
            return -1;
     77a:	f04f 36ff 	mov.w	r6, #4294967295
        return -1;
#endif
    }

    return 0;
}
     77e:	4630      	mov	r0, r6
     780:	b056      	add	sp, #344	; 0x158
     782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                return -1;
     786:	f04f 36ff 	mov.w	r6, #4294967295
     78a:	e7f8      	b.n	77e <bootutil_img_validate+0x12e>
                return rc;
     78c:	4606      	mov	r6, r0
     78e:	e7f6      	b.n	77e <bootutil_img_validate+0x12e>
                return -1;
     790:	f04f 36ff 	mov.w	r6, #4294967295
     794:	e7f3      	b.n	77e <bootutil_img_validate+0x12e>
                return -1;
     796:	f04f 36ff 	mov.w	r6, #4294967295
     79a:	e7f0      	b.n	77e <bootutil_img_validate+0x12e>
                return rc;
     79c:	4606      	mov	r6, r0
     79e:	e7ee      	b.n	77e <bootutil_img_validate+0x12e>
                return -1;
     7a0:	f04f 36ff 	mov.w	r6, #4294967295
     7a4:	e7eb      	b.n	77e <bootutil_img_validate+0x12e>
                return -1;
     7a6:	f04f 36ff 	mov.w	r6, #4294967295
     7aa:	e7e8      	b.n	77e <bootutil_img_validate+0x12e>
        return -1;
     7ac:	f04f 36ff 	mov.w	r6, #4294967295
     7b0:	e7e5      	b.n	77e <bootutil_img_validate+0x12e>
     7b2:	bf00      	nop
     7b4:	0000967c 	.word	0x0000967c

000007b8 <bootutil_cmp_rsasig>:
 * values.
 */
static int
bootutil_cmp_rsasig(mbedtls_rsa_context *ctx, uint8_t *hash, uint32_t hlen,
  uint8_t *sig)
{
     7b8:	b570      	push	{r4, r5, r6, lr}
     7ba:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
     7be:	460e      	mov	r6, r1
     7c0:	4619      	mov	r1, r3
    uint8_t em[MBEDTLS_MPI_MAX_SIZE];
    uint8_t db_mask[PSS_MASK_LEN];
    uint8_t h2[PSS_HLEN];
    int i;

    if (ctx->len != PSS_EMLEN || PSS_EMLEN > MBEDTLS_MPI_MAX_SIZE) {
     7c2:	6843      	ldr	r3, [r0, #4]
     7c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     7c8:	d151      	bne.n	86e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x6e>
        return -1;
    }

    if (hlen != PSS_HLEN) {
     7ca:	2a20      	cmp	r2, #32
     7cc:	d152      	bne.n	874 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x74>
        return -1;
    }

    if (mbedtls_rsa_public(ctx, sig, em)) {
     7ce:	aa41      	add	r2, sp, #260	; 0x104
     7d0:	f003 fba2 	bl	3f18 <mbedtls_rsa_public>
     7d4:	4605      	mov	r5, r0
     7d6:	2800      	cmp	r0, #0
     7d8:	d14f      	bne.n	87a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x7a>
     */

    /* Step 4.  If the rightmost octet of EM does have the value
     * 0xbc, output inconsistent and stop.
     */
    if (em[PSS_EMLEN - 1] != 0xbc) {
     7da:	f89d 3203 	ldrb.w	r3, [sp, #515]	; 0x203
     7de:	2bbc      	cmp	r3, #188	; 0xbc
     7e0:	d14e      	bne.n	880 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x80>
     *
     * 8emLen - emBits is zero, so there is nothing to test here.
     */

    /* Step 7.  let dbMask = MGF(H, emLen - hLen - 1). */
    pss_mgf1(db_mask, &em[PSS_HASH_OFFSET]);
     7e2:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
     7e6:	a809      	add	r0, sp, #36	; 0x24
     7e8:	f005 f89d 	bl	5926 <pss_mgf1>

    /* Step 8.  let DB = maskedDB xor dbMask.
     * To avoid needing an additional buffer, store the 'db' in the
     * same buffer as db_mask.  From now, to the end of this function,
     * db_mask refers to the unmasked 'db'. */
    for (i = 0; i < PSS_MASK_LEN; i++) {
     7ec:	462b      	mov	r3, r5
     7ee:	2bde      	cmp	r3, #222	; 0xde
     7f0:	dc07      	bgt.n	802 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2>
        db_mask[i] ^= em[i];
     7f2:	aa41      	add	r2, sp, #260	; 0x104
     7f4:	5cd2      	ldrb	r2, [r2, r3]
     7f6:	a809      	add	r0, sp, #36	; 0x24
     7f8:	5cc4      	ldrb	r4, [r0, r3]
     7fa:	4062      	eors	r2, r4
     7fc:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < PSS_MASK_LEN; i++) {
     7fe:	3301      	adds	r3, #1
     800:	e7f5      	b.n	7ee <bootutil_cmp_rsasig+0x36>

    /* Step 9.  Set the leftmost 8emLen - emBits bits of the leftmost
     * octet in DB to zero.
     * pycrypto seems to always make the emBits 2047, so we need to
     * clear the top bit. */
    db_mask[0] &= 0x7F;
     802:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
     806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     80a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

    /* Step 10.  If the emLen - hLen - sLen - 2 leftmost octets of DB
     * are not zero or if the octet at position emLen - hLen - sLen -
     * 1 (the leftmost position is "position 1") does not have
     * hexadecimal value 0x01, output "inconsistent" and stop. */
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     80e:	2dbd      	cmp	r5, #189	; 0xbd
     810:	dc04      	bgt.n	81c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x1c>
        if (db_mask[i] != 0) {
     812:	ab09      	add	r3, sp, #36	; 0x24
     814:	5d5b      	ldrb	r3, [r3, r5]
     816:	bbb3      	cbnz	r3, 886 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x86>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     818:	3501      	adds	r5, #1
     81a:	e7f8      	b.n	80e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xe>
            return -1;
        }
    }

    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     81c:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
     820:	2b01      	cmp	r3, #1
     822:	d135      	bne.n	890 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x90>
    mbedtls_sha256_init(ctx);
     824:	a881      	add	r0, sp, #516	; 0x204
     826:	f008 fa72 	bl	8d0e <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     82a:	2100      	movs	r1, #0
     82c:	a881      	add	r0, sp, #516	; 0x204
     82e:	f003 fbb5 	bl	3f9c <mbedtls_sha256_starts_ret>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
     832:	2208      	movs	r2, #8
     834:	4918      	ldr	r1, [pc, #96]	; (898 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x98>)
     836:	a881      	add	r0, sp, #516	; 0x204
     838:	f008 fa6f 	bl	8d1a <mbedtls_sha256_update_ret>
     83c:	2220      	movs	r2, #32
     83e:	4631      	mov	r1, r6
     840:	a881      	add	r0, sp, #516	; 0x204
     842:	f008 fa6a 	bl	8d1a <mbedtls_sha256_update_ret>
     846:	2220      	movs	r2, #32
     848:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
     84c:	a881      	add	r0, sp, #516	; 0x204
     84e:	f008 fa64 	bl	8d1a <mbedtls_sha256_update_ret>
    (void)mbedtls_sha256_finish_ret(ctx, output);
     852:	a901      	add	r1, sp, #4
     854:	a881      	add	r0, sp, #516	; 0x204
     856:	f008 faa3 	bl	8da0 <mbedtls_sha256_finish_ret>
    bootutil_sha256_update(&shactx, &db_mask[PSS_MASK_SALT_POS], PSS_SLEN);
    bootutil_sha256_finish(&shactx, h2);

    /* Step 14.  If H = H', output "consistent".  Otherwise, output
     * "inconsistent". */
    if (memcmp(h2, &em[PSS_HASH_OFFSET], PSS_HLEN) != 0) {
     85a:	2220      	movs	r2, #32
     85c:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
     860:	a801      	add	r0, sp, #4
     862:	f006 fb53 	bl	6f0c <memcmp>
     866:	b180      	cbz	r0, 88a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8a>
        return -1;
     868:	f04f 30ff 	mov.w	r0, #4294967295
     86c:	e00d      	b.n	88a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8a>
        return -1;
     86e:	f04f 30ff 	mov.w	r0, #4294967295
     872:	e00a      	b.n	88a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8a>
        return -1;
     874:	f04f 30ff 	mov.w	r0, #4294967295
     878:	e007      	b.n	88a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8a>
        return -1;
     87a:	f04f 30ff 	mov.w	r0, #4294967295
     87e:	e004      	b.n	88a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8a>
        return -1;
     880:	f04f 30ff 	mov.w	r0, #4294967295
     884:	e001      	b.n	88a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8a>
            return -1;
     886:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return 0;
}
     88a:	f50d 7d1c 	add.w	sp, sp, #624	; 0x270
     88e:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
     890:	f04f 30ff 	mov.w	r0, #4294967295
     894:	e7f9      	b.n	88a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8a>
     896:	bf00      	nop
     898:	00009688 	.word	0x00009688

0000089c <bootutil_verify_sig>:

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     8a0:	b0ad      	sub	sp, #180	; 0xb4
     8a2:	4606      	mov	r6, r0
     8a4:	460f      	mov	r7, r1
     8a6:	4690      	mov	r8, r2
     8a8:	461d      	mov	r5, r3
     8aa:	f89d 90d0 	ldrb.w	r9, [sp, #208]	; 0xd0
    mbedtls_rsa_context ctx;
    int rc;
    uint8_t *cp;
    uint8_t *end;

    mbedtls_rsa_init(&ctx, 0, 0);
     8ae:	2200      	movs	r2, #0
     8b0:	4611      	mov	r1, r2
     8b2:	a801      	add	r0, sp, #4
     8b4:	f008 f9e5 	bl	8c82 <mbedtls_rsa_init>

    cp = (uint8_t *)bootutil_keys[key_id].key;
     8b8:	4c11      	ldr	r4, [pc, #68]	; (900 <bootutil_verify_sig+0x64>)
     8ba:	f854 3039 	ldr.w	r3, [r4, r9, lsl #3]
     8be:	9300      	str	r3, [sp, #0]
    end = cp + *bootutil_keys[key_id].len;
     8c0:	eb04 04c9 	add.w	r4, r4, r9, lsl #3
     8c4:	6862      	ldr	r2, [r4, #4]
     8c6:	6812      	ldr	r2, [r2, #0]

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
     8c8:	441a      	add	r2, r3
     8ca:	4669      	mov	r1, sp
     8cc:	a801      	add	r0, sp, #4
     8ce:	f004 ffd8 	bl	5882 <bootutil_parse_rsakey>
    if (rc || slen != ctx.len) {
     8d2:	4604      	mov	r4, r0
     8d4:	b910      	cbnz	r0, 8dc <bootutil_verify_sig+0x40>
     8d6:	9b02      	ldr	r3, [sp, #8]
     8d8:	42ab      	cmp	r3, r5
     8da:	d006      	beq.n	8ea <bootutil_verify_sig+0x4e>
        mbedtls_rsa_free(&ctx);
     8dc:	a801      	add	r0, sp, #4
     8de:	f008 f9de 	bl	8c9e <mbedtls_rsa_free>
    }
    rc = bootutil_cmp_rsasig(&ctx, hash, hlen, sig);
    mbedtls_rsa_free(&ctx);

    return rc;
}
     8e2:	4620      	mov	r0, r4
     8e4:	b02d      	add	sp, #180	; 0xb4
     8e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = bootutil_cmp_rsasig(&ctx, hash, hlen, sig);
     8ea:	4643      	mov	r3, r8
     8ec:	463a      	mov	r2, r7
     8ee:	4631      	mov	r1, r6
     8f0:	a801      	add	r0, sp, #4
     8f2:	f7ff ff61 	bl	7b8 <bootutil_cmp_rsasig>
     8f6:	4604      	mov	r4, r0
    mbedtls_rsa_free(&ctx);
     8f8:	a801      	add	r0, sp, #4
     8fa:	f008 f9d0 	bl	8c9e <mbedtls_rsa_free>
    return rc;
     8fe:	e7f0      	b.n	8e2 <bootutil_verify_sig+0x46>
     900:	00009680 	.word	0x00009680

00000904 <boot_magic_decode>:
#define BOOT_SWAP_TABLES_COUNT \
    (sizeof boot_swap_tables / sizeof boot_swap_tables[0])

static int
boot_magic_decode(const uint32_t *magic)
{
     904:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     906:	2210      	movs	r2, #16
     908:	4903      	ldr	r1, [pc, #12]	; (918 <boot_magic_decode+0x14>)
     90a:	f006 faff 	bl	6f0c <memcmp>
     90e:	b108      	cbz	r0, 914 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    }
    return BOOT_MAGIC_BAD;
     910:	2002      	movs	r0, #2
}
     912:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
     914:	2001      	movs	r0, #1
     916:	e7fc      	b.n	912 <boot_magic_decode+0xe>
     918:	000096dc 	.word	0x000096dc

0000091c <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
     91c:	b570      	push	{r4, r5, r6, lr}
     91e:	b086      	sub	sp, #24
     920:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
     922:	2303      	movs	r3, #3
     924:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     928:	2400      	movs	r4, #0
     92a:	e007      	b.n	93c <boot_find_status+0x20>
        }

        off = boot_magic_off(*fap);
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
        if (rc != 0) {
            flash_area_close(*fap);
     92c:	6828      	ldr	r0, [r5, #0]
     92e:	f006 f8d0 	bl	6ad2 <flash_area_close>
            return rc;
     932:	e023      	b.n	97c <boot_find_status+0x60>

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
            return 0;
        }

        flash_area_close(*fap);
     934:	6828      	ldr	r0, [r5, #0]
     936:	f006 f8cc 	bl	6ad2 <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     93a:	3401      	adds	r4, #1
     93c:	2c01      	cmp	r4, #1
     93e:	d81b      	bhi.n	978 <boot_find_status+0x5c>
        rc = flash_area_open(areas[i], fap);
     940:	4629      	mov	r1, r5
     942:	ab06      	add	r3, sp, #24
     944:	4423      	add	r3, r4
     946:	f813 0c14 	ldrb.w	r0, [r3, #-20]
     94a:	f001 fb05 	bl	1f58 <flash_area_open>
        if (rc != 0) {
     94e:	4606      	mov	r6, r0
     950:	b9a0      	cbnz	r0, 97c <boot_find_status+0x60>
        off = boot_magic_off(*fap);
     952:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
     954:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     956:	2310      	movs	r3, #16
     958:	aa02      	add	r2, sp, #8
     95a:	3910      	subs	r1, #16
     95c:	f006 f8ba 	bl	6ad4 <flash_area_read>
        if (rc != 0) {
     960:	4606      	mov	r6, r0
     962:	2800      	cmp	r0, #0
     964:	d1e2      	bne.n	92c <boot_find_status+0x10>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     966:	2210      	movs	r2, #16
     968:	4906      	ldr	r1, [pc, #24]	; (984 <boot_find_status+0x68>)
     96a:	a802      	add	r0, sp, #8
     96c:	f006 face 	bl	6f0c <memcmp>
     970:	4606      	mov	r6, r0
     972:	2800      	cmp	r0, #0
     974:	d1de      	bne.n	934 <boot_find_status+0x18>
     976:	e001      	b.n	97c <boot_find_status+0x60>
    }

    /* If we got here, no magic was found */
    return -1;
     978:	f04f 36ff 	mov.w	r6, #4294967295
}
     97c:	4630      	mov	r0, r6
     97e:	b006      	add	sp, #24
     980:	bd70      	pop	{r4, r5, r6, pc}
     982:	bf00      	nop
     984:	000096dc 	.word	0x000096dc

00000988 <boot_write_magic>:
}
#endif

int
boot_write_magic(const struct flash_area *fap)
{
     988:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
     98a:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
     98c:	2310      	movs	r3, #16
     98e:	4a04      	ldr	r2, [pc, #16]	; (9a0 <boot_write_magic+0x18>)
     990:	3910      	subs	r1, #16
     992:	f006 f8be 	bl	6b12 <flash_area_write>
    if (rc != 0) {
     996:	b900      	cbnz	r0, 99a <boot_write_magic+0x12>
        return BOOT_EFLASH;
    }

    return 0;
}
     998:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
     99a:	2001      	movs	r0, #1
     99c:	e7fc      	b.n	998 <boot_write_magic+0x10>
     99e:	bf00      	nop
     9a0:	000096dc 	.word	0x000096dc

000009a4 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
     9a4:	b530      	push	{r4, r5, lr}
     9a6:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     9a8:	a902      	add	r1, sp, #8
     9aa:	2003      	movs	r0, #3
     9ac:	f005 f8c0 	bl	5b30 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
     9b0:	2800      	cmp	r0, #0
     9b2:	d16e      	bne.n	a92 <boot_swap_type_multi+0xee>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     9b4:	4669      	mov	r1, sp
     9b6:	2007      	movs	r0, #7
     9b8:	f005 f8ba 	bl	5b30 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
     9bc:	2800      	cmp	r0, #0
     9be:	d16a      	bne.n	a96 <boot_swap_type_multi+0xf2>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
     9c0:	2400      	movs	r4, #0
     9c2:	e007      	b.n	9d4 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
     9c4:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
     9c6:	2b04      	cmp	r3, #4
     9c8:	d029      	beq.n	a1e <boot_swap_type_multi+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
     9ca:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
     9ce:	4293      	cmp	r3, r2
     9d0:	d025      	beq.n	a1e <boot_swap_type_multi+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
     9d2:	3401      	adds	r4, #1
     9d4:	2c02      	cmp	r4, #2
     9d6:	d848      	bhi.n	a6a <boot_swap_type_multi+0xc6>
        table = boot_swap_tables + i;
     9d8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     9dc:	4a2f      	ldr	r2, [pc, #188]	; (a9c <boot_swap_type_multi+0xf8>)
     9de:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
     9e2:	f89d 1008 	ldrb.w	r1, [sp, #8]
     9e6:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
     9ea:	f005 f80f 	bl	5a0c <boot_magic_compatible_check>
     9ee:	2800      	cmp	r0, #0
     9f0:	d0ef      	beq.n	9d2 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
     9f2:	f89d 1000 	ldrb.w	r1, [sp]
     9f6:	7868      	ldrb	r0, [r5, #1]
     9f8:	f005 f808 	bl	5a0c <boot_magic_compatible_check>
                                        primary_slot.magic) &&
     9fc:	2800      	cmp	r0, #0
     9fe:	d0e8      	beq.n	9d2 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
     a00:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
     a02:	2b04      	cmp	r3, #4
     a04:	d003      	beq.n	a0e <boot_swap_type_multi+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
     a06:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
     a0a:	4293      	cmp	r3, r2
     a0c:	d1e1      	bne.n	9d2 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
     a0e:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
     a10:	2b04      	cmp	r3, #4
     a12:	d0d7      	beq.n	9c4 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
     a14:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
     a18:	4293      	cmp	r3, r2
     a1a:	d1da      	bne.n	9d2 <boot_swap_type_multi+0x2e>
     a1c:	e7d2      	b.n	9c4 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
     a1e:	f04f 0000 	mov.w	r0, #0
     a22:	2303      	movs	r3, #3
     a24:	f363 0002 	bfi	r0, r3, #0, #3
     a28:	f36f 00c5 	bfc	r0, #3, #3
     a2c:	4b1c      	ldr	r3, [pc, #112]	; (aa0 <boot_swap_type_multi+0xfc>)
     a2e:	4a1d      	ldr	r2, [pc, #116]	; (aa4 <boot_swap_type_multi+0x100>)
     a30:	1a9b      	subs	r3, r3, r2
     a32:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     a36:	f363 108f 	bfi	r0, r3, #6, #10
     a3a:	796b      	ldrb	r3, [r5, #5]
     a3c:	2b02      	cmp	r3, #2
     a3e:	d007      	beq.n	a50 <boot_swap_type_multi+0xac>
     a40:	2b03      	cmp	r3, #3
     a42:	d010      	beq.n	a66 <boot_swap_type_multi+0xc2>
     a44:	2b04      	cmp	r3, #4
     a46:	d001      	beq.n	a4c <boot_swap_type_multi+0xa8>
     a48:	4a17      	ldr	r2, [pc, #92]	; (aa8 <boot_swap_type_multi+0x104>)
     a4a:	e002      	b.n	a52 <boot_swap_type_multi+0xae>
     a4c:	4a17      	ldr	r2, [pc, #92]	; (aac <boot_swap_type_multi+0x108>)
     a4e:	e000      	b.n	a52 <boot_swap_type_multi+0xae>
     a50:	4a17      	ldr	r2, [pc, #92]	; (ab0 <boot_swap_type_multi+0x10c>)
     a52:	4918      	ldr	r1, [pc, #96]	; (ab4 <boot_swap_type_multi+0x110>)
     a54:	f005 ff55 	bl	6902 <log_string_sync>
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
     a58:	7968      	ldrb	r0, [r5, #5]
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
     a5a:	1e83      	subs	r3, r0, #2
     a5c:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
     a5e:	2b02      	cmp	r3, #2
     a60:	d915      	bls.n	a8e <boot_swap_type_multi+0xea>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
     a62:	20ff      	movs	r0, #255	; 0xff
     a64:	e013      	b.n	a8e <boot_swap_type_multi+0xea>
            BOOT_LOG_INF("Swap type: %s",
     a66:	4a14      	ldr	r2, [pc, #80]	; (ab8 <boot_swap_type_multi+0x114>)
     a68:	e7f3      	b.n	a52 <boot_swap_type_multi+0xae>
            }
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
     a6a:	f04f 0000 	mov.w	r0, #0
     a6e:	2303      	movs	r3, #3
     a70:	f363 0002 	bfi	r0, r3, #0, #3
     a74:	f36f 00c5 	bfc	r0, #3, #3
     a78:	4b09      	ldr	r3, [pc, #36]	; (aa0 <boot_swap_type_multi+0xfc>)
     a7a:	4a0a      	ldr	r2, [pc, #40]	; (aa4 <boot_swap_type_multi+0x100>)
     a7c:	1a9b      	subs	r3, r3, r2
     a7e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     a82:	f363 108f 	bfi	r0, r3, #6, #10
     a86:	490d      	ldr	r1, [pc, #52]	; (abc <boot_swap_type_multi+0x118>)
     a88:	f005 ff3b 	bl	6902 <log_string_sync>
    return BOOT_SWAP_TYPE_NONE;
     a8c:	2001      	movs	r0, #1
}
     a8e:	b005      	add	sp, #20
     a90:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
     a92:	20ff      	movs	r0, #255	; 0xff
     a94:	e7fb      	b.n	a8e <boot_swap_type_multi+0xea>
        return BOOT_SWAP_TYPE_PANIC;
     a96:	20ff      	movs	r0, #255	; 0xff
     a98:	e7f9      	b.n	a8e <boot_swap_type_multi+0xea>
     a9a:	bf00      	nop
     a9c:	000096ec 	.word	0x000096ec
     aa0:	000094ec 	.word	0x000094ec
     aa4:	000094e4 	.word	0x000094e4
     aa8:	000096a0 	.word	0x000096a0
     aac:	000096b4 	.word	0x000096b4
     ab0:	00009690 	.word	0x00009690
     ab4:	000096bc 	.word	0x000096bc
     ab8:	00009698 	.word	0x00009698
     abc:	000096cc 	.word	0x000096cc

00000ac0 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
     ac0:	6802      	ldr	r2, [r0, #0]
     ac2:	4b0e      	ldr	r3, [pc, #56]	; (afc <boot_is_header_valid+0x3c>)
     ac4:	429a      	cmp	r2, r3
     ac6:	d10d      	bne.n	ae4 <boot_is_header_valid+0x24>
        return false;
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     ac8:	68c2      	ldr	r2, [r0, #12]
     aca:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
     acc:	43d8      	mvns	r0, r3
     ace:	4282      	cmp	r2, r0
     ad0:	d80c      	bhi.n	aec <boot_is_header_valid+0x2c>
{
     ad2:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
     ad4:	18d4      	adds	r4, r2, r3
        return true;
     ad6:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     ad8:	b110      	cbz	r0, ae0 <boot_is_header_valid+0x20>
        return false;
    }

    if (size >= fap->fa_size) {
     ada:	688b      	ldr	r3, [r1, #8]
     adc:	42a3      	cmp	r3, r4
     ade:	d903      	bls.n	ae8 <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
     ae0:	bc10      	pop	{r4}
     ae2:	4770      	bx	lr
        return false;
     ae4:	2000      	movs	r0, #0
     ae6:	4770      	bx	lr
        return false;
     ae8:	2000      	movs	r0, #0
     aea:	e7f9      	b.n	ae0 <boot_is_header_valid+0x20>
        return false;
     aec:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     aee:	b110      	cbz	r0, af6 <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
     af0:	688b      	ldr	r3, [r1, #8]
     af2:	42a3      	cmp	r3, r4
     af4:	d900      	bls.n	af8 <boot_is_header_valid+0x38>
}
     af6:	4770      	bx	lr
        return false;
     af8:	2000      	movs	r0, #0
     afa:	4770      	bx	lr
     afc:	96f3b83d 	.word	0x96f3b83d

00000b00 <boot_image_check>:
{
     b00:	b500      	push	{lr}
     b02:	b087      	sub	sp, #28
     b04:	4613      	mov	r3, r2
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
     b06:	2000      	movs	r0, #0
     b08:	9004      	str	r0, [sp, #16]
     b0a:	9003      	str	r0, [sp, #12]
     b0c:	9002      	str	r0, [sp, #8]
     b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
     b12:	9201      	str	r2, [sp, #4]
     b14:	4a05      	ldr	r2, [pc, #20]	; (b2c <boot_image_check+0x2c>)
     b16:	9200      	str	r2, [sp, #0]
     b18:	460a      	mov	r2, r1
     b1a:	4601      	mov	r1, r0
     b1c:	f7ff fd98 	bl	650 <bootutil_img_validate>
     b20:	b910      	cbnz	r0, b28 <boot_image_check+0x28>
}
     b22:	b007      	add	sp, #28
     b24:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EBADIMAGE;
     b28:	2003      	movs	r0, #3
     b2a:	e7fa      	b.n	b22 <boot_image_check+0x22>
     b2c:	200226c4 	.word	0x200226c4

00000b30 <boot_validate_slot>:
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
     b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b34:	b082      	sub	sp, #8
     b36:	4606      	mov	r6, r0
     b38:	460c      	mov	r4, r1
     b3a:	4615      	mov	r5, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     b3c:	2000      	movs	r0, #0
     b3e:	f004 fd80 	bl	5642 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     b42:	a901      	add	r1, sp, #4
     b44:	b2c0      	uxtb	r0, r0
     b46:	f001 fa07 	bl	1f58 <flash_area_open>
    if (rc != 0) {
     b4a:	b128      	cbz	r0, b58 <boot_validate_slot+0x28>
        return -1;
     b4c:	f04f 35ff 	mov.w	r5, #4294967295
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
     b50:	4628      	mov	r0, r5
     b52:	b002      	add	sp, #8
     b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     b58:	202c      	movs	r0, #44	; 0x2c
     b5a:	fb00 6704 	mla	r7, r0, r4, r6
    if (boot_check_header_erased(state, slot) == 0 ||
     b5e:	4621      	mov	r1, r4
     b60:	4630      	mov	r0, r6
     b62:	f005 f8a1 	bl	5ca8 <boot_check_header_erased>
     b66:	b300      	cbz	r0, baa <boot_validate_slot+0x7a>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     b68:	693b      	ldr	r3, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     b6a:	f013 0f10 	tst.w	r3, #16
     b6e:	d11c      	bne.n	baa <boot_validate_slot+0x7a>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
     b70:	f8dd 8004 	ldr.w	r8, [sp, #4]
     b74:	4641      	mov	r1, r8
     b76:	4638      	mov	r0, r7
     b78:	f7ff ffa2 	bl	ac0 <boot_is_header_valid>
     b7c:	bb00      	cbnz	r0, bc0 <boot_validate_slot+0x90>
        if ((slot != BOOT_PRIMARY_SLOT) || IS_IN_XIP_MODE()) {
     b7e:	bb4c      	cbnz	r4, bd4 <boot_validate_slot+0xa4>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     b80:	f04f 0000 	mov.w	r0, #0
     b84:	2301      	movs	r3, #1
     b86:	f363 0002 	bfi	r0, r3, #0, #3
     b8a:	f36f 00c5 	bfc	r0, #3, #3
     b8e:	4b15      	ldr	r3, [pc, #84]	; (be4 <boot_validate_slot+0xb4>)
     b90:	4a15      	ldr	r2, [pc, #84]	; (be8 <boot_validate_slot+0xb8>)
     b92:	1a9b      	subs	r3, r3, r2
     b94:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     b98:	f363 108f 	bfi	r0, r3, #6, #10
     b9c:	bb04      	cbnz	r4, be0 <boot_validate_slot+0xb0>
     b9e:	4a13      	ldr	r2, [pc, #76]	; (bec <boot_validate_slot+0xbc>)
     ba0:	4913      	ldr	r1, [pc, #76]	; (bf0 <boot_validate_slot+0xc0>)
     ba2:	f005 feae 	bl	6902 <log_string_sync>
        rc = 1;
     ba6:	2501      	movs	r5, #1
        goto out;
     ba8:	e001      	b.n	bae <boot_validate_slot+0x7e>
        if (slot != BOOT_PRIMARY_SLOT) {
     baa:	b924      	cbnz	r4, bb6 <boot_validate_slot+0x86>
        rc = 1;
     bac:	2501      	movs	r5, #1
    flash_area_close(fap);
     bae:	9801      	ldr	r0, [sp, #4]
     bb0:	f005 ff8f 	bl	6ad2 <flash_area_close>
    return rc;
     bb4:	e7cc      	b.n	b50 <boot_validate_slot+0x20>
            swap_erase_trailer_sectors(state, fap);
     bb6:	9901      	ldr	r1, [sp, #4]
     bb8:	4630      	mov	r0, r6
     bba:	f005 f97d 	bl	5eb8 <swap_erase_trailer_sectors>
     bbe:	e7f5      	b.n	bac <boot_validate_slot+0x7c>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
     bc0:	462b      	mov	r3, r5
     bc2:	4642      	mov	r2, r8
     bc4:	4639      	mov	r1, r7
     bc6:	4630      	mov	r0, r6
     bc8:	f7ff ff9a 	bl	b00 <boot_image_check>
     bcc:	4605      	mov	r5, r0
     bce:	2800      	cmp	r0, #0
     bd0:	d0ed      	beq.n	bae <boot_validate_slot+0x7e>
     bd2:	e7d4      	b.n	b7e <boot_validate_slot+0x4e>
            flash_area_erase(fap, 0, fap->fa_size);
     bd4:	9801      	ldr	r0, [sp, #4]
     bd6:	6882      	ldr	r2, [r0, #8]
     bd8:	2100      	movs	r1, #0
     bda:	f005 ffca 	bl	6b72 <flash_area_erase>
     bde:	e7cf      	b.n	b80 <boot_validate_slot+0x50>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     be0:	4a04      	ldr	r2, [pc, #16]	; (bf4 <boot_validate_slot+0xc4>)
     be2:	e7dd      	b.n	ba0 <boot_validate_slot+0x70>
     be4:	000094ec 	.word	0x000094ec
     be8:	000094e4 	.word	0x000094e4
     bec:	0000970c 	.word	0x0000970c
     bf0:	00009714 	.word	0x00009714
     bf4:	00009700 	.word	0x00009700

00000bf8 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     bf8:	b530      	push	{r4, r5, lr}
     bfa:	b083      	sub	sp, #12
     bfc:	4605      	mov	r5, r0
     bfe:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     c00:	2300      	movs	r3, #0
     c02:	9300      	str	r3, [sp, #0]
     c04:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     c06:	4608      	mov	r0, r1
     c08:	f005 f8ed 	bl	5de6 <boot_status_is_reset>
     c0c:	b330      	cbz	r0, c5c <boot_swap_image+0x64>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     c0e:	682a      	ldr	r2, [r5, #0]
     c10:	4b1f      	ldr	r3, [pc, #124]	; (c90 <boot_swap_image+0x98>)
     c12:	429a      	cmp	r2, r3
     c14:	d016      	beq.n	c44 <boot_swap_image+0x4c>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     c16:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     c18:	4b1d      	ldr	r3, [pc, #116]	; (c90 <boot_swap_image+0x98>)
     c1a:	429a      	cmp	r2, r3
     c1c:	d018      	beq.n	c50 <boot_swap_image+0x58>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     c1e:	9b01      	ldr	r3, [sp, #4]
     c20:	9a00      	ldr	r2, [sp, #0]
     c22:	4293      	cmp	r3, r2
     c24:	d900      	bls.n	c28 <boot_swap_image+0x30>
            copy_size = size;
     c26:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
     c28:	9b00      	ldr	r3, [sp, #0]
     c2a:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     c2c:	9a00      	ldr	r2, [sp, #0]
     c2e:	4621      	mov	r1, r4
     c30:	4628      	mov	r0, r5
     c32:	f000 fcaf 	bl	1594 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     c36:	4b17      	ldr	r3, [pc, #92]	; (c94 <boot_swap_image+0x9c>)
     c38:	681a      	ldr	r2, [r3, #0]
     c3a:	2a00      	cmp	r2, #0
     c3c:	dc16      	bgt.n	c6c <boot_swap_image+0x74>
                     boot_status_fails);
    }
#endif

    return 0;
}
     c3e:	2000      	movs	r0, #0
     c40:	b003      	add	sp, #12
     c42:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     c44:	466a      	mov	r2, sp
     c46:	2100      	movs	r1, #0
     c48:	4628      	mov	r0, r5
     c4a:	f004 ffd6 	bl	5bfa <boot_read_image_size>
     c4e:	e7e2      	b.n	c16 <boot_swap_image+0x1e>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     c50:	aa01      	add	r2, sp, #4
     c52:	2101      	movs	r1, #1
     c54:	4628      	mov	r0, r5
     c56:	f004 ffd0 	bl	5bfa <boot_read_image_size>
     c5a:	e7e0      	b.n	c1e <boot_swap_image+0x26>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     c5c:	f104 0108 	add.w	r1, r4, #8
     c60:	2000      	movs	r0, #0
     c62:	f004 ff7a 	bl	5b5a <boot_read_swap_size>
        copy_size = bs->swap_size;
     c66:	68a3      	ldr	r3, [r4, #8]
     c68:	9300      	str	r3, [sp, #0]
     c6a:	e7df      	b.n	c2c <boot_swap_image+0x34>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     c6c:	f04f 0000 	mov.w	r0, #0
     c70:	2302      	movs	r3, #2
     c72:	f363 0002 	bfi	r0, r3, #0, #3
     c76:	f36f 00c5 	bfc	r0, #3, #3
     c7a:	4b07      	ldr	r3, [pc, #28]	; (c98 <boot_swap_image+0xa0>)
     c7c:	4907      	ldr	r1, [pc, #28]	; (c9c <boot_swap_image+0xa4>)
     c7e:	1a5b      	subs	r3, r3, r1
     c80:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     c84:	f363 108f 	bfi	r0, r3, #6, #10
     c88:	4905      	ldr	r1, [pc, #20]	; (ca0 <boot_swap_image+0xa8>)
     c8a:	f005 fe3a 	bl	6902 <log_string_sync>
     c8e:	e7d6      	b.n	c3e <boot_swap_image+0x46>
     c90:	96f3b83d 	.word	0x96f3b83d
     c94:	200227c4 	.word	0x200227c4
     c98:	000094ec 	.word	0x000094ec
     c9c:	000094e4 	.word	0x000094e4
     ca0:	00009738 	.word	0x00009738

00000ca4 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
     ca4:	b538      	push	{r3, r4, r5, lr}
     ca6:	4604      	mov	r4, r0
     ca8:	460d      	mov	r5, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
     caa:	f7ff ffa5 	bl	bf8 <boot_swap_image>
     cae:	4602      	mov	r2, r0
    assert(rc == 0);

    BOOT_SWAP_TYPE(state) = bs->swap_type;
     cb0:	79eb      	ldrb	r3, [r5, #7]
     cb2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     cb6:	3b03      	subs	r3, #3
     cb8:	b2db      	uxtb	r3, r3
     cba:	2b01      	cmp	r3, #1
     cbc:	d90c      	bls.n	cd8 <boot_complete_partial_swap+0x34>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     cbe:	79eb      	ldrb	r3, [r5, #7]
     cc0:	2b02      	cmp	r3, #2
     cc2:	d013      	beq.n	cec <boot_complete_partial_swap+0x48>
     cc4:	2b04      	cmp	r3, #4
     cc6:	d011      	beq.n	cec <boot_complete_partial_swap+0x48>
     cc8:	2b03      	cmp	r3, #3
     cca:	d00f      	beq.n	cec <boot_complete_partial_swap+0x48>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     ccc:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     cd0:	2bff      	cmp	r3, #255	; 0xff
     cd2:	d015      	beq.n	d00 <boot_complete_partial_swap+0x5c>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
     cd4:	4610      	mov	r0, r2
     cd6:	bd38      	pop	{r3, r4, r5, pc}
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cd8:	2000      	movs	r0, #0
     cda:	f005 f993 	bl	6004 <swap_set_image_ok>
        if (rc != 0) {
     cde:	4602      	mov	r2, r0
     ce0:	2800      	cmp	r0, #0
     ce2:	d0ec      	beq.n	cbe <boot_complete_partial_swap+0x1a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     ce4:	23ff      	movs	r3, #255	; 0xff
     ce6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     cea:	e7e8      	b.n	cbe <boot_complete_partial_swap+0x1a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     cec:	2000      	movs	r0, #0
     cee:	f005 f976 	bl	5fde <swap_set_copy_done>
        if (rc != 0) {
     cf2:	4602      	mov	r2, r0
     cf4:	2800      	cmp	r0, #0
     cf6:	d0e9      	beq.n	ccc <boot_complete_partial_swap+0x28>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cf8:	23ff      	movs	r3, #255	; 0xff
     cfa:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     cfe:	e7e5      	b.n	ccc <boot_complete_partial_swap+0x28>
        BOOT_LOG_ERR("panic!");
     d00:	f04f 0000 	mov.w	r0, #0
     d04:	2301      	movs	r3, #1
     d06:	f363 0002 	bfi	r0, r3, #0, #3
     d0a:	f36f 00c5 	bfc	r0, #3, #3
     d0e:	4b05      	ldr	r3, [pc, #20]	; (d24 <boot_complete_partial_swap+0x80>)
     d10:	4a05      	ldr	r2, [pc, #20]	; (d28 <boot_complete_partial_swap+0x84>)
     d12:	1a9b      	subs	r3, r3, r2
     d14:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     d18:	f363 108f 	bfi	r0, r3, #6, #10
     d1c:	4903      	ldr	r1, [pc, #12]	; (d2c <boot_complete_partial_swap+0x88>)
     d1e:	f005 fdf0 	bl	6902 <log_string_sync>
        while (1) {}
     d22:	e7fe      	b.n	d22 <boot_complete_partial_swap+0x7e>
     d24:	000094ec 	.word	0x000094ec
     d28:	000094e4 	.word	0x000094e4
     d2c:	00009764 	.word	0x00009764

00000d30 <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
     d30:	b538      	push	{r3, r4, r5, lr}
     d32:	4604      	mov	r4, r0
     d34:	460d      	mov	r5, r1
    int rc;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
     d36:	f004 ffff 	bl	5d38 <boot_read_sectors>
    if (rc != 0) {
     d3a:	b968      	cbnz	r0, d58 <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
        return;
    }

    /* Attempt to read an image header from each slot. */
    rc = boot_read_image_headers(state, false, NULL);
     d3c:	2200      	movs	r2, #0
     d3e:	4611      	mov	r1, r2
     d40:	4620      	mov	r0, r4
     d42:	f005 f80f 	bl	5d64 <boot_read_image_headers>
    if (rc != 0) {
     d46:	b9e8      	cbnz	r0, d84 <boot_prepare_image_for_update+0x54>
    }

    /* If the current image's slots aren't compatible, no swap is possible.
     * Just boot into primary slot.
     */
    if (boot_slots_compatible(state)) {
     d48:	4620      	mov	r0, r4
     d4a:	f000 fadd 	bl	1308 <boot_slots_compatible>
     d4e:	bb78      	cbnz	r0, db0 <boot_prepare_image_for_update+0x80>
            }
#endif
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d50:	2301      	movs	r3, #1
     d52:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d56:	e014      	b.n	d82 <boot_prepare_image_for_update+0x52>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     d58:	f04f 0000 	mov.w	r0, #0
     d5c:	2302      	movs	r3, #2
     d5e:	f363 0002 	bfi	r0, r3, #0, #3
     d62:	f36f 00c5 	bfc	r0, #3, #3
     d66:	4b47      	ldr	r3, [pc, #284]	; (e84 <boot_prepare_image_for_update+0x154>)
     d68:	4a47      	ldr	r2, [pc, #284]	; (e88 <boot_prepare_image_for_update+0x158>)
     d6a:	1a9b      	subs	r3, r3, r2
     d6c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     d70:	f363 108f 	bfi	r0, r3, #6, #10
     d74:	2280      	movs	r2, #128	; 0x80
     d76:	4945      	ldr	r1, [pc, #276]	; (e8c <boot_prepare_image_for_update+0x15c>)
     d78:	f005 fdc3 	bl	6902 <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d7c:	2301      	movs	r3, #1
     d7e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    }
}
     d82:	bd38      	pop	{r3, r4, r5, pc}
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     d84:	f04f 0000 	mov.w	r0, #0
     d88:	2302      	movs	r3, #2
     d8a:	f363 0002 	bfi	r0, r3, #0, #3
     d8e:	f36f 00c5 	bfc	r0, #3, #3
     d92:	4b3c      	ldr	r3, [pc, #240]	; (e84 <boot_prepare_image_for_update+0x154>)
     d94:	4a3c      	ldr	r2, [pc, #240]	; (e88 <boot_prepare_image_for_update+0x158>)
     d96:	1a9b      	subs	r3, r3, r2
     d98:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     d9c:	f363 108f 	bfi	r0, r3, #6, #10
     da0:	2200      	movs	r2, #0
     da2:	493b      	ldr	r1, [pc, #236]	; (e90 <boot_prepare_image_for_update+0x160>)
     da4:	f005 fdad 	bl	6902 <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     da8:	2301      	movs	r3, #1
     daa:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return;
     dae:	e7e8      	b.n	d82 <boot_prepare_image_for_update+0x52>
        boot_status_reset(bs);
     db0:	4628      	mov	r0, r5
     db2:	f005 f80e 	bl	5dd2 <boot_status_reset>
        rc = swap_read_status(state, bs);
     db6:	4629      	mov	r1, r5
     db8:	4620      	mov	r0, r4
     dba:	f005 f8d7 	bl	5f6c <swap_read_status>
        if (rc != 0) {
     dbe:	b9e8      	cbnz	r0, dfc <boot_prepare_image_for_update+0xcc>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     dc0:	4628      	mov	r0, r5
     dc2:	f005 f810 	bl	5de6 <boot_status_is_reset>
     dc6:	f080 0101 	eor.w	r1, r0, #1
     dca:	462a      	mov	r2, r5
     dcc:	b2c9      	uxtb	r1, r1
     dce:	4620      	mov	r0, r4
     dd0:	f004 ffc8 	bl	5d64 <boot_read_image_headers>
        if (rc != 0) {
     dd4:	bb40      	cbnz	r0, e28 <boot_prepare_image_for_update+0xf8>
        if (!boot_status_is_reset(bs)) {
     dd6:	4628      	mov	r0, r5
     dd8:	f005 f805 	bl	5de6 <boot_status_is_reset>
     ddc:	2800      	cmp	r0, #0
     dde:	d039      	beq.n	e54 <boot_prepare_image_for_update+0x124>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     de0:	79eb      	ldrb	r3, [r5, #7]
     de2:	2b01      	cmp	r3, #1
     de4:	d043      	beq.n	e6e <boot_prepare_image_for_update+0x13e>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
     de6:	462a      	mov	r2, r5
     de8:	2101      	movs	r1, #1
     dea:	4620      	mov	r0, r4
     dec:	f7ff fea0 	bl	b30 <boot_validate_slot>
     df0:	2800      	cmp	r0, #0
     df2:	d043      	beq.n	e7c <boot_prepare_image_for_update+0x14c>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     df4:	2305      	movs	r3, #5
     df6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     dfa:	e7c2      	b.n	d82 <boot_prepare_image_for_update+0x52>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     dfc:	f04f 0000 	mov.w	r0, #0
     e00:	2302      	movs	r3, #2
     e02:	f363 0002 	bfi	r0, r3, #0, #3
     e06:	f36f 00c5 	bfc	r0, #3, #3
     e0a:	4b1e      	ldr	r3, [pc, #120]	; (e84 <boot_prepare_image_for_update+0x154>)
     e0c:	4a1e      	ldr	r2, [pc, #120]	; (e88 <boot_prepare_image_for_update+0x158>)
     e0e:	1a9b      	subs	r3, r3, r2
     e10:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     e14:	f363 108f 	bfi	r0, r3, #6, #10
     e18:	2200      	movs	r2, #0
     e1a:	491e      	ldr	r1, [pc, #120]	; (e94 <boot_prepare_image_for_update+0x164>)
     e1c:	f005 fd71 	bl	6902 <log_string_sync>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     e20:	2301      	movs	r3, #1
     e22:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            return;
     e26:	e7ac      	b.n	d82 <boot_prepare_image_for_update+0x52>
            BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     e28:	f04f 0000 	mov.w	r0, #0
     e2c:	2302      	movs	r3, #2
     e2e:	f363 0002 	bfi	r0, r3, #0, #3
     e32:	f36f 00c5 	bfc	r0, #3, #3
     e36:	4b13      	ldr	r3, [pc, #76]	; (e84 <boot_prepare_image_for_update+0x154>)
     e38:	4a13      	ldr	r2, [pc, #76]	; (e88 <boot_prepare_image_for_update+0x158>)
     e3a:	1a9b      	subs	r3, r3, r2
     e3c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     e40:	f363 108f 	bfi	r0, r3, #6, #10
     e44:	2200      	movs	r2, #0
     e46:	4912      	ldr	r1, [pc, #72]	; (e90 <boot_prepare_image_for_update+0x160>)
     e48:	f005 fd5b 	bl	6902 <log_string_sync>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     e4c:	2301      	movs	r3, #1
     e4e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            return;
     e52:	e796      	b.n	d82 <boot_prepare_image_for_update+0x52>
            rc = boot_complete_partial_swap(state, bs);
     e54:	4629      	mov	r1, r5
     e56:	4620      	mov	r0, r4
     e58:	f7ff ff24 	bl	ca4 <boot_complete_partial_swap>
            rc = boot_read_image_headers(state, false, bs);
     e5c:	462a      	mov	r2, r5
     e5e:	2100      	movs	r1, #0
     e60:	4620      	mov	r0, r4
     e62:	f004 ff7f 	bl	5d64 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     e66:	2301      	movs	r3, #1
     e68:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     e6c:	e789      	b.n	d82 <boot_prepare_image_for_update+0x52>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     e6e:	4629      	mov	r1, r5
     e70:	4620      	mov	r0, r4
     e72:	f004 ff92 	bl	5d9a <boot_validated_swap_type>
     e76:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
     e7a:	e782      	b.n	d82 <boot_prepare_image_for_update+0x52>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
     e7c:	79eb      	ldrb	r3, [r5, #7]
     e7e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     e82:	e77e      	b.n	d82 <boot_prepare_image_for_update+0x52>
     e84:	000094ec 	.word	0x000094ec
     e88:	000094e4 	.word	0x000094e4
     e8c:	0000976c 	.word	0x0000976c
     e90:	000097ac 	.word	0x000097ac
     e94:	000097d4 	.word	0x000097d4

00000e98 <boot_copy_region>:
{
     e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e9c:	4688      	mov	r8, r1
     e9e:	4691      	mov	r9, r2
     ea0:	461f      	mov	r7, r3
     ea2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
     ea6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
     ea8:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
     eaa:	e00f      	b.n	ecc <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     eac:	4623      	mov	r3, r4
     eae:	4a0f      	ldr	r2, [pc, #60]	; (eec <boot_copy_region+0x54>)
     eb0:	19e9      	adds	r1, r5, r7
     eb2:	4640      	mov	r0, r8
     eb4:	f005 fe0e 	bl	6ad4 <flash_area_read>
        if (rc != 0) {
     eb8:	b9a0      	cbnz	r0, ee4 <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     eba:	4623      	mov	r3, r4
     ebc:	4a0b      	ldr	r2, [pc, #44]	; (eec <boot_copy_region+0x54>)
     ebe:	eb05 010a 	add.w	r1, r5, sl
     ec2:	4648      	mov	r0, r9
     ec4:	f005 fe25 	bl	6b12 <flash_area_write>
        if (rc != 0) {
     ec8:	b970      	cbnz	r0, ee8 <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
     eca:	4425      	add	r5, r4
    while (bytes_copied < sz) {
     ecc:	42b5      	cmp	r5, r6
     ece:	d206      	bcs.n	ede <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
     ed0:	1b74      	subs	r4, r6, r5
     ed2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
     ed6:	d9e9      	bls.n	eac <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
     ed8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     edc:	e7e6      	b.n	eac <boot_copy_region+0x14>
    return 0;
     ede:	2000      	movs	r0, #0
}
     ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
     ee4:	2001      	movs	r0, #1
     ee6:	e7fb      	b.n	ee0 <boot_copy_region+0x48>
            return BOOT_EFLASH;
     ee8:	2001      	movs	r0, #1
     eea:	e7f9      	b.n	ee0 <boot_copy_region+0x48>
     eec:	20021ac4 	.word	0x20021ac4

00000ef0 <context_boot_go>:

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     ef0:	b570      	push	{r4, r5, r6, lr}
     ef2:	b084      	sub	sp, #16
     ef4:	4604      	mov	r4, r0
     ef6:	460d      	mov	r5, r1
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
     ef8:	2260      	movs	r2, #96	; 0x60
     efa:	2100      	movs	r1, #0
     efc:	f006 f841 	bl	6f82 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     f00:	4b3d      	ldr	r3, [pc, #244]	; (ff8 <context_boot_go+0x108>)
     f02:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     f04:	4b3d      	ldr	r3, [pc, #244]	; (ffc <context_boot_go+0x10c>)
     f06:	6523      	str	r3, [r4, #80]	; 0x50
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     f08:	2600      	movs	r6, #0
     f0a:	e00c      	b.n	f26 <context_boot_go+0x36>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     f0c:	4631      	mov	r1, r6
     f0e:	2000      	movs	r0, #0
     f10:	f004 fb97 	bl	5642 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     f14:	212c      	movs	r1, #44	; 0x2c
     f16:	fb01 f106 	mul.w	r1, r1, r6
     f1a:	3120      	adds	r1, #32
     f1c:	4421      	add	r1, r4
     f1e:	b2c0      	uxtb	r0, r0
     f20:	f001 f81a 	bl	1f58 <flash_area_open>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     f24:	3601      	adds	r6, #1
     f26:	2e01      	cmp	r6, #1
     f28:	d9f0      	bls.n	f0c <context_boot_go+0x1c>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
     f2a:	4669      	mov	r1, sp
     f2c:	4620      	mov	r0, r4
     f2e:	f7ff feff 	bl	d30 <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     f32:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     f36:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     f3a:	2b04      	cmp	r3, #4
     f3c:	d825      	bhi.n	f8a <context_boot_go+0x9a>
     f3e:	2b02      	cmp	r3, #2
     f40:	d22e      	bcs.n	fa0 <context_boot_go+0xb0>
     f42:	2b01      	cmp	r3, #1
     f44:	d131      	bne.n	faa <context_boot_go+0xba>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     f46:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     f4a:	2bff      	cmp	r3, #255	; 0xff
     f4c:	d031      	beq.n	fb2 <context_boot_go+0xc2>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     f4e:	2b01      	cmp	r3, #1
     f50:	d006      	beq.n	f60 <context_boot_go+0x70>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     f52:	466a      	mov	r2, sp
     f54:	2100      	movs	r1, #0
     f56:	4620      	mov	r0, r4
     f58:	f004 ff04 	bl	5d64 <boot_read_image_headers>
            if (rc != 0) {
     f5c:	4606      	mov	r6, r0
     f5e:	b990      	cbnz	r0, f86 <context_boot_go+0x96>
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
		rc = boot_validate_slot(state, BOOT_PRIMARY_SLOT, NULL);
     f60:	2200      	movs	r2, #0
     f62:	4611      	mov	r1, r2
     f64:	4620      	mov	r0, r4
     f66:	f7ff fde3 	bl	b30 <boot_validate_slot>
		if (rc != 0) {
     f6a:	4606      	mov	r6, r0
     f6c:	bb98      	cbnz	r0, fd6 <context_boot_go+0xe6>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     f6e:	2210      	movs	r2, #16
     f70:	2100      	movs	r1, #0
     f72:	4668      	mov	r0, sp
     f74:	f006 f805 	bl	6f82 <memset>

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
     f78:	6a23      	ldr	r3, [r4, #32]
     f7a:	785b      	ldrb	r3, [r3, #1]
     f7c:	712b      	strb	r3, [r5, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
     f7e:	6a23      	ldr	r3, [r4, #32]
     f80:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
     f82:	60ab      	str	r3, [r5, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
     f84:	602c      	str	r4, [r5, #0]
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     f86:	2500      	movs	r5, #0
     f88:	e030      	b.n	fec <context_boot_go+0xfc>
        switch (BOOT_SWAP_TYPE(state)) {
     f8a:	2b05      	cmp	r3, #5
     f8c:	d10d      	bne.n	faa <context_boot_go+0xba>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     f8e:	2000      	movs	r0, #0
     f90:	f005 f838 	bl	6004 <swap_set_image_ok>
            if (rc != 0) {
     f94:	2800      	cmp	r0, #0
     f96:	d0d6      	beq.n	f46 <context_boot_go+0x56>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     f98:	23ff      	movs	r3, #255	; 0xff
     f9a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     f9e:	e7d2      	b.n	f46 <context_boot_go+0x56>
            rc = boot_perform_update(state, &bs);
     fa0:	4669      	mov	r1, sp
     fa2:	4620      	mov	r0, r4
     fa4:	f004 ff30 	bl	5e08 <boot_perform_update>
            break;
     fa8:	e7cd      	b.n	f46 <context_boot_go+0x56>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     faa:	23ff      	movs	r3, #255	; 0xff
     fac:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     fb0:	e7c9      	b.n	f46 <context_boot_go+0x56>
            BOOT_LOG_ERR("panic!");
     fb2:	f04f 0000 	mov.w	r0, #0
     fb6:	2301      	movs	r3, #1
     fb8:	f363 0002 	bfi	r0, r3, #0, #3
     fbc:	f36f 00c5 	bfc	r0, #3, #3
     fc0:	4b0f      	ldr	r3, [pc, #60]	; (1000 <context_boot_go+0x110>)
     fc2:	4a10      	ldr	r2, [pc, #64]	; (1004 <context_boot_go+0x114>)
     fc4:	1a9b      	subs	r3, r3, r2
     fc6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     fca:	f363 108f 	bfi	r0, r3, #6, #10
     fce:	490e      	ldr	r1, [pc, #56]	; (1008 <context_boot_go+0x118>)
     fd0:	f005 fc97 	bl	6902 <log_string_sync>
            while (1) {}
     fd4:	e7fe      	b.n	fd4 <context_boot_go+0xe4>
			rc = BOOT_EBADIMAGE;
     fd6:	2603      	movs	r6, #3
     fd8:	e7d5      	b.n	f86 <context_boot_go+0x96>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     fda:	f1c5 0301 	rsb	r3, r5, #1
     fde:	222c      	movs	r2, #44	; 0x2c
     fe0:	fb02 4303 	mla	r3, r2, r3, r4
     fe4:	6a18      	ldr	r0, [r3, #32]
     fe6:	f005 fd74 	bl	6ad2 <flash_area_close>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     fea:	3501      	adds	r5, #1
     fec:	2d01      	cmp	r5, #1
     fee:	d9f4      	bls.n	fda <context_boot_go+0xea>
        }
    }
    return rc;
}
     ff0:	4630      	mov	r0, r6
     ff2:	b004      	add	sp, #16
     ff4:	bd70      	pop	{r4, r5, r6, pc}
     ff6:	bf00      	nop
     ff8:	20021ec4 	.word	0x20021ec4
     ffc:	200222c4 	.word	0x200222c4
    1000:	000094ec 	.word	0x000094ec
    1004:	000094e4 	.word	0x000094e4
    1008:	00009764 	.word	0x00009764

0000100c <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    100c:	b508      	push	{r3, lr}
    100e:	4601      	mov	r1, r0
    return context_boot_go(&boot_data, rsp);
    1010:	4801      	ldr	r0, [pc, #4]	; (1018 <boot_go+0xc>)
    1012:	f7ff ff6d 	bl	ef0 <context_boot_go>
}
    1016:	bd08      	pop	{r3, pc}
    1018:	20021a64 	.word	0x20021a64

0000101c <boot_move_sector_up>:
 */
static void
boot_move_sector_up(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs, const struct flash_area *fap_pri,
        const struct flash_area *fap_sec)
{
    101c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1020:	b083      	sub	sp, #12
    1022:	460f      	mov	r7, r1
    1024:	4615      	mov	r5, r2
    1026:	461c      	mov	r4, r3
    1028:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    102c:	6a53      	ldr	r3, [r2, #36]	; 0x24
    102e:	f853 6030 	ldr.w	r6, [r3, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    1032:	681a      	ldr	r2, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1034:	1ab6      	subs	r6, r6, r2
     * would be enough
     */

    /* Calculate offset from start of image area. */
    new_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);
    old_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx - 1);
    1036:	3801      	subs	r0, #1
    1038:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    103c:	eba3 0902 	sub.w	r9, r3, r2

    if (bs->idx == BOOT_STATUS_IDX_0) {
    1040:	6823      	ldr	r3, [r4, #0]
    1042:	2b01      	cmp	r3, #1
    1044:	d01b      	beq.n	107e <boot_move_sector_up+0x62>

        rc = swap_erase_trailer_sectors(state, fap_sec);
        assert(rc == 0);
    }

    rc = boot_erase_region(fap_pri, new_off, sz);
    1046:	463a      	mov	r2, r7
    1048:	4631      	mov	r1, r6
    104a:	4640      	mov	r0, r8
    104c:	f004 ff30 	bl	5eb0 <boot_erase_region>
    assert(rc == 0);

    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    1050:	9701      	str	r7, [sp, #4]
    1052:	9600      	str	r6, [sp, #0]
    1054:	464b      	mov	r3, r9
    1056:	4642      	mov	r2, r8
    1058:	4641      	mov	r1, r8
    105a:	4628      	mov	r0, r5
    105c:	f7ff ff1c 	bl	e98 <boot_copy_region>
    assert(rc == 0);

    rc = boot_write_status(state, bs);
    1060:	4621      	mov	r1, r4
    1062:	4628      	mov	r0, r5
    1064:	f004 fef1 	bl	5e4a <boot_write_status>

    bs->idx++;
    1068:	6823      	ldr	r3, [r4, #0]
    106a:	3301      	adds	r3, #1
    106c:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    106e:	b118      	cbz	r0, 1078 <boot_move_sector_up+0x5c>
    1070:	4a0a      	ldr	r2, [pc, #40]	; (109c <boot_move_sector_up+0x80>)
    1072:	6813      	ldr	r3, [r2, #0]
    1074:	3301      	adds	r3, #1
    1076:	6013      	str	r3, [r2, #0]
}
    1078:	b003      	add	sp, #12
    107a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = swap_erase_trailer_sectors(state, fap_pri);
    107e:	4641      	mov	r1, r8
    1080:	4628      	mov	r0, r5
    1082:	f004 ff19 	bl	5eb8 <swap_erase_trailer_sectors>
        rc = swap_status_init(state, fap_pri, bs);
    1086:	4622      	mov	r2, r4
    1088:	4641      	mov	r1, r8
    108a:	4628      	mov	r0, r5
    108c:	f004 ff4c 	bl	5f28 <swap_status_init>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1090:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1092:	4628      	mov	r0, r5
    1094:	f004 ff10 	bl	5eb8 <swap_erase_trailer_sectors>
    1098:	e7d5      	b.n	1046 <boot_move_sector_up+0x2a>
    109a:	bf00      	nop
    109c:	200227c4 	.word	0x200227c4

000010a0 <boot_swap_sectors>:

static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs, const struct flash_area *fap_pri,
        const struct flash_area *fap_sec)
{
    10a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    10a4:	b083      	sub	sp, #12
    10a6:	460e      	mov	r6, r1
    10a8:	4615      	mov	r5, r2
    10aa:	461c      	mov	r4, r3
    10ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
    10ae:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    10b2:	6813      	ldr	r3, [r2, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    10b4:	eba1 0803 	sub.w	r8, r1, r3
    uint32_t pri_up_off;
    uint32_t sec_off;
    int rc;

    pri_up_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);
    pri_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx - 1);
    10b8:	3801      	subs	r0, #1
    10ba:	f852 7030 	ldr.w	r7, [r2, r0, lsl #3]
    10be:	1aff      	subs	r7, r7, r3
    10c0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    10c2:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    10c6:	6813      	ldr	r3, [r2, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    10c8:	eba1 0903 	sub.w	r9, r1, r3
    sec_off = boot_img_sector_off(state, BOOT_SECONDARY_SLOT, idx - 1);

    if (bs->state == BOOT_STATUS_STATE_0) {
    10cc:	7923      	ldrb	r3, [r4, #4]
    10ce:	2b01      	cmp	r3, #1
    10d0:	d005      	beq.n	10de <boot_swap_sectors+0x3e>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    10d2:	7923      	ldrb	r3, [r4, #4]
    10d4:	2b02      	cmp	r3, #2
    10d6:	d01c      	beq.n	1112 <boot_swap_sectors+0x72>
        rc = boot_write_status(state, bs);
        bs->idx++;
        bs->state = BOOT_STATUS_STATE_0;
        BOOT_STATUS_ASSERT(rc == 0);
    }
}
    10d8:	b003      	add	sp, #12
    10da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = boot_erase_region(fap_pri, pri_off, sz);
    10de:	4632      	mov	r2, r6
    10e0:	4639      	mov	r1, r7
    10e2:	980a      	ldr	r0, [sp, #40]	; 0x28
    10e4:	f004 fee4 	bl	5eb0 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    10e8:	9601      	str	r6, [sp, #4]
    10ea:	9700      	str	r7, [sp, #0]
    10ec:	464b      	mov	r3, r9
    10ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    10f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    10f2:	4628      	mov	r0, r5
    10f4:	f7ff fed0 	bl	e98 <boot_copy_region>
        rc = boot_write_status(state, bs);
    10f8:	4621      	mov	r1, r4
    10fa:	4628      	mov	r0, r5
    10fc:	f004 fea5 	bl	5e4a <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1100:	2302      	movs	r3, #2
    1102:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1104:	2800      	cmp	r0, #0
    1106:	d0e4      	beq.n	10d2 <boot_swap_sectors+0x32>
    1108:	4a11      	ldr	r2, [pc, #68]	; (1150 <boot_swap_sectors+0xb0>)
    110a:	6813      	ldr	r3, [r2, #0]
    110c:	3301      	adds	r3, #1
    110e:	6013      	str	r3, [r2, #0]
    1110:	e7df      	b.n	10d2 <boot_swap_sectors+0x32>
        rc = boot_erase_region(fap_sec, sec_off, sz);
    1112:	4632      	mov	r2, r6
    1114:	4649      	mov	r1, r9
    1116:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1118:	f004 feca 	bl	5eb0 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    111c:	9601      	str	r6, [sp, #4]
    111e:	f8cd 9000 	str.w	r9, [sp]
    1122:	4643      	mov	r3, r8
    1124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1126:	990a      	ldr	r1, [sp, #40]	; 0x28
    1128:	4628      	mov	r0, r5
    112a:	f7ff feb5 	bl	e98 <boot_copy_region>
        rc = boot_write_status(state, bs);
    112e:	4621      	mov	r1, r4
    1130:	4628      	mov	r0, r5
    1132:	f004 fe8a 	bl	5e4a <boot_write_status>
        bs->idx++;
    1136:	6823      	ldr	r3, [r4, #0]
    1138:	3301      	adds	r3, #1
    113a:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    113c:	2301      	movs	r3, #1
    113e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1140:	2800      	cmp	r0, #0
    1142:	d0c9      	beq.n	10d8 <boot_swap_sectors+0x38>
    1144:	4a02      	ldr	r2, [pc, #8]	; (1150 <boot_swap_sectors+0xb0>)
    1146:	6813      	ldr	r3, [r2, #0]
    1148:	3301      	adds	r3, #1
    114a:	6013      	str	r3, [r2, #0]
}
    114c:	e7c4      	b.n	10d8 <boot_swap_sectors+0x38>
    114e:	bf00      	nop
    1150:	200227c4 	.word	0x200227c4

00001154 <boot_read_image_header>:
{
    1154:	b570      	push	{r4, r5, r6, lr}
    1156:	b082      	sub	sp, #8
    1158:	4615      	mov	r5, r2
    if (bs) {
    115a:	461e      	mov	r6, r3
    115c:	2b00      	cmp	r3, #0
    115e:	d036      	beq.n	11ce <boot_read_image_header+0x7a>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    1160:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1162:	685c      	ldr	r4, [r3, #4]
        if (bs->op == BOOT_STATUS_OP_MOVE) {
    1164:	7973      	ldrb	r3, [r6, #5]
    1166:	2b01      	cmp	r3, #1
    1168:	d011      	beq.n	118e <boot_read_image_header+0x3a>
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
    116a:	2b02      	cmp	r3, #2
    116c:	d017      	beq.n	119e <boot_read_image_header+0x4a>
    off = 0;
    116e:	2400      	movs	r4, #0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1170:	2000      	movs	r0, #0
    1172:	f004 fa66 	bl	5642 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1176:	a901      	add	r1, sp, #4
    1178:	b2c0      	uxtb	r0, r0
    117a:	f000 feed 	bl	1f58 <flash_area_open>
    if (rc != 0) {
    117e:	b368      	cbz	r0, 11dc <boot_read_image_header+0x88>
        rc = BOOT_EFLASH;
    1180:	2401      	movs	r4, #1
    flash_area_close(fap);
    1182:	9801      	ldr	r0, [sp, #4]
    1184:	f005 fca5 	bl	6ad2 <flash_area_close>
}
    1188:	4620      	mov	r0, r4
    118a:	b002      	add	sp, #8
    118c:	bd70      	pop	{r4, r5, r6, pc}
            if (slot == 0 && bs->idx > g_last_idx) {
    118e:	bb01      	cbnz	r1, 11d2 <boot_read_image_header+0x7e>
    1190:	6832      	ldr	r2, [r6, #0]
    1192:	4b1c      	ldr	r3, [pc, #112]	; (1204 <boot_read_image_header+0xb0>)
    1194:	681b      	ldr	r3, [r3, #0]
    1196:	429a      	cmp	r2, r3
    1198:	d8ea      	bhi.n	1170 <boot_read_image_header+0x1c>
    off = 0;
    119a:	2400      	movs	r4, #0
    119c:	e7e8      	b.n	1170 <boot_read_image_header+0x1c>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
    119e:	6833      	ldr	r3, [r6, #0]
    11a0:	2b01      	cmp	r3, #1
    11a2:	d907      	bls.n	11b4 <boot_read_image_header+0x60>
    11a4:	4a17      	ldr	r2, [pc, #92]	; (1204 <boot_read_image_header+0xb0>)
    11a6:	6812      	ldr	r2, [r2, #0]
    11a8:	4293      	cmp	r3, r2
    11aa:	d803      	bhi.n	11b4 <boot_read_image_header+0x60>
                if (slot == 0) {
    11ac:	b999      	cbnz	r1, 11d6 <boot_read_image_header+0x82>
    off = 0;
    11ae:	2400      	movs	r4, #0
                    slot = 1;
    11b0:	2101      	movs	r1, #1
    11b2:	e7dd      	b.n	1170 <boot_read_image_header+0x1c>
            } else if (bs->idx == 1) {
    11b4:	2b01      	cmp	r3, #1
    11b6:	d001      	beq.n	11bc <boot_read_image_header+0x68>
    off = 0;
    11b8:	2400      	movs	r4, #0
    11ba:	e7d9      	b.n	1170 <boot_read_image_header+0x1c>
                if (slot == 0) {
    11bc:	b101      	cbz	r1, 11c0 <boot_read_image_header+0x6c>
    off = 0;
    11be:	2400      	movs	r4, #0
                if (slot == 1 && bs->state == 2) {
    11c0:	2901      	cmp	r1, #1
    11c2:	d1d5      	bne.n	1170 <boot_read_image_header+0x1c>
    11c4:	7933      	ldrb	r3, [r6, #4]
    11c6:	2b02      	cmp	r3, #2
    11c8:	d1d2      	bne.n	1170 <boot_read_image_header+0x1c>
                    slot = 0;
    11ca:	2100      	movs	r1, #0
    11cc:	e7d0      	b.n	1170 <boot_read_image_header+0x1c>
    off = 0;
    11ce:	2400      	movs	r4, #0
    11d0:	e7ce      	b.n	1170 <boot_read_image_header+0x1c>
    11d2:	2400      	movs	r4, #0
    11d4:	e7cc      	b.n	1170 <boot_read_image_header+0x1c>
    11d6:	2400      	movs	r4, #0
                    slot = 0;
    11d8:	4621      	mov	r1, r4
    11da:	e7c9      	b.n	1170 <boot_read_image_header+0x1c>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
    11dc:	2320      	movs	r3, #32
    11de:	462a      	mov	r2, r5
    11e0:	4621      	mov	r1, r4
    11e2:	9801      	ldr	r0, [sp, #4]
    11e4:	f005 fc76 	bl	6ad4 <flash_area_read>
    if (rc != 0) {
    11e8:	4604      	mov	r4, r0
    11ea:	b940      	cbnz	r0, 11fe <boot_read_image_header+0xaa>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
    11ec:	2e00      	cmp	r6, #0
    11ee:	d0c8      	beq.n	1182 <boot_read_image_header+0x2e>
    11f0:	682a      	ldr	r2, [r5, #0]
    11f2:	4b05      	ldr	r3, [pc, #20]	; (1208 <boot_read_image_header+0xb4>)
    11f4:	429a      	cmp	r2, r3
    11f6:	d0c4      	beq.n	1182 <boot_read_image_header+0x2e>
        rc = -1;
    11f8:	f04f 34ff 	mov.w	r4, #4294967295
    11fc:	e7c1      	b.n	1182 <boot_read_image_header+0x2e>
        rc = BOOT_EFLASH;
    11fe:	2401      	movs	r4, #1
    1200:	e7bf      	b.n	1182 <boot_read_image_header+0x2e>
    1202:	bf00      	nop
    1204:	20020000 	.word	0x20020000
    1208:	96f3b83d 	.word	0x96f3b83d

0000120c <swap_read_status_bytes>:
{
    120c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1210:	b085      	sub	sp, #20
    1212:	4606      	mov	r6, r0
    1214:	460d      	mov	r5, r1
    1216:	9201      	str	r2, [sp, #4]
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    1218:	4601      	mov	r1, r0
    121a:	2000      	movs	r0, #0
    121c:	f004 fc0e 	bl	5a3c <boot_status_entries>
    if (max_entries < 0) {
    1220:	1e04      	subs	r4, r0, #0
    1222:	db62      	blt.n	12ea <swap_read_status_bytes+0xde>
    write_sz = BOOT_WRITE_SZ(state);
    1224:	f8d5 a05c 	ldr.w	sl, [r5, #92]	; 0x5c
    off = boot_status_off(fap);
    1228:	4630      	mov	r0, r6
    122a:	f004 fc15 	bl	5a58 <boot_status_off>
    122e:	4681      	mov	r9, r0
    erased_sections = 0;
    1230:	f04f 0b00 	mov.w	fp, #0
    last_rc = 1;
    1234:	2701      	movs	r7, #1
    found_idx = -1;
    1236:	f04f 38ff 	mov.w	r8, #4294967295
    for (i = max_entries; i > 0; i--) {
    123a:	e005      	b.n	1248 <swap_read_status_bytes+0x3c>
            if (rc != last_rc) {
    123c:	4287      	cmp	r7, r0
    123e:	d001      	beq.n	1244 <swap_read_status_bytes+0x38>
                erased_sections++;
    1240:	f10b 0b01 	add.w	fp, fp, #1
                found_idx = i;
    1244:	462c      	mov	r4, r5
    1246:	4607      	mov	r7, r0
    for (i = max_entries; i > 0; i--) {
    1248:	2c00      	cmp	r4, #0
    124a:	dd13      	ble.n	1274 <swap_read_status_bytes+0x68>
        rc = flash_area_read_is_empty(fap, off + (i - 1) * write_sz, &status, 1);
    124c:	1e65      	subs	r5, r4, #1
    124e:	fa5f f18a 	uxtb.w	r1, sl
    1252:	2301      	movs	r3, #1
    1254:	f10d 020f 	add.w	r2, sp, #15
    1258:	fb05 9101 	mla	r1, r5, r1, r9
    125c:	4630      	mov	r0, r6
    125e:	f004 f9fc 	bl	565a <flash_area_read_is_empty>
        if (rc < 0) {
    1262:	2800      	cmp	r0, #0
    1264:	db43      	blt.n	12ee <swap_read_status_bytes+0xe2>
        if (rc == 1) {
    1266:	2801      	cmp	r0, #1
    1268:	d0e8      	beq.n	123c <swap_read_status_bytes+0x30>
            if (found_idx == -1) {
    126a:	f1b8 3fff 	cmp.w	r8, #4294967295
    126e:	d1e9      	bne.n	1244 <swap_read_status_bytes+0x38>
                found_idx = i;
    1270:	46a0      	mov	r8, r4
    1272:	e7e7      	b.n	1244 <swap_read_status_bytes+0x38>
    if (erased_sections > 1) {
    1274:	f1bb 0f01 	cmp.w	fp, #1
    1278:	dc0e      	bgt.n	1298 <swap_read_status_bytes+0x8c>
    if (found_idx == -1) {
    127a:	f1b8 3fff 	cmp.w	r8, #4294967295
    127e:	d03a      	beq.n	12f6 <swap_read_status_bytes+0xea>
    } else if (found_idx < move_entries) {
    1280:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
    1284:	dc1a      	bgt.n	12bc <swap_read_status_bytes+0xb0>
        bs->op = BOOT_STATUS_OP_MOVE;
    1286:	2301      	movs	r3, #1
    1288:	9901      	ldr	r1, [sp, #4]
    128a:	714b      	strb	r3, [r1, #5]
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
    128c:	eb08 0203 	add.w	r2, r8, r3
    1290:	600a      	str	r2, [r1, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
    1292:	710b      	strb	r3, [r1, #4]
    return 0;
    1294:	2000      	movs	r0, #0
    1296:	e02b      	b.n	12f0 <swap_read_status_bytes+0xe4>
        BOOT_LOG_ERR("Detected inconsistent status!");
    1298:	f04f 0000 	mov.w	r0, #0
    129c:	2301      	movs	r3, #1
    129e:	f363 0002 	bfi	r0, r3, #0, #3
    12a2:	f36f 00c5 	bfc	r0, #3, #3
    12a6:	4b15      	ldr	r3, [pc, #84]	; (12fc <swap_read_status_bytes+0xf0>)
    12a8:	4a15      	ldr	r2, [pc, #84]	; (1300 <swap_read_status_bytes+0xf4>)
    12aa:	1a9b      	subs	r3, r3, r2
    12ac:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    12b0:	f363 108f 	bfi	r0, r3, #6, #10
    12b4:	4913      	ldr	r1, [pc, #76]	; (1304 <swap_read_status_bytes+0xf8>)
    12b6:	f005 fb24 	bl	6902 <log_string_sync>
    12ba:	e7de      	b.n	127a <swap_read_status_bytes+0x6e>
        bs->op = BOOT_STATUS_OP_SWAP;
    12bc:	2302      	movs	r3, #2
    12be:	9a01      	ldr	r2, [sp, #4]
    12c0:	7153      	strb	r3, [r2, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    12c2:	f1a8 0880 	sub.w	r8, r8, #128	; 0x80
    12c6:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
    12ca:	105b      	asrs	r3, r3, #1
    12cc:	3301      	adds	r3, #1
    12ce:	6013      	str	r3, [r2, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    12d0:	f1b8 0f00 	cmp.w	r8, #0
    12d4:	f008 0801 	and.w	r8, r8, #1
    12d8:	bfb8      	it	lt
    12da:	f1c8 0800 	rsblt	r8, r8, #0
    12de:	f108 0801 	add.w	r8, r8, #1
    12e2:	f882 8004 	strb.w	r8, [r2, #4]
    return 0;
    12e6:	2000      	movs	r0, #0
    12e8:	e002      	b.n	12f0 <swap_read_status_bytes+0xe4>
        return BOOT_EBADARGS;
    12ea:	2007      	movs	r0, #7
    12ec:	e000      	b.n	12f0 <swap_read_status_bytes+0xe4>
            return BOOT_EFLASH;
    12ee:	2001      	movs	r0, #1
}
    12f0:	b005      	add	sp, #20
    12f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
    12f6:	2000      	movs	r0, #0
    12f8:	e7fa      	b.n	12f0 <swap_read_status_bytes+0xe4>
    12fa:	bf00      	nop
    12fc:	000094ec 	.word	0x000094ec
    1300:	000094e4 	.word	0x000094e4
    1304:	000097fc 	.word	0x000097fc

00001308 <boot_slots_compatible>:
{
    1308:	b538      	push	{r3, r4, r5, lr}
    return BOOT_IMG(state, slot).num_sectors;
    130a:	6a85      	ldr	r5, [r0, #40]	; 0x28
    130c:	6d44      	ldr	r4, [r0, #84]	; 0x54
    if ((num_sectors_pri != num_sectors_sec) &&
    130e:	42a5      	cmp	r5, r4
    1310:	d002      	beq.n	1318 <boot_slots_compatible+0x10>
            (num_sectors_pri != (num_sectors_sec + 1))) {
    1312:	1c63      	adds	r3, r4, #1
    if ((num_sectors_pri != num_sectors_sec) &&
    1314:	42ab      	cmp	r3, r5
    1316:	d111      	bne.n	133c <boot_slots_compatible+0x34>
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
    1318:	2d80      	cmp	r5, #128	; 0x80
    131a:	d822      	bhi.n	1362 <boot_slots_compatible+0x5a>
    for (i = 0; i < num_sectors_sec; i++) {
    131c:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    131e:	4619      	mov	r1, r3
    for (i = 0; i < num_sectors_sec; i++) {
    1320:	42a3      	cmp	r3, r4
    1322:	d244      	bcs.n	13ae <boot_slots_compatible+0xa6>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    1324:	6a42      	ldr	r2, [r0, #36]	; 0x24
    1326:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    132a:	6851      	ldr	r1, [r2, #4]
    132c:	6d02      	ldr	r2, [r0, #80]	; 0x50
    132e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1332:	6852      	ldr	r2, [r2, #4]
        if (sector_sz_pri != sector_sz_sec) {
    1334:	428a      	cmp	r2, r1
    1336:	d127      	bne.n	1388 <boot_slots_compatible+0x80>
    for (i = 0; i < num_sectors_sec; i++) {
    1338:	3301      	adds	r3, #1
    133a:	e7f1      	b.n	1320 <boot_slots_compatible+0x18>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
    133c:	f04f 0000 	mov.w	r0, #0
    1340:	2302      	movs	r3, #2
    1342:	f363 0002 	bfi	r0, r3, #0, #3
    1346:	f36f 00c5 	bfc	r0, #3, #3
    134a:	4b28      	ldr	r3, [pc, #160]	; (13ec <boot_slots_compatible+0xe4>)
    134c:	4a28      	ldr	r2, [pc, #160]	; (13f0 <boot_slots_compatible+0xe8>)
    134e:	1a9b      	subs	r3, r3, r2
    1350:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1354:	f363 108f 	bfi	r0, r3, #6, #10
    1358:	4926      	ldr	r1, [pc, #152]	; (13f4 <boot_slots_compatible+0xec>)
    135a:	f005 fad2 	bl	6902 <log_string_sync>
        return 0;
    135e:	2000      	movs	r0, #0
    1360:	e024      	b.n	13ac <boot_slots_compatible+0xa4>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
    1362:	f04f 0000 	mov.w	r0, #0
    1366:	2302      	movs	r3, #2
    1368:	f363 0002 	bfi	r0, r3, #0, #3
    136c:	f36f 00c5 	bfc	r0, #3, #3
    1370:	4b1e      	ldr	r3, [pc, #120]	; (13ec <boot_slots_compatible+0xe4>)
    1372:	4a1f      	ldr	r2, [pc, #124]	; (13f0 <boot_slots_compatible+0xe8>)
    1374:	1a9b      	subs	r3, r3, r2
    1376:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    137a:	f363 108f 	bfi	r0, r3, #6, #10
    137e:	491e      	ldr	r1, [pc, #120]	; (13f8 <boot_slots_compatible+0xf0>)
    1380:	f005 fabf 	bl	6902 <log_string_sync>
        return 0;
    1384:	2000      	movs	r0, #0
    1386:	e011      	b.n	13ac <boot_slots_compatible+0xa4>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    1388:	f04f 0000 	mov.w	r0, #0
    138c:	2302      	movs	r3, #2
    138e:	f363 0002 	bfi	r0, r3, #0, #3
    1392:	f36f 00c5 	bfc	r0, #3, #3
    1396:	4b15      	ldr	r3, [pc, #84]	; (13ec <boot_slots_compatible+0xe4>)
    1398:	4a15      	ldr	r2, [pc, #84]	; (13f0 <boot_slots_compatible+0xe8>)
    139a:	1a9b      	subs	r3, r3, r2
    139c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    13a0:	f363 108f 	bfi	r0, r3, #6, #10
    13a4:	4915      	ldr	r1, [pc, #84]	; (13fc <boot_slots_compatible+0xf4>)
    13a6:	f005 faac 	bl	6902 <log_string_sync>
            return 0;
    13aa:	2000      	movs	r0, #0
}
    13ac:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > num_sectors_sec) {
    13ae:	42a5      	cmp	r5, r4
    13b0:	d91a      	bls.n	13e8 <boot_slots_compatible+0xe0>
    13b2:	6a42      	ldr	r2, [r0, #36]	; 0x24
    13b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    13b8:	685b      	ldr	r3, [r3, #4]
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    13ba:	4299      	cmp	r1, r3
    13bc:	d101      	bne.n	13c2 <boot_slots_compatible+0xba>
    return 1;
    13be:	2001      	movs	r0, #1
    13c0:	e7f4      	b.n	13ac <boot_slots_compatible+0xa4>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    13c2:	f04f 0000 	mov.w	r0, #0
    13c6:	2302      	movs	r3, #2
    13c8:	f363 0002 	bfi	r0, r3, #0, #3
    13cc:	f36f 00c5 	bfc	r0, #3, #3
    13d0:	4b06      	ldr	r3, [pc, #24]	; (13ec <boot_slots_compatible+0xe4>)
    13d2:	4a07      	ldr	r2, [pc, #28]	; (13f0 <boot_slots_compatible+0xe8>)
    13d4:	1a9b      	subs	r3, r3, r2
    13d6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    13da:	f363 108f 	bfi	r0, r3, #6, #10
    13de:	4907      	ldr	r1, [pc, #28]	; (13fc <boot_slots_compatible+0xf4>)
    13e0:	f005 fa8f 	bl	6902 <log_string_sync>
            return 0;
    13e4:	2000      	movs	r0, #0
    13e6:	e7e1      	b.n	13ac <boot_slots_compatible+0xa4>
    return 1;
    13e8:	2001      	movs	r0, #1
    13ea:	e7df      	b.n	13ac <boot_slots_compatible+0xa4>
    13ec:	000094ec 	.word	0x000094ec
    13f0:	000094e4 	.word	0x000094e4
    13f4:	0000981c 	.word	0x0000981c
    13f8:	00009850 	.word	0x00009850
    13fc:	0000987c 	.word	0x0000987c

00001400 <swap_status_source>:
{
    1400:	b510      	push	{r4, lr}
    1402:	b086      	sub	sp, #24
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1404:	a904      	add	r1, sp, #16
    1406:	2003      	movs	r0, #3
    1408:	f004 fb92 	bl	5b30 <boot_read_swap_state_by_id>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    140c:	f04f 0000 	mov.w	r0, #0
    1410:	2303      	movs	r3, #3
    1412:	f363 0002 	bfi	r0, r3, #0, #3
    1416:	f36f 00c5 	bfc	r0, #3, #3
    141a:	4b26      	ldr	r3, [pc, #152]	; (14b4 <swap_status_source+0xb4>)
    141c:	4a26      	ldr	r2, [pc, #152]	; (14b8 <swap_status_source+0xb8>)
    141e:	1a9b      	subs	r3, r3, r2
    1420:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1424:	f363 108f 	bfi	r0, r3, #6, #10
    1428:	f89d 3010 	ldrb.w	r3, [sp, #16]
    142c:	2b01      	cmp	r3, #1
    142e:	d02d      	beq.n	148c <swap_status_source+0x8c>
    1430:	2b03      	cmp	r3, #3
    1432:	d029      	beq.n	1488 <swap_status_source+0x88>
    1434:	4b21      	ldr	r3, [pc, #132]	; (14bc <swap_status_source+0xbc>)
    1436:	f89d 2011 	ldrb.w	r2, [sp, #17]
    143a:	f89d 1012 	ldrb.w	r1, [sp, #18]
    143e:	f89d 4013 	ldrb.w	r4, [sp, #19]
    1442:	9402      	str	r4, [sp, #8]
    1444:	9101      	str	r1, [sp, #4]
    1446:	9200      	str	r2, [sp, #0]
    1448:	4a1d      	ldr	r2, [pc, #116]	; (14c0 <swap_status_source+0xc0>)
    144a:	491e      	ldr	r1, [pc, #120]	; (14c4 <swap_status_source+0xc4>)
    144c:	f005 fa59 	bl	6902 <log_string_sync>
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    1450:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1454:	2b01      	cmp	r3, #1
    1456:	d103      	bne.n	1460 <swap_status_source+0x60>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
    1458:	f89d 3012 	ldrb.w	r3, [sp, #18]
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    145c:	2b03      	cmp	r3, #3
    145e:	d017      	beq.n	1490 <swap_status_source+0x90>
    BOOT_LOG_INF("Boot source: none");
    1460:	f04f 0000 	mov.w	r0, #0
    1464:	2303      	movs	r3, #3
    1466:	f363 0002 	bfi	r0, r3, #0, #3
    146a:	f36f 00c5 	bfc	r0, #3, #3
    146e:	4b11      	ldr	r3, [pc, #68]	; (14b4 <swap_status_source+0xb4>)
    1470:	4a11      	ldr	r2, [pc, #68]	; (14b8 <swap_status_source+0xb8>)
    1472:	1a9b      	subs	r3, r3, r2
    1474:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1478:	f363 108f 	bfi	r0, r3, #6, #10
    147c:	4912      	ldr	r1, [pc, #72]	; (14c8 <swap_status_source+0xc8>)
    147e:	f005 fa40 	bl	6902 <log_string_sync>
    return BOOT_STATUS_SOURCE_NONE;
    1482:	2000      	movs	r0, #0
}
    1484:	b006      	add	sp, #24
    1486:	bd10      	pop	{r4, pc}
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1488:	4b10      	ldr	r3, [pc, #64]	; (14cc <swap_status_source+0xcc>)
    148a:	e7d4      	b.n	1436 <swap_status_source+0x36>
    148c:	4b10      	ldr	r3, [pc, #64]	; (14d0 <swap_status_source+0xd0>)
    148e:	e7d2      	b.n	1436 <swap_status_source+0x36>
        BOOT_LOG_INF("Boot source: primary slot");
    1490:	f04f 0000 	mov.w	r0, #0
    1494:	f363 0002 	bfi	r0, r3, #0, #3
    1498:	f36f 00c5 	bfc	r0, #3, #3
    149c:	4b05      	ldr	r3, [pc, #20]	; (14b4 <swap_status_source+0xb4>)
    149e:	4a06      	ldr	r2, [pc, #24]	; (14b8 <swap_status_source+0xb8>)
    14a0:	1a9b      	subs	r3, r3, r2
    14a2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    14a6:	f363 108f 	bfi	r0, r3, #6, #10
    14aa:	490a      	ldr	r1, [pc, #40]	; (14d4 <swap_status_source+0xd4>)
    14ac:	f005 fa29 	bl	6902 <log_string_sync>
        return source;
    14b0:	2002      	movs	r0, #2
    14b2:	e7e7      	b.n	1484 <swap_status_source+0x84>
    14b4:	000094ec 	.word	0x000094ec
    14b8:	000094e4 	.word	0x000094e4
    14bc:	000098a4 	.word	0x000098a4
    14c0:	000098b8 	.word	0x000098b8
    14c4:	000098c8 	.word	0x000098c8
    14c8:	00009920 	.word	0x00009920
    14cc:	000098b0 	.word	0x000098b0
    14d0:	000098a8 	.word	0x000098a8
    14d4:	00009904 	.word	0x00009904

000014d8 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec, uint8_t sec_id)
{
    14d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14da:	b087      	sub	sp, #28
    14dc:	460c      	mov	r4, r1
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    14de:	6849      	ldr	r1, [r1, #4]
    14e0:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
    14e4:	4d23      	ldr	r5, [pc, #140]	; (1574 <fixup_revert+0x9c>)
    14e6:	42a9      	cmp	r1, r5
    14e8:	d104      	bne.n	14f4 <fixup_revert+0x1c>
    14ea:	4606      	mov	r6, r0
    14ec:	4617      	mov	r7, r2
        bs->op != BOOT_STATUS_OP_MOVE ||
        bs->idx != BOOT_STATUS_IDX_0) {
    14ee:	6822      	ldr	r2, [r4, #0]
        bs->op != BOOT_STATUS_OP_MOVE ||
    14f0:	2a01      	cmp	r2, #1
    14f2:	d001      	beq.n	14f8 <fixup_revert+0x20>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
        assert(rc == 0);
    }
}
    14f4:	b007      	add	sp, #28
    14f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = boot_read_swap_state_by_id(sec_id, &swap_state);
    14f8:	a904      	add	r1, sp, #16
    14fa:	4618      	mov	r0, r3
    14fc:	f004 fb18 	bl	5b30 <boot_read_swap_state_by_id>
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1500:	f04f 0000 	mov.w	r0, #0
    1504:	2303      	movs	r3, #3
    1506:	f363 0002 	bfi	r0, r3, #0, #3
    150a:	f36f 00c5 	bfc	r0, #3, #3
    150e:	4b1a      	ldr	r3, [pc, #104]	; (1578 <fixup_revert+0xa0>)
    1510:	4a1a      	ldr	r2, [pc, #104]	; (157c <fixup_revert+0xa4>)
    1512:	1a9b      	subs	r3, r3, r2
    1514:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1518:	f363 108f 	bfi	r0, r3, #6, #10
    151c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1520:	2b01      	cmp	r3, #1
    1522:	d024      	beq.n	156e <fixup_revert+0x96>
    1524:	2b03      	cmp	r3, #3
    1526:	d020      	beq.n	156a <fixup_revert+0x92>
    1528:	4b15      	ldr	r3, [pc, #84]	; (1580 <fixup_revert+0xa8>)
    152a:	f89d 2011 	ldrb.w	r2, [sp, #17]
    152e:	f89d 1012 	ldrb.w	r1, [sp, #18]
    1532:	f89d 5013 	ldrb.w	r5, [sp, #19]
    1536:	9502      	str	r5, [sp, #8]
    1538:	9101      	str	r1, [sp, #4]
    153a:	9200      	str	r2, [sp, #0]
    153c:	4a11      	ldr	r2, [pc, #68]	; (1584 <fixup_revert+0xac>)
    153e:	4912      	ldr	r1, [pc, #72]	; (1588 <fixup_revert+0xb0>)
    1540:	f005 f9df 	bl	6902 <log_string_sync>
    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    1544:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1548:	2b03      	cmp	r3, #3
    154a:	d1d3      	bne.n	14f4 <fixup_revert+0x1c>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    154c:	4639      	mov	r1, r7
    154e:	4630      	mov	r0, r6
    1550:	f004 fcb2 	bl	5eb8 <swap_erase_trailer_sectors>
        rc = boot_write_image_ok(fap_sec);
    1554:	4638      	mov	r0, r7
    1556:	f004 fb22 	bl	5b9e <boot_write_image_ok>
        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    155a:	68a1      	ldr	r1, [r4, #8]
    155c:	4638      	mov	r0, r7
    155e:	f004 fb37 	bl	5bd0 <boot_write_swap_size>
        rc = boot_write_magic(fap_sec);
    1562:	4638      	mov	r0, r7
    1564:	f7ff fa10 	bl	988 <boot_write_magic>
        assert(rc == 0);
    1568:	e7c4      	b.n	14f4 <fixup_revert+0x1c>
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    156a:	4b08      	ldr	r3, [pc, #32]	; (158c <fixup_revert+0xb4>)
    156c:	e7dd      	b.n	152a <fixup_revert+0x52>
    156e:	4b08      	ldr	r3, [pc, #32]	; (1590 <fixup_revert+0xb8>)
    1570:	e7db      	b.n	152a <fixup_revert+0x52>
    1572:	bf00      	nop
    1574:	04000100 	.word	0x04000100
    1578:	000094ec 	.word	0x000094ec
    157c:	000094e4 	.word	0x000094e4
    1580:	000098a4 	.word	0x000098a4
    1584:	00009934 	.word	0x00009934
    1588:	000098c8 	.word	0x000098c8
    158c:	000098b0 	.word	0x000098b0
    1590:	000098a8 	.word	0x000098a8

00001594 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    1594:	b5f0      	push	{r4, r5, r6, r7, lr}
    1596:	b085      	sub	sp, #20
    1598:	4607      	mov	r7, r0
    159a:	460d      	mov	r5, r1
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    g_last_idx = 0;
    159c:	2400      	movs	r4, #0
    159e:	4b3e      	ldr	r3, [pc, #248]	; (1698 <swap_run+0x104>)
    15a0:	601c      	str	r4, [r3, #0]
    15a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    15a4:	685e      	ldr	r6, [r3, #4]

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    15a6:	4434      	add	r4, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
    15a8:	493b      	ldr	r1, [pc, #236]	; (1698 <swap_run+0x104>)
    15aa:	680b      	ldr	r3, [r1, #0]
    15ac:	3301      	adds	r3, #1
    15ae:	600b      	str	r3, [r1, #0]
        if (sz >= copy_size) {
    15b0:	4294      	cmp	r4, r2
    15b2:	d3f8      	bcc.n	15a6 <swap_run+0x12>
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    15b4:	4628      	mov	r0, r5
    15b6:	f004 fc16 	bl	5de6 <boot_status_is_reset>
    15ba:	b170      	cbz	r0, 15da <swap_run+0x46>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    15bc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    15be:	f004 fa38 	bl	5a32 <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    15c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    15c4:	3a01      	subs	r2, #1
        sz = 0;
    15c6:	2300      	movs	r3, #0

        while (1) {
            sz += sector_sz;
    15c8:	4433      	add	r3, r6
            if  (sz >= trailer_sz) {
    15ca:	4298      	cmp	r0, r3
    15cc:	d901      	bls.n	15d2 <swap_run+0x3e>
                break;
            }
            first_trailer_idx--;
    15ce:	3a01      	subs	r2, #1
            sz += sector_sz;
    15d0:	e7fa      	b.n	15c8 <swap_run+0x34>
        }

        if (g_last_idx >= first_trailer_idx) {
    15d2:	4b31      	ldr	r3, [pc, #196]	; (1698 <swap_run+0x104>)
    15d4:	681b      	ldr	r3, [r3, #0]
    15d6:	4293      	cmp	r3, r2
    15d8:	d214      	bcs.n	1604 <swap_run+0x70>
        }
    }

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    15da:	a903      	add	r1, sp, #12
    15dc:	2003      	movs	r0, #3
    15de:	f000 fcbb 	bl	1f58 <flash_area_open>
    assert (rc == 0);

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    15e2:	a902      	add	r1, sp, #8
    15e4:	2007      	movs	r0, #7
    15e6:	f000 fcb7 	bl	1f58 <flash_area_open>
    assert (rc == 0);

    fixup_revert(state, bs, fap_sec, FLASH_AREA_IMAGE_SECONDARY(image_index));
    15ea:	2307      	movs	r3, #7
    15ec:	9a02      	ldr	r2, [sp, #8]
    15ee:	4629      	mov	r1, r5
    15f0:	4638      	mov	r0, r7
    15f2:	f7ff ff71 	bl	14d8 <fixup_revert>

    if (bs->op == BOOT_STATUS_OP_MOVE) {
    15f6:	796b      	ldrb	r3, [r5, #5]
    15f8:	2b01      	cmp	r3, #1
    15fa:	d017      	beq.n	162c <swap_run+0x98>
            idx--;
        }
        bs->idx = BOOT_STATUS_IDX_0;
    }

    bs->op = BOOT_STATUS_OP_SWAP;
    15fc:	2302      	movs	r3, #2
    15fe:	716b      	strb	r3, [r5, #5]

    idx = 1;
    1600:	2401      	movs	r4, #1
    while (idx <= g_last_idx) {
    1602:	e038      	b.n	1676 <swap_run+0xe2>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    1604:	f04f 0000 	mov.w	r0, #0
    1608:	2302      	movs	r3, #2
    160a:	f363 0002 	bfi	r0, r3, #0, #3
    160e:	f36f 00c5 	bfc	r0, #3, #3
    1612:	4b22      	ldr	r3, [pc, #136]	; (169c <swap_run+0x108>)
    1614:	4a22      	ldr	r2, [pc, #136]	; (16a0 <swap_run+0x10c>)
    1616:	1a9b      	subs	r3, r3, r2
    1618:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    161c:	f363 108f 	bfi	r0, r3, #6, #10
    1620:	4920      	ldr	r1, [pc, #128]	; (16a4 <swap_run+0x110>)
    1622:	f005 f96e 	bl	6902 <log_string_sync>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1626:	2301      	movs	r3, #1
    1628:	71eb      	strb	r3, [r5, #7]
            return;
    162a:	e032      	b.n	1692 <swap_run+0xfe>
        idx = g_last_idx;
    162c:	4b1a      	ldr	r3, [pc, #104]	; (1698 <swap_run+0x104>)
    162e:	681c      	ldr	r4, [r3, #0]
        while (idx > 0) {
    1630:	e00a      	b.n	1648 <swap_run+0xb4>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1632:	9b02      	ldr	r3, [sp, #8]
    1634:	9301      	str	r3, [sp, #4]
    1636:	9b03      	ldr	r3, [sp, #12]
    1638:	9300      	str	r3, [sp, #0]
    163a:	462b      	mov	r3, r5
    163c:	463a      	mov	r2, r7
    163e:	4631      	mov	r1, r6
    1640:	4620      	mov	r0, r4
    1642:	f7ff fceb 	bl	101c <boot_move_sector_up>
            idx--;
    1646:	3c01      	subs	r4, #1
        while (idx > 0) {
    1648:	b13c      	cbz	r4, 165a <swap_run+0xc6>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    164a:	682a      	ldr	r2, [r5, #0]
    164c:	4b12      	ldr	r3, [pc, #72]	; (1698 <swap_run+0x104>)
    164e:	681b      	ldr	r3, [r3, #0]
    1650:	1a9b      	subs	r3, r3, r2
    1652:	3301      	adds	r3, #1
    1654:	429c      	cmp	r4, r3
    1656:	d8f6      	bhi.n	1646 <swap_run+0xb2>
    1658:	e7eb      	b.n	1632 <swap_run+0x9e>
        bs->idx = BOOT_STATUS_IDX_0;
    165a:	2301      	movs	r3, #1
    165c:	602b      	str	r3, [r5, #0]
    165e:	e7cd      	b.n	15fc <swap_run+0x68>
        if (idx >= bs->idx) {
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1660:	9b02      	ldr	r3, [sp, #8]
    1662:	9301      	str	r3, [sp, #4]
    1664:	9b03      	ldr	r3, [sp, #12]
    1666:	9300      	str	r3, [sp, #0]
    1668:	462b      	mov	r3, r5
    166a:	463a      	mov	r2, r7
    166c:	4631      	mov	r1, r6
    166e:	4620      	mov	r0, r4
    1670:	f7ff fd16 	bl	10a0 <boot_swap_sectors>
        }
        idx++;
    1674:	3401      	adds	r4, #1
    while (idx <= g_last_idx) {
    1676:	4b08      	ldr	r3, [pc, #32]	; (1698 <swap_run+0x104>)
    1678:	681b      	ldr	r3, [r3, #0]
    167a:	42a3      	cmp	r3, r4
    167c:	d303      	bcc.n	1686 <swap_run+0xf2>
        if (idx >= bs->idx) {
    167e:	682b      	ldr	r3, [r5, #0]
    1680:	42a3      	cmp	r3, r4
    1682:	d8f7      	bhi.n	1674 <swap_run+0xe0>
    1684:	e7ec      	b.n	1660 <swap_run+0xcc>
    }

    flash_area_close(fap_pri);
    1686:	9803      	ldr	r0, [sp, #12]
    1688:	f005 fa23 	bl	6ad2 <flash_area_close>
    flash_area_close(fap_sec);
    168c:	9802      	ldr	r0, [sp, #8]
    168e:	f005 fa20 	bl	6ad2 <flash_area_close>
}
    1692:	b005      	add	sp, #20
    1694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1696:	bf00      	nop
    1698:	20020000 	.word	0x20020000
    169c:	000094ec 	.word	0x000094ec
    16a0:	000094e4 	.word	0x000094e4
    16a4:	00009944 	.word	0x00009944

000016a8 <cleanup_arm_nvic>:
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    16a8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    16ac:	b672      	cpsid	i
	/* Allow any pending interrupts to be recognized */
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    16ae:	2300      	movs	r3, #0
    16b0:	2b0f      	cmp	r3, #15
    16b2:	d809      	bhi.n	16c8 <cleanup_arm_nvic+0x20>
		NVIC->ICER[i] = 0xFFFFFFFF;
    16b4:	f103 0120 	add.w	r1, r3, #32
    16b8:	4a0a      	ldr	r2, [pc, #40]	; (16e4 <cleanup_arm_nvic+0x3c>)
    16ba:	f04f 30ff 	mov.w	r0, #4294967295
    16be:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    16c2:	3301      	adds	r3, #1
    16c4:	b2db      	uxtb	r3, r3
    16c6:	e7f3      	b.n	16b0 <cleanup_arm_nvic+0x8>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    16c8:	2300      	movs	r3, #0
    16ca:	2b0f      	cmp	r3, #15
    16cc:	d809      	bhi.n	16e2 <cleanup_arm_nvic+0x3a>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    16ce:	f103 0160 	add.w	r1, r3, #96	; 0x60
    16d2:	4a04      	ldr	r2, [pc, #16]	; (16e4 <cleanup_arm_nvic+0x3c>)
    16d4:	f04f 30ff 	mov.w	r0, #4294967295
    16d8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    16dc:	3301      	adds	r3, #1
    16de:	b2db      	uxtb	r3, r3
    16e0:	e7f3      	b.n	16ca <cleanup_arm_nvic+0x22>
	}
}
    16e2:	4770      	bx	lr
    16e4:	e000e100 	.word	0xe000e100

000016e8 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    16e8:	b508      	push	{r3, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    16ea:	2201      	movs	r2, #1
    16ec:	4b10      	ldr	r3, [pc, #64]	; (1730 <nrf_cleanup_peripheral+0x48>)
    16ee:	601a      	str	r2, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    16f0:	4910      	ldr	r1, [pc, #64]	; (1734 <nrf_cleanup_peripheral+0x4c>)
    16f2:	f04f 33ff 	mov.w	r3, #4294967295
    16f6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    p_reg->INTENCLR = mask;
    16fa:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    16fe:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    1702:	3104      	adds	r1, #4
    1704:	600a      	str	r2, [r1, #0]
    p_reg->EVTENCLR = mask;
    1706:	4a0c      	ldr	r2, [pc, #48]	; (1738 <nrf_cleanup_peripheral+0x50>)
    1708:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    170c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1710:	f5a2 4250 	sub.w	r2, r2, #53248	; 0xd000
    1714:	2100      	movs	r1, #0
    1716:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    171a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    171e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    1722:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1726:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#endif
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#endif
    nrf_cleanup_clock();
    172a:	f004 fca4 	bl	6076 <nrf_cleanup_clock>
}
    172e:	bd08      	pop	{r3, pc}
    1730:	50014004 	.word	0x50014004
    1734:	50014000 	.word	0x50014000
    1738:	50015000 	.word	0x50015000

0000173c <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
    173c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1740:	b089      	sub	sp, #36	; 0x24
    1742:	4692      	mov	sl, r2
    1744:	469b      	mov	fp, r3
    1746:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    174a:	9301      	str	r3, [sp, #4]
    174c:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    1750:	2414      	movs	r4, #20
    1752:	9700      	str	r7, [sp, #0]
    1754:	460f      	mov	r7, r1
    1756:	4606      	mov	r6, r0
    1758:	9d12      	ldr	r5, [sp, #72]	; 0x48
    175a:	ea5a 030b 	orrs.w	r3, sl, fp
    175e:	d018      	beq.n	1792 <print_digits+0x56>
		buf[i] = "0123456789abcdef"[num % base];
    1760:	ea4f 79e5 	mov.w	r9, r5, asr #31
    1764:	462a      	mov	r2, r5
    1766:	464b      	mov	r3, r9
    1768:	4650      	mov	r0, sl
    176a:	4659      	mov	r1, fp
    176c:	f7fe fcea 	bl	144 <__aeabi_uldivmod>
    1770:	4b27      	ldr	r3, [pc, #156]	; (1810 <print_digits+0xd4>)
    1772:	4413      	add	r3, r2
    1774:	781a      	ldrb	r2, [r3, #0]
    1776:	ab08      	add	r3, sp, #32
    1778:	4423      	add	r3, r4
    177a:	f803 2c18 	strb.w	r2, [r3, #-24]
		num /= base;
    177e:	462a      	mov	r2, r5
    1780:	464b      	mov	r3, r9
    1782:	4650      	mov	r0, sl
    1784:	4659      	mov	r1, fp
    1786:	f7fe fcdd 	bl	144 <__aeabi_uldivmod>
    178a:	4682      	mov	sl, r0
    178c:	468b      	mov	fp, r1
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    178e:	3c01      	subs	r4, #1
    1790:	e7e3      	b.n	175a <print_digits+0x1e>
    1792:	4635      	mov	r5, r6
    1794:	463e      	mov	r6, r7
    1796:	9f00      	ldr	r7, [sp, #0]
	}

	if (i == DIGITS_BUFLEN - 1) {
    1798:	2c14      	cmp	r4, #20
    179a:	d00b      	beq.n	17b4 <print_digits+0x78>
		buf[i] = '0';
	} else {
		i++;
    179c:	3401      	adds	r4, #1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    179e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    17a0:	eb04 0803 	add.w	r8, r4, r3
    17a4:	f1b8 0f15 	cmp.w	r8, #21
    17a8:	d00a      	beq.n	17c0 <print_digits+0x84>
    17aa:	f1a8 0815 	sub.w	r8, r8, #21
    17ae:	46a1      	mov	r9, r4
    17b0:	9c01      	ldr	r4, [sp, #4]
    17b2:	e00f      	b.n	17d4 <print_digits+0x98>
		buf[i] = '0';
    17b4:	2230      	movs	r2, #48	; 0x30
    17b6:	ab08      	add	r3, sp, #32
    17b8:	4423      	add	r3, r4
    17ba:	f803 2c18 	strb.w	r2, [r3, #-24]
    17be:	e7ee      	b.n	179e <print_digits+0x62>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    17c0:	f04f 0800 	mov.w	r8, #0
    17c4:	46a1      	mov	r9, r4
    17c6:	9c01      	ldr	r4, [sp, #4]
    17c8:	e004      	b.n	17d4 <print_digits+0x98>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
    17ca:	4631      	mov	r1, r6
    17cc:	4638      	mov	r0, r7
    17ce:	47a8      	blx	r5
	for (/**/; pad > 0 && pad_before; pad--) {
    17d0:	f108 38ff 	add.w	r8, r8, #4294967295
    17d4:	f1b8 0f00 	cmp.w	r8, #0
    17d8:	dd03      	ble.n	17e2 <print_digits+0xa6>
    17da:	2c00      	cmp	r4, #0
    17dc:	d1f5      	bne.n	17ca <print_digits+0x8e>
    17de:	464c      	mov	r4, r9
    17e0:	e000      	b.n	17e4 <print_digits+0xa8>
    17e2:	464c      	mov	r4, r9
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
    17e4:	2c14      	cmp	r4, #20
    17e6:	d807      	bhi.n	17f8 <print_digits+0xbc>
		out(buf[i], ctx);
    17e8:	ab08      	add	r3, sp, #32
    17ea:	4423      	add	r3, r4
    17ec:	4631      	mov	r1, r6
    17ee:	f813 0c18 	ldrb.w	r0, [r3, #-24]
    17f2:	47a8      	blx	r5
	for (/**/; i < DIGITS_BUFLEN; i++) {
    17f4:	3401      	adds	r4, #1
    17f6:	e7f5      	b.n	17e4 <print_digits+0xa8>
	}
	for (/**/; pad > 0; pad--) {
    17f8:	f1b8 0f00 	cmp.w	r8, #0
    17fc:	dd05      	ble.n	180a <print_digits+0xce>
		out(pad_char, ctx);
    17fe:	4631      	mov	r1, r6
    1800:	4638      	mov	r0, r7
    1802:	47a8      	blx	r5
	for (/**/; pad > 0; pad--) {
    1804:	f108 38ff 	add.w	r8, r8, #4294967295
    1808:	e7f6      	b.n	17f8 <print_digits+0xbc>
	}
}
    180a:	b009      	add	sp, #36	; 0x24
    180c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1810:	00009a84 	.word	0x00009a84

00001814 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    1814:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1816:	680b      	ldr	r3, [r1, #0]
    1818:	3301      	adds	r3, #1
    181a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    181c:	4b01      	ldr	r3, [pc, #4]	; (1824 <char_out+0x10>)
    181e:	681b      	ldr	r3, [r3, #0]
    1820:	4798      	blx	r3
}
    1822:	bd08      	pop	{r3, pc}
    1824:	20020004 	.word	0x20020004

00001828 <__printk_hook_install>:
	_char_out = fn;
    1828:	4b01      	ldr	r3, [pc, #4]	; (1830 <__printk_hook_install+0x8>)
    182a:	6018      	str	r0, [r3, #0]
}
    182c:	4770      	bx	lr
    182e:	bf00      	nop
    1830:	20020004 	.word	0x20020004

00001834 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1834:	b500      	push	{lr}
    1836:	b083      	sub	sp, #12
    1838:	4602      	mov	r2, r0
    183a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    183c:	2100      	movs	r1, #0
    183e:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    1840:	a901      	add	r1, sp, #4
    1842:	4803      	ldr	r0, [pc, #12]	; (1850 <vprintk+0x1c>)
    1844:	f004 fc74 	bl	6130 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1848:	b003      	add	sp, #12
    184a:	f85d fb04 	ldr.w	pc, [sp], #4
    184e:	bf00      	nop
    1850:	00001815 	.word	0x00001815

00001854 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1858:	b083      	sub	sp, #12
    185a:	4604      	mov	r4, r0
    185c:	4608      	mov	r0, r1
    185e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1860:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1862:	f013 0f08 	tst.w	r3, #8
    1866:	d105      	bne.n	1874 <process_event+0x20>
    1868:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    186c:	2300      	movs	r3, #0
    186e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    1870:	9301      	str	r3, [sp, #4]
}
    1872:	e069      	b.n	1948 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    1874:	2901      	cmp	r1, #1
    1876:	d009      	beq.n	188c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1878:	f043 0320 	orr.w	r3, r3, #32
    187c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    187e:	f385 8811 	msr	BASEPRI, r5
    1882:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1886:	b003      	add	sp, #12
    1888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    188c:	f043 0310 	orr.w	r3, r3, #16
    1890:	8323      	strh	r3, [r4, #24]
    1892:	e7f4      	b.n	187e <process_event+0x2a>
			evt = process_recheck(mgr);
    1894:	4620      	mov	r0, r4
    1896:	f004 fe0b 	bl	64b0 <process_recheck>
    189a:	e057      	b.n	194c <process_event+0xf8>
			res = mgr->last_res;
    189c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    18a0:	464a      	mov	r2, r9
    18a2:	4669      	mov	r1, sp
    18a4:	4620      	mov	r0, r4
    18a6:	f004 fe1c 	bl	64e2 <process_complete>
		onoff_transition_fn transit = NULL;
    18aa:	2700      	movs	r7, #0
    18ac:	e05a      	b.n	1964 <process_event+0x110>
			transit = mgr->transitions->start;
    18ae:	6923      	ldr	r3, [r4, #16]
    18b0:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    18b2:	2106      	movs	r1, #6
    18b4:	4620      	mov	r0, r4
    18b6:	f004 fdd4 	bl	6462 <set_state>
		res = 0;
    18ba:	f04f 0900 	mov.w	r9, #0
    18be:	e051      	b.n	1964 <process_event+0x110>
			transit = mgr->transitions->stop;
    18c0:	6923      	ldr	r3, [r4, #16]
    18c2:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    18c4:	2104      	movs	r1, #4
    18c6:	4620      	mov	r0, r4
    18c8:	f004 fdcb 	bl	6462 <set_state>
		res = 0;
    18cc:	f04f 0900 	mov.w	r9, #0
    18d0:	e048      	b.n	1964 <process_event+0x110>
			transit = mgr->transitions->reset;
    18d2:	6923      	ldr	r3, [r4, #16]
    18d4:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    18d6:	2105      	movs	r1, #5
    18d8:	4620      	mov	r0, r4
    18da:	f004 fdc2 	bl	6462 <set_state>
		res = 0;
    18de:	f04f 0900 	mov.w	r9, #0
    18e2:	e03f      	b.n	1964 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    18e4:	2200      	movs	r2, #0
    18e6:	e046      	b.n	1976 <process_event+0x122>
    18e8:	2200      	movs	r2, #0
    18ea:	e044      	b.n	1976 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    18ec:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    18f0:	8323      	strh	r3, [r4, #24]
    18f2:	f385 8811 	msr	BASEPRI, r5
    18f6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    18fa:	2900      	cmp	r1, #0
    18fc:	d144      	bne.n	1988 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    18fe:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    1900:	b12b      	cbz	r3, 190e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    1902:	464b      	mov	r3, r9
    1904:	4642      	mov	r2, r8
    1906:	4669      	mov	r1, sp
    1908:	4620      	mov	r0, r4
    190a:	f004 fe60 	bl	65ce <notify_all>
			if (transit != NULL) {
    190e:	b117      	cbz	r7, 1916 <process_event+0xc2>
				transit(mgr, transition_complete);
    1910:	4925      	ldr	r1, [pc, #148]	; (19a8 <process_event+0x154>)
    1912:	4620      	mov	r0, r4
    1914:	47b8      	blx	r7
	__asm__ volatile(
    1916:	f04f 0320 	mov.w	r3, #32
    191a:	f3ef 8511 	mrs	r5, BASEPRI
    191e:	f383 8811 	msr	BASEPRI, r3
    1922:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1926:	8b23      	ldrh	r3, [r4, #24]
    1928:	f023 0308 	bic.w	r3, r3, #8
    192c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    192e:	8b23      	ldrh	r3, [r4, #24]
    1930:	f013 0f10 	tst.w	r3, #16
    1934:	d02e      	beq.n	1994 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1936:	f023 0310 	bic.w	r3, r3, #16
    193a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    193c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    193e:	8b26      	ldrh	r6, [r4, #24]
    1940:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    1944:	2800      	cmp	r0, #0
    1946:	d09a      	beq.n	187e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    1948:	2802      	cmp	r0, #2
    194a:	d0a3      	beq.n	1894 <process_event+0x40>
		if (evt == EVT_NOP) {
    194c:	2800      	cmp	r0, #0
    194e:	d096      	beq.n	187e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    1950:	2801      	cmp	r0, #1
    1952:	d0a3      	beq.n	189c <process_event+0x48>
		} else if (evt == EVT_START) {
    1954:	2803      	cmp	r0, #3
    1956:	d0aa      	beq.n	18ae <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    1958:	2804      	cmp	r0, #4
    195a:	d0b1      	beq.n	18c0 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    195c:	2805      	cmp	r0, #5
    195e:	d0b8      	beq.n	18d2 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    1960:	2700      	movs	r7, #0
		res = 0;
    1962:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1964:	8b23      	ldrh	r3, [r4, #24]
    1966:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    196a:	45b0      	cmp	r8, r6
    196c:	d0ba      	beq.n	18e4 <process_event+0x90>
    196e:	68a2      	ldr	r2, [r4, #8]
    1970:	2a00      	cmp	r2, #0
    1972:	d0b9      	beq.n	18e8 <process_event+0x94>
    1974:	2201      	movs	r2, #1
		if (do_monitors
    1976:	4611      	mov	r1, r2
    1978:	2a00      	cmp	r2, #0
    197a:	d1b7      	bne.n	18ec <process_event+0x98>
    197c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    197e:	2a00      	cmp	r2, #0
    1980:	d1b4      	bne.n	18ec <process_event+0x98>
		    || (transit != NULL)) {
    1982:	2f00      	cmp	r7, #0
    1984:	d1b2      	bne.n	18ec <process_event+0x98>
    1986:	e7d2      	b.n	192e <process_event+0xda>
				notify_monitors(mgr, state, res);
    1988:	464a      	mov	r2, r9
    198a:	4641      	mov	r1, r8
    198c:	4620      	mov	r0, r4
    198e:	f004 fd70 	bl	6472 <notify_monitors>
    1992:	e7b4      	b.n	18fe <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1994:	f013 0f20 	tst.w	r3, #32
    1998:	d004      	beq.n	19a4 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    199a:	f023 0320 	bic.w	r3, r3, #32
    199e:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    19a0:	2002      	movs	r0, #2
    19a2:	e7cc      	b.n	193e <process_event+0xea>
		evt = EVT_NOP;
    19a4:	2000      	movs	r0, #0
    19a6:	e7ca      	b.n	193e <process_event+0xea>
    19a8:	000065fd 	.word	0x000065fd

000019ac <nordicsemi_nrf91_init>:
    19ac:	f04f 0220 	mov.w	r2, #32
    19b0:	f3ef 8311 	mrs	r3, BASEPRI
    19b4:	f382 8811 	msr	BASEPRI, r2
    19b8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    19bc:	4a04      	ldr	r2, [pc, #16]	; (19d0 <nordicsemi_nrf91_init+0x24>)
    19be:	2101      	movs	r1, #1
    19c0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    19c4:	f383 8811 	msr	BASEPRI, r3
    19c8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    19cc:	2000      	movs	r0, #0
    19ce:	4770      	bx	lr
    19d0:	50039000 	.word	0x50039000

000019d4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    19d4:	b130      	cbz	r0, 19e4 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    19d6:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    19d8:	0180      	lsls	r0, r0, #6
    19da:	4b03      	ldr	r3, [pc, #12]	; (19e8 <arch_busy_wait+0x14>)
    19dc:	f043 0301 	orr.w	r3, r3, #1
    19e0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    19e2:	bd08      	pop	{r3, pc}
    19e4:	4770      	bx	lr
    19e6:	bf00      	nop
    19e8:	00009550 	.word	0x00009550

000019ec <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
    19ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    19f0:	b085      	sub	sp, #20
    19f2:	4680      	mov	r8, r0
    19f4:	460f      	mov	r7, r1
    19f6:	4615      	mov	r5, r2
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
    19f8:	4b12      	ldr	r3, [pc, #72]	; (1a44 <log_generic+0x58>)
    19fa:	681b      	ldr	r3, [r3, #0]
    19fc:	4798      	blx	r3
    19fe:	4606      	mov	r6, r0

		for (int i = 0; i < log_backend_count_get(); i++) {
    1a00:	2400      	movs	r4, #0
    1a02:	e000      	b.n	1a06 <log_generic+0x1a>
    1a04:	3401      	adds	r4, #1
    1a06:	4b10      	ldr	r3, [pc, #64]	; (1a48 <log_generic+0x5c>)
    1a08:	4a10      	ldr	r2, [pc, #64]	; (1a4c <log_generic+0x60>)
    1a0a:	1a9b      	subs	r3, r3, r2
    1a0c:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1a10:	da15      	bge.n	1a3e <log_generic+0x52>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    1a12:	480e      	ldr	r0, [pc, #56]	; (1a4c <log_generic+0x60>)
    1a14:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1a18:	6843      	ldr	r3, [r0, #4]
    1a1a:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);

			if (log_backend_is_active(backend)) {
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d0f1      	beq.n	1a04 <log_generic+0x18>
				va_list ap_tmp;

				va_copy(ap_tmp, ap);
    1a20:	9503      	str	r5, [sp, #12]
	if (backend->api->put_sync_string) {
    1a22:	0123      	lsls	r3, r4, #4
    1a24:	4a09      	ldr	r2, [pc, #36]	; (1a4c <log_generic+0x60>)
    1a26:	58d3      	ldr	r3, [r2, r3]
    1a28:	f8d3 9004 	ldr.w	r9, [r3, #4]
    1a2c:	f1b9 0f00 	cmp.w	r9, #0
    1a30:	d0e8      	beq.n	1a04 <log_generic+0x18>
		backend->api->put_sync_string(backend, src_level,
    1a32:	9500      	str	r5, [sp, #0]
    1a34:	463b      	mov	r3, r7
    1a36:	4632      	mov	r2, r6
    1a38:	4641      	mov	r1, r8
    1a3a:	47c8      	blx	r9
				log_backend_put_sync_string(backend, src_level,
						     timestamp, fmt, ap_tmp);
				va_end(ap_tmp);
    1a3c:	e7e2      	b.n	1a04 <log_generic+0x18>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
    1a3e:	b005      	add	sp, #20
    1a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1a44:	20020008 	.word	0x20020008
    1a48:	00009524 	.word	0x00009524
    1a4c:	00009514 	.word	0x00009514

00001a50 <log_core_init>:
	 */
	return k_cycle_get_32();
}

void log_core_init(void)
{
    1a50:	b508      	push	{r3, lr}
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
    1a52:	4b04      	ldr	r3, [pc, #16]	; (1a64 <log_core_init+0x14>)
    1a54:	4a04      	ldr	r2, [pc, #16]	; (1a68 <log_core_init+0x18>)
    1a56:	601a      	str	r2, [r3, #0]
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
    1a58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1a5c:	f000 fa0a 	bl	1e74 <log_output_timestamp_freq_set>
			LOG_FILTER_SLOT_SET(filters,
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
    1a60:	bd08      	pop	{r3, pc}
    1a62:	bf00      	nop
    1a64:	20020008 	.word	0x20020008
    1a68:	000068fb 	.word	0x000068fb

00001a6c <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    1a6c:	4b05      	ldr	r3, [pc, #20]	; (1a84 <log_source_name_get+0x18>)
    1a6e:	4a06      	ldr	r2, [pc, #24]	; (1a88 <log_source_name_get+0x1c>)
    1a70:	1a9b      	subs	r3, r3, r2
    1a72:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    1a76:	d202      	bcs.n	1a7e <log_source_name_get+0x12>
 * @param source_id Source ID.
 * @return Name.
 */
static inline const char *log_name_get(uint32_t source_id)
{
	return __log_const_start[source_id].name;
    1a78:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    1a7c:	4770      	bx	lr
    1a7e:	2000      	movs	r0, #0
}
    1a80:	4770      	bx	lr
    1a82:	bf00      	nop
    1a84:	00009514 	.word	0x00009514
    1a88:	000094e4 	.word	0x000094e4

00001a8c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1a8c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1a8e:	4b0b      	ldr	r3, [pc, #44]	; (1abc <log_backend_enable+0x30>)
    1a90:	1ac3      	subs	r3, r0, r3
    1a92:	111b      	asrs	r3, r3, #4
    1a94:	3301      	adds	r3, #1
	backend->cb->id = id;
    1a96:	6842      	ldr	r2, [r0, #4]
    1a98:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    1a9a:	6843      	ldr	r3, [r0, #4]
    1a9c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1a9e:	6843      	ldr	r3, [r0, #4]
    1aa0:	2201      	movs	r2, #1
    1aa2:	715a      	strb	r2, [r3, #5]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
    1aa4:	4b06      	ldr	r3, [pc, #24]	; (1ac0 <log_backend_enable+0x34>)
    1aa6:	781b      	ldrb	r3, [r3, #0]
    1aa8:	b11b      	cbz	r3, 1ab2 <log_backend_enable+0x26>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    1aaa:	4b05      	ldr	r3, [pc, #20]	; (1ac0 <log_backend_enable+0x34>)
    1aac:	2201      	movs	r2, #1
    1aae:	701a      	strb	r2, [r3, #0]
}
    1ab0:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1ab2:	4804      	ldr	r0, [pc, #16]	; (1ac4 <log_backend_enable+0x38>)
    1ab4:	f003 faba 	bl	502c <z_impl_k_sem_give>
}
    1ab8:	e7f7      	b.n	1aaa <log_backend_enable+0x1e>
    1aba:	bf00      	nop
    1abc:	00009514 	.word	0x00009514
    1ac0:	20022e40 	.word	0x20022e40
    1ac4:	200201c4 	.word	0x200201c4

00001ac8 <log_init>:
{
    1ac8:	b538      	push	{r3, r4, r5, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1aca:	4b13      	ldr	r3, [pc, #76]	; (1b18 <log_init+0x50>)
    1acc:	e8d3 2fef 	ldaex	r2, [r3]
    1ad0:	1c51      	adds	r1, r2, #1
    1ad2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1ad6:	2800      	cmp	r0, #0
    1ad8:	d1f8      	bne.n	1acc <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    1ada:	b9da      	cbnz	r2, 1b14 <log_init+0x4c>
	for (i = 0; i < log_backend_count_get(); i++) {
    1adc:	2400      	movs	r4, #0
    1ade:	e005      	b.n	1aec <log_init+0x24>
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    1ae0:	2204      	movs	r2, #4
    1ae2:	2100      	movs	r1, #0
    1ae4:	4628      	mov	r0, r5
    1ae6:	f7ff ffd1 	bl	1a8c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1aea:	3401      	adds	r4, #1
    1aec:	4b0b      	ldr	r3, [pc, #44]	; (1b1c <log_init+0x54>)
    1aee:	4a0c      	ldr	r2, [pc, #48]	; (1b20 <log_init+0x58>)
    1af0:	1a9b      	subs	r3, r3, r2
    1af2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1af6:	da0d      	bge.n	1b14 <log_init+0x4c>
	return &__log_backends_start[idx];
    1af8:	4d09      	ldr	r5, [pc, #36]	; (1b20 <log_init+0x58>)
    1afa:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1afe:	7b2b      	ldrb	r3, [r5, #12]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d0f2      	beq.n	1aea <log_init+0x22>
			if (backend->api->init != NULL) {
    1b04:	0123      	lsls	r3, r4, #4
    1b06:	4a06      	ldr	r2, [pc, #24]	; (1b20 <log_init+0x58>)
    1b08:	58d3      	ldr	r3, [r2, r3]
    1b0a:	695b      	ldr	r3, [r3, #20]
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d0e7      	beq.n	1ae0 <log_init+0x18>
				backend->api->init();
    1b10:	4798      	blx	r3
    1b12:	e7e5      	b.n	1ae0 <log_init+0x18>
}
    1b14:	bd38      	pop	{r3, r4, r5, pc}
    1b16:	bf00      	nop
    1b18:	200227c8 	.word	0x200227c8
    1b1c:	00009524 	.word	0x00009524
    1b20:	00009514 	.word	0x00009514

00001b24 <z_impl_log_panic>:
	if (panic_mode) {
    1b24:	4b10      	ldr	r3, [pc, #64]	; (1b68 <z_impl_log_panic+0x44>)
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	b103      	cbz	r3, 1b2c <z_impl_log_panic+0x8>
    1b2a:	4770      	bx	lr
{
    1b2c:	b510      	push	{r4, lr}
	log_init();
    1b2e:	f7ff ffcb 	bl	1ac8 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1b32:	2400      	movs	r4, #0
    1b34:	e000      	b.n	1b38 <z_impl_log_panic+0x14>
    1b36:	3401      	adds	r4, #1
    1b38:	4b0c      	ldr	r3, [pc, #48]	; (1b6c <z_impl_log_panic+0x48>)
    1b3a:	4a0d      	ldr	r2, [pc, #52]	; (1b70 <z_impl_log_panic+0x4c>)
    1b3c:	1a9b      	subs	r3, r3, r2
    1b3e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1b42:	da0c      	bge.n	1b5e <z_impl_log_panic+0x3a>
    1b44:	480a      	ldr	r0, [pc, #40]	; (1b70 <z_impl_log_panic+0x4c>)
    1b46:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    1b4a:	6843      	ldr	r3, [r0, #4]
    1b4c:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d0f1      	beq.n	1b36 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    1b52:	0123      	lsls	r3, r4, #4
    1b54:	4a06      	ldr	r2, [pc, #24]	; (1b70 <z_impl_log_panic+0x4c>)
    1b56:	58d3      	ldr	r3, [r2, r3]
    1b58:	691b      	ldr	r3, [r3, #16]
    1b5a:	4798      	blx	r3
}
    1b5c:	e7eb      	b.n	1b36 <z_impl_log_panic+0x12>
	panic_mode = true;
    1b5e:	4b02      	ldr	r3, [pc, #8]	; (1b68 <z_impl_log_panic+0x44>)
    1b60:	2201      	movs	r2, #1
    1b62:	701a      	strb	r2, [r3, #0]
}
    1b64:	bd10      	pop	{r4, pc}
    1b66:	bf00      	nop
    1b68:	20022e41 	.word	0x20022e41
    1b6c:	00009524 	.word	0x00009524
    1b70:	00009514 	.word	0x00009514

00001b74 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    1b74:	b40e      	push	{r1, r2, r3}
    1b76:	b500      	push	{lr}
    1b78:	b082      	sub	sp, #8
    1b7a:	4601      	mov	r1, r0
    1b7c:	ab03      	add	r3, sp, #12
    1b7e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1b82:	9301      	str	r3, [sp, #4]
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    1b84:	4804      	ldr	r0, [pc, #16]	; (1b98 <print_formatted+0x24>)
    1b86:	f004 fad3 	bl	6130 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    1b8a:	2000      	movs	r0, #0
    1b8c:	b002      	add	sp, #8
    1b8e:	f85d eb04 	ldr.w	lr, [sp], #4
    1b92:	b003      	add	sp, #12
    1b94:	4770      	bx	lr
    1b96:	bf00      	nop
    1b98:	0000692b 	.word	0x0000692b

00001b9c <timestamp_print>:
	log_output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *log_output,
			   uint32_t flags, uint32_t timestamp)
{
    1b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b9e:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    1ba0:	f011 0f44 	tst.w	r1, #68	; 0x44
    1ba4:	d005      	beq.n	1bb2 <timestamp_print+0x16>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    1ba6:	4b1a      	ldr	r3, [pc, #104]	; (1c10 <timestamp_print+0x74>)
    1ba8:	681c      	ldr	r4, [r3, #0]
    1baa:	b934      	cbnz	r4, 1bba <timestamp_print+0x1e>
			length = print_formatted(log_output,
						 "[%02d:%02d:%02d.%03d,%03d] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    1bac:	2000      	movs	r0, #0
	}

	return length;
}
    1bae:	b005      	add	sp, #20
    1bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    1bb2:	4918      	ldr	r1, [pc, #96]	; (1c14 <timestamp_print+0x78>)
    1bb4:	f7ff ffde 	bl	1b74 <print_formatted>
    1bb8:	e7f9      	b.n	1bae <timestamp_print+0x12>
		timestamp /= timestamp_div;
    1bba:	4b17      	ldr	r3, [pc, #92]	; (1c18 <timestamp_print+0x7c>)
    1bbc:	6819      	ldr	r1, [r3, #0]
    1bbe:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    1bc2:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    1bc6:	4a15      	ldr	r2, [pc, #84]	; (1c1c <timestamp_print+0x80>)
    1bc8:	fba2 3205 	umull	r3, r2, r2, r5
    1bcc:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    1bce:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    1bd2:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    1bd6:	4b12      	ldr	r3, [pc, #72]	; (1c20 <timestamp_print+0x84>)
    1bd8:	fba3 7306 	umull	r7, r3, r3, r6
    1bdc:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    1bde:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    1be2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1be6:	fb05 f101 	mul.w	r1, r5, r1
    1bea:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1bee:	fb07 1114 	mls	r1, r7, r4, r1
    1bf2:	fb05 f101 	mul.w	r1, r5, r1
    1bf6:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(log_output,
    1bfa:	9402      	str	r4, [sp, #8]
    1bfc:	9701      	str	r7, [sp, #4]
    1bfe:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    1c02:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    1c06:	9100      	str	r1, [sp, #0]
    1c08:	4906      	ldr	r1, [pc, #24]	; (1c24 <timestamp_print+0x88>)
    1c0a:	f7ff ffb3 	bl	1b74 <print_formatted>
    1c0e:	e7ce      	b.n	1bae <timestamp_print+0x12>
    1c10:	200227cc 	.word	0x200227cc
    1c14:	00009a9c 	.word	0x00009a9c
    1c18:	200227d0 	.word	0x200227d0
    1c1c:	91a2b3c5 	.word	0x91a2b3c5
    1c20:	88888889 	.word	0x88888889
    1c24:	00009aa8 	.word	0x00009aa8

00001c28 <color_print>:

static void color_print(const struct log_output *log_output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    1c28:	b161      	cbz	r1, 1c44 <color_print+0x1c>
{
    1c2a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1c2c:	b12a      	cbz	r2, 1c3a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    1c2e:	4a06      	ldr	r2, [pc, #24]	; (1c48 <color_print+0x20>)
    1c30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1c34:	b912      	cbnz	r2, 1c3c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1c36:	4a05      	ldr	r2, [pc, #20]	; (1c4c <color_print+0x24>)
    1c38:	e000      	b.n	1c3c <color_print+0x14>
    1c3a:	4a04      	ldr	r2, [pc, #16]	; (1c4c <color_print+0x24>)
		print_formatted(log_output, "%s", log_color);
    1c3c:	4904      	ldr	r1, [pc, #16]	; (1c50 <color_print+0x28>)
    1c3e:	f7ff ff99 	bl	1b74 <print_formatted>
	}
}
    1c42:	bd08      	pop	{r3, pc}
    1c44:	4770      	bx	lr
    1c46:	bf00      	nop
    1c48:	00009b1c 	.word	0x00009b1c
    1c4c:	00009ac4 	.word	0x00009ac4
    1c50:	00009acc 	.word	0x00009acc

00001c54 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c54:	f011 0f10 	tst.w	r1, #16
    1c58:	d10b      	bne.n	1c72 <newline_print+0x1e>
{
    1c5a:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1c5c:	f011 0f20 	tst.w	r1, #32
    1c60:	d003      	beq.n	1c6a <newline_print+0x16>
		print_formatted(ctx, "\n");
    1c62:	4904      	ldr	r1, [pc, #16]	; (1c74 <newline_print+0x20>)
    1c64:	f7ff ff86 	bl	1b74 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    1c68:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    1c6a:	4903      	ldr	r1, [pc, #12]	; (1c78 <newline_print+0x24>)
    1c6c:	f7ff ff82 	bl	1b74 <print_formatted>
    1c70:	e7fa      	b.n	1c68 <newline_print+0x14>
    1c72:	4770      	bx	lr
    1c74:	00009d34 	.word	0x00009d34
    1c78:	0000a044 	.word	0x0000a044

00001c7c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c80:	4605      	mov	r5, r0
    1c82:	460f      	mov	r7, r1
    1c84:	4616      	mov	r6, r2
    1c86:	4698      	mov	r8, r3
	newline_print(log_output, flags);
    1c88:	9906      	ldr	r1, [sp, #24]
    1c8a:	f7ff ffe3 	bl	1c54 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    1c8e:	2400      	movs	r4, #0
    1c90:	4544      	cmp	r4, r8
    1c92:	da05      	bge.n	1ca0 <hexdump_line_print+0x24>
		print_formatted(log_output, " ");
    1c94:	4923      	ldr	r1, [pc, #140]	; (1d24 <hexdump_line_print+0xa8>)
    1c96:	4628      	mov	r0, r5
    1c98:	f7ff ff6c 	bl	1b74 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1c9c:	3401      	adds	r4, #1
    1c9e:	e7f7      	b.n	1c90 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1ca0:	2400      	movs	r4, #0
    1ca2:	e009      	b.n	1cb8 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    1ca4:	491f      	ldr	r1, [pc, #124]	; (1d24 <hexdump_line_print+0xa8>)
    1ca6:	4628      	mov	r0, r5
    1ca8:	f7ff ff64 	bl	1b74 <print_formatted>
    1cac:	e00b      	b.n	1cc6 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    1cae:	491e      	ldr	r1, [pc, #120]	; (1d28 <hexdump_line_print+0xac>)
    1cb0:	4628      	mov	r0, r5
    1cb2:	f7ff ff5f 	bl	1b74 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cb6:	3401      	adds	r4, #1
    1cb8:	2c0f      	cmp	r4, #15
    1cba:	dc0c      	bgt.n	1cd6 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    1cbc:	2c00      	cmp	r4, #0
    1cbe:	dd02      	ble.n	1cc6 <hexdump_line_print+0x4a>
    1cc0:	f014 0f07 	tst.w	r4, #7
    1cc4:	d0ee      	beq.n	1ca4 <hexdump_line_print+0x28>
		if (i < length) {
    1cc6:	42b4      	cmp	r4, r6
    1cc8:	d2f1      	bcs.n	1cae <hexdump_line_print+0x32>
			print_formatted(log_output, "%02x ", data[i]);
    1cca:	5d3a      	ldrb	r2, [r7, r4]
    1ccc:	4917      	ldr	r1, [pc, #92]	; (1d2c <hexdump_line_print+0xb0>)
    1cce:	4628      	mov	r0, r5
    1cd0:	f7ff ff50 	bl	1b74 <print_formatted>
    1cd4:	e7ef      	b.n	1cb6 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(log_output, "|");
    1cd6:	4916      	ldr	r1, [pc, #88]	; (1d30 <hexdump_line_print+0xb4>)
    1cd8:	4628      	mov	r0, r5
    1cda:	f7ff ff4b 	bl	1b74 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cde:	2400      	movs	r4, #0
    1ce0:	e009      	b.n	1cf6 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    1ce2:	4910      	ldr	r1, [pc, #64]	; (1d24 <hexdump_line_print+0xa8>)
    1ce4:	4628      	mov	r0, r5
    1ce6:	f7ff ff45 	bl	1b74 <print_formatted>
    1cea:	e00b      	b.n	1d04 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(log_output, "%c",
    1cec:	4911      	ldr	r1, [pc, #68]	; (1d34 <hexdump_line_print+0xb8>)
    1cee:	4628      	mov	r0, r5
    1cf0:	f7ff ff40 	bl	1b74 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cf4:	3401      	adds	r4, #1
    1cf6:	2c0f      	cmp	r4, #15
    1cf8:	dc12      	bgt.n	1d20 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    1cfa:	2c00      	cmp	r4, #0
    1cfc:	dd02      	ble.n	1d04 <hexdump_line_print+0x88>
    1cfe:	f014 0f07 	tst.w	r4, #7
    1d02:	d0ee      	beq.n	1ce2 <hexdump_line_print+0x66>
		if (i < length) {
    1d04:	42b4      	cmp	r4, r6
    1d06:	d206      	bcs.n	1d16 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    1d08:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    1d0a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    1d0e:	2b5e      	cmp	r3, #94	; 0x5e
    1d10:	d9ec      	bls.n	1cec <hexdump_line_print+0x70>
    1d12:	222e      	movs	r2, #46	; 0x2e
    1d14:	e7ea      	b.n	1cec <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    1d16:	4903      	ldr	r1, [pc, #12]	; (1d24 <hexdump_line_print+0xa8>)
    1d18:	4628      	mov	r0, r5
    1d1a:	f7ff ff2b 	bl	1b74 <print_formatted>
    1d1e:	e7e9      	b.n	1cf4 <hexdump_line_print+0x78>
		}
	}
}
    1d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d24:	00009af4 	.word	0x00009af4
    1d28:	00009ad8 	.word	0x00009ad8
    1d2c:	00009ad0 	.word	0x00009ad0
    1d30:	00009adc 	.word	0x00009adc
    1d34:	00009ae0 	.word	0x00009ae0

00001d38 <ids_print>:
{
    1d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d3a:	4604      	mov	r4, r0
    1d3c:	4616      	mov	r6, r2
    1d3e:	461d      	mov	r5, r3
	if (level_on) {
    1d40:	b949      	cbnz	r1, 1d56 <ids_print+0x1e>
	int total = 0;
    1d42:	2700      	movs	r7, #0
	total += print_formatted(log_output,
    1d44:	b186      	cbz	r6, 1d68 <ids_print+0x30>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1d46:	2301      	movs	r3, #1
    1d48:	9a07      	ldr	r2, [sp, #28]
    1d4a:	4093      	lsls	r3, r2
				(func_on &&
    1d4c:	f013 0f10 	tst.w	r3, #16
    1d50:	d116      	bne.n	1d80 <ids_print+0x48>
	total += print_formatted(log_output,
    1d52:	4e0c      	ldr	r6, [pc, #48]	; (1d84 <ids_print+0x4c>)
    1d54:	e009      	b.n	1d6a <ids_print+0x32>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    1d56:	4b0c      	ldr	r3, [pc, #48]	; (1d88 <ids_print+0x50>)
    1d58:	9a07      	ldr	r2, [sp, #28]
    1d5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1d5e:	490b      	ldr	r1, [pc, #44]	; (1d8c <ids_print+0x54>)
    1d60:	f7ff ff08 	bl	1b74 <print_formatted>
    1d64:	4607      	mov	r7, r0
    1d66:	e7ed      	b.n	1d44 <ids_print+0xc>
	total += print_formatted(log_output,
    1d68:	4e06      	ldr	r6, [pc, #24]	; (1d84 <ids_print+0x4c>)
    1d6a:	9906      	ldr	r1, [sp, #24]
    1d6c:	4628      	mov	r0, r5
    1d6e:	f7ff fe7d 	bl	1a6c <log_source_name_get>
    1d72:	4602      	mov	r2, r0
    1d74:	4631      	mov	r1, r6
    1d76:	4620      	mov	r0, r4
    1d78:	f7ff fefc 	bl	1b74 <print_formatted>
}
    1d7c:	4438      	add	r0, r7
    1d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	total += print_formatted(log_output,
    1d80:	4e03      	ldr	r6, [pc, #12]	; (1d90 <ids_print+0x58>)
    1d82:	e7f2      	b.n	1d6a <ids_print+0x32>
    1d84:	00009ae4 	.word	0x00009ae4
    1d88:	00009b30 	.word	0x00009b30
    1d8c:	00009af0 	.word	0x00009af0
    1d90:	00009aec 	.word	0x00009aec

00001d94 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
    1d94:	b570      	push	{r4, r5, r6, lr}
    1d96:	b084      	sub	sp, #16
    1d98:	4605      	mov	r5, r0
    1d9a:	461e      	mov	r6, r3
	int length;
	uint8_t level = (uint8_t)src_level.level;
	uint8_t domain_id = (uint8_t)src_level.domain_id;
    1d9c:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	uint16_t source_id = (uint16_t)src_level.source_id;
    1da0:	f3c1 1089 	ubfx	r0, r1, #6, #10
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
    1da4:	f011 0407 	ands.w	r4, r1, #7
    1da8:	d10f      	bne.n	1dca <log_output_string+0x36>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
    1daa:	9b08      	ldr	r3, [sp, #32]
    1dac:	4632      	mov	r2, r6
    1dae:	4629      	mov	r1, r5
    1db0:	4810      	ldr	r0, [pc, #64]	; (1df4 <log_output_string+0x60>)
    1db2:	f004 f9bd 	bl	6130 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
    1db6:	b994      	cbnz	r4, 1dde <log_output_string+0x4a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
    1db8:	4630      	mov	r0, r6
    1dba:	f004 fdd0 	bl	695e <ends_with_newline>
    1dbe:	b198      	cbz	r0, 1de8 <log_output_string+0x54>
			print_formatted(log_output, "\r");
    1dc0:	490d      	ldr	r1, [pc, #52]	; (1df8 <log_output_string+0x64>)
    1dc2:	4628      	mov	r0, r5
    1dc4:	f7ff fed6 	bl	1b74 <print_formatted>
    1dc8:	e00e      	b.n	1de8 <log_output_string+0x54>
		prefix_print(log_output, flags, true, timestamp,
    1dca:	9002      	str	r0, [sp, #8]
    1dcc:	9301      	str	r3, [sp, #4]
    1dce:	9400      	str	r4, [sp, #0]
    1dd0:	4613      	mov	r3, r2
    1dd2:	2201      	movs	r2, #1
    1dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dd6:	4628      	mov	r0, r5
    1dd8:	f004 fde4 	bl	69a4 <prefix_print>
    1ddc:	e7e5      	b.n	1daa <log_output_string+0x16>
		}
	} else {
		postfix_print(log_output, flags, level);
    1dde:	4622      	mov	r2, r4
    1de0:	9909      	ldr	r1, [sp, #36]	; 0x24
    1de2:	4628      	mov	r0, r5
    1de4:	f004 fdd2 	bl	698c <postfix_print>
	}

	log_output_flush(log_output);
    1de8:	4628      	mov	r0, r5
    1dea:	f004 fe02 	bl	69f2 <log_output_flush>
}
    1dee:	b004      	add	sp, #16
    1df0:	bd70      	pop	{r4, r5, r6, pc}
    1df2:	bf00      	nop
    1df4:	0000692b 	.word	0x0000692b
    1df8:	00009af8 	.word	0x00009af8

00001dfc <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
    1dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e00:	b084      	sub	sp, #16
    1e02:	4607      	mov	r7, r0
    1e04:	461d      	mov	r5, r3
    1e06:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    1e08:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    1e0a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	uint32_t prefix_offset;
	uint8_t level = (uint8_t)src_level.level;
    1e0e:	f001 0a07 	and.w	sl, r1, #7
	uint8_t domain_id = (uint8_t)src_level.domain_id;
    1e12:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	uint16_t source_id = (uint16_t)src_level.source_id;
    1e16:	f3c1 1189 	ubfx	r1, r1, #6, #10
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    1e1a:	9102      	str	r1, [sp, #8]
    1e1c:	9301      	str	r3, [sp, #4]
    1e1e:	f8cd a000 	str.w	sl, [sp]
    1e22:	4613      	mov	r3, r2
    1e24:	2201      	movs	r2, #1
    1e26:	4641      	mov	r1, r8
    1e28:	f004 fdbc 	bl	69a4 <prefix_print>
    1e2c:	4681      	mov	r9, r0
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
    1e2e:	462a      	mov	r2, r5
    1e30:	490f      	ldr	r1, [pc, #60]	; (1e70 <log_output_hexdump+0x74>)
    1e32:	4638      	mov	r0, r7
    1e34:	f7ff fe9e 	bl	1b74 <print_formatted>

	while (length) {
    1e38:	b174      	cbz	r4, 1e58 <log_output_hexdump+0x5c>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
    1e3a:	4625      	mov	r5, r4
    1e3c:	2c10      	cmp	r4, #16
    1e3e:	bf28      	it	cs
    1e40:	2510      	movcs	r5, #16
				HEXDUMP_BYTES_IN_LINE : length;

		hexdump_line_print(log_output, data, part_len,
    1e42:	f8cd 8000 	str.w	r8, [sp]
    1e46:	464b      	mov	r3, r9
    1e48:	462a      	mov	r2, r5
    1e4a:	4631      	mov	r1, r6
    1e4c:	4638      	mov	r0, r7
    1e4e:	f7ff ff15 	bl	1c7c <hexdump_line_print>
				   prefix_offset, flags);

		data += part_len;
    1e52:	442e      	add	r6, r5
		length -= part_len;
    1e54:	1b64      	subs	r4, r4, r5
    1e56:	e7ef      	b.n	1e38 <log_output_hexdump+0x3c>
	};

	postfix_print(log_output, flags, level);
    1e58:	4652      	mov	r2, sl
    1e5a:	4641      	mov	r1, r8
    1e5c:	4638      	mov	r0, r7
    1e5e:	f004 fd95 	bl	698c <postfix_print>
	log_output_flush(log_output);
    1e62:	4638      	mov	r0, r7
    1e64:	f004 fdc5 	bl	69f2 <log_output_flush>
}
    1e68:	b004      	add	sp, #16
    1e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e6e:	bf00      	nop
    1e70:	00009acc 	.word	0x00009acc

00001e74 <log_output_timestamp_freq_set>:
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1e74:	4b07      	ldr	r3, [pc, #28]	; (1e94 <log_output_timestamp_freq_set+0x20>)
    1e76:	2201      	movs	r2, #1
    1e78:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1e7a:	4b07      	ldr	r3, [pc, #28]	; (1e98 <log_output_timestamp_freq_set+0x24>)
    1e7c:	4298      	cmp	r0, r3
    1e7e:	d905      	bls.n	1e8c <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    1e80:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1e82:	4a04      	ldr	r2, [pc, #16]	; (1e94 <log_output_timestamp_freq_set+0x20>)
    1e84:	6813      	ldr	r3, [r2, #0]
    1e86:	005b      	lsls	r3, r3, #1
    1e88:	6013      	str	r3, [r2, #0]
    1e8a:	e7f6      	b.n	1e7a <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    1e8c:	4b03      	ldr	r3, [pc, #12]	; (1e9c <log_output_timestamp_freq_set+0x28>)
    1e8e:	6018      	str	r0, [r3, #0]
}
    1e90:	4770      	bx	lr
    1e92:	bf00      	nop
    1e94:	200227d0 	.word	0x200227d0
    1e98:	000f4240 	.word	0x000f4240
    1e9c:	200227cc 	.word	0x200227cc

00001ea0 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1ea0:	b570      	push	{r4, r5, r6, lr}
    1ea2:	4606      	mov	r6, r0
    1ea4:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
    1ea6:	2400      	movs	r4, #0
    1ea8:	42ac      	cmp	r4, r5
    1eaa:	d207      	bcs.n	1ebc <char_out+0x1c>
		uart_poll_out(uart_dev, data[i]);
    1eac:	4b04      	ldr	r3, [pc, #16]	; (1ec0 <char_out+0x20>)
    1eae:	6818      	ldr	r0, [r3, #0]
    1eb0:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    1eb2:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1eb4:	685b      	ldr	r3, [r3, #4]
    1eb6:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    1eb8:	3401      	adds	r4, #1
    1eba:	e7f5      	b.n	1ea8 <char_out+0x8>
	}

	return length;
}
    1ebc:	4628      	mov	r0, r5
    1ebe:	bd70      	pop	{r4, r5, r6, pc}
    1ec0:	200227e8 	.word	0x200227e8

00001ec4 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    1ec4:	b508      	push	{r3, lr}
    1ec6:	4803      	ldr	r0, [pc, #12]	; (1ed4 <log_backend_uart_init+0x10>)
    1ec8:	f002 fcd0 	bl	486c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1ecc:	4b02      	ldr	r3, [pc, #8]	; (1ed8 <log_backend_uart_init+0x14>)
    1ece:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
}
    1ed0:	bd08      	pop	{r3, pc}
    1ed2:	bf00      	nop
    1ed4:	00009b44 	.word	0x00009b44
    1ed8:	200227e8 	.word	0x200227e8

00001edc <panic>:

static void panic(struct log_backend const *const backend)
{
    1edc:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    1ede:	4802      	ldr	r0, [pc, #8]	; (1ee8 <panic+0xc>)
    1ee0:	f004 fd87 	bl	69f2 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    1ee4:	bd08      	pop	{r3, pc}
    1ee6:	bf00      	nop
    1ee8:	00009b78 	.word	0x00009b78

00001eec <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
    1eec:	b500      	push	{lr}
    1eee:	b085      	sub	sp, #20
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
    1ef0:	200f      	movs	r0, #15
    1ef2:	9002      	str	r0, [sp, #8]
    1ef4:	9807      	ldr	r0, [sp, #28]
    1ef6:	9001      	str	r0, [sp, #4]
    1ef8:	9806      	ldr	r0, [sp, #24]
    1efa:	9000      	str	r0, [sp, #0]
    1efc:	4802      	ldr	r0, [pc, #8]	; (1f08 <sync_hexdump+0x1c>)
    1efe:	f7ff ff7d 	bl	1dfc <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
    1f02:	b005      	add	sp, #20
    1f04:	f85d fb04 	ldr.w	pc, [sp], #4
    1f08:	00009b78 	.word	0x00009b78

00001f0c <sync_string>:
{
    1f0c:	b500      	push	{lr}
    1f0e:	b083      	sub	sp, #12
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
    1f10:	200f      	movs	r0, #15
    1f12:	9001      	str	r0, [sp, #4]
    1f14:	9804      	ldr	r0, [sp, #16]
    1f16:	9000      	str	r0, [sp, #0]
    1f18:	4802      	ldr	r0, [pc, #8]	; (1f24 <sync_string+0x18>)
    1f1a:	f7ff ff3b 	bl	1d94 <log_output_string>
}
    1f1e:	b003      	add	sp, #12
    1f20:	f85d fb04 	ldr.w	pc, [sp], #4
    1f24:	00009b78 	.word	0x00009b78

00001f28 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
    1f28:	b410      	push	{r4}
    1f2a:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
    1f2c:	2300      	movs	r3, #0
    1f2e:	4a08      	ldr	r2, [pc, #32]	; (1f50 <get_flash_area_from_id+0x28>)
    1f30:	6812      	ldr	r2, [r2, #0]
    1f32:	429a      	cmp	r2, r3
    1f34:	dd09      	ble.n	1f4a <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
    1f36:	011a      	lsls	r2, r3, #4
    1f38:	4906      	ldr	r1, [pc, #24]	; (1f54 <get_flash_area_from_id+0x2c>)
    1f3a:	6809      	ldr	r1, [r1, #0]
    1f3c:	eb01 1003 	add.w	r0, r1, r3, lsl #4
    1f40:	5c8a      	ldrb	r2, [r1, r2]
    1f42:	42a2      	cmp	r2, r4
    1f44:	d002      	beq.n	1f4c <get_flash_area_from_id+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
    1f46:	3301      	adds	r3, #1
    1f48:	e7f1      	b.n	1f2e <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
    1f4a:	2000      	movs	r0, #0
}
    1f4c:	bc10      	pop	{r4}
    1f4e:	4770      	bx	lr
    1f50:	00009c18 	.word	0x00009c18
    1f54:	2002000c 	.word	0x2002000c

00001f58 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1f58:	4b08      	ldr	r3, [pc, #32]	; (1f7c <flash_area_open+0x24>)
    1f5a:	681b      	ldr	r3, [r3, #0]
    1f5c:	b13b      	cbz	r3, 1f6e <flash_area_open+0x16>
{
    1f5e:	b510      	push	{r4, lr}
    1f60:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    1f62:	f7ff ffe1 	bl	1f28 <get_flash_area_from_id>
	if (area == NULL) {
    1f66:	b128      	cbz	r0, 1f74 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    1f68:	6020      	str	r0, [r4, #0]
	return 0;
    1f6a:	2000      	movs	r0, #0
}
    1f6c:	bd10      	pop	{r4, pc}
		return -EACCES;
    1f6e:	f06f 000c 	mvn.w	r0, #12
}
    1f72:	4770      	bx	lr
		return -ENOENT;
    1f74:	f06f 0001 	mvn.w	r0, #1
    1f78:	e7f8      	b.n	1f6c <flash_area_open+0x14>
    1f7a:	bf00      	nop
    1f7c:	2002000c 	.word	0x2002000c

00001f80 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1f80:	b500      	push	{lr}
    1f82:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1f84:	ab03      	add	r3, sp, #12
    1f86:	9300      	str	r3, [sp, #0]
    1f88:	4b02      	ldr	r3, [pc, #8]	; (1f94 <flash_area_get_sectors+0x14>)
    1f8a:	f004 fd7b 	bl	6a84 <flash_area_layout>
}
    1f8e:	b00b      	add	sp, #44	; 0x2c
    1f90:	f85d fb04 	ldr.w	pc, [sp], #4
    1f94:	00006a49 	.word	0x00006a49

00001f98 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1f98:	b510      	push	{r4, lr}
    1f9a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1f9c:	280a      	cmp	r0, #10
    1f9e:	d007      	beq.n	1fb0 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1fa0:	4b07      	ldr	r3, [pc, #28]	; (1fc0 <console_out+0x28>)
    1fa2:	6818      	ldr	r0, [r3, #0]
    1fa4:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    1fa6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1fa8:	685b      	ldr	r3, [r3, #4]
    1faa:	4798      	blx	r3

	return c;
}
    1fac:	4620      	mov	r0, r4
    1fae:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1fb0:	4b03      	ldr	r3, [pc, #12]	; (1fc0 <console_out+0x28>)
    1fb2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    1fb4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1fb6:	685b      	ldr	r3, [r3, #4]
    1fb8:	210d      	movs	r1, #13
    1fba:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    1fbc:	e7f0      	b.n	1fa0 <console_out+0x8>
    1fbe:	bf00      	nop
    1fc0:	200227ec 	.word	0x200227ec

00001fc4 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    1fc4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    1fc6:	4c04      	ldr	r4, [pc, #16]	; (1fd8 <uart_console_hook_install+0x14>)
    1fc8:	4620      	mov	r0, r4
    1fca:	f000 fecb 	bl	2d64 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1fce:	4620      	mov	r0, r4
    1fd0:	f7ff fc2a 	bl	1828 <__printk_hook_install>
}
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	bf00      	nop
    1fd8:	00001f99 	.word	0x00001f99

00001fdc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1fdc:	b508      	push	{r3, lr}
    1fde:	4804      	ldr	r0, [pc, #16]	; (1ff0 <uart_console_init+0x14>)
    1fe0:	f002 fc44 	bl	486c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1fe4:	4b03      	ldr	r3, [pc, #12]	; (1ff4 <uart_console_init+0x18>)
    1fe6:	6018      	str	r0, [r3, #0]

	uart_console_hook_install();
    1fe8:	f7ff ffec 	bl	1fc4 <uart_console_hook_install>

	return 0;
}
    1fec:	2000      	movs	r0, #0
    1fee:	bd08      	pop	{r3, pc}
    1ff0:	00009b44 	.word	0x00009b44
    1ff4:	200227ec 	.word	0x200227ec

00001ff8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1ff8:	4800      	ldr	r0, [pc, #0]	; (1ffc <get_hf_flags+0x4>)
    1ffa:	4770      	bx	lr
    1ffc:	20022840 	.word	0x20022840

00002000 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2000:	4b03      	ldr	r3, [pc, #12]	; (2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>)
    2002:	1ac0      	subs	r0, r0, r3
    2004:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    2006:	4b03      	ldr	r3, [pc, #12]	; (2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>)
    2008:	fb03 f000 	mul.w	r0, r3, r0
    200c:	4770      	bx	lr
    200e:	bf00      	nop
    2010:	20022800 	.word	0x20022800
    2014:	b6db6db7 	.word	0xb6db6db7

00002018 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2018:	b538      	push	{r3, r4, r5, lr}
    201a:	4605      	mov	r5, r0
    201c:	460c      	mov	r4, r1
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
    201e:	f7ff ffef 	bl	2000 <get_subsys>
    2022:	4601      	mov	r1, r0
    2024:	2240      	movs	r2, #64	; 0x40
    2026:	4803      	ldr	r0, [pc, #12]	; (2034 <onoff_stop+0x1c>)
    2028:	f004 fe53 	bl	6cd2 <stop>
    202c:	4601      	mov	r1, r0
	notify(mgr, res);
    202e:	4628      	mov	r0, r5
    2030:	47a0      	blx	r4
}
    2032:	bd38      	pop	{r3, r4, r5, pc}
    2034:	20020100 	.word	0x20020100

00002038 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2038:	b530      	push	{r4, r5, lr}
    203a:	b085      	sub	sp, #20
    203c:	4605      	mov	r5, r0
    203e:	460c      	mov	r4, r1
	struct clock_control_async_data data = {
    2040:	2300      	movs	r3, #0
    2042:	9301      	str	r3, [sp, #4]
    2044:	4b08      	ldr	r3, [pc, #32]	; (2068 <onoff_start+0x30>)
    2046:	9302      	str	r3, [sp, #8]
    2048:	9103      	str	r1, [sp, #12]
		.cb = onoff_started_callback,
		.user_data = notify
	};
	int err;

	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
    204a:	f7ff ffd9 	bl	2000 <get_subsys>
    204e:	4601      	mov	r1, r0
    2050:	2340      	movs	r3, #64	; 0x40
    2052:	aa01      	add	r2, sp, #4
    2054:	4805      	ldr	r0, [pc, #20]	; (206c <onoff_start+0x34>)
    2056:	f004 fe56 	bl	6d06 <async_start>
			  &data, CTX_ONOFF);
	if (err < 0) {
    205a:	1e01      	subs	r1, r0, #0
    205c:	db01      	blt.n	2062 <onoff_start+0x2a>
		notify(mgr, err);
	}
}
    205e:	b005      	add	sp, #20
    2060:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    2062:	4628      	mov	r0, r5
    2064:	47a0      	blx	r4
}
    2066:	e7fa      	b.n	205e <onoff_start+0x26>
    2068:	00006d53 	.word	0x00006d53
    206c:	20020100 	.word	0x20020100

00002070 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    2070:	b508      	push	{r3, lr}
	const struct device *dev = DEVICE_GET(clock_nrf);

	switch (event) {
    2072:	b110      	cbz	r0, 207a <clock_event_handler+0xa>
    2074:	2801      	cmp	r0, #1
    2076:	d00d      	beq.n	2094 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    2078:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    207a:	2100      	movs	r1, #0
    207c:	4808      	ldr	r0, [pc, #32]	; (20a0 <clock_event_handler+0x30>)
    207e:	f004 fdaf 	bl	6be0 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2082:	6883      	ldr	r3, [r0, #8]
    2084:	f013 0f07 	tst.w	r3, #7
    2088:	d1f6      	bne.n	2078 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    208a:	2100      	movs	r1, #0
    208c:	4804      	ldr	r0, [pc, #16]	; (20a0 <clock_event_handler+0x30>)
    208e:	f004 fe0e 	bl	6cae <clkstarted_handle>
    2092:	e7f1      	b.n	2078 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2094:	2101      	movs	r1, #1
    2096:	4802      	ldr	r0, [pc, #8]	; (20a0 <clock_event_handler+0x30>)
    2098:	f004 fe09 	bl	6cae <clkstarted_handle>
}
    209c:	e7ec      	b.n	2078 <clock_event_handler+0x8>
    209e:	bf00      	nop
    20a0:	20020100 	.word	0x20020100

000020a4 <generic_hfclk_start>:
{
    20a4:	b510      	push	{r4, lr}
	__asm__ volatile(
    20a6:	f04f 0320 	mov.w	r3, #32
    20aa:	f3ef 8411 	mrs	r4, BASEPRI
    20ae:	f383 8811 	msr	BASEPRI, r3
    20b2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    20b6:	4a13      	ldr	r2, [pc, #76]	; (2104 <generic_hfclk_start+0x60>)
    20b8:	6813      	ldr	r3, [r2, #0]
    20ba:	f043 0302 	orr.w	r3, r3, #2
    20be:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    20c0:	f013 0f01 	tst.w	r3, #1
    20c4:	d108      	bne.n	20d8 <generic_hfclk_start+0x34>
	bool already_started = false;
    20c6:	2300      	movs	r3, #0
	__asm__ volatile(
    20c8:	f384 8811 	msr	BASEPRI, r4
    20cc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    20d0:	b99b      	cbnz	r3, 20fa <generic_hfclk_start+0x56>
	hfclk_start();
    20d2:	f004 fe55 	bl	6d80 <hfclk_start>
}
    20d6:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    20d8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    20dc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    20e0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    20e4:	f012 0f01 	tst.w	r2, #1
    20e8:	d101      	bne.n	20ee <generic_hfclk_start+0x4a>
	bool already_started = false;
    20ea:	2300      	movs	r3, #0
    20ec:	e7ec      	b.n	20c8 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    20ee:	f7ff ff83 	bl	1ff8 <get_hf_flags>
    20f2:	f004 fdc9 	bl	6c88 <set_on_state>
			already_started = true;
    20f6:	2301      	movs	r3, #1
    20f8:	e7e6      	b.n	20c8 <generic_hfclk_start+0x24>
		clkstarted_handle(DEVICE_GET(clock_nrf),
    20fa:	2100      	movs	r1, #0
    20fc:	4802      	ldr	r0, [pc, #8]	; (2108 <generic_hfclk_start+0x64>)
    20fe:	f004 fdd6 	bl	6cae <clkstarted_handle>
		return;
    2102:	e7e8      	b.n	20d6 <generic_hfclk_start+0x32>
    2104:	20022850 	.word	0x20022850
    2108:	20020100 	.word	0x20020100

0000210c <generic_hfclk_stop>:
{
    210c:	b508      	push	{r3, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    210e:	4b08      	ldr	r3, [pc, #32]	; (2130 <generic_hfclk_stop+0x24>)
    2110:	e8d3 2fef 	ldaex	r2, [r3]
    2114:	f022 0102 	bic.w	r1, r2, #2
    2118:	e8c3 1fe0 	stlex	r0, r1, [r3]
    211c:	2800      	cmp	r0, #0
    211e:	d1f7      	bne.n	2110 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2120:	f012 0f01 	tst.w	r2, #1
    2124:	d000      	beq.n	2128 <generic_hfclk_stop+0x1c>
}
    2126:	bd08      	pop	{r3, pc}
	hfclk_stop();
    2128:	f004 fe20 	bl	6d6c <hfclk_stop>
    212c:	e7fb      	b.n	2126 <generic_hfclk_stop+0x1a>
    212e:	bf00      	nop
    2130:	20022850 	.word	0x20022850

00002134 <clk_init>:

static int clk_init(const struct device *dev)
{
    2134:	b570      	push	{r4, r5, r6, lr}
    2136:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2138:	2200      	movs	r2, #0
    213a:	2101      	movs	r1, #1
    213c:	2005      	movs	r0, #5
    213e:	f000 fabd 	bl	26bc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2142:	2005      	movs	r0, #5
    2144:	f000 fa9c 	bl	2680 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    2148:	4811      	ldr	r0, [pc, #68]	; (2190 <clk_init+0x5c>)
    214a:	f001 fb23 	bl	3794 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    214e:	4b11      	ldr	r3, [pc, #68]	; (2194 <clk_init+0x60>)
    2150:	4298      	cmp	r0, r3
    2152:	d11a      	bne.n	218a <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2154:	f005 fa15 	bl	7582 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    2158:	2400      	movs	r4, #0
    215a:	e003      	b.n	2164 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    215c:	2301      	movs	r3, #1
    215e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2160:	441c      	add	r4, r3
    2162:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    2164:	2c01      	cmp	r4, #1
    2166:	d80e      	bhi.n	2186 <clk_init+0x52>
						get_sub_data(dev, i);
    2168:	4621      	mov	r1, r4
    216a:	4630      	mov	r0, r6
    216c:	f004 fd38 	bl	6be0 <get_sub_data>
    2170:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2172:	4621      	mov	r1, r4
    2174:	4630      	mov	r0, r6
    2176:	f004 fd40 	bl	6bfa <get_onoff_manager>
    217a:	4907      	ldr	r1, [pc, #28]	; (2198 <clk_init+0x64>)
    217c:	f004 fa4c 	bl	6618 <onoff_manager_init>
		if (err < 0) {
    2180:	2800      	cmp	r0, #0
    2182:	daeb      	bge.n	215c <clk_init+0x28>
    2184:	e000      	b.n	2188 <clk_init+0x54>
	}

	return 0;
    2186:	2000      	movs	r0, #0
}
    2188:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    218a:	f06f 0004 	mvn.w	r0, #4
    218e:	e7fb      	b.n	2188 <clk_init+0x54>
    2190:	00002071 	.word	0x00002071
    2194:	0bad0000 	.word	0x0bad0000
    2198:	00009c70 	.word	0x00009c70

0000219c <lfclk_spinwait>:
{
    219c:	b570      	push	{r4, r5, r6, lr}
    219e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    21a0:	2801      	cmp	r0, #1
    21a2:	d107      	bne.n	21b4 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    21a4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21a8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    21ac:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    21b0:	2b02      	cmp	r3, #2
    21b2:	d03f      	beq.n	2234 <lfclk_spinwait+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    21b4:	f006 ffed 	bl	9192 <k_is_in_isr>
    21b8:	b920      	cbnz	r0, 21c4 <lfclk_spinwait+0x28>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    21ba:	4b30      	ldr	r3, [pc, #192]	; (227c <lfclk_spinwait+0xe0>)
    21bc:	781b      	ldrb	r3, [r3, #0]
    21be:	b19b      	cbz	r3, 21e8 <lfclk_spinwait+0x4c>
    21c0:	2300      	movs	r3, #0
    21c2:	e000      	b.n	21c6 <lfclk_spinwait+0x2a>
    21c4:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    21c6:	461c      	mov	r4, r3
    21c8:	b183      	cbz	r3, 21ec <lfclk_spinwait+0x50>
	__asm__ volatile(
    21ca:	f04f 0320 	mov.w	r3, #32
    21ce:	f3ef 8611 	mrs	r6, BASEPRI
    21d2:	f383 8811 	msr	BASEPRI, r3
    21d6:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    21da:	b9a4      	cbnz	r4, 2206 <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    21dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21e0:	2202      	movs	r2, #2
    21e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    21e6:	e00e      	b.n	2206 <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    21e8:	2301      	movs	r3, #1
    21ea:	e7ec      	b.n	21c6 <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    21ec:	2600      	movs	r6, #0
    21ee:	e7f4      	b.n	21da <lfclk_spinwait+0x3e>
			if (isr_mode) {
    21f0:	b30c      	cbz	r4, 2236 <lfclk_spinwait+0x9a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    21f2:	4630      	mov	r0, r6
    21f4:	f000 fa94 	bl	2720 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    21f8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21fc:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2200:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2202:	2b01      	cmp	r3, #1
    2204:	d01c      	beq.n	2240 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2206:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    220a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    220e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2212:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2216:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    221a:	d126      	bne.n	226a <lfclk_spinwait+0xce>
    return false;
    221c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    221e:	2a00      	cmp	r2, #0
    2220:	d0e6      	beq.n	21f0 <lfclk_spinwait+0x54>
    2222:	2b02      	cmp	r3, #2
    2224:	d001      	beq.n	222a <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2226:	2d01      	cmp	r5, #1
    2228:	d1e2      	bne.n	21f0 <lfclk_spinwait+0x54>
	if (isr_mode) {
    222a:	b304      	cbz	r4, 226e <lfclk_spinwait+0xd2>
	__asm__ volatile(
    222c:	f386 8811 	msr	BASEPRI, r6
    2230:	f3bf 8f6f 	isb	sy
}
    2234:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    2236:	2021      	movs	r0, #33	; 0x21
    2238:	2100      	movs	r1, #0
    223a:	f002 fec5 	bl	4fc8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    223e:	e7db      	b.n	21f8 <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2240:	4b0f      	ldr	r3, [pc, #60]	; (2280 <lfclk_spinwait+0xe4>)
    2242:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2244:	2b00      	cmp	r3, #0
    2246:	d0de      	beq.n	2206 <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2248:	4b0d      	ldr	r3, [pc, #52]	; (2280 <lfclk_spinwait+0xe4>)
    224a:	2200      	movs	r2, #0
    224c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    224e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2250:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2254:	2202      	movs	r2, #2
    2256:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    225a:	4b0a      	ldr	r3, [pc, #40]	; (2284 <lfclk_spinwait+0xe8>)
    225c:	2220      	movs	r2, #32
    225e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2262:	4b09      	ldr	r3, [pc, #36]	; (2288 <lfclk_spinwait+0xec>)
    2264:	2201      	movs	r2, #1
    2266:	601a      	str	r2, [r3, #0]
}
    2268:	e7cd      	b.n	2206 <lfclk_spinwait+0x6a>
                return true;
    226a:	2201      	movs	r2, #1
    226c:	e7d7      	b.n	221e <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    226e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2272:	2202      	movs	r2, #2
    2274:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2278:	e7dc      	b.n	2234 <lfclk_spinwait+0x98>
    227a:	bf00      	nop
    227c:	20022e45 	.word	0x20022e45
    2280:	50005104 	.word	0x50005104
    2284:	e000e100 	.word	0xe000e100
    2288:	50005008 	.word	0x50005008

0000228c <z_nrf_clock_control_lf_on>:
{
    228c:	b510      	push	{r4, lr}
    228e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2290:	4b0e      	ldr	r3, [pc, #56]	; (22cc <z_nrf_clock_control_lf_on+0x40>)
    2292:	2101      	movs	r1, #1
    2294:	e8d3 2fef 	ldaex	r2, [r3]
    2298:	e8c3 1fe0 	stlex	r0, r1, [r3]
    229c:	2800      	cmp	r0, #0
    229e:	d1f9      	bne.n	2294 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    22a0:	b11a      	cbz	r2, 22aa <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    22a2:	1e63      	subs	r3, r4, #1
    22a4:	2b01      	cmp	r3, #1
    22a6:	d90c      	bls.n	22c2 <z_nrf_clock_control_lf_on+0x36>
}
    22a8:	bd10      	pop	{r4, pc}
				get_onoff_manager(DEVICE_GET(clock_nrf),
    22aa:	4809      	ldr	r0, [pc, #36]	; (22d0 <z_nrf_clock_control_lf_on+0x44>)
    22ac:	f004 fca5 	bl	6bfa <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    22b0:	4908      	ldr	r1, [pc, #32]	; (22d4 <z_nrf_clock_control_lf_on+0x48>)
    22b2:	2300      	movs	r3, #0
    22b4:	604b      	str	r3, [r1, #4]
    22b6:	60cb      	str	r3, [r1, #12]
    22b8:	2301      	movs	r3, #1
    22ba:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    22bc:	f004 f9c8 	bl	6650 <onoff_request>
    22c0:	e7ef      	b.n	22a2 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    22c2:	4620      	mov	r0, r4
    22c4:	f7ff ff6a 	bl	219c <lfclk_spinwait>
		break;
    22c8:	e7ee      	b.n	22a8 <z_nrf_clock_control_lf_on+0x1c>
    22ca:	bf00      	nop
    22cc:	20022854 	.word	0x20022854
    22d0:	20020100 	.word	0x20020100
    22d4:	200227f0 	.word	0x200227f0

000022d8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    22d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    22dc:	4b01      	ldr	r3, [pc, #4]	; (22e4 <set_comparator+0xc>)
    22de:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
}
    22e2:	4770      	bx	lr
    22e4:	50015000 	.word	0x50015000

000022e8 <get_comparator>:
    return p_reg->CC[ch];
    22e8:	4b01      	ldr	r3, [pc, #4]	; (22f0 <get_comparator+0x8>)
    22ea:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540

static uint32_t get_comparator(void)
{
	return nrf_rtc_cc_get(RTC, 0);
}
    22ee:	4770      	bx	lr
    22f0:	50015000 	.word	0x50015000

000022f4 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    22f4:	4b02      	ldr	r3, [pc, #8]	; (2300 <event_clear+0xc>)
    22f6:	2200      	movs	r2, #0
    22f8:	601a      	str	r2, [r3, #0]
    22fa:	681b      	ldr	r3, [r3, #0]

static void event_clear(void)
{
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
}
    22fc:	4770      	bx	lr
    22fe:	bf00      	nop
    2300:	50015140 	.word	0x50015140

00002304 <event_enable>:
    p_reg->EVTENSET = mask;
    2304:	4b02      	ldr	r3, [pc, #8]	; (2310 <event_enable+0xc>)
    2306:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    230a:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

static void event_enable(void)
{
	nrf_rtc_event_enable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    230e:	4770      	bx	lr
    2310:	50015000 	.word	0x50015000

00002314 <int_disable>:
    p_reg->INTENCLR = mask;
    2314:	4b02      	ldr	r3, [pc, #8]	; (2320 <int_disable+0xc>)
    2316:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    231a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

static void int_disable(void)
{
	nrf_rtc_int_disable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    231e:	4770      	bx	lr
    2320:	50015000 	.word	0x50015000

00002324 <int_enable>:
    p_reg->INTENSET = mask;
    2324:	4b02      	ldr	r3, [pc, #8]	; (2330 <int_enable+0xc>)
    2326:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    232a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

static void int_enable(void)
{
	nrf_rtc_int_enable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    232e:	4770      	bx	lr
    2330:	50015000 	.word	0x50015000

00002334 <counter>:
     return p_reg->COUNTER;
    2334:	4b01      	ldr	r3, [pc, #4]	; (233c <counter+0x8>)
    2336:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    233a:	4770      	bx	lr
    233c:	50015000 	.word	0x50015000

00002340 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    2340:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(arg);
	event_clear();
    2342:	f7ff ffd7 	bl	22f4 <event_clear>

	uint32_t t = get_comparator();
    2346:	f7ff ffcf 	bl	22e8 <get_comparator>
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    234a:	4d05      	ldr	r5, [pc, #20]	; (2360 <rtc_nrf_isr+0x20>)
    234c:	682c      	ldr	r4, [r5, #0]
    234e:	4621      	mov	r1, r4
    2350:	f004 fd1d 	bl	6d8e <counter_sub>

	last_count += dticks * CYC_PER_TICK;
    2354:	4404      	add	r4, r0
    2356:	602c      	str	r4, [r5, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    2358:	f002 ff3c 	bl	51d4 <z_clock_announce>
}
    235c:	bd38      	pop	{r3, r4, r5, pc}
    235e:	bf00      	nop
    2360:	20022858 	.word	0x20022858

00002364 <prevent_false_prev_evt>:
{
    2364:	b538      	push	{r3, r4, r5, lr}
	uint32_t now = counter();
    2366:	f7ff ffe5 	bl	2334 <counter>
    236a:	4604      	mov	r4, r0
	prev_val = get_comparator();
    236c:	f7ff ffbc 	bl	22e8 <get_comparator>
    2370:	4605      	mov	r5, r0
	event_clear();
    2372:	f7ff ffbf 	bl	22f4 <event_clear>
	set_comparator(now);
    2376:	4620      	mov	r0, r4
    2378:	f7ff ffae 	bl	22d8 <set_comparator>
	event_enable();
    237c:	f7ff ffc2 	bl	2304 <event_enable>
	if (counter_sub(prev_val, now) == 1) {
    2380:	4621      	mov	r1, r4
    2382:	4628      	mov	r0, r5
    2384:	f004 fd03 	bl	6d8e <counter_sub>
    2388:	2801      	cmp	r0, #1
    238a:	d005      	beq.n	2398 <prevent_false_prev_evt+0x34>
    238c:	4b05      	ldr	r3, [pc, #20]	; (23a4 <prevent_false_prev_evt+0x40>)
    238e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2392:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    2396:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_busy_wait(usec_to_wait);
    2398:	200f      	movs	r0, #15
    239a:	f006 ff00 	bl	919e <z_impl_k_busy_wait>
		event_clear();
    239e:	f7ff ffa9 	bl	22f4 <event_clear>
    23a2:	e7f3      	b.n	238c <prevent_false_prev_evt+0x28>
    23a4:	e000e100 	.word	0xe000e100

000023a8 <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
    23a8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    23aa:	4d0f      	ldr	r5, [pc, #60]	; (23e8 <z_clock_driver_init+0x40>)
    23ac:	2400      	movs	r4, #0
    23ae:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    23b2:	f7ff ff9f 	bl	22f4 <event_clear>
    23b6:	4b0d      	ldr	r3, [pc, #52]	; (23ec <z_clock_driver_init+0x44>)
    23b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    23bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();
    23c0:	f7ff ffb0 	bl	2324 <int_enable>

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    23c4:	4622      	mov	r2, r4
    23c6:	2101      	movs	r1, #1
    23c8:	2015      	movs	r0, #21
    23ca:	f000 f977 	bl	26bc <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    23ce:	2015      	movs	r0, #21
    23d0:	f000 f956 	bl	2680 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    23d4:	2301      	movs	r3, #1
    23d6:	4a06      	ldr	r2, [pc, #24]	; (23f0 <z_clock_driver_init+0x48>)
    23d8:	6013      	str	r3, [r2, #0]
    23da:	602b      	str	r3, [r5, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    23dc:	2002      	movs	r0, #2
    23de:	f7ff ff55 	bl	228c <z_nrf_clock_control_lf_on>

	return 0;
}
    23e2:	4620      	mov	r0, r4
    23e4:	bd38      	pop	{r3, r4, r5, pc}
    23e6:	bf00      	nop
    23e8:	50015000 	.word	0x50015000
    23ec:	e000e100 	.word	0xe000e100
    23f0:	50015008 	.word	0x50015008

000023f4 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    23f4:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    23f6:	f1b0 3fff 	cmp.w	r0, #4294967295
    23fa:	d01e      	beq.n	243a <z_clock_set_timeout+0x46>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    23fc:	1e44      	subs	r4, r0, #1
    23fe:	4b11      	ldr	r3, [pc, #68]	; (2444 <z_clock_set_timeout+0x50>)
    2400:	429c      	cmp	r4, r3
    2402:	dc01      	bgt.n	2408 <z_clock_set_timeout+0x14>
    2404:	2c00      	cmp	r4, #0
    2406:	dd1b      	ble.n	2440 <z_clock_set_timeout+0x4c>
    2408:	4b0e      	ldr	r3, [pc, #56]	; (2444 <z_clock_set_timeout+0x50>)
    240a:	429c      	cmp	r4, r3
    240c:	dd00      	ble.n	2410 <z_clock_set_timeout+0x1c>
    240e:	4c0e      	ldr	r4, [pc, #56]	; (2448 <z_clock_set_timeout+0x54>)

	uint32_t unannounced = counter_sub(counter(), last_count);
    2410:	f7ff ff90 	bl	2334 <counter>
    2414:	4b0d      	ldr	r3, [pc, #52]	; (244c <z_clock_set_timeout+0x58>)
    2416:	681d      	ldr	r5, [r3, #0]
    2418:	4629      	mov	r1, r5
    241a:	f004 fcb8 	bl	6d8e <counter_sub>
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    241e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2422:	d300      	bcc.n	2426 <z_clock_set_timeout+0x32>
		ticks = 0;
    2424:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2426:	4420      	add	r0, r4
    2428:	3001      	adds	r0, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    242a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    242e:	d300      	bcc.n	2432 <z_clock_set_timeout+0x3e>
		cyc = MAX_CYCLES;
    2430:	4805      	ldr	r0, [pc, #20]	; (2448 <z_clock_set_timeout+0x54>)
	}

	cyc += last_count;
	set_protected_absolute_alarm(cyc);
    2432:	4428      	add	r0, r5
    2434:	f004 fce1 	bl	6dfa <set_protected_absolute_alarm>
}
    2438:	bd38      	pop	{r3, r4, r5, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    243a:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    243e:	e7dd      	b.n	23fc <z_clock_set_timeout+0x8>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    2440:	2400      	movs	r4, #0
    2442:	e7e5      	b.n	2410 <z_clock_set_timeout+0x1c>
    2444:	007ffffe 	.word	0x007ffffe
    2448:	007fffff 	.word	0x007fffff
    244c:	20022858 	.word	0x20022858

00002450 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
    2450:	b510      	push	{r4, lr}
	__asm__ volatile(
    2452:	f04f 0320 	mov.w	r3, #32
    2456:	f3ef 8411 	mrs	r4, BASEPRI
    245a:	f383 8811 	msr	BASEPRI, r3
    245e:	f3bf 8f6f 	isb	sy
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    2462:	f7ff ff67 	bl	2334 <counter>
    2466:	4b04      	ldr	r3, [pc, #16]	; (2478 <z_clock_elapsed+0x28>)
    2468:	6819      	ldr	r1, [r3, #0]
    246a:	f004 fc90 	bl	6d8e <counter_sub>
	__asm__ volatile(
    246e:	f384 8811 	msr	BASEPRI, r4
    2472:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    2476:	bd10      	pop	{r4, pc}
    2478:	20022858 	.word	0x20022858

0000247c <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
    247c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    247e:	f04f 0320 	mov.w	r3, #32
    2482:	f3ef 8511 	mrs	r5, BASEPRI
    2486:	f383 8811 	msr	BASEPRI, r3
    248a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    248e:	f7ff ff51 	bl	2334 <counter>
    2492:	4b05      	ldr	r3, [pc, #20]	; (24a8 <z_timer_cycle_get_32+0x2c>)
    2494:	681c      	ldr	r4, [r3, #0]
    2496:	4621      	mov	r1, r4
    2498:	f004 fc79 	bl	6d8e <counter_sub>
    249c:	4420      	add	r0, r4
	__asm__ volatile(
    249e:	f385 8811 	msr	BASEPRI, r5
    24a2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    24a6:	bd38      	pop	{r3, r4, r5, pc}
    24a8:	20022858 	.word	0x20022858

000024ac <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    24ac:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    24ae:	4802      	ldr	r0, [pc, #8]	; (24b8 <nrf_cc3xx_platform_abort_init+0xc>)
    24b0:	f002 ff34 	bl	531c <nrf_cc3xx_platform_set_abort>
}
    24b4:	bd08      	pop	{r3, pc}
    24b6:	bf00      	nop
    24b8:	00009c88 	.word	0x00009c88

000024bc <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    24bc:	b138      	cbz	r0, 24ce <mutex_unlock_platform+0x12>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    24be:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    24c0:	6842      	ldr	r2, [r0, #4]
    24c2:	b13a      	cbz	r2, 24d4 <mutex_unlock_platform+0x18>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
    24c4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    24c6:	f002 fb6b 	bl	4ba0 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC3XX_PLATFORM_SUCCESS;
    24ca:	2000      	movs	r0, #0
}
    24cc:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    24ce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    24d2:	4770      	bx	lr
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    24d4:	4800      	ldr	r0, [pc, #0]	; (24d8 <mutex_unlock_platform+0x1c>)
    24d6:	e7f9      	b.n	24cc <mutex_unlock_platform+0x10>
    24d8:	ffff8fea 	.word	0xffff8fea

000024dc <mutex_lock_platform>:
    if(mutex == NULL) {
    24dc:	b158      	cbz	r0, 24f6 <mutex_lock_platform+0x1a>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    24de:	b508      	push	{r3, lr}
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    24e0:	6842      	ldr	r2, [r0, #4]
    24e2:	b15a      	cbz	r2, 24fc <mutex_lock_platform+0x20>
    p_mutex = (struct k_mutex *)mutex->mutex;
    24e4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    24e6:	f04f 32ff 	mov.w	r2, #4294967295
    24ea:	f04f 33ff 	mov.w	r3, #4294967295
    24ee:	f002 facd 	bl	4a8c <z_impl_k_mutex_lock>
    if (ret == 0) {
    24f2:	b928      	cbnz	r0, 2500 <mutex_lock_platform+0x24>
}
    24f4:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    24f6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    24fa:	4770      	bx	lr
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    24fc:	4801      	ldr	r0, [pc, #4]	; (2504 <mutex_lock_platform+0x28>)
    24fe:	e7f9      	b.n	24f4 <mutex_lock_platform+0x18>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    2500:	4801      	ldr	r0, [pc, #4]	; (2508 <mutex_lock_platform+0x2c>)
    2502:	e7f7      	b.n	24f4 <mutex_lock_platform+0x18>
    2504:	ffff8fea 	.word	0xffff8fea
    2508:	ffff8fe9 	.word	0xffff8fe9

0000250c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    250c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    250e:	4604      	mov	r4, r0
    2510:	b168      	cbz	r0, 252e <mutex_free_platform+0x22>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2512:	6863      	ldr	r3, [r4, #4]
    2514:	b153      	cbz	r3, 252c <mutex_free_platform+0x20>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2516:	f013 0f02 	tst.w	r3, #2
    251a:	d00d      	beq.n	2538 <mutex_free_platform+0x2c>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
    251c:	6821      	ldr	r1, [r4, #0]
    251e:	4809      	ldr	r0, [pc, #36]	; (2544 <mutex_free_platform+0x38>)
    2520:	f002 fa8c 	bl	4a3c <k_mem_slab_free>
        mutex->mutex = NULL;
    2524:	2300      	movs	r3, #0
    2526:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2528:	2300      	movs	r3, #0
    252a:	6063      	str	r3, [r4, #4]
}
    252c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    252e:	4b06      	ldr	r3, [pc, #24]	; (2548 <mutex_free_platform+0x3c>)
    2530:	685b      	ldr	r3, [r3, #4]
    2532:	4806      	ldr	r0, [pc, #24]	; (254c <mutex_free_platform+0x40>)
    2534:	4798      	blx	r3
    2536:	e7ec      	b.n	2512 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2538:	2214      	movs	r2, #20
    253a:	2100      	movs	r1, #0
    253c:	6820      	ldr	r0, [r4, #0]
    253e:	f004 fd20 	bl	6f82 <memset>
    2542:	e7f1      	b.n	2528 <mutex_free_platform+0x1c>
    2544:	2002285c 	.word	0x2002285c
    2548:	200200a0 	.word	0x200200a0
    254c:	00009c90 	.word	0x00009c90

00002550 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2550:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2552:	4604      	mov	r4, r0
    2554:	b158      	cbz	r0, 256e <mutex_init_platform+0x1e>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2556:	6863      	ldr	r3, [r4, #4]
    2558:	b90b      	cbnz	r3, 255e <mutex_init_platform+0xe>
        mutex->mutex == NULL) {
    255a:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    255c:	b163      	cbz	r3, 2578 <mutex_init_platform+0x28>
    p_mutex = (struct k_mutex *)mutex->mutex;
    255e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2560:	f006 fd21 	bl	8fa6 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2564:	6863      	ldr	r3, [r4, #4]
    2566:	f043 0301 	orr.w	r3, r3, #1
    256a:	6063      	str	r3, [r4, #4]
}
    256c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    256e:	4b0f      	ldr	r3, [pc, #60]	; (25ac <mutex_init_platform+0x5c>)
    2570:	685b      	ldr	r3, [r3, #4]
    2572:	480f      	ldr	r0, [pc, #60]	; (25b0 <mutex_init_platform+0x60>)
    2574:	4798      	blx	r3
    2576:	e7ee      	b.n	2556 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2578:	f04f 32ff 	mov.w	r2, #4294967295
    257c:	f04f 33ff 	mov.w	r3, #4294967295
    2580:	4621      	mov	r1, r4
    2582:	480c      	ldr	r0, [pc, #48]	; (25b4 <mutex_init_platform+0x64>)
    2584:	f002 fa24 	bl	49d0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2588:	b908      	cbnz	r0, 258e <mutex_init_platform+0x3e>
    258a:	6823      	ldr	r3, [r4, #0]
    258c:	b91b      	cbnz	r3, 2596 <mutex_init_platform+0x46>
            platform_abort_apis.abort_fn(
    258e:	4b07      	ldr	r3, [pc, #28]	; (25ac <mutex_init_platform+0x5c>)
    2590:	685b      	ldr	r3, [r3, #4]
    2592:	4809      	ldr	r0, [pc, #36]	; (25b8 <mutex_init_platform+0x68>)
    2594:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2596:	2214      	movs	r2, #20
    2598:	2100      	movs	r1, #0
    259a:	6820      	ldr	r0, [r4, #0]
    259c:	f004 fcf1 	bl	6f82 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    25a0:	6863      	ldr	r3, [r4, #4]
    25a2:	f043 0302 	orr.w	r3, r3, #2
    25a6:	6063      	str	r3, [r4, #4]
    25a8:	e7d9      	b.n	255e <mutex_init_platform+0xe>
    25aa:	bf00      	nop
    25ac:	200200a0 	.word	0x200200a0
    25b0:	00009c90 	.word	0x00009c90
    25b4:	2002285c 	.word	0x2002285c
    25b8:	00009cb8 	.word	0x00009cb8

000025bc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    25bc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    25be:	2340      	movs	r3, #64	; 0x40
    25c0:	2214      	movs	r2, #20
    25c2:	4904      	ldr	r1, [pc, #16]	; (25d4 <nrf_cc3xx_platform_mutex_init+0x18>)
    25c4:	4804      	ldr	r0, [pc, #16]	; (25d8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    25c6:	f006 fccc 	bl	8f62 <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    25ca:	4904      	ldr	r1, [pc, #16]	; (25dc <nrf_cc3xx_platform_mutex_init+0x20>)
    25cc:	4804      	ldr	r0, [pc, #16]	; (25e0 <nrf_cc3xx_platform_mutex_init+0x24>)
    25ce:	f002 fef7 	bl	53c0 <nrf_cc3xx_platform_set_mutexes>
}
    25d2:	bd08      	pop	{r3, pc}
    25d4:	20022878 	.word	0x20022878
    25d8:	2002285c 	.word	0x2002285c
    25dc:	00009cf8 	.word	0x00009cf8
    25e0:	00009ce8 	.word	0x00009ce8

000025e4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    25e4:	4a09      	ldr	r2, [pc, #36]	; (260c <arch_swap+0x28>)
    25e6:	6893      	ldr	r3, [r2, #8]
    25e8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    25ea:	4909      	ldr	r1, [pc, #36]	; (2610 <arch_swap+0x2c>)
    25ec:	6809      	ldr	r1, [r1, #0]
    25ee:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    25f0:	4908      	ldr	r1, [pc, #32]	; (2614 <arch_swap+0x30>)
    25f2:	684b      	ldr	r3, [r1, #4]
    25f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    25f8:	604b      	str	r3, [r1, #4]
    25fa:	2300      	movs	r3, #0
    25fc:	f383 8811 	msr	BASEPRI, r3
    2600:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2604:	6893      	ldr	r3, [r2, #8]
}
    2606:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2608:	4770      	bx	lr
    260a:	bf00      	nop
    260c:	20022dfc 	.word	0x20022dfc
    2610:	00009fa4 	.word	0x00009fa4
    2614:	e000ed00 	.word	0xe000ed00

00002618 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2618:	490f      	ldr	r1, [pc, #60]	; (2658 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    261a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    261c:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    2620:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2622:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2626:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    262a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    262c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2630:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2634:	4f09      	ldr	r7, [pc, #36]	; (265c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2636:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    263a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    263c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    263e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2640:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2642:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2644:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2646:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    264a:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    264e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2652:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2656:	4770      	bx	lr
    ldr r1, =_kernel
    2658:	20022dfc 	.word	0x20022dfc
    ldr v4, =_SCS_ICSR
    265c:	e000ed04 	.word	0xe000ed04

00002660 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2660:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2664:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2666:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    266a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    266e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2670:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2674:	2902      	cmp	r1, #2
    beq _oops
    2676:	d0ff      	beq.n	2678 <_oops>

00002678 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2678:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    267a:	f004 fbd9 	bl	6e30 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    267e:	bd01      	pop	{r0, pc}

00002680 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2680:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2682:	2b00      	cmp	r3, #0
    2684:	db08      	blt.n	2698 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2686:	f000 001f 	and.w	r0, r0, #31
    268a:	095b      	lsrs	r3, r3, #5
    268c:	2201      	movs	r2, #1
    268e:	fa02 f000 	lsl.w	r0, r2, r0
    2692:	4a02      	ldr	r2, [pc, #8]	; (269c <arch_irq_enable+0x1c>)
    2694:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2698:	4770      	bx	lr
    269a:	bf00      	nop
    269c:	e000e100 	.word	0xe000e100

000026a0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    26a0:	0942      	lsrs	r2, r0, #5
    26a2:	4b05      	ldr	r3, [pc, #20]	; (26b8 <arch_irq_is_enabled+0x18>)
    26a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    26a8:	f000 001f 	and.w	r0, r0, #31
    26ac:	2301      	movs	r3, #1
    26ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    26b2:	4010      	ands	r0, r2
    26b4:	4770      	bx	lr
    26b6:	bf00      	nop
    26b8:	e000e100 	.word	0xe000e100

000026bc <z_arm_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    26bc:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    26be:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    26c0:	2b00      	cmp	r3, #0
    26c2:	db08      	blt.n	26d6 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26c4:	0149      	lsls	r1, r1, #5
    26c6:	b2c9      	uxtb	r1, r1
    26c8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    26cc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    26d0:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    26d4:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26d6:	f000 000f 	and.w	r0, r0, #15
    26da:	0149      	lsls	r1, r1, #5
    26dc:	b2c9      	uxtb	r1, r1
    26de:	4b01      	ldr	r3, [pc, #4]	; (26e4 <z_arm_irq_priority_set+0x28>)
    26e0:	5419      	strb	r1, [r3, r0]
}
    26e2:	4770      	bx	lr
    26e4:	e000ed14 	.word	0xe000ed14

000026e8 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    26e8:	b580      	push	{r7, lr}
    26ea:	4604      	mov	r4, r0
    26ec:	460f      	mov	r7, r1
    26ee:	4616      	mov	r6, r2
    26f0:	461d      	mov	r5, r3
	z_arm_prepare_switch_to_main();
    26f2:	f004 fb95 	bl	6e20 <z_arm_prepare_switch_to_main>
	/* Store all required input in registers, to be accesible
	 * after stack pointer change. The function is not going
	 * to return, so callee-saved registers do not need to be
	 * stacked.
	 */
	register void *p1_inreg __asm__("r0") = p1;
    26f6:	4638      	mov	r0, r7
	register void *p2_inreg __asm__("r1") = p2;
    26f8:	4631      	mov	r1, r6
	register void *p3_inreg __asm__("r2") = p3;
    26fa:	462a      	mov	r2, r5

	__asm__ volatile (
    26fc:	4b04      	ldr	r3, [pc, #16]	; (2710 <loop+0x2>)
    26fe:	2520      	movs	r5, #32
    2700:	f383 8809 	msr	PSP, r3
    2704:	47a0      	blx	r4
    2706:	f385 8811 	msr	BASEPRI, r5
    270a:	f3bf 8f6f 	isb	sy

0000270e <loop>:
    270e:	e7fe      	b.n	270e <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2710:	20025648 	.word	0x20025648

00002714 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2714:	4901      	ldr	r1, [pc, #4]	; (271c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2716:	2210      	movs	r2, #16
	str	r2, [r1]
    2718:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    271a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    271c:	e000ed10 	.word	0xe000ed10

00002720 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2720:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2722:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2724:	f381 8811 	msr	BASEPRI, r1

	wfe
    2728:	bf20      	wfe

	msr	BASEPRI, r0
    272a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    272e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2730:	4770      	bx	lr
    2732:	bf00      	nop

00002734 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2734:	bf30      	wfi
    b z_SysNmiOnReset
    2736:	f7ff bffd 	b.w	2734 <z_SysNmiOnReset>
    273a:	bf00      	nop

0000273c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    273c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    273e:	4b0e      	ldr	r3, [pc, #56]	; (2778 <z_arm_prep_c+0x3c>)
    2740:	4a0e      	ldr	r2, [pc, #56]	; (277c <z_arm_prep_c+0x40>)
    2742:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2746:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    274c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2750:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2754:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    275c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2760:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2764:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2768:	f002 f8aa 	bl	48c0 <z_bss_zero>
	z_data_copy();
    276c:	f002 f8b4 	bl	48d8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2770:	f000 f922 	bl	29b8 <z_arm_interrupt_init>
	z_cstart();
    2774:	f002 f8ec 	bl	4950 <z_cstart>
    2778:	e000ed00 	.word	0xe000ed00
    277c:	00000000 	.word	0x00000000

00002780 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2780:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2782:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2786:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    278a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    278e:	4904      	ldr	r1, [pc, #16]	; (27a0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2790:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2792:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2794:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2796:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    279a:	4902      	ldr	r1, [pc, #8]	; (27a4 <_isr_wrapper+0x24>)
	bx r1
    279c:	4708      	bx	r1
    279e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    27a0:	000092dc 	.word	0x000092dc
	ldr r1, =z_arm_int_exit
    27a4:	000029b5 	.word	0x000029b5

000027a8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    27a8:	f004 f8a1 	bl	68ee <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    27ac:	2020      	movs	r0, #32
    msr BASEPRI, r0
    27ae:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    27b2:	4808      	ldr	r0, [pc, #32]	; (27d4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    27b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    27b8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    27ba:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    27be:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    27c2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    27c4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    27c6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    27ca:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    27ce:	f7ff ffb5 	bl	273c <z_arm_prep_c>
    27d2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    27d4:	20025648 	.word	0x20025648

000027d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    27d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    27dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    27e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    27e2:	4672      	mov	r2, lr
	bl z_arm_fault
    27e4:	f000 f894 	bl	2910 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    27e8:	bd01      	pop	{r0, pc}
    27ea:	bf00      	nop

000027ec <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    27ec:	b510      	push	{r4, lr}
    27ee:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    27f0:	4b0f      	ldr	r3, [pc, #60]	; (2830 <CONFIG_MAIN_STACK_SIZE+0x30>)
    27f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    27f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    27f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27f8:	f013 0f02 	tst.w	r3, #2
    27fc:	d00b      	beq.n	2816 <CONFIG_MAIN_STACK_SIZE+0x16>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    27fe:	4b0c      	ldr	r3, [pc, #48]	; (2830 <CONFIG_MAIN_STACK_SIZE+0x30>)
    2800:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2804:	f013 0f80 	tst.w	r3, #128	; 0x80
    2808:	d005      	beq.n	2816 <CONFIG_MAIN_STACK_SIZE+0x16>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    280a:	b121      	cbz	r1, 2816 <CONFIG_MAIN_STACK_SIZE+0x16>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    280c:	4a08      	ldr	r2, [pc, #32]	; (2830 <CONFIG_MAIN_STACK_SIZE+0x30>)
    280e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2814:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2816:	4b06      	ldr	r3, [pc, #24]	; (2830 <CONFIG_MAIN_STACK_SIZE+0x30>)
    2818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    281a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    281c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    281e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2820:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2824:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    2826:	f004 fb0f 	bl	6e48 <memory_fault_recoverable>
    282a:	7020      	strb	r0, [r4, #0]

	return reason;
}
    282c:	2000      	movs	r0, #0
    282e:	bd10      	pop	{r4, pc}
    2830:	e000ed00 	.word	0xe000ed00

00002834 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    2834:	b510      	push	{r4, lr}
    2836:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2838:	4b12      	ldr	r3, [pc, #72]	; (2884 <bus_fault+0x50>)
    283a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    283c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2840:	f413 7f00 	tst.w	r3, #512	; 0x200
    2844:	d00b      	beq.n	285e <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2846:	4b0f      	ldr	r3, [pc, #60]	; (2884 <bus_fault+0x50>)
    2848:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    284c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2850:	d005      	beq.n	285e <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    2852:	b121      	cbz	r1, 285e <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2854:	4a0b      	ldr	r2, [pc, #44]	; (2884 <bus_fault+0x50>)
    2856:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2858:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    285c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    285e:	4b09      	ldr	r3, [pc, #36]	; (2884 <bus_fault+0x50>)
    2860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2864:	f413 7f80 	tst.w	r3, #256	; 0x100
    2868:	d101      	bne.n	286e <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    286a:	4b06      	ldr	r3, [pc, #24]	; (2884 <bus_fault+0x50>)
    286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    286e:	4a05      	ldr	r2, [pc, #20]	; (2884 <bus_fault+0x50>)
    2870:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2872:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2876:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    2878:	f004 fae6 	bl	6e48 <memory_fault_recoverable>
    287c:	7020      	strb	r0, [r4, #0]

	return reason;
}
    287e:	2000      	movs	r0, #0
    2880:	bd10      	pop	{r4, pc}
    2882:	bf00      	nop
    2884:	e000ed00 	.word	0xe000ed00

00002888 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2888:	4b07      	ldr	r3, [pc, #28]	; (28a8 <usage_fault+0x20>)
    288a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    288c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    288e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    289a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    289e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    28a2:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    28a4:	2000      	movs	r0, #0
    28a6:	4770      	bx	lr
    28a8:	e000ed00 	.word	0xe000ed00

000028ac <hard_fault>:
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    28ac:	2300      	movs	r3, #0
    28ae:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    28b0:	4b14      	ldr	r3, [pc, #80]	; (2904 <hard_fault+0x58>)
    28b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28b4:	f012 0202 	ands.w	r2, r2, #2
    28b8:	d121      	bne.n	28fe <hard_fault+0x52>
{
    28ba:	b510      	push	{r4, lr}
    28bc:	4604      	mov	r4, r0
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    28be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    28c0:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    28c4:	d010      	beq.n	28e8 <hard_fault+0x3c>
		PR_EXC("  Fault escalation (see below)");
		if (SCB_MMFSR != 0) {
    28c6:	3328      	adds	r3, #40	; 0x28
    28c8:	781b      	ldrb	r3, [r3, #0]
    28ca:	b943      	cbnz	r3, 28de <hard_fault+0x32>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    28cc:	4b0e      	ldr	r3, [pc, #56]	; (2908 <hard_fault+0x5c>)
    28ce:	781b      	ldrb	r3, [r3, #0]
    28d0:	b95b      	cbnz	r3, 28ea <hard_fault+0x3e>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    28d2:	4b0e      	ldr	r3, [pc, #56]	; (290c <hard_fault+0x60>)
    28d4:	881b      	ldrh	r3, [r3, #0]
    28d6:	b29b      	uxth	r3, r3
    28d8:	b96b      	cbnz	r3, 28f6 <hard_fault+0x4a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    28da:	4610      	mov	r0, r2
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
    28dc:	e004      	b.n	28e8 <hard_fault+0x3c>
			reason = mem_manage_fault(esf, 1, recoverable);
    28de:	460a      	mov	r2, r1
    28e0:	2101      	movs	r1, #1
    28e2:	4620      	mov	r0, r4
    28e4:	f7ff ff82 	bl	27ec <mem_manage_fault>
}
    28e8:	bd10      	pop	{r4, pc}
			reason = bus_fault(esf, 1, recoverable);
    28ea:	460a      	mov	r2, r1
    28ec:	2101      	movs	r1, #1
    28ee:	4620      	mov	r0, r4
    28f0:	f7ff ffa0 	bl	2834 <bus_fault>
    28f4:	e7f8      	b.n	28e8 <hard_fault+0x3c>
			reason = usage_fault(esf);
    28f6:	4620      	mov	r0, r4
    28f8:	f7ff ffc6 	bl	2888 <usage_fault>
    28fc:	e7f4      	b.n	28e8 <hard_fault+0x3c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    28fe:	2000      	movs	r0, #0
}
    2900:	4770      	bx	lr
    2902:	bf00      	nop
    2904:	e000ed00 	.word	0xe000ed00
    2908:	e000ed29 	.word	0xe000ed29
    290c:	e000ed2a 	.word	0xe000ed2a

00002910 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2910:	b570      	push	{r4, r5, r6, lr}
    2912:	b08a      	sub	sp, #40	; 0x28
    2914:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2916:	4b22      	ldr	r3, [pc, #136]	; (29a0 <z_arm_fault+0x90>)
    2918:	6859      	ldr	r1, [r3, #4]
    291a:	f3c1 0108 	ubfx	r1, r1, #0, #9
    291e:	2300      	movs	r3, #0
    2920:	f383 8811 	msr	BASEPRI, r3
    2924:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2928:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    292c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2930:	d115      	bne.n	295e <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2932:	f002 030c 	and.w	r3, r2, #12
    2936:	2b08      	cmp	r3, #8
    2938:	d014      	beq.n	2964 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    293a:	f012 0f08 	tst.w	r2, #8
    293e:	d00b      	beq.n	2958 <z_arm_fault+0x48>
	*nested_exc = false;
    2940:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    2942:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    2946:	4620      	mov	r0, r4
    2948:	f004 fa80 	bl	6e4c <fault_handle>
    294c:	4605      	mov	r5, r0
	if (recoverable) {
    294e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2952:	b153      	cbz	r3, 296a <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    2954:	b00a      	add	sp, #40	; 0x28
    2956:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    2958:	4604      	mov	r4, r0
			*nested_exc = true;
    295a:	2601      	movs	r6, #1
    295c:	e7f1      	b.n	2942 <z_arm_fault+0x32>
	*nested_exc = false;
    295e:	2600      	movs	r6, #0
		return NULL;
    2960:	4634      	mov	r4, r6
    2962:	e7ee      	b.n	2942 <z_arm_fault+0x32>
	*nested_exc = false;
    2964:	2600      	movs	r6, #0
		return NULL;
    2966:	4634      	mov	r4, r6
    2968:	e7eb      	b.n	2942 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    296a:	2220      	movs	r2, #32
    296c:	4621      	mov	r1, r4
    296e:	a801      	add	r0, sp, #4
    2970:	f004 fae3 	bl	6f3a <memcpy>
	if (nested_exc) {
    2974:	b14e      	cbz	r6, 298a <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2976:	9b08      	ldr	r3, [sp, #32]
    2978:	f3c3 0208 	ubfx	r2, r3, #0, #9
    297c:	b95a      	cbnz	r2, 2996 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    297e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2982:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2986:	9308      	str	r3, [sp, #32]
    2988:	e005      	b.n	2996 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    298a:	9b08      	ldr	r3, [sp, #32]
    298c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2990:	f023 0301 	bic.w	r3, r3, #1
    2994:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    2996:	a901      	add	r1, sp, #4
    2998:	4628      	mov	r0, r5
    299a:	f004 fa45 	bl	6e28 <z_arm_fatal_error>
    299e:	e7d9      	b.n	2954 <z_arm_fault+0x44>
    29a0:	e000ed00 	.word	0xe000ed00

000029a4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    29a4:	4a02      	ldr	r2, [pc, #8]	; (29b0 <z_arm_fault_init+0xc>)
    29a6:	6953      	ldr	r3, [r2, #20]
    29a8:	f043 0310 	orr.w	r3, r3, #16
    29ac:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    29ae:	4770      	bx	lr
    29b0:	e000ed00 	.word	0xe000ed00

000029b4 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    29b4:	4770      	bx	lr
    29b6:	bf00      	nop

000029b8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    29b8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    29ba:	e006      	b.n	29ca <z_arm_interrupt_init+0x12>
    29bc:	f002 010f 	and.w	r1, r2, #15
    29c0:	4b09      	ldr	r3, [pc, #36]	; (29e8 <z_arm_interrupt_init+0x30>)
    29c2:	440b      	add	r3, r1
    29c4:	2120      	movs	r1, #32
    29c6:	7619      	strb	r1, [r3, #24]
    29c8:	3201      	adds	r2, #1
    29ca:	2a40      	cmp	r2, #64	; 0x40
    29cc:	dc0a      	bgt.n	29e4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    29ce:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    29d0:	2b00      	cmp	r3, #0
    29d2:	dbf3      	blt.n	29bc <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    29d4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    29d8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    29dc:	2120      	movs	r1, #32
    29de:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    29e2:	e7f1      	b.n	29c8 <z_arm_interrupt_init+0x10>
	}
}
    29e4:	4770      	bx	lr
    29e6:	bf00      	nop
    29e8:	e000ecfc 	.word	0xe000ecfc

000029ec <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    29ec:	b510      	push	{r4, lr}
    29ee:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
    29f0:	f002 f9f6 	bl	4de0 <z_thread_single_abort>

	if (_current == thread) {
    29f4:	4b11      	ldr	r3, [pc, #68]	; (2a3c <z_impl_k_thread_abort+0x50>)
    29f6:	689b      	ldr	r3, [r3, #8]
    29f8:	42a3      	cmp	r3, r4
    29fa:	d00a      	beq.n	2a12 <z_impl_k_thread_abort+0x26>
	__asm__ volatile(
    29fc:	f04f 0320 	mov.w	r3, #32
    2a00:	f3ef 8011 	mrs	r0, BASEPRI
    2a04:	f383 8811 	msr	BASEPRI, r3
    2a08:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    2a0c:	f006 fae0 	bl	8fd0 <z_reschedule_irqlock>
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    2a10:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2a12:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2a16:	b12b      	cbz	r3, 2a24 <z_impl_k_thread_abort+0x38>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2a18:	4a09      	ldr	r2, [pc, #36]	; (2a40 <z_impl_k_thread_abort+0x54>)
    2a1a:	6853      	ldr	r3, [r2, #4]
    2a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2a20:	6053      	str	r3, [r2, #4]
    2a22:	e7eb      	b.n	29fc <z_impl_k_thread_abort+0x10>
    2a24:	f04f 0320 	mov.w	r3, #32
    2a28:	f3ef 8011 	mrs	r0, BASEPRI
    2a2c:	f383 8811 	msr	BASEPRI, r3
    2a30:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    2a34:	f7ff fdd6 	bl	25e4 <arch_swap>
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
}
    2a38:	e7e0      	b.n	29fc <z_impl_k_thread_abort+0x10>
    2a3a:	bf00      	nop
    2a3c:	20022dfc 	.word	0x20022dfc
    2a40:	e000ed00 	.word	0xe000ed00

00002a44 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2a44:	b500      	push	{lr}
    2a46:	b085      	sub	sp, #20
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
		{
		.start = (uint32_t)&_ramfunc_ram_start,
    2a48:	4b09      	ldr	r3, [pc, #36]	; (2a70 <z_arm_configure_static_mpu_regions+0x2c>)
		const struct k_mem_partition ramfunc_region =
    2a4a:	9301      	str	r3, [sp, #4]
		.size = (uint32_t)&_ramfunc_ram_size,
    2a4c:	4b09      	ldr	r3, [pc, #36]	; (2a74 <z_arm_configure_static_mpu_regions+0x30>)
		const struct k_mem_partition ramfunc_region =
    2a4e:	9302      	str	r3, [sp, #8]
    2a50:	2306      	movs	r3, #6
    2a52:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a56:	2101      	movs	r1, #1
    2a58:	f8ad 100e 	strh.w	r1, [sp, #14]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    2a5c:	ab01      	add	r3, sp, #4
    2a5e:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2a60:	4b05      	ldr	r3, [pc, #20]	; (2a78 <z_arm_configure_static_mpu_regions+0x34>)
    2a62:	4a06      	ldr	r2, [pc, #24]	; (2a7c <z_arm_configure_static_mpu_regions+0x38>)
    2a64:	4668      	mov	r0, sp
    2a66:	f004 fa39 	bl	6edc <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2a6a:	b005      	add	sp, #20
    2a6c:	f85d fb04 	ldr.w	pc, [sp], #4
    2a70:	20020000 	.word	0x20020000
    2a74:	00000000 	.word	0x00000000
    2a78:	20040000 	.word	0x20040000
    2a7c:	20020000 	.word	0x20020000

00002a80 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    2a80:	4b01      	ldr	r3, [pc, #4]	; (2a88 <mpu_init+0x8>)
    2a82:	4a02      	ldr	r2, [pc, #8]	; (2a8c <mpu_init+0xc>)
    2a84:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    2a86:	4770      	bx	lr
    2a88:	e000ed90 	.word	0xe000ed90
    2a8c:	0044ffaa 	.word	0x0044ffaa

00002a90 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2a90:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2a92:	680b      	ldr	r3, [r1, #0]
    2a94:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2a98:	7a0c      	ldrb	r4, [r1, #8]
    2a9a:	f004 031f 	and.w	r3, r4, #31
    2a9e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2aa0:	68cb      	ldr	r3, [r1, #12]
    2aa2:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2aa6:	0964      	lsrs	r4, r4, #5
    2aa8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2aac:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2ab0:	4902      	ldr	r1, [pc, #8]	; (2abc <region_init+0x2c>)
    2ab2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    2ab4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    2ab6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2ab8:	bc10      	pop	{r4}
    2aba:	4770      	bx	lr
    2abc:	e000ed90 	.word	0xe000ed90

00002ac0 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    2ac0:	b510      	push	{r4, lr}
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    2ac2:	280f      	cmp	r0, #15
    2ac4:	d804      	bhi.n	2ad0 <region_allocate_and_init+0x10>
    2ac6:	4604      	mov	r4, r0
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    2ac8:	f7ff ffe2 	bl	2a90 <region_init>

	return index;
}
    2acc:	4620      	mov	r0, r4
    2ace:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2ad0:	f04f 0400 	mov.w	r4, #0
    2ad4:	2301      	movs	r3, #1
    2ad6:	f363 0402 	bfi	r4, r3, #0, #3
    2ada:	f36f 04c5 	bfc	r4, #3, #3
    2ade:	4b07      	ldr	r3, [pc, #28]	; (2afc <region_allocate_and_init+0x3c>)
    2ae0:	4a07      	ldr	r2, [pc, #28]	; (2b00 <region_allocate_and_init+0x40>)
    2ae2:	1a9b      	subs	r3, r3, r2
    2ae4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2ae8:	f363 148f 	bfi	r4, r3, #6, #10
    2aec:	4602      	mov	r2, r0
    2aee:	4905      	ldr	r1, [pc, #20]	; (2b04 <region_allocate_and_init+0x44>)
    2af0:	4620      	mov	r0, r4
    2af2:	f003 ff06 	bl	6902 <log_string_sync>
		return -EINVAL;
    2af6:	f06f 0415 	mvn.w	r4, #21
    2afa:	e7e7      	b.n	2acc <region_allocate_and_init+0xc>
    2afc:	000094f4 	.word	0x000094f4
    2b00:	000094e4 	.word	0x000094e4
    2b04:	00009d10 	.word	0x00009d10

00002b08 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b0c:	b087      	sub	sp, #28
    2b0e:	4680      	mov	r8, r0
    2b10:	468b      	mov	fp, r1
    2b12:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    2b14:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    2b16:	2600      	movs	r6, #0
    2b18:	e060      	b.n	2bdc <mpu_configure_regions_and_partition+0xd4>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2b1a:	2301      	movs	r3, #1
    2b1c:	f363 0002 	bfi	r0, r3, #0, #3
    2b20:	f36f 00c5 	bfc	r0, #3, #3
    2b24:	4b6b      	ldr	r3, [pc, #428]	; (2cd4 <mpu_configure_regions_and_partition+0x1cc>)
    2b26:	4a6c      	ldr	r2, [pc, #432]	; (2cd8 <mpu_configure_regions_and_partition+0x1d0>)
    2b28:	1a9b      	subs	r3, r3, r2
    2b2a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2b2e:	f363 108f 	bfi	r0, r3, #6, #10
    2b32:	4632      	mov	r2, r6
    2b34:	4969      	ldr	r1, [pc, #420]	; (2cdc <mpu_configure_regions_and_partition+0x1d4>)
    2b36:	f003 fee4 	bl	6902 <log_string_sync>
			return -EINVAL;
    2b3a:	f06f 0415 	mvn.w	r4, #21
    2b3e:	e016      	b.n	2b6e <mpu_configure_regions_and_partition+0x66>
	return -EINVAL;
    2b40:	f06f 0515 	mvn.w	r5, #21
    2b44:	e067      	b.n	2c16 <mpu_configure_regions_and_partition+0x10e>
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2b46:	f04f 0000 	mov.w	r0, #0
    2b4a:	2301      	movs	r3, #1
    2b4c:	f363 0002 	bfi	r0, r3, #0, #3
    2b50:	f36f 00c5 	bfc	r0, #3, #3
    2b54:	4b5f      	ldr	r3, [pc, #380]	; (2cd4 <mpu_configure_regions_and_partition+0x1cc>)
    2b56:	4a60      	ldr	r2, [pc, #384]	; (2cd8 <mpu_configure_regions_and_partition+0x1d0>)
    2b58:	1a9b      	subs	r3, r3, r2
    2b5a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2b5e:	f363 108f 	bfi	r0, r3, #6, #10
    2b62:	462a      	mov	r2, r5
    2b64:	495e      	ldr	r1, [pc, #376]	; (2ce0 <mpu_configure_regions_and_partition+0x1d8>)
    2b66:	f003 fecc 	bl	6902 <log_string_sync>
				u_reg_index);
			return -EINVAL;
    2b6a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2b6e:	4620      	mov	r0, r4
    2b70:	b007      	add	sp, #28
    2b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i]->start == u_reg_base) &&
    2b76:	45ba      	cmp	sl, r7
    2b78:	d166      	bne.n	2c48 <mpu_configure_regions_and_partition+0x140>
			mpu_configure_region(u_reg_index, regions[i]);
    2b7a:	b2e8      	uxtb	r0, r5
    2b7c:	f004 f993 	bl	6ea6 <mpu_configure_region>
    2b80:	e02b      	b.n	2bda <mpu_configure_regions_and_partition+0xd2>
	MPU->RNR = index;
    2b82:	4a58      	ldr	r2, [pc, #352]	; (2ce4 <mpu_configure_regions_and_partition+0x1dc>)
    2b84:	f8c2 c008 	str.w	ip, [r2, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2b88:	68d3      	ldr	r3, [r2, #12]
    2b8a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    2b8e:	f020 001f 	bic.w	r0, r0, #31
    2b92:	4318      	orrs	r0, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2b94:	60d0      	str	r0, [r2, #12]
				mpu_configure_region(reg_index, regions[i]);
    2b96:	f858 1009 	ldr.w	r1, [r8, r9]
    2b9a:	b2e0      	uxtb	r0, r4
    2b9c:	f004 f983 	bl	6ea6 <mpu_configure_region>
    2ba0:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2ba2:	f110 0f16 	cmn.w	r0, #22
    2ba6:	d0e2      	beq.n	2b6e <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    2ba8:	3401      	adds	r4, #1
    2baa:	e016      	b.n	2bda <mpu_configure_regions_and_partition+0xd2>
				regions[i]->start - 1);
    2bac:	3b01      	subs	r3, #1
	MPU->RNR = index;
    2bae:	494d      	ldr	r1, [pc, #308]	; (2ce4 <mpu_configure_regions_and_partition+0x1dc>)
    2bb0:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2bb4:	690a      	ldr	r2, [r1, #16]
    2bb6:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2bba:	f023 031f 	bic.w	r3, r3, #31
    2bbe:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2bc0:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, regions[i]);
    2bc2:	f858 1009 	ldr.w	r1, [r8, r9]
    2bc6:	b2e0      	uxtb	r0, r4
    2bc8:	f004 f96d 	bl	6ea6 <mpu_configure_region>
    2bcc:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2bce:	f110 0f16 	cmn.w	r0, #22
    2bd2:	d0cc      	beq.n	2b6e <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    2bd4:	3401      	adds	r4, #1
    2bd6:	e000      	b.n	2bda <mpu_configure_regions_and_partition+0xd2>
			reg_index++;
    2bd8:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    2bda:	3601      	adds	r6, #1
    2bdc:	455e      	cmp	r6, fp
    2bde:	dac6      	bge.n	2b6e <mpu_configure_regions_and_partition+0x66>
		if (regions[i]->size == 0U) {
    2be0:	ea4f 0986 	mov.w	r9, r6, lsl #2
    2be4:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
    2be8:	686f      	ldr	r7, [r5, #4]
    2bea:	2f00      	cmp	r7, #0
    2bec:	d0f5      	beq.n	2bda <mpu_configure_regions_and_partition+0xd2>
		if (do_sanity_check &&
    2bee:	9b01      	ldr	r3, [sp, #4]
    2bf0:	b123      	cbz	r3, 2bfc <mpu_configure_regions_and_partition+0xf4>
			(!mpu_partition_is_valid(regions[i]))) {
    2bf2:	4628      	mov	r0, r5
    2bf4:	f004 f945 	bl	6e82 <mpu_partition_is_valid>
		if (do_sanity_check &&
    2bf8:	2800      	cmp	r0, #0
    2bfa:	d08e      	beq.n	2b1a <mpu_configure_regions_and_partition+0x12>
			get_region_index(regions[i]->start, regions[i]->size);
    2bfc:	f8d5 a000 	ldr.w	sl, [r5]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2c00:	4650      	mov	r0, sl
    2c02:	f004 f96f 	bl	6ee4 <arm_cmse_mpu_region_get>
    2c06:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2c08:	eb07 000a 	add.w	r0, r7, sl
    2c0c:	3801      	subs	r0, #1
    2c0e:	f004 f969 	bl	6ee4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2c12:	4285      	cmp	r5, r0
    2c14:	d194      	bne.n	2b40 <mpu_configure_regions_and_partition+0x38>
		if ((u_reg_index == -EINVAL) ||
    2c16:	f115 0f16 	cmn.w	r5, #22
    2c1a:	d094      	beq.n	2b46 <mpu_configure_regions_and_partition+0x3e>
			(u_reg_index > (reg_index - 1))) {
    2c1c:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2c1e:	42ab      	cmp	r3, r5
    2c20:	db91      	blt.n	2b46 <mpu_configure_regions_and_partition+0x3e>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    2c22:	46ac      	mov	ip, r5
	MPU->RNR = index;
    2c24:	4b2f      	ldr	r3, [pc, #188]	; (2ce4 <mpu_configure_regions_and_partition+0x1dc>)
    2c26:	609d      	str	r5, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2c28:	68da      	ldr	r2, [r3, #12]
    2c2a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = index;
    2c2e:	609d      	str	r5, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2c30:	691f      	ldr	r7, [r3, #16]
    2c32:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    2c36:	f858 1009 	ldr.w	r1, [r8, r9]
    2c3a:	680b      	ldr	r3, [r1, #0]
    2c3c:	6848      	ldr	r0, [r1, #4]
    2c3e:	4418      	add	r0, r3
    2c40:	f100 3aff 	add.w	sl, r0, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    2c44:	4293      	cmp	r3, r2
    2c46:	d096      	beq.n	2b76 <mpu_configure_regions_and_partition+0x6e>
		} else if (regions[i]->start == u_reg_base) {
    2c48:	4293      	cmp	r3, r2
    2c4a:	d09a      	beq.n	2b82 <mpu_configure_regions_and_partition+0x7a>
		} else if (reg_last == u_reg_last) {
    2c4c:	45ba      	cmp	sl, r7
    2c4e:	d0ad      	beq.n	2bac <mpu_configure_regions_and_partition+0xa4>
				regions[i]->start - 1);
    2c50:	3b01      	subs	r3, #1
	MPU->RNR = index;
    2c52:	4924      	ldr	r1, [pc, #144]	; (2ce4 <mpu_configure_regions_and_partition+0x1dc>)
    2c54:	4665      	mov	r5, ip
    2c56:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2c5a:	690a      	ldr	r2, [r1, #16]
    2c5c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2c60:	f023 031f 	bic.w	r3, r3, #31
    2c64:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2c66:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, regions[i]);
    2c68:	f858 1009 	ldr.w	r1, [r8, r9]
    2c6c:	b2e0      	uxtb	r0, r4
    2c6e:	f004 f91a 	bl	6ea6 <mpu_configure_region>
    2c72:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2c74:	f110 0f16 	cmn.w	r0, #22
    2c78:	f43f af79 	beq.w	2b6e <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    2c7c:	3001      	adds	r0, #1
	MPU->RNR = index;
    2c7e:	4b19      	ldr	r3, [pc, #100]	; (2ce4 <mpu_configure_regions_and_partition+0x1dc>)
    2c80:	609d      	str	r5, [r3, #8]
	attr->rbar = MPU->RBAR &
    2c82:	68d9      	ldr	r1, [r3, #12]
    2c84:	f89d 2010 	ldrb.w	r2, [sp, #16]
    2c88:	f361 0204 	bfi	r2, r1, #0, #5
    2c8c:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2c90:	691b      	ldr	r3, [r3, #16]
    2c92:	f3c3 0342 	ubfx	r3, r3, #1, #3
    2c96:	b2d2      	uxtb	r2, r2
    2c98:	f363 1247 	bfi	r2, r3, #5, #3
    2c9c:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i]->start +
    2ca0:	f858 2009 	ldr.w	r2, [r8, r9]
    2ca4:	6811      	ldr	r1, [r2, #0]
				regions[i]->size;
    2ca6:	6854      	ldr	r4, [r2, #4]
			fill_region.base = regions[i]->start +
    2ca8:	4421      	add	r1, r4
    2caa:	9102      	str	r1, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    2cac:	6813      	ldr	r3, [r2, #0]
    2cae:	4423      	add	r3, r4
    2cb0:	f023 031f 	bic.w	r3, r3, #31
    2cb4:	eba7 070a 	sub.w	r7, r7, sl
    2cb8:	441f      	add	r7, r3
    2cba:	3f01      	subs	r7, #1
    2cbc:	f027 071f 	bic.w	r7, r7, #31
			fill_region.attr.r_limit =
    2cc0:	9705      	str	r7, [sp, #20]
				region_allocate_and_init(reg_index,
    2cc2:	a902      	add	r1, sp, #8
    2cc4:	b2c0      	uxtb	r0, r0
    2cc6:	f7ff fefb 	bl	2ac0 <region_allocate_and_init>
    2cca:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2ccc:	f110 0f16 	cmn.w	r0, #22
    2cd0:	d182      	bne.n	2bd8 <mpu_configure_regions_and_partition+0xd0>
    2cd2:	e74c      	b.n	2b6e <mpu_configure_regions_and_partition+0x66>
    2cd4:	000094f4 	.word	0x000094f4
    2cd8:	000094e4 	.word	0x000094e4
    2cdc:	00009d38 	.word	0x00009d38
    2ce0:	00009d5c 	.word	0x00009d5c
    2ce4:	e000ed90 	.word	0xe000ed90

00002ce8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    2ce8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    2cea:	4c03      	ldr	r4, [pc, #12]	; (2cf8 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2cec:	2301      	movs	r3, #1
    2cee:	7822      	ldrb	r2, [r4, #0]
    2cf0:	f7ff ff0a 	bl	2b08 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2cf4:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    2cf6:	bd10      	pop	{r4, pc}
    2cf8:	20022e43 	.word	0x20022e43

00002cfc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2cfc:	4b03      	ldr	r3, [pc, #12]	; (2d0c <arm_core_mpu_enable+0x10>)
    2cfe:	2205      	movs	r2, #5
    2d00:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2d02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d06:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2d0a:	4770      	bx	lr
    2d0c:	e000ed90 	.word	0xe000ed90

00002d10 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2d10:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2d14:	4b01      	ldr	r3, [pc, #4]	; (2d1c <arm_core_mpu_disable+0xc>)
    2d16:	2200      	movs	r2, #0
    2d18:	605a      	str	r2, [r3, #4]
}
    2d1a:	4770      	bx	lr
    2d1c:	e000ed90 	.word	0xe000ed90

00002d20 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    2d20:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2d22:	4b0e      	ldr	r3, [pc, #56]	; (2d5c <arm_mpu_init+0x3c>)
    2d24:	681d      	ldr	r5, [r3, #0]
    2d26:	2d10      	cmp	r5, #16
    2d28:	d815      	bhi.n	2d56 <arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2d2a:	f7ff fff1 	bl	2d10 <arm_core_mpu_disable>
#if defined(CONFIG_NOCACHE_MEMORY)
	SCB_CleanInvalidateDCache();
#endif

	/* Architecture-specific configuration */
	mpu_init();
    2d2e:	f7ff fea7 	bl	2a80 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2d32:	2400      	movs	r4, #0
    2d34:	42a5      	cmp	r5, r4
    2d36:	d908      	bls.n	2d4a <arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2d38:	4b08      	ldr	r3, [pc, #32]	; (2d5c <arm_mpu_init+0x3c>)
    2d3a:	6859      	ldr	r1, [r3, #4]
    2d3c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    2d40:	4620      	mov	r0, r4
    2d42:	f7ff fea5 	bl	2a90 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2d46:	3401      	adds	r4, #1
    2d48:	e7f4      	b.n	2d34 <arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2d4a:	4b05      	ldr	r3, [pc, #20]	; (2d60 <arm_mpu_init+0x40>)
    2d4c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    2d4e:	f7ff ffd5 	bl	2cfc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    2d52:	2000      	movs	r0, #0
}
    2d54:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    2d56:	f04f 30ff 	mov.w	r0, #4294967295
    2d5a:	e7fb      	b.n	2d54 <arm_mpu_init+0x34>
    2d5c:	00009d90 	.word	0x00009d90
    2d60:	20022e43 	.word	0x20022e43

00002d64 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2d64:	4b01      	ldr	r3, [pc, #4]	; (2d6c <__stdout_hook_install+0x8>)
    2d66:	6018      	str	r0, [r3, #0]
}
    2d68:	4770      	bx	lr
    2d6a:	bf00      	nop
    2d6c:	20020030 	.word	0x20020030

00002d70 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    2d70:	b470      	push	{r4, r5, r6}
	return port->config;
    2d72:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2d74:	685e      	ldr	r6, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2d76:	4b30      	ldr	r3, [pc, #192]	; (2e38 <gpio_nrfx_config+0xc8>)
    2d78:	4013      	ands	r3, r2
    2d7a:	4830      	ldr	r0, [pc, #192]	; (2e3c <gpio_nrfx_config+0xcc>)
    2d7c:	4283      	cmp	r3, r0
    2d7e:	d027      	beq.n	2dd0 <gpio_nrfx_config+0x60>
    2d80:	d812      	bhi.n	2da8 <gpio_nrfx_config+0x38>
    2d82:	2b06      	cmp	r3, #6
    2d84:	d026      	beq.n	2dd4 <gpio_nrfx_config+0x64>
    2d86:	d904      	bls.n	2d92 <gpio_nrfx_config+0x22>
    2d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2d8c:	d109      	bne.n	2da2 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    2d8e:	2001      	movs	r0, #1
    2d90:	e016      	b.n	2dc0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2d92:	b30b      	cbz	r3, 2dd8 <gpio_nrfx_config+0x68>
    2d94:	2b02      	cmp	r3, #2
    2d96:	d101      	bne.n	2d9c <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    2d98:	2004      	movs	r0, #4
    2d9a:	e011      	b.n	2dc0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2d9c:	f06f 0015 	mvn.w	r0, #21
    2da0:	e03c      	b.n	2e1c <gpio_nrfx_config+0xac>
    2da2:	f06f 0015 	mvn.w	r0, #21
    2da6:	e039      	b.n	2e1c <gpio_nrfx_config+0xac>
    2da8:	4825      	ldr	r0, [pc, #148]	; (2e40 <gpio_nrfx_config+0xd0>)
    2daa:	4283      	cmp	r3, r0
    2dac:	d016      	beq.n	2ddc <gpio_nrfx_config+0x6c>
    2dae:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2db2:	d101      	bne.n	2db8 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    2db4:	2003      	movs	r0, #3
    2db6:	e003      	b.n	2dc0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2dbc:	d139      	bne.n	2e32 <gpio_nrfx_config+0xc2>
		drive = NRF_GPIO_PIN_S0H1;
    2dbe:	2002      	movs	r0, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    2dc0:	f012 0f10 	tst.w	r2, #16
    2dc4:	d10c      	bne.n	2de0 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    2dc6:	f012 0f20 	tst.w	r2, #32
    2dca:	d029      	beq.n	2e20 <gpio_nrfx_config+0xb0>
		pull = NRF_GPIO_PIN_PULLDOWN;
    2dcc:	2401      	movs	r4, #1
    2dce:	e008      	b.n	2de2 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    2dd0:	2007      	movs	r0, #7
    2dd2:	e7f5      	b.n	2dc0 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    2dd4:	2006      	movs	r0, #6
    2dd6:	e7f3      	b.n	2dc0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2dd8:	2000      	movs	r0, #0
    2dda:	e7f1      	b.n	2dc0 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    2ddc:	2005      	movs	r0, #5
    2dde:	e7ef      	b.n	2dc0 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    2de0:	2403      	movs	r4, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    2de2:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2de6:	f412 7f80 	tst.w	r2, #256	; 0x100
    2dea:	bf0c      	ite	eq
    2dec:	2501      	moveq	r5, #1
    2dee:	2500      	movne	r5, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    2df0:	f412 7f00 	tst.w	r2, #512	; 0x200
    2df4:	d005      	beq.n	2e02 <gpio_nrfx_config+0x92>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2df6:	f412 6f00 	tst.w	r2, #2048	; 0x800
    2dfa:	d013      	beq.n	2e24 <gpio_nrfx_config+0xb4>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2dfc:	2201      	movs	r2, #1
    2dfe:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    2e00:	60b2      	str	r2, [r6, #8]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2e02:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    2e06:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    2e0a:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2e0e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2e12:	3180      	adds	r1, #128	; 0x80
    2e14:	4a0b      	ldr	r2, [pc, #44]	; (2e44 <gpio_nrfx_config+0xd4>)
    2e16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    2e1a:	2000      	movs	r0, #0
}
    2e1c:	bc70      	pop	{r4, r5, r6}
    2e1e:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    2e20:	2400      	movs	r4, #0
    2e22:	e7de      	b.n	2de2 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2e24:	f412 6f80 	tst.w	r2, #1024	; 0x400
    2e28:	d0eb      	beq.n	2e02 <gpio_nrfx_config+0x92>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2e2a:	2201      	movs	r2, #1
    2e2c:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    2e2e:	60f2      	str	r2, [r6, #12]
}
    2e30:	e7e7      	b.n	2e02 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2e32:	f06f 0015 	mvn.w	r0, #21
    2e36:	e7f1      	b.n	2e1c <gpio_nrfx_config+0xac>
    2e38:	00f00006 	.word	0x00f00006
    2e3c:	00100006 	.word	0x00100006
    2e40:	00400002 	.word	0x00400002
    2e44:	50842500 	.word	0x50842500

00002e48 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    2e48:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    2e4a:	68c5      	ldr	r5, [r0, #12]
	return port->config;
    2e4c:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    2e4e:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2e50:	696a      	ldr	r2, [r5, #20]
    2e52:	69ab      	ldr	r3, [r5, #24]
    2e54:	4313      	orrs	r3, r2
    2e56:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    2e5a:	2201      	movs	r2, #1
	uint32_t pin = 0U;
    2e5c:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    2e5e:	e011      	b.n	2e84 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    2e60:	f04f 0c02 	mov.w	ip, #2
    *p_pin = pin_number & 0x1F;
    2e64:	f003 031f 	and.w	r3, r3, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2e68:	4f0f      	ldr	r7, [pc, #60]	; (2ea8 <cfg_level_pins+0x60>)
    2e6a:	3380      	adds	r3, #128	; 0x80
    2e6c:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
    2e70:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2e74:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
    2e78:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    2e7c:	ea21 0102 	bic.w	r1, r1, r2
		}
		++pin;
    2e80:	3001      	adds	r0, #1
		bit <<= 1;
    2e82:	0052      	lsls	r2, r2, #1
	while (level_pins) {
    2e84:	b171      	cbz	r1, 2ea4 <cfg_level_pins+0x5c>
		if (level_pins & bit) {
    2e86:	420a      	tst	r2, r1
    2e88:	d0fa      	beq.n	2e80 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2e8a:	7a34      	ldrb	r4, [r6, #8]
    2e8c:	f000 031f 	and.w	r3, r0, #31
    2e90:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2e94:	692c      	ldr	r4, [r5, #16]
    2e96:	40c4      	lsrs	r4, r0
    2e98:	f014 0f01 	tst.w	r4, #1
    2e9c:	d1e0      	bne.n	2e60 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    2e9e:	f04f 0c03 	mov.w	ip, #3
    2ea2:	e7df      	b.n	2e64 <cfg_level_pins+0x1c>
	}
}
    2ea4:	bcf0      	pop	{r4, r5, r6, r7}
    2ea6:	4770      	bx	lr
    2ea8:	50842500 	.word	0x50842500

00002eac <check_level_trigger_pins>:
 * @param port Pointer to GPIO port device.
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port)
{
    2eac:	b470      	push	{r4, r5, r6}
	return port->data;
    2eae:	68c3      	ldr	r3, [r0, #12]
	return port->config;
    2eb0:	6840      	ldr	r0, [r0, #4]
	uint32_t out = data->pin_int_en;
    2eb2:	68da      	ldr	r2, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2eb4:	6959      	ldr	r1, [r3, #20]
    2eb6:	699c      	ldr	r4, [r3, #24]
    2eb8:	4321      	orrs	r1, r4
    2eba:	ea22 0201 	bic.w	r2, r2, r1
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    2ebe:	6841      	ldr	r1, [r0, #4]
    return p_reg->IN;
    2ec0:	6909      	ldr	r1, [r1, #16]

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2ec2:	6918      	ldr	r0, [r3, #16]
    2ec4:	4048      	eors	r0, r1

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    2ec6:	ea22 0000 	bic.w	r0, r2, r0
	/* Disable sense detection on all pins that use it, whether
	 * they appear to have triggered or not.  This ensures
	 * nobody's requesting DETECT.
	 */
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    2eca:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    2ecc:	2400      	movs	r4, #0

	while (level_pins) {
    2ece:	e001      	b.n	2ed4 <check_level_trigger_pins+0x28>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			level_pins &= ~bit;
		}
		++pin;
    2ed0:	3401      	adds	r4, #1
		bit <<= 1;
    2ed2:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    2ed4:	b172      	cbz	r2, 2ef4 <check_level_trigger_pins+0x48>
		if (level_pins & bit) {
    2ed6:	421a      	tst	r2, r3
    2ed8:	d0fa      	beq.n	2ed0 <check_level_trigger_pins+0x24>
    *p_pin = pin_number & 0x1F;
    2eda:	f004 011f 	and.w	r1, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2ede:	4e06      	ldr	r6, [pc, #24]	; (2ef8 <check_level_trigger_pins+0x4c>)
    2ee0:	3180      	adds	r1, #128	; 0x80
    2ee2:	f856 5021 	ldr.w	r5, [r6, r1, lsl #2]
    2ee6:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2eea:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
			level_pins &= ~bit;
    2eee:	ea22 0203 	bic.w	r2, r2, r3
    2ef2:	e7ed      	b.n	2ed0 <check_level_trigger_pins+0x24>
	}

	return out;
}
    2ef4:	bc70      	pop	{r4, r5, r6}
    2ef6:	4770      	bx	lr
    2ef8:	50842500 	.word	0x50842500

00002efc <gpiote_event_handler>:
#ifdef CONFIG_GPIO_NRF_P1
DEVICE_DECLARE(gpio_nrfx_p1);
#endif

static void gpiote_event_handler(void)
{
    2efc:	b570      	push	{r4, r5, r6, lr}
    2efe:	b082      	sub	sp, #8
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2f00:	2300      	movs	r3, #0
    2f02:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE bool nrf_gpiote_event_check(NRF_GPIOTE_Type const * p_reg,
                                              nrf_gpiote_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f04:	4b2d      	ldr	r3, [pc, #180]	; (2fbc <gpiote_event_handler+0xc0>)
    2f06:	681c      	ldr	r4, [r3, #0]
	bool port_event = nrf_gpiote_event_check(NRF_GPIOTE,
						 NRF_GPIOTE_EVENT_PORT);

	if (port_event) {
    2f08:	b90c      	cbnz	r4, 2f0e <gpiote_event_handler+0x12>
{
    2f0a:	2100      	movs	r1, #0
    2f0c:	e009      	b.n	2f22 <gpiote_event_handler+0x26>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    2f0e:	482c      	ldr	r0, [pc, #176]	; (2fc0 <gpiote_event_handler+0xc4>)
    2f10:	f7ff ffcc 	bl	2eac <check_level_trigger_pins>
		fired_triggers[0] =
    2f14:	9001      	str	r0, [sp, #4]
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2f16:	4b29      	ldr	r3, [pc, #164]	; (2fbc <gpiote_event_handler+0xc0>)
    2f18:	2200      	movs	r2, #0
    2f1a:	601a      	str	r2, [r3, #0]
    2f1c:	681b      	ldr	r3, [r3, #0]
    nrf_event_readback((void *)nrf_gpiote_event_address_get(p_reg, event));
}
    2f1e:	e7f4      	b.n	2f0a <gpiote_event_handler+0xe>
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2f20:	3101      	adds	r1, #1
    2f22:	2907      	cmp	r1, #7
    2f24:	d826      	bhi.n	2f74 <gpiote_event_handler+0x78>
		nrf_gpiote_event_t evt =
    2f26:	f101 0340 	add.w	r3, r1, #64	; 0x40
    2f2a:	009b      	lsls	r3, r3, #2
    2f2c:	b29a      	uxth	r2, r3
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2f2e:	2301      	movs	r3, #1
    2f30:	408b      	lsls	r3, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2f32:	4824      	ldr	r0, [pc, #144]	; (2fc4 <gpiote_event_handler+0xc8>)
    2f34:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    2f38:	4203      	tst	r3, r0
    2f3a:	d0f1      	beq.n	2f20 <gpiote_event_handler+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f3c:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    2f40:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    2f44:	681b      	ldr	r3, [r3, #0]
    2f46:	2b00      	cmp	r3, #0
    2f48:	d0ea      	beq.n	2f20 <gpiote_event_handler+0x24>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2f4a:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    2f4e:	481d      	ldr	r0, [pc, #116]	; (2fc4 <gpiote_event_handler+0xc8>)
    2f50:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    2f54:	f3c0 2004 	ubfx	r0, r0, #8, #5
		    nrf_gpiote_event_check(NRF_GPIOTE, evt)) {
			uint32_t abs_pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, i);
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2f58:	2301      	movs	r3, #1
    2f5a:	fa03 f000 	lsl.w	r0, r3, r0
    2f5e:	9b01      	ldr	r3, [sp, #4]
    2f60:	4303      	orrs	r3, r0
    2f62:	9301      	str	r3, [sp, #4]
    return ((uint32_t)p_reg + event);
    2f64:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    2f68:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2f6c:	2200      	movs	r2, #0
    2f6e:	601a      	str	r2, [r3, #0]
    2f70:	681b      	ldr	r3, [r3, #0]
}
    2f72:	e7d5      	b.n	2f20 <gpiote_event_handler+0x24>
			nrf_gpiote_event_clear(NRF_GPIOTE, evt);
		}
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
    2f74:	9e01      	ldr	r6, [sp, #4]
    2f76:	b916      	cbnz	r6, 2f7e <gpiote_event_handler+0x82>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
	}
#endif

	if (port_event) {
    2f78:	b9dc      	cbnz	r4, 2fb2 <gpiote_event_handler+0xb6>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
#endif
	}
}
    2f7a:	b002      	add	sp, #8
    2f7c:	bd70      	pop	{r4, r5, r6, pc}
    2f7e:	4b12      	ldr	r3, [pc, #72]	; (2fc8 <gpiote_event_handler+0xcc>)
    2f80:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2f82:	b119      	cbz	r1, 2f8c <gpiote_event_handler+0x90>
    2f84:	460d      	mov	r5, r1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    2f86:	b149      	cbz	r1, 2f9c <gpiote_event_handler+0xa0>
	return node->next;
    2f88:	680d      	ldr	r5, [r1, #0]
    2f8a:	e007      	b.n	2f9c <gpiote_event_handler+0xa0>
    2f8c:	460d      	mov	r5, r1
    2f8e:	e005      	b.n	2f9c <gpiote_event_handler+0xa0>
    2f90:	b16d      	cbz	r5, 2fae <gpiote_event_handler+0xb2>
    2f92:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    2f94:	b105      	cbz	r5, 2f98 <gpiote_event_handler+0x9c>
	return node->next;
    2f96:	682b      	ldr	r3, [r5, #0]
    2f98:	4629      	mov	r1, r5
    2f9a:	461d      	mov	r5, r3
    2f9c:	2900      	cmp	r1, #0
    2f9e:	d0eb      	beq.n	2f78 <gpiote_event_handler+0x7c>
		if (cb->pin_mask & pins) {
    2fa0:	688a      	ldr	r2, [r1, #8]
    2fa2:	4032      	ands	r2, r6
    2fa4:	d0f4      	beq.n	2f90 <gpiote_event_handler+0x94>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2fa6:	684b      	ldr	r3, [r1, #4]
    2fa8:	4805      	ldr	r0, [pc, #20]	; (2fc0 <gpiote_event_handler+0xc4>)
    2faa:	4798      	blx	r3
    2fac:	e7f0      	b.n	2f90 <gpiote_event_handler+0x94>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2fae:	462b      	mov	r3, r5
    2fb0:	e7f2      	b.n	2f98 <gpiote_event_handler+0x9c>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    2fb2:	4803      	ldr	r0, [pc, #12]	; (2fc0 <gpiote_event_handler+0xc4>)
    2fb4:	f7ff ff48 	bl	2e48 <cfg_level_pins>
}
    2fb8:	e7df      	b.n	2f7a <gpiote_event_handler+0x7e>
    2fba:	bf00      	nop
    2fbc:	5000d17c 	.word	0x5000d17c
    2fc0:	20020140 	.word	0x20020140
    2fc4:	5000d000 	.word	0x5000d000
    2fc8:	20022d78 	.word	0x20022d78

00002fcc <gpiote_pin_cleanup>:
{
    2fcc:	b430      	push	{r4, r5}
    return p_reg->INTENSET & mask;
    2fce:	4b17      	ldr	r3, [pc, #92]	; (302c <gpiote_pin_cleanup+0x60>)
    2fd0:	f8d3 5304 	ldr.w	r5, [r3, #772]	; 0x304
    2fd4:	b2ed      	uxtb	r5, r5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2fd6:	2300      	movs	r3, #0
    2fd8:	e000      	b.n	2fdc <gpiote_pin_cleanup+0x10>
    2fda:	3301      	adds	r3, #1
    2fdc:	2b07      	cmp	r3, #7
    2fde:	d822      	bhi.n	3026 <gpiote_pin_cleanup+0x5a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2fe0:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    2fe4:	4c11      	ldr	r4, [pc, #68]	; (302c <gpiote_pin_cleanup+0x60>)
    2fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    2fea:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2fee:	4291      	cmp	r1, r2
    2ff0:	d1f3      	bne.n	2fda <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    2ff2:	fa25 f203 	lsr.w	r2, r5, r3
    2ff6:	f012 0f01 	tst.w	r2, #1
    2ffa:	d0ee      	beq.n	2fda <gpiote_pin_cleanup+0xe>
			(void)atomic_and(mask, ~BIT(i));
    2ffc:	2201      	movs	r2, #1
    2ffe:	409a      	lsls	r2, r3
    3000:	43d1      	mvns	r1, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3002:	e8d0 4fef 	ldaex	r4, [r0]
    3006:	400c      	ands	r4, r1
    3008:	e8c0 4fe5 	stlex	r5, r4, [r0]
    300c:	2d00      	cmp	r5, #0
    300e:	d1f8      	bne.n	3002 <gpiote_pin_cleanup+0x36>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    3010:	4906      	ldr	r1, [pc, #24]	; (302c <gpiote_pin_cleanup+0x60>)
    3012:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3016:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    301a:	f020 0001 	bic.w	r0, r0, #1
    301e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->INTENCLR = mask;
    3022:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
}
    3026:	bc30      	pop	{r4, r5}
    3028:	4770      	bx	lr
    302a:	bf00      	nop
    302c:	5000d000 	.word	0x5000d000

00003030 <gpiote_channel_alloc>:
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3030:	2300      	movs	r3, #0
    3032:	2b07      	cmp	r3, #7
    3034:	d842      	bhi.n	30bc <gpiote_channel_alloc+0x8c>
{
    3036:	b470      	push	{r4, r5, r6}
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    3038:	2401      	movs	r4, #1
    303a:	409c      	lsls	r4, r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    303c:	e8d0 5fef 	ldaex	r5, [r0]
    3040:	ea45 0604 	orr.w	r6, r5, r4
    3044:	e8c0 6fec 	stlex	ip, r6, [r0]
    3048:	f1bc 0f00 	cmp.w	ip, #0
    304c:	d1f6      	bne.n	303c <gpiote_channel_alloc+0xc>
		if ((prev & BIT(channel)) == 0) {
    304e:	40dd      	lsrs	r5, r3
    3050:	f015 0f01 	tst.w	r5, #1
    3054:	d007      	beq.n	3066 <gpiote_channel_alloc+0x36>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    3056:	3301      	adds	r3, #1
    3058:	b2db      	uxtb	r3, r3
    305a:	2b07      	cmp	r3, #7
    305c:	d9ec      	bls.n	3038 <gpiote_channel_alloc+0x8>
	return -ENODEV;
    305e:	f06f 0012 	mvn.w	r0, #18
}
    3062:	bc70      	pop	{r4, r5, r6}
    3064:	4770      	bx	lr
			nrf_gpiote_event_t evt =
    3066:	f103 0040 	add.w	r0, r3, #64	; 0x40
    306a:	0080      	lsls	r0, r0, #2
    306c:	b280      	uxth	r0, r0
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    306e:	4d15      	ldr	r5, [pc, #84]	; (30c4 <gpiote_channel_alloc+0x94>)
    3070:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3074:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    3078:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    307c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    3080:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3084:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    3088:	0209      	lsls	r1, r1, #8
    308a:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    308e:	0412      	lsls	r2, r2, #16
    3090:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3094:	430a      	orrs	r2, r1
    3096:	4332      	orrs	r2, r6
    3098:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    309c:	f100 42a0 	add.w	r2, r0, #1342177280	; 0x50000000
    30a0:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    30a4:	2000      	movs	r0, #0
    30a6:	6010      	str	r0, [r2, #0]
    30a8:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    30aa:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    30ae:	f042 0201 	orr.w	r2, r2, #1
    30b2:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    p_reg->INTENSET = mask;
    30b6:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
			return 0;
    30ba:	e7d2      	b.n	3062 <gpiote_channel_alloc+0x32>
	return -ENODEV;
    30bc:	f06f 0012 	mvn.w	r0, #18
}
    30c0:	4770      	bx	lr
    30c2:	bf00      	nop
    30c4:	5000d000 	.word	0x5000d000

000030c8 <gpiote_pin_int_cfg>:
{
    30c8:	b570      	push	{r4, r5, r6, lr}
    30ca:	460c      	mov	r4, r1
	return port->data;
    30cc:	68c6      	ldr	r6, [r0, #12]
	return port->config;
    30ce:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    30d0:	7a1b      	ldrb	r3, [r3, #8]
    30d2:	f001 051f 	and.w	r5, r1, #31
    30d6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	gpiote_pin_cleanup(&gpiote_alloc_mask, abs_pin);
    30da:	4629      	mov	r1, r5
    30dc:	4821      	ldr	r0, [pc, #132]	; (3164 <gpiote_pin_int_cfg+0x9c>)
    30de:	f7ff ff75 	bl	2fcc <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    30e2:	f005 021f 	and.w	r2, r5, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    30e6:	4920      	ldr	r1, [pc, #128]	; (3168 <gpiote_pin_int_cfg+0xa0>)
    30e8:	f102 0080 	add.w	r0, r2, #128	; 0x80
    30ec:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    30f0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    30f4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    30f8:	68f3      	ldr	r3, [r6, #12]
    30fa:	40e3      	lsrs	r3, r4
    30fc:	f013 0f01 	tst.w	r3, #1
    3100:	d02e      	beq.n	3160 <gpiote_pin_int_cfg+0x98>
		if (data->trig_edge & BIT(pin)) {
    3102:	6973      	ldr	r3, [r6, #20]
    3104:	40e3      	lsrs	r3, r4
    3106:	f013 0f01 	tst.w	r3, #1
    310a:	d014      	beq.n	3136 <gpiote_pin_int_cfg+0x6e>
			if (data->double_edge & BIT(pin)) {
    310c:	69b3      	ldr	r3, [r6, #24]
    310e:	40e3      	lsrs	r3, r4
    3110:	f013 0f01 	tst.w	r3, #1
    3114:	d107      	bne.n	3126 <gpiote_pin_int_cfg+0x5e>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    3116:	6931      	ldr	r1, [r6, #16]
    3118:	fa21 f404 	lsr.w	r4, r1, r4
    311c:	f014 0f01 	tst.w	r4, #1
    3120:	d007      	beq.n	3132 <gpiote_pin_int_cfg+0x6a>
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    3122:	2201      	movs	r2, #1
    3124:	e000      	b.n	3128 <gpiote_pin_int_cfg+0x60>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3126:	2203      	movs	r2, #3
			res = gpiote_channel_alloc(&gpiote_alloc_mask,
    3128:	4629      	mov	r1, r5
    312a:	480e      	ldr	r0, [pc, #56]	; (3164 <gpiote_pin_int_cfg+0x9c>)
    312c:	f7ff ff80 	bl	3030 <gpiote_channel_alloc>
    3130:	e017      	b.n	3162 <gpiote_pin_int_cfg+0x9a>
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    3132:	2202      	movs	r2, #2
    3134:	e7f8      	b.n	3128 <gpiote_pin_int_cfg+0x60>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3136:	6931      	ldr	r1, [r6, #16]
    3138:	fa21 f404 	lsr.w	r4, r1, r4
    313c:	f014 0f01 	tst.w	r4, #1
    3140:	d10c      	bne.n	315c <gpiote_pin_int_cfg+0x94>
	return NRF_GPIO_PIN_SENSE_LOW;
    3142:	2003      	movs	r0, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3144:	4908      	ldr	r1, [pc, #32]	; (3168 <gpiote_pin_int_cfg+0xa0>)
    3146:	3280      	adds	r2, #128	; 0x80
    3148:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    314c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3150:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    3154:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	int res = 0;
    3158:	2000      	movs	r0, #0
}
    315a:	e002      	b.n	3162 <gpiote_pin_int_cfg+0x9a>
		return NRF_GPIO_PIN_SENSE_HIGH;
    315c:	2002      	movs	r0, #2
    315e:	e7f1      	b.n	3144 <gpiote_pin_int_cfg+0x7c>
	int res = 0;
    3160:	2000      	movs	r0, #0
}
    3162:	bd70      	pop	{r4, r5, r6, pc}
    3164:	20022d94 	.word	0x20022d94
    3168:	50842500 	.word	0x50842500

0000316c <gpio_nrfx_pin_interrupt_configure>:
{
    316c:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    316e:	68c4      	ldr	r4, [r0, #12]
	return port->config;
    3170:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3172:	7a2e      	ldrb	r6, [r5, #8]
    3174:	f001 051f 	and.w	r5, r1, #31
    3178:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if ((mode == GPIO_INT_MODE_EDGE) &&
    317c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3180:	d025      	beq.n	31ce <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3182:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3186:	d02e      	beq.n	31e6 <gpio_nrfx_pin_interrupt_configure+0x7a>
    3188:	68e5      	ldr	r5, [r4, #12]
    318a:	2601      	movs	r6, #1
    318c:	408e      	lsls	r6, r1
    318e:	4335      	orrs	r5, r6
    3190:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3192:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3196:	d02c      	beq.n	31f2 <gpio_nrfx_pin_interrupt_configure+0x86>
    3198:	6962      	ldr	r2, [r4, #20]
    319a:	2501      	movs	r5, #1
    319c:	408d      	lsls	r5, r1
    319e:	ea22 0205 	bic.w	r2, r2, r5
    31a2:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    31a4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    31a8:	d028      	beq.n	31fc <gpio_nrfx_pin_interrupt_configure+0x90>
    31aa:	69a2      	ldr	r2, [r4, #24]
    31ac:	2501      	movs	r5, #1
    31ae:	408d      	lsls	r5, r1
    31b0:	ea22 0205 	bic.w	r2, r2, r5
    31b4:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    31b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    31ba:	d024      	beq.n	3206 <gpio_nrfx_pin_interrupt_configure+0x9a>
    31bc:	6923      	ldr	r3, [r4, #16]
    31be:	2201      	movs	r2, #1
    31c0:	408a      	lsls	r2, r1
    31c2:	ea23 0302 	bic.w	r3, r3, r2
    31c6:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    31c8:	f7ff ff7e 	bl	30c8 <gpiote_pin_int_cfg>
}
    31cc:	bd70      	pop	{r4, r5, r6, pc}
    *p_pin = pin_number & 0x1F;
    31ce:	f005 051f 	and.w	r5, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    31d2:	3580      	adds	r5, #128	; 0x80
    31d4:	4e0e      	ldr	r6, [pc, #56]	; (3210 <gpio_nrfx_pin_interrupt_configure+0xa4>)
    31d6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    31da:	f015 0f01 	tst.w	r5, #1
    31de:	d0d0      	beq.n	3182 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    31e0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    31e4:	e7f2      	b.n	31cc <gpio_nrfx_pin_interrupt_configure+0x60>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    31e6:	68e5      	ldr	r5, [r4, #12]
    31e8:	2601      	movs	r6, #1
    31ea:	408e      	lsls	r6, r1
    31ec:	ea25 0506 	bic.w	r5, r5, r6
    31f0:	e7ce      	b.n	3190 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    31f2:	6962      	ldr	r2, [r4, #20]
    31f4:	2501      	movs	r5, #1
    31f6:	408d      	lsls	r5, r1
    31f8:	432a      	orrs	r2, r5
    31fa:	e7d2      	b.n	31a2 <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    31fc:	69a2      	ldr	r2, [r4, #24]
    31fe:	2501      	movs	r5, #1
    3200:	408d      	lsls	r5, r1
    3202:	432a      	orrs	r2, r5
    3204:	e7d6      	b.n	31b4 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3206:	6923      	ldr	r3, [r4, #16]
    3208:	2201      	movs	r2, #1
    320a:	408a      	lsls	r2, r1
    320c:	4313      	orrs	r3, r2
    320e:	e7da      	b.n	31c6 <gpio_nrfx_pin_interrupt_configure+0x5a>
    3210:	50842500 	.word	0x50842500

00003214 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3214:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    3216:	4b0b      	ldr	r3, [pc, #44]	; (3244 <gpio_nrfx_init+0x30>)
    3218:	781b      	ldrb	r3, [r3, #0]
    321a:	b10b      	cbz	r3, 3220 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    321c:	2000      	movs	r0, #0
    321e:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    3220:	4b08      	ldr	r3, [pc, #32]	; (3244 <gpio_nrfx_init+0x30>)
    3222:	2201      	movs	r2, #1
    3224:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3226:	2200      	movs	r2, #0
    3228:	2105      	movs	r1, #5
    322a:	200d      	movs	r0, #13
    322c:	f7ff fa46 	bl	26bc <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    3230:	200d      	movs	r0, #13
    3232:	f7ff fa25 	bl	2680 <arch_irq_enable>
    3236:	4b04      	ldr	r3, [pc, #16]	; (3248 <gpio_nrfx_init+0x34>)
    3238:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    323c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3240:	e7ec      	b.n	321c <gpio_nrfx_init+0x8>
    3242:	bf00      	nop
    3244:	20022e44 	.word	0x20022e44
    3248:	5000d000 	.word	0x5000d000

0000324c <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    324c:	4b03      	ldr	r3, [pc, #12]	; (325c <nvmc_wait_ready+0x10>)
    324e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
    3252:	f013 0f01 	tst.w	r3, #1
    3256:	d0f9      	beq.n	324c <nvmc_wait_ready>
	}
}
    3258:	4770      	bx	lr
    325a:	bf00      	nop
    325c:	50039000 	.word	0x50039000

00003260 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    3260:	4b02      	ldr	r3, [pc, #8]	; (326c <flash_nrf_pages_layout+0xc>)
    3262:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    3264:	2301      	movs	r3, #1
    3266:	6013      	str	r3, [r2, #0]
}
    3268:	4770      	bx	lr
    326a:	bf00      	nop
    326c:	20022d98 	.word	0x20022d98

00003270 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    3270:	4800      	ldr	r0, [pc, #0]	; (3274 <flash_nrf_get_parameters+0x4>)
    3272:	4770      	bx	lr
    3274:	00009e08 	.word	0x00009e08

00003278 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    3278:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    327a:	f004 f9bb 	bl	75f4 <nrfx_nvmc_flash_page_count_get>
    327e:	4c03      	ldr	r4, [pc, #12]	; (328c <nrf_flash_init+0x14>)
    3280:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    3282:	f004 f9b3 	bl	75ec <nrfx_nvmc_flash_page_size_get>
    3286:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    3288:	2000      	movs	r0, #0
    328a:	bd10      	pop	{r4, pc}
    328c:	20022d98 	.word	0x20022d98

00003290 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    3290:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    3292:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    3294:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    3298:	d06f      	beq.n	337a <baudrate_set+0xea>
    329a:	d83a      	bhi.n	3312 <baudrate_set+0x82>
    329c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    32a0:	d06e      	beq.n	3380 <baudrate_set+0xf0>
    32a2:	d90a      	bls.n	32ba <baudrate_set+0x2a>
    32a4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    32a8:	d075      	beq.n	3396 <baudrate_set+0x106>
    32aa:	d924      	bls.n	32f6 <baudrate_set+0x66>
    32ac:	f647 2312 	movw	r3, #31250	; 0x7a12
    32b0:	4299      	cmp	r1, r3
    32b2:	d12b      	bne.n	330c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    32b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    32b8:	e013      	b.n	32e2 <baudrate_set+0x52>
	switch (baudrate) {
    32ba:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    32be:	d061      	beq.n	3384 <baudrate_set+0xf4>
    32c0:	d907      	bls.n	32d2 <baudrate_set+0x42>
    32c2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    32c6:	d063      	beq.n	3390 <baudrate_set+0x100>
    32c8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    32cc:	d110      	bne.n	32f0 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    32ce:	4b3c      	ldr	r3, [pc, #240]	; (33c0 <baudrate_set+0x130>)
    32d0:	e007      	b.n	32e2 <baudrate_set+0x52>
	switch (baudrate) {
    32d2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    32d6:	d058      	beq.n	338a <baudrate_set+0xfa>
    32d8:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    32dc:	d105      	bne.n	32ea <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    32de:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    32e2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    32e6:	2000      	movs	r0, #0
    32e8:	4770      	bx	lr
	switch (baudrate) {
    32ea:	f06f 0015 	mvn.w	r0, #21
    32ee:	4770      	bx	lr
    32f0:	f06f 0015 	mvn.w	r0, #21
    32f4:	4770      	bx	lr
    32f6:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    32fa:	d04e      	beq.n	339a <baudrate_set+0x10a>
    32fc:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    3300:	d101      	bne.n	3306 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3302:	4b30      	ldr	r3, [pc, #192]	; (33c4 <baudrate_set+0x134>)
    3304:	e7ed      	b.n	32e2 <baudrate_set+0x52>
	switch (baudrate) {
    3306:	f06f 0015 	mvn.w	r0, #21
    330a:	4770      	bx	lr
    330c:	f06f 0015 	mvn.w	r0, #21
    3310:	4770      	bx	lr
    3312:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    3316:	d042      	beq.n	339e <baudrate_set+0x10e>
    3318:	d909      	bls.n	332e <baudrate_set+0x9e>
    331a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    331e:	d046      	beq.n	33ae <baudrate_set+0x11e>
    3320:	d91f      	bls.n	3362 <baudrate_set+0xd2>
    3322:	4b29      	ldr	r3, [pc, #164]	; (33c8 <baudrate_set+0x138>)
    3324:	4299      	cmp	r1, r3
    3326:	d148      	bne.n	33ba <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3328:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    332c:	e7d9      	b.n	32e2 <baudrate_set+0x52>
	switch (baudrate) {
    332e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    3332:	d037      	beq.n	33a4 <baudrate_set+0x114>
    3334:	d905      	bls.n	3342 <baudrate_set+0xb2>
    3336:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    333a:	d10f      	bne.n	335c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    333c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3340:	e7cf      	b.n	32e2 <baudrate_set+0x52>
	switch (baudrate) {
    3342:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    3346:	4299      	cmp	r1, r3
    3348:	d02e      	beq.n	33a8 <baudrate_set+0x118>
    334a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    334e:	d102      	bne.n	3356 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3350:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3354:	e7c5      	b.n	32e2 <baudrate_set+0x52>
	switch (baudrate) {
    3356:	f06f 0015 	mvn.w	r0, #21
    335a:	4770      	bx	lr
    335c:	f06f 0015 	mvn.w	r0, #21
    3360:	4770      	bx	lr
    3362:	4b1a      	ldr	r3, [pc, #104]	; (33cc <baudrate_set+0x13c>)
    3364:	4299      	cmp	r1, r3
    3366:	d025      	beq.n	33b4 <baudrate_set+0x124>
    3368:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    336c:	d102      	bne.n	3374 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    336e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3372:	e7b6      	b.n	32e2 <baudrate_set+0x52>
	switch (baudrate) {
    3374:	f06f 0015 	mvn.w	r0, #21
    3378:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    337a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    337e:	e7b0      	b.n	32e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3380:	4b13      	ldr	r3, [pc, #76]	; (33d0 <baudrate_set+0x140>)
    3382:	e7ae      	b.n	32e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3384:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3388:	e7ab      	b.n	32e2 <baudrate_set+0x52>
	switch (baudrate) {
    338a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    338e:	e7a8      	b.n	32e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3390:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3394:	e7a5      	b.n	32e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3396:	4b0f      	ldr	r3, [pc, #60]	; (33d4 <baudrate_set+0x144>)
    3398:	e7a3      	b.n	32e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    339a:	4b0f      	ldr	r3, [pc, #60]	; (33d8 <baudrate_set+0x148>)
    339c:	e7a1      	b.n	32e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    339e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    33a2:	e79e      	b.n	32e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    33a4:	4b0d      	ldr	r3, [pc, #52]	; (33dc <baudrate_set+0x14c>)
    33a6:	e79c      	b.n	32e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    33a8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    33ac:	e799      	b.n	32e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    33ae:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    33b2:	e796      	b.n	32e2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    33b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    33b8:	e793      	b.n	32e2 <baudrate_set+0x52>
	switch (baudrate) {
    33ba:	f06f 0015 	mvn.w	r0, #21
}
    33be:	4770      	bx	lr
    33c0:	0013b000 	.word	0x0013b000
    33c4:	004ea000 	.word	0x004ea000
    33c8:	000f4240 	.word	0x000f4240
    33cc:	0003d090 	.word	0x0003d090
    33d0:	00275000 	.word	0x00275000
    33d4:	0075c000 	.word	0x0075c000
    33d8:	003af000 	.word	0x003af000
    33dc:	013a9000 	.word	0x013a9000

000033e0 <uarte_instance_init>:
};

static int uarte_instance_init(const struct device *dev,
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
    33e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33e2:	460c      	mov	r4, r1
    33e4:	4616      	mov	r6, r2
	return dev->config;
    33e6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    33e8:	681d      	ldr	r5, [r3, #0]
	return dev->data;
    33ea:	68c7      	ldr	r7, [r0, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    33ec:	2300      	movs	r3, #0
    33ee:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    33f2:	6038      	str	r0, [r7, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
    33f4:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    33f6:	f003 021f 	and.w	r2, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    33fa:	2301      	movs	r3, #1
    33fc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    33fe:	4a30      	ldr	r2, [pc, #192]	; (34c0 <uarte_instance_init+0xe0>)
    3400:	6093      	str	r3, [r2, #8]
	nrf_gpio_cfg_output(config->pseltxd);
    3402:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    3404:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3408:	3380      	adds	r3, #128	; 0x80
    340a:	2103      	movs	r1, #3
    340c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    3410:	6863      	ldr	r3, [r4, #4]
    3412:	f1b3 3fff 	cmp.w	r3, #4294967295
    3416:	d005      	beq.n	3424 <uarte_instance_init+0x44>
    *p_pin = pin_number & 0x1F;
    3418:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    341c:	3380      	adds	r3, #128	; 0x80
    341e:	2100      	movs	r1, #0
    3420:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
    3424:	6822      	ldr	r2, [r4, #0]
    3426:	6863      	ldr	r3, [r4, #4]
    p_reg->PSEL.TXD = pseltxd;
    3428:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    342c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    3430:	68a3      	ldr	r3, [r4, #8]
    3432:	f1b3 3fff 	cmp.w	r3, #4294967295
    3436:	d006      	beq.n	3446 <uarte_instance_init+0x66>
    *p_pin = pin_number & 0x1F;
    3438:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    343c:	3380      	adds	r3, #128	; 0x80
    343e:	4a20      	ldr	r2, [pc, #128]	; (34c0 <uarte_instance_init+0xe0>)
    3440:	2100      	movs	r1, #0
    3442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    3446:	68e3      	ldr	r3, [r4, #12]
    3448:	f1b3 3fff 	cmp.w	r3, #4294967295
    344c:	d00d      	beq.n	346a <uarte_instance_init+0x8a>
    *p_pin = pin_number & 0x1F;
    344e:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3452:	2201      	movs	r2, #1
    3454:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    3458:	4a19      	ldr	r2, [pc, #100]	; (34c0 <uarte_instance_init+0xe0>)
    345a:	6093      	str	r3, [r2, #8]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
    345c:	68e3      	ldr	r3, [r4, #12]
    *p_pin = pin_number & 0x1F;
    345e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3462:	3380      	adds	r3, #128	; 0x80
    3464:	2103      	movs	r1, #3
    3466:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
    346a:	68e2      	ldr	r2, [r4, #12]
    346c:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.RTS = pselrts;
    346e:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    3472:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    3476:	68c1      	ldr	r1, [r0, #12]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3478:	3104      	adds	r1, #4
    347a:	f003 ff13 	bl	72a4 <uarte_nrfx_configure>
	if (err) {
    347e:	b9f0      	cbnz	r0, 34be <uarte_instance_init+0xde>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3480:	2308      	movs	r3, #8
    3482:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    3486:	6863      	ldr	r3, [r4, #4]
    3488:	f1b3 3fff 	cmp.w	r3, #4294967295
    348c:	d00c      	beq.n	34a8 <uarte_instance_init+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    348e:	2300      	movs	r3, #0
    3490:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    3494:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3498:	f107 0314 	add.w	r3, r7, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    349c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    34a0:	2301      	movs	r3, #1
    34a2:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34a6:	602b      	str	r3, [r5, #0]
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
	}

#ifdef UARTE_INTERRUPT_DRIVEN
	if (interrupts_active) {
    34a8:	b14e      	cbz	r6, 34be <uarte_instance_init+0xde>
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
    34aa:	68fb      	ldr	r3, [r7, #12]
    34ac:	689b      	ldr	r3, [r3, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    34ae:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    34b2:	2300      	movs	r3, #0
    34b4:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34b8:	2301      	movs	r3, #1
    34ba:	60ab      	str	r3, [r5, #8]
    34bc:	60eb      	str	r3, [r5, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    34be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34c0:	50842500 	.word	0x50842500

000034c4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    34c4:	b530      	push	{r4, r5, lr}
    34c6:	b085      	sub	sp, #20
    34c8:	4605      	mov	r5, r0
    34ca:	4b0a      	ldr	r3, [pc, #40]	; (34f4 <uarte_0_init+0x30>)
    34cc:	466c      	mov	r4, sp
    34ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    34d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    34d4:	2200      	movs	r2, #0
    34d6:	2101      	movs	r1, #1
    34d8:	2008      	movs	r0, #8
    34da:	f7ff f8ef 	bl	26bc <z_arm_irq_priority_set>
    34de:	2008      	movs	r0, #8
    34e0:	f7ff f8ce 	bl	2680 <arch_irq_enable>
    34e4:	2201      	movs	r2, #1
    34e6:	4621      	mov	r1, r4
    34e8:	4628      	mov	r0, r5
    34ea:	f7ff ff79 	bl	33e0 <uarte_instance_init>
    34ee:	b005      	add	sp, #20
    34f0:	bd30      	pop	{r4, r5, pc}
    34f2:	bf00      	nop
    34f4:	00009530 	.word	0x00009530

000034f8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    34f8:	b530      	push	{r4, r5, lr}
    34fa:	b085      	sub	sp, #20
    34fc:	4605      	mov	r5, r0
    34fe:	466c      	mov	r4, sp
    3500:	4b09      	ldr	r3, [pc, #36]	; (3528 <uarte_1_init+0x30>)
    3502:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3504:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3508:	2200      	movs	r2, #0
    350a:	2101      	movs	r1, #1
    350c:	2009      	movs	r0, #9
    350e:	f7ff f8d5 	bl	26bc <z_arm_irq_priority_set>
    3512:	2009      	movs	r0, #9
    3514:	f7ff f8b4 	bl	2680 <arch_irq_enable>
    3518:	2201      	movs	r2, #1
    351a:	4621      	mov	r1, r4
    351c:	4628      	mov	r0, r5
    351e:	f7ff ff5f 	bl	33e0 <uarte_instance_init>
    3522:	b005      	add	sp, #20
    3524:	bd30      	pop	{r4, r5, pc}
    3526:	bf00      	nop
    3528:	00009540 	.word	0x00009540

0000352c <fprotect_area>:
#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE
#endif

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    352c:	f3c0 030e 	ubfx	r3, r0, #0, #15
    3530:	b9bb      	cbnz	r3, 3562 <fprotect_area+0x36>
		length % SPU_BLOCK_SIZE != 0) {
    3532:	f3c1 020e 	ubfx	r2, r1, #0, #15
	if (start % SPU_BLOCK_SIZE != 0 ||
    3536:	b9ba      	cbnz	r2, 3568 <fprotect_area+0x3c>
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    3538:	ebb2 3fd1 	cmp.w	r2, r1, lsr #15
    353c:	d217      	bcs.n	356e <fprotect_area+0x42>
{
    353e:	b430      	push	{r4, r5}
		nrf_spu_flashregion_set(NRF_SPU_S,
    3540:	eb02 33d0 	add.w	r3, r2, r0, lsr #15
    3544:	b2db      	uxtb	r3, r3
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    3546:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    354a:	4c0a      	ldr	r4, [pc, #40]	; (3574 <fprotect_area+0x48>)
    354c:	f240 1515 	movw	r5, #277	; 0x115
    3550:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    3554:	3201      	adds	r2, #1
    3556:	ebb2 3fd1 	cmp.w	r2, r1, lsr #15
    355a:	d3f1      	bcc.n	3540 <fprotect_area+0x14>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    355c:	2000      	movs	r0, #0
}
    355e:	bc30      	pop	{r4, r5}
    3560:	4770      	bx	lr
		return -EINVAL;
    3562:	f06f 0015 	mvn.w	r0, #21
    3566:	4770      	bx	lr
    3568:	f06f 0015 	mvn.w	r0, #21
    356c:	4770      	bx	lr
	return 0;
    356e:	2000      	movs	r0, #0
}
    3570:	4770      	bx	lr
    3572:	bf00      	nop
    3574:	50003000 	.word	0x50003000

00003578 <nrf91_errata_6>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3578:	4b03      	ldr	r3, [pc, #12]	; (3588 <nrf91_errata_6+0x10>)
    357a:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    357c:	2b09      	cmp	r3, #9
    357e:	d001      	beq.n	3584 <nrf91_errata_6+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3580:	2000      	movs	r0, #0
    3582:	4770      	bx	lr
                        return true;
    3584:	2001      	movs	r0, #1
    #endif
}
    3586:	4770      	bx	lr
    3588:	00ff0130 	.word	0x00ff0130

0000358c <nrf91_errata_14>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    358c:	4b06      	ldr	r3, [pc, #24]	; (35a8 <nrf91_errata_14+0x1c>)
    358e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3590:	4a06      	ldr	r2, [pc, #24]	; (35ac <nrf91_errata_14+0x20>)
    3592:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3594:	2b09      	cmp	r3, #9
    3596:	d001      	beq.n	359c <nrf91_errata_14+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3598:	2000      	movs	r0, #0
    359a:	4770      	bx	lr
                switch(var2)
    359c:	2a01      	cmp	r2, #1
    359e:	d001      	beq.n	35a4 <nrf91_errata_14+0x18>
                        return false;
    35a0:	2000      	movs	r0, #0
    #endif
}
    35a2:	4770      	bx	lr
                switch(var2)
    35a4:	2001      	movs	r0, #1
    35a6:	4770      	bx	lr
    35a8:	00ff0130 	.word	0x00ff0130
    35ac:	00ff0134 	.word	0x00ff0134

000035b0 <nrf91_errata_15>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    35b0:	4b06      	ldr	r3, [pc, #24]	; (35cc <nrf91_errata_15+0x1c>)
    35b2:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    35b4:	4a06      	ldr	r2, [pc, #24]	; (35d0 <nrf91_errata_15+0x20>)
    35b6:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    35b8:	2b09      	cmp	r3, #9
    35ba:	d001      	beq.n	35c0 <nrf91_errata_15+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    35bc:	2000      	movs	r0, #0
    35be:	4770      	bx	lr
                switch(var2)
    35c0:	2a01      	cmp	r2, #1
    35c2:	d001      	beq.n	35c8 <nrf91_errata_15+0x18>
                        return true;
    35c4:	2001      	movs	r0, #1
    #endif
}
    35c6:	4770      	bx	lr
                switch(var2)
    35c8:	2000      	movs	r0, #0
    35ca:	4770      	bx	lr
    35cc:	00ff0130 	.word	0x00ff0130
    35d0:	00ff0134 	.word	0x00ff0134

000035d4 <nrf91_errata_20>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    35d4:	4b06      	ldr	r3, [pc, #24]	; (35f0 <nrf91_errata_20+0x1c>)
    35d6:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    35d8:	4a06      	ldr	r2, [pc, #24]	; (35f4 <nrf91_errata_20+0x20>)
    35da:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    35dc:	2b09      	cmp	r3, #9
    35de:	d001      	beq.n	35e4 <nrf91_errata_20+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    35e0:	2000      	movs	r0, #0
    35e2:	4770      	bx	lr
                switch(var2)
    35e4:	2a01      	cmp	r2, #1
    35e6:	d001      	beq.n	35ec <nrf91_errata_20+0x18>
                        return false;
    35e8:	2000      	movs	r0, #0
    #endif
}
    35ea:	4770      	bx	lr
                switch(var2)
    35ec:	2001      	movs	r0, #1
    35ee:	4770      	bx	lr
    35f0:	00ff0130 	.word	0x00ff0130
    35f4:	00ff0134 	.word	0x00ff0134

000035f8 <nrf91_errata_31>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    35f8:	4b03      	ldr	r3, [pc, #12]	; (3608 <nrf91_errata_31+0x10>)
    35fa:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    35fc:	2b09      	cmp	r3, #9
    35fe:	d001      	beq.n	3604 <nrf91_errata_31+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3600:	2000      	movs	r0, #0
    3602:	4770      	bx	lr
                        return true;
    3604:	2001      	movs	r0, #1
    #endif
}
    3606:	4770      	bx	lr
    3608:	00ff0130 	.word	0x00ff0130

0000360c <uicr_HFXOCNT_erased>:

#if !defined(NRF_TRUSTZONE_NONSECURE)

    bool uicr_HFXOCNT_erased()
    {
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    360c:	4b04      	ldr	r3, [pc, #16]	; (3620 <uicr_HFXOCNT_erased+0x14>)
    360e:	6a1b      	ldr	r3, [r3, #32]
    3610:	f1b3 3fff 	cmp.w	r3, #4294967295
    3614:	d001      	beq.n	361a <uicr_HFXOCNT_erased+0xe>
            return true;
        }
        return false;
    3616:	2000      	movs	r0, #0
    3618:	4770      	bx	lr
            return true;
    361a:	2001      	movs	r0, #1
    }
    361c:	4770      	bx	lr
    361e:	bf00      	nop
    3620:	00ff8000 	.word	0x00ff8000

00003624 <uicr_HFXOSRC_erased>:
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    3624:	4b04      	ldr	r3, [pc, #16]	; (3638 <uicr_HFXOSRC_erased+0x14>)
    3626:	69db      	ldr	r3, [r3, #28]
    3628:	f013 0f01 	tst.w	r3, #1
    362c:	d101      	bne.n	3632 <uicr_HFXOSRC_erased+0xe>
            return true;
        }
        return false;
    362e:	2000      	movs	r0, #0
    3630:	4770      	bx	lr
            return true;
    3632:	2001      	movs	r0, #1
    }
    3634:	4770      	bx	lr
    3636:	bf00      	nop
    3638:	00ff8000 	.word	0x00ff8000

0000363c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK;
    363c:	4b01      	ldr	r3, [pc, #4]	; (3644 <SystemCoreClockUpdate+0x8>)
    363e:	4a02      	ldr	r2, [pc, #8]	; (3648 <SystemCoreClockUpdate+0xc>)
    3640:	601a      	str	r2, [r3, #0]
}
    3642:	4770      	bx	lr
    3644:	20020084 	.word	0x20020084
    3648:	03d09000 	.word	0x03d09000

0000364c <SystemInit>:
{
    364c:	b508      	push	{r3, lr}
        if (nrf91_errata_6()){
    364e:	f7ff ff93 	bl	3578 <nrf91_errata_6>
    3652:	b130      	cbz	r0, 3662 <SystemInit+0x16>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    3654:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3658:	2200      	movs	r2, #0
    365a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    365e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        if (nrf91_errata_14()){
    3662:	f7ff ff93 	bl	358c <nrf91_errata_14>
    3666:	b130      	cbz	r0, 3676 <SystemInit+0x2a>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    3668:	2301      	movs	r3, #1
    366a:	4a42      	ldr	r2, [pc, #264]	; (3774 <SystemInit+0x128>)
    366c:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    366e:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    3672:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        if (nrf91_errata_15()){
    3676:	f7ff ff9b 	bl	35b0 <nrf91_errata_15>
    367a:	b118      	cbz	r0, 3684 <SystemInit+0x38>
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    367c:	4b3e      	ldr	r3, [pc, #248]	; (3778 <SystemInit+0x12c>)
    367e:	2201      	movs	r2, #1
    3680:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        if (nrf91_errata_20()){
    3684:	f7ff ffa6 	bl	35d4 <nrf91_errata_20>
    3688:	b110      	cbz	r0, 3690 <SystemInit+0x44>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    368a:	4b3c      	ldr	r3, [pc, #240]	; (377c <SystemInit+0x130>)
    368c:	220e      	movs	r2, #14
    368e:	601a      	str	r2, [r3, #0]
        if (nrf91_errata_31()){
    3690:	f7ff ffb2 	bl	35f8 <nrf91_errata_31>
    3694:	b128      	cbz	r0, 36a2 <SystemInit+0x56>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    3696:	4b3a      	ldr	r3, [pc, #232]	; (3780 <SystemInit+0x134>)
    3698:	2200      	movs	r2, #0
    369a:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    369c:	3304      	adds	r3, #4
    369e:	2201      	movs	r2, #1
    36a0:	601a      	str	r2, [r3, #0]
{
    36a2:	2200      	movs	r2, #0
    36a4:	e00b      	b.n	36be <SystemInit+0x72>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    36a6:	f102 0360 	add.w	r3, r2, #96	; 0x60
    36aa:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    36ae:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    36b2:	00db      	lsls	r3, r3, #3
    36b4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    36b8:	685b      	ldr	r3, [r3, #4]
    36ba:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    36bc:	3201      	adds	r2, #1
    36be:	2aff      	cmp	r2, #255	; 0xff
    36c0:	d808      	bhi.n	36d4 <SystemInit+0x88>
    36c2:	f102 0360 	add.w	r3, r2, #96	; 0x60
    36c6:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    36ca:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    36ce:	f1b3 3fff 	cmp.w	r3, #4294967295
    36d2:	d1e8      	bne.n	36a6 <SystemInit+0x5a>
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    36d4:	f7ff ffa6 	bl	3624 <uicr_HFXOSRC_erased>
    36d8:	b960      	cbnz	r0, 36f4 <SystemInit+0xa8>
    36da:	f7ff ff97 	bl	360c <uicr_HFXOCNT_erased>
    36de:	b948      	cbnz	r0, 36f4 <SystemInit+0xa8>
        SCB->NSACR |= (3UL << 10);
    36e0:	4a28      	ldr	r2, [pc, #160]	; (3784 <SystemInit+0x138>)
    36e2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    36e6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    36ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClockUpdate();
    36ee:	f7ff ffa5 	bl	363c <SystemCoreClockUpdate>
}
    36f2:	bd08      	pop	{r3, pc}
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    36f4:	4b24      	ldr	r3, [pc, #144]	; (3788 <SystemInit+0x13c>)
    36f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    36fa:	2b01      	cmp	r3, #1
    36fc:	d1fa      	bne.n	36f4 <SystemInit+0xa8>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    36fe:	4b22      	ldr	r3, [pc, #136]	; (3788 <SystemInit+0x13c>)
    3700:	2201      	movs	r2, #1
    3702:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3706:	4b20      	ldr	r3, [pc, #128]	; (3788 <SystemInit+0x13c>)
    3708:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    370c:	2b01      	cmp	r3, #1
    370e:	d1fa      	bne.n	3706 <SystemInit+0xba>
          if (uicr_HFXOSRC_erased()){
    3710:	f7ff ff88 	bl	3624 <uicr_HFXOSRC_erased>
    3714:	b148      	cbz	r0, 372a <SystemInit+0xde>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    3716:	4a1d      	ldr	r2, [pc, #116]	; (378c <SystemInit+0x140>)
    3718:	69d3      	ldr	r3, [r2, #28]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    371a:	f023 0301 	bic.w	r3, r3, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    371e:	61d3      	str	r3, [r2, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3720:	4b19      	ldr	r3, [pc, #100]	; (3788 <SystemInit+0x13c>)
    3722:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3726:	2b01      	cmp	r3, #1
    3728:	d1fa      	bne.n	3720 <SystemInit+0xd4>
          if (uicr_HFXOCNT_erased()){
    372a:	f7ff ff6f 	bl	360c <uicr_HFXOCNT_erased>
    372e:	b158      	cbz	r0, 3748 <SystemInit+0xfc>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    3730:	4a16      	ldr	r2, [pc, #88]	; (378c <SystemInit+0x140>)
    3732:	6a13      	ldr	r3, [r2, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    3734:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    3738:	f043 0320 	orr.w	r3, r3, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    373c:	6213      	str	r3, [r2, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    373e:	4b12      	ldr	r3, [pc, #72]	; (3788 <SystemInit+0x13c>)
    3740:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3744:	2b01      	cmp	r3, #1
    3746:	d1fa      	bne.n	373e <SystemInit+0xf2>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    3748:	4b0f      	ldr	r3, [pc, #60]	; (3788 <SystemInit+0x13c>)
    374a:	2200      	movs	r2, #0
    374c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3750:	4b0d      	ldr	r3, [pc, #52]	; (3788 <SystemInit+0x13c>)
    3752:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3756:	2b01      	cmp	r3, #1
    3758:	d1fa      	bne.n	3750 <SystemInit+0x104>
  __ASM volatile ("dsb 0xF":::"memory");
    375a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    375e:	4909      	ldr	r1, [pc, #36]	; (3784 <SystemInit+0x138>)
    3760:	68ca      	ldr	r2, [r1, #12]
    3762:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3766:	4b0a      	ldr	r3, [pc, #40]	; (3790 <SystemInit+0x144>)
    3768:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    376a:	60cb      	str	r3, [r1, #12]
    376c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3770:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3772:	e7fd      	b.n	3770 <SystemInit+0x124>
    3774:	50004a38 	.word	0x50004a38
    3778:	50004000 	.word	0x50004000
    377c:	5003aee4 	.word	0x5003aee4
    3780:	5000470c 	.word	0x5000470c
    3784:	e000ed00 	.word	0xe000ed00
    3788:	50039000 	.word	0x50039000
    378c:	00ff8000 	.word	0x00ff8000
    3790:	05fa0004 	.word	0x05fa0004

00003794 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3794:	4b05      	ldr	r3, [pc, #20]	; (37ac <nrfx_clock_init+0x18>)
    3796:	791b      	ldrb	r3, [r3, #4]
    3798:	b92b      	cbnz	r3, 37a6 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    379a:	4b04      	ldr	r3, [pc, #16]	; (37ac <nrfx_clock_init+0x18>)
    379c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    379e:	2201      	movs	r2, #1
    37a0:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    37a2:	4803      	ldr	r0, [pc, #12]	; (37b0 <nrfx_clock_init+0x1c>)
    37a4:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    37a6:	4803      	ldr	r0, [pc, #12]	; (37b4 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    37a8:	4770      	bx	lr
    37aa:	bf00      	nop
    37ac:	20022de0 	.word	0x20022de0
    37b0:	0bad0000 	.word	0x0bad0000
    37b4:	0bad000c 	.word	0x0bad000c

000037b8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    37b8:	b110      	cbz	r0, 37c0 <nrfx_clock_start+0x8>
    37ba:	2801      	cmp	r0, #1
    37bc:	d025      	beq.n	380a <nrfx_clock_start+0x52>
    37be:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    37c0:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    37c4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    37c8:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    37cc:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    37d0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    37d4:	d111      	bne.n	37fa <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    37d6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    37da:	2201      	movs	r2, #1
    37dc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37e0:	4b0f      	ldr	r3, [pc, #60]	; (3820 <nrfx_clock_start+0x68>)
    37e2:	2200      	movs	r2, #0
    37e4:	601a      	str	r2, [r3, #0]
    37e6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    37e8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    37ec:	2202      	movs	r2, #2
    37ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37f2:	3308      	adds	r3, #8
    37f4:	2201      	movs	r2, #1
    37f6:	601a      	str	r2, [r3, #0]
}
    37f8:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    37fa:	2b02      	cmp	r3, #2
    37fc:	d1eb      	bne.n	37d6 <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    37fe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3802:	2202      	movs	r2, #2
    3804:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    3808:	e7ea      	b.n	37e0 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    380a:	4b06      	ldr	r3, [pc, #24]	; (3824 <nrfx_clock_start+0x6c>)
    380c:	2200      	movs	r2, #0
    380e:	601a      	str	r2, [r3, #0]
    3810:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3812:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3816:	2201      	movs	r2, #1
    3818:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    381c:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    381e:	4770      	bx	lr
    3820:	50005104 	.word	0x50005104
    3824:	50005100 	.word	0x50005100

00003828 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3828:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    382a:	4604      	mov	r4, r0
    382c:	b110      	cbz	r0, 3834 <nrfx_clock_stop+0xc>
    382e:	2801      	cmp	r0, #1
    3830:	d012      	beq.n	3858 <nrfx_clock_stop+0x30>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3832:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    3834:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3838:	2202      	movs	r2, #2
    383a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    383e:	f503 7382 	add.w	r3, r3, #260	; 0x104
    3842:	2200      	movs	r2, #0
    3844:	601a      	str	r2, [r3, #0]
    3846:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3848:	4b33      	ldr	r3, [pc, #204]	; (3918 <nrfx_clock_stop+0xf0>)
    384a:	2201      	movs	r2, #1
    384c:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    384e:	2c01      	cmp	r4, #1
    3850:	d00f      	beq.n	3872 <nrfx_clock_stop+0x4a>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3852:	f242 7510 	movw	r5, #10000	; 0x2710
    3856:	e04b      	b.n	38f0 <nrfx_clock_stop+0xc8>
    p_reg->INTENCLR = mask;
    3858:	2301      	movs	r3, #1
    385a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    385e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3862:	f502 7280 	add.w	r2, r2, #256	; 0x100
    3866:	2100      	movs	r1, #0
    3868:	6011      	str	r1, [r2, #0]
    386a:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    386c:	4a2b      	ldr	r2, [pc, #172]	; (391c <nrfx_clock_stop+0xf4>)
    386e:	6013      	str	r3, [r2, #0]
}
    3870:	e7ed      	b.n	384e <nrfx_clock_stop+0x26>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3872:	4625      	mov	r5, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3874:	f242 7610 	movw	r6, #10000	; 0x2710
    3878:	e014      	b.n	38a4 <nrfx_clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    387a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    387e:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
    3882:	f005 0503 	and.w	r5, r5, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3886:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    388a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    388e:	d11c      	bne.n	38ca <nrfx_clock_stop+0xa2>
    return false;
    3890:	2300      	movs	r3, #0
    3892:	2b00      	cmp	r3, #0
    3894:	d0cd      	beq.n	3832 <nrfx_clock_stop+0xa>
    3896:	2d01      	cmp	r5, #1
    3898:	d1cb      	bne.n	3832 <nrfx_clock_stop+0xa>
    389a:	2001      	movs	r0, #1
    389c:	f003 fe6d 	bl	757a <nrfx_busy_wait>
    38a0:	3e01      	subs	r6, #1
    38a2:	d0c6      	beq.n	3832 <nrfx_clock_stop+0xa>
    switch (domain)
    38a4:	2c00      	cmp	r4, #0
    38a6:	d0e8      	beq.n	387a <nrfx_clock_stop+0x52>
    38a8:	2c01      	cmp	r4, #1
    38aa:	d001      	beq.n	38b0 <nrfx_clock_stop+0x88>
    38ac:	2300      	movs	r3, #0
    38ae:	e7f0      	b.n	3892 <nrfx_clock_stop+0x6a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    38b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    38b4:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
    38b8:	f005 0501 	and.w	r5, r5, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    38bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    38c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    38c4:	d103      	bne.n	38ce <nrfx_clock_stop+0xa6>
    return false;
    38c6:	2300      	movs	r3, #0
    38c8:	e7e3      	b.n	3892 <nrfx_clock_stop+0x6a>
                return true;
    38ca:	2301      	movs	r3, #1
    38cc:	e7e1      	b.n	3892 <nrfx_clock_stop+0x6a>
                return true;
    38ce:	2301      	movs	r3, #1
    38d0:	e7df      	b.n	3892 <nrfx_clock_stop+0x6a>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    38d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    38d6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    38da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    38de:	d116      	bne.n	390e <nrfx_clock_stop+0xe6>
    return false;
    38e0:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    38e2:	2b00      	cmp	r3, #0
    38e4:	d0a5      	beq.n	3832 <nrfx_clock_stop+0xa>
    38e6:	2001      	movs	r0, #1
    38e8:	f003 fe47 	bl	757a <nrfx_busy_wait>
    38ec:	3d01      	subs	r5, #1
    38ee:	d0a0      	beq.n	3832 <nrfx_clock_stop+0xa>
    switch (domain)
    38f0:	2c00      	cmp	r4, #0
    38f2:	d0ee      	beq.n	38d2 <nrfx_clock_stop+0xaa>
    38f4:	2c01      	cmp	r4, #1
    38f6:	d001      	beq.n	38fc <nrfx_clock_stop+0xd4>
    38f8:	2300      	movs	r3, #0
    38fa:	e7f2      	b.n	38e2 <nrfx_clock_stop+0xba>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    38fc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3900:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3904:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3908:	d103      	bne.n	3912 <nrfx_clock_stop+0xea>
    return false;
    390a:	2300      	movs	r3, #0
    390c:	e7e9      	b.n	38e2 <nrfx_clock_stop+0xba>
                return true;
    390e:	2301      	movs	r3, #1
    3910:	e7e7      	b.n	38e2 <nrfx_clock_stop+0xba>
                return true;
    3912:	2301      	movs	r3, #1
    3914:	e7e5      	b.n	38e2 <nrfx_clock_stop+0xba>
    3916:	bf00      	nop
    3918:	5000500c 	.word	0x5000500c
    391c:	50005004 	.word	0x50005004

00003920 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3920:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3922:	4b19      	ldr	r3, [pc, #100]	; (3988 <nrfx_power_clock_irq_handler+0x68>)
    3924:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3926:	b15b      	cbz	r3, 3940 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3928:	4b17      	ldr	r3, [pc, #92]	; (3988 <nrfx_power_clock_irq_handler+0x68>)
    392a:	2000      	movs	r0, #0
    392c:	6018      	str	r0, [r3, #0]
    392e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3930:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3934:	2201      	movs	r2, #1
    3936:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    393a:	4b14      	ldr	r3, [pc, #80]	; (398c <nrfx_power_clock_irq_handler+0x6c>)
    393c:	681b      	ldr	r3, [r3, #0]
    393e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3940:	4b13      	ldr	r3, [pc, #76]	; (3990 <nrfx_power_clock_irq_handler+0x70>)
    3942:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3944:	b1b3      	cbz	r3, 3974 <nrfx_power_clock_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3946:	4b12      	ldr	r3, [pc, #72]	; (3990 <nrfx_power_clock_irq_handler+0x70>)
    3948:	2200      	movs	r2, #0
    394a:	601a      	str	r2, [r3, #0]
    394c:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    394e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3952:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    3956:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    395a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    395e:	2b01      	cmp	r3, #1
    3960:	d009      	beq.n	3976 <nrfx_power_clock_irq_handler+0x56>
    p_reg->INTENCLR = mask;
    3962:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3966:	2202      	movs	r2, #2
    3968:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    396c:	4b07      	ldr	r3, [pc, #28]	; (398c <nrfx_power_clock_irq_handler+0x6c>)
    396e:	681b      	ldr	r3, [r3, #0]
    3970:	2001      	movs	r0, #1
    3972:	4798      	blx	r3
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3974:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3976:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    397a:	2202      	movs	r2, #2
    397c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3980:	3308      	adds	r3, #8
    3982:	2201      	movs	r2, #1
    3984:	601a      	str	r2, [r3, #0]
}
    3986:	e7f5      	b.n	3974 <nrfx_power_clock_irq_handler+0x54>
    3988:	50005100 	.word	0x50005100
    398c:	20022de0 	.word	0x20022de0
    3990:	50005104 	.word	0x50005104

00003994 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    3994:	4b03      	ldr	r3, [pc, #12]	; (39a4 <nvmc_readonly_mode_set+0x10>)
    3996:	2200      	movs	r2, #0
    3998:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    399c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    39a0:	4770      	bx	lr
    39a2:	bf00      	nop
    39a4:	50039000 	.word	0x50039000

000039a8 <nvmc_write_mode_set>:
    p_reg->CONFIGNS = (uint32_t)mode;
    39a8:	4b03      	ldr	r3, [pc, #12]	; (39b8 <nvmc_write_mode_set+0x10>)
    39aa:	2201      	movs	r2, #1
    39ac:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    39b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
    39b4:	4770      	bx	lr
    39b6:	bf00      	nop
    39b8:	50039000 	.word	0x50039000

000039bc <nvmc_erase_mode_set>:
    p_reg->CONFIGNS = (uint32_t)mode;
    39bc:	4b03      	ldr	r3, [pc, #12]	; (39cc <nvmc_erase_mode_set+0x10>)
    39be:	2202      	movs	r2, #2
    39c0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    39c4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
    39c8:	4770      	bx	lr
    39ca:	bf00      	nop
    39cc:	50039000 	.word	0x50039000

000039d0 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    39d0:	4b04      	ldr	r3, [pc, #16]	; (39e4 <nvmc_word_write+0x14>)
    39d2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    39d6:	f013 0f01 	tst.w	r3, #1
    39da:	d0f9      	beq.n	39d0 <nvmc_word_write>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    39dc:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    39de:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    39e2:	4770      	bx	lr
    39e4:	50039000 	.word	0x50039000

000039e8 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    39e8:	b510      	push	{r4, lr}
    39ea:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    39ec:	f003 fde2 	bl	75b4 <is_page_aligned_check>
    39f0:	b908      	cbnz	r0, 39f6 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    39f2:	4808      	ldr	r0, [pc, #32]	; (3a14 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
    39f4:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
    39f6:	f7ff ffe1 	bl	39bc <nvmc_erase_mode_set>
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    39fa:	f04f 33ff 	mov.w	r3, #4294967295
    39fe:	6023      	str	r3, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3a00:	4b05      	ldr	r3, [pc, #20]	; (3a18 <nrfx_nvmc_page_erase+0x30>)
    3a02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3a06:	f013 0f01 	tst.w	r3, #1
    3a0a:	d0f9      	beq.n	3a00 <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
    3a0c:	f7ff ffc2 	bl	3994 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
    3a10:	4802      	ldr	r0, [pc, #8]	; (3a1c <nrfx_nvmc_page_erase+0x34>)
    3a12:	e7ef      	b.n	39f4 <nrfx_nvmc_page_erase+0xc>
    3a14:	0bad000a 	.word	0x0bad000a
    3a18:	50039000 	.word	0x50039000
    3a1c:	0bad0000 	.word	0x0bad0000

00003a20 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    3a20:	6802      	ldr	r2, [r0, #0]
    3a22:	4b12      	ldr	r3, [pc, #72]	; (3a6c <verify_header+0x4c>)
    3a24:	429a      	cmp	r2, r3
    3a26:	d115      	bne.n	3a54 <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    3a28:	69c2      	ldr	r2, [r0, #28]
    3a2a:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    3a2e:	f1a3 13ef 	sub.w	r3, r3, #15663343	; 0xef00ef
    3a32:	429a      	cmp	r2, r3
    3a34:	d110      	bne.n	3a58 <verify_header+0x38>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    3a36:	6883      	ldr	r3, [r0, #8]
    3a38:	2b01      	cmp	r3, #1
    3a3a:	d80f      	bhi.n	3a5c <verify_header+0x3c>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    3a3c:	68c3      	ldr	r3, [r0, #12]
    3a3e:	b113      	cbz	r3, 3a46 <verify_header+0x26>
    3a40:	6902      	ldr	r2, [r0, #16]
    3a42:	4293      	cmp	r3, r2
    3a44:	d00c      	beq.n	3a60 <verify_header+0x40>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    3a46:	6943      	ldr	r3, [r0, #20]
    3a48:	b163      	cbz	r3, 3a64 <verify_header+0x44>
    3a4a:	6982      	ldr	r2, [r0, #24]
    3a4c:	4293      	cmp	r3, r2
    3a4e:	d00b      	beq.n	3a68 <verify_header+0x48>
        mbedtls_fprintf( stderr, "FATAL: prev_free == next_free\n" );
#endif
        return( 1 );
    }

    return( 0 );
    3a50:	2000      	movs	r0, #0
    3a52:	4770      	bx	lr
        return( 1 );
    3a54:	2001      	movs	r0, #1
    3a56:	4770      	bx	lr
        return( 1 );
    3a58:	2001      	movs	r0, #1
    3a5a:	4770      	bx	lr
        return( 1 );
    3a5c:	2001      	movs	r0, #1
    3a5e:	4770      	bx	lr
        return( 1 );
    3a60:	2001      	movs	r0, #1
    3a62:	4770      	bx	lr
    return( 0 );
    3a64:	2000      	movs	r0, #0
    3a66:	4770      	bx	lr
        return( 1 );
    3a68:	2001      	movs	r0, #1
}
    3a6a:	4770      	bx	lr
    3a6c:	ff00aa55 	.word	0xff00aa55

00003a70 <verify_chain>:

static int verify_chain( void )
{
    3a70:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    3a72:	4b11      	ldr	r3, [pc, #68]	; (3ab8 <verify_chain+0x48>)
    3a74:	689d      	ldr	r5, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    3a76:	b1b5      	cbz	r5, 3aa6 <verify_chain+0x36>
    3a78:	4628      	mov	r0, r5
    3a7a:	f7ff ffd1 	bl	3a20 <verify_header>
    3a7e:	4606      	mov	r6, r0
    3a80:	b998      	cbnz	r0, 3aaa <verify_chain+0x3a>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    3a82:	68eb      	ldr	r3, [r5, #12]
    3a84:	b113      	cbz	r3, 3a8c <verify_chain+0x1c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: verification failed: "
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    3a86:	2601      	movs	r6, #1
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    3a88:	4630      	mov	r0, r6
    3a8a:	bd70      	pop	{r4, r5, r6, pc}
    cur = heap.first->next;
    3a8c:	692c      	ldr	r4, [r5, #16]
    while( cur != NULL )
    3a8e:	2c00      	cmp	r4, #0
    3a90:	d0fa      	beq.n	3a88 <verify_chain+0x18>
        if( verify_header( cur ) != 0 )
    3a92:	4620      	mov	r0, r4
    3a94:	f7ff ffc4 	bl	3a20 <verify_header>
    3a98:	b948      	cbnz	r0, 3aae <verify_chain+0x3e>
        if( cur->prev != prv )
    3a9a:	68e3      	ldr	r3, [r4, #12]
    3a9c:	42ab      	cmp	r3, r5
    3a9e:	d108      	bne.n	3ab2 <verify_chain+0x42>
        prv = cur;
    3aa0:	4625      	mov	r5, r4
        cur = cur->next;
    3aa2:	6924      	ldr	r4, [r4, #16]
    3aa4:	e7f3      	b.n	3a8e <verify_chain+0x1e>
        return( 1 );
    3aa6:	2601      	movs	r6, #1
    3aa8:	e7ee      	b.n	3a88 <verify_chain+0x18>
    3aaa:	2601      	movs	r6, #1
    3aac:	e7ec      	b.n	3a88 <verify_chain+0x18>
            return( 1 );
    3aae:	2601      	movs	r6, #1
    3ab0:	e7ea      	b.n	3a88 <verify_chain+0x18>
            return( 1 );
    3ab2:	2601      	movs	r6, #1
    3ab4:	e7e8      	b.n	3a88 <verify_chain+0x18>
    3ab6:	bf00      	nop
    3ab8:	20022de8 	.word	0x20022de8

00003abc <buffer_alloc_free>:
static void buffer_alloc_free( void *ptr )
{
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    3abc:	2800      	cmp	r0, #0
    3abe:	f000 8092 	beq.w	3be6 <buffer_alloc_free+0x12a>
{
    3ac2:	b538      	push	{r3, r4, r5, lr}
    3ac4:	4605      	mov	r5, r0
    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    3ac6:	4b48      	ldr	r3, [pc, #288]	; (3be8 <buffer_alloc_free+0x12c>)
    3ac8:	681b      	ldr	r3, [r3, #0]
    3aca:	2b00      	cmp	r3, #0
    3acc:	d06c      	beq.n	3ba8 <buffer_alloc_free+0xec>
    3ace:	4a46      	ldr	r2, [pc, #280]	; (3be8 <buffer_alloc_free+0x12c>)
    3ad0:	6892      	ldr	r2, [r2, #8]
    3ad2:	2a00      	cmp	r2, #0
    3ad4:	d068      	beq.n	3ba8 <buffer_alloc_free+0xec>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    3ad6:	4283      	cmp	r3, r0
    3ad8:	d804      	bhi.n	3ae4 <buffer_alloc_free+0x28>
    3ada:	4a43      	ldr	r2, [pc, #268]	; (3be8 <buffer_alloc_free+0x12c>)
    3adc:	6852      	ldr	r2, [r2, #4]
    3ade:	4413      	add	r3, r2
    3ae0:	4283      	cmp	r3, r0
    3ae2:	d803      	bhi.n	3aec <buffer_alloc_free+0x30>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    3ae4:	4b41      	ldr	r3, [pc, #260]	; (3bec <buffer_alloc_free+0x130>)
    3ae6:	681b      	ldr	r3, [r3, #0]
    3ae8:	2001      	movs	r0, #1
    3aea:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    3aec:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    3af0:	4620      	mov	r0, r4
    3af2:	f7ff ff95 	bl	3a20 <verify_header>
    3af6:	b118      	cbz	r0, 3b00 <buffer_alloc_free+0x44>
        mbedtls_exit( 1 );
    3af8:	4b3c      	ldr	r3, [pc, #240]	; (3bec <buffer_alloc_free+0x130>)
    3afa:	681b      	ldr	r3, [r3, #0]
    3afc:	2001      	movs	r0, #1
    3afe:	4798      	blx	r3

    if( hdr->alloc != 1 )
    3b00:	f855 3c18 	ldr.w	r3, [r5, #-24]
    3b04:	2b01      	cmp	r3, #1
    3b06:	d003      	beq.n	3b10 <buffer_alloc_free+0x54>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    3b08:	4b38      	ldr	r3, [pc, #224]	; (3bec <buffer_alloc_free+0x130>)
    3b0a:	681b      	ldr	r3, [r3, #0]
    3b0c:	2001      	movs	r0, #1
    3b0e:	4798      	blx	r3
    }

    hdr->alloc = 0;
    3b10:	2300      	movs	r3, #0
    3b12:	f845 3c18 	str.w	r3, [r5, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    3b16:	f855 3c14 	ldr.w	r3, [r5, #-20]
    3b1a:	b1cb      	cbz	r3, 3b50 <buffer_alloc_free+0x94>
    3b1c:	689a      	ldr	r2, [r3, #8]
    3b1e:	2a00      	cmp	r2, #0
    3b20:	d143      	bne.n	3baa <buffer_alloc_free+0xee>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    3b22:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    3b26:	6859      	ldr	r1, [r3, #4]
    3b28:	440a      	add	r2, r1
    3b2a:	3220      	adds	r2, #32
    3b2c:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    3b2e:	f855 3c14 	ldr.w	r3, [r5, #-20]
    3b32:	f855 2c10 	ldr.w	r2, [r5, #-16]
    3b36:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    3b38:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if( hdr->next != NULL )
    3b3c:	692b      	ldr	r3, [r5, #16]
    3b3e:	b103      	cbz	r3, 3b42 <buffer_alloc_free+0x86>
            hdr->next->prev = hdr;
    3b40:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3b42:	2220      	movs	r2, #32
    3b44:	2100      	movs	r1, #0
    3b46:	4620      	mov	r0, r4
    3b48:	f003 fa1b 	bl	6f82 <memset>
        old = hdr;
    3b4c:	4623      	mov	r3, r4
        hdr = hdr->prev;
    3b4e:	462c      	mov	r4, r5
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3b50:	6925      	ldr	r5, [r4, #16]
    3b52:	b31d      	cbz	r5, 3b9c <buffer_alloc_free+0xe0>
    3b54:	68aa      	ldr	r2, [r5, #8]
    3b56:	bb0a      	cbnz	r2, 3b9c <buffer_alloc_free+0xe0>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    3b58:	686b      	ldr	r3, [r5, #4]
    3b5a:	6862      	ldr	r2, [r4, #4]
    3b5c:	4413      	add	r3, r2
    3b5e:	3320      	adds	r3, #32
    3b60:	6063      	str	r3, [r4, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    3b62:	692b      	ldr	r3, [r5, #16]
    3b64:	6123      	str	r3, [r4, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3b66:	6963      	ldr	r3, [r4, #20]
    3b68:	b30b      	cbz	r3, 3bae <buffer_alloc_free+0xf2>
        {
            if( hdr->prev_free != NULL )
    3b6a:	b323      	cbz	r3, 3bb6 <buffer_alloc_free+0xfa>
                hdr->prev_free->next_free = hdr->next_free;
    3b6c:	69a2      	ldr	r2, [r4, #24]
    3b6e:	619a      	str	r2, [r3, #24]
            else
                heap.first_free = hdr->next_free;

            if( hdr->next_free != NULL )
    3b70:	69a3      	ldr	r3, [r4, #24]
    3b72:	b10b      	cbz	r3, 3b78 <buffer_alloc_free+0xbc>
                hdr->next_free->prev_free = hdr->prev_free;
    3b74:	6962      	ldr	r2, [r4, #20]
    3b76:	615a      	str	r2, [r3, #20]
        }

        hdr->prev_free = old->prev_free;
    3b78:	696b      	ldr	r3, [r5, #20]
    3b7a:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
    3b7c:	69aa      	ldr	r2, [r5, #24]
    3b7e:	61a2      	str	r2, [r4, #24]

        if( hdr->prev_free != NULL )
    3b80:	b1eb      	cbz	r3, 3bbe <buffer_alloc_free+0x102>
            hdr->prev_free->next_free = hdr;
    3b82:	619c      	str	r4, [r3, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    3b84:	69a3      	ldr	r3, [r4, #24]
    3b86:	b103      	cbz	r3, 3b8a <buffer_alloc_free+0xce>
            hdr->next_free->prev_free = hdr;
    3b88:	615c      	str	r4, [r3, #20]

        if( hdr->next != NULL )
    3b8a:	6923      	ldr	r3, [r4, #16]
    3b8c:	b103      	cbz	r3, 3b90 <buffer_alloc_free+0xd4>
            hdr->next->prev = hdr;
    3b8e:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3b90:	2220      	movs	r2, #32
    3b92:	2100      	movs	r1, #0
    3b94:	4628      	mov	r0, r5
    3b96:	f003 f9f4 	bl	6f82 <memset>
        old = hdr->next;
    3b9a:	462b      	mov	r3, r5
    }

    // Prepend to free_list if we have not merged
    // (Does not have to stay in same order as prev / next list)
    //
    if( old == NULL )
    3b9c:	b193      	cbz	r3, 3bc4 <buffer_alloc_free+0x108>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3b9e:	4b12      	ldr	r3, [pc, #72]	; (3be8 <buffer_alloc_free+0x12c>)
    3ba0:	691b      	ldr	r3, [r3, #16]
    3ba2:	f013 0f02 	tst.w	r3, #2
    3ba6:	d115      	bne.n	3bd4 <buffer_alloc_free+0x118>
        mbedtls_exit( 1 );
}
    3ba8:	bd38      	pop	{r3, r4, r5, pc}
    memory_header *hdr, *old = NULL;
    3baa:	2300      	movs	r3, #0
    3bac:	e7d0      	b.n	3b50 <buffer_alloc_free+0x94>
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3bae:	69a2      	ldr	r2, [r4, #24]
    3bb0:	2a00      	cmp	r2, #0
    3bb2:	d1da      	bne.n	3b6a <buffer_alloc_free+0xae>
    3bb4:	e7e0      	b.n	3b78 <buffer_alloc_free+0xbc>
                heap.first_free = hdr->next_free;
    3bb6:	69a2      	ldr	r2, [r4, #24]
    3bb8:	4b0b      	ldr	r3, [pc, #44]	; (3be8 <buffer_alloc_free+0x12c>)
    3bba:	60da      	str	r2, [r3, #12]
    3bbc:	e7d8      	b.n	3b70 <buffer_alloc_free+0xb4>
            heap.first_free = hdr;
    3bbe:	4b0a      	ldr	r3, [pc, #40]	; (3be8 <buffer_alloc_free+0x12c>)
    3bc0:	60dc      	str	r4, [r3, #12]
    3bc2:	e7df      	b.n	3b84 <buffer_alloc_free+0xc8>
        hdr->next_free = heap.first_free;
    3bc4:	4b08      	ldr	r3, [pc, #32]	; (3be8 <buffer_alloc_free+0x12c>)
    3bc6:	68db      	ldr	r3, [r3, #12]
    3bc8:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    3bca:	b103      	cbz	r3, 3bce <buffer_alloc_free+0x112>
            heap.first_free->prev_free = hdr;
    3bcc:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    3bce:	4b06      	ldr	r3, [pc, #24]	; (3be8 <buffer_alloc_free+0x12c>)
    3bd0:	60dc      	str	r4, [r3, #12]
    3bd2:	e7e4      	b.n	3b9e <buffer_alloc_free+0xe2>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3bd4:	f7ff ff4c 	bl	3a70 <verify_chain>
    3bd8:	2800      	cmp	r0, #0
    3bda:	d0e5      	beq.n	3ba8 <buffer_alloc_free+0xec>
        mbedtls_exit( 1 );
    3bdc:	4b03      	ldr	r3, [pc, #12]	; (3bec <buffer_alloc_free+0x130>)
    3bde:	681b      	ldr	r3, [r3, #0]
    3be0:	2001      	movs	r0, #1
    3be2:	4798      	blx	r3
    3be4:	e7e0      	b.n	3ba8 <buffer_alloc_free+0xec>
    3be6:	4770      	bx	lr
    3be8:	20022de8 	.word	0x20022de8
    3bec:	2002008c 	.word	0x2002008c

00003bf0 <buffer_alloc_calloc>:
{
    3bf0:	b570      	push	{r4, r5, r6, lr}
    memory_header *new, *cur = heap.first_free;
    3bf2:	4b4f      	ldr	r3, [pc, #316]	; (3d30 <buffer_alloc_calloc+0x140>)
    3bf4:	68dc      	ldr	r4, [r3, #12]
    if( heap.buf == NULL || heap.first == NULL )
    3bf6:	681d      	ldr	r5, [r3, #0]
    3bf8:	2d00      	cmp	r5, #0
    3bfa:	d05a      	beq.n	3cb2 <buffer_alloc_calloc+0xc2>
    3bfc:	689d      	ldr	r5, [r3, #8]
    3bfe:	2d00      	cmp	r5, #0
    3c00:	d057      	beq.n	3cb2 <buffer_alloc_calloc+0xc2>
    original_len = len = n * size;
    3c02:	fb01 f600 	mul.w	r6, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    3c06:	2800      	cmp	r0, #0
    3c08:	f000 8088 	beq.w	3d1c <buffer_alloc_calloc+0x12c>
    3c0c:	2900      	cmp	r1, #0
    3c0e:	f000 8087 	beq.w	3d20 <buffer_alloc_calloc+0x130>
    3c12:	fbb6 f0f0 	udiv	r0, r6, r0
    3c16:	4288      	cmp	r0, r1
    3c18:	f040 8084 	bne.w	3d24 <buffer_alloc_calloc+0x134>
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3c1c:	f116 0f04 	cmn.w	r6, #4
    3c20:	f200 8082 	bhi.w	3d28 <buffer_alloc_calloc+0x138>
    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3c24:	f016 0f03 	tst.w	r6, #3
    3c28:	d008      	beq.n	3c3c <buffer_alloc_calloc+0x4c>
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3c2a:	f026 0503 	bic.w	r5, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3c2e:	3504      	adds	r5, #4
    while( cur != NULL )
    3c30:	b134      	cbz	r4, 3c40 <buffer_alloc_calloc+0x50>
        if( cur->size >= len )
    3c32:	6863      	ldr	r3, [r4, #4]
    3c34:	42ab      	cmp	r3, r5
    3c36:	d203      	bcs.n	3c40 <buffer_alloc_calloc+0x50>
        cur = cur->next_free;
    3c38:	69a4      	ldr	r4, [r4, #24]
    3c3a:	e7f9      	b.n	3c30 <buffer_alloc_calloc+0x40>
    original_len = len = n * size;
    3c3c:	4635      	mov	r5, r6
    3c3e:	e7f7      	b.n	3c30 <buffer_alloc_calloc+0x40>
    if( cur == NULL )
    3c40:	2c00      	cmp	r4, #0
    3c42:	d073      	beq.n	3d2c <buffer_alloc_calloc+0x13c>
    if( cur->alloc != 0 )
    3c44:	68a3      	ldr	r3, [r4, #8]
    3c46:	b11b      	cbz	r3, 3c50 <buffer_alloc_calloc+0x60>
        mbedtls_exit( 1 );
    3c48:	4b3a      	ldr	r3, [pc, #232]	; (3d34 <buffer_alloc_calloc+0x144>)
    3c4a:	681b      	ldr	r3, [r3, #0]
    3c4c:	2001      	movs	r0, #1
    3c4e:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    3c50:	6862      	ldr	r2, [r4, #4]
    3c52:	1b52      	subs	r2, r2, r5
    3c54:	2a23      	cmp	r2, #35	; 0x23
    3c56:	d92e      	bls.n	3cb6 <buffer_alloc_calloc+0xc6>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    3c58:	f105 0120 	add.w	r1, r5, #32
    3c5c:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    3c5e:	3a20      	subs	r2, #32
    3c60:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    3c62:	2200      	movs	r2, #0
    3c64:	609a      	str	r2, [r3, #8]
    new->prev = cur;
    3c66:	60dc      	str	r4, [r3, #12]
    new->next = cur->next;
    3c68:	6922      	ldr	r2, [r4, #16]
    3c6a:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    3c6c:	4832      	ldr	r0, [pc, #200]	; (3d38 <buffer_alloc_calloc+0x148>)
    3c6e:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    3c70:	4932      	ldr	r1, [pc, #200]	; (3d3c <buffer_alloc_calloc+0x14c>)
    3c72:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    3c74:	b102      	cbz	r2, 3c78 <buffer_alloc_calloc+0x88>
        new->next->prev = new;
    3c76:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    3c78:	6962      	ldr	r2, [r4, #20]
    3c7a:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    3c7c:	69a1      	ldr	r1, [r4, #24]
    3c7e:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    3c80:	2a00      	cmp	r2, #0
    3c82:	d03f      	beq.n	3d04 <buffer_alloc_calloc+0x114>
        new->prev_free->next_free = new;
    3c84:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    3c86:	699a      	ldr	r2, [r3, #24]
    3c88:	b102      	cbz	r2, 3c8c <buffer_alloc_calloc+0x9c>
        new->next_free->prev_free = new;
    3c8a:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    3c8c:	2201      	movs	r2, #1
    3c8e:	60a2      	str	r2, [r4, #8]
    cur->size = len;
    3c90:	6065      	str	r5, [r4, #4]
    cur->next = new;
    3c92:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    3c94:	2300      	movs	r3, #0
    3c96:	6163      	str	r3, [r4, #20]
    cur->next_free = NULL;
    3c98:	61a3      	str	r3, [r4, #24]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3c9a:	4b25      	ldr	r3, [pc, #148]	; (3d30 <buffer_alloc_calloc+0x140>)
    3c9c:	691b      	ldr	r3, [r3, #16]
    3c9e:	f013 0f01 	tst.w	r3, #1
    3ca2:	d132      	bne.n	3d0a <buffer_alloc_calloc+0x11a>
    ret = (unsigned char *) cur + sizeof( memory_header );
    3ca4:	f104 0520 	add.w	r5, r4, #32
    memset( ret, 0, original_len );
    3ca8:	4632      	mov	r2, r6
    3caa:	2100      	movs	r1, #0
    3cac:	4628      	mov	r0, r5
    3cae:	f003 f968 	bl	6f82 <memset>
}
    3cb2:	4628      	mov	r0, r5
    3cb4:	bd70      	pop	{r4, r5, r6, pc}
        cur->alloc = 1;
    3cb6:	2301      	movs	r3, #1
    3cb8:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    3cba:	6963      	ldr	r3, [r4, #20]
    3cbc:	b1ab      	cbz	r3, 3cea <buffer_alloc_calloc+0xfa>
            cur->prev_free->next_free = cur->next_free;
    3cbe:	69a2      	ldr	r2, [r4, #24]
    3cc0:	619a      	str	r2, [r3, #24]
        if( cur->next_free != NULL )
    3cc2:	69a3      	ldr	r3, [r4, #24]
    3cc4:	b10b      	cbz	r3, 3cca <buffer_alloc_calloc+0xda>
            cur->next_free->prev_free = cur->prev_free;
    3cc6:	6962      	ldr	r2, [r4, #20]
    3cc8:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    3cca:	2300      	movs	r3, #0
    3ccc:	6163      	str	r3, [r4, #20]
        cur->next_free = NULL;
    3cce:	61a3      	str	r3, [r4, #24]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3cd0:	4b17      	ldr	r3, [pc, #92]	; (3d30 <buffer_alloc_calloc+0x140>)
    3cd2:	691b      	ldr	r3, [r3, #16]
    3cd4:	f013 0f01 	tst.w	r3, #1
    3cd8:	d10b      	bne.n	3cf2 <buffer_alloc_calloc+0x102>
        ret = (unsigned char *) cur + sizeof( memory_header );
    3cda:	f104 0520 	add.w	r5, r4, #32
        memset( ret, 0, original_len );
    3cde:	4632      	mov	r2, r6
    3ce0:	2100      	movs	r1, #0
    3ce2:	4628      	mov	r0, r5
    3ce4:	f003 f94d 	bl	6f82 <memset>
        return( ret );
    3ce8:	e7e3      	b.n	3cb2 <buffer_alloc_calloc+0xc2>
            heap.first_free = cur->next_free;
    3cea:	69a2      	ldr	r2, [r4, #24]
    3cec:	4b10      	ldr	r3, [pc, #64]	; (3d30 <buffer_alloc_calloc+0x140>)
    3cee:	60da      	str	r2, [r3, #12]
    3cf0:	e7e7      	b.n	3cc2 <buffer_alloc_calloc+0xd2>
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3cf2:	f7ff febd 	bl	3a70 <verify_chain>
    3cf6:	2800      	cmp	r0, #0
    3cf8:	d0ef      	beq.n	3cda <buffer_alloc_calloc+0xea>
            mbedtls_exit( 1 );
    3cfa:	4b0e      	ldr	r3, [pc, #56]	; (3d34 <buffer_alloc_calloc+0x144>)
    3cfc:	681b      	ldr	r3, [r3, #0]
    3cfe:	2001      	movs	r0, #1
    3d00:	4798      	blx	r3
    3d02:	e7ea      	b.n	3cda <buffer_alloc_calloc+0xea>
        heap.first_free = new;
    3d04:	4a0a      	ldr	r2, [pc, #40]	; (3d30 <buffer_alloc_calloc+0x140>)
    3d06:	60d3      	str	r3, [r2, #12]
    3d08:	e7bd      	b.n	3c86 <buffer_alloc_calloc+0x96>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3d0a:	f7ff feb1 	bl	3a70 <verify_chain>
    3d0e:	2800      	cmp	r0, #0
    3d10:	d0c8      	beq.n	3ca4 <buffer_alloc_calloc+0xb4>
        mbedtls_exit( 1 );
    3d12:	4b08      	ldr	r3, [pc, #32]	; (3d34 <buffer_alloc_calloc+0x144>)
    3d14:	681b      	ldr	r3, [r3, #0]
    3d16:	2001      	movs	r0, #1
    3d18:	4798      	blx	r3
    3d1a:	e7c3      	b.n	3ca4 <buffer_alloc_calloc+0xb4>
        return( NULL );
    3d1c:	2500      	movs	r5, #0
    3d1e:	e7c8      	b.n	3cb2 <buffer_alloc_calloc+0xc2>
    3d20:	2500      	movs	r5, #0
    3d22:	e7c6      	b.n	3cb2 <buffer_alloc_calloc+0xc2>
    3d24:	2500      	movs	r5, #0
    3d26:	e7c4      	b.n	3cb2 <buffer_alloc_calloc+0xc2>
        return( NULL );
    3d28:	2500      	movs	r5, #0
    3d2a:	e7c2      	b.n	3cb2 <buffer_alloc_calloc+0xc2>
        return( NULL );
    3d2c:	4625      	mov	r5, r4
    3d2e:	e7c0      	b.n	3cb2 <buffer_alloc_calloc+0xc2>
    3d30:	20022de8 	.word	0x20022de8
    3d34:	2002008c 	.word	0x2002008c
    3d38:	ff00aa55 	.word	0xff00aa55
    3d3c:	ee119966 	.word	0xee119966

00003d40 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    3d40:	b538      	push	{r3, r4, r5, lr}
    3d42:	4605      	mov	r5, r0
    3d44:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3d46:	2214      	movs	r2, #20
    3d48:	2100      	movs	r1, #0
    3d4a:	4813      	ldr	r0, [pc, #76]	; (3d98 <mbedtls_memory_buffer_alloc_init+0x58>)
    3d4c:	f003 f919 	bl	6f82 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    3d50:	4912      	ldr	r1, [pc, #72]	; (3d9c <mbedtls_memory_buffer_alloc_init+0x5c>)
    3d52:	4813      	ldr	r0, [pc, #76]	; (3da0 <mbedtls_memory_buffer_alloc_init+0x60>)
    3d54:	f000 f838 	bl	3dc8 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3d58:	2c23      	cmp	r4, #35	; 0x23
    3d5a:	d91c      	bls.n	3d96 <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3d5c:	f015 0303 	ands.w	r3, r5, #3
    3d60:	d004      	beq.n	3d6c <mbedtls_memory_buffer_alloc_init+0x2c>
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3d62:	441c      	add	r4, r3
    3d64:	3c04      	subs	r4, #4
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3d66:	f1c3 0304 	rsb	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3d6a:	441d      	add	r5, r3
    }

    memset( buf, 0, len );
    3d6c:	4622      	mov	r2, r4
    3d6e:	2100      	movs	r1, #0
    3d70:	4628      	mov	r0, r5
    3d72:	f003 f906 	bl	6f82 <memset>

    heap.buf = buf;
    3d76:	4b08      	ldr	r3, [pc, #32]	; (3d98 <mbedtls_memory_buffer_alloc_init+0x58>)
    3d78:	601d      	str	r5, [r3, #0]
    heap.len = len;
    3d7a:	605c      	str	r4, [r3, #4]

    heap.first = (memory_header *)buf;
    3d7c:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    3d7e:	3c20      	subs	r4, #32
    3d80:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    3d82:	689a      	ldr	r2, [r3, #8]
    3d84:	4907      	ldr	r1, [pc, #28]	; (3da4 <mbedtls_memory_buffer_alloc_init+0x64>)
    3d86:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    3d88:	689a      	ldr	r2, [r3, #8]
    3d8a:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    3d8e:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    3d92:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    3d94:	60da      	str	r2, [r3, #12]
}
    3d96:	bd38      	pop	{r3, r4, r5, pc}
    3d98:	20022de8 	.word	0x20022de8
    3d9c:	00003abd 	.word	0x00003abd
    3da0:	00003bf1 	.word	0x00003bf1
    3da4:	ff00aa55 	.word	0xff00aa55

00003da8 <mbedtls_calloc>:

static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    3da8:	b508      	push	{r3, lr}
    return (*mbedtls_calloc_func)( nmemb, size );
    3daa:	4b02      	ldr	r3, [pc, #8]	; (3db4 <mbedtls_calloc+0xc>)
    3dac:	681b      	ldr	r3, [r3, #0]
    3dae:	4798      	blx	r3
}
    3db0:	bd08      	pop	{r3, pc}
    3db2:	bf00      	nop
    3db4:	20020088 	.word	0x20020088

00003db8 <mbedtls_free>:

void mbedtls_free( void * ptr )
{
    3db8:	b508      	push	{r3, lr}
    (*mbedtls_free_func)( ptr );
    3dba:	4b02      	ldr	r3, [pc, #8]	; (3dc4 <mbedtls_free+0xc>)
    3dbc:	681b      	ldr	r3, [r3, #0]
    3dbe:	4798      	blx	r3
}
    3dc0:	bd08      	pop	{r3, pc}
    3dc2:	bf00      	nop
    3dc4:	20020090 	.word	0x20020090

00003dc8 <mbedtls_platform_set_calloc_free>:

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    3dc8:	4b02      	ldr	r3, [pc, #8]	; (3dd4 <mbedtls_platform_set_calloc_free+0xc>)
    3dca:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    3dcc:	4b02      	ldr	r3, [pc, #8]	; (3dd8 <mbedtls_platform_set_calloc_free+0x10>)
    3dce:	6019      	str	r1, [r3, #0]
    return( 0 );
}
    3dd0:	2000      	movs	r0, #0
    3dd2:	4770      	bx	lr
    3dd4:	20020088 	.word	0x20020088
    3dd8:	20020090 	.word	0x20020090

00003ddc <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    3ddc:	b131      	cbz	r1, 3dec <mbedtls_platform_zeroize+0x10>
{
    3dde:	b508      	push	{r3, lr}
    3de0:	460a      	mov	r2, r1
        memset_func( buf, 0, len );
    3de2:	4b03      	ldr	r3, [pc, #12]	; (3df0 <mbedtls_platform_zeroize+0x14>)
    3de4:	681b      	ldr	r3, [r3, #0]
    3de6:	2100      	movs	r1, #0
    3de8:	4798      	blx	r3
}
    3dea:	bd08      	pop	{r3, pc}
    3dec:	4770      	bx	lr
    3dee:	bf00      	nop
    3df0:	20020094 	.word	0x20020094

00003df4 <rsa_check_context>:
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
                              int blinding_needed )
{
    3df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3df6:	4604      	mov	r4, r0
    3df8:	460d      	mov	r5, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3dfa:	6847      	ldr	r7, [r0, #4]
    3dfc:	f100 0608 	add.w	r6, r0, #8
    3e00:	4630      	mov	r0, r6
    3e02:	f003 fff4 	bl	7dee <mbedtls_mpi_size>
    3e06:	4287      	cmp	r7, r0
    3e08:	d151      	bne.n	3eae <rsa_check_context+0xba>
        ctx->len > MBEDTLS_MPI_MAX_SIZE )
    3e0a:	6863      	ldr	r3, [r4, #4]
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3e10:	d84f      	bhi.n	3eb2 <rsa_check_context+0xbe>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3e12:	2100      	movs	r1, #0
    3e14:	4630      	mov	r0, r6
    3e16:	f004 f96d 	bl	80f4 <mbedtls_mpi_cmp_int>
    3e1a:	2800      	cmp	r0, #0
    3e1c:	dd2a      	ble.n	3e74 <rsa_check_context+0x80>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    3e1e:	2100      	movs	r1, #0
    3e20:	4630      	mov	r0, r6
    3e22:	f003 ffbc 	bl	7d9e <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3e26:	b328      	cbz	r0, 3e74 <rsa_check_context+0x80>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    3e28:	b1cd      	cbz	r5, 3e5e <rsa_check_context+0x6a>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3e2a:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    3e2e:	2100      	movs	r1, #0
    3e30:	4630      	mov	r0, r6
    3e32:	f004 f95f 	bl	80f4 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3e36:	2800      	cmp	r0, #0
    3e38:	dd1e      	ble.n	3e78 <rsa_check_context+0x84>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3e3a:	2100      	movs	r1, #0
    3e3c:	4630      	mov	r0, r6
    3e3e:	f003 ffae 	bl	7d9e <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3e42:	b1c8      	cbz	r0, 3e78 <rsa_check_context+0x84>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3e44:	f104 0638 	add.w	r6, r4, #56	; 0x38
    3e48:	2100      	movs	r1, #0
    3e4a:	4630      	mov	r0, r6
    3e4c:	f004 f952 	bl	80f4 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3e50:	2800      	cmp	r0, #0
    3e52:	dd11      	ble.n	3e78 <rsa_check_context+0x84>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    3e54:	2100      	movs	r1, #0
    3e56:	4630      	mov	r0, r6
    3e58:	f003 ffa1 	bl	7d9e <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3e5c:	b160      	cbz	r0, 3e78 <rsa_check_context+0x84>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    3e5e:	2100      	movs	r1, #0
    3e60:	f104 0014 	add.w	r0, r4, #20
    3e64:	f004 f946 	bl	80f4 <mbedtls_mpi_cmp_int>
    3e68:	2800      	cmp	r0, #0
    3e6a:	dd24      	ble.n	3eb6 <rsa_check_context+0xc2>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
    3e6c:	b935      	cbnz	r5, 3e7c <rsa_check_context+0x88>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
    3e6e:	b9ad      	cbnz	r5, 3e9c <rsa_check_context+0xa8>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
}
    3e70:	4628      	mov	r0, r5
    3e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3e74:	4d12      	ldr	r5, [pc, #72]	; (3ec0 <rsa_check_context+0xcc>)
    3e76:	e7fb      	b.n	3e70 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3e78:	4d11      	ldr	r5, [pc, #68]	; (3ec0 <rsa_check_context+0xcc>)
    3e7a:	e7f9      	b.n	3e70 <rsa_check_context+0x7c>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3e7c:	2100      	movs	r1, #0
    3e7e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3e82:	f004 f937 	bl	80f4 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3e86:	2800      	cmp	r0, #0
    3e88:	dd06      	ble.n	3e98 <rsa_check_context+0xa4>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    3e8a:	2100      	movs	r1, #0
    3e8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3e90:	f004 f930 	bl	80f4 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3e94:	2800      	cmp	r0, #0
    3e96:	dcea      	bgt.n	3e6e <rsa_check_context+0x7a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3e98:	4d09      	ldr	r5, [pc, #36]	; (3ec0 <rsa_check_context+0xcc>)
    3e9a:	e7e9      	b.n	3e70 <rsa_check_context+0x7c>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    3e9c:	2100      	movs	r1, #0
    3e9e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3ea2:	f004 f927 	bl	80f4 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3ea6:	2800      	cmp	r0, #0
    3ea8:	dd07      	ble.n	3eba <rsa_check_context+0xc6>
    return( 0 );
    3eaa:	2500      	movs	r5, #0
    3eac:	e7e0      	b.n	3e70 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3eae:	4d04      	ldr	r5, [pc, #16]	; (3ec0 <rsa_check_context+0xcc>)
    3eb0:	e7de      	b.n	3e70 <rsa_check_context+0x7c>
    3eb2:	4d03      	ldr	r5, [pc, #12]	; (3ec0 <rsa_check_context+0xcc>)
    3eb4:	e7dc      	b.n	3e70 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3eb6:	4d02      	ldr	r5, [pc, #8]	; (3ec0 <rsa_check_context+0xcc>)
    3eb8:	e7da      	b.n	3e70 <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3eba:	4d01      	ldr	r5, [pc, #4]	; (3ec0 <rsa_check_context+0xcc>)
    3ebc:	e7d8      	b.n	3e70 <rsa_check_context+0x7c>
    3ebe:	bf00      	nop
    3ec0:	ffffbf80 	.word	0xffffbf80

00003ec4 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    3ec4:	b570      	push	{r4, r5, r6, lr}
    3ec6:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3ec8:	2200      	movs	r2, #0
    3eca:	4611      	mov	r1, r2
    3ecc:	f7ff ff92 	bl	3df4 <rsa_check_context>
    3ed0:	b9e0      	cbnz	r0, 3f0c <mbedtls_rsa_check_pubkey+0x48>
    3ed2:	4606      	mov	r6, r0
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    3ed4:	f104 0508 	add.w	r5, r4, #8
    3ed8:	4628      	mov	r0, r5
    3eda:	f003 ff71 	bl	7dc0 <mbedtls_mpi_bitlen>
    3ede:	287f      	cmp	r0, #127	; 0x7f
    3ee0:	d916      	bls.n	3f10 <mbedtls_rsa_check_pubkey+0x4c>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3ee2:	3414      	adds	r4, #20
    3ee4:	2100      	movs	r1, #0
    3ee6:	4620      	mov	r0, r4
    3ee8:	f003 ff59 	bl	7d9e <mbedtls_mpi_get_bit>
    3eec:	b160      	cbz	r0, 3f08 <mbedtls_rsa_check_pubkey+0x44>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3eee:	4620      	mov	r0, r4
    3ef0:	f003 ff66 	bl	7dc0 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3ef4:	2801      	cmp	r0, #1
    3ef6:	d907      	bls.n	3f08 <mbedtls_rsa_check_pubkey+0x44>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    3ef8:	4629      	mov	r1, r5
    3efa:	4620      	mov	r0, r4
    3efc:	f004 f8b2 	bl	8064 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3f00:	2800      	cmp	r0, #0
    3f02:	da01      	bge.n	3f08 <mbedtls_rsa_check_pubkey+0x44>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    3f04:	4630      	mov	r0, r6
    3f06:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3f08:	4e02      	ldr	r6, [pc, #8]	; (3f14 <mbedtls_rsa_check_pubkey+0x50>)
    3f0a:	e7fb      	b.n	3f04 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3f0c:	4e01      	ldr	r6, [pc, #4]	; (3f14 <mbedtls_rsa_check_pubkey+0x50>)
    3f0e:	e7f9      	b.n	3f04 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3f10:	4e00      	ldr	r6, [pc, #0]	; (3f14 <mbedtls_rsa_check_pubkey+0x50>)
    3f12:	e7f7      	b.n	3f04 <mbedtls_rsa_check_pubkey+0x40>
    3f14:	ffffbe00 	.word	0xffffbe00

00003f18 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    3f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f1a:	b087      	sub	sp, #28
    3f1c:	4604      	mov	r4, r0
    3f1e:	460d      	mov	r5, r1
    3f20:	4616      	mov	r6, r2
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3f22:	2200      	movs	r2, #0
    3f24:	4611      	mov	r1, r2
    3f26:	f7ff ff65 	bl	3df4 <rsa_check_context>
    3f2a:	bb98      	cbnz	r0, 3f94 <mbedtls_rsa_public+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    3f2c:	a803      	add	r0, sp, #12
    3f2e:	f003 fea5 	bl	7c7c <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    3f32:	6862      	ldr	r2, [r4, #4]
    3f34:	4629      	mov	r1, r5
    3f36:	a803      	add	r0, sp, #12
    3f38:	f003 ff5f 	bl	7dfa <mbedtls_mpi_read_binary>
    3f3c:	4605      	mov	r5, r0
    3f3e:	b130      	cbz	r0, 3f4e <mbedtls_rsa_public+0x36>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    3f40:	a803      	add	r0, sp, #12
    3f42:	f003 fea1 	bl	7c88 <mbedtls_mpi_free>

    if( ret != 0 )
    3f46:	bb15      	cbnz	r5, 3f8e <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
    3f48:	4628      	mov	r0, r5
    3f4a:	b007      	add	sp, #28
    3f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    3f4e:	f104 0508 	add.w	r5, r4, #8
    3f52:	4629      	mov	r1, r5
    3f54:	a803      	add	r0, sp, #12
    3f56:	f004 f885 	bl	8064 <mbedtls_mpi_cmp_mpi>
    3f5a:	2800      	cmp	r0, #0
    3f5c:	db02      	blt.n	3f64 <mbedtls_rsa_public+0x4c>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    3f5e:	f06f 0503 	mvn.w	r5, #3
    3f62:	e7ed      	b.n	3f40 <mbedtls_rsa_public+0x28>
    olen = ctx->len;
    3f64:	6867      	ldr	r7, [r4, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3f66:	f104 0368 	add.w	r3, r4, #104	; 0x68
    3f6a:	9300      	str	r3, [sp, #0]
    3f6c:	462b      	mov	r3, r5
    3f6e:	f104 0214 	add.w	r2, r4, #20
    3f72:	a903      	add	r1, sp, #12
    3f74:	4608      	mov	r0, r1
    3f76:	f004 fc32 	bl	87de <mbedtls_mpi_exp_mod>
    3f7a:	4605      	mov	r5, r0
    3f7c:	2800      	cmp	r0, #0
    3f7e:	d1df      	bne.n	3f40 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    3f80:	463a      	mov	r2, r7
    3f82:	4631      	mov	r1, r6
    3f84:	a803      	add	r0, sp, #12
    3f86:	f003 ff67 	bl	7e58 <mbedtls_mpi_write_binary>
    3f8a:	4605      	mov	r5, r0
cleanup:
    3f8c:	e7d8      	b.n	3f40 <mbedtls_rsa_public+0x28>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
    3f8e:	f5a5 4585 	sub.w	r5, r5, #17024	; 0x4280
    3f92:	e7d9      	b.n	3f48 <mbedtls_rsa_public+0x30>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3f94:	4d00      	ldr	r5, [pc, #0]	; (3f98 <mbedtls_rsa_public+0x80>)
    3f96:	e7d7      	b.n	3f48 <mbedtls_rsa_public+0x30>
    3f98:	ffffbf80 	.word	0xffffbf80

00003f9c <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    3f9c:	2300      	movs	r3, #0
    3f9e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    3fa0:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    3fa2:	460b      	mov	r3, r1
    3fa4:	b9b9      	cbnz	r1, 3fd6 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
    3fa6:	4a19      	ldr	r2, [pc, #100]	; (400c <mbedtls_sha256_starts_ret+0x70>)
    3fa8:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    3faa:	4a19      	ldr	r2, [pc, #100]	; (4010 <mbedtls_sha256_starts_ret+0x74>)
    3fac:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    3fae:	4a19      	ldr	r2, [pc, #100]	; (4014 <mbedtls_sha256_starts_ret+0x78>)
    3fb0:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    3fb2:	4a19      	ldr	r2, [pc, #100]	; (4018 <mbedtls_sha256_starts_ret+0x7c>)
    3fb4:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    3fb6:	4a19      	ldr	r2, [pc, #100]	; (401c <mbedtls_sha256_starts_ret+0x80>)
    3fb8:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    3fba:	4a19      	ldr	r2, [pc, #100]	; (4020 <mbedtls_sha256_starts_ret+0x84>)
    3fbc:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    3fbe:	4a19      	ldr	r2, [pc, #100]	; (4024 <mbedtls_sha256_starts_ret+0x88>)
    3fc0:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    3fc2:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    3fc6:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    3fca:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    3fce:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
    3fd0:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    3fd2:	2000      	movs	r0, #0
    3fd4:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
    3fd6:	4a14      	ldr	r2, [pc, #80]	; (4028 <mbedtls_sha256_starts_ret+0x8c>)
    3fd8:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    3fda:	4a14      	ldr	r2, [pc, #80]	; (402c <mbedtls_sha256_starts_ret+0x90>)
    3fdc:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    3fde:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    3fe2:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    3fe6:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    3fea:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    3fec:	4a10      	ldr	r2, [pc, #64]	; (4030 <mbedtls_sha256_starts_ret+0x94>)
    3fee:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    3ff0:	4a10      	ldr	r2, [pc, #64]	; (4034 <mbedtls_sha256_starts_ret+0x98>)
    3ff2:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    3ff4:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    3ff8:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    3ffc:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    4000:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    4002:	4a0d      	ldr	r2, [pc, #52]	; (4038 <mbedtls_sha256_starts_ret+0x9c>)
    4004:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    4006:	4a0d      	ldr	r2, [pc, #52]	; (403c <mbedtls_sha256_starts_ret+0xa0>)
    4008:	6242      	str	r2, [r0, #36]	; 0x24
    400a:	e7e1      	b.n	3fd0 <mbedtls_sha256_starts_ret+0x34>
    400c:	6a09e667 	.word	0x6a09e667
    4010:	bb67ae85 	.word	0xbb67ae85
    4014:	3c6ef372 	.word	0x3c6ef372
    4018:	a54ff53a 	.word	0xa54ff53a
    401c:	510e527f 	.word	0x510e527f
    4020:	9b05688c 	.word	0x9b05688c
    4024:	1f83d9ab 	.word	0x1f83d9ab
    4028:	c1059ed8 	.word	0xc1059ed8
    402c:	367cd507 	.word	0x367cd507
    4030:	f70e5939 	.word	0xf70e5939
    4034:	ffc00b31 	.word	0xffc00b31
    4038:	64f98fa7 	.word	0x64f98fa7
    403c:	befa4fa4 	.word	0xbefa4fa4

00004040 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    4040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4044:	b0d1      	sub	sp, #324	; 0x144
    4046:	9007      	str	r0, [sp, #28]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    4048:	2300      	movs	r3, #0
    404a:	e006      	b.n	405a <mbedtls_internal_sha256_process+0x1a>
        A[i] = ctx->state[i];
    404c:	1c9a      	adds	r2, r3, #2
    404e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4052:	ac08      	add	r4, sp, #32
    4054:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    4058:	3301      	adds	r3, #1
    405a:	2b07      	cmp	r3, #7
    405c:	d9f6      	bls.n	404c <mbedtls_internal_sha256_process+0xc>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
    405e:	2200      	movs	r2, #0
    4060:	2a0f      	cmp	r2, #15
    4062:	d811      	bhi.n	4088 <mbedtls_internal_sha256_process+0x48>
        GET_UINT32_BE( W[i], data, 4 * i );
    4064:	f811 4022 	ldrb.w	r4, [r1, r2, lsl #2]
    4068:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    406c:	7843      	ldrb	r3, [r0, #1]
    406e:	041b      	lsls	r3, r3, #16
    4070:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    4074:	7884      	ldrb	r4, [r0, #2]
    4076:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    407a:	78c0      	ldrb	r0, [r0, #3]
    407c:	4303      	orrs	r3, r0
    407e:	a810      	add	r0, sp, #64	; 0x40
    4080:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < 16; i++ )
    4084:	3201      	adds	r2, #1
    4086:	e7eb      	b.n	4060 <mbedtls_internal_sha256_process+0x20>

    for( i = 0; i < 16; i += 8 )
    4088:	f04f 0e00 	mov.w	lr, #0
    408c:	e142      	b.n	4314 <mbedtls_internal_sha256_process+0x2d4>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    408e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4090:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    4092:	ea4f 21f6 	mov.w	r1, r6, ror #11
    4096:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
    409a:	ea81 6176 	eor.w	r1, r1, r6, ror #25
    409e:	4419      	add	r1, r3
    40a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    40a2:	980d      	ldr	r0, [sp, #52]	; 0x34
    40a4:	ea84 0300 	eor.w	r3, r4, r0
    40a8:	4033      	ands	r3, r6
    40aa:	4063      	eors	r3, r4
    40ac:	4419      	add	r1, r3
    40ae:	f8df 8734 	ldr.w	r8, [pc, #1844]	; 47e4 <mbedtls_internal_sha256_process+0x7a4>
    40b2:	f858 302e 	ldr.w	r3, [r8, lr, lsl #2]
    40b6:	4419      	add	r1, r3
    40b8:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    40bc:	f85c 302e 	ldr.w	r3, [ip, lr, lsl #2]
    40c0:	4419      	add	r1, r3
    40c2:	9d08      	ldr	r5, [sp, #32]
    40c4:	ea4f 3a75 	mov.w	sl, r5, ror #13
    40c8:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
    40cc:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    40d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    40d2:	ea05 0307 	and.w	r3, r5, r7
    40d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    40d8:	ea45 0907 	orr.w	r9, r5, r7
    40dc:	ea02 0909 	and.w	r9, r2, r9
    40e0:	ea43 0309 	orr.w	r3, r3, r9
    40e4:	449a      	add	sl, r3
    40e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    40e8:	eb01 0903 	add.w	r9, r1, r3
    40ec:	4451      	add	r1, sl
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    40ee:	ea4f 23f9 	mov.w	r3, r9, ror #11
    40f2:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
    40f6:	ea83 6379 	eor.w	r3, r3, r9, ror #25
    40fa:	441c      	add	r4, r3
    40fc:	ea86 0300 	eor.w	r3, r6, r0
    4100:	ea09 0303 	and.w	r3, r9, r3
    4104:	4043      	eors	r3, r0
    4106:	441c      	add	r4, r3
    4108:	f10e 0a01 	add.w	sl, lr, #1
    410c:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    4110:	441c      	add	r4, r3
    4112:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    4116:	441c      	add	r4, r3
    4118:	ea4f 3371 	mov.w	r3, r1, ror #13
    411c:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    4120:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    4124:	ea05 0a01 	and.w	sl, r5, r1
    4128:	ea45 0b01 	orr.w	fp, r5, r1
    412c:	ea07 0b0b 	and.w	fp, r7, fp
    4130:	ea4a 0a0b 	orr.w	sl, sl, fp
    4134:	4453      	add	r3, sl
    4136:	4422      	add	r2, r4
    4138:	441c      	add	r4, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    413a:	ea4f 23f2 	mov.w	r3, r2, ror #11
    413e:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    4142:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    4146:	4418      	add	r0, r3
    4148:	ea86 0309 	eor.w	r3, r6, r9
    414c:	4013      	ands	r3, r2
    414e:	4073      	eors	r3, r6
    4150:	4418      	add	r0, r3
    4152:	f10e 0a02 	add.w	sl, lr, #2
    4156:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    415a:	4418      	add	r0, r3
    415c:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    4160:	4418      	add	r0, r3
    4162:	ea4f 3374 	mov.w	r3, r4, ror #13
    4166:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
    416a:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
    416e:	ea01 0a04 	and.w	sl, r1, r4
    4172:	ea41 0b04 	orr.w	fp, r1, r4
    4176:	ea05 0b0b 	and.w	fp, r5, fp
    417a:	ea4a 0a0b 	orr.w	sl, sl, fp
    417e:	4453      	add	r3, sl
    4180:	4407      	add	r7, r0
    4182:	4418      	add	r0, r3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
    4184:	ea4f 23f7 	mov.w	r3, r7, ror #11
    4188:	ea83 13b7 	eor.w	r3, r3, r7, ror #6
    418c:	ea83 6377 	eor.w	r3, r3, r7, ror #25
    4190:	441e      	add	r6, r3
    4192:	ea89 0302 	eor.w	r3, r9, r2
    4196:	403b      	ands	r3, r7
    4198:	ea89 0303 	eor.w	r3, r9, r3
    419c:	441e      	add	r6, r3
    419e:	f10e 0a03 	add.w	sl, lr, #3
    41a2:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    41a6:	441e      	add	r6, r3
    41a8:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    41ac:	441e      	add	r6, r3
    41ae:	ea4f 3370 	mov.w	r3, r0, ror #13
    41b2:	ea83 03b0 	eor.w	r3, r3, r0, ror #2
    41b6:	ea83 53b0 	eor.w	r3, r3, r0, ror #22
    41ba:	ea04 0a00 	and.w	sl, r4, r0
    41be:	ea44 0b00 	orr.w	fp, r4, r0
    41c2:	ea01 0b0b 	and.w	fp, r1, fp
    41c6:	ea4a 0a0b 	orr.w	sl, sl, fp
    41ca:	4453      	add	r3, sl
    41cc:	4435      	add	r5, r6
    41ce:	441e      	add	r6, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
    41d0:	ea4f 23f5 	mov.w	r3, r5, ror #11
    41d4:	ea83 13b5 	eor.w	r3, r3, r5, ror #6
    41d8:	ea83 6375 	eor.w	r3, r3, r5, ror #25
    41dc:	4499      	add	r9, r3
    41de:	ea82 0307 	eor.w	r3, r2, r7
    41e2:	402b      	ands	r3, r5
    41e4:	4053      	eors	r3, r2
    41e6:	4499      	add	r9, r3
    41e8:	f10e 0a04 	add.w	sl, lr, #4
    41ec:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    41f0:	444b      	add	r3, r9
    41f2:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    41f6:	444b      	add	r3, r9
    41f8:	ea4f 3976 	mov.w	r9, r6, ror #13
    41fc:	ea89 09b6 	eor.w	r9, r9, r6, ror #2
    4200:	ea89 59b6 	eor.w	r9, r9, r6, ror #22
    4204:	ea00 0a06 	and.w	sl, r0, r6
    4208:	ea40 0b06 	orr.w	fp, r0, r6
    420c:	ea04 0b0b 	and.w	fp, r4, fp
    4210:	ea4a 0a0b 	orr.w	sl, sl, fp
    4214:	44d1      	add	r9, sl
    4216:	4419      	add	r1, r3
    4218:	910f      	str	r1, [sp, #60]	; 0x3c
    421a:	444b      	add	r3, r9
    421c:	930b      	str	r3, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
    421e:	ea4f 29f1 	mov.w	r9, r1, ror #11
    4222:	ea89 19b1 	eor.w	r9, r9, r1, ror #6
    4226:	ea89 6971 	eor.w	r9, r9, r1, ror #25
    422a:	444a      	add	r2, r9
    422c:	ea87 0905 	eor.w	r9, r7, r5
    4230:	ea01 0909 	and.w	r9, r1, r9
    4234:	ea87 0909 	eor.w	r9, r7, r9
    4238:	4491      	add	r9, r2
    423a:	f10e 0a05 	add.w	sl, lr, #5
    423e:	f858 202a 	ldr.w	r2, [r8, sl, lsl #2]
    4242:	444a      	add	r2, r9
    4244:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    4248:	444a      	add	r2, r9
    424a:	ea4f 3a73 	mov.w	sl, r3, ror #13
    424e:	ea8a 0ab3 	eor.w	sl, sl, r3, ror #2
    4252:	ea8a 5ab3 	eor.w	sl, sl, r3, ror #22
    4256:	ea06 0903 	and.w	r9, r6, r3
    425a:	ea46 0b03 	orr.w	fp, r6, r3
    425e:	ea00 0b0b 	and.w	fp, r0, fp
    4262:	ea49 090b 	orr.w	r9, r9, fp
    4266:	44ca      	add	sl, r9
    4268:	eb04 0902 	add.w	r9, r4, r2
    426c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    4270:	4452      	add	r2, sl
    4272:	920a      	str	r2, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
    4274:	ea4f 24f9 	mov.w	r4, r9, ror #11
    4278:	ea84 14b9 	eor.w	r4, r4, r9, ror #6
    427c:	ea84 6479 	eor.w	r4, r4, r9, ror #25
    4280:	4427      	add	r7, r4
    4282:	ea85 0401 	eor.w	r4, r5, r1
    4286:	ea09 0404 	and.w	r4, r9, r4
    428a:	406c      	eors	r4, r5
    428c:	443c      	add	r4, r7
    428e:	f10e 0a06 	add.w	sl, lr, #6
    4292:	f858 702a 	ldr.w	r7, [r8, sl, lsl #2]
    4296:	443c      	add	r4, r7
    4298:	f85c 702a 	ldr.w	r7, [ip, sl, lsl #2]
    429c:	443c      	add	r4, r7
    429e:	ea4f 3772 	mov.w	r7, r2, ror #13
    42a2:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
    42a6:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
    42aa:	ea03 0a02 	and.w	sl, r3, r2
    42ae:	ea43 0b02 	orr.w	fp, r3, r2
    42b2:	ea06 0b0b 	and.w	fp, r6, fp
    42b6:	ea4a 0a0b 	orr.w	sl, sl, fp
    42ba:	4457      	add	r7, sl
    42bc:	4420      	add	r0, r4
    42be:	900d      	str	r0, [sp, #52]	; 0x34
    42c0:	443c      	add	r4, r7
    42c2:	9409      	str	r4, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    42c4:	ea4f 27f0 	mov.w	r7, r0, ror #11
    42c8:	ea87 17b0 	eor.w	r7, r7, r0, ror #6
    42cc:	ea87 6770 	eor.w	r7, r7, r0, ror #25
    42d0:	443d      	add	r5, r7
    42d2:	ea81 0909 	eor.w	r9, r1, r9
    42d6:	ea00 0909 	and.w	r9, r0, r9
    42da:	ea81 0109 	eor.w	r1, r1, r9
    42de:	4429      	add	r1, r5
    42e0:	f10e 0007 	add.w	r0, lr, #7
    42e4:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
    42e8:	4429      	add	r1, r5
    42ea:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
    42ee:	4401      	add	r1, r0
    42f0:	ea4f 3074 	mov.w	r0, r4, ror #13
    42f4:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
    42f8:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
    42fc:	ea02 0504 	and.w	r5, r2, r4
    4300:	4322      	orrs	r2, r4
    4302:	4013      	ands	r3, r2
    4304:	432b      	orrs	r3, r5
    4306:	4403      	add	r3, r0
    4308:	440e      	add	r6, r1
    430a:	960c      	str	r6, [sp, #48]	; 0x30
    430c:	440b      	add	r3, r1
    430e:	9308      	str	r3, [sp, #32]
    for( i = 0; i < 16; i += 8 )
    4310:	f10e 0e08 	add.w	lr, lr, #8
    4314:	f1be 0f0f 	cmp.w	lr, #15
    4318:	f67f aeb9 	bls.w	408e <mbedtls_internal_sha256_process+0x4e>
    }

    for( i = 16; i < 64; i += 8 )
    431c:	2610      	movs	r6, #16
    431e:	2e3f      	cmp	r6, #63	; 0x3f
    4320:	f200 824d 	bhi.w	47be <mbedtls_internal_sha256_process+0x77e>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    4324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4328:	ea4f 27f3 	mov.w	r7, r3, ror #11
    432c:	ea87 17b3 	eor.w	r7, r7, r3, ror #6
    4330:	ea87 6773 	eor.w	r7, r7, r3, ror #25
    4334:	443a      	add	r2, r7
    4336:	980e      	ldr	r0, [sp, #56]	; 0x38
    4338:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    433a:	ea80 0705 	eor.w	r7, r0, r5
    433e:	401f      	ands	r7, r3
    4340:	4047      	eors	r7, r0
    4342:	443a      	add	r2, r7
    4344:	f8df b49c 	ldr.w	fp, [pc, #1180]	; 47e4 <mbedtls_internal_sha256_process+0x7a4>
    4348:	f85b 7026 	ldr.w	r7, [fp, r6, lsl #2]
    434c:	4417      	add	r7, r2
    434e:	1eb3      	subs	r3, r6, #2
    4350:	461a      	mov	r2, r3
    4352:	ab10      	add	r3, sp, #64	; 0x40
    4354:	9204      	str	r2, [sp, #16]
    4356:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    435a:	ea4f 44f2 	mov.w	r4, r2, ror #19
    435e:	ea84 4472 	eor.w	r4, r4, r2, ror #17
    4362:	ea84 2492 	eor.w	r4, r4, r2, lsr #10
    4366:	1ff2      	subs	r2, r6, #7
    4368:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    436c:	4414      	add	r4, r2
    436e:	f1a6 0a0f 	sub.w	sl, r6, #15
    4372:	f853 c02a 	ldr.w	ip, [r3, sl, lsl #2]
    4376:	ea4f 42bc 	mov.w	r2, ip, ror #18
    437a:	ea82 12fc 	eor.w	r2, r2, ip, ror #7
    437e:	ea82 02dc 	eor.w	r2, r2, ip, lsr #3
    4382:	4414      	add	r4, r2
    4384:	f1a6 0210 	sub.w	r2, r6, #16
    4388:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    438c:	4422      	add	r2, r4
    438e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    4392:	443a      	add	r2, r7
    4394:	9908      	ldr	r1, [sp, #32]
    4396:	ea4f 3c71 	mov.w	ip, r1, ror #13
    439a:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    439e:	ea8c 5eb1 	eor.w	lr, ip, r1, ror #22
    43a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    43a4:	463c      	mov	r4, r7
    43a6:	400c      	ands	r4, r1
    43a8:	990a      	ldr	r1, [sp, #40]	; 0x28
    43aa:	9100      	str	r1, [sp, #0]
    43ac:	9908      	ldr	r1, [sp, #32]
    43ae:	ea41 0c07 	orr.w	ip, r1, r7
    43b2:	9900      	ldr	r1, [sp, #0]
    43b4:	ea01 0c0c 	and.w	ip, r1, ip
    43b8:	ea44 0c0c 	orr.w	ip, r4, ip
    43bc:	44f4      	add	ip, lr
    43be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    43c0:	4414      	add	r4, r2
    43c2:	4462      	add	r2, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    43c4:	ea4f 28f4 	mov.w	r8, r4, ror #11
    43c8:	ea88 18b4 	eor.w	r8, r8, r4, ror #6
    43cc:	ea88 6874 	eor.w	r8, r8, r4, ror #25
    43d0:	4480      	add	r8, r0
    43d2:	990c      	ldr	r1, [sp, #48]	; 0x30
    43d4:	ea81 0905 	eor.w	r9, r1, r5
    43d8:	ea04 0909 	and.w	r9, r4, r9
    43dc:	ea85 0909 	eor.w	r9, r5, r9
    43e0:	44c8      	add	r8, r9
    43e2:	1c71      	adds	r1, r6, #1
    43e4:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
    43e8:	4480      	add	r8, r0
    43ea:	1e70      	subs	r0, r6, #1
    43ec:	9005      	str	r0, [sp, #20]
    43ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    43f2:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    43f6:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    43fa:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    43fe:	1fb0      	subs	r0, r6, #6
    4400:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4404:	4484      	add	ip, r0
    4406:	f1a6 0e0e 	sub.w	lr, r6, #14
    440a:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
    440e:	ea4f 40b9 	mov.w	r0, r9, ror #18
    4412:	ea80 10f9 	eor.w	r0, r0, r9, ror #7
    4416:	ea80 00d9 	eor.w	r0, r0, r9, lsr #3
    441a:	4460      	add	r0, ip
    441c:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
    4420:	4448      	add	r0, r9
    4422:	9102      	str	r1, [sp, #8]
    4424:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    4428:	eb08 0900 	add.w	r9, r8, r0
    442c:	ea4f 3872 	mov.w	r8, r2, ror #13
    4430:	ea88 08b2 	eor.w	r8, r8, r2, ror #2
    4434:	ea88 58b2 	eor.w	r8, r8, r2, ror #22
    4438:	9908      	ldr	r1, [sp, #32]
    443a:	ea01 0002 	and.w	r0, r1, r2
    443e:	ea41 0c02 	orr.w	ip, r1, r2
    4442:	9701      	str	r7, [sp, #4]
    4444:	ea07 0c0c 	and.w	ip, r7, ip
    4448:	ea40 0c0c 	orr.w	ip, r0, ip
    444c:	44c4      	add	ip, r8
    444e:	9800      	ldr	r0, [sp, #0]
    4450:	eb00 0809 	add.w	r8, r0, r9
    4454:	44e1      	add	r9, ip
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    4456:	ea4f 20f8 	mov.w	r0, r8, ror #11
    445a:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
    445e:	ea80 6078 	eor.w	r0, r0, r8, ror #25
    4462:	4405      	add	r5, r0
    4464:	990c      	ldr	r1, [sp, #48]	; 0x30
    4466:	ea81 0004 	eor.w	r0, r1, r4
    446a:	ea08 0000 	and.w	r0, r8, r0
    446e:	4048      	eors	r0, r1
    4470:	4405      	add	r5, r0
    4472:	1cb0      	adds	r0, r6, #2
    4474:	4601      	mov	r1, r0
    4476:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
    447a:	4405      	add	r5, r0
    447c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    4480:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    4484:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    4488:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    448c:	1f70      	subs	r0, r6, #5
    448e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4492:	4484      	add	ip, r0
    4494:	f1a6 0a0d 	sub.w	sl, r6, #13
    4498:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
    449c:	ea4f 40b0 	mov.w	r0, r0, ror #18
    44a0:	f853 702a 	ldr.w	r7, [r3, sl, lsl #2]
    44a4:	ea80 10f7 	eor.w	r0, r0, r7, ror #7
    44a8:	ea80 00d7 	eor.w	r0, r0, r7, lsr #3
    44ac:	4460      	add	r0, ip
    44ae:	f853 c02e 	ldr.w	ip, [r3, lr, lsl #2]
    44b2:	4460      	add	r0, ip
    44b4:	9103      	str	r1, [sp, #12]
    44b6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    44ba:	4405      	add	r5, r0
    44bc:	ea4f 3c79 	mov.w	ip, r9, ror #13
    44c0:	ea8c 0cb9 	eor.w	ip, ip, r9, ror #2
    44c4:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
    44c8:	ea02 0009 	and.w	r0, r2, r9
    44cc:	ea42 0e09 	orr.w	lr, r2, r9
    44d0:	9908      	ldr	r1, [sp, #32]
    44d2:	ea01 0e0e 	and.w	lr, r1, lr
    44d6:	ea40 000e 	orr.w	r0, r0, lr
    44da:	4484      	add	ip, r0
    44dc:	9f01      	ldr	r7, [sp, #4]
    44de:	eb07 0e05 	add.w	lr, r7, r5
    44e2:	eb05 070c 	add.w	r7, r5, ip
    44e6:	9700      	str	r7, [sp, #0]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    44e8:	ea4f 20fe 	mov.w	r0, lr, ror #11
    44ec:	ea80 10be 	eor.w	r0, r0, lr, ror #6
    44f0:	ea80 607e 	eor.w	r0, r0, lr, ror #25
    44f4:	990c      	ldr	r1, [sp, #48]	; 0x30
    44f6:	180d      	adds	r5, r1, r0
    44f8:	ea84 0108 	eor.w	r1, r4, r8
    44fc:	ea0e 0101 	and.w	r1, lr, r1
    4500:	4061      	eors	r1, r4
    4502:	1868      	adds	r0, r5, r1
    4504:	1cf7      	adds	r7, r6, #3
    4506:	f85b 1027 	ldr.w	r1, [fp, r7, lsl #2]
    450a:	4401      	add	r1, r0
    450c:	9d02      	ldr	r5, [sp, #8]
    450e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    4512:	ea4f 45f0 	mov.w	r5, r0, ror #19
    4516:	ea85 4570 	eor.w	r5, r5, r0, ror #17
    451a:	ea85 2590 	eor.w	r5, r5, r0, lsr #10
    451e:	1f30      	subs	r0, r6, #4
    4520:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4524:	4405      	add	r5, r0
    4526:	9501      	str	r5, [sp, #4]
    4528:	f1a6 0c0c 	sub.w	ip, r6, #12
    452c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    4530:	ea4f 40b0 	mov.w	r0, r0, ror #18
    4534:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
    4538:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
    453c:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
    4540:	9d01      	ldr	r5, [sp, #4]
    4542:	4428      	add	r0, r5
    4544:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
    4548:	4428      	add	r0, r5
    454a:	9706      	str	r7, [sp, #24]
    454c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
    4550:	4401      	add	r1, r0
    4552:	9800      	ldr	r0, [sp, #0]
    4554:	ea4f 3570 	mov.w	r5, r0, ror #13
    4558:	4607      	mov	r7, r0
    455a:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
    455e:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
    4562:	ea09 0000 	and.w	r0, r9, r0
    4566:	ea49 0a07 	orr.w	sl, r9, r7
    456a:	ea02 0a0a 	and.w	sl, r2, sl
    456e:	ea40 000a 	orr.w	r0, r0, sl
    4572:	4405      	add	r5, r0
    4574:	9808      	ldr	r0, [sp, #32]
    4576:	eb00 0a01 	add.w	sl, r0, r1
    457a:	4429      	add	r1, r5
    457c:	9101      	str	r1, [sp, #4]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    457e:	ea4f 25fa 	mov.w	r5, sl, ror #11
    4582:	ea85 15ba 	eor.w	r5, r5, sl, ror #6
    4586:	ea85 657a 	eor.w	r5, r5, sl, ror #25
    458a:	442c      	add	r4, r5
    458c:	ea88 050e 	eor.w	r5, r8, lr
    4590:	ea0a 0505 	and.w	r5, sl, r5
    4594:	ea88 0505 	eor.w	r5, r8, r5
    4598:	4425      	add	r5, r4
    459a:	1d34      	adds	r4, r6, #4
    459c:	9402      	str	r4, [sp, #8]
    459e:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
    45a2:	4405      	add	r5, r0
    45a4:	9903      	ldr	r1, [sp, #12]
    45a6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    45aa:	ea4f 40f4 	mov.w	r0, r4, ror #19
    45ae:	ea80 4074 	eor.w	r0, r0, r4, ror #17
    45b2:	ea80 2094 	eor.w	r0, r0, r4, lsr #10
    45b6:	1ef4      	subs	r4, r6, #3
    45b8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
    45bc:	4420      	add	r0, r4
    45be:	f1a6 070b 	sub.w	r7, r6, #11
    45c2:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
    45c6:	ea4f 44b1 	mov.w	r4, r1, ror #18
    45ca:	ea84 14f1 	eor.w	r4, r4, r1, ror #7
    45ce:	ea84 04d1 	eor.w	r4, r4, r1, lsr #3
    45d2:	4404      	add	r4, r0
    45d4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    45d8:	4420      	add	r0, r4
    45da:	9902      	ldr	r1, [sp, #8]
    45dc:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    45e0:	4405      	add	r5, r0
    45e2:	9901      	ldr	r1, [sp, #4]
    45e4:	ea4f 3c71 	mov.w	ip, r1, ror #13
    45e8:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    45ec:	ea8c 5cb1 	eor.w	ip, ip, r1, ror #22
    45f0:	9800      	ldr	r0, [sp, #0]
    45f2:	4604      	mov	r4, r0
    45f4:	400c      	ands	r4, r1
    45f6:	4601      	mov	r1, r0
    45f8:	9801      	ldr	r0, [sp, #4]
    45fa:	4308      	orrs	r0, r1
    45fc:	ea09 0000 	and.w	r0, r9, r0
    4600:	4320      	orrs	r0, r4
    4602:	4460      	add	r0, ip
    4604:	442a      	add	r2, r5
    4606:	920f      	str	r2, [sp, #60]	; 0x3c
    4608:	4428      	add	r0, r5
    460a:	900b      	str	r0, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    460c:	ea4f 2cf2 	mov.w	ip, r2, ror #11
    4610:	ea8c 1cb2 	eor.w	ip, ip, r2, ror #6
    4614:	ea8c 6c72 	eor.w	ip, ip, r2, ror #25
    4618:	44c4      	add	ip, r8
    461a:	ea8e 080a 	eor.w	r8, lr, sl
    461e:	9203      	str	r2, [sp, #12]
    4620:	ea02 0808 	and.w	r8, r2, r8
    4624:	ea8e 0808 	eor.w	r8, lr, r8
    4628:	44c4      	add	ip, r8
    462a:	1d74      	adds	r4, r6, #5
    462c:	4621      	mov	r1, r4
    462e:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
    4632:	44a4      	add	ip, r4
    4634:	9d06      	ldr	r5, [sp, #24]
    4636:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    463a:	ea4f 44f5 	mov.w	r4, r5, ror #19
    463e:	ea84 4475 	eor.w	r4, r4, r5, ror #17
    4642:	ea84 2495 	eor.w	r4, r4, r5, lsr #10
    4646:	9a04      	ldr	r2, [sp, #16]
    4648:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    464c:	442c      	add	r4, r5
    464e:	f1a6 080a 	sub.w	r8, r6, #10
    4652:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    4656:	ea4f 45b2 	mov.w	r5, r2, ror #18
    465a:	ea85 15f2 	eor.w	r5, r5, r2, ror #7
    465e:	ea85 05d2 	eor.w	r5, r5, r2, lsr #3
    4662:	4425      	add	r5, r4
    4664:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
    4668:	442c      	add	r4, r5
    466a:	9104      	str	r1, [sp, #16]
    466c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
    4670:	4464      	add	r4, ip
    4672:	ea4f 3770 	mov.w	r7, r0, ror #13
    4676:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
    467a:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
    467e:	9901      	ldr	r1, [sp, #4]
    4680:	ea01 0500 	and.w	r5, r1, r0
    4684:	ea41 0c00 	orr.w	ip, r1, r0
    4688:	9900      	ldr	r1, [sp, #0]
    468a:	ea01 0c0c 	and.w	ip, r1, ip
    468e:	ea45 050c 	orr.w	r5, r5, ip
    4692:	442f      	add	r7, r5
    4694:	eb09 0c04 	add.w	ip, r9, r4
    4698:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    469c:	443c      	add	r4, r7
    469e:	940a      	str	r4, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    46a0:	ea4f 27fc 	mov.w	r7, ip, ror #11
    46a4:	ea87 17bc 	eor.w	r7, r7, ip, ror #6
    46a8:	ea87 677c 	eor.w	r7, r7, ip, ror #25
    46ac:	4477      	add	r7, lr
    46ae:	9d03      	ldr	r5, [sp, #12]
    46b0:	ea8a 0e05 	eor.w	lr, sl, r5
    46b4:	ea0c 0e0e 	and.w	lr, ip, lr
    46b8:	ea8a 0e0e 	eor.w	lr, sl, lr
    46bc:	4477      	add	r7, lr
    46be:	f106 0906 	add.w	r9, r6, #6
    46c2:	f85b 5029 	ldr.w	r5, [fp, r9, lsl #2]
    46c6:	442f      	add	r7, r5
    46c8:	9d02      	ldr	r5, [sp, #8]
    46ca:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    46ce:	ea4f 4ef5 	mov.w	lr, r5, ror #19
    46d2:	ea8e 4e75 	eor.w	lr, lr, r5, ror #17
    46d6:	ea8e 2e95 	eor.w	lr, lr, r5, lsr #10
    46da:	9a05      	ldr	r2, [sp, #20]
    46dc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    46e0:	44ae      	add	lr, r5
    46e2:	f1a6 0209 	sub.w	r2, r6, #9
    46e6:	9202      	str	r2, [sp, #8]
    46e8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    46ec:	4629      	mov	r1, r5
    46ee:	ea4f 45b5 	mov.w	r5, r5, ror #18
    46f2:	ea85 15f1 	eor.w	r5, r5, r1, ror #7
    46f6:	ea85 05d1 	eor.w	r5, r5, r1, lsr #3
    46fa:	4475      	add	r5, lr
    46fc:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
    4700:	4475      	add	r5, lr
    4702:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
    4706:	442f      	add	r7, r5
    4708:	ea4f 3574 	mov.w	r5, r4, ror #13
    470c:	ea85 05b4 	eor.w	r5, r5, r4, ror #2
    4710:	ea85 55b4 	eor.w	r5, r5, r4, ror #22
    4714:	ea00 0904 	and.w	r9, r0, r4
    4718:	ea40 0e04 	orr.w	lr, r0, r4
    471c:	9a01      	ldr	r2, [sp, #4]
    471e:	ea02 0e0e 	and.w	lr, r2, lr
    4722:	ea49 090e 	orr.w	r9, r9, lr
    4726:	44a9      	add	r9, r5
    4728:	9900      	ldr	r1, [sp, #0]
    472a:	19cd      	adds	r5, r1, r7
    472c:	950d      	str	r5, [sp, #52]	; 0x34
    472e:	444f      	add	r7, r9
    4730:	9709      	str	r7, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    4732:	ea4f 2ef5 	mov.w	lr, r5, ror #11
    4736:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    473a:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    473e:	44d6      	add	lr, sl
    4740:	9a03      	ldr	r2, [sp, #12]
    4742:	ea82 0c0c 	eor.w	ip, r2, ip
    4746:	ea05 0c0c 	and.w	ip, r5, ip
    474a:	ea82 020c 	eor.w	r2, r2, ip
    474e:	4472      	add	r2, lr
    4750:	f106 0807 	add.w	r8, r6, #7
    4754:	f85b 5028 	ldr.w	r5, [fp, r8, lsl #2]
    4758:	eb02 0e05 	add.w	lr, r2, r5
    475c:	9904      	ldr	r1, [sp, #16]
    475e:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
    4762:	ea4f 42f5 	mov.w	r2, r5, ror #19
    4766:	ea82 4275 	eor.w	r2, r2, r5, ror #17
    476a:	ea82 2295 	eor.w	r2, r2, r5, lsr #10
    476e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    4772:	440a      	add	r2, r1
    4774:	f1a6 0508 	sub.w	r5, r6, #8
    4778:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    477c:	ea4f 45bc 	mov.w	r5, ip, ror #18
    4780:	ea85 15fc 	eor.w	r5, r5, ip, ror #7
    4784:	ea85 05dc 	eor.w	r5, r5, ip, lsr #3
    4788:	442a      	add	r2, r5
    478a:	9d02      	ldr	r5, [sp, #8]
    478c:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    4790:	442a      	add	r2, r5
    4792:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
    4796:	4472      	add	r2, lr
    4798:	ea4f 3377 	mov.w	r3, r7, ror #13
    479c:	ea83 03b7 	eor.w	r3, r3, r7, ror #2
    47a0:	ea83 53b7 	eor.w	r3, r3, r7, ror #22
    47a4:	ea04 0507 	and.w	r5, r4, r7
    47a8:	4327      	orrs	r7, r4
    47aa:	4038      	ands	r0, r7
    47ac:	4328      	orrs	r0, r5
    47ae:	4418      	add	r0, r3
    47b0:	9901      	ldr	r1, [sp, #4]
    47b2:	4411      	add	r1, r2
    47b4:	910c      	str	r1, [sp, #48]	; 0x30
    47b6:	4410      	add	r0, r2
    47b8:	9008      	str	r0, [sp, #32]
    for( i = 16; i < 64; i += 8 )
    47ba:	3608      	adds	r6, #8
    47bc:	e5af      	b.n	431e <mbedtls_internal_sha256_process+0x2de>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    47be:	2300      	movs	r3, #0
    47c0:	9807      	ldr	r0, [sp, #28]
    47c2:	e009      	b.n	47d8 <mbedtls_internal_sha256_process+0x798>
        ctx->state[i] += A[i];
    47c4:	aa08      	add	r2, sp, #32
    47c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    47ca:	1c99      	adds	r1, r3, #2
    47cc:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    47d0:	4422      	add	r2, r4
    47d2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    47d6:	3301      	adds	r3, #1
    47d8:	2b07      	cmp	r3, #7
    47da:	d9f3      	bls.n	47c4 <mbedtls_internal_sha256_process+0x784>

    return( 0 );
}
    47dc:	2000      	movs	r0, #0
    47de:	b051      	add	sp, #324	; 0x144
    47e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47e4:	00009e90 	.word	0x00009e90

000047e8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    47e8:	b570      	push	{r4, r5, r6, lr}
    47ea:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    47ec:	4b11      	ldr	r3, [pc, #68]	; (4834 <z_sys_init_run_level+0x4c>)
    47ee:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    47f2:	e000      	b.n	47f6 <z_sys_init_run_level+0xe>
    47f4:	3508      	adds	r5, #8
    47f6:	1c73      	adds	r3, r6, #1
    47f8:	4a0e      	ldr	r2, [pc, #56]	; (4834 <z_sys_init_run_level+0x4c>)
    47fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47fe:	42ab      	cmp	r3, r5
    4800:	d917      	bls.n	4832 <z_sys_init_run_level+0x4a>
		const struct device *dev = entry->dev;
    4802:	686c      	ldr	r4, [r5, #4]

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) != 0) && (dev != NULL)) {
    4804:	682b      	ldr	r3, [r5, #0]
    4806:	4620      	mov	r0, r4
    4808:	4798      	blx	r3
    480a:	2800      	cmp	r0, #0
    480c:	d0f2      	beq.n	47f4 <z_sys_init_run_level+0xc>
    480e:	2c00      	cmp	r4, #0
    4810:	d0f0      	beq.n	47f4 <z_sys_init_run_level+0xc>
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
    4812:	4909      	ldr	r1, [pc, #36]	; (4838 <z_sys_init_run_level+0x50>)
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    4814:	4b09      	ldr	r3, [pc, #36]	; (483c <z_sys_init_run_level+0x54>)
    4816:	1ae4      	subs	r4, r4, r3
    4818:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    481a:	0960      	lsrs	r0, r4, #5
    481c:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    4820:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
    4824:	2201      	movs	r2, #1
    4826:	fa02 f404 	lsl.w	r4, r2, r4
    482a:	431c      	orrs	r4, r3
    482c:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
}
    4830:	e7e0      	b.n	47f4 <z_sys_init_run_level+0xc>
		}
	}
}
    4832:	bd70      	pop	{r4, r5, r6, pc}
    4834:	00009f90 	.word	0x00009f90
    4838:	20020170 	.word	0x20020170
    483c:	20020100 	.word	0x20020100

00004840 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    4840:	4b08      	ldr	r3, [pc, #32]	; (4864 <z_device_ready+0x24>)
    4842:	1ac0      	subs	r0, r0, r3
    4844:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    4846:	0942      	lsrs	r2, r0, #5
    4848:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    484c:	4b06      	ldr	r3, [pc, #24]	; (4868 <z_device_ready+0x28>)
    484e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    4852:	2301      	movs	r3, #1
    4854:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    4858:	4202      	tst	r2, r0
}
    485a:	bf0c      	ite	eq
    485c:	4618      	moveq	r0, r3
    485e:	2000      	movne	r0, #0
    4860:	4770      	bx	lr
    4862:	bf00      	nop
    4864:	20020100 	.word	0x20020100
    4868:	20020170 	.word	0x20020170

0000486c <z_impl_device_get_binding>:
{
    486c:	b538      	push	{r3, r4, r5, lr}
    486e:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
    4870:	4c11      	ldr	r4, [pc, #68]	; (48b8 <z_impl_device_get_binding+0x4c>)
    4872:	e000      	b.n	4876 <z_impl_device_get_binding+0xa>
    4874:	3410      	adds	r4, #16
    4876:	4b11      	ldr	r3, [pc, #68]	; (48bc <z_impl_device_get_binding+0x50>)
    4878:	429c      	cmp	r4, r3
    487a:	d008      	beq.n	488e <z_impl_device_get_binding+0x22>
		if (z_device_ready(dev) && (dev->name == name)) {
    487c:	4620      	mov	r0, r4
    487e:	f7ff ffdf 	bl	4840 <z_device_ready>
    4882:	2800      	cmp	r0, #0
    4884:	d0f6      	beq.n	4874 <z_impl_device_get_binding+0x8>
    4886:	6823      	ldr	r3, [r4, #0]
    4888:	42ab      	cmp	r3, r5
    488a:	d1f3      	bne.n	4874 <z_impl_device_get_binding+0x8>
    488c:	e012      	b.n	48b4 <z_impl_device_get_binding+0x48>
	for (dev = __device_start; dev != __device_end; dev++) {
    488e:	4c0a      	ldr	r4, [pc, #40]	; (48b8 <z_impl_device_get_binding+0x4c>)
    4890:	e000      	b.n	4894 <z_impl_device_get_binding+0x28>
    4892:	3410      	adds	r4, #16
    4894:	4b09      	ldr	r3, [pc, #36]	; (48bc <z_impl_device_get_binding+0x50>)
    4896:	429c      	cmp	r4, r3
    4898:	d00b      	beq.n	48b2 <z_impl_device_get_binding+0x46>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    489a:	4620      	mov	r0, r4
    489c:	f7ff ffd0 	bl	4840 <z_device_ready>
    48a0:	2800      	cmp	r0, #0
    48a2:	d0f6      	beq.n	4892 <z_impl_device_get_binding+0x26>
    48a4:	6821      	ldr	r1, [r4, #0]
    48a6:	4628      	mov	r0, r5
    48a8:	f002 fb26 	bl	6ef8 <strcmp>
    48ac:	2800      	cmp	r0, #0
    48ae:	d1f0      	bne.n	4892 <z_impl_device_get_binding+0x26>
    48b0:	e000      	b.n	48b4 <z_impl_device_get_binding+0x48>
	return NULL;
    48b2:	2400      	movs	r4, #0
}
    48b4:	4620      	mov	r0, r4
    48b6:	bd38      	pop	{r3, r4, r5, pc}
    48b8:	20020100 	.word	0x20020100
    48bc:	20020170 	.word	0x20020170

000048c0 <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
    48c0:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    48c2:	4803      	ldr	r0, [pc, #12]	; (48d0 <z_bss_zero+0x10>)
    48c4:	4a03      	ldr	r2, [pc, #12]	; (48d4 <z_bss_zero+0x14>)
    48c6:	1a12      	subs	r2, r2, r0
    48c8:	2100      	movs	r1, #0
    48ca:	f002 fb5a 	bl	6f82 <memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((uint32_t) &__gcov_bss_end - (uint32_t) &__gcov_bss_start));
#endif
}
    48ce:	bd08      	pop	{r3, pc}
    48d0:	200201d8 	.word	0x200201d8
    48d4:	20022e48 	.word	0x20022e48

000048d8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    48d8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    48da:	4806      	ldr	r0, [pc, #24]	; (48f4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    48dc:	4a06      	ldr	r2, [pc, #24]	; (48f8 <z_data_copy+0x20>)
    48de:	1a12      	subs	r2, r2, r0
    48e0:	4906      	ldr	r1, [pc, #24]	; (48fc <z_data_copy+0x24>)
    48e2:	f002 fb2a 	bl	6f3a <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    48e6:	4a06      	ldr	r2, [pc, #24]	; (4900 <z_data_copy+0x28>)
    48e8:	4906      	ldr	r1, [pc, #24]	; (4904 <z_data_copy+0x2c>)
    48ea:	4807      	ldr	r0, [pc, #28]	; (4908 <z_data_copy+0x30>)
    48ec:	f002 fb25 	bl	6f3a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    48f0:	bd08      	pop	{r3, pc}
    48f2:	bf00      	nop
    48f4:	20020000 	.word	0x20020000
    48f8:	200201d4 	.word	0x200201d4
    48fc:	0000a068 	.word	0x0000a068
    4900:	00000000 	.word	0x00000000
    4904:	0000a068 	.word	0x0000a068
    4908:	20020000 	.word	0x20020000

0000490c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    490c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    490e:	4b0b      	ldr	r3, [pc, #44]	; (493c <bg_thread_main+0x30>)
    4910:	2201      	movs	r2, #1
    4912:	701a      	strb	r2, [r3, #0]

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4914:	2002      	movs	r0, #2
    4916:	f7ff ff67 	bl	47e8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    491a:	4a09      	ldr	r2, [pc, #36]	; (4940 <bg_thread_main+0x34>)
    491c:	4909      	ldr	r1, [pc, #36]	; (4944 <bg_thread_main+0x38>)
    491e:	480a      	ldr	r0, [pc, #40]	; (4948 <bg_thread_main+0x3c>)
    4920:	f001 fd91 	bl	6446 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4924:	2003      	movs	r0, #3
    4926:	f7ff ff5f 	bl	47e8 <z_sys_init_run_level>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    492a:	f7fb fd89 	bl	440 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    492e:	4a07      	ldr	r2, [pc, #28]	; (494c <bg_thread_main+0x40>)
    4930:	7b13      	ldrb	r3, [r2, #12]
    4932:	f023 0301 	bic.w	r3, r3, #1
    4936:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4938:	bd08      	pop	{r3, pc}
    493a:	bf00      	nop
    493c:	20022e45 	.word	0x20022e45
    4940:	00009ae8 	.word	0x00009ae8
    4944:	00009fa8 	.word	0x00009fa8
    4948:	00009fb4 	.word	0x00009fb4
    494c:	200201d8 	.word	0x200201d8

00004950 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    4950:	b508      	push	{r3, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    4952:	f7fd f87d 	bl	1a50 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4956:	4b12      	ldr	r3, [pc, #72]	; (49a0 <z_cstart+0x50>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4958:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    495c:	4c11      	ldr	r4, [pc, #68]	; (49a4 <z_cstart+0x54>)
    495e:	23e0      	movs	r3, #224	; 0xe0
    4960:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    4964:	2500      	movs	r5, #0
    4966:	77e5      	strb	r5, [r4, #31]
    4968:	7625      	strb	r5, [r4, #24]
    496a:	7665      	strb	r5, [r4, #25]
    496c:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    496e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4970:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4974:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4976:	f7fe f815 	bl	29a4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    497a:	f7fd fecb 	bl	2714 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    497e:	f04f 33ff 	mov.w	r3, #4294967295
    4982:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4984:	62e3      	str	r3, [r4, #44]	; 0x2c

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4986:	4628      	mov	r0, r5
    4988:	f7ff ff2e 	bl	47e8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    498c:	2001      	movs	r0, #1
    498e:	f7ff ff2b 	bl	47e8 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    4992:	462b      	mov	r3, r5
    4994:	462a      	mov	r2, r5
    4996:	4629      	mov	r1, r5
    4998:	4803      	ldr	r0, [pc, #12]	; (49a8 <z_cstart+0x58>)
    499a:	f7fd fea5 	bl	26e8 <z_arm_switch_to_main_no_multithreading>
    499e:	bf00      	nop
    49a0:	20025e48 	.word	0x20025e48
    49a4:	e000ed00 	.word	0xe000ed00
    49a8:	0000490d 	.word	0x0000490d

000049ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    49ac:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    49ae:	4c06      	ldr	r4, [pc, #24]	; (49c8 <init_mem_slab_module+0x1c>)
	int rc = 0;
    49b0:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    49b2:	4b06      	ldr	r3, [pc, #24]	; (49cc <init_mem_slab_module+0x20>)
    49b4:	429c      	cmp	r4, r3
    49b6:	d206      	bcs.n	49c6 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    49b8:	4620      	mov	r0, r4
    49ba:	f004 fabb 	bl	8f34 <create_free_list>
		if (rc < 0) {
    49be:	2800      	cmp	r0, #0
    49c0:	db01      	blt.n	49c6 <init_mem_slab_module+0x1a>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    49c2:	341c      	adds	r4, #28
    49c4:	e7f5      	b.n	49b2 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    49c6:	bd10      	pop	{r4, pc}
    49c8:	20020174 	.word	0x20020174
    49cc:	20020174 	.word	0x20020174

000049d0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    49d0:	b5d0      	push	{r4, r6, r7, lr}
    49d2:	b082      	sub	sp, #8
    49d4:	460c      	mov	r4, r1
    49d6:	461f      	mov	r7, r3
    49d8:	f04f 0320 	mov.w	r3, #32
    49dc:	f3ef 8111 	mrs	r1, BASEPRI
    49e0:	f383 8811 	msr	BASEPRI, r3
    49e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    49e8:	6943      	ldr	r3, [r0, #20]
    49ea:	b16b      	cbz	r3, 4a08 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    49ec:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    49ee:	6943      	ldr	r3, [r0, #20]
    49f0:	681b      	ldr	r3, [r3, #0]
    49f2:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    49f4:	6983      	ldr	r3, [r0, #24]
    49f6:	3301      	adds	r3, #1
    49f8:	6183      	str	r3, [r0, #24]
		result = 0;
    49fa:	2000      	movs	r0, #0
	__asm__ volatile(
    49fc:	f381 8811 	msr	BASEPRI, r1
    4a00:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	return result;
}
    4a04:	b002      	add	sp, #8
    4a06:	bdd0      	pop	{r4, r6, r7, pc}
    4a08:	4616      	mov	r6, r2
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4a0a:	ea56 0307 	orrs.w	r3, r6, r7
    4a0e:	d104      	bne.n	4a1a <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    4a10:	2300      	movs	r3, #0
    4a12:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    4a14:	f06f 000b 	mvn.w	r0, #11
    4a18:	e7f0      	b.n	49fc <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    4a1a:	e9cd 6700 	strd	r6, r7, [sp]
    4a1e:	4602      	mov	r2, r0
    4a20:	4804      	ldr	r0, [pc, #16]	; (4a34 <k_mem_slab_alloc+0x64>)
    4a22:	f000 fa69 	bl	4ef8 <z_pend_curr>
		if (result == 0) {
    4a26:	2800      	cmp	r0, #0
    4a28:	d1ec      	bne.n	4a04 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    4a2a:	4b03      	ldr	r3, [pc, #12]	; (4a38 <k_mem_slab_alloc+0x68>)
    4a2c:	689b      	ldr	r3, [r3, #8]
    4a2e:	695b      	ldr	r3, [r3, #20]
    4a30:	6023      	str	r3, [r4, #0]
		return result;
    4a32:	e7e7      	b.n	4a04 <k_mem_slab_alloc+0x34>
    4a34:	20022dfc 	.word	0x20022dfc
    4a38:	20022dfc 	.word	0x20022dfc

00004a3c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4a3c:	b570      	push	{r4, r5, r6, lr}
    4a3e:	4604      	mov	r4, r0
    4a40:	460d      	mov	r5, r1
	__asm__ volatile(
    4a42:	f04f 0320 	mov.w	r3, #32
    4a46:	f3ef 8611 	mrs	r6, BASEPRI
    4a4a:	f383 8811 	msr	BASEPRI, r3
    4a4e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4a52:	f004 fb63 	bl	911c <z_unpend_first_thread>

	if (pending_thread != NULL) {
    4a56:	b150      	cbz	r0, 4a6e <k_mem_slab_free+0x32>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4a58:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4a5a:	2100      	movs	r1, #0
    4a5c:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4a5e:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    4a60:	f004 facc 	bl	8ffc <z_ready_thread>
		z_reschedule(&lock, key);
    4a64:	4631      	mov	r1, r6
    4a66:	4808      	ldr	r0, [pc, #32]	; (4a88 <k_mem_slab_free+0x4c>)
    4a68:	f000 f8e8 	bl	4c3c <z_reschedule>
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    4a6c:	bd70      	pop	{r4, r5, r6, pc}
		**(char ***)mem = slab->free_list;
    4a6e:	682b      	ldr	r3, [r5, #0]
    4a70:	6962      	ldr	r2, [r4, #20]
    4a72:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    4a74:	682b      	ldr	r3, [r5, #0]
    4a76:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    4a78:	69a3      	ldr	r3, [r4, #24]
    4a7a:	3b01      	subs	r3, #1
    4a7c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    4a7e:	f386 8811 	msr	BASEPRI, r6
    4a82:	f3bf 8f6f 	isb	sy
}
    4a86:	e7f1      	b.n	4a6c <k_mem_slab_free+0x30>
    4a88:	20022dfc 	.word	0x20022dfc

00004a8c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4a90:	b083      	sub	sp, #12
    4a92:	4604      	mov	r4, r0
    4a94:	461d      	mov	r5, r3
	__asm__ volatile(
    4a96:	f04f 0320 	mov.w	r3, #32
    4a9a:	f3ef 8711 	mrs	r7, BASEPRI
    4a9e:	f383 8811 	msr	BASEPRI, r3
    4aa2:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4aa6:	68c1      	ldr	r1, [r0, #12]
    4aa8:	b999      	cbnz	r1, 4ad2 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    4aaa:	2900      	cmp	r1, #0
    4aac:	d14f      	bne.n	4b4e <z_impl_k_mutex_lock+0xc2>
    4aae:	4b3a      	ldr	r3, [pc, #232]	; (4b98 <z_impl_k_mutex_lock+0x10c>)
    4ab0:	689b      	ldr	r3, [r3, #8]
    4ab2:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4ab6:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    4ab8:	3101      	adds	r1, #1
    4aba:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    4abc:	4b36      	ldr	r3, [pc, #216]	; (4b98 <z_impl_k_mutex_lock+0x10c>)
    4abe:	689b      	ldr	r3, [r3, #8]
    4ac0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    4ac2:	f387 8811 	msr	BASEPRI, r7
    4ac6:	f3bf 8f6f 	isb	sy
			mutex->owner_orig_prio);

		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
    4aca:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    4acc:	b003      	add	sp, #12
    4ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4ad2:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4ad4:	6882      	ldr	r2, [r0, #8]
    4ad6:	4b30      	ldr	r3, [pc, #192]	; (4b98 <z_impl_k_mutex_lock+0x10c>)
    4ad8:	689b      	ldr	r3, [r3, #8]
    4ada:	429a      	cmp	r2, r3
    4adc:	d0e5      	beq.n	4aaa <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4ade:	ea55 0106 	orrs.w	r1, r5, r6
    4ae2:	bf0c      	ite	eq
    4ae4:	f04f 0801 	moveq.w	r8, #1
    4ae8:	f04f 0800 	movne.w	r8, #0
    4aec:	d031      	beq.n	4b52 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    4aee:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4af2:	4649      	mov	r1, r9
    4af4:	f993 000e 	ldrsb.w	r0, [r3, #14]
    4af8:	f004 fa41 	bl	8f7e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4afc:	4581      	cmp	r9, r0
    4afe:	dc2f      	bgt.n	4b60 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    4b00:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4b04:	9600      	str	r6, [sp, #0]
    4b06:	9501      	str	r5, [sp, #4]
    4b08:	4622      	mov	r2, r4
    4b0a:	4639      	mov	r1, r7
    4b0c:	4823      	ldr	r0, [pc, #140]	; (4b9c <z_impl_k_mutex_lock+0x110>)
    4b0e:	f000 f9f3 	bl	4ef8 <z_pend_curr>
	if (got_mutex == 0) {
    4b12:	2800      	cmp	r0, #0
    4b14:	d0da      	beq.n	4acc <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    4b16:	f04f 0320 	mov.w	r3, #32
    4b1a:	f3ef 8511 	mrs	r5, BASEPRI
    4b1e:	f383 8811 	msr	BASEPRI, r3
    4b22:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4b26:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b28:	429c      	cmp	r4, r3
    4b2a:	d01f      	beq.n	4b6c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4b2c:	b1f3      	cbz	r3, 4b6c <z_impl_k_mutex_lock+0xe0>
    4b2e:	6921      	ldr	r1, [r4, #16]
    4b30:	f993 000e 	ldrsb.w	r0, [r3, #14]
    4b34:	f004 fa23 	bl	8f7e <new_prio_for_inheritance>
    4b38:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4b3a:	4620      	mov	r0, r4
    4b3c:	f004 fa28 	bl	8f90 <adjust_owner_prio>
    4b40:	b9b0      	cbnz	r0, 4b70 <z_impl_k_mutex_lock+0xe4>
    4b42:	f1b9 0f00 	cmp.w	r9, #0
    4b46:	d015      	beq.n	4b74 <z_impl_k_mutex_lock+0xe8>
    4b48:	f04f 0801 	mov.w	r8, #1
    4b4c:	e012      	b.n	4b74 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    4b4e:	6923      	ldr	r3, [r4, #16]
    4b50:	e7b1      	b.n	4ab6 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    4b52:	f387 8811 	msr	BASEPRI, r7
    4b56:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4b5a:	f06f 000f 	mvn.w	r0, #15
    4b5e:	e7b5      	b.n	4acc <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    4b60:	4601      	mov	r1, r0
    4b62:	4620      	mov	r0, r4
    4b64:	f004 fa14 	bl	8f90 <adjust_owner_prio>
    4b68:	4681      	mov	r9, r0
    4b6a:	e7cb      	b.n	4b04 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4b6c:	6921      	ldr	r1, [r4, #16]
    4b6e:	e7e4      	b.n	4b3a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4b70:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    4b74:	f1b8 0f00 	cmp.w	r8, #0
    4b78:	d106      	bne.n	4b88 <z_impl_k_mutex_lock+0xfc>
    4b7a:	f385 8811 	msr	BASEPRI, r5
    4b7e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    4b82:	f06f 000a 	mvn.w	r0, #10
    4b86:	e7a1      	b.n	4acc <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    4b88:	4629      	mov	r1, r5
    4b8a:	4804      	ldr	r0, [pc, #16]	; (4b9c <z_impl_k_mutex_lock+0x110>)
    4b8c:	f000 f856 	bl	4c3c <z_reschedule>
	return -EAGAIN;
    4b90:	f06f 000a 	mvn.w	r0, #10
    4b94:	e79a      	b.n	4acc <z_impl_k_mutex_lock+0x40>
    4b96:	bf00      	nop
    4b98:	20022dfc 	.word	0x20022dfc
    4b9c:	20022dfc 	.word	0x20022dfc

00004ba0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4ba0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    4ba2:	6883      	ldr	r3, [r0, #8]
    4ba4:	b383      	cbz	r3, 4c08 <z_impl_k_mutex_unlock+0x68>
    4ba6:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4ba8:	4a1a      	ldr	r2, [pc, #104]	; (4c14 <z_impl_k_mutex_unlock+0x74>)
    4baa:	6892      	ldr	r2, [r2, #8]
    4bac:	4293      	cmp	r3, r2
    4bae:	d12e      	bne.n	4c0e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    4bb0:	68c3      	ldr	r3, [r0, #12]
    4bb2:	2b01      	cmp	r3, #1
    4bb4:	d005      	beq.n	4bc2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count--;
    4bb6:	3b01      	subs	r3, #1
    4bb8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    4bba:	f004 fa17 	bl	8fec <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    4bbe:	2000      	movs	r0, #0
}
    4bc0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4bc2:	f04f 0320 	mov.w	r3, #32
    4bc6:	f3ef 8511 	mrs	r5, BASEPRI
    4bca:	f383 8811 	msr	BASEPRI, r3
    4bce:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4bd2:	6901      	ldr	r1, [r0, #16]
    4bd4:	f004 f9dc 	bl	8f90 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4bd8:	4620      	mov	r0, r4
    4bda:	f004 fa9f 	bl	911c <z_unpend_first_thread>
	mutex->owner = new_owner;
    4bde:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4be0:	b158      	cbz	r0, 4bfa <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    4be2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4be6:	6123      	str	r3, [r4, #16]
    4be8:	2300      	movs	r3, #0
    4bea:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    4bec:	f004 fa06 	bl	8ffc <z_ready_thread>
		z_reschedule(&lock, key);
    4bf0:	4629      	mov	r1, r5
    4bf2:	4809      	ldr	r0, [pc, #36]	; (4c18 <z_impl_k_mutex_unlock+0x78>)
    4bf4:	f000 f822 	bl	4c3c <z_reschedule>
    4bf8:	e7df      	b.n	4bba <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    4bfa:	2300      	movs	r3, #0
    4bfc:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    4bfe:	f385 8811 	msr	BASEPRI, r5
    4c02:	f3bf 8f6f 	isb	sy
    4c06:	e7d8      	b.n	4bba <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    4c08:	f06f 0015 	mvn.w	r0, #21
    4c0c:	e7d8      	b.n	4bc0 <z_impl_k_mutex_unlock+0x20>
		return -EPERM;
    4c0e:	f04f 30ff 	mov.w	r0, #4294967295
    4c12:	e7d5      	b.n	4bc0 <z_impl_k_mutex_unlock+0x20>
    4c14:	20022dfc 	.word	0x20022dfc
    4c18:	20022dfc 	.word	0x20022dfc

00004c1c <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    4c1c:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4c22:	bf08      	it	eq
    4c24:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4c28:	d100      	bne.n	4c2c <add_thread_timeout+0x10>
#ifdef CONFIG_LEGACY_TIMEOUT_API
		timeout = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
#endif
		z_add_thread_timeout(thread, timeout);
	}
}
    4c2a:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, k_timeout_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    4c2c:	4902      	ldr	r1, [pc, #8]	; (4c38 <add_thread_timeout+0x1c>)
    4c2e:	3018      	adds	r0, #24
    4c30:	f000 fa40 	bl	50b4 <z_add_timeout>
    4c34:	e7f9      	b.n	4c2a <add_thread_timeout+0xe>
    4c36:	bf00      	nop
    4c38:	00009029 	.word	0x00009029

00004c3c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4c3c:	4608      	mov	r0, r1
    4c3e:	b981      	cbnz	r1, 4c62 <z_reschedule+0x26>
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4c40:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4c42:	f3ef 8305 	mrs	r3, IPSR
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4c46:	b93b      	cbnz	r3, 4c58 <z_reschedule+0x1c>
#ifdef CONFIG_SMP
extern struct k_thread *z_get_next_ready_thread(void);
#else
static ALWAYS_INLINE struct k_thread *z_get_next_ready_thread(void)
{
	return _kernel.ready_q.cache;
    4c48:	4b08      	ldr	r3, [pc, #32]	; (4c6c <z_reschedule+0x30>)
    4c4a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    4c4c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    4c4e:	429a      	cmp	r2, r3
    4c50:	d002      	beq.n	4c58 <z_reschedule+0x1c>
	ret = arch_swap(key);
    4c52:	f7fd fcc7 	bl	25e4 <arch_swap>
		z_swap(lock, key);
    4c56:	e003      	b.n	4c60 <z_reschedule+0x24>
    4c58:	f380 8811 	msr	BASEPRI, r0
    4c5c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    4c60:	bd08      	pop	{r3, pc}
    4c62:	f381 8811 	msr	BASEPRI, r1
    4c66:	f3bf 8f6f 	isb	sy
    4c6a:	4770      	bx	lr
    4c6c:	20022dfc 	.word	0x20022dfc

00004c70 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    4c70:	4b0a      	ldr	r3, [pc, #40]	; (4c9c <z_priq_dumb_remove+0x2c>)
    4c72:	4283      	cmp	r3, r0
    4c74:	d008      	beq.n	4c88 <z_priq_dumb_remove+0x18>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4c76:	684a      	ldr	r2, [r1, #4]
    4c78:	680b      	ldr	r3, [r1, #0]
    4c7a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4c7c:	684a      	ldr	r2, [r1, #4]
    4c7e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4c80:	2300      	movs	r3, #0
    4c82:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    4c84:	604b      	str	r3, [r1, #4]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4c86:	4770      	bx	lr
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    4c88:	3b20      	subs	r3, #32
    4c8a:	689b      	ldr	r3, [r3, #8]
    4c8c:	428b      	cmp	r3, r1
    4c8e:	d1f2      	bne.n	4c76 <z_priq_dumb_remove+0x6>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
}

static inline bool z_is_thread_prevented_from_running(struct k_thread *thread)
{
	uint8_t state = thread->base.thread_state;
    4c90:	7b4b      	ldrb	r3, [r1, #13]
    4c92:	f013 0f1f 	tst.w	r3, #31
    4c96:	d0ee      	beq.n	4c76 <z_priq_dumb_remove+0x6>
    4c98:	e7f5      	b.n	4c86 <z_priq_dumb_remove+0x16>
    4c9a:	bf00      	nop
    4c9c:	20022e1c 	.word	0x20022e1c

00004ca0 <update_cache>:
{
    4ca0:	b538      	push	{r3, r4, r5, lr}
    4ca2:	4604      	mov	r4, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    4ca4:	4d0e      	ldr	r5, [pc, #56]	; (4ce0 <update_cache+0x40>)
    4ca6:	f105 0020 	add.w	r0, r5, #32
    4caa:	f004 f9a0 	bl	8fee <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    4cae:	68aa      	ldr	r2, [r5, #8]
    4cb0:	7b53      	ldrb	r3, [r2, #13]
    4cb2:	f013 0f20 	tst.w	r3, #32
    4cb6:	d002      	beq.n	4cbe <update_cache+0x1e>
		_current->base.thread_state |= _THREAD_DEAD;
    4cb8:	f043 0308 	orr.w	r3, r3, #8
    4cbc:	7353      	strb	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    4cbe:	b148      	cbz	r0, 4cd4 <update_cache+0x34>
	if (preempt_ok != 0) {
    4cc0:	b95c      	cbnz	r4, 4cda <update_cache+0x3a>
    4cc2:	7b53      	ldrb	r3, [r2, #13]
	if (z_is_thread_prevented_from_running(_current)) {
    4cc4:	f013 0f1f 	tst.w	r3, #31
    4cc8:	d107      	bne.n	4cda <update_cache+0x3a>
	return node->next != NULL;
    4cca:	6983      	ldr	r3, [r0, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4ccc:	b92b      	cbnz	r3, 4cda <update_cache+0x3a>
		_kernel.ready_q.cache = _current;
    4cce:	4b04      	ldr	r3, [pc, #16]	; (4ce0 <update_cache+0x40>)
    4cd0:	61da      	str	r2, [r3, #28]
    4cd2:	e004      	b.n	4cde <update_cache+0x3e>
	return thread ? thread : _current_cpu->idle_thread;
    4cd4:	4b02      	ldr	r3, [pc, #8]	; (4ce0 <update_cache+0x40>)
    4cd6:	68d8      	ldr	r0, [r3, #12]
    4cd8:	e7f2      	b.n	4cc0 <update_cache+0x20>
		_kernel.ready_q.cache = thread;
    4cda:	4b01      	ldr	r3, [pc, #4]	; (4ce0 <update_cache+0x40>)
    4cdc:	61d8      	str	r0, [r3, #28]
}
    4cde:	bd38      	pop	{r3, r4, r5, pc}
    4ce0:	20022dfc 	.word	0x20022dfc

00004ce4 <ready_thread>:
{
    4ce4:	b538      	push	{r3, r4, r5, lr}
    4ce6:	4605      	mov	r5, r0
    4ce8:	7b43      	ldrb	r3, [r0, #13]
	return !z_is_inactive_timeout(&thread->base.timeout);
}

static inline bool z_is_thread_ready(struct k_thread *thread)
{
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4cea:	f013 0f1f 	tst.w	r3, #31
    4cee:	d105      	bne.n	4cfc <ready_thread+0x18>
    4cf0:	6983      	ldr	r3, [r0, #24]
    4cf2:	b10b      	cbz	r3, 4cf8 <ready_thread+0x14>
    4cf4:	2300      	movs	r3, #0
    4cf6:	e002      	b.n	4cfe <ready_thread+0x1a>
    4cf8:	2301      	movs	r3, #1
    4cfa:	e000      	b.n	4cfe <ready_thread+0x1a>
    4cfc:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
    4cfe:	b30b      	cbz	r3, 4d44 <ready_thread+0x60>
	return list->head == list;
    4d00:	4b15      	ldr	r3, [pc, #84]	; (4d58 <ready_thread+0x74>)
    4d02:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d06:	429c      	cmp	r4, r3
    4d08:	d024      	beq.n	4d54 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d0a:	b164      	cbz	r4, 4d26 <ready_thread+0x42>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    4d0c:	4621      	mov	r1, r4
    4d0e:	4628      	mov	r0, r5
    4d10:	f004 f954 	bl	8fbc <z_is_t1_higher_prio_than_t2>
    4d14:	b9b8      	cbnz	r0, 4d46 <ready_thread+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4d16:	b134      	cbz	r4, 4d26 <ready_thread+0x42>
	return (node == list->tail) ? NULL : node->next;
    4d18:	4b0f      	ldr	r3, [pc, #60]	; (4d58 <ready_thread+0x74>)
    4d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d1c:	429c      	cmp	r4, r3
    4d1e:	d002      	beq.n	4d26 <ready_thread+0x42>
    4d20:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d22:	2c00      	cmp	r4, #0
    4d24:	d1f1      	bne.n	4d0a <ready_thread+0x26>
	node->next = list;
    4d26:	4b0c      	ldr	r3, [pc, #48]	; (4d58 <ready_thread+0x74>)
    4d28:	f103 0220 	add.w	r2, r3, #32
    4d2c:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
    4d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4d30:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    4d32:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4d34:	625d      	str	r5, [r3, #36]	; 0x24
	thread->base.thread_state &= ~_THREAD_PENDING;
}

static inline void z_set_thread_states(struct k_thread *thread, uint32_t states)
{
	thread->base.thread_state |= states;
    4d36:	7b6b      	ldrb	r3, [r5, #13]
    4d38:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d3c:	736b      	strb	r3, [r5, #13]
		update_cache(0);
    4d3e:	2000      	movs	r0, #0
    4d40:	f7ff ffae 	bl	4ca0 <update_cache>
}
    4d44:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = successor->prev;
    4d46:	6863      	ldr	r3, [r4, #4]
    4d48:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4d4a:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    4d4c:	6863      	ldr	r3, [r4, #4]
    4d4e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4d50:	6065      	str	r5, [r4, #4]
}
    4d52:	e7f0      	b.n	4d36 <ready_thread+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d54:	2400      	movs	r4, #0
    4d56:	e7d8      	b.n	4d0a <ready_thread+0x26>
    4d58:	20022dfc 	.word	0x20022dfc

00004d5c <z_impl_k_thread_suspend>:
{
    4d5c:	b538      	push	{r3, r4, r5, lr}
    4d5e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4d60:	3018      	adds	r0, #24
    4d62:	f004 fa57 	bl	9214 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    4d66:	2300      	movs	r3, #0
	__asm__ volatile(
    4d68:	f04f 0220 	mov.w	r2, #32
    4d6c:	f3ef 8511 	mrs	r5, BASEPRI
    4d70:	f382 8811 	msr	BASEPRI, r2
    4d74:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4d78:	e010      	b.n	4d9c <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4d7a:	7b63      	ldrb	r3, [r4, #13]
    4d7c:	f043 0310 	orr.w	r3, r3, #16
    4d80:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4d82:	4b15      	ldr	r3, [pc, #84]	; (4dd8 <z_impl_k_thread_suspend+0x7c>)
    4d84:	6898      	ldr	r0, [r3, #8]
    4d86:	42a0      	cmp	r0, r4
    4d88:	bf14      	ite	ne
    4d8a:	2000      	movne	r0, #0
    4d8c:	2001      	moveq	r0, #1
    4d8e:	f7ff ff87 	bl	4ca0 <update_cache>
	__asm__ volatile(
    4d92:	f385 8811 	msr	BASEPRI, r5
    4d96:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4d9a:	2301      	movs	r3, #1
    4d9c:	b963      	cbnz	r3, 4db8 <z_impl_k_thread_suspend+0x5c>
		if (z_is_thread_queued(thread)) {
    4d9e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4da2:	2b00      	cmp	r3, #0
    4da4:	dae9      	bge.n	4d7a <z_impl_k_thread_suspend+0x1e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4da6:	4621      	mov	r1, r4
    4da8:	480c      	ldr	r0, [pc, #48]	; (4ddc <z_impl_k_thread_suspend+0x80>)
    4daa:	f7ff ff61 	bl	4c70 <z_priq_dumb_remove>
}

static inline void z_reset_thread_states(struct k_thread *thread,
					uint32_t states)
{
	thread->base.thread_state &= ~states;
    4dae:	7b63      	ldrb	r3, [r4, #13]
    4db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4db4:	7363      	strb	r3, [r4, #13]
}

static inline void z_mark_thread_as_not_queued(struct k_thread *thread)
{
	z_reset_thread_states(thread, _THREAD_QUEUED);
}
    4db6:	e7e0      	b.n	4d7a <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    4db8:	4b07      	ldr	r3, [pc, #28]	; (4dd8 <z_impl_k_thread_suspend+0x7c>)
    4dba:	689b      	ldr	r3, [r3, #8]
    4dbc:	42a3      	cmp	r3, r4
    4dbe:	d000      	beq.n	4dc2 <z_impl_k_thread_suspend+0x66>
}
    4dc0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4dc2:	f04f 0320 	mov.w	r3, #32
    4dc6:	f3ef 8011 	mrs	r0, BASEPRI
    4dca:	f383 8811 	msr	BASEPRI, r3
    4dce:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4dd2:	f004 f8fd 	bl	8fd0 <z_reschedule_irqlock>
    4dd6:	e7f3      	b.n	4dc0 <z_impl_k_thread_suspend+0x64>
    4dd8:	20022dfc 	.word	0x20022dfc
    4ddc:	20022e1c 	.word	0x20022e1c

00004de0 <z_thread_single_abort>:
{
    4de0:	b570      	push	{r4, r5, r6, lr}
    4de2:	4605      	mov	r5, r0
	if (thread->fn_abort != NULL) {
    4de4:	6e03      	ldr	r3, [r0, #96]	; 0x60
    4de6:	b103      	cbz	r3, 4dea <z_thread_single_abort+0xa>
		thread->fn_abort();
    4de8:	4798      	blx	r3
    4dea:	f105 0018 	add.w	r0, r5, #24
    4dee:	f004 fa11 	bl	9214 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    4df2:	2300      	movs	r3, #0
    4df4:	f04f 0220 	mov.w	r2, #32
    4df8:	f3ef 8611 	mrs	r6, BASEPRI
    4dfc:	f382 8811 	msr	BASEPRI, r2
    4e00:	f3bf 8f6f 	isb	sy
    4e04:	e01f      	b.n	4e46 <z_thread_single_abort+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4e06:	2201      	movs	r2, #1
    4e08:	e027      	b.n	4e5a <z_thread_single_abort+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq,
    4e0a:	4629      	mov	r1, r5
    4e0c:	482a      	ldr	r0, [pc, #168]	; (4eb8 <z_thread_single_abort+0xd8>)
    4e0e:	f7ff ff2f 	bl	4c70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4e12:	7b6b      	ldrb	r3, [r5, #13]
    4e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4e18:	736b      	strb	r3, [r5, #13]
}
    4e1a:	e024      	b.n	4e66 <z_thread_single_abort+0x86>
			if (z_is_thread_pending(thread)) {
    4e1c:	f013 0f02 	tst.w	r3, #2
    4e20:	d029      	beq.n	4e76 <z_thread_single_abort+0x96>
				_priq_wait_remove(&pended_on(thread)->waitq,
    4e22:	4628      	mov	r0, r5
    4e24:	f004 f8c6 	bl	8fb4 <pended_on>
    4e28:	4629      	mov	r1, r5
    4e2a:	f7ff ff21 	bl	4c70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4e2e:	7b6b      	ldrb	r3, [r5, #13]
    4e30:	f023 0302 	bic.w	r3, r3, #2
    4e34:	736b      	strb	r3, [r5, #13]
				thread->base.pended_on = NULL;
    4e36:	2300      	movs	r3, #0
    4e38:	60ab      	str	r3, [r5, #8]
    4e3a:	e01c      	b.n	4e76 <z_thread_single_abort+0x96>
	__asm__ volatile(
    4e3c:	f386 8811 	msr	BASEPRI, r6
    4e40:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4e44:	2301      	movs	r3, #1
    4e46:	461a      	mov	r2, r3
    4e48:	2b00      	cmp	r3, #0
    4e4a:	d134      	bne.n	4eb6 <z_thread_single_abort+0xd6>
	uint8_t state = thread->base.thread_state;
    4e4c:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4e4e:	f013 0f1f 	tst.w	r3, #31
    4e52:	d102      	bne.n	4e5a <z_thread_single_abort+0x7a>
	return node->next != NULL;
    4e54:	69a9      	ldr	r1, [r5, #24]
    4e56:	2900      	cmp	r1, #0
    4e58:	d0d5      	beq.n	4e06 <z_thread_single_abort+0x26>
		if (z_is_thread_ready(thread)) {
    4e5a:	f012 0f01 	tst.w	r2, #1
    4e5e:	d0dd      	beq.n	4e1c <z_thread_single_abort+0x3c>
			if (z_is_thread_queued(thread)) {
    4e60:	f013 0f80 	tst.w	r3, #128	; 0x80
    4e64:	d1d1      	bne.n	4e0a <z_thread_single_abort+0x2a>
			update_cache(thread == _current);
    4e66:	4b15      	ldr	r3, [pc, #84]	; (4ebc <z_thread_single_abort+0xdc>)
    4e68:	6898      	ldr	r0, [r3, #8]
    4e6a:	42a8      	cmp	r0, r5
    4e6c:	bf14      	ite	ne
    4e6e:	2000      	movne	r0, #0
    4e70:	2001      	moveq	r0, #1
    4e72:	f7ff ff15 	bl	4ca0 <update_cache>
		thread->base.thread_state |= mask;
    4e76:	7b6b      	ldrb	r3, [r5, #13]
    4e78:	f043 0308 	orr.w	r3, r3, #8
    4e7c:	736b      	strb	r3, [r5, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4e7e:	f105 0330 	add.w	r3, r5, #48	; 0x30
	return list->head == list;
    4e82:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e84:	42a3      	cmp	r3, r4
    4e86:	d0d9      	beq.n	4e3c <z_thread_single_abort+0x5c>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    4e88:	2c00      	cmp	r4, #0
    4e8a:	d0d7      	beq.n	4e3c <z_thread_single_abort+0x5c>
    4e8c:	f104 0018 	add.w	r0, r4, #24
    4e90:	f004 f9c0 	bl	9214 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    4e94:	4620      	mov	r0, r4
    4e96:	f004 f88d 	bl	8fb4 <pended_on>
    4e9a:	4621      	mov	r1, r4
    4e9c:	f7ff fee8 	bl	4c70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4ea0:	7b63      	ldrb	r3, [r4, #13]
    4ea2:	f023 0302 	bic.w	r3, r3, #2
    4ea6:	7363      	strb	r3, [r4, #13]
			waiter->base.pended_on = NULL;
    4ea8:	2300      	movs	r3, #0
    4eaa:	60a3      	str	r3, [r4, #8]
    4eac:	67e3      	str	r3, [r4, #124]	; 0x7c
			ready_thread(waiter);
    4eae:	4620      	mov	r0, r4
    4eb0:	f7ff ff18 	bl	4ce4 <ready_thread>
    4eb4:	e7e3      	b.n	4e7e <z_thread_single_abort+0x9e>
}
    4eb6:	bd70      	pop	{r4, r5, r6, pc}
    4eb8:	20022e1c 	.word	0x20022e1c
    4ebc:	20022dfc 	.word	0x20022dfc

00004ec0 <unready_thread>:
{
    4ec0:	b510      	push	{r4, lr}
    4ec2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4ec4:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4ec8:	2b00      	cmp	r3, #0
    4eca:	db08      	blt.n	4ede <unready_thread+0x1e>
	update_cache(thread == _current);
    4ecc:	4b08      	ldr	r3, [pc, #32]	; (4ef0 <unready_thread+0x30>)
    4ece:	6898      	ldr	r0, [r3, #8]
    4ed0:	42a0      	cmp	r0, r4
    4ed2:	bf14      	ite	ne
    4ed4:	2000      	movne	r0, #0
    4ed6:	2001      	moveq	r0, #1
    4ed8:	f7ff fee2 	bl	4ca0 <update_cache>
}
    4edc:	bd10      	pop	{r4, pc}
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    4ede:	4601      	mov	r1, r0
    4ee0:	4804      	ldr	r0, [pc, #16]	; (4ef4 <unready_thread+0x34>)
    4ee2:	f7ff fec5 	bl	4c70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4ee6:	7b63      	ldrb	r3, [r4, #13]
    4ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4eec:	7363      	strb	r3, [r4, #13]
}
    4eee:	e7ed      	b.n	4ecc <unready_thread+0xc>
    4ef0:	20022dfc 	.word	0x20022dfc
    4ef4:	20022e1c 	.word	0x20022e1c

00004ef8 <z_pend_curr>:
{
    4ef8:	b510      	push	{r4, lr}
    4efa:	460c      	mov	r4, r1
    4efc:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4f02:	4804      	ldr	r0, [pc, #16]	; (4f14 <z_pend_curr+0x1c>)
    4f04:	6880      	ldr	r0, [r0, #8]
    4f06:	f004 f8e8 	bl	90da <pend>
    4f0a:	4620      	mov	r0, r4
    4f0c:	f7fd fb6a 	bl	25e4 <arch_swap>
}
    4f10:	bd10      	pop	{r4, pc}
    4f12:	bf00      	nop
    4f14:	20022dfc 	.word	0x20022dfc

00004f18 <z_set_prio>:
{
    4f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f1c:	4604      	mov	r4, r0
    4f1e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    4f20:	2300      	movs	r3, #0
	__asm__ volatile(
    4f22:	f04f 0220 	mov.w	r2, #32
    4f26:	f3ef 8611 	mrs	r6, BASEPRI
    4f2a:	f382 8811 	msr	BASEPRI, r2
    4f2e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    4f32:	4698      	mov	r8, r3
    4f34:	e008      	b.n	4f48 <z_set_prio+0x30>
		if (need_sched) {
    4f36:	f012 0801 	ands.w	r8, r2, #1
    4f3a:	d111      	bne.n	4f60 <z_set_prio+0x48>
			thread->base.prio = prio;
    4f3c:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    4f3e:	f386 8811 	msr	BASEPRI, r6
    4f42:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4f46:	2301      	movs	r3, #1
    4f48:	461a      	mov	r2, r3
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	d136      	bne.n	4fbc <z_set_prio+0xa4>
	uint8_t state = thread->base.thread_state;
    4f4e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4f50:	f013 0f1f 	tst.w	r3, #31
    4f54:	d1ef      	bne.n	4f36 <z_set_prio+0x1e>
	return node->next != NULL;
    4f56:	69a3      	ldr	r3, [r4, #24]
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d1ec      	bne.n	4f36 <z_set_prio+0x1e>
    4f5c:	2201      	movs	r2, #1
    4f5e:	e7ea      	b.n	4f36 <z_set_prio+0x1e>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    4f60:	4d18      	ldr	r5, [pc, #96]	; (4fc4 <z_set_prio+0xac>)
    4f62:	f105 0920 	add.w	r9, r5, #32
    4f66:	4621      	mov	r1, r4
    4f68:	4648      	mov	r0, r9
    4f6a:	f7ff fe81 	bl	4c70 <z_priq_dumb_remove>
				thread->base.prio = prio;
    4f6e:	73a7      	strb	r7, [r4, #14]
	return list->head == list;
    4f70:	6a2d      	ldr	r5, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f72:	454d      	cmp	r5, r9
    4f74:	d020      	beq.n	4fb8 <z_set_prio+0xa0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4f76:	b165      	cbz	r5, 4f92 <z_set_prio+0x7a>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    4f78:	4629      	mov	r1, r5
    4f7a:	4620      	mov	r0, r4
    4f7c:	f004 f81e 	bl	8fbc <z_is_t1_higher_prio_than_t2>
    4f80:	b998      	cbnz	r0, 4faa <z_set_prio+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4f82:	b135      	cbz	r5, 4f92 <z_set_prio+0x7a>
	return (node == list->tail) ? NULL : node->next;
    4f84:	4b0f      	ldr	r3, [pc, #60]	; (4fc4 <z_set_prio+0xac>)
    4f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f88:	429d      	cmp	r5, r3
    4f8a:	d002      	beq.n	4f92 <z_set_prio+0x7a>
    4f8c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4f8e:	2d00      	cmp	r5, #0
    4f90:	d1f1      	bne.n	4f76 <z_set_prio+0x5e>
	node->next = list;
    4f92:	4b0c      	ldr	r3, [pc, #48]	; (4fc4 <z_set_prio+0xac>)
    4f94:	f103 0220 	add.w	r2, r3, #32
    4f98:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
    4f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4f9c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    4f9e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4fa0:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    4fa2:	2001      	movs	r0, #1
    4fa4:	f7ff fe7c 	bl	4ca0 <update_cache>
    4fa8:	e7c9      	b.n	4f3e <z_set_prio+0x26>
	node->prev = successor->prev;
    4faa:	686b      	ldr	r3, [r5, #4]
    4fac:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4fae:	6025      	str	r5, [r4, #0]
	successor->prev->next = node;
    4fb0:	686b      	ldr	r3, [r5, #4]
    4fb2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4fb4:	606c      	str	r4, [r5, #4]
}
    4fb6:	e7f4      	b.n	4fa2 <z_set_prio+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4fb8:	2500      	movs	r5, #0
    4fba:	e7dc      	b.n	4f76 <z_set_prio+0x5e>
}
    4fbc:	4640      	mov	r0, r8
    4fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4fc2:	bf00      	nop
    4fc4:	20022dfc 	.word	0x20022dfc

00004fc8 <z_impl_k_sleep>:

	return 0;
}

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    4fc8:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4fca:	f1b1 3fff 	cmp.w	r1, #4294967295
    4fce:	bf08      	it	eq
    4fd0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    4fd4:	d01a      	beq.n	500c <z_impl_k_sleep+0x44>
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
    4fd6:	f003 ffef 	bl	8fb8 <z_tick_sleep>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
    4fda:	4604      	mov	r4, r0
    4fdc:	17c5      	asrs	r5, r0, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    4fde:	0169      	lsls	r1, r5, #5
    4fe0:	0143      	lsls	r3, r0, #5
    4fe2:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    4fe6:	1a18      	subs	r0, r3, r0
    4fe8:	eb62 0305 	sbc.w	r3, r2, r5
    4fec:	009a      	lsls	r2, r3, #2
    4fee:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    4ff2:	0081      	lsls	r1, r0, #2
    4ff4:	4613      	mov	r3, r2
    4ff6:	1908      	adds	r0, r1, r4
    4ff8:	eb45 0303 	adc.w	r3, r5, r3
    4ffc:	00da      	lsls	r2, r3, #3
    4ffe:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    5002:	00c1      	lsls	r1, r0, #3
    5004:	0bc8      	lsrs	r0, r1, #15
    5006:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    500a:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    500c:	4b03      	ldr	r3, [pc, #12]	; (501c <z_impl_k_sleep+0x54>)
    500e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5010:	f7ff fea4 	bl	4d5c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    5014:	f04f 30ff 	mov.w	r0, #4294967295
    5018:	e7f7      	b.n	500a <z_impl_k_sleep+0x42>
    501a:	bf00      	nop
    501c:	20022dfc 	.word	0x20022dfc

00005020 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5020:	4b01      	ldr	r3, [pc, #4]	; (5028 <z_impl_k_current_get+0x8>)
    5022:	6898      	ldr	r0, [r3, #8]
    5024:	4770      	bx	lr
    5026:	bf00      	nop
    5028:	20022dfc 	.word	0x20022dfc

0000502c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    502c:	b538      	push	{r3, r4, r5, lr}
    502e:	4604      	mov	r4, r0
	__asm__ volatile(
    5030:	f04f 0320 	mov.w	r3, #32
    5034:	f3ef 8511 	mrs	r5, BASEPRI
    5038:	f383 8811 	msr	BASEPRI, r3
    503c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    5040:	f004 f86c 	bl	911c <z_unpend_first_thread>

	if (thread != NULL) {
    5044:	b140      	cbz	r0, 5058 <z_impl_k_sem_give+0x2c>
    5046:	2200      	movs	r2, #0
    5048:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    504a:	f003 ffd7 	bl	8ffc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    504e:	4629      	mov	r1, r5
    5050:	4806      	ldr	r0, [pc, #24]	; (506c <z_impl_k_sem_give+0x40>)
    5052:	f7ff fdf3 	bl	4c3c <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    5056:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5058:	68a3      	ldr	r3, [r4, #8]
    505a:	68e2      	ldr	r2, [r4, #12]
    505c:	4293      	cmp	r3, r2
    505e:	d003      	beq.n	5068 <z_impl_k_sem_give+0x3c>
    5060:	2201      	movs	r2, #1
    5062:	4413      	add	r3, r2
    5064:	60a3      	str	r3, [r4, #8]
}
    5066:	e7f2      	b.n	504e <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5068:	2200      	movs	r2, #0
    506a:	e7fa      	b.n	5062 <z_impl_k_sem_give+0x36>
    506c:	20022e24 	.word	0x20022e24

00005070 <first>:
	return list->head == list;
    5070:	4b03      	ldr	r3, [pc, #12]	; (5080 <first+0x10>)
    5072:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5074:	4298      	cmp	r0, r3
    5076:	d000      	beq.n	507a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    5078:	4770      	bx	lr
    507a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    507c:	e7fc      	b.n	5078 <first+0x8>
    507e:	bf00      	nop
    5080:	20020098 	.word	0x20020098

00005084 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5084:	b130      	cbz	r0, 5094 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    5086:	4a04      	ldr	r2, [pc, #16]	; (5098 <next+0x14>)
    5088:	6852      	ldr	r2, [r2, #4]
    508a:	4290      	cmp	r0, r2
    508c:	d001      	beq.n	5092 <next+0xe>
    508e:	6800      	ldr	r0, [r0, #0]
    5090:	4770      	bx	lr
    5092:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    5094:	4770      	bx	lr
    5096:	bf00      	nop
    5098:	20020098 	.word	0x20020098

0000509c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    509c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    509e:	4b04      	ldr	r3, [pc, #16]	; (50b0 <elapsed+0x14>)
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	b10b      	cbz	r3, 50a8 <elapsed+0xc>
    50a4:	2000      	movs	r0, #0
}
    50a6:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    50a8:	f7fd f9d2 	bl	2450 <z_clock_elapsed>
    50ac:	e7fb      	b.n	50a6 <elapsed+0xa>
    50ae:	bf00      	nop
    50b0:	20022e24 	.word	0x20022e24

000050b4 <z_add_timeout>:
	return ret;
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    50b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50b8:	4680      	mov	r8, r0
    50ba:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    50bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    50c0:	bf08      	it	eq
    50c2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    50c6:	d07e      	beq.n	51c6 <z_add_timeout+0x112>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    50c8:	1c54      	adds	r4, r2, #1
    50ca:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    50ce:	f06f 0301 	mvn.w	r3, #1
    50d2:	1b1e      	subs	r6, r3, r4
    50d4:	f04f 3aff 	mov.w	sl, #4294967295
    50d8:	eb6a 0705 	sbc.w	r7, sl, r5
    50dc:	2e00      	cmp	r6, #0
    50de:	f177 0300 	sbcs.w	r3, r7, #0
    50e2:	da11      	bge.n	5108 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    50e4:	f8c8 9008 	str.w	r9, [r8, #8]
	ticks = MAX(1, ticks);
    50e8:	4626      	mov	r6, r4
    50ea:	462f      	mov	r7, r5
    50ec:	2c01      	cmp	r4, #1
    50ee:	f175 0300 	sbcs.w	r3, r5, #0
    50f2:	db1b      	blt.n	512c <z_add_timeout+0x78>

	LOCKED(&timeout_lock) {
    50f4:	2300      	movs	r3, #0
    50f6:	f04f 0220 	mov.w	r2, #32
    50fa:	f3ef 8911 	mrs	r9, BASEPRI
    50fe:	f382 8811 	msr	BASEPRI, r2
    5102:	f3bf 8f6f 	isb	sy
    5106:	e02e      	b.n	5166 <z_add_timeout+0xb2>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    5108:	f7ff ffc8 	bl	509c <elapsed>
    510c:	4b2f      	ldr	r3, [pc, #188]	; (51cc <z_add_timeout+0x118>)
    510e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5112:	1812      	adds	r2, r2, r0
    5114:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    5118:	4619      	mov	r1, r3
    511a:	18a2      	adds	r2, r4, r2
    511c:	eb45 0101 	adc.w	r1, r5, r1
    5120:	f06f 0301 	mvn.w	r3, #1
    5124:	1a9c      	subs	r4, r3, r2
    5126:	eb6a 0501 	sbc.w	r5, sl, r1
    512a:	e7db      	b.n	50e4 <z_add_timeout+0x30>
	ticks = MAX(1, ticks);
    512c:	2601      	movs	r6, #1
    512e:	2700      	movs	r7, #0
    5130:	e7e0      	b.n	50f4 <z_add_timeout+0x40>
		struct _timeout *t;

		to->dticks = ticks + elapsed();
		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    5132:	ebb4 020a 	subs.w	r2, r4, sl
    5136:	eb65 030b 	sbc.w	r3, r5, fp
    513a:	6102      	str	r2, [r0, #16]
    513c:	6143      	str	r3, [r0, #20]
	node->prev = successor->prev;
    513e:	6843      	ldr	r3, [r0, #4]
    5140:	f8c8 3004 	str.w	r3, [r8, #4]
	node->next = successor;
    5144:	f8c8 0000 	str.w	r0, [r8]
	successor->prev->next = node;
    5148:	6843      	ldr	r3, [r0, #4]
    514a:	f8c3 8000 	str.w	r8, [r3]
	successor->prev = node;
    514e:	f8c0 8004 	str.w	r8, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    5152:	b338      	cbz	r0, 51a4 <z_add_timeout+0xf0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5154:	f7ff ff8c 	bl	5070 <first>
    5158:	4580      	cmp	r8, r0
    515a:	d02e      	beq.n	51ba <z_add_timeout+0x106>
	__asm__ volatile(
    515c:	f389 8811 	msr	BASEPRI, r9
    5160:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    5164:	2301      	movs	r3, #1
    5166:	bb73      	cbnz	r3, 51c6 <z_add_timeout+0x112>
		to->dticks = ticks + elapsed();
    5168:	f7ff ff98 	bl	509c <elapsed>
    516c:	1832      	adds	r2, r6, r0
    516e:	eb47 73e0 	adc.w	r3, r7, r0, asr #31
    5172:	e9c8 2304 	strd	r2, r3, [r8, #16]
		for (t = first(); t != NULL; t = next(t)) {
    5176:	f7ff ff7b 	bl	5070 <first>
    517a:	2800      	cmp	r0, #0
    517c:	d0e9      	beq.n	5152 <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
    517e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5182:	e9d8 ab04 	ldrd	sl, fp, [r8, #16]
    5186:	45a2      	cmp	sl, r4
    5188:	eb7b 0305 	sbcs.w	r3, fp, r5
    518c:	dbd1      	blt.n	5132 <z_add_timeout+0x7e>
			to->dticks -= t->dticks;
    518e:	ebba 0204 	subs.w	r2, sl, r4
    5192:	eb6b 0305 	sbc.w	r3, fp, r5
    5196:	f8c8 2010 	str.w	r2, [r8, #16]
    519a:	f8c8 3014 	str.w	r3, [r8, #20]
		for (t = first(); t != NULL; t = next(t)) {
    519e:	f7ff ff71 	bl	5084 <next>
    51a2:	e7ea      	b.n	517a <z_add_timeout+0xc6>
	node->next = list;
    51a4:	4b0a      	ldr	r3, [pc, #40]	; (51d0 <z_add_timeout+0x11c>)
    51a6:	f8c8 3000 	str.w	r3, [r8]
	node->prev = list->tail;
    51aa:	685a      	ldr	r2, [r3, #4]
    51ac:	f8c8 2004 	str.w	r2, [r8, #4]
	list->tail->next = node;
    51b0:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    51b4:	f8c3 8004 	str.w	r8, [r3, #4]
}
    51b8:	e7cc      	b.n	5154 <z_add_timeout+0xa0>
			z_clock_set_timeout(next_timeout(), false);
    51ba:	f004 f80c 	bl	91d6 <next_timeout>
    51be:	2100      	movs	r1, #0
    51c0:	f7fd f918 	bl	23f4 <z_clock_set_timeout>
    51c4:	e7ca      	b.n	515c <z_add_timeout+0xa8>
		}
	}
}
    51c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51ca:	bf00      	nop
    51cc:	20020258 	.word	0x20020258
    51d0:	20020098 	.word	0x20020098

000051d4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    51d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    51d6:	f04f 0320 	mov.w	r3, #32
    51da:	f3ef 8511 	mrs	r5, BASEPRI
    51de:	f383 8811 	msr	BASEPRI, r3
    51e2:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    51e6:	4b28      	ldr	r3, [pc, #160]	; (5288 <z_clock_announce+0xb4>)
    51e8:	6018      	str	r0, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    51ea:	f7ff ff41 	bl	5070 <first>
    51ee:	4604      	mov	r4, r0
    51f0:	b350      	cbz	r0, 5248 <z_clock_announce+0x74>
    51f2:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    51f6:	4b24      	ldr	r3, [pc, #144]	; (5288 <z_clock_announce+0xb4>)
    51f8:	681b      	ldr	r3, [r3, #0]
    51fa:	17d9      	asrs	r1, r3, #31
    51fc:	42b3      	cmp	r3, r6
    51fe:	eb71 0207 	sbcs.w	r2, r1, r7
    5202:	db21      	blt.n	5248 <z_clock_announce+0x74>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5204:	4a21      	ldr	r2, [pc, #132]	; (528c <z_clock_announce+0xb8>)
    5206:	e9d2 0100 	ldrd	r0, r1, [r2]
    520a:	1980      	adds	r0, r0, r6
    520c:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    5210:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    5214:	1b9b      	subs	r3, r3, r6
    5216:	4a1c      	ldr	r2, [pc, #112]	; (5288 <z_clock_announce+0xb4>)
    5218:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    521a:	2200      	movs	r2, #0
    521c:	2300      	movs	r3, #0
    521e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    5222:	4620      	mov	r0, r4
    5224:	f003 ffbf 	bl	91a6 <remove_timeout>
	__asm__ volatile(
    5228:	f385 8811 	msr	BASEPRI, r5
    522c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    5230:	68a3      	ldr	r3, [r4, #8]
    5232:	4620      	mov	r0, r4
    5234:	4798      	blx	r3
	__asm__ volatile(
    5236:	f04f 0320 	mov.w	r3, #32
    523a:	f3ef 8511 	mrs	r5, BASEPRI
    523e:	f383 8811 	msr	BASEPRI, r3
    5242:	f3bf 8f6f 	isb	sy
    5246:	e7d0      	b.n	51ea <z_clock_announce+0x16>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    5248:	b144      	cbz	r4, 525c <z_clock_announce+0x88>
		first()->dticks -= announce_remaining;
    524a:	4b0f      	ldr	r3, [pc, #60]	; (5288 <z_clock_announce+0xb4>)
    524c:	6819      	ldr	r1, [r3, #0]
    524e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5252:	1a52      	subs	r2, r2, r1
    5254:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    5258:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    525c:	480b      	ldr	r0, [pc, #44]	; (528c <z_clock_announce+0xb8>)
    525e:	490a      	ldr	r1, [pc, #40]	; (5288 <z_clock_announce+0xb4>)
    5260:	680c      	ldr	r4, [r1, #0]
    5262:	e9d0 2300 	ldrd	r2, r3, [r0]
    5266:	1912      	adds	r2, r2, r4
    5268:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    526c:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    5270:	2400      	movs	r4, #0
    5272:	600c      	str	r4, [r1, #0]

	z_clock_set_timeout(next_timeout(), false);
    5274:	f003 ffaf 	bl	91d6 <next_timeout>
    5278:	4621      	mov	r1, r4
    527a:	f7fd f8bb 	bl	23f4 <z_clock_set_timeout>
	__asm__ volatile(
    527e:	f385 8811 	msr	BASEPRI, r5
    5282:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5288:	20022e24 	.word	0x20022e24
    528c:	20020258 	.word	0x20020258

00005290 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    5290:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    5292:	4c06      	ldr	r4, [pc, #24]	; (52ac <statics_init+0x1c>)
    5294:	4b06      	ldr	r3, [pc, #24]	; (52b0 <statics_init+0x20>)
    5296:	429c      	cmp	r4, r3
    5298:	d206      	bcs.n	52a8 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    529a:	68a2      	ldr	r2, [r4, #8]
    529c:	6861      	ldr	r1, [r4, #4]
    529e:	4620      	mov	r0, r4
    52a0:	f003 ffd6 	bl	9250 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    52a4:	3414      	adds	r4, #20
    52a6:	e7f5      	b.n	5294 <statics_init+0x4>
	}
	return 0;
}
    52a8:	2000      	movs	r0, #0
    52aa:	bd10      	pop	{r4, pc}
    52ac:	20020174 	.word	0x20020174
    52b0:	20020174 	.word	0x20020174

000052b4 <nrf_cc3xx_platform_init_no_rng>:
    52b4:	b510      	push	{r4, lr}
    52b6:	4c0a      	ldr	r4, [pc, #40]	; (52e0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    52b8:	6823      	ldr	r3, [r4, #0]
    52ba:	b11b      	cbz	r3, 52c4 <nrf_cc3xx_platform_init_no_rng+0x10>
    52bc:	2301      	movs	r3, #1
    52be:	2000      	movs	r0, #0
    52c0:	6023      	str	r3, [r4, #0]
    52c2:	bd10      	pop	{r4, pc}
    52c4:	f000 f898 	bl	53f8 <CC_LibInitNoRng>
    52c8:	2800      	cmp	r0, #0
    52ca:	d0f7      	beq.n	52bc <nrf_cc3xx_platform_init_no_rng+0x8>
    52cc:	3801      	subs	r0, #1
    52ce:	2806      	cmp	r0, #6
    52d0:	d803      	bhi.n	52da <nrf_cc3xx_platform_init_no_rng+0x26>
    52d2:	4b04      	ldr	r3, [pc, #16]	; (52e4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    52d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    52d8:	bd10      	pop	{r4, pc}
    52da:	4803      	ldr	r0, [pc, #12]	; (52e8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    52dc:	bd10      	pop	{r4, pc}
    52de:	bf00      	nop
    52e0:	20022e28 	.word	0x20022e28
    52e4:	00009fe0 	.word	0x00009fe0
    52e8:	ffff8ffe 	.word	0xffff8ffe

000052ec <nrf_cc3xx_platform_abort>:
    52ec:	f3bf 8f4f 	dsb	sy
    52f0:	4905      	ldr	r1, [pc, #20]	; (5308 <nrf_cc3xx_platform_abort+0x1c>)
    52f2:	4b06      	ldr	r3, [pc, #24]	; (530c <nrf_cc3xx_platform_abort+0x20>)
    52f4:	68ca      	ldr	r2, [r1, #12]
    52f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    52fa:	4313      	orrs	r3, r2
    52fc:	60cb      	str	r3, [r1, #12]
    52fe:	f3bf 8f4f 	dsb	sy
    5302:	bf00      	nop
    5304:	e7fd      	b.n	5302 <nrf_cc3xx_platform_abort+0x16>
    5306:	bf00      	nop
    5308:	e000ed00 	.word	0xe000ed00
    530c:	05fa0004 	.word	0x05fa0004

00005310 <CC_PalAbort>:
    5310:	4b01      	ldr	r3, [pc, #4]	; (5318 <CC_PalAbort+0x8>)
    5312:	685b      	ldr	r3, [r3, #4]
    5314:	4718      	bx	r3
    5316:	bf00      	nop
    5318:	200200a0 	.word	0x200200a0

0000531c <nrf_cc3xx_platform_set_abort>:
    531c:	4b02      	ldr	r3, [pc, #8]	; (5328 <nrf_cc3xx_platform_set_abort+0xc>)
    531e:	e9d0 1200 	ldrd	r1, r2, [r0]
    5322:	e9c3 1200 	strd	r1, r2, [r3]
    5326:	4770      	bx	lr
    5328:	200200a0 	.word	0x200200a0

0000532c <mutex_unlock>:
    532c:	b148      	cbz	r0, 5342 <mutex_unlock+0x16>
    532e:	6843      	ldr	r3, [r0, #4]
    5330:	b12b      	cbz	r3, 533e <mutex_unlock+0x12>
    5332:	f3bf 8f5f 	dmb	sy
    5336:	2300      	movs	r3, #0
    5338:	6003      	str	r3, [r0, #0]
    533a:	4618      	mov	r0, r3
    533c:	4770      	bx	lr
    533e:	4802      	ldr	r0, [pc, #8]	; (5348 <mutex_unlock+0x1c>)
    5340:	4770      	bx	lr
    5342:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5346:	4770      	bx	lr
    5348:	ffff8fea 	.word	0xffff8fea

0000534c <mutex_free>:
    534c:	b510      	push	{r4, lr}
    534e:	4604      	mov	r4, r0
    5350:	b128      	cbz	r0, 535e <mutex_free+0x12>
    5352:	6863      	ldr	r3, [r4, #4]
    5354:	b113      	cbz	r3, 535c <mutex_free+0x10>
    5356:	2300      	movs	r3, #0
    5358:	6023      	str	r3, [r4, #0]
    535a:	6063      	str	r3, [r4, #4]
    535c:	bd10      	pop	{r4, pc}
    535e:	4b02      	ldr	r3, [pc, #8]	; (5368 <mutex_free+0x1c>)
    5360:	4802      	ldr	r0, [pc, #8]	; (536c <mutex_free+0x20>)
    5362:	685b      	ldr	r3, [r3, #4]
    5364:	4798      	blx	r3
    5366:	e7f4      	b.n	5352 <mutex_free+0x6>
    5368:	200200a0 	.word	0x200200a0
    536c:	00009ffc 	.word	0x00009ffc

00005370 <mutex_init>:
    5370:	b510      	push	{r4, lr}
    5372:	4604      	mov	r4, r0
    5374:	b130      	cbz	r0, 5384 <mutex_init+0x14>
    5376:	2200      	movs	r2, #0
    5378:	6863      	ldr	r3, [r4, #4]
    537a:	6022      	str	r2, [r4, #0]
    537c:	f043 0301 	orr.w	r3, r3, #1
    5380:	6063      	str	r3, [r4, #4]
    5382:	bd10      	pop	{r4, pc}
    5384:	4801      	ldr	r0, [pc, #4]	; (538c <mutex_init+0x1c>)
    5386:	f7ff ffc3 	bl	5310 <CC_PalAbort>
    538a:	e7f4      	b.n	5376 <mutex_init+0x6>
    538c:	0000a024 	.word	0x0000a024

00005390 <mutex_lock>:
    5390:	b180      	cbz	r0, 53b4 <mutex_lock+0x24>
    5392:	6843      	ldr	r3, [r0, #4]
    5394:	b163      	cbz	r3, 53b0 <mutex_lock+0x20>
    5396:	2201      	movs	r2, #1
    5398:	e8d0 3fef 	ldaex	r3, [r0]
    539c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    53a0:	2900      	cmp	r1, #0
    53a2:	d1f9      	bne.n	5398 <mutex_lock+0x8>
    53a4:	2b01      	cmp	r3, #1
    53a6:	d0f7      	beq.n	5398 <mutex_lock+0x8>
    53a8:	f3bf 8f5f 	dmb	sy
    53ac:	2000      	movs	r0, #0
    53ae:	4770      	bx	lr
    53b0:	4802      	ldr	r0, [pc, #8]	; (53bc <mutex_lock+0x2c>)
    53b2:	4770      	bx	lr
    53b4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    53b8:	4770      	bx	lr
    53ba:	bf00      	nop
    53bc:	ffff8fea 	.word	0xffff8fea

000053c0 <nrf_cc3xx_platform_set_mutexes>:
    53c0:	b470      	push	{r4, r5, r6}
    53c2:	4b0b      	ldr	r3, [pc, #44]	; (53f0 <nrf_cc3xx_platform_set_mutexes+0x30>)
    53c4:	6806      	ldr	r6, [r0, #0]
    53c6:	68c2      	ldr	r2, [r0, #12]
    53c8:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    53cc:	e9c3 4202 	strd	r4, r2, [r3, #8]
    53d0:	e9c3 6500 	strd	r6, r5, [r3]
    53d4:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    53d8:	680e      	ldr	r6, [r1, #0]
    53da:	4b06      	ldr	r3, [pc, #24]	; (53f4 <nrf_cc3xx_platform_set_mutexes+0x34>)
    53dc:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    53e0:	e9c3 6500 	strd	r6, r5, [r3]
    53e4:	e9c3 4002 	strd	r4, r0, [r3, #8]
    53e8:	611a      	str	r2, [r3, #16]
    53ea:	bc70      	pop	{r4, r5, r6}
    53ec:	4770      	bx	lr
    53ee:	bf00      	nop
    53f0:	200200b0 	.word	0x200200b0
    53f4:	200200c0 	.word	0x200200c0

000053f8 <CC_LibInitNoRng>:
    53f8:	b510      	push	{r4, lr}
    53fa:	f000 f833 	bl	5464 <CC_HalInit>
    53fe:	b120      	cbz	r0, 540a <CC_LibInitNoRng+0x12>
    5400:	2403      	movs	r4, #3
    5402:	f000 f867 	bl	54d4 <CC_PalTerminate>
    5406:	4620      	mov	r0, r4
    5408:	bd10      	pop	{r4, pc}
    540a:	f000 f835 	bl	5478 <CC_PalInit>
    540e:	b990      	cbnz	r0, 5436 <CC_LibInitNoRng+0x3e>
    5410:	f000 f8b0 	bl	5574 <CC_PalPowerSaveModeSelect>
    5414:	b990      	cbnz	r0, 543c <CC_LibInitNoRng+0x44>
    5416:	4b0f      	ldr	r3, [pc, #60]	; (5454 <CC_LibInitNoRng+0x5c>)
    5418:	681b      	ldr	r3, [r3, #0]
    541a:	0e1b      	lsrs	r3, r3, #24
    541c:	2bf0      	cmp	r3, #240	; 0xf0
    541e:	d108      	bne.n	5432 <CC_LibInitNoRng+0x3a>
    5420:	4a0d      	ldr	r2, [pc, #52]	; (5458 <CC_LibInitNoRng+0x60>)
    5422:	4b0e      	ldr	r3, [pc, #56]	; (545c <CC_LibInitNoRng+0x64>)
    5424:	6812      	ldr	r2, [r2, #0]
    5426:	429a      	cmp	r2, r3
    5428:	d00a      	beq.n	5440 <CC_LibInitNoRng+0x48>
    542a:	2407      	movs	r4, #7
    542c:	f000 f81c 	bl	5468 <CC_HalTerminate>
    5430:	e7e7      	b.n	5402 <CC_LibInitNoRng+0xa>
    5432:	2406      	movs	r4, #6
    5434:	e7fa      	b.n	542c <CC_LibInitNoRng+0x34>
    5436:	2404      	movs	r4, #4
    5438:	4620      	mov	r0, r4
    543a:	bd10      	pop	{r4, pc}
    543c:	2400      	movs	r4, #0
    543e:	e7f5      	b.n	542c <CC_LibInitNoRng+0x34>
    5440:	2001      	movs	r0, #1
    5442:	f000 f897 	bl	5574 <CC_PalPowerSaveModeSelect>
    5446:	4604      	mov	r4, r0
    5448:	2800      	cmp	r0, #0
    544a:	d1f7      	bne.n	543c <CC_LibInitNoRng+0x44>
    544c:	4b04      	ldr	r3, [pc, #16]	; (5460 <CC_LibInitNoRng+0x68>)
    544e:	6018      	str	r0, [r3, #0]
    5450:	e7d9      	b.n	5406 <CC_LibInitNoRng+0xe>
    5452:	bf00      	nop
    5454:	50841928 	.word	0x50841928
    5458:	50841a24 	.word	0x50841a24
    545c:	20e00000 	.word	0x20e00000
    5460:	50841a0c 	.word	0x50841a0c

00005464 <CC_HalInit>:
    5464:	2000      	movs	r0, #0
    5466:	4770      	bx	lr

00005468 <CC_HalTerminate>:
    5468:	2000      	movs	r0, #0
    546a:	4770      	bx	lr

0000546c <CC_HalMaskInterrupt>:
    546c:	4b01      	ldr	r3, [pc, #4]	; (5474 <CC_HalMaskInterrupt+0x8>)
    546e:	6018      	str	r0, [r3, #0]
    5470:	4770      	bx	lr
    5472:	bf00      	nop
    5474:	50841a04 	.word	0x50841a04

00005478 <CC_PalInit>:
    5478:	b510      	push	{r4, lr}
    547a:	4811      	ldr	r0, [pc, #68]	; (54c0 <CC_PalInit+0x48>)
    547c:	f000 f848 	bl	5510 <CC_PalMutexCreate>
    5480:	b100      	cbz	r0, 5484 <CC_PalInit+0xc>
    5482:	bd10      	pop	{r4, pc}
    5484:	480f      	ldr	r0, [pc, #60]	; (54c4 <CC_PalInit+0x4c>)
    5486:	f000 f843 	bl	5510 <CC_PalMutexCreate>
    548a:	2800      	cmp	r0, #0
    548c:	d1f9      	bne.n	5482 <CC_PalInit+0xa>
    548e:	4c0e      	ldr	r4, [pc, #56]	; (54c8 <CC_PalInit+0x50>)
    5490:	4620      	mov	r0, r4
    5492:	f000 f83d 	bl	5510 <CC_PalMutexCreate>
    5496:	2800      	cmp	r0, #0
    5498:	d1f3      	bne.n	5482 <CC_PalInit+0xa>
    549a:	4b0c      	ldr	r3, [pc, #48]	; (54cc <CC_PalInit+0x54>)
    549c:	480c      	ldr	r0, [pc, #48]	; (54d0 <CC_PalInit+0x58>)
    549e:	601c      	str	r4, [r3, #0]
    54a0:	f000 f836 	bl	5510 <CC_PalMutexCreate>
    54a4:	4601      	mov	r1, r0
    54a6:	2800      	cmp	r0, #0
    54a8:	d1eb      	bne.n	5482 <CC_PalInit+0xa>
    54aa:	f000 f82d 	bl	5508 <CC_PalDmaInit>
    54ae:	4604      	mov	r4, r0
    54b0:	b108      	cbz	r0, 54b6 <CC_PalInit+0x3e>
    54b2:	4620      	mov	r0, r4
    54b4:	bd10      	pop	{r4, pc}
    54b6:	f000 f83f 	bl	5538 <CC_PalPowerSaveModeInit>
    54ba:	4620      	mov	r0, r4
    54bc:	e7fa      	b.n	54b4 <CC_PalInit+0x3c>
    54be:	bf00      	nop
    54c0:	200200f8 	.word	0x200200f8
    54c4:	200200ec 	.word	0x200200ec
    54c8:	200200f4 	.word	0x200200f4
    54cc:	200200fc 	.word	0x200200fc
    54d0:	200200f0 	.word	0x200200f0

000054d4 <CC_PalTerminate>:
    54d4:	b508      	push	{r3, lr}
    54d6:	4808      	ldr	r0, [pc, #32]	; (54f8 <CC_PalTerminate+0x24>)
    54d8:	f000 f824 	bl	5524 <CC_PalMutexDestroy>
    54dc:	4807      	ldr	r0, [pc, #28]	; (54fc <CC_PalTerminate+0x28>)
    54de:	f000 f821 	bl	5524 <CC_PalMutexDestroy>
    54e2:	4807      	ldr	r0, [pc, #28]	; (5500 <CC_PalTerminate+0x2c>)
    54e4:	f000 f81e 	bl	5524 <CC_PalMutexDestroy>
    54e8:	4806      	ldr	r0, [pc, #24]	; (5504 <CC_PalTerminate+0x30>)
    54ea:	f000 f81b 	bl	5524 <CC_PalMutexDestroy>
    54ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    54f2:	f000 b80b 	b.w	550c <CC_PalDmaTerminate>
    54f6:	bf00      	nop
    54f8:	200200f8 	.word	0x200200f8
    54fc:	200200ec 	.word	0x200200ec
    5500:	200200f4 	.word	0x200200f4
    5504:	200200f0 	.word	0x200200f0

00005508 <CC_PalDmaInit>:
    5508:	2000      	movs	r0, #0
    550a:	4770      	bx	lr

0000550c <CC_PalDmaTerminate>:
    550c:	4770      	bx	lr
    550e:	bf00      	nop

00005510 <CC_PalMutexCreate>:
    5510:	b508      	push	{r3, lr}
    5512:	4b03      	ldr	r3, [pc, #12]	; (5520 <CC_PalMutexCreate+0x10>)
    5514:	6802      	ldr	r2, [r0, #0]
    5516:	681b      	ldr	r3, [r3, #0]
    5518:	6810      	ldr	r0, [r2, #0]
    551a:	4798      	blx	r3
    551c:	2000      	movs	r0, #0
    551e:	bd08      	pop	{r3, pc}
    5520:	200200b0 	.word	0x200200b0

00005524 <CC_PalMutexDestroy>:
    5524:	b508      	push	{r3, lr}
    5526:	4b03      	ldr	r3, [pc, #12]	; (5534 <CC_PalMutexDestroy+0x10>)
    5528:	6802      	ldr	r2, [r0, #0]
    552a:	685b      	ldr	r3, [r3, #4]
    552c:	6810      	ldr	r0, [r2, #0]
    552e:	4798      	blx	r3
    5530:	2000      	movs	r0, #0
    5532:	bd08      	pop	{r3, pc}
    5534:	200200b0 	.word	0x200200b0

00005538 <CC_PalPowerSaveModeInit>:
    5538:	b570      	push	{r4, r5, r6, lr}
    553a:	4c09      	ldr	r4, [pc, #36]	; (5560 <CC_PalPowerSaveModeInit+0x28>)
    553c:	4d09      	ldr	r5, [pc, #36]	; (5564 <CC_PalPowerSaveModeInit+0x2c>)
    553e:	6920      	ldr	r0, [r4, #16]
    5540:	68ab      	ldr	r3, [r5, #8]
    5542:	4798      	blx	r3
    5544:	b118      	cbz	r0, 554e <CC_PalPowerSaveModeInit+0x16>
    5546:	4b08      	ldr	r3, [pc, #32]	; (5568 <CC_PalPowerSaveModeInit+0x30>)
    5548:	4808      	ldr	r0, [pc, #32]	; (556c <CC_PalPowerSaveModeInit+0x34>)
    554a:	685b      	ldr	r3, [r3, #4]
    554c:	4798      	blx	r3
    554e:	2100      	movs	r1, #0
    5550:	4a07      	ldr	r2, [pc, #28]	; (5570 <CC_PalPowerSaveModeInit+0x38>)
    5552:	68eb      	ldr	r3, [r5, #12]
    5554:	6011      	str	r1, [r2, #0]
    5556:	6920      	ldr	r0, [r4, #16]
    5558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    555c:	4718      	bx	r3
    555e:	bf00      	nop
    5560:	200200c0 	.word	0x200200c0
    5564:	200200b0 	.word	0x200200b0
    5568:	200200a0 	.word	0x200200a0
    556c:	0000a048 	.word	0x0000a048
    5570:	20022e3c 	.word	0x20022e3c

00005574 <CC_PalPowerSaveModeSelect>:
    5574:	b570      	push	{r4, r5, r6, lr}
    5576:	4d1a      	ldr	r5, [pc, #104]	; (55e0 <CC_PalPowerSaveModeSelect+0x6c>)
    5578:	4e1a      	ldr	r6, [pc, #104]	; (55e4 <CC_PalPowerSaveModeSelect+0x70>)
    557a:	4604      	mov	r4, r0
    557c:	68b2      	ldr	r2, [r6, #8]
    557e:	6928      	ldr	r0, [r5, #16]
    5580:	4790      	blx	r2
    5582:	b9f0      	cbnz	r0, 55c2 <CC_PalPowerSaveModeSelect+0x4e>
    5584:	b15c      	cbz	r4, 559e <CC_PalPowerSaveModeSelect+0x2a>
    5586:	4c18      	ldr	r4, [pc, #96]	; (55e8 <CC_PalPowerSaveModeSelect+0x74>)
    5588:	6823      	ldr	r3, [r4, #0]
    558a:	b1ab      	cbz	r3, 55b8 <CC_PalPowerSaveModeSelect+0x44>
    558c:	2b01      	cmp	r3, #1
    558e:	d01a      	beq.n	55c6 <CC_PalPowerSaveModeSelect+0x52>
    5590:	3b01      	subs	r3, #1
    5592:	6023      	str	r3, [r4, #0]
    5594:	6928      	ldr	r0, [r5, #16]
    5596:	68f3      	ldr	r3, [r6, #12]
    5598:	4798      	blx	r3
    559a:	2000      	movs	r0, #0
    559c:	bd70      	pop	{r4, r5, r6, pc}
    559e:	4c12      	ldr	r4, [pc, #72]	; (55e8 <CC_PalPowerSaveModeSelect+0x74>)
    55a0:	6821      	ldr	r1, [r4, #0]
    55a2:	b939      	cbnz	r1, 55b4 <CC_PalPowerSaveModeSelect+0x40>
    55a4:	2001      	movs	r0, #1
    55a6:	4b11      	ldr	r3, [pc, #68]	; (55ec <CC_PalPowerSaveModeSelect+0x78>)
    55a8:	4a11      	ldr	r2, [pc, #68]	; (55f0 <CC_PalPowerSaveModeSelect+0x7c>)
    55aa:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    55ae:	6813      	ldr	r3, [r2, #0]
    55b0:	2b00      	cmp	r3, #0
    55b2:	d1fc      	bne.n	55ae <CC_PalPowerSaveModeSelect+0x3a>
    55b4:	3101      	adds	r1, #1
    55b6:	6021      	str	r1, [r4, #0]
    55b8:	68f3      	ldr	r3, [r6, #12]
    55ba:	6928      	ldr	r0, [r5, #16]
    55bc:	4798      	blx	r3
    55be:	2000      	movs	r0, #0
    55c0:	bd70      	pop	{r4, r5, r6, pc}
    55c2:	480c      	ldr	r0, [pc, #48]	; (55f4 <CC_PalPowerSaveModeSelect+0x80>)
    55c4:	bd70      	pop	{r4, r5, r6, pc}
    55c6:	4a0a      	ldr	r2, [pc, #40]	; (55f0 <CC_PalPowerSaveModeSelect+0x7c>)
    55c8:	6813      	ldr	r3, [r2, #0]
    55ca:	2b00      	cmp	r3, #0
    55cc:	d1fc      	bne.n	55c8 <CC_PalPowerSaveModeSelect+0x54>
    55ce:	4a07      	ldr	r2, [pc, #28]	; (55ec <CC_PalPowerSaveModeSelect+0x78>)
    55d0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    55d4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    55d8:	f7ff ff48 	bl	546c <CC_HalMaskInterrupt>
    55dc:	6823      	ldr	r3, [r4, #0]
    55de:	e7d7      	b.n	5590 <CC_PalPowerSaveModeSelect+0x1c>
    55e0:	200200c0 	.word	0x200200c0
    55e4:	200200b0 	.word	0x200200b0
    55e8:	20022e3c 	.word	0x20022e3c
    55ec:	50840000 	.word	0x50840000
    55f0:	50841910 	.word	0x50841910
    55f4:	ffff8fe9 	.word	0xffff8fe9

000055f8 <do_boot>:
{
    55f8:	b570      	push	{r4, r5, r6, lr}
    55fa:	b082      	sub	sp, #8
    55fc:	4604      	mov	r4, r0
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
    55fe:	a901      	add	r1, sp, #4
    5600:	7900      	ldrb	r0, [r0, #4]
    5602:	f7fa ffc5 	bl	590 <flash_device_base>
                                     rsp->br_image_off +
    5606:	68a5      	ldr	r5, [r4, #8]
    vt = (struct arm_vector_table *)(flash_base +
    5608:	9b01      	ldr	r3, [sp, #4]
    560a:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
    560c:	6823      	ldr	r3, [r4, #0]
    560e:	891c      	ldrh	r4, [r3, #8]
                                     rsp->br_image_off +
    5610:	192e      	adds	r6, r5, r4
	__asm__ volatile(
    5612:	f04f 0220 	mov.w	r2, #32
    5616:	f3ef 8311 	mrs	r3, BASEPRI
    561a:	f382 8811 	msr	BASEPRI, r2
    561e:	f3bf 8f6f 	isb	sy
    sys_clock_disable();
    5622:	f001 fbb3 	bl	6d8c <sys_clock_disable>
    nrf_cleanup_peripheral();
    5626:	f7fc f85f 	bl	16e8 <nrf_cleanup_peripheral>
    cleanup_arm_nvic(); /* cleanup NVIC registers */
    562a:	f7fc f83d 	bl	16a8 <cleanup_arm_nvic>
    __set_MSP(vt->msp);
    562e:	592b      	ldr	r3, [r5, r4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5630:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    5634:	2300      	movs	r3, #0
    5636:	f383 8814 	msr	CONTROL, r3
    ((void (*)(void))vt->reset)();
    563a:	6873      	ldr	r3, [r6, #4]
    563c:	4798      	blx	r3
}
    563e:	b002      	add	sp, #8
    5640:	bd70      	pop	{r4, r5, r6, pc}

00005642 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    5642:	b119      	cbz	r1, 564c <flash_area_id_from_multi_image_slot+0xa>
    5644:	2901      	cmp	r1, #1
    5646:	d103      	bne.n	5650 <flash_area_id_from_multi_image_slot+0xe>
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
#if !defined(CONFIG_SINGLE_IMAGE_DFU)
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    5648:	2007      	movs	r0, #7
    564a:	4770      	bx	lr
    switch (slot) {
    564c:	2003      	movs	r0, #3
    564e:	4770      	bx	lr
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
    5650:	f06f 0015 	mvn.w	r0, #21
}
    5654:	4770      	bx	lr

00005656 <flash_area_erased_val>:
#define ERASED_VAL 0xff
uint8_t flash_area_erased_val(const struct flash_area *fap)
{
    (void)fap;
    return ERASED_VAL;
}
    5656:	20ff      	movs	r0, #255	; 0xff
    5658:	4770      	bx	lr

0000565a <flash_area_read_is_empty>:

int flash_area_read_is_empty(const struct flash_area *fa, uint32_t off,
        void *dst, uint32_t len)
{
    565a:	b570      	push	{r4, r5, r6, lr}
    565c:	4616      	mov	r6, r2
    565e:	461d      	mov	r5, r3
    uint8_t i;
    uint8_t *u8dst;
    int rc;

    rc = flash_area_read(fa, off, dst, len);
    5660:	f001 fa38 	bl	6ad4 <flash_area_read>
    if (rc) {
    5664:	b950      	cbnz	r0, 567c <flash_area_read_is_empty+0x22>
        return -1;
    }

    for (i = 0, u8dst = (uint8_t *)dst; i < len; i++) {
    5666:	2100      	movs	r1, #0
    5668:	42a9      	cmp	r1, r5
    566a:	d205      	bcs.n	5678 <flash_area_read_is_empty+0x1e>
        if (u8dst[i] != ERASED_VAL) {
    566c:	5c74      	ldrb	r4, [r6, r1]
    566e:	2cff      	cmp	r4, #255	; 0xff
    5670:	d106      	bne.n	5680 <flash_area_read_is_empty+0x26>
    for (i = 0, u8dst = (uint8_t *)dst; i < len; i++) {
    5672:	3101      	adds	r1, #1
    5674:	b2c9      	uxtb	r1, r1
    5676:	e7f7      	b.n	5668 <flash_area_read_is_empty+0xe>
            return 0;
        }
    }

    return 1;
    5678:	2001      	movs	r0, #1
    567a:	e001      	b.n	5680 <flash_area_read_is_empty+0x26>
        return -1;
    567c:	f04f 30ff 	mov.w	r0, #4294967295
}
    5680:	bd70      	pop	{r4, r5, r6, pc}

00005682 <bootutil_img_hash>:
{
    5682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5686:	b09d      	sub	sp, #116	; 0x74
    5688:	4615      	mov	r5, r2
    568a:	4699      	mov	r9, r3
    568c:	9f24      	ldr	r7, [sp, #144]	; 0x90
    568e:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    5692:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    mbedtls_sha256_init(ctx);
    5694:	a801      	add	r0, sp, #4
    5696:	f003 fb3a 	bl	8d0e <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    569a:	2100      	movs	r1, #0
    569c:	a801      	add	r0, sp, #4
    569e:	f7fe fc7d 	bl	3f9c <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
    56a2:	b114      	cbz	r4, 56aa <bootutil_img_hash+0x28>
    56a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    56a6:	2b00      	cmp	r3, #0
    56a8:	dc06      	bgt.n	56b8 <bootutil_img_hash+0x36>
    size = hdr_size = hdr->ih_hdr_size;
    56aa:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    56ac:	68ee      	ldr	r6, [r5, #12]
    56ae:	4433      	add	r3, r6
    size += hdr->ih_protect_tlv_size;
    56b0:	896e      	ldrh	r6, [r5, #10]
    56b2:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
    56b4:	2500      	movs	r5, #0
    56b6:	e013      	b.n	56e0 <bootutil_img_hash+0x5e>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    56b8:	461a      	mov	r2, r3
    56ba:	4621      	mov	r1, r4
    56bc:	a801      	add	r0, sp, #4
    56be:	f003 fb2c 	bl	8d1a <mbedtls_sha256_update_ret>
}
    56c2:	e7f2      	b.n	56aa <bootutil_img_hash+0x28>
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    56c4:	4623      	mov	r3, r4
    56c6:	463a      	mov	r2, r7
    56c8:	4629      	mov	r1, r5
    56ca:	4648      	mov	r0, r9
    56cc:	f001 fa02 	bl	6ad4 <flash_area_read>
        if (rc) {
    56d0:	4603      	mov	r3, r0
    56d2:	b988      	cbnz	r0, 56f8 <bootutil_img_hash+0x76>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    56d4:	4622      	mov	r2, r4
    56d6:	4639      	mov	r1, r7
    56d8:	a801      	add	r0, sp, #4
    56da:	f003 fb1e 	bl	8d1a <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    56de:	4425      	add	r5, r4
    56e0:	42b5      	cmp	r5, r6
    56e2:	d204      	bcs.n	56ee <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    56e4:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    56e6:	4544      	cmp	r4, r8
    56e8:	d9ec      	bls.n	56c4 <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    56ea:	4644      	mov	r4, r8
    56ec:	e7ea      	b.n	56c4 <bootutil_img_hash+0x42>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    56ee:	9926      	ldr	r1, [sp, #152]	; 0x98
    56f0:	a801      	add	r0, sp, #4
    56f2:	f003 fb55 	bl	8da0 <mbedtls_sha256_finish_ret>
    return 0;
    56f6:	2300      	movs	r3, #0
}
    56f8:	4618      	mov	r0, r3
    56fa:	b01d      	add	sp, #116	; 0x74
    56fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00005700 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    5700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5704:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    5706:	2800      	cmp	r0, #0
    5708:	d04a      	beq.n	57a0 <bootutil_tlv_iter_begin+0xa0>
    570a:	460c      	mov	r4, r1
    570c:	4617      	mov	r7, r2
    570e:	4699      	mov	r9, r3
    5710:	4606      	mov	r6, r0
    5712:	2900      	cmp	r1, #0
    5714:	d047      	beq.n	57a6 <bootutil_tlv_iter_begin+0xa6>
    5716:	2a00      	cmp	r2, #0
    5718:	d048      	beq.n	57ac <bootutil_tlv_iter_begin+0xac>
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    571a:	890d      	ldrh	r5, [r1, #8]
    571c:	68cb      	ldr	r3, [r1, #12]
    571e:	441d      	add	r5, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    5720:	2304      	movs	r3, #4
    5722:	eb0d 0203 	add.w	r2, sp, r3
    5726:	4629      	mov	r1, r5
    5728:	4638      	mov	r0, r7
    572a:	f001 f9d3 	bl	6ad4 <flash_area_read>
    572e:	4680      	mov	r8, r0
    5730:	2800      	cmp	r0, #0
    5732:	d13e      	bne.n	57b2 <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5734:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5738:	f646 1308 	movw	r3, #26888	; 0x6908
    573c:	429a      	cmp	r2, r3
    573e:	d01e      	beq.n	577e <bootutil_tlv_iter_begin+0x7e>
        }

        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    5740:	8963      	ldrh	r3, [r4, #10]
    5742:	2b00      	cmp	r3, #0
    5744:	d13b      	bne.n	57be <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5746:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    574a:	f646 1307 	movw	r3, #26887	; 0x6907
    574e:	429a      	cmp	r2, r3
    5750:	d138      	bne.n	57c4 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    5752:	6034      	str	r4, [r6, #0]
    it->fap = fap;
    5754:	6077      	str	r7, [r6, #4]
    it->type = type;
    5756:	f8a6 9008 	strh.w	r9, [r6, #8]
    it->prot = prot;
    575a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    575e:	72b3      	strb	r3, [r6, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5760:	8963      	ldrh	r3, [r4, #10]
    5762:	442b      	add	r3, r5
    5764:	60f3      	str	r3, [r6, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5766:	8963      	ldrh	r3, [r4, #10]
    5768:	442b      	add	r3, r5
    576a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    576e:	4413      	add	r3, r2
    5770:	6173      	str	r3, [r6, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    5772:	3504      	adds	r5, #4
    5774:	6135      	str	r5, [r6, #16]
    return 0;
}
    5776:	4640      	mov	r0, r8
    5778:	b003      	add	sp, #12
    577a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    577e:	8963      	ldrh	r3, [r4, #10]
    5780:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5784:	428b      	cmp	r3, r1
    5786:	d117      	bne.n	57b8 <bootutil_tlv_iter_begin+0xb8>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    5788:	2304      	movs	r3, #4
    578a:	eb0d 0203 	add.w	r2, sp, r3
    578e:	4429      	add	r1, r5
    5790:	4638      	mov	r0, r7
    5792:	f001 f99f 	bl	6ad4 <flash_area_read>
    5796:	2800      	cmp	r0, #0
    5798:	d0d5      	beq.n	5746 <bootutil_tlv_iter_begin+0x46>
            return -1;
    579a:	f04f 38ff 	mov.w	r8, #4294967295
    579e:	e7ea      	b.n	5776 <bootutil_tlv_iter_begin+0x76>
        return -1;
    57a0:	f04f 38ff 	mov.w	r8, #4294967295
    57a4:	e7e7      	b.n	5776 <bootutil_tlv_iter_begin+0x76>
    57a6:	f04f 38ff 	mov.w	r8, #4294967295
    57aa:	e7e4      	b.n	5776 <bootutil_tlv_iter_begin+0x76>
    57ac:	f04f 38ff 	mov.w	r8, #4294967295
    57b0:	e7e1      	b.n	5776 <bootutil_tlv_iter_begin+0x76>
        return -1;
    57b2:	f04f 38ff 	mov.w	r8, #4294967295
    57b6:	e7de      	b.n	5776 <bootutil_tlv_iter_begin+0x76>
            return -1;
    57b8:	f04f 38ff 	mov.w	r8, #4294967295
    57bc:	e7db      	b.n	5776 <bootutil_tlv_iter_begin+0x76>
        return -1;
    57be:	f04f 38ff 	mov.w	r8, #4294967295
    57c2:	e7d8      	b.n	5776 <bootutil_tlv_iter_begin+0x76>
        return -1;
    57c4:	f04f 38ff 	mov.w	r8, #4294967295
    57c8:	e7d5      	b.n	5776 <bootutil_tlv_iter_begin+0x76>

000057ca <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    57ca:	2800      	cmp	r0, #0
    57cc:	d04d      	beq.n	586a <bootutil_tlv_iter_next+0xa0>
{
    57ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    57d0:	b083      	sub	sp, #12
    57d2:	460f      	mov	r7, r1
    57d4:	4616      	mov	r6, r2
    57d6:	461d      	mov	r5, r3
    57d8:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    57da:	6803      	ldr	r3, [r0, #0]
    57dc:	2b00      	cmp	r3, #0
    57de:	d048      	beq.n	5872 <bootutil_tlv_iter_next+0xa8>
    57e0:	6843      	ldr	r3, [r0, #4]
    57e2:	bb0b      	cbnz	r3, 5828 <bootutil_tlv_iter_next+0x5e>
        return -1;
    57e4:	f04f 31ff 	mov.w	r1, #4294967295
    57e8:	e03a      	b.n	5860 <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    57ea:	2304      	movs	r3, #4
    57ec:	eb0d 0203 	add.w	r2, sp, r3
    57f0:	6921      	ldr	r1, [r4, #16]
    57f2:	6860      	ldr	r0, [r4, #4]
    57f4:	f001 f96e 	bl	6ad4 <flash_area_read>
        if (rc) {
    57f8:	4601      	mov	r1, r0
    57fa:	2800      	cmp	r0, #0
    57fc:	d13c      	bne.n	5878 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    57fe:	7aa3      	ldrb	r3, [r4, #10]
    5800:	b11b      	cbz	r3, 580a <bootutil_tlv_iter_next+0x40>
    5802:	6922      	ldr	r2, [r4, #16]
    5804:	68e3      	ldr	r3, [r4, #12]
    5806:	429a      	cmp	r2, r3
    5808:	d239      	bcs.n	587e <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    580a:	8923      	ldrh	r3, [r4, #8]
    580c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5810:	4293      	cmp	r3, r2
    5812:	d017      	beq.n	5844 <bootutil_tlv_iter_next+0x7a>
    5814:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5818:	4293      	cmp	r3, r2
    581a:	d013      	beq.n	5844 <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    581c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    5820:	6923      	ldr	r3, [r4, #16]
    5822:	4418      	add	r0, r3
    5824:	3004      	adds	r0, #4
    5826:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    5828:	6920      	ldr	r0, [r4, #16]
    582a:	6963      	ldr	r3, [r4, #20]
    582c:	4298      	cmp	r0, r3
    582e:	d21a      	bcs.n	5866 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    5830:	6823      	ldr	r3, [r4, #0]
    5832:	895b      	ldrh	r3, [r3, #10]
    5834:	2b00      	cmp	r3, #0
    5836:	d0d8      	beq.n	57ea <bootutil_tlv_iter_next+0x20>
    5838:	68e3      	ldr	r3, [r4, #12]
    583a:	4283      	cmp	r3, r0
    583c:	d1d5      	bne.n	57ea <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    583e:	3004      	adds	r0, #4
    5840:	6120      	str	r0, [r4, #16]
    5842:	e7d2      	b.n	57ea <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    5844:	b115      	cbz	r5, 584c <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    5846:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    584a:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    584c:	6923      	ldr	r3, [r4, #16]
    584e:	3304      	adds	r3, #4
    5850:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    5852:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5856:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    5858:	6922      	ldr	r2, [r4, #16]
    585a:	4413      	add	r3, r2
    585c:	3304      	adds	r3, #4
    585e:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    5860:	4608      	mov	r0, r1
    5862:	b003      	add	sp, #12
    5864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    5866:	2101      	movs	r1, #1
    5868:	e7fa      	b.n	5860 <bootutil_tlv_iter_next+0x96>
        return -1;
    586a:	f04f 31ff 	mov.w	r1, #4294967295
}
    586e:	4608      	mov	r0, r1
    5870:	4770      	bx	lr
        return -1;
    5872:	f04f 31ff 	mov.w	r1, #4294967295
    5876:	e7f3      	b.n	5860 <bootutil_tlv_iter_next+0x96>
            return -1;
    5878:	f04f 31ff 	mov.w	r1, #4294967295
    587c:	e7f0      	b.n	5860 <bootutil_tlv_iter_next+0x96>
            return 1;
    587e:	2101      	movs	r1, #1
    5880:	e7ee      	b.n	5860 <bootutil_tlv_iter_next+0x96>

00005882 <bootutil_parse_rsakey>:
{
    5882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5886:	b084      	sub	sp, #16
    5888:	4604      	mov	r4, r0
    588a:	460e      	mov	r6, r1
    588c:	4615      	mov	r5, r2
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
    588e:	2330      	movs	r3, #48	; 0x30
    5890:	aa03      	add	r2, sp, #12
    5892:	4629      	mov	r1, r5
    5894:	4630      	mov	r0, r6
    5896:	f001 ff19 	bl	76cc <mbedtls_asn1_get_tag>
    589a:	bba8      	cbnz	r0, 5908 <bootutil_parse_rsakey+0x86>
    if (*p + len != end) {
    589c:	6833      	ldr	r3, [r6, #0]
    589e:	9a03      	ldr	r2, [sp, #12]
    58a0:	4413      	add	r3, r2
    58a2:	42ab      	cmp	r3, r5
    58a4:	d133      	bne.n	590e <bootutil_parse_rsakey+0x8c>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    58a6:	f104 0708 	add.w	r7, r4, #8
    58aa:	463a      	mov	r2, r7
    58ac:	4629      	mov	r1, r5
    58ae:	4630      	mov	r0, r6
    58b0:	f001 ff1f 	bl	76f2 <mbedtls_asn1_get_mpi>
    58b4:	bb28      	cbnz	r0, 5902 <bootutil_parse_rsakey+0x80>
      (rc = mbedtls_asn1_get_mpi(p, end, &ctx->E)) != 0) {
    58b6:	f104 0814 	add.w	r8, r4, #20
    58ba:	4642      	mov	r2, r8
    58bc:	4629      	mov	r1, r5
    58be:	4630      	mov	r0, r6
    58c0:	f001 ff17 	bl	76f2 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    58c4:	b9e8      	cbnz	r0, 5902 <bootutil_parse_rsakey+0x80>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    58c6:	4638      	mov	r0, r7
    58c8:	f002 fa91 	bl	7dee <mbedtls_mpi_size>
    58cc:	6060      	str	r0, [r4, #4]
    if (*p != end) {
    58ce:	6833      	ldr	r3, [r6, #0]
    58d0:	42ab      	cmp	r3, r5
    58d2:	d11f      	bne.n	5914 <bootutil_parse_rsakey+0x92>
    rc = mbedtls_rsa_import(ctx, &ctx->N, NULL, NULL, NULL, &ctx->E);
    58d4:	f8cd 8004 	str.w	r8, [sp, #4]
    58d8:	2200      	movs	r2, #0
    58da:	9200      	str	r2, [sp, #0]
    58dc:	4613      	mov	r3, r2
    58de:	4639      	mov	r1, r7
    58e0:	4620      	mov	r0, r4
    58e2:	f003 f98f 	bl	8c04 <mbedtls_rsa_import>
    if (rc != 0) {
    58e6:	b9c0      	cbnz	r0, 591a <bootutil_parse_rsakey+0x98>
    rc = mbedtls_rsa_check_pubkey(ctx);
    58e8:	4620      	mov	r0, r4
    58ea:	f7fe faeb 	bl	3ec4 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
    58ee:	4605      	mov	r5, r0
    58f0:	b9b0      	cbnz	r0, 5920 <bootutil_parse_rsakey+0x9e>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    58f2:	4638      	mov	r0, r7
    58f4:	f002 fa7b 	bl	7dee <mbedtls_mpi_size>
    58f8:	6060      	str	r0, [r4, #4]
}
    58fa:	4628      	mov	r0, r5
    58fc:	b004      	add	sp, #16
    58fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -3;
    5902:	f06f 0502 	mvn.w	r5, #2
    5906:	e7f8      	b.n	58fa <bootutil_parse_rsakey+0x78>
        return -1;
    5908:	f04f 35ff 	mov.w	r5, #4294967295
    590c:	e7f5      	b.n	58fa <bootutil_parse_rsakey+0x78>
        return -2;
    590e:	f06f 0501 	mvn.w	r5, #1
    5912:	e7f2      	b.n	58fa <bootutil_parse_rsakey+0x78>
        return -4;
    5914:	f06f 0503 	mvn.w	r5, #3
    5918:	e7ef      	b.n	58fa <bootutil_parse_rsakey+0x78>
        return -5;
    591a:	f06f 0504 	mvn.w	r5, #4
    591e:	e7ec      	b.n	58fa <bootutil_parse_rsakey+0x78>
        return -6;
    5920:	f06f 0505 	mvn.w	r5, #5
    5924:	e7e9      	b.n	58fa <bootutil_parse_rsakey+0x78>

00005926 <pss_mgf1>:
{
    5926:	b5f0      	push	{r4, r5, r6, r7, lr}
    5928:	b0a5      	sub	sp, #148	; 0x94
    592a:	4606      	mov	r6, r0
    592c:	460f      	mov	r7, r1
    uint8_t counter[4] = { 0, 0, 0, 0 };
    592e:	2300      	movs	r3, #0
    5930:	9308      	str	r3, [sp, #32]
    int count = PSS_MASK_LEN;
    5932:	24df      	movs	r4, #223	; 0xdf
    while (count > 0) {
    5934:	e007      	b.n	5946 <pss_mgf1+0x20>
            bytes = count;
    5936:	4625      	mov	r5, r4
        memcpy(mask, htmp, bytes);
    5938:	462a      	mov	r2, r5
    593a:	4669      	mov	r1, sp
    593c:	4630      	mov	r0, r6
    593e:	f001 fafc 	bl	6f3a <memcpy>
        mask += bytes;
    5942:	442e      	add	r6, r5
        count -= bytes;
    5944:	1b64      	subs	r4, r4, r5
    while (count > 0) {
    5946:	2c00      	cmp	r4, #0
    5948:	dd1d      	ble.n	5986 <pss_mgf1+0x60>
    mbedtls_sha256_init(ctx);
    594a:	a809      	add	r0, sp, #36	; 0x24
    594c:	f003 f9df 	bl	8d0e <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    5950:	2100      	movs	r1, #0
    5952:	a809      	add	r0, sp, #36	; 0x24
    5954:	f7fe fb22 	bl	3f9c <mbedtls_sha256_starts_ret>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    5958:	2220      	movs	r2, #32
    595a:	4639      	mov	r1, r7
    595c:	a809      	add	r0, sp, #36	; 0x24
    595e:	f003 f9dc 	bl	8d1a <mbedtls_sha256_update_ret>
    5962:	2204      	movs	r2, #4
    5964:	a908      	add	r1, sp, #32
    5966:	a809      	add	r0, sp, #36	; 0x24
    5968:	f003 f9d7 	bl	8d1a <mbedtls_sha256_update_ret>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    596c:	4669      	mov	r1, sp
    596e:	a809      	add	r0, sp, #36	; 0x24
    5970:	f003 fa16 	bl	8da0 <mbedtls_sha256_finish_ret>
        counter[3]++;
    5974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    5978:	3301      	adds	r3, #1
    597a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        if (bytes > count)
    597e:	2c1f      	cmp	r4, #31
    5980:	ddd9      	ble.n	5936 <pss_mgf1+0x10>
        bytes = PSS_HLEN;
    5982:	2520      	movs	r5, #32
    5984:	e7d8      	b.n	5938 <pss_mgf1+0x12>
}
    5986:	b025      	add	sp, #148	; 0x94
    5988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000598a <boot_flag_decode>:
    if (flag != BOOT_FLAG_SET) {
    598a:	2801      	cmp	r0, #1
    598c:	d100      	bne.n	5990 <boot_flag_decode+0x6>
}
    598e:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    5990:	2002      	movs	r0, #2
    5992:	e7fc      	b.n	598e <boot_flag_decode+0x4>

00005994 <boot_write_trailer>:
{
    5994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5998:	b083      	sub	sp, #12
    599a:	4606      	mov	r6, r0
    599c:	4688      	mov	r8, r1
    599e:	4617      	mov	r7, r2
    59a0:	461c      	mov	r4, r3
    align = flash_area_align(fap);
    59a2:	f001 f914 	bl	6bce <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    59a6:	2c08      	cmp	r4, #8
    59a8:	d820      	bhi.n	59ec <boot_write_trailer+0x58>
    59aa:	4605      	mov	r5, r0
    59ac:	2808      	cmp	r0, #8
    59ae:	d902      	bls.n	59b6 <boot_write_trailer+0x22>
        return -1;
    59b0:	f04f 30ff 	mov.w	r0, #4294967295
    59b4:	e01c      	b.n	59f0 <boot_write_trailer+0x5c>
    erased_val = flash_area_erased_val(fap);
    59b6:	4630      	mov	r0, r6
    59b8:	f7ff fe4d 	bl	5656 <flash_area_erased_val>
    59bc:	4681      	mov	r9, r0
    if (align < inlen) {
    59be:	42a5      	cmp	r5, r4
    59c0:	d200      	bcs.n	59c4 <boot_write_trailer+0x30>
        align = inlen;
    59c2:	4625      	mov	r5, r4
    memcpy(buf, inbuf, inlen);
    59c4:	4622      	mov	r2, r4
    59c6:	4639      	mov	r1, r7
    59c8:	4668      	mov	r0, sp
    59ca:	f001 fab6 	bl	6f3a <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    59ce:	1b2a      	subs	r2, r5, r4
    59d0:	4649      	mov	r1, r9
    59d2:	eb0d 0004 	add.w	r0, sp, r4
    59d6:	f001 fad4 	bl	6f82 <memset>
    rc = flash_area_write(fap, off, buf, align);
    59da:	462b      	mov	r3, r5
    59dc:	466a      	mov	r2, sp
    59de:	4641      	mov	r1, r8
    59e0:	4630      	mov	r0, r6
    59e2:	f001 f896 	bl	6b12 <flash_area_write>
    if (rc != 0) {
    59e6:	b118      	cbz	r0, 59f0 <boot_write_trailer+0x5c>
        return BOOT_EFLASH;
    59e8:	2001      	movs	r0, #1
    59ea:	e001      	b.n	59f0 <boot_write_trailer+0x5c>
        return -1;
    59ec:	f04f 30ff 	mov.w	r0, #4294967295
}
    59f0:	b003      	add	sp, #12
    59f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000059f6 <boot_write_trailer_flag>:
{
    59f6:	b500      	push	{lr}
    59f8:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
    59fa:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    59fe:	2301      	movs	r3, #1
    5a00:	aa01      	add	r2, sp, #4
    5a02:	f7ff ffc7 	bl	5994 <boot_write_trailer>
}
    5a06:	b003      	add	sp, #12
    5a08:	f85d fb04 	ldr.w	pc, [sp], #4

00005a0c <boot_magic_compatible_check>:
    switch (tbl_val) {
    5a0c:	2804      	cmp	r0, #4
    5a0e:	d00a      	beq.n	5a26 <boot_magic_compatible_check+0x1a>
    5a10:	2805      	cmp	r0, #5
    5a12:	d103      	bne.n	5a1c <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    5a14:	1e48      	subs	r0, r1, #1
    5a16:	bf18      	it	ne
    5a18:	2001      	movne	r0, #1
    5a1a:	4770      	bx	lr
        return tbl_val == val;
    5a1c:	4288      	cmp	r0, r1
    5a1e:	bf14      	ite	ne
    5a20:	2000      	movne	r0, #0
    5a22:	2001      	moveq	r0, #1
    5a24:	4770      	bx	lr
    switch (tbl_val) {
    5a26:	2001      	movs	r0, #1
}
    5a28:	4770      	bx	lr

00005a2a <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    5a2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    5a2e:	01c0      	lsls	r0, r0, #7
    5a30:	4770      	bx	lr

00005a32 <boot_trailer_sz>:
{
    5a32:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    5a34:	f7ff fff9 	bl	5a2a <boot_status_sz>
}
    5a38:	3030      	adds	r0, #48	; 0x30
    5a3a:	bd08      	pop	{r3, pc}

00005a3c <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    5a3c:	780b      	ldrb	r3, [r1, #0]
    5a3e:	2b03      	cmp	r3, #3
    5a40:	d007      	beq.n	5a52 <boot_status_entries+0x16>
    5a42:	2b07      	cmp	r3, #7
    5a44:	d102      	bne.n	5a4c <boot_status_entries+0x10>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    5a46:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    5a4a:	4770      	bx	lr
    return -1;
    5a4c:	f04f 30ff 	mov.w	r0, #4294967295
    5a50:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    5a52:	f44f 70c0 	mov.w	r0, #384	; 0x180
    5a56:	4770      	bx	lr

00005a58 <boot_status_off>:
{
    5a58:	b510      	push	{r4, lr}
    5a5a:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    5a5c:	f001 f8b7 	bl	6bce <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    5a60:	f7ff ffe7 	bl	5a32 <boot_trailer_sz>
    return fap->fa_size - off_from_end;
    5a64:	68a3      	ldr	r3, [r4, #8]
}
    5a66:	1a18      	subs	r0, r3, r0
    5a68:	bd10      	pop	{r4, pc}

00005a6a <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    5a6a:	6880      	ldr	r0, [r0, #8]
}
    5a6c:	3828      	subs	r0, #40	; 0x28
    5a6e:	4770      	bx	lr

00005a70 <boot_read_swap_state>:
{
    5a70:	b530      	push	{r4, r5, lr}
    5a72:	b087      	sub	sp, #28
    5a74:	4605      	mov	r5, r0
    5a76:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    5a78:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    5a7a:	2310      	movs	r3, #16
    5a7c:	aa02      	add	r2, sp, #8
    5a7e:	3910      	subs	r1, #16
    5a80:	f7ff fdeb 	bl	565a <flash_area_read_is_empty>
    if (rc < 0) {
    5a84:	2800      	cmp	r0, #0
    5a86:	db4a      	blt.n	5b1e <boot_read_swap_state+0xae>
    if (rc == 1) {
    5a88:	2801      	cmp	r0, #1
    5a8a:	d13c      	bne.n	5b06 <boot_read_swap_state+0x96>
        state->magic = BOOT_MAGIC_UNSET;
    5a8c:	2303      	movs	r3, #3
    5a8e:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
    5a90:	4628      	mov	r0, r5
    5a92:	f7ff ffea 	bl	5a6a <boot_swap_info_off>
    5a96:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    5a98:	2301      	movs	r3, #1
    5a9a:	f10d 0207 	add.w	r2, sp, #7
    5a9e:	4628      	mov	r0, r5
    5aa0:	f7ff fddb 	bl	565a <flash_area_read_is_empty>
    if (rc < 0) {
    5aa4:	2800      	cmp	r0, #0
    5aa6:	db3d      	blt.n	5b24 <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5aa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5aac:	f003 020f 	and.w	r2, r3, #15
    5ab0:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    5ab2:	091b      	lsrs	r3, r3, #4
    5ab4:	7123      	strb	r3, [r4, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    5ab6:	2801      	cmp	r0, #1
    5ab8:	d001      	beq.n	5abe <boot_read_swap_state+0x4e>
    5aba:	2a04      	cmp	r2, #4
    5abc:	d903      	bls.n	5ac6 <boot_read_swap_state+0x56>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    5abe:	2301      	movs	r3, #1
    5ac0:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    5ac2:	2300      	movs	r3, #0
    5ac4:	7123      	strb	r3, [r4, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    5ac6:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    5ac8:	2301      	movs	r3, #1
    5aca:	1ca2      	adds	r2, r4, #2
    5acc:	3920      	subs	r1, #32
    5ace:	4628      	mov	r0, r5
    5ad0:	f7ff fdc3 	bl	565a <flash_area_read_is_empty>
    if (rc < 0) {
    5ad4:	2800      	cmp	r0, #0
    5ad6:	db27      	blt.n	5b28 <boot_read_swap_state+0xb8>
    if (rc == 1) {
    5ad8:	2801      	cmp	r0, #1
    5ada:	d019      	beq.n	5b10 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
    5adc:	78a0      	ldrb	r0, [r4, #2]
    5ade:	f7ff ff54 	bl	598a <boot_flag_decode>
    5ae2:	70a0      	strb	r0, [r4, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    5ae4:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    5ae6:	2301      	movs	r3, #1
    5ae8:	1ce2      	adds	r2, r4, #3
    5aea:	3918      	subs	r1, #24
    5aec:	4628      	mov	r0, r5
    5aee:	f7ff fdb4 	bl	565a <flash_area_read_is_empty>
    if (rc < 0) {
    5af2:	2800      	cmp	r0, #0
    5af4:	db1a      	blt.n	5b2c <boot_read_swap_state+0xbc>
    if (rc == 1) {
    5af6:	2801      	cmp	r0, #1
    5af8:	d00d      	beq.n	5b16 <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
    5afa:	78e0      	ldrb	r0, [r4, #3]
    5afc:	f7ff ff45 	bl	598a <boot_flag_decode>
    5b00:	70e0      	strb	r0, [r4, #3]
    return 0;
    5b02:	2000      	movs	r0, #0
    5b04:	e00c      	b.n	5b20 <boot_read_swap_state+0xb0>
        state->magic = boot_magic_decode(magic);
    5b06:	a802      	add	r0, sp, #8
    5b08:	f7fa fefc 	bl	904 <boot_magic_decode>
    5b0c:	7020      	strb	r0, [r4, #0]
    5b0e:	e7bf      	b.n	5a90 <boot_read_swap_state+0x20>
        state->copy_done = BOOT_FLAG_UNSET;
    5b10:	2303      	movs	r3, #3
    5b12:	70a3      	strb	r3, [r4, #2]
    5b14:	e7e6      	b.n	5ae4 <boot_read_swap_state+0x74>
        state->image_ok = BOOT_FLAG_UNSET;
    5b16:	2303      	movs	r3, #3
    5b18:	70e3      	strb	r3, [r4, #3]
    return 0;
    5b1a:	2000      	movs	r0, #0
    5b1c:	e000      	b.n	5b20 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    5b1e:	2001      	movs	r0, #1
}
    5b20:	b007      	add	sp, #28
    5b22:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    5b24:	2001      	movs	r0, #1
    5b26:	e7fb      	b.n	5b20 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    5b28:	2001      	movs	r0, #1
    5b2a:	e7f9      	b.n	5b20 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    5b2c:	2001      	movs	r0, #1
    5b2e:	e7f7      	b.n	5b20 <boot_read_swap_state+0xb0>

00005b30 <boot_read_swap_state_by_id>:
{
    5b30:	b510      	push	{r4, lr}
    5b32:	b082      	sub	sp, #8
    5b34:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    5b36:	a901      	add	r1, sp, #4
    5b38:	b2c0      	uxtb	r0, r0
    5b3a:	f7fc fa0d 	bl	1f58 <flash_area_open>
    if (rc != 0) {
    5b3e:	b118      	cbz	r0, 5b48 <boot_read_swap_state_by_id+0x18>
        return BOOT_EFLASH;
    5b40:	2401      	movs	r4, #1
}
    5b42:	4620      	mov	r0, r4
    5b44:	b002      	add	sp, #8
    5b46:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    5b48:	4621      	mov	r1, r4
    5b4a:	9801      	ldr	r0, [sp, #4]
    5b4c:	f7ff ff90 	bl	5a70 <boot_read_swap_state>
    5b50:	4604      	mov	r4, r0
    flash_area_close(fap);
    5b52:	9801      	ldr	r0, [sp, #4]
    5b54:	f000 ffbd 	bl	6ad2 <flash_area_close>
    return rc;
    5b58:	e7f3      	b.n	5b42 <boot_read_swap_state_by_id+0x12>

00005b5a <boot_read_swap_size>:
{
    5b5a:	b530      	push	{r4, r5, lr}
    5b5c:	b083      	sub	sp, #12
    5b5e:	460c      	mov	r4, r1
    rc = boot_find_status(image_index, &fap);
    5b60:	a901      	add	r1, sp, #4
    5b62:	f7fa fedb 	bl	91c <boot_find_status>
    if (rc == 0) {
    5b66:	4605      	mov	r5, r0
    5b68:	b110      	cbz	r0, 5b70 <boot_read_swap_size+0x16>
}
    5b6a:	4628      	mov	r0, r5
    5b6c:	b003      	add	sp, #12
    5b6e:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    5b70:	9d01      	ldr	r5, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5b72:	4628      	mov	r0, r5
    5b74:	f7ff ff79 	bl	5a6a <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    5b78:	2304      	movs	r3, #4
    5b7a:	4622      	mov	r2, r4
    5b7c:	f1a0 0108 	sub.w	r1, r0, #8
    5b80:	4628      	mov	r0, r5
    5b82:	f000 ffa7 	bl	6ad4 <flash_area_read>
    5b86:	4605      	mov	r5, r0
        flash_area_close(fap);
    5b88:	9801      	ldr	r0, [sp, #4]
    5b8a:	f000 ffa2 	bl	6ad2 <flash_area_close>
    return rc;
    5b8e:	e7ec      	b.n	5b6a <boot_read_swap_size+0x10>

00005b90 <boot_write_copy_done>:
{
    5b90:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    5b92:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5b94:	2201      	movs	r2, #1
    5b96:	3920      	subs	r1, #32
    5b98:	f7ff ff2d 	bl	59f6 <boot_write_trailer_flag>
}
    5b9c:	bd08      	pop	{r3, pc}

00005b9e <boot_write_image_ok>:
{
    5b9e:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    5ba0:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5ba2:	2201      	movs	r2, #1
    5ba4:	3918      	subs	r1, #24
    5ba6:	f7ff ff26 	bl	59f6 <boot_write_trailer_flag>
}
    5baa:	bd08      	pop	{r3, pc}

00005bac <boot_write_swap_info>:
{
    5bac:	b510      	push	{r4, lr}
    5bae:	b082      	sub	sp, #8
    5bb0:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    5bb2:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    5bb6:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    5bba:	f7ff ff56 	bl	5a6a <boot_swap_info_off>
    5bbe:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    5bc0:	2301      	movs	r3, #1
    5bc2:	f10d 0207 	add.w	r2, sp, #7
    5bc6:	4620      	mov	r0, r4
    5bc8:	f7ff fee4 	bl	5994 <boot_write_trailer>
}
    5bcc:	b002      	add	sp, #8
    5bce:	bd10      	pop	{r4, pc}

00005bd0 <boot_write_swap_size>:
{
    5bd0:	b510      	push	{r4, lr}
    5bd2:	b082      	sub	sp, #8
    5bd4:	4604      	mov	r4, r0
    5bd6:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5bd8:	f7ff ff47 	bl	5a6a <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    5bdc:	2304      	movs	r3, #4
    5bde:	eb0d 0203 	add.w	r2, sp, r3
    5be2:	f1a0 0108 	sub.w	r1, r0, #8
    5be6:	4620      	mov	r0, r4
    5be8:	f7ff fed4 	bl	5994 <boot_write_trailer>
}
    5bec:	b002      	add	sp, #8
    5bee:	bd10      	pop	{r4, pc}

00005bf0 <boot_write_sz>:
{
    5bf0:	b508      	push	{r3, lr}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5bf2:	6a00      	ldr	r0, [r0, #32]
    5bf4:	f000 ffeb 	bl	6bce <flash_area_align>
}
    5bf8:	bd08      	pop	{r3, pc}

00005bfa <boot_read_image_size>:
{
    5bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bfe:	b082      	sub	sp, #8
    5c00:	4606      	mov	r6, r0
    5c02:	460c      	mov	r4, r1
    5c04:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5c06:	2000      	movs	r0, #0
    5c08:	f7ff fd1b 	bl	5642 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5c0c:	a901      	add	r1, sp, #4
    5c0e:	b2c0      	uxtb	r0, r0
    5c10:	f7fc f9a2 	bl	1f58 <flash_area_open>
    if (rc != 0) {
    5c14:	b140      	cbz	r0, 5c28 <boot_read_image_size+0x2e>
        rc = BOOT_EFLASH;
    5c16:	f04f 0801 	mov.w	r8, #1
    flash_area_close(fap);
    5c1a:	9801      	ldr	r0, [sp, #4]
    5c1c:	f000 ff59 	bl	6ad2 <flash_area_close>
}
    5c20:	4640      	mov	r0, r8
    5c22:	b002      	add	sp, #8
    5c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5c28:	232c      	movs	r3, #44	; 0x2c
    5c2a:	fb03 6304 	mla	r3, r3, r4, r6
    5c2e:	891d      	ldrh	r5, [r3, #8]
    5c30:	68db      	ldr	r3, [r3, #12]
    5c32:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5c34:	2304      	movs	r3, #4
    5c36:	466a      	mov	r2, sp
    5c38:	4629      	mov	r1, r5
    5c3a:	9801      	ldr	r0, [sp, #4]
    5c3c:	f000 ff4a 	bl	6ad4 <flash_area_read>
    5c40:	4680      	mov	r8, r0
    5c42:	bb40      	cbnz	r0, 5c96 <boot_read_image_size+0x9c>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    5c44:	212c      	movs	r1, #44	; 0x2c
    5c46:	fb01 6404 	mla	r4, r1, r4, r6
    5c4a:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5c4c:	f8bd 2000 	ldrh.w	r2, [sp]
    5c50:	f646 1308 	movw	r3, #26888	; 0x6908
    5c54:	429a      	cmp	r2, r3
    5c56:	d00c      	beq.n	5c72 <boot_read_image_size+0x78>
    } else if (protect_tlv_size != 0) {
    5c58:	bb04      	cbnz	r4, 5c9c <boot_read_image_size+0xa2>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5c5a:	f8bd 2000 	ldrh.w	r2, [sp]
    5c5e:	f646 1307 	movw	r3, #26887	; 0x6907
    5c62:	429a      	cmp	r2, r3
    5c64:	d11d      	bne.n	5ca2 <boot_read_image_size+0xa8>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5c66:	4425      	add	r5, r4
    5c68:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    5c6c:	441d      	add	r5, r3
    5c6e:	603d      	str	r5, [r7, #0]
    rc = 0;
    5c70:	e7d3      	b.n	5c1a <boot_read_image_size+0x20>
        if (protect_tlv_size != info.it_tlv_tot) {
    5c72:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    5c76:	428c      	cmp	r4, r1
    5c78:	d002      	beq.n	5c80 <boot_read_image_size+0x86>
            rc = BOOT_EBADIMAGE;
    5c7a:	f04f 0803 	mov.w	r8, #3
    5c7e:	e7cc      	b.n	5c1a <boot_read_image_size+0x20>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5c80:	2304      	movs	r3, #4
    5c82:	466a      	mov	r2, sp
    5c84:	4429      	add	r1, r5
    5c86:	9801      	ldr	r0, [sp, #4]
    5c88:	f000 ff24 	bl	6ad4 <flash_area_read>
    5c8c:	2800      	cmp	r0, #0
    5c8e:	d0e4      	beq.n	5c5a <boot_read_image_size+0x60>
            rc = BOOT_EFLASH;
    5c90:	f04f 0801 	mov.w	r8, #1
    5c94:	e7c1      	b.n	5c1a <boot_read_image_size+0x20>
        rc = BOOT_EFLASH;
    5c96:	f04f 0801 	mov.w	r8, #1
    5c9a:	e7be      	b.n	5c1a <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    5c9c:	f04f 0803 	mov.w	r8, #3
    5ca0:	e7bb      	b.n	5c1a <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    5ca2:	f04f 0803 	mov.w	r8, #3
    5ca6:	e7b8      	b.n	5c1a <boot_read_image_size+0x20>

00005ca8 <boot_check_header_erased>:
{
    5ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5caa:	b083      	sub	sp, #12
    5cac:	4607      	mov	r7, r0
    5cae:	460c      	mov	r4, r1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5cb0:	2000      	movs	r0, #0
    5cb2:	f7ff fcc6 	bl	5642 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5cb6:	a901      	add	r1, sp, #4
    5cb8:	b2c0      	uxtb	r0, r0
    5cba:	f7fc f94d 	bl	1f58 <flash_area_open>
    if (rc != 0) {
    5cbe:	b9d0      	cbnz	r0, 5cf6 <boot_check_header_erased+0x4e>
    5cc0:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    5cc2:	9801      	ldr	r0, [sp, #4]
    5cc4:	f7ff fcc7 	bl	5656 <flash_area_erased_val>
    5cc8:	4605      	mov	r5, r0
    flash_area_close(fap);
    5cca:	9801      	ldr	r0, [sp, #4]
    5ccc:	f000 ff01 	bl	6ad2 <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    5cd0:	212c      	movs	r1, #44	; 0x2c
    5cd2:	fb01 7104 	mla	r1, r1, r4, r7
    for (i = 0; i < len; i++) {
    5cd6:	2300      	movs	r3, #0
    5cd8:	2b03      	cmp	r3, #3
    5cda:	d805      	bhi.n	5ce8 <boot_check_header_erased+0x40>
        if (val != p[i]) {
    5cdc:	5cca      	ldrb	r2, [r1, r3]
    5cde:	4295      	cmp	r5, r2
    5ce0:	d107      	bne.n	5cf2 <boot_check_header_erased+0x4a>
    for (i = 0; i < len; i++) {
    5ce2:	3301      	adds	r3, #1
    5ce4:	b2db      	uxtb	r3, r3
    5ce6:	e7f7      	b.n	5cd8 <boot_check_header_erased+0x30>
    return true;
    5ce8:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    5cea:	b13b      	cbz	r3, 5cfc <boot_check_header_erased+0x54>
}
    5cec:	4630      	mov	r0, r6
    5cee:	b003      	add	sp, #12
    5cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return false;
    5cf2:	2300      	movs	r3, #0
    5cf4:	e7f9      	b.n	5cea <boot_check_header_erased+0x42>
        return -1;
    5cf6:	f04f 36ff 	mov.w	r6, #4294967295
    5cfa:	e7f7      	b.n	5cec <boot_check_header_erased+0x44>
        return -1;
    5cfc:	f04f 36ff 	mov.w	r6, #4294967295
    5d00:	e7f4      	b.n	5cec <boot_check_header_erased+0x44>

00005d02 <boot_initialize_area>:
{
    5d02:	b510      	push	{r4, lr}
    5d04:	b082      	sub	sp, #8
    5d06:	4603      	mov	r3, r0
    5d08:	4608      	mov	r0, r1
    num_sectors = BOOT_MAX_IMG_SECTORS;
    5d0a:	2280      	movs	r2, #128	; 0x80
    5d0c:	9201      	str	r2, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    5d0e:	2903      	cmp	r1, #3
    5d10:	d005      	beq.n	5d1e <boot_initialize_area+0x1c>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    5d12:	2907      	cmp	r1, #7
    5d14:	d10e      	bne.n	5d34 <boot_initialize_area+0x32>
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    5d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    5d18:	f103 0454 	add.w	r4, r3, #84	; 0x54
    5d1c:	e002      	b.n	5d24 <boot_initialize_area+0x22>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    5d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    5d20:	f103 0428 	add.w	r4, r3, #40	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5d24:	a901      	add	r1, sp, #4
    5d26:	f7fc f92b 	bl	1f80 <flash_area_get_sectors>
    if (rc != 0) {
    5d2a:	b908      	cbnz	r0, 5d30 <boot_initialize_area+0x2e>
    *out_num_sectors = num_sectors;
    5d2c:	9b01      	ldr	r3, [sp, #4]
    5d2e:	6023      	str	r3, [r4, #0]
}
    5d30:	b002      	add	sp, #8
    5d32:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    5d34:	2001      	movs	r0, #1
    5d36:	e7fb      	b.n	5d30 <boot_initialize_area+0x2e>

00005d38 <boot_read_sectors>:
{
    5d38:	b538      	push	{r3, r4, r5, lr}
    5d3a:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    5d3c:	2103      	movs	r1, #3
    5d3e:	f7ff ffe0 	bl	5d02 <boot_initialize_area>
    if (rc != 0) {
    5d42:	b110      	cbz	r0, 5d4a <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    5d44:	2501      	movs	r5, #1
}
    5d46:	4628      	mov	r0, r5
    5d48:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    5d4a:	2107      	movs	r1, #7
    5d4c:	4620      	mov	r0, r4
    5d4e:	f7ff ffd8 	bl	5d02 <boot_initialize_area>
    if (rc != 0) {
    5d52:	4605      	mov	r5, r0
    5d54:	b108      	cbz	r0, 5d5a <boot_read_sectors+0x22>
        return BOOT_EFLASH;
    5d56:	2501      	movs	r5, #1
    5d58:	e7f5      	b.n	5d46 <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    5d5a:	4620      	mov	r0, r4
    5d5c:	f7ff ff48 	bl	5bf0 <boot_write_sz>
    5d60:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    5d62:	e7f0      	b.n	5d46 <boot_read_sectors+0xe>

00005d64 <boot_read_image_headers>:
{
    5d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d66:	4605      	mov	r5, r0
    5d68:	460f      	mov	r7, r1
    5d6a:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    5d6c:	2400      	movs	r4, #0
    5d6e:	2c01      	cmp	r4, #1
    5d70:	dc10      	bgt.n	5d94 <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5d72:	4633      	mov	r3, r6
    5d74:	222c      	movs	r2, #44	; 0x2c
    5d76:	fb02 5204 	mla	r2, r2, r4, r5
    5d7a:	4621      	mov	r1, r4
    5d7c:	4628      	mov	r0, r5
    5d7e:	f7fb f9e9 	bl	1154 <boot_read_image_header>
        if (rc != 0) {
    5d82:	4603      	mov	r3, r0
    5d84:	b908      	cbnz	r0, 5d8a <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    5d86:	3401      	adds	r4, #1
    5d88:	e7f1      	b.n	5d6e <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    5d8a:	2c00      	cmp	r4, #0
    5d8c:	dd03      	ble.n	5d96 <boot_read_image_headers+0x32>
    5d8e:	b917      	cbnz	r7, 5d96 <boot_read_image_headers+0x32>
                return 0;
    5d90:	2300      	movs	r3, #0
    5d92:	e000      	b.n	5d96 <boot_read_image_headers+0x32>
    return 0;
    5d94:	2300      	movs	r3, #0
}
    5d96:	4618      	mov	r0, r3
    5d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005d9a <boot_validated_swap_type>:
{
    5d9a:	b570      	push	{r4, r5, r6, lr}
    5d9c:	4605      	mov	r5, r0
    5d9e:	460e      	mov	r6, r1
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    5da0:	2000      	movs	r0, #0
    5da2:	f7fa fdff 	bl	9a4 <boot_swap_type_multi>
    5da6:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    5da8:	2802      	cmp	r0, #2
    5daa:	d005      	beq.n	5db8 <boot_validated_swap_type+0x1e>
    5dac:	2804      	cmp	r0, #4
    5dae:	d003      	beq.n	5db8 <boot_validated_swap_type+0x1e>
    5db0:	2803      	cmp	r0, #3
    5db2:	d001      	beq.n	5db8 <boot_validated_swap_type+0x1e>
}
    5db4:	4620      	mov	r0, r4
    5db6:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    5db8:	4632      	mov	r2, r6
    5dba:	2101      	movs	r1, #1
    5dbc:	4628      	mov	r0, r5
    5dbe:	f7fa feb7 	bl	b30 <boot_validate_slot>
        if (rc == 1) {
    5dc2:	2801      	cmp	r0, #1
    5dc4:	d003      	beq.n	5dce <boot_validated_swap_type+0x34>
        } else if (rc != 0) {
    5dc6:	2800      	cmp	r0, #0
    5dc8:	d0f4      	beq.n	5db4 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    5dca:	2405      	movs	r4, #5
    5dcc:	e7f2      	b.n	5db4 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_NONE;
    5dce:	4604      	mov	r4, r0
    return swap_type;
    5dd0:	e7f0      	b.n	5db4 <boot_validated_swap_type+0x1a>

00005dd2 <boot_status_reset>:
    bs->use_scratch = 0;
    5dd2:	2300      	movs	r3, #0
    5dd4:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    5dd6:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    5dd8:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    5dda:	2301      	movs	r3, #1
    5ddc:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    5dde:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5de0:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    5de2:	71c3      	strb	r3, [r0, #7]
}
    5de4:	4770      	bx	lr

00005de6 <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5de6:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    5de8:	2b01      	cmp	r3, #1
    5dea:	d001      	beq.n	5df0 <boot_status_is_reset+0xa>
    5dec:	2000      	movs	r0, #0
    5dee:	4770      	bx	lr
    5df0:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5df2:	2b01      	cmp	r3, #1
    5df4:	d001      	beq.n	5dfa <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    5df6:	2000      	movs	r0, #0
    5df8:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    5dfa:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    5dfc:	2b01      	cmp	r3, #1
    5dfe:	d001      	beq.n	5e04 <boot_status_is_reset+0x1e>
    5e00:	2000      	movs	r0, #0
    5e02:	4770      	bx	lr
    5e04:	2001      	movs	r0, #1
}
    5e06:	4770      	bx	lr

00005e08 <boot_perform_update>:
{
    5e08:	b538      	push	{r3, r4, r5, lr}
    5e0a:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    5e0c:	f7fa fef4 	bl	bf8 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
    5e10:	f895 4058 	ldrb.w	r4, [r5, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    5e14:	1ee3      	subs	r3, r4, #3
    5e16:	b2db      	uxtb	r3, r3
    5e18:	2b01      	cmp	r3, #1
    5e1a:	d90d      	bls.n	5e38 <boot_perform_update+0x30>
    if (BOOT_IS_UPGRADE(swap_type)) {
    5e1c:	2c02      	cmp	r4, #2
    5e1e:	d003      	beq.n	5e28 <boot_perform_update+0x20>
    5e20:	2c04      	cmp	r4, #4
    5e22:	d001      	beq.n	5e28 <boot_perform_update+0x20>
    5e24:	2c03      	cmp	r4, #3
    5e26:	d106      	bne.n	5e36 <boot_perform_update+0x2e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    5e28:	2000      	movs	r0, #0
    5e2a:	f000 f8d8 	bl	5fde <swap_set_copy_done>
        if (rc != 0) {
    5e2e:	b110      	cbz	r0, 5e36 <boot_perform_update+0x2e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    5e30:	23ff      	movs	r3, #255	; 0xff
    5e32:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
}
    5e36:	bd38      	pop	{r3, r4, r5, pc}
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    5e38:	2000      	movs	r0, #0
    5e3a:	f000 f8e3 	bl	6004 <swap_set_image_ok>
        if (rc != 0) {
    5e3e:	2800      	cmp	r0, #0
    5e40:	d0ec      	beq.n	5e1c <boot_perform_update+0x14>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    5e42:	24ff      	movs	r4, #255	; 0xff
    5e44:	f885 4058 	strb.w	r4, [r5, #88]	; 0x58
    if (BOOT_IS_UPGRADE(swap_type)) {
    5e48:	e7ea      	b.n	5e20 <boot_perform_update+0x18>

00005e4a <boot_write_status>:
{
    5e4a:	b570      	push	{r4, r5, r6, lr}
    5e4c:	b084      	sub	sp, #16
    5e4e:	4604      	mov	r4, r0
    5e50:	460e      	mov	r6, r1
    rc = flash_area_open(area_id, &fap);
    5e52:	a903      	add	r1, sp, #12
    5e54:	2003      	movs	r0, #3
    5e56:	f7fc f87f 	bl	1f58 <flash_area_open>
    if (rc != 0) {
    5e5a:	b130      	cbz	r0, 5e6a <boot_write_status+0x20>
        rc = BOOT_EFLASH;
    5e5c:	2401      	movs	r4, #1
    flash_area_close(fap);
    5e5e:	9803      	ldr	r0, [sp, #12]
    5e60:	f000 fe37 	bl	6ad2 <flash_area_close>
}
    5e64:	4620      	mov	r0, r4
    5e66:	b004      	add	sp, #16
    5e68:	bd70      	pop	{r4, r5, r6, pc}
    off = boot_status_off(fap) +
    5e6a:	9803      	ldr	r0, [sp, #12]
    5e6c:	f7ff fdf4 	bl	5a58 <boot_status_off>
    5e70:	4605      	mov	r5, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5e72:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    5e74:	4630      	mov	r0, r6
    5e76:	f000 f8e5 	bl	6044 <boot_status_internal_off>
    off = boot_status_off(fap) +
    5e7a:	182c      	adds	r4, r5, r0
    align = flash_area_align(fap);
    5e7c:	9803      	ldr	r0, [sp, #12]
    5e7e:	f000 fea6 	bl	6bce <flash_area_align>
    5e82:	4605      	mov	r5, r0
    erased_val = flash_area_erased_val(fap);
    5e84:	9803      	ldr	r0, [sp, #12]
    5e86:	f7ff fbe6 	bl	5656 <flash_area_erased_val>
    5e8a:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5e8c:	2208      	movs	r2, #8
    5e8e:	a801      	add	r0, sp, #4
    5e90:	f001 f877 	bl	6f82 <memset>
    buf[0] = bs->state;
    5e94:	7933      	ldrb	r3, [r6, #4]
    5e96:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    5e9a:	462b      	mov	r3, r5
    5e9c:	aa01      	add	r2, sp, #4
    5e9e:	4621      	mov	r1, r4
    5ea0:	9803      	ldr	r0, [sp, #12]
    5ea2:	f000 fe36 	bl	6b12 <flash_area_write>
    if (rc != 0) {
    5ea6:	4604      	mov	r4, r0
    5ea8:	2800      	cmp	r0, #0
    5eaa:	d0d8      	beq.n	5e5e <boot_write_status+0x14>
        rc = BOOT_EFLASH;
    5eac:	2401      	movs	r4, #1
    5eae:	e7d6      	b.n	5e5e <boot_write_status+0x14>

00005eb0 <boot_erase_region>:
{
    5eb0:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    5eb2:	f000 fe5e 	bl	6b72 <flash_area_erase>
}
    5eb6:	bd08      	pop	{r3, pc}

00005eb8 <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    5eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ebc:	4606      	mov	r6, r0
    5ebe:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5ec0:	2100      	movs	r1, #0
    5ec2:	4608      	mov	r0, r1
    5ec4:	f7ff fbbd 	bl	5642 <flash_area_id_from_multi_image_slot>
    5ec8:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    5eca:	2101      	movs	r1, #1
    5ecc:	2000      	movs	r0, #0
    5ece:	f7ff fbb8 	bl	5642 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    5ed2:	783b      	ldrb	r3, [r7, #0]
    5ed4:	429c      	cmp	r4, r3
    5ed6:	d023      	beq.n	5f20 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    5ed8:	4298      	cmp	r0, r3
    5eda:	d123      	bne.n	5f24 <swap_erase_trailer_sectors+0x6c>
        slot = BOOT_SECONDARY_SLOT;
    5edc:	2301      	movs	r3, #1
    } else {
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    5ede:	4699      	mov	r9, r3
    5ee0:	222c      	movs	r2, #44	; 0x2c
    5ee2:	fb02 6303 	mla	r3, r2, r3, r6
    5ee6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    5ee8:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5eea:	6df0      	ldr	r0, [r6, #92]	; 0x5c
    5eec:	f7ff fda1 	bl	5a32 <boot_trailer_sz>
    5ef0:	4680      	mov	r8, r0
    total_sz = 0;
    5ef2:	2500      	movs	r5, #0
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    5ef4:	232c      	movs	r3, #44	; 0x2c
    5ef6:	fb03 6309 	mla	r3, r3, r9, r6
    5efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5efc:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    5f00:	f8d2 a004 	ldr.w	sl, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    5f04:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    5f08:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    5f0a:	4652      	mov	r2, sl
    5f0c:	1ac9      	subs	r1, r1, r3
    5f0e:	4638      	mov	r0, r7
    5f10:	f7ff ffce 	bl	5eb0 <boot_erase_region>
        assert(rc == 0);

        sector--;
    5f14:	3c01      	subs	r4, #1
        total_sz += sz;
    5f16:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    5f18:	45a8      	cmp	r8, r5
    5f1a:	d8eb      	bhi.n	5ef4 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    5f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    5f20:	2300      	movs	r3, #0
    5f22:	e7dc      	b.n	5ede <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    5f24:	2001      	movs	r0, #1
    5f26:	e7f9      	b.n	5f1c <swap_erase_trailer_sectors+0x64>

00005f28 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    5f28:	b530      	push	{r4, r5, lr}
    5f2a:	b083      	sub	sp, #12
    5f2c:	460c      	mov	r4, r1
    5f2e:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5f30:	4669      	mov	r1, sp
    5f32:	2007      	movs	r0, #7
    5f34:	f7ff fdfc 	bl	5b30 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    5f38:	79e9      	ldrb	r1, [r5, #7]
    5f3a:	2901      	cmp	r1, #1
    5f3c:	d10d      	bne.n	5f5a <swap_status_init+0x32>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    5f3e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f42:	2b01      	cmp	r3, #1
    5f44:	d00e      	beq.n	5f64 <swap_status_init+0x3c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    5f46:	68a9      	ldr	r1, [r5, #8]
    5f48:	4620      	mov	r0, r4
    5f4a:	f7ff fe41 	bl	5bd0 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    5f4e:	4620      	mov	r0, r4
    5f50:	f7fa fd1a 	bl	988 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    5f54:	2000      	movs	r0, #0
    5f56:	b003      	add	sp, #12
    5f58:	bd30      	pop	{r4, r5, pc}
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    5f5a:	2200      	movs	r2, #0
    5f5c:	4620      	mov	r0, r4
    5f5e:	f7ff fe25 	bl	5bac <boot_write_swap_info>
    5f62:	e7ec      	b.n	5f3e <swap_status_init+0x16>
        rc = boot_write_image_ok(fap);
    5f64:	4620      	mov	r0, r4
    5f66:	f7ff fe1a 	bl	5b9e <boot_write_image_ok>
    5f6a:	e7ec      	b.n	5f46 <swap_status_init+0x1e>

00005f6c <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    5f6c:	b570      	push	{r4, r5, r6, lr}
    5f6e:	b082      	sub	sp, #8
    5f70:	4606      	mov	r6, r0
    5f72:	460d      	mov	r5, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5f74:	f7fb fa44 	bl	1400 <swap_status_source>
    5f78:	4604      	mov	r4, r0
    5f7a:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    5f7c:	b360      	cbz	r0, 5fd8 <swap_read_status+0x6c>
    5f7e:	2802      	cmp	r0, #2
    5f80:	d129      	bne.n	5fd6 <swap_read_status+0x6a>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    5f82:	a901      	add	r1, sp, #4
    5f84:	2003      	movs	r0, #3
    5f86:	f7fb ffe7 	bl	1f58 <flash_area_open>
    if (rc != 0) {
    5f8a:	b108      	cbz	r0, 5f90 <swap_read_status+0x24>
        return BOOT_EFLASH;
    5f8c:	2401      	movs	r4, #1
    5f8e:	e023      	b.n	5fd8 <swap_read_status+0x6c>
    }

    rc = swap_read_status_bytes(fap, state, bs);
    5f90:	462a      	mov	r2, r5
    5f92:	4631      	mov	r1, r6
    5f94:	9801      	ldr	r0, [sp, #4]
    5f96:	f7fb f939 	bl	120c <swap_read_status_bytes>
    if (rc == 0) {
    5f9a:	4604      	mov	r4, r0
    5f9c:	b118      	cbz	r0, 5fa6 <swap_read_status+0x3a>

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    }

    flash_area_close(fap);
    5f9e:	9801      	ldr	r0, [sp, #4]
    5fa0:	f000 fd97 	bl	6ad2 <flash_area_close>

    return rc;
    5fa4:	e018      	b.n	5fd8 <swap_read_status+0x6c>
        off = boot_swap_info_off(fap);
    5fa6:	9801      	ldr	r0, [sp, #4]
    5fa8:	f7ff fd5f 	bl	5a6a <boot_swap_info_off>
    5fac:	4601      	mov	r1, r0
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    5fae:	2301      	movs	r3, #1
    5fb0:	f10d 0203 	add.w	r2, sp, #3
    5fb4:	9801      	ldr	r0, [sp, #4]
    5fb6:	f7ff fb50 	bl	565a <flash_area_read_is_empty>
        if (rc == 1) {
    5fba:	2801      	cmp	r0, #1
    5fbc:	d006      	beq.n	5fcc <swap_read_status+0x60>
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5fbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5fc2:	f003 030f 	and.w	r3, r3, #15
    5fc6:	71eb      	strb	r3, [r5, #7]
    5fc8:	4604      	mov	r4, r0
    5fca:	e7e8      	b.n	5f9e <swap_read_status+0x32>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    5fcc:	2301      	movs	r3, #1
    5fce:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
    5fd2:	4620      	mov	r0, r4
    5fd4:	e7f3      	b.n	5fbe <swap_read_status+0x52>
        return BOOT_EBADARGS;
    5fd6:	2407      	movs	r4, #7
}
    5fd8:	4620      	mov	r0, r4
    5fda:	b002      	add	sp, #8
    5fdc:	bd70      	pop	{r4, r5, r6, pc}

00005fde <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    5fde:	b510      	push	{r4, lr}
    5fe0:	b082      	sub	sp, #8
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5fe2:	a901      	add	r1, sp, #4
    5fe4:	2003      	movs	r0, #3
    5fe6:	f7fb ffb7 	bl	1f58 <flash_area_open>
            &fap);
    if (rc != 0) {
    5fea:	b118      	cbz	r0, 5ff4 <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    5fec:	2401      	movs	r4, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    5fee:	4620      	mov	r0, r4
    5ff0:	b002      	add	sp, #8
    5ff2:	bd10      	pop	{r4, pc}
    rc = boot_write_copy_done(fap);
    5ff4:	9801      	ldr	r0, [sp, #4]
    5ff6:	f7ff fdcb 	bl	5b90 <boot_write_copy_done>
    5ffa:	4604      	mov	r4, r0
    flash_area_close(fap);
    5ffc:	9801      	ldr	r0, [sp, #4]
    5ffe:	f000 fd68 	bl	6ad2 <flash_area_close>
    return rc;
    6002:	e7f4      	b.n	5fee <swap_set_copy_done+0x10>

00006004 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    6004:	b510      	push	{r4, lr}
    6006:	b084      	sub	sp, #16
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6008:	a903      	add	r1, sp, #12
    600a:	2003      	movs	r0, #3
    600c:	f7fb ffa4 	bl	1f58 <flash_area_open>
            &fap);
    if (rc != 0) {
    6010:	b118      	cbz	r0, 601a <swap_set_image_ok+0x16>
        return BOOT_EFLASH;
    6012:	2401      	movs	r4, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    6014:	4620      	mov	r0, r4
    6016:	b004      	add	sp, #16
    6018:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, &state);
    601a:	a901      	add	r1, sp, #4
    601c:	9803      	ldr	r0, [sp, #12]
    601e:	f7ff fd27 	bl	5a70 <boot_read_swap_state>
    if (rc != 0) {
    6022:	4604      	mov	r4, r0
    6024:	b960      	cbnz	r0, 6040 <swap_set_image_ok+0x3c>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    6026:	f89d 3007 	ldrb.w	r3, [sp, #7]
    602a:	2b03      	cmp	r3, #3
    602c:	d003      	beq.n	6036 <swap_set_image_ok+0x32>
    flash_area_close(fap);
    602e:	9803      	ldr	r0, [sp, #12]
    6030:	f000 fd4f 	bl	6ad2 <flash_area_close>
    return rc;
    6034:	e7ee      	b.n	6014 <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    6036:	9803      	ldr	r0, [sp, #12]
    6038:	f7ff fdb1 	bl	5b9e <boot_write_image_ok>
    603c:	4604      	mov	r4, r0
    603e:	e7f6      	b.n	602e <swap_set_image_ok+0x2a>
        rc = BOOT_EFLASH;
    6040:	2401      	movs	r4, #1
    6042:	e7f4      	b.n	602e <swap_set_image_ok+0x2a>

00006044 <boot_status_internal_off>:
{
    6044:	b430      	push	{r4, r5}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    6046:	7943      	ldrb	r3, [r0, #5]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    6048:	2b01      	cmp	r3, #1
    604a:	d010      	beq.n	606e <boot_status_internal_off+0x2a>
    604c:	2202      	movs	r2, #2
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    604e:	fb01 f402 	mul.w	r4, r1, r2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    6052:	2b01      	cmp	r3, #1
    6054:	d00d      	beq.n	6072 <boot_status_internal_off+0x2e>
    6056:	01cd      	lsls	r5, r1, #7
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    6058:	7903      	ldrb	r3, [r0, #4]
    605a:	3b01      	subs	r3, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    605c:	6802      	ldr	r2, [r0, #0]
    605e:	3a01      	subs	r2, #1
    6060:	fb02 f204 	mul.w	r2, r2, r4
    6064:	fb01 2103 	mla	r1, r1, r3, r2
}
    6068:	1948      	adds	r0, r1, r5
    606a:	bc30      	pop	{r4, r5}
    606c:	4770      	bx	lr
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    606e:	2201      	movs	r2, #1
    6070:	e7ed      	b.n	604e <boot_status_internal_off+0xa>
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    6072:	2500      	movs	r5, #0
    6074:	e7f0      	b.n	6058 <boot_status_internal_off+0x14>

00006076 <nrf_cleanup_clock>:
    p_reg->INTENCLR = mask;
    6076:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    607a:	f04f 32ff 	mov.w	r2, #4294967295
    607e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6082:	4770      	bx	lr

00006084 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6084:	4602      	mov	r2, r0
    6086:	b158      	cbz	r0, 60a0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6088:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    608a:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    608e:	2b01      	cmp	r3, #1
    6090:	d003      	beq.n	609a <sys_notify_validate+0x16>
    6092:	2b03      	cmp	r3, #3
    6094:	d107      	bne.n	60a6 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6096:	6803      	ldr	r3, [r0, #0]
    6098:	b143      	cbz	r3, 60ac <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    609a:	2000      	movs	r0, #0
    609c:	6090      	str	r0, [r2, #8]
    609e:	4770      	bx	lr
		return -EINVAL;
    60a0:	f06f 0015 	mvn.w	r0, #21
    60a4:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    60a6:	f06f 0015 	mvn.w	r0, #21
    60aa:	4770      	bx	lr
			rv = -EINVAL;
    60ac:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    60b0:	4770      	bx	lr

000060b2 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    60b2:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    60b4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    60b6:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    60ba:	6081      	str	r1, [r0, #8]
	switch (method) {
    60bc:	2a03      	cmp	r2, #3
    60be:	d103      	bne.n	60c8 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    60c0:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    60c2:	2200      	movs	r2, #0
    60c4:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    60c6:	4770      	bx	lr
	sys_notify_generic_callback rv = 0;
    60c8:	2000      	movs	r0, #0
    60ca:	e7fa      	b.n	60c2 <sys_notify_finalize+0x10>

000060cc <arch_printk_char_out>:
}
    60cc:	2000      	movs	r0, #0
    60ce:	4770      	bx	lr

000060d0 <print_hex>:
{
    60d0:	b570      	push	{r4, r5, r6, lr}
    60d2:	b084      	sub	sp, #16
    60d4:	f89d 4020 	ldrb.w	r4, [sp, #32]
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    60d8:	1ee5      	subs	r5, r4, #3
    60da:	bf18      	it	ne
    60dc:	2501      	movne	r5, #1
    60de:	2c01      	cmp	r4, #1
    60e0:	d00a      	beq.n	60f8 <print_hex+0x28>
    60e2:	2420      	movs	r4, #32
    60e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    60e6:	9603      	str	r6, [sp, #12]
    60e8:	9402      	str	r4, [sp, #8]
    60ea:	9501      	str	r5, [sp, #4]
    60ec:	2410      	movs	r4, #16
    60ee:	9400      	str	r4, [sp, #0]
    60f0:	f7fb fb24 	bl	173c <print_digits>
}
    60f4:	b004      	add	sp, #16
    60f6:	bd70      	pop	{r4, r5, r6, pc}
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    60f8:	2430      	movs	r4, #48	; 0x30
    60fa:	e7f3      	b.n	60e4 <print_hex+0x14>

000060fc <print_dec>:
{
    60fc:	b570      	push	{r4, r5, r6, lr}
    60fe:	b084      	sub	sp, #16
    6100:	f89d 4020 	ldrb.w	r4, [sp, #32]
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    6104:	1ee5      	subs	r5, r4, #3
    6106:	bf18      	it	ne
    6108:	2501      	movne	r5, #1
    610a:	2c01      	cmp	r4, #1
    610c:	d00a      	beq.n	6124 <print_dec+0x28>
    610e:	2420      	movs	r4, #32
    6110:	9e09      	ldr	r6, [sp, #36]	; 0x24
    6112:	9603      	str	r6, [sp, #12]
    6114:	9402      	str	r4, [sp, #8]
    6116:	9501      	str	r5, [sp, #4]
    6118:	240a      	movs	r4, #10
    611a:	9400      	str	r4, [sp, #0]
    611c:	f7fb fb0e 	bl	173c <print_digits>
}
    6120:	b004      	add	sp, #16
    6122:	bd70      	pop	{r4, r5, r6, pc}
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    6124:	2430      	movs	r4, #48	; 0x30
    6126:	e7f3      	b.n	6110 <print_dec+0x14>

00006128 <ok64>:
}
    6128:	2001      	movs	r0, #1
    612a:	4770      	bx	lr

0000612c <negative>:
}
    612c:	0fc8      	lsrs	r0, r1, #31
    612e:	4770      	bx	lr

00006130 <z_vprintk>:
{
    6130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6134:	b087      	sub	sp, #28
    6136:	4606      	mov	r6, r0
    6138:	460d      	mov	r5, r1
    613a:	4614      	mov	r4, r2
    613c:	9305      	str	r3, [sp, #20]
	char length_mod = 0;
    613e:	2700      	movs	r7, #0
	int min_width = -1;
    6140:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
    6144:	46bb      	mov	fp, r7
	int might_format = 0; /* 1 if encountered a '%' */
    6146:	46b8      	mov	r8, r7
	while (*fmt) {
    6148:	e002      	b.n	6150 <z_vprintk+0x20>
				out((int)*fmt, ctx);
    614a:	4629      	mov	r1, r5
    614c:	47b0      	blx	r6
		++fmt;
    614e:	3401      	adds	r4, #1
	while (*fmt) {
    6150:	7820      	ldrb	r0, [r4, #0]
    6152:	2800      	cmp	r0, #0
    6154:	f000 8174 	beq.w	6440 <z_vprintk+0x310>
		if (!might_format) {
    6158:	f1b8 0f00 	cmp.w	r8, #0
    615c:	d108      	bne.n	6170 <z_vprintk+0x40>
			if (*fmt != '%') {
    615e:	2825      	cmp	r0, #37	; 0x25
    6160:	d1f3      	bne.n	614a <z_vprintk+0x1a>
				length_mod = 0;
    6162:	2700      	movs	r7, #0
				min_width = -1;
    6164:	f04f 3aff 	mov.w	sl, #4294967295
				padding = PAD_NONE;
    6168:	46bb      	mov	fp, r7
				might_format = 1;
    616a:	f04f 0801 	mov.w	r8, #1
    616e:	e7ee      	b.n	614e <z_vprintk+0x1e>
			switch (*fmt) {
    6170:	4602      	mov	r2, r0
    6172:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    6176:	2b55      	cmp	r3, #85	; 0x55
    6178:	f200 8150 	bhi.w	641c <z_vprintk+0x2ec>
    617c:	e8df f013 	tbh	[pc, r3, lsl #1]
    6180:	014e0148 	.word	0x014e0148
    6184:	014e014e 	.word	0x014e014e
    6188:	014e014e 	.word	0x014e014e
    618c:	014e014e 	.word	0x014e014e
    6190:	014e0157 	.word	0x014e0157
    6194:	0056014e 	.word	0x0056014e
    6198:	005d005d 	.word	0x005d005d
    619c:	005d005d 	.word	0x005d005d
    61a0:	005d005d 	.word	0x005d005d
    61a4:	005d005d 	.word	0x005d005d
    61a8:	014e005d 	.word	0x014e005d
    61ac:	014e014e 	.word	0x014e014e
    61b0:	014e014e 	.word	0x014e014e
    61b4:	014e014e 	.word	0x014e014e
    61b8:	014e014e 	.word	0x014e014e
    61bc:	014e014e 	.word	0x014e014e
    61c0:	014e014e 	.word	0x014e014e
    61c4:	014e014e 	.word	0x014e014e
    61c8:	014e014e 	.word	0x014e014e
    61cc:	014e014e 	.word	0x014e014e
    61d0:	014e014e 	.word	0x014e014e
    61d4:	014e014e 	.word	0x014e014e
    61d8:	014e014e 	.word	0x014e014e
    61dc:	014e014e 	.word	0x014e014e
    61e0:	014e014e 	.word	0x014e014e
    61e4:	00ed014e 	.word	0x00ed014e
    61e8:	014e014e 	.word	0x014e014e
    61ec:	014e014e 	.word	0x014e014e
    61f0:	014e014e 	.word	0x014e014e
    61f4:	014e014e 	.word	0x014e014e
    61f8:	014e014e 	.word	0x014e014e
    61fc:	0087013f 	.word	0x0087013f
    6200:	014e014e 	.word	0x014e014e
    6204:	0070014e 	.word	0x0070014e
    6208:	014e0087 	.word	0x014e0087
    620c:	0070014e 	.word	0x0070014e
    6210:	014e014e 	.word	0x014e014e
    6214:	00e3014e 	.word	0x00e3014e
    6218:	014e014e 	.word	0x014e014e
    621c:	014e011a 	.word	0x014e011a
    6220:	014e0087 	.word	0x014e0087
    6224:	00ed014e 	.word	0x00ed014e
    6228:	0070014e 	.word	0x0070014e
				if (min_width < 0 && padding == PAD_NONE) {
    622c:	f1ba 0f00 	cmp.w	sl, #0
    6230:	da03      	bge.n	623a <z_vprintk+0x10a>
    6232:	f1bb 0f00 	cmp.w	fp, #0
    6236:	f000 80fd 	beq.w	6434 <z_vprintk+0x304>
				if (min_width < 0) {
    623a:	f1ba 0f00 	cmp.w	sl, #0
    623e:	db0c      	blt.n	625a <z_vprintk+0x12a>
					min_width = 10 * min_width + *fmt - '0';
    6240:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    6244:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
    6248:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
				if (padding == PAD_NONE) {
    624c:	f1bb 0f00 	cmp.w	fp, #0
    6250:	f47f af7d 	bne.w	614e <z_vprintk+0x1e>
					padding = PAD_SPACE_BEFORE;
    6254:	f04f 0b02 	mov.w	fp, #2
				goto still_might_format;
    6258:	e779      	b.n	614e <z_vprintk+0x1e>
					min_width = *fmt - '0';
    625a:	f1a2 0a30 	sub.w	sl, r2, #48	; 0x30
    625e:	e7f5      	b.n	624c <z_vprintk+0x11c>
				if (*fmt == 'h' && length_mod == 'h') {
    6260:	2868      	cmp	r0, #104	; 0x68
    6262:	d00b      	beq.n	627c <z_vprintk+0x14c>
				} else if (*fmt == 'l' && length_mod == 'l') {
    6264:	286c      	cmp	r0, #108	; 0x6c
    6266:	d00e      	beq.n	6286 <z_vprintk+0x156>
				} else if (length_mod == 0) {
    6268:	b15f      	cbz	r7, 6282 <z_vprintk+0x152>
					out((int)'%', ctx);
    626a:	4629      	mov	r1, r5
    626c:	2025      	movs	r0, #37	; 0x25
    626e:	47b0      	blx	r6
					out((int)*fmt, ctx);
    6270:	4629      	mov	r1, r5
    6272:	7820      	ldrb	r0, [r4, #0]
    6274:	47b0      	blx	r6
			might_format = 0;
    6276:	f04f 0800 	mov.w	r8, #0
					break;
    627a:	e768      	b.n	614e <z_vprintk+0x1e>
				if (*fmt == 'h' && length_mod == 'h') {
    627c:	2f68      	cmp	r7, #104	; 0x68
    627e:	d1f1      	bne.n	6264 <z_vprintk+0x134>
					length_mod = 'H';
    6280:	2048      	movs	r0, #72	; 0x48
				goto still_might_format;
    6282:	4607      	mov	r7, r0
    6284:	e763      	b.n	614e <z_vprintk+0x1e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    6286:	2f6c      	cmp	r7, #108	; 0x6c
    6288:	d1ee      	bne.n	6268 <z_vprintk+0x138>
					length_mod = 'L';
    628a:	204c      	movs	r0, #76	; 0x4c
    628c:	e7f9      	b.n	6282 <z_vprintk+0x152>
				if (length_mod == 'z') {
    628e:	2f7a      	cmp	r7, #122	; 0x7a
    6290:	d00d      	beq.n	62ae <z_vprintk+0x17e>
				} else if (length_mod == 'l') {
    6292:	2f6c      	cmp	r7, #108	; 0x6c
    6294:	d030      	beq.n	62f8 <z_vprintk+0x1c8>
				} else if (length_mod == 'L') {
    6296:	2f4c      	cmp	r7, #76	; 0x4c
    6298:	d036      	beq.n	6308 <z_vprintk+0x1d8>
				} else if (*fmt == 'u') {
    629a:	2875      	cmp	r0, #117	; 0x75
    629c:	d04b      	beq.n	6336 <z_vprintk+0x206>
					d = va_arg(ap, int);
    629e:	9b05      	ldr	r3, [sp, #20]
    62a0:	1d1a      	adds	r2, r3, #4
    62a2:	9205      	str	r2, [sp, #20]
    62a4:	681b      	ldr	r3, [r3, #0]
    62a6:	4698      	mov	r8, r3
    62a8:	ea4f 79e3 	mov.w	r9, r3, asr #31
    62ac:	e006      	b.n	62bc <z_vprintk+0x18c>
					d = va_arg(ap, ssize_t);
    62ae:	9b05      	ldr	r3, [sp, #20]
    62b0:	1d1a      	adds	r2, r3, #4
    62b2:	9205      	str	r2, [sp, #20]
    62b4:	681b      	ldr	r3, [r3, #0]
    62b6:	4698      	mov	r8, r3
    62b8:	ea4f 79e3 	mov.w	r9, r3, asr #31
				if (*fmt != 'u' && negative(d)) {
    62bc:	7823      	ldrb	r3, [r4, #0]
    62be:	2b75      	cmp	r3, #117	; 0x75
    62c0:	d00d      	beq.n	62de <z_vprintk+0x1ae>
    62c2:	4640      	mov	r0, r8
    62c4:	4649      	mov	r1, r9
    62c6:	f7ff ff31 	bl	612c <negative>
    62ca:	b140      	cbz	r0, 62de <z_vprintk+0x1ae>
					out((int)'-', ctx);
    62cc:	4629      	mov	r1, r5
    62ce:	202d      	movs	r0, #45	; 0x2d
    62d0:	47b0      	blx	r6
					d = -d;
    62d2:	f1d8 0800 	rsbs	r8, r8, #0
    62d6:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
					min_width--;
    62da:	f10a 3aff 	add.w	sl, sl, #4294967295
				print_dec(out, ctx, d, padding, min_width);
    62de:	f8cd a004 	str.w	sl, [sp, #4]
    62e2:	f8cd b000 	str.w	fp, [sp]
    62e6:	4642      	mov	r2, r8
    62e8:	464b      	mov	r3, r9
    62ea:	4629      	mov	r1, r5
    62ec:	4630      	mov	r0, r6
    62ee:	f7ff ff05 	bl	60fc <print_dec>
			might_format = 0;
    62f2:	f04f 0800 	mov.w	r8, #0
				break;
    62f6:	e72a      	b.n	614e <z_vprintk+0x1e>
					d = va_arg(ap, long);
    62f8:	9b05      	ldr	r3, [sp, #20]
    62fa:	1d1a      	adds	r2, r3, #4
    62fc:	9205      	str	r2, [sp, #20]
    62fe:	681b      	ldr	r3, [r3, #0]
    6300:	4698      	mov	r8, r3
    6302:	ea4f 79e3 	mov.w	r9, r3, asr #31
    6306:	e7d9      	b.n	62bc <z_vprintk+0x18c>
					long long lld = va_arg(ap, long long);
    6308:	9b05      	ldr	r3, [sp, #20]
    630a:	3307      	adds	r3, #7
    630c:	f023 0307 	bic.w	r3, r3, #7
    6310:	f103 0208 	add.w	r2, r3, #8
    6314:	9205      	str	r2, [sp, #20]
    6316:	681a      	ldr	r2, [r3, #0]
    6318:	685b      	ldr	r3, [r3, #4]
					if (!ok64(out, ctx, lld)) {
    631a:	9203      	str	r2, [sp, #12]
    631c:	9304      	str	r3, [sp, #16]
    631e:	4629      	mov	r1, r5
    6320:	4630      	mov	r0, r6
    6322:	f7ff ff01 	bl	6128 <ok64>
    6326:	2800      	cmp	r0, #0
    6328:	f000 8087 	beq.w	643a <z_vprintk+0x30a>
					d = (printk_val_t) lld;
    632c:	f8dd 800c 	ldr.w	r8, [sp, #12]
    6330:	f8dd 9010 	ldr.w	r9, [sp, #16]
    6334:	e7c2      	b.n	62bc <z_vprintk+0x18c>
					d = va_arg(ap, unsigned int);
    6336:	9b05      	ldr	r3, [sp, #20]
    6338:	1d1a      	adds	r2, r3, #4
    633a:	9205      	str	r2, [sp, #20]
    633c:	681b      	ldr	r3, [r3, #0]
    633e:	4698      	mov	r8, r3
    6340:	f04f 0900 	mov.w	r9, #0
    6344:	e7ba      	b.n	62bc <z_vprintk+0x18c>
				out('0', ctx);
    6346:	4629      	mov	r1, r5
    6348:	2030      	movs	r0, #48	; 0x30
    634a:	47b0      	blx	r6
				out('x', ctx);
    634c:	4629      	mov	r1, r5
    634e:	2078      	movs	r0, #120	; 0x78
    6350:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
    6352:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
    6356:	f04f 0b01 	mov.w	fp, #1
				if (*fmt == 'p') {
    635a:	7823      	ldrb	r3, [r4, #0]
    635c:	2b70      	cmp	r3, #112	; 0x70
    635e:	d009      	beq.n	6374 <z_vprintk+0x244>
				} else if (length_mod == 'l') {
    6360:	2f6c      	cmp	r7, #108	; 0x6c
    6362:	d017      	beq.n	6394 <z_vprintk+0x264>
				} else if (length_mod == 'L') {
    6364:	2f4c      	cmp	r7, #76	; 0x4c
    6366:	d01b      	beq.n	63a0 <z_vprintk+0x270>
					x = va_arg(ap, unsigned int);
    6368:	9b05      	ldr	r3, [sp, #20]
    636a:	1d1a      	adds	r2, r3, #4
    636c:	9205      	str	r2, [sp, #20]
    636e:	681a      	ldr	r2, [r3, #0]
    6370:	2300      	movs	r3, #0
    6372:	e004      	b.n	637e <z_vprintk+0x24e>
					x = (uintptr_t)va_arg(ap, void *);
    6374:	9b05      	ldr	r3, [sp, #20]
    6376:	1d1a      	adds	r2, r3, #4
    6378:	9205      	str	r2, [sp, #20]
    637a:	681a      	ldr	r2, [r3, #0]
    637c:	2300      	movs	r3, #0
				print_hex(out, ctx, x, padding, min_width);
    637e:	f8cd a004 	str.w	sl, [sp, #4]
    6382:	f8cd b000 	str.w	fp, [sp]
    6386:	4629      	mov	r1, r5
    6388:	4630      	mov	r0, r6
    638a:	f7ff fea1 	bl	60d0 <print_hex>
			might_format = 0;
    638e:	f04f 0800 	mov.w	r8, #0
				break;
    6392:	e6dc      	b.n	614e <z_vprintk+0x1e>
					x = va_arg(ap, unsigned long);
    6394:	9b05      	ldr	r3, [sp, #20]
    6396:	1d1a      	adds	r2, r3, #4
    6398:	9205      	str	r2, [sp, #20]
    639a:	681a      	ldr	r2, [r3, #0]
    639c:	2300      	movs	r3, #0
    639e:	e7ee      	b.n	637e <z_vprintk+0x24e>
					x = va_arg(ap, unsigned long long);
    63a0:	9b05      	ldr	r3, [sp, #20]
    63a2:	3307      	adds	r3, #7
    63a4:	f023 0307 	bic.w	r3, r3, #7
    63a8:	f103 0208 	add.w	r2, r3, #8
    63ac:	9205      	str	r2, [sp, #20]
    63ae:	681a      	ldr	r2, [r3, #0]
    63b0:	685b      	ldr	r3, [r3, #4]
    63b2:	e7e4      	b.n	637e <z_vprintk+0x24e>
				char *s = va_arg(ap, char *);
    63b4:	9b05      	ldr	r3, [sp, #20]
    63b6:	1d1a      	adds	r2, r3, #4
    63b8:	9205      	str	r2, [sp, #20]
    63ba:	f8d3 9000 	ldr.w	r9, [r3]
    63be:	46c8      	mov	r8, r9
				while (*s) {
    63c0:	e003      	b.n	63ca <z_vprintk+0x29a>
					out((int)(*s++), ctx);
    63c2:	f108 0801 	add.w	r8, r8, #1
    63c6:	4629      	mov	r1, r5
    63c8:	47b0      	blx	r6
				while (*s) {
    63ca:	f898 0000 	ldrb.w	r0, [r8]
    63ce:	2800      	cmp	r0, #0
    63d0:	d1f7      	bne.n	63c2 <z_vprintk+0x292>
				if (padding == PAD_SPACE_AFTER) {
    63d2:	f1bb 0f03 	cmp.w	fp, #3
    63d6:	d002      	beq.n	63de <z_vprintk+0x2ae>
			might_format = 0;
    63d8:	f04f 0800 	mov.w	r8, #0
    63dc:	e6b7      	b.n	614e <z_vprintk+0x1e>
					int remaining = min_width - (s - start);
    63de:	eba8 0309 	sub.w	r3, r8, r9
    63e2:	ebaa 0303 	sub.w	r3, sl, r3
					while (remaining-- > 0) {
    63e6:	e003      	b.n	63f0 <z_vprintk+0x2c0>
						out(' ', ctx);
    63e8:	4629      	mov	r1, r5
    63ea:	2020      	movs	r0, #32
    63ec:	47b0      	blx	r6
					while (remaining-- > 0) {
    63ee:	4643      	mov	r3, r8
    63f0:	f103 38ff 	add.w	r8, r3, #4294967295
    63f4:	2b00      	cmp	r3, #0
    63f6:	dcf7      	bgt.n	63e8 <z_vprintk+0x2b8>
			might_format = 0;
    63f8:	f04f 0800 	mov.w	r8, #0
    63fc:	e6a7      	b.n	614e <z_vprintk+0x1e>
				int c = va_arg(ap, int);
    63fe:	9b05      	ldr	r3, [sp, #20]
    6400:	1d1a      	adds	r2, r3, #4
    6402:	9205      	str	r2, [sp, #20]
				out(c, ctx);
    6404:	4629      	mov	r1, r5
    6406:	6818      	ldr	r0, [r3, #0]
    6408:	47b0      	blx	r6
			might_format = 0;
    640a:	f04f 0800 	mov.w	r8, #0
				break;
    640e:	e69e      	b.n	614e <z_vprintk+0x1e>
				out((int)'%', ctx);
    6410:	4629      	mov	r1, r5
    6412:	2025      	movs	r0, #37	; 0x25
    6414:	47b0      	blx	r6
			might_format = 0;
    6416:	f04f 0800 	mov.w	r8, #0
				break;
    641a:	e698      	b.n	614e <z_vprintk+0x1e>
				out((int)'%', ctx);
    641c:	4629      	mov	r1, r5
    641e:	2025      	movs	r0, #37	; 0x25
    6420:	47b0      	blx	r6
				out((int)*fmt, ctx);
    6422:	4629      	mov	r1, r5
    6424:	7820      	ldrb	r0, [r4, #0]
    6426:	47b0      	blx	r6
			might_format = 0;
    6428:	f04f 0800 	mov.w	r8, #0
				break;
    642c:	e68f      	b.n	614e <z_vprintk+0x1e>
			switch (*fmt) {
    642e:	f04f 0b03 	mov.w	fp, #3
    6432:	e68c      	b.n	614e <z_vprintk+0x1e>
					padding = PAD_ZERO_BEFORE;
    6434:	f04f 0b01 	mov.w	fp, #1
    6438:	e689      	b.n	614e <z_vprintk+0x1e>
			might_format = 0;
    643a:	f04f 0800 	mov.w	r8, #0
    643e:	e686      	b.n	614e <z_vprintk+0x1e>
}
    6440:	b007      	add	sp, #28
    6442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006446 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    6446:	b40f      	push	{r0, r1, r2, r3}
    6448:	b500      	push	{lr}
    644a:	b083      	sub	sp, #12
    644c:	a904      	add	r1, sp, #16
    644e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6452:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    6454:	f7fb f9ee 	bl	1834 <vprintk>
	}
	va_end(ap);
}
    6458:	b003      	add	sp, #12
    645a:	f85d eb04 	ldr.w	lr, [sp], #4
    645e:	b004      	add	sp, #16
    6460:	4770      	bx	lr

00006462 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    6462:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    6466:	8b01      	ldrh	r1, [r0, #24]
    6468:	f021 0107 	bic.w	r1, r1, #7
    646c:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    646e:	8301      	strh	r1, [r0, #24]
}
    6470:	4770      	bx	lr

00006472 <notify_monitors>:
{
    6472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6476:	4606      	mov	r6, r0
    6478:	460f      	mov	r7, r1
    647a:	4690      	mov	r8, r2
	return list->head;
    647c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    647e:	b119      	cbz	r1, 6488 <notify_monitors+0x16>
    6480:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    6482:	b131      	cbz	r1, 6492 <notify_monitors+0x20>
	return node->next;
    6484:	680c      	ldr	r4, [r1, #0]
    6486:	e004      	b.n	6492 <notify_monitors+0x20>
    6488:	460c      	mov	r4, r1
    648a:	e002      	b.n	6492 <notify_monitors+0x20>
    648c:	4623      	mov	r3, r4
    648e:	4621      	mov	r1, r4
    6490:	461c      	mov	r4, r3
    6492:	b159      	cbz	r1, 64ac <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    6494:	684d      	ldr	r5, [r1, #4]
    6496:	4643      	mov	r3, r8
    6498:	463a      	mov	r2, r7
    649a:	4630      	mov	r0, r6
    649c:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    649e:	2c00      	cmp	r4, #0
    64a0:	d0f4      	beq.n	648c <notify_monitors+0x1a>
    64a2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    64a4:	2c00      	cmp	r4, #0
    64a6:	d0f2      	beq.n	648e <notify_monitors+0x1c>
	return node->next;
    64a8:	6823      	ldr	r3, [r4, #0]
    64aa:	e7f0      	b.n	648e <notify_monitors+0x1c>
}
    64ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000064b0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    64b0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    64b2:	f013 0307 	ands.w	r3, r3, #7
    64b6:	d103      	bne.n	64c0 <process_recheck+0x10>
	return list->head;
    64b8:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    64ba:	b10a      	cbz	r2, 64c0 <process_recheck+0x10>
		evt = EVT_START;
    64bc:	2003      	movs	r0, #3
    64be:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    64c0:	2b02      	cmp	r3, #2
    64c2:	d003      	beq.n	64cc <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    64c4:	2b01      	cmp	r3, #1
    64c6:	d006      	beq.n	64d6 <process_recheck+0x26>
	int evt = EVT_NOP;
    64c8:	2000      	movs	r0, #0
    64ca:	4770      	bx	lr
		   && (mgr->refs == 0)) {
    64cc:	8b42      	ldrh	r2, [r0, #26]
    64ce:	2a00      	cmp	r2, #0
    64d0:	d1f8      	bne.n	64c4 <process_recheck+0x14>
		evt = EVT_STOP;
    64d2:	2004      	movs	r0, #4
    64d4:	4770      	bx	lr
    64d6:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    64d8:	b10b      	cbz	r3, 64de <process_recheck+0x2e>
		evt = EVT_RESET;
    64da:	2005      	movs	r0, #5
}
    64dc:	4770      	bx	lr
	int evt = EVT_NOP;
    64de:	2000      	movs	r0, #0
    64e0:	4770      	bx	lr

000064e2 <process_complete>:
{
    64e2:	b538      	push	{r3, r4, r5, lr}
    64e4:	4604      	mov	r4, r0
    64e6:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    64e8:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    64ea:	2a00      	cmp	r2, #0
    64ec:	db07      	blt.n	64fe <process_complete+0x1c>
    64ee:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    64f2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    64f4:	2a01      	cmp	r2, #1
    64f6:	d90e      	bls.n	6516 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    64f8:	2b04      	cmp	r3, #4
    64fa:	d032      	beq.n	6562 <process_complete+0x80>
}
    64fc:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    64fe:	e9d0 0100 	ldrd	r0, r1, [r0]
    6502:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    6506:	2300      	movs	r3, #0
    6508:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    650a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    650c:	2101      	movs	r1, #1
    650e:	4620      	mov	r0, r4
    6510:	f7ff ffa7 	bl	6462 <set_state>
    6514:	e7f2      	b.n	64fc <process_complete+0x1a>
		*clients = mgr->clients;
    6516:	e9d0 0100 	ldrd	r0, r1, [r0]
    651a:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    651e:	2200      	movs	r2, #0
    6520:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    6522:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    6524:	2b06      	cmp	r3, #6
    6526:	d117      	bne.n	6558 <process_complete+0x76>
	return list->head;
    6528:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    652a:	b13b      	cbz	r3, 653c <process_complete+0x5a>
				mgr->refs += 1U;
    652c:	8b62      	ldrh	r2, [r4, #26]
    652e:	3201      	adds	r2, #1
    6530:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    6532:	2b00      	cmp	r3, #0
    6534:	d0f9      	beq.n	652a <process_complete+0x48>
	return node->next;
    6536:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    6538:	2b00      	cmp	r3, #0
    653a:	d1f6      	bne.n	652a <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    653c:	2102      	movs	r1, #2
    653e:	4620      	mov	r0, r4
    6540:	f7ff ff8f 	bl	6462 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    6544:	4620      	mov	r0, r4
    6546:	f7ff ffb3 	bl	64b0 <process_recheck>
    654a:	2800      	cmp	r0, #0
    654c:	d0d6      	beq.n	64fc <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    654e:	8b23      	ldrh	r3, [r4, #24]
    6550:	f043 0320 	orr.w	r3, r3, #32
    6554:	8323      	strh	r3, [r4, #24]
    6556:	e7d1      	b.n	64fc <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    6558:	2100      	movs	r1, #0
    655a:	4620      	mov	r0, r4
    655c:	f7ff ff81 	bl	6462 <set_state>
    6560:	e7f0      	b.n	6544 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    6562:	2100      	movs	r1, #0
    6564:	f7ff ff7d 	bl	6462 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    6568:	4620      	mov	r0, r4
    656a:	f7ff ffa1 	bl	64b0 <process_recheck>
    656e:	2800      	cmp	r0, #0
    6570:	d0c4      	beq.n	64fc <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    6572:	8b23      	ldrh	r3, [r4, #24]
    6574:	f043 0320 	orr.w	r3, r3, #32
    6578:	8323      	strh	r3, [r4, #24]
}
    657a:	e7bf      	b.n	64fc <process_complete+0x1a>

0000657c <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    657c:	b158      	cbz	r0, 6596 <validate_args+0x1a>
{
    657e:	b510      	push	{r4, lr}
    6580:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6582:	b159      	cbz	r1, 659c <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    6584:	1d08      	adds	r0, r1, #4
    6586:	f7ff fd7d 	bl	6084 <sys_notify_validate>
	if ((rv == 0)
    658a:	b918      	cbnz	r0, 6594 <validate_args+0x18>
	    && ((cli->notify.flags
    658c:	68a3      	ldr	r3, [r4, #8]
    658e:	f033 0303 	bics.w	r3, r3, #3
    6592:	d106      	bne.n	65a2 <validate_args+0x26>
}
    6594:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6596:	f06f 0015 	mvn.w	r0, #21
}
    659a:	4770      	bx	lr
		return -EINVAL;
    659c:	f06f 0015 	mvn.w	r0, #21
    65a0:	e7f8      	b.n	6594 <validate_args+0x18>
		rv = -EINVAL;
    65a2:	f06f 0015 	mvn.w	r0, #21
    65a6:	e7f5      	b.n	6594 <validate_args+0x18>

000065a8 <notify_one>:
{
    65a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65ac:	4607      	mov	r7, r0
    65ae:	460c      	mov	r4, r1
    65b0:	4616      	mov	r6, r2
    65b2:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    65b4:	4619      	mov	r1, r3
    65b6:	1d20      	adds	r0, r4, #4
    65b8:	f7ff fd7b 	bl	60b2 <sys_notify_finalize>
	if (cb) {
    65bc:	b128      	cbz	r0, 65ca <notify_one+0x22>
    65be:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    65c0:	462b      	mov	r3, r5
    65c2:	4632      	mov	r2, r6
    65c4:	4621      	mov	r1, r4
    65c6:	4638      	mov	r0, r7
    65c8:	47c0      	blx	r8
}
    65ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000065ce <notify_all>:
{
    65ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    65d2:	4681      	mov	r9, r0
    65d4:	460c      	mov	r4, r1
    65d6:	4690      	mov	r8, r2
    65d8:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    65da:	e005      	b.n	65e8 <notify_all+0x1a>
	list->tail = node;
    65dc:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    65de:	463b      	mov	r3, r7
    65e0:	4642      	mov	r2, r8
    65e2:	4648      	mov	r0, r9
    65e4:	f7ff ffe0 	bl	65a8 <notify_one>
	return list->head;
    65e8:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    65ea:	b129      	cbz	r1, 65f8 <notify_all+0x2a>
	return node->next;
    65ec:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    65ee:	6025      	str	r5, [r4, #0]
	return list->tail;
    65f0:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    65f2:	428e      	cmp	r6, r1
    65f4:	d1f3      	bne.n	65de <notify_all+0x10>
    65f6:	e7f1      	b.n	65dc <notify_all+0xe>
}
    65f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000065fc <transition_complete>:
{
    65fc:	b510      	push	{r4, lr}
    65fe:	f04f 0420 	mov.w	r4, #32
    6602:	f3ef 8211 	mrs	r2, BASEPRI
    6606:	f384 8811 	msr	BASEPRI, r4
    660a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    660e:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    6610:	2101      	movs	r1, #1
    6612:	f7fb f91f 	bl	1854 <process_event>
}
    6616:	bd10      	pop	{r4, pc}

00006618 <onoff_manager_init>:
	if ((mgr == NULL)
    6618:	4603      	mov	r3, r0
    661a:	b168      	cbz	r0, 6638 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    661c:	b179      	cbz	r1, 663e <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    661e:	680a      	ldr	r2, [r1, #0]
    6620:	b182      	cbz	r2, 6644 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    6622:	684a      	ldr	r2, [r1, #4]
    6624:	b18a      	cbz	r2, 664a <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6626:	2000      	movs	r0, #0
    6628:	6018      	str	r0, [r3, #0]
    662a:	6058      	str	r0, [r3, #4]
    662c:	6098      	str	r0, [r3, #8]
    662e:	60d8      	str	r0, [r3, #12]
    6630:	6158      	str	r0, [r3, #20]
    6632:	6198      	str	r0, [r3, #24]
    6634:	6119      	str	r1, [r3, #16]
	return 0;
    6636:	4770      	bx	lr
		return -EINVAL;
    6638:	f06f 0015 	mvn.w	r0, #21
    663c:	4770      	bx	lr
    663e:	f06f 0015 	mvn.w	r0, #21
    6642:	4770      	bx	lr
    6644:	f06f 0015 	mvn.w	r0, #21
    6648:	4770      	bx	lr
    664a:	f06f 0015 	mvn.w	r0, #21
}
    664e:	4770      	bx	lr

00006650 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6652:	4604      	mov	r4, r0
    6654:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6656:	f7ff ff91 	bl	657c <validate_args>

	if (rv < 0) {
    665a:	1e06      	subs	r6, r0, #0
    665c:	db37      	blt.n	66ce <onoff_request+0x7e>
    665e:	f04f 0320 	mov.w	r3, #32
    6662:	f3ef 8211 	mrs	r2, BASEPRI
    6666:	f383 8811 	msr	BASEPRI, r3
    666a:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    666e:	8b25      	ldrh	r5, [r4, #24]
    6670:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6674:	8b63      	ldrh	r3, [r4, #26]
    6676:	f64f 71ff 	movw	r1, #65535	; 0xffff
    667a:	428b      	cmp	r3, r1
    667c:	d02f      	beq.n	66de <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    667e:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    6680:	2d02      	cmp	r5, #2
    6682:	d00c      	beq.n	669e <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    6684:	b18d      	cbz	r5, 66aa <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    6686:	2d04      	cmp	r5, #4
    6688:	d00f      	beq.n	66aa <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    668a:	2d06      	cmp	r5, #6
    668c:	d00d      	beq.n	66aa <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    668e:	2d05      	cmp	r5, #5
    6690:	d01f      	beq.n	66d2 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    6692:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    6696:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    6698:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    669a:	4608      	mov	r0, r1
    669c:	e00a      	b.n	66b4 <onoff_request+0x64>
		mgr->refs += 1U;
    669e:	3301      	adds	r3, #1
    66a0:	8363      	strh	r3, [r4, #26]
		notify = true;
    66a2:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    66a4:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    66a6:	4618      	mov	r0, r3
    66a8:	e004      	b.n	66b4 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    66aa:	fab5 f385 	clz	r3, r5
    66ae:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    66b0:	2100      	movs	r1, #0
		add_client = true;
    66b2:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    66b4:	b128      	cbz	r0, 66c2 <onoff_request+0x72>
	parent->next = child;
    66b6:	2000      	movs	r0, #0
    66b8:	6038      	str	r0, [r7, #0]
	return list->tail;
    66ba:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    66bc:	b1a8      	cbz	r0, 66ea <onoff_request+0x9a>
	parent->next = child;
    66be:	6007      	str	r7, [r0, #0]
	list->tail = node;
    66c0:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    66c2:	b9ab      	cbnz	r3, 66f0 <onoff_request+0xa0>
	__asm__ volatile(
    66c4:	f382 8811 	msr	BASEPRI, r2
    66c8:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    66cc:	b9a9      	cbnz	r1, 66fa <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    66ce:	4630      	mov	r0, r6
    66d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    66d2:	f06f 0622 	mvn.w	r6, #34	; 0x22
	bool notify = false;            /* do client notification */
    66d6:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    66d8:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    66da:	4608      	mov	r0, r1
    66dc:	e7ea      	b.n	66b4 <onoff_request+0x64>
		rv = -EAGAIN;
    66de:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    66e2:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    66e4:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    66e6:	4608      	mov	r0, r1
    66e8:	e7e4      	b.n	66b4 <onoff_request+0x64>
    66ea:	6067      	str	r7, [r4, #4]
	list->head = node;
    66ec:	6027      	str	r7, [r4, #0]
}
    66ee:	e7e8      	b.n	66c2 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    66f0:	2102      	movs	r1, #2
    66f2:	4620      	mov	r0, r4
    66f4:	f7fb f8ae 	bl	1854 <process_event>
    66f8:	e7e9      	b.n	66ce <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    66fa:	2300      	movs	r3, #0
    66fc:	462a      	mov	r2, r5
    66fe:	4639      	mov	r1, r7
    6700:	4620      	mov	r0, r4
    6702:	f7ff ff51 	bl	65a8 <notify_one>
    6706:	e7e2      	b.n	66ce <onoff_request+0x7e>

00006708 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    6708:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0) {
    670a:	1d13      	adds	r3, r2, #4
    670c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6710:	b9d3      	cbnz	r3, 6748 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
    6712:	2301      	movs	r3, #1
    6714:	fa03 f402 	lsl.w	r4, r3, r2
    6718:	68c3      	ldr	r3, [r0, #12]
    671a:	4323      	orrs	r3, r4
    671c:	60c3      	str	r3, [r0, #12]
		b->next = c;
    671e:	3204      	adds	r2, #4
    6720:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    6724:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->len);
    6728:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
    672a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    672e:	d307      	bcc.n	6740 <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    6730:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->len);
    6732:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    6734:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    6738:	d304      	bcc.n	6744 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    673a:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
    673c:	bc70      	pop	{r4, r5, r6}
    673e:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    6740:	8099      	strh	r1, [r3, #4]
    6742:	e7f6      	b.n	6732 <free_list_add_bidx+0x2a>
    6744:	80d9      	strh	r1, [r3, #6]
    6746:	e7f9      	b.n	673c <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
    6748:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->len);
    674c:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    674e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    6752:	d318      	bcc.n	6786 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
    6754:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
    6756:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
    675a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    675e:	d314      	bcc.n	678a <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
    6760:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->len);
    6762:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    6764:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    6768:	d311      	bcc.n	678e <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
    676a:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
    676c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->len);
    6770:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    6772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    6776:	d30c      	bcc.n	6792 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
    6778:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->len);
    677a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    677c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    6780:	d309      	bcc.n	6796 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    6782:	60a1      	str	r1, [r4, #8]
    6784:	e7da      	b.n	673c <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
    6786:	88a2      	ldrh	r2, [r4, #4]
    6788:	e7e5      	b.n	6756 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
    678a:	80aa      	strh	r2, [r5, #4]
    678c:	e7e9      	b.n	6762 <free_list_add_bidx+0x5a>
    678e:	80eb      	strh	r3, [r5, #6]
    6790:	e7ec      	b.n	676c <free_list_add_bidx+0x64>
    6792:	80d1      	strh	r1, [r2, #6]
    6794:	e7f1      	b.n	677a <free_list_add_bidx+0x72>
    6796:	80a1      	strh	r1, [r4, #4]
    6798:	e7d0      	b.n	673c <free_list_add_bidx+0x34>

0000679a <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    679a:	b508      	push	{r3, lr}
	return big_heap_chunks(h->len);
    679c:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1;
    679e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    67a2:	d307      	bcc.n	67b4 <free_list_add+0x1a>
	void *cmem = &buf[c];
    67a4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    67a8:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    67aa:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
    67ac:	2a01      	cmp	r2, #1
    67ae:	d002      	beq.n	67b6 <free_list_add+0x1c>
    67b0:	2200      	movs	r2, #0
    67b2:	e000      	b.n	67b6 <free_list_add+0x1c>
    67b4:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    67b6:	b9a2      	cbnz	r2, 67e2 <free_list_add+0x48>
	void *cmem = &buf[c];
    67b8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    67bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    67c0:	d310      	bcc.n	67e4 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    67c2:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    67c4:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    67c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    67ca:	d30d      	bcc.n	67e8 <free_list_add+0x4e>
    67cc:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    67ce:	3308      	adds	r3, #8
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    67d0:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    67d4:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    67d6:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
    67da:	f1c2 021f 	rsb	r2, r2, #31
    67de:	f7ff ff93 	bl	6708 <free_list_add_bidx>
	}
}
    67e2:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    67e4:	8852      	ldrh	r2, [r2, #2]
    67e6:	e7ed      	b.n	67c4 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    67e8:	2304      	movs	r3, #4
    67ea:	e7f0      	b.n	67ce <free_list_add+0x34>

000067ec <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    67ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67ee:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
    67f0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    67f4:	d32e      	bcc.n	6854 <sys_heap_init+0x68>
    67f6:	2508      	movs	r5, #8
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    67f8:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    67fa:	1dc8      	adds	r0, r1, #7
    67fc:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    6800:	440d      	add	r5, r1
    6802:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    6806:	1a2d      	subs	r5, r5, r0
    6808:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
    680a:	4606      	mov	r6, r0
	heap->heap = h;
    680c:	6018      	str	r0, [r3, #0]
	h->chunk0_hdr_area = 0;
    680e:	2200      	movs	r2, #0
    6810:	2300      	movs	r3, #0
    6812:	e9c0 2300 	strd	r2, r3, [r0]
	h->len = buf_sz;
    6816:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
    6818:	2300      	movs	r3, #0
    681a:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
    681c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    6820:	d31a      	bcc.n	6858 <sys_heap_init+0x6c>
    6822:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    6824:	3308      	adds	r3, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    6826:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
    682a:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    682c:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    6830:	f1c3 0c20 	rsb	ip, r3, #32
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    6834:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
    6838:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    683a:	f103 0e07 	add.w	lr, r3, #7
    683e:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    6842:	2300      	movs	r3, #0
    6844:	4563      	cmp	r3, ip
    6846:	da09      	bge.n	685c <sys_heap_init+0x70>
		h->buckets[i].next = 0;
    6848:	1d1a      	adds	r2, r3, #4
    684a:	2400      	movs	r4, #0
    684c:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    6850:	3301      	adds	r3, #1
    6852:	e7f7      	b.n	6844 <sys_heap_init+0x58>
	return big_heap_bytes(size) ? 8 : 4;
    6854:	2504      	movs	r5, #4
    6856:	e7cf      	b.n	67f8 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
    6858:	2304      	movs	r3, #4
    685a:	e7e3      	b.n	6824 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    685c:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
    685e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    6862:	d32e      	bcc.n	68c2 <sys_heap_init+0xd6>
		((uint32_t *)cmem)[f] = val;
    6864:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
    6866:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    686a:	d32c      	bcc.n	68c6 <sys_heap_init+0xda>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    686c:	6843      	ldr	r3, [r0, #4]
    686e:	f043 0301 	orr.w	r3, r3, #1
    6872:	6043      	str	r3, [r0, #4]
	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    6874:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    6876:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
    6878:	f02e 0307 	bic.w	r3, lr, #7
    687c:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
    687e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    6882:	d325      	bcc.n	68d0 <sys_heap_init+0xe4>
		((uint32_t *)cmem)[f] = val;
    6884:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->len);
    6886:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    6888:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    688c:	d322      	bcc.n	68d4 <sys_heap_init+0xe8>
		((uint32_t *)cmem)[f] = val;
    688e:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
    6890:	f025 0307 	bic.w	r3, r5, #7
    6894:	4405      	add	r5, r0
	return big_heap_chunks(h->len);
    6896:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    6898:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    689c:	d31c      	bcc.n	68d8 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    689e:	2400      	movs	r4, #0
    68a0:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->len);
    68a2:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    68a4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    68a8:	d319      	bcc.n	68de <sys_heap_init+0xf2>
		((uint32_t *)cmem)[f] = val;
    68aa:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->len);
    68ac:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    68ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    68b2:	d316      	bcc.n	68e2 <sys_heap_init+0xf6>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    68b4:	686b      	ldr	r3, [r5, #4]
    68b6:	f043 0301 	orr.w	r3, r3, #1
    68ba:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);

	free_list_add(h, chunk0_size);
    68bc:	f7ff ff6d 	bl	679a <free_list_add>
}
    68c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    68c2:	8043      	strh	r3, [r0, #2]
    68c4:	e7cf      	b.n	6866 <sys_heap_init+0x7a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    68c6:	8843      	ldrh	r3, [r0, #2]
    68c8:	f043 0301 	orr.w	r3, r3, #1
    68cc:	8043      	strh	r3, [r0, #2]
    68ce:	e7d1      	b.n	6874 <sys_heap_init+0x88>
		((uint16_t *)cmem)[f] = val;
    68d0:	8066      	strh	r6, [r4, #2]
    68d2:	e7d8      	b.n	6886 <sys_heap_init+0x9a>
    68d4:	52c1      	strh	r1, [r0, r3]
    68d6:	e7db      	b.n	6890 <sys_heap_init+0xa4>
    68d8:	2400      	movs	r4, #0
    68da:	806c      	strh	r4, [r5, #2]
    68dc:	e7e1      	b.n	68a2 <sys_heap_init+0xb6>
    68de:	52c2      	strh	r2, [r0, r3]
    68e0:	e7e4      	b.n	68ac <sys_heap_init+0xc0>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    68e2:	886b      	ldrh	r3, [r5, #2]
    68e4:	f043 0301 	orr.w	r3, r3, #1
    68e8:	806b      	strh	r3, [r5, #2]
    68ea:	e7e7      	b.n	68bc <sys_heap_init+0xd0>

000068ec <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    68ec:	4770      	bx	lr

000068ee <z_platform_init>:

void z_platform_init(void)
{
    68ee:	b508      	push	{r3, lr}
	SystemInit();
    68f0:	f7fc feac 	bl	364c <SystemInit>
}
    68f4:	bd08      	pop	{r3, pc}

000068f6 <dummy_timestamp>:
}
    68f6:	2000      	movs	r0, #0
    68f8:	4770      	bx	lr

000068fa <k_cycle_get_32_wrapper>:
{
    68fa:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    68fc:	f7fb fdbe 	bl	247c <z_timer_cycle_get_32>
}
    6900:	bd08      	pop	{r3, pc}

00006902 <log_string_sync>:
{
    6902:	b40e      	push	{r1, r2, r3}
    6904:	b500      	push	{lr}
    6906:	b082      	sub	sp, #8
    6908:	aa03      	add	r2, sp, #12
    690a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
    690e:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
    6910:	2300      	movs	r3, #0
    6912:	f7fb f86b 	bl	19ec <log_generic>
}
    6916:	b002      	add	sp, #8
    6918:	f85d eb04 	ldr.w	lr, [sp], #4
    691c:	b003      	add	sp, #12
    691e:	4770      	bx	lr

00006920 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    6920:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    6922:	f7fb f8d1 	bl	1ac8 <log_init>
	}

	return 0;
}
    6926:	2000      	movs	r0, #0
    6928:	bd08      	pop	{r3, pc}

0000692a <out_func>:
{
    692a:	b500      	push	{lr}
    692c:	b083      	sub	sp, #12
    692e:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
    6930:	680b      	ldr	r3, [r1, #0]
    6932:	684a      	ldr	r2, [r1, #4]
    6934:	6852      	ldr	r2, [r2, #4]
    6936:	2101      	movs	r1, #1
    6938:	a801      	add	r0, sp, #4
    693a:	4798      	blx	r3
}
    693c:	2000      	movs	r0, #0
    693e:	b003      	add	sp, #12
    6940:	f85d fb04 	ldr.w	pc, [sp], #4

00006944 <buffer_write>:
{
    6944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6946:	4607      	mov	r7, r0
    6948:	460d      	mov	r5, r1
    694a:	4614      	mov	r4, r2
    694c:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    694e:	4632      	mov	r2, r6
    6950:	4621      	mov	r1, r4
    6952:	4628      	mov	r0, r5
    6954:	47b8      	blx	r7
		buf += processed;
    6956:	4405      	add	r5, r0
	} while (len != 0);
    6958:	1a24      	subs	r4, r4, r0
    695a:	d1f8      	bne.n	694e <buffer_write+0xa>
}
    695c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000695e <ends_with_newline>:
	char c = '\0';
    695e:	2200      	movs	r2, #0
	while (*fmt != '\0') {
    6960:	7803      	ldrb	r3, [r0, #0]
    6962:	b113      	cbz	r3, 696a <ends_with_newline+0xc>
		fmt++;
    6964:	3001      	adds	r0, #1
		c = *fmt;
    6966:	461a      	mov	r2, r3
    6968:	e7fa      	b.n	6960 <ends_with_newline+0x2>
}
    696a:	2a0a      	cmp	r2, #10
    696c:	bf14      	ite	ne
    696e:	2000      	movne	r0, #0
    6970:	2001      	moveq	r0, #1
    6972:	4770      	bx	lr

00006974 <color_prefix>:
{
    6974:	b508      	push	{r3, lr}
    6976:	4613      	mov	r3, r2
	color_print(log_output, color, true, level);
    6978:	2201      	movs	r2, #1
    697a:	f7fb f955 	bl	1c28 <color_print>
}
    697e:	bd08      	pop	{r3, pc}

00006980 <color_postfix>:
{
    6980:	b508      	push	{r3, lr}
    6982:	4613      	mov	r3, r2
	color_print(log_output, color, false, level);
    6984:	2200      	movs	r2, #0
    6986:	f7fb f94f 	bl	1c28 <color_print>
}
    698a:	bd08      	pop	{r3, pc}

0000698c <postfix_print>:
{
    698c:	b538      	push	{r3, r4, r5, lr}
    698e:	4605      	mov	r5, r0
    6990:	460c      	mov	r4, r1
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
    6992:	f001 0101 	and.w	r1, r1, #1
    6996:	f7ff fff3 	bl	6980 <color_postfix>
	newline_print(log_output, flags);
    699a:	4621      	mov	r1, r4
    699c:	4628      	mov	r0, r5
    699e:	f7fb f959 	bl	1c54 <newline_print>
}
    69a2:	bd38      	pop	{r3, r4, r5, pc}

000069a4 <prefix_print>:
{
    69a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    69a8:	b083      	sub	sp, #12
    69aa:	4604      	mov	r4, r0
    69ac:	4615      	mov	r5, r2
    69ae:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    69b2:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    69b6:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
    69ba:	f011 0702 	ands.w	r7, r1, #2
    69be:	d113      	bne.n	69e8 <prefix_print+0x44>
		color_prefix(log_output, colors_on, level);
    69c0:	4632      	mov	r2, r6
    69c2:	4649      	mov	r1, r9
    69c4:	4620      	mov	r0, r4
    69c6:	f7ff ffd5 	bl	6974 <color_prefix>
	length += ids_print(log_output, level_on, func_on,
    69ca:	9601      	str	r6, [sp, #4]
    69cc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    69d0:	9300      	str	r3, [sp, #0]
    69d2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    69d6:	462a      	mov	r2, r5
    69d8:	4641      	mov	r1, r8
    69da:	4620      	mov	r0, r4
    69dc:	f7fb f9ac 	bl	1d38 <ids_print>
}
    69e0:	4438      	add	r0, r7
    69e2:	b003      	add	sp, #12
    69e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(log_output, flags, timestamp);
    69e8:	461a      	mov	r2, r3
    69ea:	f7fb f8d7 	bl	1b9c <timestamp_print>
    69ee:	4607      	mov	r7, r0
    69f0:	e7e6      	b.n	69c0 <prefix_print+0x1c>

000069f2 <log_output_flush>:
{
    69f2:	b510      	push	{r4, lr}
    69f4:	4604      	mov	r4, r0
		     log_output->control_block->offset,
    69f6:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    69f8:	6853      	ldr	r3, [r2, #4]
    69fa:	6812      	ldr	r2, [r2, #0]
    69fc:	6881      	ldr	r1, [r0, #8]
    69fe:	6800      	ldr	r0, [r0, #0]
    6a00:	f7ff ffa0 	bl	6944 <buffer_write>
	log_output->control_block->offset = 0;
    6a04:	6863      	ldr	r3, [r4, #4]
    6a06:	2200      	movs	r2, #0
    6a08:	601a      	str	r2, [r3, #0]
}
    6a0a:	bd10      	pop	{r4, pc}

00006a0c <should_bail>:
	if (info->start_offset < data->area_off) {
    6a0c:	6800      	ldr	r0, [r0, #0]
    6a0e:	684b      	ldr	r3, [r1, #4]
    6a10:	4298      	cmp	r0, r3
    6a12:	d30b      	bcc.n	6a2c <should_bail+0x20>
{
    6a14:	b410      	push	{r4}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    6a16:	688c      	ldr	r4, [r1, #8]
    6a18:	4423      	add	r3, r4
    6a1a:	4298      	cmp	r0, r3
    6a1c:	d209      	bcs.n	6a32 <should_bail+0x26>
	} else if (data->ret_idx >= data->ret_len) {
    6a1e:	6908      	ldr	r0, [r1, #16]
    6a20:	694b      	ldr	r3, [r1, #20]
    6a22:	4298      	cmp	r0, r3
    6a24:	d209      	bcs.n	6a3a <should_bail+0x2e>
	return false;
    6a26:	2000      	movs	r0, #0
}
    6a28:	bc10      	pop	{r4}
    6a2a:	4770      	bx	lr
		*bail_value = true;
    6a2c:	2001      	movs	r0, #1
    6a2e:	7010      	strb	r0, [r2, #0]
}
    6a30:	4770      	bx	lr
		*bail_value = false;
    6a32:	2300      	movs	r3, #0
    6a34:	7013      	strb	r3, [r2, #0]
		return true;
    6a36:	2001      	movs	r0, #1
    6a38:	e7f6      	b.n	6a28 <should_bail+0x1c>
		data->status = -ENOMEM;
    6a3a:	f06f 030b 	mvn.w	r3, #11
    6a3e:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    6a40:	2300      	movs	r3, #0
    6a42:	7013      	strb	r3, [r2, #0]
		return true;
    6a44:	2001      	movs	r0, #1
    6a46:	e7ef      	b.n	6a28 <should_bail+0x1c>

00006a48 <get_sectors_cb>:
{
    6a48:	b570      	push	{r4, r5, r6, lr}
    6a4a:	b082      	sub	sp, #8
    6a4c:	4605      	mov	r5, r0
    6a4e:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
    6a50:	68ce      	ldr	r6, [r1, #12]
	if (should_bail(info, data, &bail)) {
    6a52:	f10d 0207 	add.w	r2, sp, #7
    6a56:	f7ff ffd9 	bl	6a0c <should_bail>
    6a5a:	b980      	cbnz	r0, 6a7e <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    6a5c:	682b      	ldr	r3, [r5, #0]
    6a5e:	6861      	ldr	r1, [r4, #4]
    6a60:	6922      	ldr	r2, [r4, #16]
    6a62:	1a5b      	subs	r3, r3, r1
    6a64:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    6a68:	6923      	ldr	r3, [r4, #16]
    6a6a:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
    6a6e:	686b      	ldr	r3, [r5, #4]
    6a70:	6073      	str	r3, [r6, #4]
	data->ret_idx++;
    6a72:	6923      	ldr	r3, [r4, #16]
    6a74:	3301      	adds	r3, #1
    6a76:	6123      	str	r3, [r4, #16]
	return true;
    6a78:	2001      	movs	r0, #1
}
    6a7a:	b002      	add	sp, #8
    6a7c:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
    6a7e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6a82:	e7fa      	b.n	6a7a <get_sectors_cb+0x32>

00006a84 <flash_area_layout>:
{
    6a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a86:	460d      	mov	r5, r1
    6a88:	4617      	mov	r7, r2
    6a8a:	461e      	mov	r6, r3
    6a8c:	9c06      	ldr	r4, [sp, #24]
	cb_data->area_idx = idx;
    6a8e:	6020      	str	r0, [r4, #0]
	fa = get_flash_area_from_id(idx);
    6a90:	f7fb fa4a 	bl	1f28 <get_flash_area_from_id>
	if (fa == NULL) {
    6a94:	b1b8      	cbz	r0, 6ac6 <flash_area_layout+0x42>
	cb_data->area_off = fa->fa_off;
    6a96:	6843      	ldr	r3, [r0, #4]
    6a98:	6063      	str	r3, [r4, #4]
	cb_data->area_len = fa->fa_size;
    6a9a:	6883      	ldr	r3, [r0, #8]
    6a9c:	60a3      	str	r3, [r4, #8]
	cb_data->ret = ret;
    6a9e:	60e7      	str	r7, [r4, #12]
	cb_data->ret_idx = 0U;
    6aa0:	2200      	movs	r2, #0
    6aa2:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
    6aa4:	682b      	ldr	r3, [r5, #0]
    6aa6:	6163      	str	r3, [r4, #20]
	cb_data->status = 0;
    6aa8:	61a2      	str	r2, [r4, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
    6aaa:	68c0      	ldr	r0, [r0, #12]
    6aac:	f7fd fede 	bl	486c <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    6ab0:	b160      	cbz	r0, 6acc <flash_area_layout+0x48>
	flash_page_foreach(flash_dev, cb, cb_data);
    6ab2:	4622      	mov	r2, r4
    6ab4:	4631      	mov	r1, r6
    6ab6:	f000 fba9 	bl	720c <flash_page_foreach>
	if (cb_data->status == 0) {
    6aba:	69a3      	ldr	r3, [r4, #24]
    6abc:	b90b      	cbnz	r3, 6ac2 <flash_area_layout+0x3e>
		*cnt = cb_data->ret_idx;
    6abe:	6923      	ldr	r3, [r4, #16]
    6ac0:	602b      	str	r3, [r5, #0]
	return cb_data->status;
    6ac2:	69a0      	ldr	r0, [r4, #24]
}
    6ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    6ac6:	f06f 0015 	mvn.w	r0, #21
    6aca:	e7fb      	b.n	6ac4 <flash_area_layout+0x40>
		return -ENODEV;
    6acc:	f06f 0012 	mvn.w	r0, #18
    6ad0:	e7f8      	b.n	6ac4 <flash_area_layout+0x40>

00006ad2 <flash_area_close>:
}
    6ad2:	4770      	bx	lr

00006ad4 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    6ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ad6:	4604      	mov	r4, r0
    6ad8:	460d      	mov	r5, r1
    6ada:	4617      	mov	r7, r2
    6adc:	461e      	mov	r6, r3
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6ade:	6883      	ldr	r3, [r0, #8]
    6ae0:	428b      	cmp	r3, r1
    6ae2:	d304      	bcc.n	6aee <flash_area_read+0x1a>
    6ae4:	1872      	adds	r2, r6, r1
    6ae6:	4293      	cmp	r3, r2
    6ae8:	d20e      	bcs.n	6b08 <flash_area_read+0x34>
    6aea:	2300      	movs	r3, #0
    6aec:	e000      	b.n	6af0 <flash_area_read+0x1c>
    6aee:	2300      	movs	r3, #0
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    6af0:	b163      	cbz	r3, 6b0c <flash_area_read+0x38>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    6af2:	68e0      	ldr	r0, [r4, #12]
    6af4:	f7fd feba 	bl	486c <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    6af8:	6861      	ldr	r1, [r4, #4]
    6afa:	4429      	add	r1, r5

static inline int z_impl_flash_read(const struct device *dev, off_t offset,
				    void *data,
				    size_t len)
{
	const struct flash_driver_api *api =
    6afc:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    6afe:	681c      	ldr	r4, [r3, #0]
    6b00:	4633      	mov	r3, r6
    6b02:	463a      	mov	r2, r7
    6b04:	47a0      	blx	r4
}
    6b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6b08:	2301      	movs	r3, #1
    6b0a:	e7f1      	b.n	6af0 <flash_area_read+0x1c>
		return -EINVAL;
    6b0c:	f06f 0015 	mvn.w	r0, #21
    6b10:	e7f9      	b.n	6b06 <flash_area_read+0x32>

00006b12 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    6b12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b16:	4605      	mov	r5, r0
    6b18:	460e      	mov	r6, r1
    6b1a:	4691      	mov	r9, r2
    6b1c:	461f      	mov	r7, r3
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6b1e:	6883      	ldr	r3, [r0, #8]
    6b20:	428b      	cmp	r3, r1
    6b22:	d304      	bcc.n	6b2e <flash_area_write+0x1c>
    6b24:	187a      	adds	r2, r7, r1
    6b26:	4293      	cmp	r3, r2
    6b28:	d21e      	bcs.n	6b68 <flash_area_write+0x56>
    6b2a:	2300      	movs	r3, #0
    6b2c:	e000      	b.n	6b30 <flash_area_write+0x1e>
    6b2e:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    6b30:	b1e3      	cbz	r3, 6b6c <flash_area_write+0x5a>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    6b32:	68e8      	ldr	r0, [r5, #12]
    6b34:	f7fd fe9a 	bl	486c <z_impl_device_get_binding>
    6b38:	4604      	mov	r4, r0
					 bool enable);

static inline int z_impl_flash_write_protection_set(const struct device *dev,
						    bool enable)
{
	const struct flash_driver_api *api =
    6b3a:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
    6b3c:	68db      	ldr	r3, [r3, #12]
    6b3e:	2100      	movs	r1, #0
    6b40:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    6b42:	4680      	mov	r8, r0
    6b44:	b968      	cbnz	r0, 6b62 <flash_area_write+0x50>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    6b46:	6869      	ldr	r1, [r5, #4]
    6b48:	4431      	add	r1, r6
	const struct flash_driver_api *api =
    6b4a:	68a3      	ldr	r3, [r4, #8]
	return api->write(dev, offset, data, len);
    6b4c:	685d      	ldr	r5, [r3, #4]
    6b4e:	463b      	mov	r3, r7
    6b50:	464a      	mov	r2, r9
    6b52:	4620      	mov	r0, r4
    6b54:	47a8      	blx	r5
    6b56:	4680      	mov	r8, r0
	const struct flash_driver_api *api =
    6b58:	68a3      	ldr	r3, [r4, #8]
	return api->write_protection(dev, enable);
    6b5a:	68db      	ldr	r3, [r3, #12]
    6b5c:	2101      	movs	r1, #1
    6b5e:	4620      	mov	r0, r4
    6b60:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    6b62:	4640      	mov	r0, r8
    6b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6b68:	2301      	movs	r3, #1
    6b6a:	e7e1      	b.n	6b30 <flash_area_write+0x1e>
		return -EINVAL;
    6b6c:	f06f 0815 	mvn.w	r8, #21
    6b70:	e7f7      	b.n	6b62 <flash_area_write+0x50>

00006b72 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    6b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b76:	4605      	mov	r5, r0
    6b78:	460e      	mov	r6, r1
    6b7a:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6b7c:	6883      	ldr	r3, [r0, #8]
    6b7e:	428b      	cmp	r3, r1
    6b80:	d304      	bcc.n	6b8c <flash_area_erase+0x1a>
    6b82:	440a      	add	r2, r1
    6b84:	4293      	cmp	r3, r2
    6b86:	d21d      	bcs.n	6bc4 <flash_area_erase+0x52>
    6b88:	2300      	movs	r3, #0
    6b8a:	e000      	b.n	6b8e <flash_area_erase+0x1c>
    6b8c:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    6b8e:	b1db      	cbz	r3, 6bc8 <flash_area_erase+0x56>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    6b90:	68e8      	ldr	r0, [r5, #12]
    6b92:	f7fd fe6b 	bl	486c <z_impl_device_get_binding>
    6b96:	4604      	mov	r4, r0
	const struct flash_driver_api *api =
    6b98:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
    6b9a:	68db      	ldr	r3, [r3, #12]
    6b9c:	2100      	movs	r1, #0
    6b9e:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    6ba0:	4680      	mov	r8, r0
    6ba2:	b960      	cbnz	r0, 6bbe <flash_area_erase+0x4c>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    6ba4:	6869      	ldr	r1, [r5, #4]
    6ba6:	4431      	add	r1, r6
	const struct flash_driver_api *api =
    6ba8:	68a3      	ldr	r3, [r4, #8]
	return api->erase(dev, offset, size);
    6baa:	689b      	ldr	r3, [r3, #8]
    6bac:	463a      	mov	r2, r7
    6bae:	4620      	mov	r0, r4
    6bb0:	4798      	blx	r3
    6bb2:	4680      	mov	r8, r0
	const struct flash_driver_api *api =
    6bb4:	68a3      	ldr	r3, [r4, #8]
	return api->write_protection(dev, enable);
    6bb6:	68db      	ldr	r3, [r3, #12]
    6bb8:	2101      	movs	r1, #1
    6bba:	4620      	mov	r0, r4
    6bbc:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    6bbe:	4640      	mov	r0, r8
    6bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6bc4:	2301      	movs	r3, #1
    6bc6:	e7e2      	b.n	6b8e <flash_area_erase+0x1c>
		return -EINVAL;
    6bc8:	f06f 0815 	mvn.w	r8, #21
    6bcc:	e7f7      	b.n	6bbe <flash_area_erase+0x4c>

00006bce <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
    6bce:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    6bd0:	68c0      	ldr	r0, [r0, #12]
    6bd2:	f7fd fe4b 	bl	486c <z_impl_device_get_binding>
 */
__syscall size_t flash_get_write_block_size(const struct device *dev);

static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
    6bd6:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    6bd8:	691b      	ldr	r3, [r3, #16]
    6bda:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    6bdc:	7800      	ldrb	r0, [r0, #0]
    6bde:	bd08      	pop	{r3, pc}

00006be0 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    6be0:	68c0      	ldr	r0, [r0, #12]
	return &data->subsys[type];
    6be2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6be6:	0089      	lsls	r1, r1, #2
    6be8:	3138      	adds	r1, #56	; 0x38
}
    6bea:	4408      	add	r0, r1
    6bec:	4770      	bx	lr

00006bee <get_sub_config>:
	const struct nrf_clock_control_config *config =
    6bee:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    6bf0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    6bf4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6bf8:	4770      	bx	lr

00006bfa <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    6bfa:	68c0      	ldr	r0, [r0, #12]
	return &data->mgr[type];
    6bfc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    6c00:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c04:	4770      	bx	lr

00006c06 <get_status>:
{
    6c06:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6c08:	b2c9      	uxtb	r1, r1
    6c0a:	f7ff ffe9 	bl	6be0 <get_sub_data>
    6c0e:	6880      	ldr	r0, [r0, #8]
}
    6c10:	f000 0007 	and.w	r0, r0, #7
    6c14:	bd08      	pop	{r3, pc}

00006c16 <set_off_state>:
	__asm__ volatile(
    6c16:	f04f 0320 	mov.w	r3, #32
    6c1a:	f3ef 8211 	mrs	r2, BASEPRI
    6c1e:	f383 8811 	msr	BASEPRI, r3
    6c22:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6c26:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6c28:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    6c2c:	d001      	beq.n	6c32 <set_off_state+0x1c>
    6c2e:	428b      	cmp	r3, r1
    6c30:	d107      	bne.n	6c42 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6c32:	2301      	movs	r3, #1
    6c34:	6003      	str	r3, [r0, #0]
	int err = 0;
    6c36:	2000      	movs	r0, #0
	__asm__ volatile(
    6c38:	f382 8811 	msr	BASEPRI, r2
    6c3c:	f3bf 8f6f 	isb	sy
}
    6c40:	4770      	bx	lr
		err = -EPERM;
    6c42:	f04f 30ff 	mov.w	r0, #4294967295
    6c46:	e7f7      	b.n	6c38 <set_off_state+0x22>

00006c48 <set_starting_state>:
{
    6c48:	b410      	push	{r4}
	__asm__ volatile(
    6c4a:	f04f 0320 	mov.w	r3, #32
    6c4e:	f3ef 8211 	mrs	r2, BASEPRI
    6c52:	f383 8811 	msr	BASEPRI, r3
    6c56:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6c5a:	6803      	ldr	r3, [r0, #0]
    6c5c:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6c60:	f003 0307 	and.w	r3, r3, #7
    6c64:	2b01      	cmp	r3, #1
    6c66:	d009      	beq.n	6c7c <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    6c68:	428c      	cmp	r4, r1
    6c6a:	d00a      	beq.n	6c82 <set_starting_state+0x3a>
		err = -EPERM;
    6c6c:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    6c70:	f382 8811 	msr	BASEPRI, r2
    6c74:	f3bf 8f6f 	isb	sy
}
    6c78:	bc10      	pop	{r4}
    6c7a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6c7c:	6001      	str	r1, [r0, #0]
	int err = 0;
    6c7e:	2000      	movs	r0, #0
    6c80:	e7f6      	b.n	6c70 <set_starting_state+0x28>
		err = -EBUSY;
    6c82:	f06f 000f 	mvn.w	r0, #15
    6c86:	e7f3      	b.n	6c70 <set_starting_state+0x28>

00006c88 <set_on_state>:
	__asm__ volatile(
    6c88:	f04f 0320 	mov.w	r3, #32
    6c8c:	f3ef 8211 	mrs	r2, BASEPRI
    6c90:	f383 8811 	msr	BASEPRI, r3
    6c94:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6c98:	6803      	ldr	r3, [r0, #0]
    6c9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6c9e:	f043 0302 	orr.w	r3, r3, #2
    6ca2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6ca4:	f382 8811 	msr	BASEPRI, r2
    6ca8:	f3bf 8f6f 	isb	sy
}
    6cac:	4770      	bx	lr

00006cae <clkstarted_handle>:
{
    6cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cb0:	4606      	mov	r6, r0
    6cb2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    6cb4:	f7ff ff94 	bl	6be0 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    6cb8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    6cba:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    6cbc:	2300      	movs	r3, #0
    6cbe:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    6cc2:	f7ff ffe1 	bl	6c88 <set_on_state>
	if (callback) {
    6cc6:	b11d      	cbz	r5, 6cd0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    6cc8:	463a      	mov	r2, r7
    6cca:	4621      	mov	r1, r4
    6ccc:	4630      	mov	r0, r6
    6cce:	47a8      	blx	r5
}
    6cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006cd2 <stop>:
{
    6cd2:	b570      	push	{r4, r5, r6, lr}
    6cd4:	4606      	mov	r6, r0
    6cd6:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6cd8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6cda:	4621      	mov	r1, r4
    6cdc:	f7ff ff80 	bl	6be0 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    6ce0:	4629      	mov	r1, r5
    6ce2:	3008      	adds	r0, #8
    6ce4:	f7ff ff97 	bl	6c16 <set_off_state>
	if (err < 0) {
    6ce8:	2800      	cmp	r0, #0
    6cea:	db06      	blt.n	6cfa <stop+0x28>
	get_sub_config(dev, type)->stop();
    6cec:	4621      	mov	r1, r4
    6cee:	4630      	mov	r0, r6
    6cf0:	f7ff ff7d 	bl	6bee <get_sub_config>
    6cf4:	6843      	ldr	r3, [r0, #4]
    6cf6:	4798      	blx	r3
	return 0;
    6cf8:	2000      	movs	r0, #0
}
    6cfa:	bd70      	pop	{r4, r5, r6, pc}

00006cfc <api_stop>:
{
    6cfc:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    6cfe:	2280      	movs	r2, #128	; 0x80
    6d00:	f7ff ffe7 	bl	6cd2 <stop>
}
    6d04:	bd08      	pop	{r3, pc}

00006d06 <async_start>:
{
    6d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d0a:	4607      	mov	r7, r0
    6d0c:	4616      	mov	r6, r2
    6d0e:	461d      	mov	r5, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6d10:	fa5f f881 	uxtb.w	r8, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6d14:	4641      	mov	r1, r8
    6d16:	f7ff ff63 	bl	6be0 <get_sub_data>
    6d1a:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    6d1c:	4629      	mov	r1, r5
    6d1e:	3008      	adds	r0, #8
    6d20:	f7ff ff92 	bl	6c48 <set_starting_state>
	if (err < 0) {
    6d24:	2800      	cmp	r0, #0
    6d26:	db0a      	blt.n	6d3e <async_start+0x38>
	subdata->cb = data->cb;
    6d28:	6873      	ldr	r3, [r6, #4]
    6d2a:	6023      	str	r3, [r4, #0]
	subdata->user_data = data->user_data;
    6d2c:	68b3      	ldr	r3, [r6, #8]
    6d2e:	6063      	str	r3, [r4, #4]
	 get_sub_config(dev, type)->start();
    6d30:	4641      	mov	r1, r8
    6d32:	4638      	mov	r0, r7
    6d34:	f7ff ff5b 	bl	6bee <get_sub_config>
    6d38:	6803      	ldr	r3, [r0, #0]
    6d3a:	4798      	blx	r3
	return 0;
    6d3c:	2000      	movs	r0, #0
}
    6d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006d42 <api_start>:
{
    6d42:	b508      	push	{r3, lr}
	return async_start(dev, subsys, data, CTX_API);
    6d44:	2380      	movs	r3, #128	; 0x80
    6d46:	f7ff ffde 	bl	6d06 <async_start>
}
    6d4a:	bd08      	pop	{r3, pc}

00006d4c <api_blocking_start>:
}
    6d4c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6d50:	4770      	bx	lr

00006d52 <onoff_started_callback>:
{
    6d52:	b510      	push	{r4, lr}
    6d54:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    6d56:	b2c9      	uxtb	r1, r1
    6d58:	f7ff ff4f 	bl	6bfa <get_onoff_manager>
	notify(mgr, 0);
    6d5c:	2100      	movs	r1, #0
    6d5e:	47a0      	blx	r4
}
    6d60:	bd10      	pop	{r4, pc}

00006d62 <lfclk_stop>:
{
    6d62:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_lfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6d64:	2000      	movs	r0, #0
    6d66:	f7fc fd5f 	bl	3828 <nrfx_clock_stop>
}
    6d6a:	bd08      	pop	{r3, pc}

00006d6c <hfclk_stop>:
{
    6d6c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6d6e:	2001      	movs	r0, #1
    6d70:	f7fc fd5a 	bl	3828 <nrfx_clock_stop>
}
    6d74:	bd08      	pop	{r3, pc}

00006d76 <lfclk_start>:
{
    6d76:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6d78:	2000      	movs	r0, #0
    6d7a:	f7fc fd1d 	bl	37b8 <nrfx_clock_start>
}
    6d7e:	bd08      	pop	{r3, pc}

00006d80 <hfclk_start>:
{
    6d80:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6d82:	2001      	movs	r0, #1
    6d84:	f7fc fd18 	bl	37b8 <nrfx_clock_start>
}
    6d88:	bd08      	pop	{r3, pc}

00006d8a <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    6d8a:	4770      	bx	lr

00006d8c <sys_clock_disable>:
{
}

void __weak sys_clock_disable(void)
{
}
    6d8c:	4770      	bx	lr

00006d8e <counter_sub>:
	return (a - b) & COUNTER_MAX;
    6d8e:	1a40      	subs	r0, r0, r1
}
    6d90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6d94:	4770      	bx	lr

00006d96 <handle_next_cycle_case>:
{
    6d96:	b510      	push	{r4, lr}
    6d98:	4604      	mov	r4, r0
	set_comparator(t + 2);
    6d9a:	3002      	adds	r0, #2
    6d9c:	f7fb fa9c 	bl	22d8 <set_comparator>
	while (t != counter()) {
    6da0:	f7fb fac8 	bl	2334 <counter>
    6da4:	42a0      	cmp	r0, r4
    6da6:	d006      	beq.n	6db6 <handle_next_cycle_case+0x20>
		t = counter();
    6da8:	f7fb fac4 	bl	2334 <counter>
    6dac:	4604      	mov	r4, r0
		set_comparator(t + 2);
    6dae:	3002      	adds	r0, #2
    6db0:	f7fb fa92 	bl	22d8 <set_comparator>
    6db4:	e7f4      	b.n	6da0 <handle_next_cycle_case+0xa>
}
    6db6:	bd10      	pop	{r4, pc}

00006db8 <set_absolute_alarm>:
{
    6db8:	b538      	push	{r3, r4, r5, lr}
    6dba:	4604      	mov	r4, r0
	uint32_t t = counter();
    6dbc:	f7fb faba 	bl	2334 <counter>
    6dc0:	4605      	mov	r5, r0
	diff = counter_sub(abs_val, t);
    6dc2:	4601      	mov	r1, r0
    6dc4:	4620      	mov	r0, r4
    6dc6:	f7ff ffe2 	bl	6d8e <counter_sub>
	if (diff == 1) {
    6dca:	2801      	cmp	r0, #1
    6dcc:	d00d      	beq.n	6dea <set_absolute_alarm+0x32>
	set_comparator(abs_val);
    6dce:	4620      	mov	r0, r4
    6dd0:	f7fb fa82 	bl	22d8 <set_comparator>
	t = counter();
    6dd4:	f7fb faae 	bl	2334 <counter>
    6dd8:	4605      	mov	r5, r0
	diff = counter_sub(abs_val - 2, t);
    6dda:	4601      	mov	r1, r0
    6ddc:	1ea0      	subs	r0, r4, #2
    6dde:	f7ff ffd6 	bl	6d8e <counter_sub>
	if (diff > MAX_CYCLES) {
    6de2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6de6:	d204      	bcs.n	6df2 <set_absolute_alarm+0x3a>
}
    6de8:	bd38      	pop	{r3, r4, r5, pc}
		handle_next_cycle_case(t);
    6dea:	4628      	mov	r0, r5
    6dec:	f7ff ffd3 	bl	6d96 <handle_next_cycle_case>
		return;
    6df0:	e7fa      	b.n	6de8 <set_absolute_alarm+0x30>
		handle_next_cycle_case(t);
    6df2:	4628      	mov	r0, r5
    6df4:	f7ff ffcf 	bl	6d96 <handle_next_cycle_case>
    6df8:	e7f6      	b.n	6de8 <set_absolute_alarm+0x30>

00006dfa <set_protected_absolute_alarm>:
{
    6dfa:	b510      	push	{r4, lr}
    6dfc:	4604      	mov	r4, r0
	int_disable();
    6dfe:	f7fb fa89 	bl	2314 <int_disable>
	prevent_false_prev_evt();
    6e02:	f7fb faaf 	bl	2364 <prevent_false_prev_evt>
	set_absolute_alarm(cycles);
    6e06:	4620      	mov	r0, r4
    6e08:	f7ff ffd6 	bl	6db8 <set_absolute_alarm>
	int_enable();
    6e0c:	f7fb fa8a 	bl	2324 <int_enable>
}
    6e10:	bd10      	pop	{r4, pc}

00006e12 <abort_function>:
	while(1);
    6e12:	e7fe      	b.n	6e12 <abort_function>

00006e14 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    6e14:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6e16:	2100      	movs	r1, #0
    6e18:	2001      	movs	r0, #1
    6e1a:	f000 f805 	bl	6e28 <z_arm_fatal_error>
}
    6e1e:	bd08      	pop	{r3, pc}

00006e20 <z_arm_prepare_switch_to_main>:
{
    6e20:	b508      	push	{r3, lr}
	z_arm_configure_static_mpu_regions();
    6e22:	f7fb fe0f 	bl	2a44 <z_arm_configure_static_mpu_regions>
}
    6e26:	bd08      	pop	{r3, pc}

00006e28 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6e28:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6e2a:	f002 f869 	bl	8f00 <z_fatal_error>
}
    6e2e:	bd08      	pop	{r3, pc}

00006e30 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6e30:	b508      	push	{r3, lr}
    6e32:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6e34:	6800      	ldr	r0, [r0, #0]
    6e36:	f7ff fff7 	bl	6e28 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    6e3a:	bd08      	pop	{r3, pc}

00006e3c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6e3c:	b508      	push	{r3, lr}
	handler();
    6e3e:	f7fb fc79 	bl	2734 <z_SysNmiOnReset>
	z_arm_int_exit();
    6e42:	f7fb fdb7 	bl	29b4 <z_arm_exc_exit>
}
    6e46:	bd08      	pop	{r3, pc}

00006e48 <memory_fault_recoverable>:
}
    6e48:	2000      	movs	r0, #0
    6e4a:	4770      	bx	lr

00006e4c <fault_handle>:
{
    6e4c:	b508      	push	{r3, lr}
	*recoverable = false;
    6e4e:	2300      	movs	r3, #0
    6e50:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    6e52:	1ecb      	subs	r3, r1, #3
    6e54:	2b03      	cmp	r3, #3
    6e56:	d812      	bhi.n	6e7e <fault_handle+0x32>
    6e58:	e8df f003 	tbb	[pc, r3]
    6e5c:	0e0a0602 	.word	0x0e0a0602
		reason = hard_fault(esf, recoverable);
    6e60:	4611      	mov	r1, r2
    6e62:	f7fb fd23 	bl	28ac <hard_fault>
}
    6e66:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    6e68:	2100      	movs	r1, #0
    6e6a:	f7fb fcbf 	bl	27ec <mem_manage_fault>
		break;
    6e6e:	e7fa      	b.n	6e66 <fault_handle+0x1a>
		reason = bus_fault(esf, 0, recoverable);
    6e70:	2100      	movs	r1, #0
    6e72:	f7fb fcdf 	bl	2834 <bus_fault>
		break;
    6e76:	e7f6      	b.n	6e66 <fault_handle+0x1a>
		reason = usage_fault(esf);
    6e78:	f7fb fd06 	bl	2888 <usage_fault>
		break;
    6e7c:	e7f3      	b.n	6e66 <fault_handle+0x1a>
	*recoverable = false;
    6e7e:	2000      	movs	r0, #0
	return reason;
    6e80:	e7f1      	b.n	6e66 <fault_handle+0x1a>

00006e82 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    6e82:	6843      	ldr	r3, [r0, #4]
		&&
    6e84:	2b1f      	cmp	r3, #31
    6e86:	d90a      	bls.n	6e9e <mpu_partition_is_valid+0x1c>
		&&
    6e88:	f013 0f1f 	tst.w	r3, #31
    6e8c:	d001      	beq.n	6e92 <mpu_partition_is_valid+0x10>
		&&
    6e8e:	2000      	movs	r0, #0
    6e90:	4770      	bx	lr
		((part->start &
    6e92:	6803      	ldr	r3, [r0, #0]
		&&
    6e94:	f013 0f1f 	tst.w	r3, #31
    6e98:	d003      	beq.n	6ea2 <mpu_partition_is_valid+0x20>
    6e9a:	2000      	movs	r0, #0
    6e9c:	4770      	bx	lr
    6e9e:	2000      	movs	r0, #0
    6ea0:	4770      	bx	lr
    6ea2:	2001      	movs	r0, #1
}
    6ea4:	4770      	bx	lr

00006ea6 <mpu_configure_region>:
{
    6ea6:	b530      	push	{r4, r5, lr}
    6ea8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    6eaa:	680b      	ldr	r3, [r1, #0]
    6eac:	9300      	str	r3, [sp, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    6eae:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    6eb0:	890d      	ldrh	r5, [r1, #8]
    6eb2:	f89d 2008 	ldrb.w	r2, [sp, #8]
    6eb6:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    6eba:	7a89      	ldrb	r1, [r1, #10]
    6ebc:	f361 1247 	bfi	r2, r1, #5, #3
    6ec0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    6ec4:	f023 031f 	bic.w	r3, r3, #31
    6ec8:	4423      	add	r3, r4
    6eca:	3b01      	subs	r3, #1
    6ecc:	f023 031f 	bic.w	r3, r3, #31
    6ed0:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    6ed2:	4669      	mov	r1, sp
    6ed4:	f7fb fdf4 	bl	2ac0 <region_allocate_and_init>
}
    6ed8:	b005      	add	sp, #20
    6eda:	bd30      	pop	{r4, r5, pc}

00006edc <arm_core_mpu_configure_static_mpu_regions>:
{
    6edc:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    6ede:	f7fb ff03 	bl	2ce8 <mpu_configure_static_mpu_regions>
}
    6ee2:	bd08      	pop	{r3, pc}

00006ee4 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    6ee4:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    6ee8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6eec:	d001      	beq.n	6ef2 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    6eee:	b2c0      	uxtb	r0, r0
    6ef0:	4770      	bx	lr
	}

	return -EINVAL;
    6ef2:	f06f 0015 	mvn.w	r0, #21
}
    6ef6:	4770      	bx	lr

00006ef8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6ef8:	7803      	ldrb	r3, [r0, #0]
    6efa:	780a      	ldrb	r2, [r1, #0]
    6efc:	4293      	cmp	r3, r2
    6efe:	d103      	bne.n	6f08 <strcmp+0x10>
    6f00:	b113      	cbz	r3, 6f08 <strcmp+0x10>
		s1++;
    6f02:	3001      	adds	r0, #1
		s2++;
    6f04:	3101      	adds	r1, #1
    6f06:	e7f7      	b.n	6ef8 <strcmp>
	}

	return *s1 - *s2;
}
    6f08:	1a98      	subs	r0, r3, r2
    6f0a:	4770      	bx	lr

00006f0c <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    6f0c:	b17a      	cbz	r2, 6f2e <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    6f0e:	1e53      	subs	r3, r2, #1
    6f10:	d00f      	beq.n	6f32 <memcmp+0x26>
{
    6f12:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
    6f14:	7804      	ldrb	r4, [r0, #0]
    6f16:	780a      	ldrb	r2, [r1, #0]
    6f18:	4294      	cmp	r4, r2
    6f1a:	d103      	bne.n	6f24 <memcmp+0x18>
		c1++;
    6f1c:	3001      	adds	r0, #1
		c2++;
    6f1e:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
    6f20:	3b01      	subs	r3, #1
    6f22:	d1f7      	bne.n	6f14 <memcmp+0x8>
	}

	return *c1 - *c2;
    6f24:	7800      	ldrb	r0, [r0, #0]
    6f26:	780b      	ldrb	r3, [r1, #0]
    6f28:	1ac0      	subs	r0, r0, r3
}
    6f2a:	bc10      	pop	{r4}
    6f2c:	4770      	bx	lr
		return 0;
    6f2e:	2000      	movs	r0, #0
    6f30:	4770      	bx	lr
	return *c1 - *c2;
    6f32:	7800      	ldrb	r0, [r0, #0]
    6f34:	780b      	ldrb	r3, [r1, #0]
    6f36:	1ac0      	subs	r0, r0, r3
}
    6f38:	4770      	bx	lr

00006f3a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    6f3a:	b410      	push	{r4}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    6f3c:	ea80 0301 	eor.w	r3, r0, r1
    6f40:	f013 0f03 	tst.w	r3, #3
    6f44:	d001      	beq.n	6f4a <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    6f46:	4603      	mov	r3, r0
    6f48:	e017      	b.n	6f7a <memcpy+0x40>
    6f4a:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    6f4c:	f013 0f03 	tst.w	r3, #3
    6f50:	d00b      	beq.n	6f6a <memcpy+0x30>
			if (n == 0) {
    6f52:	b1a2      	cbz	r2, 6f7e <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    6f54:	f811 4b01 	ldrb.w	r4, [r1], #1
    6f58:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    6f5c:	3a01      	subs	r2, #1
    6f5e:	e7f5      	b.n	6f4c <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    6f60:	f851 4b04 	ldr.w	r4, [r1], #4
    6f64:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    6f68:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    6f6a:	2a03      	cmp	r2, #3
    6f6c:	d8f8      	bhi.n	6f60 <memcpy+0x26>
    6f6e:	e004      	b.n	6f7a <memcpy+0x40>
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    6f70:	f811 4b01 	ldrb.w	r4, [r1], #1
    6f74:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    6f78:	3a01      	subs	r2, #1
	while (n > 0) {
    6f7a:	2a00      	cmp	r2, #0
    6f7c:	d1f8      	bne.n	6f70 <memcpy+0x36>
	}

	return d;
}
    6f7e:	bc10      	pop	{r4}
    6f80:	4770      	bx	lr

00006f82 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    6f82:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6f84:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    6f86:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    6f88:	f013 0f03 	tst.w	r3, #3
    6f8c:	d004      	beq.n	6f98 <memset+0x16>
		if (n == 0) {
    6f8e:	b19a      	cbz	r2, 6fb8 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    6f90:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    6f94:	3a01      	subs	r2, #1
    6f96:	e7f7      	b.n	6f88 <memset+0x6>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    6f98:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    6f9a:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    6f9e:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    6fa2:	2a03      	cmp	r2, #3
    6fa4:	d906      	bls.n	6fb4 <memset+0x32>
		*(d_word++) = c_word;
    6fa6:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    6faa:	3a04      	subs	r2, #4
    6fac:	e7f9      	b.n	6fa2 <memset+0x20>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
    6fae:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    6fb2:	3a01      	subs	r2, #1
	while (n > 0) {
    6fb4:	2a00      	cmp	r2, #0
    6fb6:	d1fa      	bne.n	6fae <memset+0x2c>
	}

	return buf;
}
    6fb8:	bc10      	pop	{r4}
    6fba:	4770      	bx	lr

00006fbc <_stdout_hook_default>:
}
    6fbc:	f04f 30ff 	mov.w	r0, #4294967295
    6fc0:	4770      	bx	lr

00006fc2 <gpio_nrfx_port_get_raw>:
	return port->config;
    6fc2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6fc4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6fc6:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    6fc8:	600b      	str	r3, [r1, #0]
}
    6fca:	2000      	movs	r0, #0
    6fcc:	4770      	bx	lr

00006fce <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    6fce:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6fd0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6fd2:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6fd4:	4042      	eors	r2, r0
    6fd6:	400a      	ands	r2, r1
    6fd8:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6fda:	605a      	str	r2, [r3, #4]
}
    6fdc:	2000      	movs	r0, #0
    6fde:	4770      	bx	lr

00006fe0 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    6fe0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6fe2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    6fe4:	6099      	str	r1, [r3, #8]
}
    6fe6:	2000      	movs	r0, #0
    6fe8:	4770      	bx	lr

00006fea <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    6fea:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6fec:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    6fee:	60d9      	str	r1, [r3, #12]
}
    6ff0:	2000      	movs	r0, #0
    6ff2:	4770      	bx	lr

00006ff4 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    6ff4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ff6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6ff8:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    6ffa:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6ffc:	6053      	str	r3, [r2, #4]
}
    6ffe:	2000      	movs	r0, #0
    7000:	4770      	bx	lr

00007002 <gpio_nrfx_manage_callback>:
{
    7002:	b470      	push	{r4, r5, r6}
	return port->data;
    7004:	68c0      	ldr	r0, [r0, #12]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7006:	1d05      	adds	r5, r0, #4
	return list->head;
    7008:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
    700a:	b1db      	cbz	r3, 7044 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    700c:	460e      	mov	r6, r1
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    700e:	2400      	movs	r4, #0
    7010:	e00a      	b.n	7028 <gpio_nrfx_manage_callback+0x26>
	return node->next;
    7012:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    7014:	6043      	str	r3, [r0, #4]
	return list->tail;
    7016:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    7018:	42a1      	cmp	r1, r4
    701a:	d10f      	bne.n	703c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    701c:	606b      	str	r3, [r5, #4]
}
    701e:	e00d      	b.n	703c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    7020:	606c      	str	r4, [r5, #4]
}
    7022:	e00b      	b.n	703c <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7024:	461c      	mov	r4, r3
    7026:	681b      	ldr	r3, [r3, #0]
    7028:	b15b      	cbz	r3, 7042 <gpio_nrfx_manage_callback+0x40>
    702a:	429e      	cmp	r6, r3
    702c:	d1fa      	bne.n	7024 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    702e:	2c00      	cmp	r4, #0
    7030:	d0ef      	beq.n	7012 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    7032:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    7034:	6023      	str	r3, [r4, #0]
	return list->tail;
    7036:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    7038:	4299      	cmp	r1, r3
    703a:	d0f1      	beq.n	7020 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    703c:	2300      	movs	r3, #0
    703e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7040:	e000      	b.n	7044 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    7042:	b152      	cbz	r2, 705a <gpio_nrfx_manage_callback+0x58>
	if (set) {
    7044:	b162      	cbz	r2, 7060 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    7046:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    7048:	600b      	str	r3, [r1, #0]
	list->head = node;
    704a:	6041      	str	r1, [r0, #4]
	return list->tail;
    704c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    704e:	b10b      	cbz	r3, 7054 <gpio_nrfx_manage_callback+0x52>
	return 0;
    7050:	2000      	movs	r0, #0
    7052:	e006      	b.n	7062 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    7054:	6069      	str	r1, [r5, #4]
    7056:	2000      	movs	r0, #0
}
    7058:	e003      	b.n	7062 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    705a:	f06f 0015 	mvn.w	r0, #21
    705e:	e000      	b.n	7062 <gpio_nrfx_manage_callback+0x60>
	return 0;
    7060:	2000      	movs	r0, #0
}
    7062:	bc70      	pop	{r4, r5, r6}
    7064:	4770      	bx	lr

00007066 <flash_nrf_write_protection>:
}
    7066:	2000      	movs	r0, #0
    7068:	4770      	bx	lr

0000706a <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(uint32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
    706a:	684b      	ldr	r3, [r1, #4]
    706c:	4403      	add	r3, r0
    706e:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
    7070:	680b      	ldr	r3, [r1, #0]
    7072:	4403      	add	r3, r0
    7074:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
    7076:	688b      	ldr	r3, [r1, #8]
    7078:	1a18      	subs	r0, r3, r0
    707a:	6088      	str	r0, [r1, #8]
}
    707c:	4770      	bx	lr

0000707e <erase_op>:
{
    707e:	b538      	push	{r3, r4, r5, lr}
    7080:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    7082:	f000 fab3 	bl	75ec <nrfx_nvmc_flash_page_size_get>
    7086:	4605      	mov	r5, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    7088:	6860      	ldr	r0, [r4, #4]
    708a:	f7fc fcad 	bl	39e8 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
    708e:	68a3      	ldr	r3, [r4, #8]
    7090:	1b5b      	subs	r3, r3, r5
    7092:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    7094:	6862      	ldr	r2, [r4, #4]
    7096:	442a      	add	r2, r5
    7098:	6062      	str	r2, [r4, #4]
	} while (e_ctx->len > 0);
    709a:	2b00      	cmp	r3, #0
    709c:	d1f4      	bne.n	7088 <erase_op+0xa>
}
    709e:	2000      	movs	r0, #0
    70a0:	bd38      	pop	{r3, r4, r5, pc}

000070a2 <erase>:

	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
    70a2:	b500      	push	{lr}
    70a4:	b085      	sub	sp, #20
	struct flash_context context = {
    70a6:	2300      	movs	r3, #0
    70a8:	9301      	str	r3, [sp, #4]
    70aa:	9002      	str	r0, [sp, #8]
    70ac:	9103      	str	r1, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
    70ae:	a801      	add	r0, sp, #4
    70b0:	f7ff ffe5 	bl	707e <erase_op>
}
    70b4:	b005      	add	sp, #20
    70b6:	f85d fb04 	ldr.w	pc, [sp], #4

000070ba <flash_nrf_erase>:
{
    70ba:	b570      	push	{r4, r5, r6, lr}
    70bc:	460c      	mov	r4, r1
    70be:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    70c0:	f000 fa94 	bl	75ec <nrfx_nvmc_flash_page_size_get>
    70c4:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
    70c6:	f000 fa8d 	bl	75e4 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    70ca:	42a0      	cmp	r0, r4
    70cc:	d919      	bls.n	7102 <flash_nrf_erase+0x48>
    70ce:	2c00      	cmp	r4, #0
    70d0:	db1a      	blt.n	7108 <flash_nrf_erase+0x4e>
	    addr < 0 ||
    70d2:	4285      	cmp	r5, r0
    70d4:	d81b      	bhi.n	710e <flash_nrf_erase+0x54>
	    (addr) + len > flash_size) {
    70d6:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    70d8:	4298      	cmp	r0, r3
    70da:	d31b      	bcc.n	7114 <flash_nrf_erase+0x5a>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    70dc:	fbb4 f3f6 	udiv	r3, r4, r6
    70e0:	fb06 4313 	mls	r3, r6, r3, r4
    70e4:	b9cb      	cbnz	r3, 711a <flash_nrf_erase+0x60>
    70e6:	fbb5 f3f6 	udiv	r3, r5, r6
    70ea:	fb06 5313 	mls	r3, r6, r3, r5
    70ee:	b9bb      	cbnz	r3, 7120 <flash_nrf_erase+0x66>
		if (!n_pages) {
    70f0:	42ae      	cmp	r6, r5
    70f2:	d901      	bls.n	70f8 <flash_nrf_erase+0x3e>
			return 0;
    70f4:	2000      	movs	r0, #0
    70f6:	e006      	b.n	7106 <flash_nrf_erase+0x4c>
		ret = erase(addr, size);
    70f8:	4629      	mov	r1, r5
    70fa:	4620      	mov	r0, r4
    70fc:	f7ff ffd1 	bl	70a2 <erase>
	return ret;
    7100:	e001      	b.n	7106 <flash_nrf_erase+0x4c>
		return -EINVAL;
    7102:	f06f 0015 	mvn.w	r0, #21
}
    7106:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    7108:	f06f 0015 	mvn.w	r0, #21
    710c:	e7fb      	b.n	7106 <flash_nrf_erase+0x4c>
    710e:	f06f 0015 	mvn.w	r0, #21
    7112:	e7f8      	b.n	7106 <flash_nrf_erase+0x4c>
    7114:	f06f 0015 	mvn.w	r0, #21
    7118:	e7f5      	b.n	7106 <flash_nrf_erase+0x4c>
			return -EINVAL;
    711a:	f06f 0015 	mvn.w	r0, #21
    711e:	e7f2      	b.n	7106 <flash_nrf_erase+0x4c>
    7120:	f06f 0015 	mvn.w	r0, #21
    7124:	e7ef      	b.n	7106 <flash_nrf_erase+0x4c>

00007126 <write_op>:
{
    7126:	b510      	push	{r4, lr}
    7128:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
    712a:	68a3      	ldr	r3, [r4, #8]
    712c:	2b03      	cmp	r3, #3
    712e:	d909      	bls.n	7144 <write_op+0x1e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    7130:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    7132:	6819      	ldr	r1, [r3, #0]
    7134:	6860      	ldr	r0, [r4, #4]
    7136:	f000 fa49 	bl	75cc <nrfx_nvmc_word_write>
		shift_write_context(sizeof(uint32_t), w_ctx);
    713a:	4621      	mov	r1, r4
    713c:	2004      	movs	r0, #4
    713e:	f7ff ff94 	bl	706a <shift_write_context>
    7142:	e7f2      	b.n	712a <write_op+0x4>
	nvmc_wait_ready();
    7144:	f7fc f882 	bl	324c <nvmc_wait_ready>
}
    7148:	2000      	movs	r0, #0
    714a:	bd10      	pop	{r4, pc}

0000714c <write>:

static int write(off_t addr, const void *data, size_t len)
{
    714c:	b500      	push	{lr}
    714e:	b085      	sub	sp, #20
	struct flash_context context = {
    7150:	9101      	str	r1, [sp, #4]
    7152:	9002      	str	r0, [sp, #8]
    7154:	9203      	str	r2, [sp, #12]
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
    7156:	a801      	add	r0, sp, #4
    7158:	f7ff ffe5 	bl	7126 <write_op>
}
    715c:	b005      	add	sp, #20
    715e:	f85d fb04 	ldr.w	pc, [sp], #4

00007162 <flash_nrf_write>:
{
    7162:	b570      	push	{r4, r5, r6, lr}
    7164:	460c      	mov	r4, r1
    7166:	4616      	mov	r6, r2
    7168:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    716a:	f000 fa3b 	bl	75e4 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    716e:	4284      	cmp	r4, r0
    7170:	d215      	bcs.n	719e <flash_nrf_write+0x3c>
    7172:	2c00      	cmp	r4, #0
    7174:	db16      	blt.n	71a4 <flash_nrf_write+0x42>
	    addr < 0 ||
    7176:	4285      	cmp	r5, r0
    7178:	d817      	bhi.n	71aa <flash_nrf_write+0x48>
	    (addr) + len > flash_size) {
    717a:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    717c:	4298      	cmp	r0, r3
    717e:	d317      	bcc.n	71b0 <flash_nrf_write+0x4e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    7180:	f014 0f03 	tst.w	r4, #3
    7184:	d117      	bne.n	71b6 <flash_nrf_write+0x54>
    7186:	f015 0f03 	tst.w	r5, #3
    718a:	d117      	bne.n	71bc <flash_nrf_write+0x5a>
	if (!len) {
    718c:	b90d      	cbnz	r5, 7192 <flash_nrf_write+0x30>
		return 0;
    718e:	2000      	movs	r0, #0
    7190:	e007      	b.n	71a2 <flash_nrf_write+0x40>
		ret = write(addr, data, len);
    7192:	462a      	mov	r2, r5
    7194:	4631      	mov	r1, r6
    7196:	4620      	mov	r0, r4
    7198:	f7ff ffd8 	bl	714c <write>
	return ret;
    719c:	e001      	b.n	71a2 <flash_nrf_write+0x40>
		return -EINVAL;
    719e:	f06f 0015 	mvn.w	r0, #21
}
    71a2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    71a4:	f06f 0015 	mvn.w	r0, #21
    71a8:	e7fb      	b.n	71a2 <flash_nrf_write+0x40>
    71aa:	f06f 0015 	mvn.w	r0, #21
    71ae:	e7f8      	b.n	71a2 <flash_nrf_write+0x40>
    71b0:	f06f 0015 	mvn.w	r0, #21
    71b4:	e7f5      	b.n	71a2 <flash_nrf_write+0x40>
		return -EINVAL;
    71b6:	f06f 0015 	mvn.w	r0, #21
    71ba:	e7f2      	b.n	71a2 <flash_nrf_write+0x40>
    71bc:	f06f 0015 	mvn.w	r0, #21
    71c0:	e7ef      	b.n	71a2 <flash_nrf_write+0x40>

000071c2 <flash_nrf_read>:
{
    71c2:	b570      	push	{r4, r5, r6, lr}
    71c4:	460c      	mov	r4, r1
    71c6:	4616      	mov	r6, r2
    71c8:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    71ca:	f000 fa0b 	bl	75e4 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    71ce:	42a0      	cmp	r0, r4
    71d0:	d910      	bls.n	71f4 <flash_nrf_read+0x32>
    71d2:	2c00      	cmp	r4, #0
    71d4:	db11      	blt.n	71fa <flash_nrf_read+0x38>
	    addr < 0 ||
    71d6:	4285      	cmp	r5, r0
    71d8:	d812      	bhi.n	7200 <flash_nrf_read+0x3e>
	    (addr) + len > flash_size) {
    71da:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    71dc:	4298      	cmp	r0, r3
    71de:	d312      	bcc.n	7206 <flash_nrf_read+0x44>
	if (!len) {
    71e0:	b90d      	cbnz	r5, 71e6 <flash_nrf_read+0x24>
		return 0;
    71e2:	2000      	movs	r0, #0
    71e4:	e008      	b.n	71f8 <flash_nrf_read+0x36>
	memcpy(data, (void *)addr, len);
    71e6:	462a      	mov	r2, r5
    71e8:	4621      	mov	r1, r4
    71ea:	4630      	mov	r0, r6
    71ec:	f7ff fea5 	bl	6f3a <memcpy>
	return 0;
    71f0:	2000      	movs	r0, #0
    71f2:	e001      	b.n	71f8 <flash_nrf_read+0x36>
		return -EINVAL;
    71f4:	f06f 0015 	mvn.w	r0, #21
}
    71f8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    71fa:	f06f 0015 	mvn.w	r0, #21
    71fe:	e7fb      	b.n	71f8 <flash_nrf_read+0x36>
    7200:	f06f 0015 	mvn.w	r0, #21
    7204:	e7f8      	b.n	71f8 <flash_nrf_read+0x36>
    7206:	f06f 0015 	mvn.w	r0, #21
    720a:	e7f5      	b.n	71f8 <flash_nrf_read+0x36>

0000720c <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    720c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7210:	b086      	sub	sp, #24
    7212:	4689      	mov	r9, r1
    7214:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
    7216:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    7218:	695b      	ldr	r3, [r3, #20]
    721a:	aa01      	add	r2, sp, #4
    721c:	a905      	add	r1, sp, #20
    721e:	4798      	blx	r3
	off_t off = 0;
    7220:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    7222:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
    7224:	46a2      	mov	sl, r4
    7226:	9b01      	ldr	r3, [sp, #4]
    7228:	4553      	cmp	r3, sl
    722a:	d916      	bls.n	725a <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
    722c:	9f05      	ldr	r7, [sp, #20]
    722e:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
    7232:	687b      	ldr	r3, [r7, #4]
    7234:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
    7236:	2500      	movs	r5, #0
    7238:	683b      	ldr	r3, [r7, #0]
    723a:	42ab      	cmp	r3, r5
    723c:	d90a      	bls.n	7254 <flash_page_foreach+0x48>
			page_info.start_offset = off;
    723e:	9402      	str	r4, [sp, #8]
			page_info.index = page;
    7240:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
    7242:	4641      	mov	r1, r8
    7244:	a802      	add	r0, sp, #8
    7246:	47c8      	blx	r9
    7248:	b138      	cbz	r0, 725a <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
    724a:	9b03      	ldr	r3, [sp, #12]
    724c:	441c      	add	r4, r3
			page++;
    724e:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
    7250:	3501      	adds	r5, #1
    7252:	e7f1      	b.n	7238 <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
    7254:	f10a 0a01 	add.w	sl, sl, #1
    7258:	e7e5      	b.n	7226 <flash_page_foreach+0x1a>
		}
	}
}
    725a:	b006      	add	sp, #24
    725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007260 <uarte_nrfx_isr_int>:
{
    7260:	b508      	push	{r3, lr}
	return dev->data;
    7262:	68c2      	ldr	r2, [r0, #12]
	return dev->config;
    7264:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7266:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
    7268:	68d1      	ldr	r1, [r2, #12]
    726a:	7b89      	ldrb	r1, [r1, #14]
    726c:	b111      	cbz	r1, 7274 <uarte_nrfx_isr_int+0x14>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    726e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    7272:	b969      	cbnz	r1, 7290 <uarte_nrfx_isr_int+0x30>
    7274:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    7278:	b121      	cbz	r1, 7284 <uarte_nrfx_isr_int+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    727a:	2100      	movs	r1, #0
    727c:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    7280:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    7284:	68d2      	ldr	r2, [r2, #12]
    7286:	6813      	ldr	r3, [r2, #0]
    7288:	b10b      	cbz	r3, 728e <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    728a:	6851      	ldr	r1, [r2, #4]
    728c:	4798      	blx	r3
}
    728e:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    7290:	f44f 7180 	mov.w	r1, #256	; 0x100
    7294:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7298:	2101      	movs	r1, #1
    729a:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
    729c:	68d3      	ldr	r3, [r2, #12]
    729e:	2200      	movs	r2, #0
    72a0:	739a      	strb	r2, [r3, #14]
		return;
    72a2:	e7f4      	b.n	728e <uarte_nrfx_isr_int+0x2e>

000072a4 <uarte_nrfx_configure>:
{
    72a4:	b570      	push	{r4, r5, r6, lr}
    72a6:	b082      	sub	sp, #8
    72a8:	4605      	mov	r5, r0
    72aa:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    72ac:	794b      	ldrb	r3, [r1, #5]
    72ae:	2b01      	cmp	r3, #1
    72b0:	d006      	beq.n	72c0 <uarte_nrfx_configure+0x1c>
    72b2:	2b03      	cmp	r3, #3
    72b4:	d011      	beq.n	72da <uarte_nrfx_configure+0x36>
    72b6:	f06f 0322 	mvn.w	r3, #34	; 0x22
}
    72ba:	4618      	mov	r0, r3
    72bc:	b002      	add	sp, #8
    72be:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    72c0:	2300      	movs	r3, #0
    72c2:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    72c6:	79a3      	ldrb	r3, [r4, #6]
    72c8:	2b03      	cmp	r3, #3
    72ca:	d13b      	bne.n	7344 <uarte_nrfx_configure+0xa0>
	switch (cfg->flow_ctrl) {
    72cc:	79e3      	ldrb	r3, [r4, #7]
    72ce:	b143      	cbz	r3, 72e2 <uarte_nrfx_configure+0x3e>
    72d0:	2b01      	cmp	r3, #1
    72d2:	d010      	beq.n	72f6 <uarte_nrfx_configure+0x52>
    72d4:	f06f 0322 	mvn.w	r3, #34	; 0x22
    72d8:	e7ef      	b.n	72ba <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    72da:	2310      	movs	r3, #16
    72dc:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    72e0:	e7f1      	b.n	72c6 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    72e2:	2300      	movs	r3, #0
    72e4:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    72e8:	7923      	ldrb	r3, [r4, #4]
    72ea:	b15b      	cbz	r3, 7304 <uarte_nrfx_configure+0x60>
    72ec:	2b02      	cmp	r3, #2
    72ee:	d025      	beq.n	733c <uarte_nrfx_configure+0x98>
    72f0:	f06f 0322 	mvn.w	r3, #34	; 0x22
    72f4:	e7e1      	b.n	72ba <uarte_nrfx_configure+0x16>
	return dev->config;
    72f6:	686b      	ldr	r3, [r5, #4]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    72f8:	791b      	ldrb	r3, [r3, #4]
    72fa:	b333      	cbz	r3, 734a <uarte_nrfx_configure+0xa6>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    72fc:	2301      	movs	r3, #1
    72fe:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    7302:	e7f1      	b.n	72e8 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    7304:	2300      	movs	r3, #0
    7306:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    730a:	6821      	ldr	r1, [r4, #0]
    730c:	4628      	mov	r0, r5
    730e:	f7fb ffbf 	bl	3290 <baudrate_set>
    7312:	4603      	mov	r3, r0
    7314:	b9e0      	cbnz	r0, 7350 <uarte_nrfx_configure+0xac>
	return dev->config;
    7316:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    7318:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    731a:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    731e:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    7322:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7326:	4331      	orrs	r1, r6
    7328:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    732a:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    732e:	68ea      	ldr	r2, [r5, #12]
	get_dev_data(dev)->uart_config = *cfg;
    7330:	3204      	adds	r2, #4
    7332:	e894 0003 	ldmia.w	r4, {r0, r1}
    7336:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    733a:	e7be      	b.n	72ba <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    733c:	230e      	movs	r3, #14
    733e:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    7342:	e7e2      	b.n	730a <uarte_nrfx_configure+0x66>
		return -ENOTSUP;
    7344:	f06f 0322 	mvn.w	r3, #34	; 0x22
    7348:	e7b7      	b.n	72ba <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
    734a:	f06f 0322 	mvn.w	r3, #34	; 0x22
    734e:	e7b4      	b.n	72ba <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    7350:	f06f 0322 	mvn.w	r3, #34	; 0x22
    7354:	e7b1      	b.n	72ba <uarte_nrfx_configure+0x16>

00007356 <uarte_nrfx_config_get>:
{
    7356:	460b      	mov	r3, r1
	return dev->data;
    7358:	68c2      	ldr	r2, [r0, #12]
	*cfg = get_dev_data(dev)->uart_config;
    735a:	6891      	ldr	r1, [r2, #8]
    735c:	6850      	ldr	r0, [r2, #4]
    735e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7362:	2000      	movs	r0, #0
    7364:	4770      	bx	lr

00007366 <uarte_nrfx_err_check>:
	return dev->config;
    7366:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7368:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    736a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    736e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7372:	4770      	bx	lr

00007374 <uarte_nrfx_poll_in>:
{
    7374:	b410      	push	{r4}
	return dev->data;
    7376:	68c4      	ldr	r4, [r0, #12]
	return dev->config;
    7378:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    737a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    737c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7380:	b152      	cbz	r2, 7398 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    7382:	7d22      	ldrb	r2, [r4, #20]
    7384:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7386:	2000      	movs	r0, #0
    7388:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    738c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7390:	2201      	movs	r2, #1
    7392:	601a      	str	r2, [r3, #0]
}
    7394:	bc10      	pop	{r4}
    7396:	4770      	bx	lr
		return -1;
    7398:	f04f 30ff 	mov.w	r0, #4294967295
    739c:	e7fa      	b.n	7394 <uarte_nrfx_poll_in+0x20>

0000739e <uarte_nrfx_fifo_fill>:
{
    739e:	b470      	push	{r4, r5, r6}
	return dev->config;
    73a0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    73a2:	681e      	ldr	r6, [r3, #0]
	return dev->data;
    73a4:	68c5      	ldr	r5, [r0, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    73a6:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    73aa:	b1db      	cbz	r3, 73e4 <uarte_nrfx_fifo_fill+0x46>
	if (len > data->int_driven->tx_buff_size) {
    73ac:	68eb      	ldr	r3, [r5, #12]
    73ae:	8998      	ldrh	r0, [r3, #12]
    73b0:	4290      	cmp	r0, r2
    73b2:	db00      	blt.n	73b6 <uarte_nrfx_fifo_fill+0x18>
    73b4:	4610      	mov	r0, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    73b6:	2300      	movs	r3, #0
    73b8:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
    73bc:	f8d6 2120 	ldr.w	r2, [r6, #288]	; 0x120
	for (int i = 0; i < len; i++) {
    73c0:	4298      	cmp	r0, r3
    73c2:	dd05      	ble.n	73d0 <uarte_nrfx_fifo_fill+0x32>
		data->int_driven->tx_buffer[i] = tx_data[i];
    73c4:	68ea      	ldr	r2, [r5, #12]
    73c6:	6892      	ldr	r2, [r2, #8]
    73c8:	5ccc      	ldrb	r4, [r1, r3]
    73ca:	54d4      	strb	r4, [r2, r3]
	for (int i = 0; i < len; i++) {
    73cc:	3301      	adds	r3, #1
    73ce:	e7f7      	b.n	73c0 <uarte_nrfx_fifo_fill+0x22>
	nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, len);
    73d0:	68eb      	ldr	r3, [r5, #12]
    73d2:	689b      	ldr	r3, [r3, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    73d4:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    73d8:	f8c6 0548 	str.w	r0, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    73dc:	2301      	movs	r3, #1
    73de:	60b3      	str	r3, [r6, #8]
}
    73e0:	bc70      	pop	{r4, r5, r6}
    73e2:	4770      	bx	lr
		return 0;
    73e4:	2000      	movs	r0, #0
    73e6:	e7fb      	b.n	73e0 <uarte_nrfx_fifo_fill+0x42>

000073e8 <uarte_nrfx_fifo_read>:
	return dev->config;
    73e8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    73ea:	681b      	ldr	r3, [r3, #0]
	return dev->data;
    73ec:	68c0      	ldr	r0, [r0, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    73ee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    73f2:	b14a      	cbz	r2, 7408 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    73f4:	2200      	movs	r2, #0
    73f6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    73fa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    73fe:	7d02      	ldrb	r2, [r0, #20]
    7400:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7402:	2001      	movs	r0, #1
    7404:	6018      	str	r0, [r3, #0]
}
    7406:	4770      	bx	lr
	int num_rx = 0;
    7408:	2000      	movs	r0, #0
}
    740a:	4770      	bx	lr

0000740c <uarte_nrfx_irq_tx_enable>:
	return dev->config;
    740c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    740e:	681b      	ldr	r3, [r3, #0]
	return dev->data;
    7410:	68c2      	ldr	r2, [r0, #12]
	data->int_driven->disable_tx_irq = false;
    7412:	68d2      	ldr	r2, [r2, #12]
    7414:	2100      	movs	r1, #0
    7416:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
    7418:	f44f 7280 	mov.w	r2, #256	; 0x100
    741c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7420:	4770      	bx	lr

00007422 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
    7422:	68c3      	ldr	r3, [r0, #12]
	data->int_driven->disable_tx_irq = true;
    7424:	68db      	ldr	r3, [r3, #12]
    7426:	2201      	movs	r2, #1
    7428:	739a      	strb	r2, [r3, #14]
}
    742a:	4770      	bx	lr

0000742c <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
    742c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    742e:	681a      	ldr	r2, [r3, #0]
	return dev->data;
    7430:	68c3      	ldr	r3, [r0, #12]
	return !data->int_driven->disable_tx_irq &&
    7432:	68db      	ldr	r3, [r3, #12]
    7434:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
    7436:	b94b      	cbnz	r3, 744c <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7438:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
    743c:	b143      	cbz	r3, 7450 <uarte_nrfx_irq_tx_ready_complete+0x24>
    return p_reg->INTENSET & mask;
    743e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
    7442:	f413 7f80 	tst.w	r3, #256	; 0x100
    7446:	d005      	beq.n	7454 <uarte_nrfx_irq_tx_ready_complete+0x28>
    7448:	2001      	movs	r0, #1
    744a:	4770      	bx	lr
    744c:	2000      	movs	r0, #0
    744e:	4770      	bx	lr
    7450:	2000      	movs	r0, #0
    7452:	4770      	bx	lr
    7454:	2000      	movs	r0, #0
}
    7456:	4770      	bx	lr

00007458 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
    7458:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    745a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    745c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    7460:	3800      	subs	r0, #0
    7462:	bf18      	it	ne
    7464:	2001      	movne	r0, #1
    7466:	4770      	bx	lr

00007468 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
    7468:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    746a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    746c:	2210      	movs	r2, #16
    746e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7472:	4770      	bx	lr

00007474 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
    7474:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7476:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    7478:	2210      	movs	r2, #16
    747a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    747e:	4770      	bx	lr

00007480 <uarte_nrfx_irq_err_enable>:
	return dev->config;
    7480:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7482:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    7484:	f44f 7200 	mov.w	r2, #512	; 0x200
    7488:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    748c:	4770      	bx	lr

0000748e <uarte_nrfx_irq_err_disable>:
	return dev->config;
    748e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7490:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    7492:	f44f 7200 	mov.w	r2, #512	; 0x200
    7496:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    749a:	4770      	bx	lr

0000749c <uarte_nrfx_irq_is_pending>:
{
    749c:	b538      	push	{r3, r4, r5, lr}
    749e:	4604      	mov	r4, r0
	return dev->config;
    74a0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    74a2:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    74a4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    74a8:	f413 7f80 	tst.w	r3, #256	; 0x100
    74ac:	d106      	bne.n	74bc <uarte_nrfx_irq_is_pending+0x20>
    74ae:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    74b2:	f013 0f10 	tst.w	r3, #16
    74b6:	d107      	bne.n	74c8 <uarte_nrfx_irq_is_pending+0x2c>
    74b8:	2000      	movs	r0, #0
}
    74ba:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    74bc:	f7ff ffb6 	bl	742c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
    74c0:	2800      	cmp	r0, #0
    74c2:	d0f4      	beq.n	74ae <uarte_nrfx_irq_is_pending+0x12>
		||
    74c4:	2001      	movs	r0, #1
    74c6:	e7f8      	b.n	74ba <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    74c8:	4620      	mov	r0, r4
    74ca:	f7ff ffc5 	bl	7458 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    74ce:	2800      	cmp	r0, #0
    74d0:	d0f3      	beq.n	74ba <uarte_nrfx_irq_is_pending+0x1e>
		||
    74d2:	2001      	movs	r0, #1
    74d4:	e7f1      	b.n	74ba <uarte_nrfx_irq_is_pending+0x1e>

000074d6 <uarte_nrfx_irq_update>:
}
    74d6:	2001      	movs	r0, #1
    74d8:	4770      	bx	lr

000074da <uarte_nrfx_irq_callback_set>:
	return dev->data;
    74da:	68c3      	ldr	r3, [r0, #12]
	data->int_driven->cb = cb;
    74dc:	68d8      	ldr	r0, [r3, #12]
    74de:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    74e0:	68db      	ldr	r3, [r3, #12]
    74e2:	605a      	str	r2, [r3, #4]
}
    74e4:	4770      	bx	lr

000074e6 <uarte_nrfx_poll_out>:
{
    74e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    74e8:	b083      	sub	sp, #12
    74ea:	f88d 1007 	strb.w	r1, [sp, #7]
	return dev->config;
    74ee:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    74f0:	681d      	ldr	r5, [r3, #0]
	return dev->data;
    74f2:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    74f4:	f001 fe4d 	bl	9192 <k_is_in_isr>
    74f8:	b9a8      	cbnz	r0, 7526 <uarte_nrfx_poll_out+0x40>
    74fa:	f106 0410 	add.w	r4, r6, #16
		uint8_t safety_cnt = 100;
    74fe:	2764      	movs	r7, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7500:	2301      	movs	r3, #1
    7502:	e8d4 2fef 	ldaex	r2, [r4]
    7506:	2a00      	cmp	r2, #0
    7508:	d103      	bne.n	7512 <uarte_nrfx_poll_out+0x2c>
    750a:	e8c4 3fe1 	stlex	r1, r3, [r4]
    750e:	2900      	cmp	r1, #0
    7510:	d1f7      	bne.n	7502 <uarte_nrfx_poll_out+0x1c>
		while (atomic_cas((atomic_t *) lock,
    7512:	d00a      	beq.n	752a <uarte_nrfx_poll_out+0x44>
	return z_impl_k_sleep(timeout);
    7514:	2021      	movs	r0, #33	; 0x21
    7516:	2100      	movs	r1, #0
    7518:	f7fd fd56 	bl	4fc8 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    751c:	3f01      	subs	r7, #1
    751e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    7522:	d1ed      	bne.n	7500 <uarte_nrfx_poll_out+0x1a>
    7524:	e001      	b.n	752a <uarte_nrfx_poll_out+0x44>
		*lock = 1;
    7526:	2301      	movs	r3, #1
    7528:	6133      	str	r3, [r6, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    752a:	2300      	movs	r3, #0
    752c:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    7530:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7534:	f10d 0307 	add.w	r3, sp, #7
    7538:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    753c:	2301      	movs	r3, #1
    753e:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7542:	60ab      	str	r3, [r5, #8]
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    7544:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7548:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    754c:	b923      	cbnz	r3, 7558 <uarte_nrfx_poll_out+0x72>
    754e:	2001      	movs	r0, #1
    7550:	f000 f813 	bl	757a <nrfx_busy_wait>
    7554:	3c01      	subs	r4, #1
    7556:	d1f7      	bne.n	7548 <uarte_nrfx_poll_out+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7558:	2301      	movs	r3, #1
    755a:	60eb      	str	r3, [r5, #12]
	*lock = 0;
    755c:	2300      	movs	r3, #0
    755e:	6133      	str	r3, [r6, #16]
}
    7560:	b003      	add	sp, #12
    7562:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007564 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
    7564:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7566:	f7fa ffa1 	bl	24ac <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    756a:	f7fb f827 	bl	25bc <nrf_cc3xx_platform_mutex_init>

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    756e:	f7fd fea1 	bl	52b4 <nrf_cc3xx_platform_init_no_rng>
#endif
	return res;
}
    7572:	bd08      	pop	{r3, pc}

00007574 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    7574:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    7576:	4780      	blx	r0
}
    7578:	bd08      	pop	{r3, pc}

0000757a <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    757a:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    757c:	f001 fe0f 	bl	919e <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    7580:	bd08      	pop	{r3, pc}

00007582 <nrfx_clock_enable>:
{
    7582:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7584:	2005      	movs	r0, #5
    7586:	f7fb f88b 	bl	26a0 <arch_irq_is_enabled>
    758a:	b100      	cbz	r0, 758e <nrfx_clock_enable+0xc>
}
    758c:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    758e:	2005      	movs	r0, #5
    7590:	f7fb f876 	bl	2680 <arch_irq_enable>
    7594:	e7fa      	b.n	758c <nrfx_clock_enable+0xa>

00007596 <flash_page_size_get>:
}
    7596:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    759a:	4770      	bx	lr

0000759c <flash_page_count_get>:
}
    759c:	f44f 7080 	mov.w	r0, #256	; 0x100
    75a0:	4770      	bx	lr

000075a2 <flash_total_size_get>:
{
    75a2:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
    75a4:	f7ff fff7 	bl	7596 <flash_page_size_get>
    75a8:	4604      	mov	r4, r0
    75aa:	f7ff fff7 	bl	759c <flash_page_count_get>
}
    75ae:	fb00 f004 	mul.w	r0, r0, r4
    75b2:	bd10      	pop	{r4, pc}

000075b4 <is_page_aligned_check>:
{
    75b4:	b510      	push	{r4, lr}
    75b6:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
    75b8:	f7ff ffed 	bl	7596 <flash_page_size_get>
    75bc:	fbb4 f3f0 	udiv	r3, r4, r0
    75c0:	fb00 4013 	mls	r0, r0, r3, r4
}
    75c4:	fab0 f080 	clz	r0, r0
    75c8:	0940      	lsrs	r0, r0, #5
    75ca:	bd10      	pop	{r4, pc}

000075cc <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    75cc:	b538      	push	{r3, r4, r5, lr}
    75ce:	4604      	mov	r4, r0
    75d0:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
    75d2:	f7fc f9e9 	bl	39a8 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
    75d6:	4629      	mov	r1, r5
    75d8:	4620      	mov	r0, r4
    75da:	f7fc f9f9 	bl	39d0 <nvmc_word_write>

    nvmc_readonly_mode_set();
    75de:	f7fc f9d9 	bl	3994 <nvmc_readonly_mode_set>
}
    75e2:	bd38      	pop	{r3, r4, r5, pc}

000075e4 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    75e4:	b508      	push	{r3, lr}
    return flash_total_size_get();
    75e6:	f7ff ffdc 	bl	75a2 <flash_total_size_get>
}
    75ea:	bd08      	pop	{r3, pc}

000075ec <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    75ec:	b508      	push	{r3, lr}
    return flash_page_size_get();
    75ee:	f7ff ffd2 	bl	7596 <flash_page_size_get>
}
    75f2:	bd08      	pop	{r3, pc}

000075f4 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    75f4:	b508      	push	{r3, lr}
    return flash_page_count_get();
    75f6:	f7ff ffd1 	bl	759c <flash_page_count_get>
}
    75fa:	bd08      	pop	{r3, pc}

000075fc <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    75fc:	2000      	movs	r0, #0
    75fe:	4770      	bx	lr

00007600 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    7600:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    7602:	6803      	ldr	r3, [r0, #0]
    7604:	1acd      	subs	r5, r1, r3
    7606:	2d00      	cmp	r5, #0
    7608:	dd4b      	ble.n	76a2 <mbedtls_asn1_get_len+0xa2>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    760a:	781c      	ldrb	r4, [r3, #0]
    760c:	f993 6000 	ldrsb.w	r6, [r3]
    7610:	2e00      	cmp	r6, #0
    7612:	db0b      	blt.n	762c <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    7614:	1c5c      	adds	r4, r3, #1
    7616:	6004      	str	r4, [r0, #0]
    7618:	781b      	ldrb	r3, [r3, #0]
    761a:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    761c:	6813      	ldr	r3, [r2, #0]
    761e:	6802      	ldr	r2, [r0, #0]
    7620:	1a89      	subs	r1, r1, r2
    7622:	428b      	cmp	r3, r1
    7624:	d84f      	bhi.n	76c6 <mbedtls_asn1_get_len+0xc6>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
    7626:	2000      	movs	r0, #0
}
    7628:	bc70      	pop	{r4, r5, r6}
    762a:	4770      	bx	lr
        switch( **p & 0x7F )
    762c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    7630:	3c01      	subs	r4, #1
    7632:	2c03      	cmp	r4, #3
    7634:	d838      	bhi.n	76a8 <mbedtls_asn1_get_len+0xa8>
    7636:	e8df f004 	tbb	[pc, r4]
    763a:	0a02      	.short	0x0a02
    763c:	2315      	.short	0x2315
            if( ( end - *p ) < 2 )
    763e:	2d01      	cmp	r5, #1
    7640:	dd35      	ble.n	76ae <mbedtls_asn1_get_len+0xae>
            *len = (*p)[1];
    7642:	785b      	ldrb	r3, [r3, #1]
    7644:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    7646:	6803      	ldr	r3, [r0, #0]
    7648:	3302      	adds	r3, #2
    764a:	6003      	str	r3, [r0, #0]
            break;
    764c:	e7e6      	b.n	761c <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    764e:	2d02      	cmp	r5, #2
    7650:	dd30      	ble.n	76b4 <mbedtls_asn1_get_len+0xb4>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    7652:	785c      	ldrb	r4, [r3, #1]
    7654:	789b      	ldrb	r3, [r3, #2]
    7656:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    765a:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    765c:	6803      	ldr	r3, [r0, #0]
    765e:	3303      	adds	r3, #3
    7660:	6003      	str	r3, [r0, #0]
            break;
    7662:	e7db      	b.n	761c <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 4 )
    7664:	2d03      	cmp	r5, #3
    7666:	dd28      	ble.n	76ba <mbedtls_asn1_get_len+0xba>
            *len = ( (size_t)(*p)[1] << 16 ) |
    7668:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    766a:	789c      	ldrb	r4, [r3, #2]
    766c:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    766e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7672:	78db      	ldrb	r3, [r3, #3]
    7674:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    7676:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    7678:	6803      	ldr	r3, [r0, #0]
    767a:	3304      	adds	r3, #4
    767c:	6003      	str	r3, [r0, #0]
            break;
    767e:	e7cd      	b.n	761c <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 5 )
    7680:	2d04      	cmp	r5, #4
    7682:	dd1d      	ble.n	76c0 <mbedtls_asn1_get_len+0xc0>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    7684:	785d      	ldrb	r5, [r3, #1]
    7686:	789c      	ldrb	r4, [r3, #2]
    7688:	0424      	lsls	r4, r4, #16
    768a:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    768e:	78dd      	ldrb	r5, [r3, #3]
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    7690:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    7694:	791b      	ldrb	r3, [r3, #4]
    7696:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    7698:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    769a:	6803      	ldr	r3, [r0, #0]
    769c:	3305      	adds	r3, #5
    769e:	6003      	str	r3, [r0, #0]
            break;
    76a0:	e7bc      	b.n	761c <mbedtls_asn1_get_len+0x1c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    76a2:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    76a6:	e7bf      	b.n	7628 <mbedtls_asn1_get_len+0x28>
    if( ( **p & 0x80 ) == 0 )
    76a8:	f06f 0063 	mvn.w	r0, #99	; 0x63
    76ac:	e7bc      	b.n	7628 <mbedtls_asn1_get_len+0x28>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    76ae:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    76b2:	e7b9      	b.n	7628 <mbedtls_asn1_get_len+0x28>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    76b4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    76b8:	e7b6      	b.n	7628 <mbedtls_asn1_get_len+0x28>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    76ba:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    76be:	e7b3      	b.n	7628 <mbedtls_asn1_get_len+0x28>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    76c0:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    76c4:	e7b0      	b.n	7628 <mbedtls_asn1_get_len+0x28>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    76c6:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    76ca:	e7ad      	b.n	7628 <mbedtls_asn1_get_len+0x28>

000076cc <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    76cc:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
    76ce:	6804      	ldr	r4, [r0, #0]
    76d0:	1b0d      	subs	r5, r1, r4
    76d2:	2d00      	cmp	r5, #0
    76d4:	dd07      	ble.n	76e6 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    76d6:	7825      	ldrb	r5, [r4, #0]
    76d8:	429d      	cmp	r5, r3
    76da:	d107      	bne.n	76ec <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    76dc:	3401      	adds	r4, #1
    76de:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
    76e0:	f7ff ff8e 	bl	7600 <mbedtls_asn1_get_len>
}
    76e4:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    76e6:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    76ea:	e7fb      	b.n	76e4 <mbedtls_asn1_get_tag+0x18>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    76ec:	f06f 0061 	mvn.w	r0, #97	; 0x61
    76f0:	e7f8      	b.n	76e4 <mbedtls_asn1_get_tag+0x18>

000076f2 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    76f2:	b530      	push	{r4, r5, lr}
    76f4:	b083      	sub	sp, #12
    76f6:	4604      	mov	r4, r0
    76f8:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    76fa:	2302      	movs	r3, #2
    76fc:	aa01      	add	r2, sp, #4
    76fe:	f7ff ffe5 	bl	76cc <mbedtls_asn1_get_tag>
    7702:	b108      	cbz	r0, 7708 <mbedtls_asn1_get_mpi+0x16>
    ret = mbedtls_mpi_read_binary( X, *p, len );

    *p += len;

    return( ret );
}
    7704:	b003      	add	sp, #12
    7706:	bd30      	pop	{r4, r5, pc}
    ret = mbedtls_mpi_read_binary( X, *p, len );
    7708:	9a01      	ldr	r2, [sp, #4]
    770a:	6821      	ldr	r1, [r4, #0]
    770c:	4628      	mov	r0, r5
    770e:	f000 fb74 	bl	7dfa <mbedtls_mpi_read_binary>
    *p += len;
    7712:	6823      	ldr	r3, [r4, #0]
    7714:	9a01      	ldr	r2, [sp, #4]
    7716:	4413      	add	r3, r2
    7718:	6023      	str	r3, [r4, #0]
    return( ret );
    771a:	e7f3      	b.n	7704 <mbedtls_asn1_get_mpi+0x12>

0000771c <mpi_safe_cond_assign>:
 */
static void mpi_safe_cond_assign( size_t n,
                                  mbedtls_mpi_uint *dest,
                                  const mbedtls_mpi_uint *src,
                                  unsigned char assign )
{
    771c:	b4f0      	push	{r4, r5, r6, r7}
    size_t i;
    for( i = 0; i < n; i++ )
    771e:	2400      	movs	r4, #0
    7720:	4284      	cmp	r4, r0
    7722:	d20d      	bcs.n	7740 <mpi_safe_cond_assign+0x24>
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
    7724:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    7728:	f1c3 0701 	rsb	r7, r3, #1
    772c:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    7730:	fb06 f603 	mul.w	r6, r6, r3
    7734:	fb07 6505 	mla	r5, r7, r5, r6
    7738:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
    for( i = 0; i < n; i++ )
    773c:	3401      	adds	r4, #1
    773e:	e7ef      	b.n	7720 <mpi_safe_cond_assign+0x4>
}
    7740:	bcf0      	pop	{r4, r5, r6, r7}
    7742:	4770      	bx	lr

00007744 <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    7744:	4602      	mov	r2, r0
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    7746:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
    774a:	2000      	movs	r0, #0
    774c:	281f      	cmp	r0, #31
    774e:	d804      	bhi.n	775a <mbedtls_clz+0x16>
    {
        if( x & mask ) break;
    7750:	4213      	tst	r3, r2
    7752:	d102      	bne.n	775a <mbedtls_clz+0x16>

        mask >>= 1;
    7754:	085b      	lsrs	r3, r3, #1
    for( j = 0; j < biL; j++ )
    7756:	3001      	adds	r0, #1
    7758:	e7f8      	b.n	774c <mbedtls_clz+0x8>
    }

    return j;
}
    775a:	4770      	bx	lr

0000775c <mpi_uint_bigendian_to_host_c>:

/* Convert a big-endian byte array aligned to the size of mbedtls_mpi_uint
 * into the storage form used by mbedtls_mpi. */

static mbedtls_mpi_uint mpi_uint_bigendian_to_host_c( mbedtls_mpi_uint x )
{
    775c:	b082      	sub	sp, #8
    775e:	9001      	str	r0, [sp, #4]
    uint8_t i;
    unsigned char *x_ptr;
    mbedtls_mpi_uint tmp = 0;
    7760:	2000      	movs	r0, #0

    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7762:	aa01      	add	r2, sp, #4
    7764:	4603      	mov	r3, r0
    7766:	e005      	b.n	7774 <mpi_uint_bigendian_to_host_c+0x18>
    {
        tmp <<= CHAR_BIT;
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7768:	f812 1b01 	ldrb.w	r1, [r2], #1
    776c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7770:	3301      	adds	r3, #1
    7772:	b2db      	uxtb	r3, r3
    7774:	2b03      	cmp	r3, #3
    7776:	d9f7      	bls.n	7768 <mpi_uint_bigendian_to_host_c+0xc>
    }

    return( tmp );
}
    7778:	b002      	add	sp, #8
    777a:	4770      	bx	lr

0000777c <mpi_uint_bigendian_to_host>:

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
    777c:	b508      	push	{r3, lr}
#endif /* __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ */
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
    777e:	f7ff ffed 	bl	775c <mpi_uint_bigendian_to_host_c>
}
    7782:	bd08      	pop	{r3, pc}

00007784 <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
    7784:	b1a9      	cbz	r1, 77b2 <mpi_bigendian_to_host+0x2e>
{
    7786:	b570      	push	{r4, r5, r6, lr}
    7788:	4605      	mov	r5, r0
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    778a:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    778e:	3c01      	subs	r4, #1
    7790:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    7794:	42a5      	cmp	r5, r4
    7796:	d80b      	bhi.n	77b0 <mpi_bigendian_to_host+0x2c>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    7798:	6828      	ldr	r0, [r5, #0]
    779a:	f7ff ffef 	bl	777c <mpi_uint_bigendian_to_host>
    779e:	4606      	mov	r6, r0
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    77a0:	6820      	ldr	r0, [r4, #0]
    77a2:	f7ff ffeb 	bl	777c <mpi_uint_bigendian_to_host>
    77a6:	f845 0b04 	str.w	r0, [r5], #4
        *cur_limb_right = tmp;
    77aa:	f844 6904 	str.w	r6, [r4], #-4
         cur_limb_left++, cur_limb_right-- )
    77ae:	e7f1      	b.n	7794 <mpi_bigendian_to_host+0x10>
    }
}
    77b0:	bd70      	pop	{r4, r5, r6, pc}
    77b2:	4770      	bx	lr

000077b4 <mpi_sub_hlp>:
 *                      0 if `d >= s`.
 */
static mbedtls_mpi_uint mpi_sub_hlp( size_t n,
                                     mbedtls_mpi_uint *d,
                                     const mbedtls_mpi_uint *s )
{
    77b4:	b4f0      	push	{r4, r5, r6, r7}
    77b6:	4684      	mov	ip, r0
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
    77b8:	2000      	movs	r0, #0
    77ba:	4604      	mov	r4, r0
    77bc:	4564      	cmp	r4, ip
    77be:	d211      	bcs.n	77e4 <mpi_sub_hlp+0x30>
    {
        z = ( *d <  c );     *d -=  c;
    77c0:	680e      	ldr	r6, [r1, #0]
    77c2:	1a33      	subs	r3, r6, r0
    77c4:	600b      	str	r3, [r1, #0]
        c = ( *d < *s ) + z; *d -= *s;
    77c6:	f852 5b04 	ldr.w	r5, [r2], #4
    77ca:	42ab      	cmp	r3, r5
    77cc:	bf2c      	ite	cs
    77ce:	2700      	movcs	r7, #0
    77d0:	2701      	movcc	r7, #1
    77d2:	4286      	cmp	r6, r0
    77d4:	bf2c      	ite	cs
    77d6:	4638      	movcs	r0, r7
    77d8:	1c78      	addcc	r0, r7, #1
    77da:	1b5b      	subs	r3, r3, r5
    77dc:	f841 3b04 	str.w	r3, [r1], #4
    for( i = c = 0; i < n; i++, s++, d++ )
    77e0:	3401      	adds	r4, #1
    77e2:	e7eb      	b.n	77bc <mpi_sub_hlp+0x8>
    }

    return( c );
}
    77e4:	bcf0      	pop	{r4, r5, r6, r7}
    77e6:	4770      	bx	lr

000077e8 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    77e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    mbedtls_mpi_uint c = 0, t = 0;
    77ec:	2400      	movs	r4, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    77ee:	280f      	cmp	r0, #15
    77f0:	f240 8173 	bls.w	7ada <mpi_mul_hlp+0x2f2>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    77f4:	680d      	ldr	r5, [r1, #0]
    77f6:	fba5 8903 	umull	r8, r9, r5, r3
    77fa:	eb14 0408 	adds.w	r4, r4, r8
    77fe:	bf2c      	ite	cs
    7800:	2501      	movcs	r5, #1
    7802:	2500      	movcc	r5, #0
    7804:	eb05 0709 	add.w	r7, r5, r9
    7808:	6816      	ldr	r6, [r2, #0]
    780a:	1936      	adds	r6, r6, r4
    780c:	bf2c      	ite	cs
    780e:	2501      	movcs	r5, #1
    7810:	2500      	movcc	r5, #0
    7812:	443d      	add	r5, r7
    7814:	6016      	str	r6, [r2, #0]
    7816:	684e      	ldr	r6, [r1, #4]
    7818:	fba3 6706 	umull	r6, r7, r3, r6
    781c:	19ad      	adds	r5, r5, r6
    781e:	bf2c      	ite	cs
    7820:	2401      	movcs	r4, #1
    7822:	2400      	movcc	r4, #0
    7824:	4427      	add	r7, r4
    7826:	6856      	ldr	r6, [r2, #4]
    7828:	1975      	adds	r5, r6, r5
    782a:	bf2c      	ite	cs
    782c:	2401      	movcs	r4, #1
    782e:	2400      	movcc	r4, #0
    7830:	443c      	add	r4, r7
    7832:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    7834:	688e      	ldr	r6, [r1, #8]
    7836:	fba3 7806 	umull	r7, r8, r3, r6
    783a:	19e4      	adds	r4, r4, r7
    783c:	bf2c      	ite	cs
    783e:	2601      	movcs	r6, #1
    7840:	2600      	movcc	r6, #0
    7842:	4446      	add	r6, r8
    7844:	6895      	ldr	r5, [r2, #8]
    7846:	192d      	adds	r5, r5, r4
    7848:	bf2c      	ite	cs
    784a:	2401      	movcs	r4, #1
    784c:	2400      	movcc	r4, #0
    784e:	4434      	add	r4, r6
    7850:	6095      	str	r5, [r2, #8]
    7852:	68ce      	ldr	r6, [r1, #12]
    7854:	fba3 7806 	umull	r7, r8, r3, r6
    7858:	19e4      	adds	r4, r4, r7
    785a:	bf2c      	ite	cs
    785c:	2601      	movcs	r6, #1
    785e:	2600      	movcc	r6, #0
    7860:	4446      	add	r6, r8
    7862:	68d5      	ldr	r5, [r2, #12]
    7864:	192d      	adds	r5, r5, r4
    7866:	bf2c      	ite	cs
    7868:	2401      	movcs	r4, #1
    786a:	2400      	movcc	r4, #0
    786c:	4434      	add	r4, r6
    786e:	60d5      	str	r5, [r2, #12]
        MULADDC_CORE   MULADDC_CORE
    7870:	690e      	ldr	r6, [r1, #16]
    7872:	fba3 7806 	umull	r7, r8, r3, r6
    7876:	19e4      	adds	r4, r4, r7
    7878:	bf2c      	ite	cs
    787a:	2601      	movcs	r6, #1
    787c:	2600      	movcc	r6, #0
    787e:	4446      	add	r6, r8
    7880:	6915      	ldr	r5, [r2, #16]
    7882:	192d      	adds	r5, r5, r4
    7884:	bf2c      	ite	cs
    7886:	2401      	movcs	r4, #1
    7888:	2400      	movcc	r4, #0
    788a:	4434      	add	r4, r6
    788c:	6115      	str	r5, [r2, #16]
    788e:	694e      	ldr	r6, [r1, #20]
    7890:	fba3 7806 	umull	r7, r8, r3, r6
    7894:	19e4      	adds	r4, r4, r7
    7896:	bf2c      	ite	cs
    7898:	2601      	movcs	r6, #1
    789a:	2600      	movcc	r6, #0
    789c:	4446      	add	r6, r8
    789e:	6955      	ldr	r5, [r2, #20]
    78a0:	192d      	adds	r5, r5, r4
    78a2:	bf2c      	ite	cs
    78a4:	2401      	movcs	r4, #1
    78a6:	2400      	movcc	r4, #0
    78a8:	4434      	add	r4, r6
    78aa:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    78ac:	698e      	ldr	r6, [r1, #24]
    78ae:	fba3 7806 	umull	r7, r8, r3, r6
    78b2:	19e4      	adds	r4, r4, r7
    78b4:	bf2c      	ite	cs
    78b6:	2601      	movcs	r6, #1
    78b8:	2600      	movcc	r6, #0
    78ba:	4446      	add	r6, r8
    78bc:	6995      	ldr	r5, [r2, #24]
    78be:	192d      	adds	r5, r5, r4
    78c0:	bf2c      	ite	cs
    78c2:	2401      	movcs	r4, #1
    78c4:	2400      	movcc	r4, #0
    78c6:	4434      	add	r4, r6
    78c8:	6195      	str	r5, [r2, #24]
    78ca:	69ce      	ldr	r6, [r1, #28]
    78cc:	fba3 7806 	umull	r7, r8, r3, r6
    78d0:	19e4      	adds	r4, r4, r7
    78d2:	bf2c      	ite	cs
    78d4:	2601      	movcs	r6, #1
    78d6:	2600      	movcc	r6, #0
    78d8:	4446      	add	r6, r8
    78da:	69d5      	ldr	r5, [r2, #28]
    78dc:	192d      	adds	r5, r5, r4
    78de:	bf2c      	ite	cs
    78e0:	2401      	movcs	r4, #1
    78e2:	2400      	movcc	r4, #0
    78e4:	4434      	add	r4, r6
    78e6:	61d5      	str	r5, [r2, #28]

        MULADDC_CORE   MULADDC_CORE
    78e8:	6a0e      	ldr	r6, [r1, #32]
    78ea:	fba3 7806 	umull	r7, r8, r3, r6
    78ee:	19e4      	adds	r4, r4, r7
    78f0:	bf2c      	ite	cs
    78f2:	2601      	movcs	r6, #1
    78f4:	2600      	movcc	r6, #0
    78f6:	4446      	add	r6, r8
    78f8:	6a15      	ldr	r5, [r2, #32]
    78fa:	192d      	adds	r5, r5, r4
    78fc:	bf2c      	ite	cs
    78fe:	2401      	movcs	r4, #1
    7900:	2400      	movcc	r4, #0
    7902:	4434      	add	r4, r6
    7904:	6215      	str	r5, [r2, #32]
    7906:	6a4e      	ldr	r6, [r1, #36]	; 0x24
    7908:	fba3 7806 	umull	r7, r8, r3, r6
    790c:	19e4      	adds	r4, r4, r7
    790e:	bf2c      	ite	cs
    7910:	2601      	movcs	r6, #1
    7912:	2600      	movcc	r6, #0
    7914:	4446      	add	r6, r8
    7916:	6a55      	ldr	r5, [r2, #36]	; 0x24
    7918:	192d      	adds	r5, r5, r4
    791a:	bf2c      	ite	cs
    791c:	2401      	movcs	r4, #1
    791e:	2400      	movcc	r4, #0
    7920:	4434      	add	r4, r6
    7922:	6255      	str	r5, [r2, #36]	; 0x24
        MULADDC_CORE   MULADDC_CORE
    7924:	6a8e      	ldr	r6, [r1, #40]	; 0x28
    7926:	fba3 7806 	umull	r7, r8, r3, r6
    792a:	19e4      	adds	r4, r4, r7
    792c:	bf2c      	ite	cs
    792e:	2601      	movcs	r6, #1
    7930:	2600      	movcc	r6, #0
    7932:	4446      	add	r6, r8
    7934:	6a95      	ldr	r5, [r2, #40]	; 0x28
    7936:	192d      	adds	r5, r5, r4
    7938:	bf2c      	ite	cs
    793a:	2401      	movcs	r4, #1
    793c:	2400      	movcc	r4, #0
    793e:	4434      	add	r4, r6
    7940:	6295      	str	r5, [r2, #40]	; 0x28
    7942:	6ace      	ldr	r6, [r1, #44]	; 0x2c
    7944:	fba3 7806 	umull	r7, r8, r3, r6
    7948:	19e4      	adds	r4, r4, r7
    794a:	bf2c      	ite	cs
    794c:	2601      	movcs	r6, #1
    794e:	2600      	movcc	r6, #0
    7950:	4446      	add	r6, r8
    7952:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    7954:	192d      	adds	r5, r5, r4
    7956:	bf2c      	ite	cs
    7958:	2401      	movcs	r4, #1
    795a:	2400      	movcc	r4, #0
    795c:	4434      	add	r4, r6
    795e:	62d5      	str	r5, [r2, #44]	; 0x2c
        MULADDC_CORE   MULADDC_CORE
    7960:	6b0e      	ldr	r6, [r1, #48]	; 0x30
    7962:	fba3 7806 	umull	r7, r8, r3, r6
    7966:	19e4      	adds	r4, r4, r7
    7968:	bf2c      	ite	cs
    796a:	2601      	movcs	r6, #1
    796c:	2600      	movcc	r6, #0
    796e:	4446      	add	r6, r8
    7970:	6b15      	ldr	r5, [r2, #48]	; 0x30
    7972:	192d      	adds	r5, r5, r4
    7974:	bf2c      	ite	cs
    7976:	2401      	movcs	r4, #1
    7978:	2400      	movcc	r4, #0
    797a:	4434      	add	r4, r6
    797c:	6315      	str	r5, [r2, #48]	; 0x30
    797e:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    7980:	fba3 7806 	umull	r7, r8, r3, r6
    7984:	19e4      	adds	r4, r4, r7
    7986:	bf2c      	ite	cs
    7988:	2601      	movcs	r6, #1
    798a:	2600      	movcc	r6, #0
    798c:	4446      	add	r6, r8
    798e:	6b55      	ldr	r5, [r2, #52]	; 0x34
    7990:	192d      	adds	r5, r5, r4
    7992:	bf2c      	ite	cs
    7994:	2401      	movcs	r4, #1
    7996:	2400      	movcc	r4, #0
    7998:	4434      	add	r4, r6
    799a:	6355      	str	r5, [r2, #52]	; 0x34
        MULADDC_CORE   MULADDC_CORE
    799c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    799e:	fba3 7806 	umull	r7, r8, r3, r6
    79a2:	19e4      	adds	r4, r4, r7
    79a4:	bf2c      	ite	cs
    79a6:	2601      	movcs	r6, #1
    79a8:	2600      	movcc	r6, #0
    79aa:	4446      	add	r6, r8
    79ac:	6b95      	ldr	r5, [r2, #56]	; 0x38
    79ae:	192d      	adds	r5, r5, r4
    79b0:	bf2c      	ite	cs
    79b2:	2401      	movcs	r4, #1
    79b4:	2400      	movcc	r4, #0
    79b6:	4434      	add	r4, r6
    79b8:	6395      	str	r5, [r2, #56]	; 0x38
    79ba:	6bce      	ldr	r6, [r1, #60]	; 0x3c
    79bc:	fba3 7806 	umull	r7, r8, r3, r6
    79c0:	19e4      	adds	r4, r4, r7
    79c2:	bf2c      	ite	cs
    79c4:	2601      	movcs	r6, #1
    79c6:	2600      	movcc	r6, #0
    79c8:	4446      	add	r6, r8
    79ca:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    79cc:	192d      	adds	r5, r5, r4
    79ce:	bf2c      	ite	cs
    79d0:	2401      	movcs	r4, #1
    79d2:	2400      	movcc	r4, #0
    79d4:	4434      	add	r4, r6
    79d6:	63d5      	str	r5, [r2, #60]	; 0x3c
    for( ; i >= 16; i -= 16 )
    79d8:	3810      	subs	r0, #16
        MULADDC_CORE   MULADDC_CORE
    79da:	3240      	adds	r2, #64	; 0x40
    79dc:	3140      	adds	r1, #64	; 0x40
    79de:	e706      	b.n	77ee <mpi_mul_hlp+0x6>
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    79e0:	680d      	ldr	r5, [r1, #0]
    79e2:	fba5 8903 	umull	r8, r9, r5, r3
    79e6:	eb14 0408 	adds.w	r4, r4, r8
    79ea:	bf2c      	ite	cs
    79ec:	2501      	movcs	r5, #1
    79ee:	2500      	movcc	r5, #0
    79f0:	eb05 0709 	add.w	r7, r5, r9
    79f4:	6816      	ldr	r6, [r2, #0]
    79f6:	1936      	adds	r6, r6, r4
    79f8:	bf2c      	ite	cs
    79fa:	2501      	movcs	r5, #1
    79fc:	2500      	movcc	r5, #0
    79fe:	443d      	add	r5, r7
    7a00:	6016      	str	r6, [r2, #0]
    7a02:	684e      	ldr	r6, [r1, #4]
    7a04:	fba3 6706 	umull	r6, r7, r3, r6
    7a08:	19ad      	adds	r5, r5, r6
    7a0a:	bf2c      	ite	cs
    7a0c:	2401      	movcs	r4, #1
    7a0e:	2400      	movcc	r4, #0
    7a10:	4427      	add	r7, r4
    7a12:	6856      	ldr	r6, [r2, #4]
    7a14:	1975      	adds	r5, r6, r5
    7a16:	bf2c      	ite	cs
    7a18:	2401      	movcs	r4, #1
    7a1a:	2400      	movcc	r4, #0
    7a1c:	443c      	add	r4, r7
    7a1e:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    7a20:	688e      	ldr	r6, [r1, #8]
    7a22:	fba3 7806 	umull	r7, r8, r3, r6
    7a26:	19e4      	adds	r4, r4, r7
    7a28:	bf2c      	ite	cs
    7a2a:	2601      	movcs	r6, #1
    7a2c:	2600      	movcc	r6, #0
    7a2e:	4446      	add	r6, r8
    7a30:	6895      	ldr	r5, [r2, #8]
    7a32:	192d      	adds	r5, r5, r4
    7a34:	bf2c      	ite	cs
    7a36:	2401      	movcs	r4, #1
    7a38:	2400      	movcc	r4, #0
    7a3a:	4434      	add	r4, r6
    7a3c:	6095      	str	r5, [r2, #8]
    7a3e:	68ce      	ldr	r6, [r1, #12]
    7a40:	fba3 7806 	umull	r7, r8, r3, r6
    7a44:	19e4      	adds	r4, r4, r7
    7a46:	bf2c      	ite	cs
    7a48:	2601      	movcs	r6, #1
    7a4a:	2600      	movcc	r6, #0
    7a4c:	4446      	add	r6, r8
    7a4e:	68d5      	ldr	r5, [r2, #12]
    7a50:	192d      	adds	r5, r5, r4
    7a52:	bf2c      	ite	cs
    7a54:	2401      	movcs	r4, #1
    7a56:	2400      	movcc	r4, #0
    7a58:	4434      	add	r4, r6
    7a5a:	60d5      	str	r5, [r2, #12]

        MULADDC_CORE   MULADDC_CORE
    7a5c:	690e      	ldr	r6, [r1, #16]
    7a5e:	fba3 7806 	umull	r7, r8, r3, r6
    7a62:	19e4      	adds	r4, r4, r7
    7a64:	bf2c      	ite	cs
    7a66:	2601      	movcs	r6, #1
    7a68:	2600      	movcc	r6, #0
    7a6a:	4446      	add	r6, r8
    7a6c:	6915      	ldr	r5, [r2, #16]
    7a6e:	192d      	adds	r5, r5, r4
    7a70:	bf2c      	ite	cs
    7a72:	2401      	movcs	r4, #1
    7a74:	2400      	movcc	r4, #0
    7a76:	4434      	add	r4, r6
    7a78:	6115      	str	r5, [r2, #16]
    7a7a:	694e      	ldr	r6, [r1, #20]
    7a7c:	fba3 7806 	umull	r7, r8, r3, r6
    7a80:	19e4      	adds	r4, r4, r7
    7a82:	bf2c      	ite	cs
    7a84:	2601      	movcs	r6, #1
    7a86:	2600      	movcc	r6, #0
    7a88:	4446      	add	r6, r8
    7a8a:	6955      	ldr	r5, [r2, #20]
    7a8c:	192d      	adds	r5, r5, r4
    7a8e:	bf2c      	ite	cs
    7a90:	2401      	movcs	r4, #1
    7a92:	2400      	movcc	r4, #0
    7a94:	4434      	add	r4, r6
    7a96:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    7a98:	698e      	ldr	r6, [r1, #24]
    7a9a:	fba3 7806 	umull	r7, r8, r3, r6
    7a9e:	19e4      	adds	r4, r4, r7
    7aa0:	bf2c      	ite	cs
    7aa2:	2601      	movcs	r6, #1
    7aa4:	2600      	movcc	r6, #0
    7aa6:	4446      	add	r6, r8
    7aa8:	6995      	ldr	r5, [r2, #24]
    7aaa:	192d      	adds	r5, r5, r4
    7aac:	bf2c      	ite	cs
    7aae:	2401      	movcs	r4, #1
    7ab0:	2400      	movcc	r4, #0
    7ab2:	4434      	add	r4, r6
    7ab4:	6195      	str	r5, [r2, #24]
    7ab6:	69ce      	ldr	r6, [r1, #28]
    7ab8:	fba3 7806 	umull	r7, r8, r3, r6
    7abc:	19e4      	adds	r4, r4, r7
    7abe:	bf2c      	ite	cs
    7ac0:	2601      	movcs	r6, #1
    7ac2:	2600      	movcc	r6, #0
    7ac4:	4446      	add	r6, r8
    7ac6:	69d5      	ldr	r5, [r2, #28]
    7ac8:	192d      	adds	r5, r5, r4
    7aca:	bf2c      	ite	cs
    7acc:	2401      	movcs	r4, #1
    7ace:	2400      	movcc	r4, #0
    7ad0:	4434      	add	r4, r6
    7ad2:	61d5      	str	r5, [r2, #28]
    for( ; i >= 8; i -= 8 )
    7ad4:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    7ad6:	3220      	adds	r2, #32
    7ad8:	3120      	adds	r1, #32
    for( ; i >= 8; i -= 8 )
    7ada:	2807      	cmp	r0, #7
    7adc:	d880      	bhi.n	79e0 <mpi_mul_hlp+0x1f8>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    7ade:	b190      	cbz	r0, 7b06 <mpi_mul_hlp+0x31e>
    {
        MULADDC_INIT
        MULADDC_CORE
    7ae0:	f851 6b04 	ldr.w	r6, [r1], #4
    7ae4:	fba6 7803 	umull	r7, r8, r6, r3
    7ae8:	19e4      	adds	r4, r4, r7
    7aea:	bf2c      	ite	cs
    7aec:	2601      	movcs	r6, #1
    7aee:	2600      	movcc	r6, #0
    7af0:	4446      	add	r6, r8
    7af2:	6815      	ldr	r5, [r2, #0]
    7af4:	192d      	adds	r5, r5, r4
    7af6:	bf2c      	ite	cs
    7af8:	2401      	movcs	r4, #1
    7afa:	2400      	movcc	r4, #0
    7afc:	4434      	add	r4, r6
    7afe:	f842 5b04 	str.w	r5, [r2], #4
    for( ; i > 0; i-- )
    7b02:	3801      	subs	r0, #1
    7b04:	e7eb      	b.n	7ade <mpi_mul_hlp+0x2f6>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
    7b06:	6813      	ldr	r3, [r2, #0]
    7b08:	4423      	add	r3, r4
    7b0a:	f842 3b04 	str.w	r3, [r2], #4
    7b0e:	4621      	mov	r1, r4
    7b10:	42a3      	cmp	r3, r4
    7b12:	bf2c      	ite	cs
    7b14:	2400      	movcs	r4, #0
    7b16:	2401      	movcc	r4, #1
    }
    while( c != 0 );
    7b18:	428b      	cmp	r3, r1
    7b1a:	d3f4      	bcc.n	7b06 <mpi_mul_hlp+0x31e>
}
    7b1c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    7b20:	4770      	bx	lr

00007b22 <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
    7b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b26:	461e      	mov	r6, r3
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
    7b28:	b1ba      	cbz	r2, 7b5a <mbedtls_int_div_int+0x38>
    7b2a:	4604      	mov	r4, r0
    7b2c:	4688      	mov	r8, r1
    7b2e:	4617      	mov	r7, r2
    7b30:	4282      	cmp	r2, r0
    7b32:	d912      	bls.n	7b5a <mbedtls_int_div_int+0x38>
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
    7b34:	2300      	movs	r3, #0
    7b36:	4608      	mov	r0, r1
    7b38:	4621      	mov	r1, r4
    7b3a:	f7f8 fb03 	bl	144 <__aeabi_uldivmod>
    7b3e:	4604      	mov	r4, r0
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    7b40:	2901      	cmp	r1, #1
    7b42:	bf08      	it	eq
    7b44:	2800      	cmpeq	r0, #0
    7b46:	d301      	bcc.n	7b4c <mbedtls_int_div_int+0x2a>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
    7b48:	f04f 34ff 	mov.w	r4, #4294967295

    if( r != NULL )
    7b4c:	b116      	cbz	r6, 7b54 <mbedtls_int_div_int+0x32>
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
    7b4e:	fb07 8714 	mls	r7, r7, r4, r8
    7b52:	6037      	str	r7, [r6, #0]

    return (mbedtls_mpi_uint) quotient;
    7b54:	4620      	mov	r0, r4

    quotient = q1 * radix + q0;

    return quotient;
#endif
}
    7b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (r != NULL) *r = ~0;
    7b5a:	b116      	cbz	r6, 7b62 <mbedtls_int_div_int+0x40>
    7b5c:	f04f 33ff 	mov.w	r3, #4294967295
    7b60:	6033      	str	r3, [r6, #0]
        return ( ~0 );
    7b62:	f04f 30ff 	mov.w	r0, #4294967295
    7b66:	e7f6      	b.n	7b56 <mbedtls_int_div_int+0x34>

00007b68 <mpi_montg_init>:

/*
 * Fast Montgomery initialization (thanks to Tom St Denis)
 */
static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
{
    7b68:	b410      	push	{r4}
    mbedtls_mpi_uint x, m0 = N->p[0];
    7b6a:	688b      	ldr	r3, [r1, #8]
    7b6c:	681c      	ldr	r4, [r3, #0]
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
    7b6e:	1ca3      	adds	r3, r4, #2
    7b70:	005b      	lsls	r3, r3, #1
    7b72:	f003 0308 	and.w	r3, r3, #8
    7b76:	4423      	add	r3, r4

    for( i = biL; i >= 8; i /= 2 )
    7b78:	2120      	movs	r1, #32
    7b7a:	e006      	b.n	7b8a <mpi_montg_init+0x22>
        x *= ( 2 - ( m0 * x ) );
    7b7c:	fb04 f203 	mul.w	r2, r4, r3
    7b80:	f1c2 0202 	rsb	r2, r2, #2
    7b84:	fb02 f303 	mul.w	r3, r2, r3
    for( i = biL; i >= 8; i /= 2 )
    7b88:	0849      	lsrs	r1, r1, #1
    7b8a:	2907      	cmp	r1, #7
    7b8c:	d8f6      	bhi.n	7b7c <mpi_montg_init+0x14>

    *mm = ~x + 1;
    7b8e:	425b      	negs	r3, r3
    7b90:	6003      	str	r3, [r0, #0]
}
    7b92:	bc10      	pop	{r4}
    7b94:	4770      	bx	lr

00007b96 <mbedtls_mpi_zeroize>:
{
    7b96:	b508      	push	{r3, lr}
    mbedtls_platform_zeroize( v, ciL * n );
    7b98:	0089      	lsls	r1, r1, #2
    7b9a:	f7fc f91f 	bl	3ddc <mbedtls_platform_zeroize>
}
    7b9e:	bd08      	pop	{r3, pc}

00007ba0 <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    7ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ba4:	b083      	sub	sp, #12
    7ba6:	4681      	mov	r9, r0
    7ba8:	468b      	mov	fp, r1
    7baa:	4692      	mov	sl, r2
    7bac:	9301      	str	r3, [sp, #4]
    7bae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    7bb0:	6862      	ldr	r2, [r4, #4]
    7bb2:	0092      	lsls	r2, r2, #2
    7bb4:	2100      	movs	r1, #0
    7bb6:	68a0      	ldr	r0, [r4, #8]
    7bb8:	f7ff f9e3 	bl	6f82 <memset>

    d = T->p;
    7bbc:	68a4      	ldr	r4, [r4, #8]
    n = N->n;
    7bbe:	f8da 7004 	ldr.w	r7, [sl, #4]
    m = ( B->n < n ) ? B->n : n;
    7bc2:	f8db 3004 	ldr.w	r3, [fp, #4]
    7bc6:	42bb      	cmp	r3, r7
    7bc8:	bf28      	it	cs
    7bca:	463b      	movcs	r3, r7
    7bcc:	9300      	str	r3, [sp, #0]

    for( i = 0; i < n; i++ )
    7bce:	2600      	movs	r6, #0
    7bd0:	46b8      	mov	r8, r7
    7bd2:	4546      	cmp	r6, r8
    7bd4:	d221      	bcs.n	7c1a <mpi_montmul+0x7a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
    7bd6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    7bda:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7bde:	6823      	ldr	r3, [r4, #0]
    7be0:	f8db 1008 	ldr.w	r1, [fp, #8]
    7be4:	680d      	ldr	r5, [r1, #0]
    7be6:	fb07 3505 	mla	r5, r7, r5, r3
    7bea:	9b01      	ldr	r3, [sp, #4]
    7bec:	fb03 f505 	mul.w	r5, r3, r5

        mpi_mul_hlp( m, B->p, d, u0 );
    7bf0:	463b      	mov	r3, r7
    7bf2:	4622      	mov	r2, r4
    7bf4:	9800      	ldr	r0, [sp, #0]
    7bf6:	f7ff fdf7 	bl	77e8 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    7bfa:	462b      	mov	r3, r5
    7bfc:	4622      	mov	r2, r4
    7bfe:	f8da 1008 	ldr.w	r1, [sl, #8]
    7c02:	4640      	mov	r0, r8
    7c04:	f7ff fdf0 	bl	77e8 <mpi_mul_hlp>

        *d++ = u0; d[n + 1] = 0;
    7c08:	f844 7b04 	str.w	r7, [r4], #4
    7c0c:	f108 0301 	add.w	r3, r8, #1
    7c10:	2200      	movs	r2, #0
    7c12:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < n; i++ )
    7c16:	3601      	adds	r6, #1
    7c18:	e7db      	b.n	7bd2 <mpi_montmul+0x32>
    7c1a:	4647      	mov	r7, r8
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    7c1c:	00ba      	lsls	r2, r7, #2
    7c1e:	4621      	mov	r1, r4
    7c20:	f8d9 0008 	ldr.w	r0, [r9, #8]
    7c24:	f7ff f989 	bl	6f3a <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    7c28:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
    7c2c:	3301      	adds	r3, #1
    7c2e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    7c32:	f8da 2008 	ldr.w	r2, [sl, #8]
    7c36:	4621      	mov	r1, r4
    7c38:	4640      	mov	r0, r8
    7c3a:	f7ff fdbb 	bl	77b4 <mpi_sub_hlp>
    7c3e:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
    7c42:	1a1b      	subs	r3, r3, r0
    7c44:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7c48:	b2db      	uxtb	r3, r3
    7c4a:	4622      	mov	r2, r4
    7c4c:	f8d9 1008 	ldr.w	r1, [r9, #8]
    7c50:	4640      	mov	r0, r8
    7c52:	f7ff fd63 	bl	771c <mpi_safe_cond_assign>
}
    7c56:	b003      	add	sp, #12
    7c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007c5c <mpi_montred>:
 *
 * See mpi_montmul() regarding constraints and guarantees on the parameters.
 */
static void mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                         mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    7c5c:	b510      	push	{r4, lr}
    7c5e:	b086      	sub	sp, #24
    mbedtls_mpi_uint z = 1;
    7c60:	2401      	movs	r4, #1
    7c62:	9405      	str	r4, [sp, #20]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    7c64:	9402      	str	r4, [sp, #8]
    7c66:	9403      	str	r4, [sp, #12]
    U.p = &z;
    7c68:	ac05      	add	r4, sp, #20
    7c6a:	9404      	str	r4, [sp, #16]

    mpi_montmul( A, &U, N, mm, T );
    7c6c:	9300      	str	r3, [sp, #0]
    7c6e:	4613      	mov	r3, r2
    7c70:	460a      	mov	r2, r1
    7c72:	a902      	add	r1, sp, #8
    7c74:	f7ff ff94 	bl	7ba0 <mpi_montmul>
}
    7c78:	b006      	add	sp, #24
    7c7a:	bd10      	pop	{r4, pc}

00007c7c <mbedtls_mpi_init>:
    X->s = 1;
    7c7c:	2301      	movs	r3, #1
    7c7e:	6003      	str	r3, [r0, #0]
    X->n = 0;
    7c80:	2300      	movs	r3, #0
    7c82:	6043      	str	r3, [r0, #4]
    X->p = NULL;
    7c84:	6083      	str	r3, [r0, #8]
}
    7c86:	4770      	bx	lr

00007c88 <mbedtls_mpi_free>:
    if( X == NULL )
    7c88:	b178      	cbz	r0, 7caa <mbedtls_mpi_free+0x22>
{
    7c8a:	b510      	push	{r4, lr}
    7c8c:	4604      	mov	r4, r0
    if( X->p != NULL )
    7c8e:	6880      	ldr	r0, [r0, #8]
    7c90:	b128      	cbz	r0, 7c9e <mbedtls_mpi_free+0x16>
        mbedtls_mpi_zeroize( X->p, X->n );
    7c92:	6861      	ldr	r1, [r4, #4]
    7c94:	f7ff ff7f 	bl	7b96 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
    7c98:	68a0      	ldr	r0, [r4, #8]
    7c9a:	f7fc f88d 	bl	3db8 <mbedtls_free>
    X->s = 1;
    7c9e:	2301      	movs	r3, #1
    7ca0:	6023      	str	r3, [r4, #0]
    X->n = 0;
    7ca2:	2300      	movs	r3, #0
    7ca4:	6063      	str	r3, [r4, #4]
    X->p = NULL;
    7ca6:	60a3      	str	r3, [r4, #8]
}
    7ca8:	bd10      	pop	{r4, pc}
    7caa:	4770      	bx	lr

00007cac <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    7cac:	f242 7310 	movw	r3, #10000	; 0x2710
    7cb0:	4299      	cmp	r1, r3
    7cb2:	d81e      	bhi.n	7cf2 <mbedtls_mpi_grow+0x46>
{
    7cb4:	b570      	push	{r4, r5, r6, lr}
    7cb6:	4604      	mov	r4, r0
    7cb8:	460d      	mov	r5, r1
    if( X->n < nblimbs )
    7cba:	6843      	ldr	r3, [r0, #4]
    7cbc:	428b      	cmp	r3, r1
    7cbe:	d301      	bcc.n	7cc4 <mbedtls_mpi_grow+0x18>
    return( 0 );
    7cc0:	2000      	movs	r0, #0
}
    7cc2:	bd70      	pop	{r4, r5, r6, pc}
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    7cc4:	2104      	movs	r1, #4
    7cc6:	4628      	mov	r0, r5
    7cc8:	f7fc f86e 	bl	3da8 <mbedtls_calloc>
    7ccc:	4606      	mov	r6, r0
    7cce:	b198      	cbz	r0, 7cf8 <mbedtls_mpi_grow+0x4c>
        if( X->p != NULL )
    7cd0:	68a1      	ldr	r1, [r4, #8]
    7cd2:	b151      	cbz	r1, 7cea <mbedtls_mpi_grow+0x3e>
            memcpy( p, X->p, X->n * ciL );
    7cd4:	6862      	ldr	r2, [r4, #4]
    7cd6:	0092      	lsls	r2, r2, #2
    7cd8:	f7ff f92f 	bl	6f3a <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
    7cdc:	6861      	ldr	r1, [r4, #4]
    7cde:	68a0      	ldr	r0, [r4, #8]
    7ce0:	f7ff ff59 	bl	7b96 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
    7ce4:	68a0      	ldr	r0, [r4, #8]
    7ce6:	f7fc f867 	bl	3db8 <mbedtls_free>
        X->n = nblimbs;
    7cea:	6065      	str	r5, [r4, #4]
        X->p = p;
    7cec:	60a6      	str	r6, [r4, #8]
    return( 0 );
    7cee:	2000      	movs	r0, #0
    7cf0:	e7e7      	b.n	7cc2 <mbedtls_mpi_grow+0x16>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    7cf2:	f06f 000f 	mvn.w	r0, #15
}
    7cf6:	4770      	bx	lr
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    7cf8:	f06f 000f 	mvn.w	r0, #15
    7cfc:	e7e1      	b.n	7cc2 <mbedtls_mpi_grow+0x16>

00007cfe <mbedtls_mpi_copy>:
{
    7cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( X == Y )
    7d00:	4288      	cmp	r0, r1
    7d02:	d02c      	beq.n	7d5e <mbedtls_mpi_copy+0x60>
    7d04:	4606      	mov	r6, r0
    7d06:	460d      	mov	r5, r1
    if( Y->n == 0 )
    7d08:	684b      	ldr	r3, [r1, #4]
    7d0a:	b13b      	cbz	r3, 7d1c <mbedtls_mpi_copy+0x1e>
    for( i = Y->n - 1; i > 0; i-- )
    7d0c:	3b01      	subs	r3, #1
    7d0e:	b14b      	cbz	r3, 7d24 <mbedtls_mpi_copy+0x26>
        if( Y->p[i] != 0 )
    7d10:	68aa      	ldr	r2, [r5, #8]
    7d12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7d16:	b92a      	cbnz	r2, 7d24 <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    7d18:	3b01      	subs	r3, #1
    7d1a:	e7f8      	b.n	7d0e <mbedtls_mpi_copy+0x10>
        mbedtls_mpi_free( X );
    7d1c:	f7ff ffb4 	bl	7c88 <mbedtls_mpi_free>
        return( 0 );
    7d20:	2700      	movs	r7, #0
    7d22:	e01a      	b.n	7d5a <mbedtls_mpi_copy+0x5c>
    i++;
    7d24:	1c5c      	adds	r4, r3, #1
    X->s = Y->s;
    7d26:	682b      	ldr	r3, [r5, #0]
    7d28:	6033      	str	r3, [r6, #0]
    if( X->n < i )
    7d2a:	6872      	ldr	r2, [r6, #4]
    7d2c:	42a2      	cmp	r2, r4
    7d2e:	d206      	bcs.n	7d3e <mbedtls_mpi_copy+0x40>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    7d30:	4621      	mov	r1, r4
    7d32:	4630      	mov	r0, r6
    7d34:	f7ff ffba 	bl	7cac <mbedtls_mpi_grow>
    7d38:	4607      	mov	r7, r0
    7d3a:	b148      	cbz	r0, 7d50 <mbedtls_mpi_copy+0x52>
    7d3c:	e00d      	b.n	7d5a <mbedtls_mpi_copy+0x5c>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    7d3e:	68b0      	ldr	r0, [r6, #8]
    7d40:	1b12      	subs	r2, r2, r4
    7d42:	0092      	lsls	r2, r2, #2
    7d44:	2100      	movs	r1, #0
    7d46:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    7d4a:	f7ff f91a 	bl	6f82 <memset>
    int ret = 0;
    7d4e:	2700      	movs	r7, #0
    memcpy( X->p, Y->p, i * ciL );
    7d50:	00a2      	lsls	r2, r4, #2
    7d52:	68a9      	ldr	r1, [r5, #8]
    7d54:	68b0      	ldr	r0, [r6, #8]
    7d56:	f7ff f8f0 	bl	6f3a <memcpy>
}
    7d5a:	4638      	mov	r0, r7
    7d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( 0 );
    7d5e:	2700      	movs	r7, #0
    7d60:	e7fb      	b.n	7d5a <mbedtls_mpi_copy+0x5c>

00007d62 <mbedtls_mpi_lset>:
{
    7d62:	b570      	push	{r4, r5, r6, lr}
    7d64:	4604      	mov	r4, r0
    7d66:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    7d68:	2101      	movs	r1, #1
    7d6a:	f7ff ff9f 	bl	7cac <mbedtls_mpi_grow>
    7d6e:	4606      	mov	r6, r0
    7d70:	b108      	cbz	r0, 7d76 <mbedtls_mpi_lset+0x14>
}
    7d72:	4630      	mov	r0, r6
    7d74:	bd70      	pop	{r4, r5, r6, pc}
    memset( X->p, 0, X->n * ciL );
    7d76:	6862      	ldr	r2, [r4, #4]
    7d78:	0092      	lsls	r2, r2, #2
    7d7a:	2100      	movs	r1, #0
    7d7c:	68a0      	ldr	r0, [r4, #8]
    7d7e:	f7ff f900 	bl	6f82 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    7d82:	68a3      	ldr	r3, [r4, #8]
    7d84:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
    7d88:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
    7d8c:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    7d8e:	2d00      	cmp	r5, #0
    7d90:	db02      	blt.n	7d98 <mbedtls_mpi_lset+0x36>
    7d92:	2301      	movs	r3, #1
    7d94:	6023      	str	r3, [r4, #0]
    return( ret );
    7d96:	e7ec      	b.n	7d72 <mbedtls_mpi_lset+0x10>
    X->s    = ( z < 0 ) ? -1 : 1;
    7d98:	f04f 33ff 	mov.w	r3, #4294967295
    7d9c:	e7fa      	b.n	7d94 <mbedtls_mpi_lset+0x32>

00007d9e <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    7d9e:	6843      	ldr	r3, [r0, #4]
    7da0:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    7da4:	d20a      	bcs.n	7dbc <mbedtls_mpi_get_bit+0x1e>
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    7da6:	6883      	ldr	r3, [r0, #8]
    7da8:	094a      	lsrs	r2, r1, #5
    7daa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7dae:	f001 011f 	and.w	r1, r1, #31
    7db2:	fa20 f101 	lsr.w	r1, r0, r1
    7db6:	f001 0001 	and.w	r0, r1, #1
    7dba:	4770      	bx	lr
        return( 0 );
    7dbc:	2000      	movs	r0, #0
}
    7dbe:	4770      	bx	lr

00007dc0 <mbedtls_mpi_bitlen>:
{
    7dc0:	4602      	mov	r2, r0
    if( X->n == 0 )
    7dc2:	6840      	ldr	r0, [r0, #4]
    7dc4:	b190      	cbz	r0, 7dec <mbedtls_mpi_bitlen+0x2c>
{
    7dc6:	b510      	push	{r4, lr}
    for( i = X->n - 1; i > 0; i-- )
    7dc8:	1e44      	subs	r4, r0, #1
    7dca:	b12c      	cbz	r4, 7dd8 <mbedtls_mpi_bitlen+0x18>
        if( X->p[i] != 0 )
    7dcc:	6893      	ldr	r3, [r2, #8]
    7dce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    7dd2:	b90b      	cbnz	r3, 7dd8 <mbedtls_mpi_bitlen+0x18>
    for( i = X->n - 1; i > 0; i-- )
    7dd4:	3c01      	subs	r4, #1
    7dd6:	e7f8      	b.n	7dca <mbedtls_mpi_bitlen+0xa>
    j = biL - mbedtls_clz( X->p[i] );
    7dd8:	6893      	ldr	r3, [r2, #8]
    7dda:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    7dde:	f7ff fcb1 	bl	7744 <mbedtls_clz>
    7de2:	f1c0 0020 	rsb	r0, r0, #32
    return( ( i * biL ) + j );
    7de6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
}
    7dea:	bd10      	pop	{r4, pc}
    7dec:	4770      	bx	lr

00007dee <mbedtls_mpi_size>:
{
    7dee:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    7df0:	f7ff ffe6 	bl	7dc0 <mbedtls_mpi_bitlen>
    7df4:	3007      	adds	r0, #7
}
    7df6:	08c0      	lsrs	r0, r0, #3
    7df8:	bd08      	pop	{r3, pc}

00007dfa <mbedtls_mpi_read_binary>:
{
    7dfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7dfe:	4605      	mov	r5, r0
    7e00:	460f      	mov	r7, r1
    7e02:	4616      	mov	r6, r2
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    7e04:	f012 0303 	ands.w	r3, r2, #3
    7e08:	bf18      	it	ne
    7e0a:	2301      	movne	r3, #1
    7e0c:	eb03 0492 	add.w	r4, r3, r2, lsr #2
    size_t const overhead = ( limbs * ciL ) - buflen;
    7e10:	ebc2 0984 	rsb	r9, r2, r4, lsl #2
    if( X->n != limbs )
    7e14:	6843      	ldr	r3, [r0, #4]
    7e16:	42a3      	cmp	r3, r4
    7e18:	d00a      	beq.n	7e30 <mbedtls_mpi_read_binary+0x36>
        mbedtls_mpi_free( X );
    7e1a:	f7ff ff35 	bl	7c88 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
    7e1e:	4628      	mov	r0, r5
    7e20:	f7ff ff2c 	bl	7c7c <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    7e24:	4621      	mov	r1, r4
    7e26:	4628      	mov	r0, r5
    7e28:	f7ff ff40 	bl	7cac <mbedtls_mpi_grow>
    7e2c:	4680      	mov	r8, r0
    7e2e:	b980      	cbnz	r0, 7e52 <mbedtls_mpi_read_binary+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    7e30:	2100      	movs	r1, #0
    7e32:	4628      	mov	r0, r5
    7e34:	f7ff ff95 	bl	7d62 <mbedtls_mpi_lset>
    7e38:	4680      	mov	r8, r0
    7e3a:	b950      	cbnz	r0, 7e52 <mbedtls_mpi_read_binary+0x58>
    if( buf != NULL )
    7e3c:	b14f      	cbz	r7, 7e52 <mbedtls_mpi_read_binary+0x58>
        Xp = (unsigned char*) X->p;
    7e3e:	68a8      	ldr	r0, [r5, #8]
        memcpy( Xp + overhead, buf, buflen );
    7e40:	4632      	mov	r2, r6
    7e42:	4639      	mov	r1, r7
    7e44:	4448      	add	r0, r9
    7e46:	f7ff f878 	bl	6f3a <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
    7e4a:	4621      	mov	r1, r4
    7e4c:	68a8      	ldr	r0, [r5, #8]
    7e4e:	f7ff fc99 	bl	7784 <mpi_bigendian_to_host>
}
    7e52:	4640      	mov	r0, r8
    7e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007e58 <mbedtls_mpi_write_binary>:
{
    7e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e5a:	4606      	mov	r6, r0
    7e5c:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
    7e5e:	6873      	ldr	r3, [r6, #4]
    7e60:	009f      	lsls	r7, r3, #2
    if( stored_bytes < buflen )
    7e62:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    7e66:	d80f      	bhi.n	7e88 <mbedtls_mpi_write_binary+0x30>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    7e68:	4613      	mov	r3, r2
    7e6a:	42bb      	cmp	r3, r7
    7e6c:	d213      	bcs.n	7e96 <mbedtls_mpi_write_binary+0x3e>
            if( GET_BYTE( X, i ) != 0 )
    7e6e:	68b4      	ldr	r4, [r6, #8]
    7e70:	f023 0103 	bic.w	r1, r3, #3
    7e74:	5864      	ldr	r4, [r4, r1]
    7e76:	f003 0503 	and.w	r5, r3, #3
    7e7a:	00ed      	lsls	r5, r5, #3
    7e7c:	40ec      	lsrs	r4, r5
    7e7e:	f014 0fff 	tst.w	r4, #255	; 0xff
    7e82:	d11a      	bne.n	7eba <mbedtls_mpi_write_binary+0x62>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    7e84:	3301      	adds	r3, #1
    7e86:	e7f0      	b.n	7e6a <mbedtls_mpi_write_binary+0x12>
        p = buf + buflen - stored_bytes;
    7e88:	1bd2      	subs	r2, r2, r7
    7e8a:	188c      	adds	r4, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    7e8c:	2100      	movs	r1, #0
    7e8e:	f7ff f878 	bl	6f82 <memset>
        p = buf + buflen - stored_bytes;
    7e92:	4620      	mov	r0, r4
        bytes_to_copy = stored_bytes;
    7e94:	463a      	mov	r2, r7
    for( i = 0; i < bytes_to_copy; i++ )
    7e96:	2300      	movs	r3, #0
    7e98:	e00b      	b.n	7eb2 <mbedtls_mpi_write_binary+0x5a>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    7e9a:	68b4      	ldr	r4, [r6, #8]
    7e9c:	f023 0103 	bic.w	r1, r3, #3
    7ea0:	5865      	ldr	r5, [r4, r1]
    7ea2:	f003 0103 	and.w	r1, r3, #3
    7ea6:	00c9      	lsls	r1, r1, #3
    7ea8:	40cd      	lsrs	r5, r1
    7eaa:	1ad4      	subs	r4, r2, r3
    7eac:	3c01      	subs	r4, #1
    7eae:	5505      	strb	r5, [r0, r4]
    for( i = 0; i < bytes_to_copy; i++ )
    7eb0:	3301      	adds	r3, #1
    7eb2:	429a      	cmp	r2, r3
    7eb4:	d8f1      	bhi.n	7e9a <mbedtls_mpi_write_binary+0x42>
    return( 0 );
    7eb6:	2000      	movs	r0, #0
}
    7eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    7eba:	f06f 0007 	mvn.w	r0, #7
    7ebe:	e7fb      	b.n	7eb8 <mbedtls_mpi_write_binary+0x60>

00007ec0 <mbedtls_mpi_shift_l>:
{
    7ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ec2:	4605      	mov	r5, r0
    7ec4:	460f      	mov	r7, r1
    v0 = count / (biL    );
    7ec6:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    7ec8:	f001 061f 	and.w	r6, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    7ecc:	f7ff ff78 	bl	7dc0 <mbedtls_mpi_bitlen>
    7ed0:	4438      	add	r0, r7
    if( X->n * biL < i )
    7ed2:	686b      	ldr	r3, [r5, #4]
    7ed4:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    7ed8:	d810      	bhi.n	7efc <mbedtls_mpi_shift_l+0x3c>
    if( v0 > 0 )
    7eda:	2f1f      	cmp	r7, #31
    7edc:	d924      	bls.n	7f28 <mbedtls_mpi_shift_l+0x68>
        for( i = X->n; i > v0; i-- )
    7ede:	686b      	ldr	r3, [r5, #4]
    7ee0:	42a3      	cmp	r3, r4
    7ee2:	d91f      	bls.n	7f24 <mbedtls_mpi_shift_l+0x64>
            X->p[i - 1] = X->p[i - v0 - 1];
    7ee4:	68a9      	ldr	r1, [r5, #8]
    7ee6:	1b1a      	subs	r2, r3, r4
    7ee8:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    7eec:	181f      	adds	r7, r3, r0
    7eee:	4402      	add	r2, r0
    7ef0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    7ef4:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
        for( i = X->n; i > v0; i-- )
    7ef8:	3b01      	subs	r3, #1
    7efa:	e7f1      	b.n	7ee0 <mbedtls_mpi_shift_l+0x20>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    7efc:	f010 011f 	ands.w	r1, r0, #31
    7f00:	bf18      	it	ne
    7f02:	2101      	movne	r1, #1
    7f04:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    7f08:	4628      	mov	r0, r5
    7f0a:	f7ff fecf 	bl	7cac <mbedtls_mpi_grow>
    7f0e:	2800      	cmp	r0, #0
    7f10:	d0e3      	beq.n	7eda <mbedtls_mpi_shift_l+0x1a>
    7f12:	e00b      	b.n	7f2c <mbedtls_mpi_shift_l+0x6c>
            X->p[i - 1] = 0;
    7f14:	68a9      	ldr	r1, [r5, #8]
    7f16:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7f1a:	3a01      	subs	r2, #1
    7f1c:	2000      	movs	r0, #0
    7f1e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
        for( ; i > 0; i-- )
    7f22:	3b01      	subs	r3, #1
    7f24:	2b00      	cmp	r3, #0
    7f26:	d1f5      	bne.n	7f14 <mbedtls_mpi_shift_l+0x54>
    if( t1 > 0 )
    7f28:	b9c6      	cbnz	r6, 7f5c <mbedtls_mpi_shift_l+0x9c>
    ret = 0;
    7f2a:	2000      	movs	r0, #0
}
    7f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            r1 = X->p[i] >> (biL - t1);
    7f2e:	68a8      	ldr	r0, [r5, #8]
    7f30:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
    7f34:	f1c6 0320 	rsb	r3, r6, #32
            X->p[i] <<= t1;
    7f38:	fa01 f206 	lsl.w	r2, r1, r6
    7f3c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
            X->p[i] |= r0;
    7f40:	68a8      	ldr	r0, [r5, #8]
    7f42:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    7f46:	433a      	orrs	r2, r7
    7f48:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
        for( i = v0; i < X->n; i++ )
    7f4c:	3401      	adds	r4, #1
            r0 = r1;
    7f4e:	fa21 f703 	lsr.w	r7, r1, r3
        for( i = v0; i < X->n; i++ )
    7f52:	6869      	ldr	r1, [r5, #4]
    7f54:	42a1      	cmp	r1, r4
    7f56:	d8ea      	bhi.n	7f2e <mbedtls_mpi_shift_l+0x6e>
    ret = 0;
    7f58:	2000      	movs	r0, #0
    return( ret );
    7f5a:	e7e7      	b.n	7f2c <mbedtls_mpi_shift_l+0x6c>
    mbedtls_mpi_uint r0 = 0, r1;
    7f5c:	2700      	movs	r7, #0
    7f5e:	e7f8      	b.n	7f52 <mbedtls_mpi_shift_l+0x92>

00007f60 <mbedtls_mpi_shift_r>:
{
    7f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    7f62:	6843      	ldr	r3, [r0, #4]
    7f64:	ebb3 1f51 	cmp.w	r3, r1, lsr #5
    7f68:	d325      	bcc.n	7fb6 <mbedtls_mpi_shift_r+0x56>
    7f6a:	094c      	lsrs	r4, r1, #5
    7f6c:	f001 071f 	and.w	r7, r1, #31
    7f70:	42a3      	cmp	r3, r4
    7f72:	d01e      	beq.n	7fb2 <mbedtls_mpi_shift_r+0x52>
    if( v0 > 0 )
    7f74:	291f      	cmp	r1, #31
    7f76:	d836      	bhi.n	7fe6 <mbedtls_mpi_shift_r+0x86>
    if( v1 > 0 )
    7f78:	2f00      	cmp	r7, #0
    7f7a:	d038      	beq.n	7fee <mbedtls_mpi_shift_r+0x8e>
        for( i = X->n; i > 0; i-- )
    7f7c:	6842      	ldr	r2, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
    7f7e:	f04f 0c00 	mov.w	ip, #0
        for( i = X->n; i > 0; i-- )
    7f82:	b392      	cbz	r2, 7fea <mbedtls_mpi_shift_r+0x8a>
            r1 = X->p[i - 1] << (biL - v1);
    7f84:	6886      	ldr	r6, [r0, #8]
    7f86:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    7f8a:	3b01      	subs	r3, #1
    7f8c:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
    7f90:	f1c7 0120 	rsb	r1, r7, #32
            X->p[i - 1] >>= v1;
    7f94:	fa25 f407 	lsr.w	r4, r5, r7
    7f98:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
            X->p[i - 1] |= r0;
    7f9c:	6886      	ldr	r6, [r0, #8]
    7f9e:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
    7fa2:	ea44 040c 	orr.w	r4, r4, ip
    7fa6:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
        for( i = X->n; i > 0; i-- )
    7faa:	3a01      	subs	r2, #1
            r0 = r1;
    7fac:	fa05 fc01 	lsl.w	ip, r5, r1
    7fb0:	e7e7      	b.n	7f82 <mbedtls_mpi_shift_r+0x22>
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    7fb2:	2f00      	cmp	r7, #0
    7fb4:	d0de      	beq.n	7f74 <mbedtls_mpi_shift_r+0x14>
        return mbedtls_mpi_lset( X, 0 );
    7fb6:	2100      	movs	r1, #0
    7fb8:	f7ff fed3 	bl	7d62 <mbedtls_mpi_lset>
    7fbc:	e016      	b.n	7fec <mbedtls_mpi_shift_r+0x8c>
            X->p[i] = X->p[i + v0];
    7fbe:	6882      	ldr	r2, [r0, #8]
    7fc0:	1919      	adds	r1, r3, r4
    7fc2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    7fc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    7fca:	3301      	adds	r3, #1
    7fcc:	6842      	ldr	r2, [r0, #4]
    7fce:	1b12      	subs	r2, r2, r4
    7fd0:	429a      	cmp	r2, r3
    7fd2:	d8f4      	bhi.n	7fbe <mbedtls_mpi_shift_r+0x5e>
        for( ; i < X->n; i++ )
    7fd4:	6842      	ldr	r2, [r0, #4]
    7fd6:	429a      	cmp	r2, r3
    7fd8:	d9ce      	bls.n	7f78 <mbedtls_mpi_shift_r+0x18>
            X->p[i] = 0;
    7fda:	6882      	ldr	r2, [r0, #8]
    7fdc:	2100      	movs	r1, #0
    7fde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for( ; i < X->n; i++ )
    7fe2:	3301      	adds	r3, #1
    7fe4:	e7f6      	b.n	7fd4 <mbedtls_mpi_shift_r+0x74>
        for( i = 0; i < X->n - v0; i++ )
    7fe6:	2300      	movs	r3, #0
    7fe8:	e7f0      	b.n	7fcc <mbedtls_mpi_shift_r+0x6c>
    return( 0 );
    7fea:	2000      	movs	r0, #0
}
    7fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
    7fee:	2000      	movs	r0, #0
    7ff0:	e7fc      	b.n	7fec <mbedtls_mpi_shift_r+0x8c>

00007ff2 <mbedtls_mpi_cmp_abs>:
{
    7ff2:	b430      	push	{r4, r5}
    for( i = X->n; i > 0; i-- )
    7ff4:	6843      	ldr	r3, [r0, #4]
    7ff6:	b143      	cbz	r3, 800a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
        if( X->p[i - 1] != 0 )
    7ff8:	6884      	ldr	r4, [r0, #8]
    7ffa:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7ffe:	3a01      	subs	r2, #1
    8000:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    8004:	b90a      	cbnz	r2, 800a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
    for( i = X->n; i > 0; i-- )
    8006:	3b01      	subs	r3, #1
    8008:	e7f5      	b.n	7ff6 <mbedtls_mpi_cmp_abs+0x4>
    for( j = Y->n; j > 0; j-- )
    800a:	684a      	ldr	r2, [r1, #4]
    800c:	b142      	cbz	r2, 8020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
        if( Y->p[j - 1] != 0 )
    800e:	688d      	ldr	r5, [r1, #8]
    8010:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    8014:	3c01      	subs	r4, #1
    8016:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    801a:	b90c      	cbnz	r4, 8020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    for( j = Y->n; j > 0; j-- )
    801c:	3a01      	subs	r2, #1
    801e:	e7f5      	b.n	800c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    if( i == 0 && j == 0 )
    8020:	b903      	cbnz	r3, 8024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    8022:	b1c2      	cbz	r2, 8056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
    if( i > j ) return(  1 );
    8024:	4293      	cmp	r3, r2
    8026:	d818      	bhi.n	805a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    if( j > i ) return( -1 );
    8028:	d203      	bcs.n	8032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
    802a:	f04f 30ff 	mov.w	r0, #4294967295
    802e:	e015      	b.n	805c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    for( ; i > 0; i-- )
    8030:	3b01      	subs	r3, #1
    8032:	b173      	cbz	r3, 8052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    8034:	6884      	ldr	r4, [r0, #8]
    8036:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    803a:	3a01      	subs	r2, #1
    803c:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    8040:	688d      	ldr	r5, [r1, #8]
    8042:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    8046:	4294      	cmp	r4, r2
    8048:	d80a      	bhi.n	8060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    804a:	d2f1      	bcs.n	8030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    804c:	f04f 30ff 	mov.w	r0, #4294967295
    8050:	e004      	b.n	805c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    return( 0 );
    8052:	2000      	movs	r0, #0
    8054:	e002      	b.n	805c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
        return( 0 );
    8056:	2000      	movs	r0, #0
    8058:	e000      	b.n	805c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
    if( i > j ) return(  1 );
    805a:	2001      	movs	r0, #1
}
    805c:	bc30      	pop	{r4, r5}
    805e:	4770      	bx	lr
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    8060:	2001      	movs	r0, #1
    8062:	e7fb      	b.n	805c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>

00008064 <mbedtls_mpi_cmp_mpi>:
{
    8064:	b470      	push	{r4, r5, r6}
    8066:	4606      	mov	r6, r0
    for( i = X->n; i > 0; i-- )
    8068:	6843      	ldr	r3, [r0, #4]
    806a:	b143      	cbz	r3, 807e <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
    806c:	68b4      	ldr	r4, [r6, #8]
    806e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    8072:	3a01      	subs	r2, #1
    8074:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    8078:	b90a      	cbnz	r2, 807e <mbedtls_mpi_cmp_mpi+0x1a>
    for( i = X->n; i > 0; i-- )
    807a:	3b01      	subs	r3, #1
    807c:	e7f5      	b.n	806a <mbedtls_mpi_cmp_mpi+0x6>
    for( j = Y->n; j > 0; j-- )
    807e:	684a      	ldr	r2, [r1, #4]
    8080:	b142      	cbz	r2, 8094 <mbedtls_mpi_cmp_mpi+0x30>
        if( Y->p[j - 1] != 0 )
    8082:	688d      	ldr	r5, [r1, #8]
    8084:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    8088:	3c01      	subs	r4, #1
    808a:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    808e:	b90c      	cbnz	r4, 8094 <mbedtls_mpi_cmp_mpi+0x30>
    for( j = Y->n; j > 0; j-- )
    8090:	3a01      	subs	r2, #1
    8092:	e7f5      	b.n	8080 <mbedtls_mpi_cmp_mpi+0x1c>
    if( i == 0 && j == 0 )
    8094:	b903      	cbnz	r3, 8098 <mbedtls_mpi_cmp_mpi+0x34>
    8096:	b34a      	cbz	r2, 80ec <mbedtls_mpi_cmp_mpi+0x88>
    if( i > j ) return(  X->s );
    8098:	4293      	cmp	r3, r2
    809a:	d80f      	bhi.n	80bc <mbedtls_mpi_cmp_mpi+0x58>
    if( j > i ) return( -Y->s );
    809c:	4293      	cmp	r3, r2
    809e:	d310      	bcc.n	80c2 <mbedtls_mpi_cmp_mpi+0x5e>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    80a0:	6830      	ldr	r0, [r6, #0]
    80a2:	2800      	cmp	r0, #0
    80a4:	dd02      	ble.n	80ac <mbedtls_mpi_cmp_mpi+0x48>
    80a6:	680a      	ldr	r2, [r1, #0]
    80a8:	2a00      	cmp	r2, #0
    80aa:	db21      	blt.n	80f0 <mbedtls_mpi_cmp_mpi+0x8c>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    80ac:	680a      	ldr	r2, [r1, #0]
    80ae:	2a00      	cmp	r2, #0
    80b0:	dd0b      	ble.n	80ca <mbedtls_mpi_cmp_mpi+0x66>
    80b2:	2800      	cmp	r0, #0
    80b4:	da09      	bge.n	80ca <mbedtls_mpi_cmp_mpi+0x66>
    80b6:	f04f 30ff 	mov.w	r0, #4294967295
    80ba:	e000      	b.n	80be <mbedtls_mpi_cmp_mpi+0x5a>
    if( i > j ) return(  X->s );
    80bc:	6830      	ldr	r0, [r6, #0]
}
    80be:	bc70      	pop	{r4, r5, r6}
    80c0:	4770      	bx	lr
    if( j > i ) return( -Y->s );
    80c2:	6808      	ldr	r0, [r1, #0]
    80c4:	4240      	negs	r0, r0
    80c6:	e7fa      	b.n	80be <mbedtls_mpi_cmp_mpi+0x5a>
    for( ; i > 0; i-- )
    80c8:	3b01      	subs	r3, #1
    80ca:	b16b      	cbz	r3, 80e8 <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    80cc:	68b4      	ldr	r4, [r6, #8]
    80ce:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    80d2:	3a01      	subs	r2, #1
    80d4:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    80d8:	688d      	ldr	r5, [r1, #8]
    80da:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    80de:	4294      	cmp	r4, r2
    80e0:	d8ed      	bhi.n	80be <mbedtls_mpi_cmp_mpi+0x5a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    80e2:	d2f1      	bcs.n	80c8 <mbedtls_mpi_cmp_mpi+0x64>
    80e4:	4240      	negs	r0, r0
    80e6:	e7ea      	b.n	80be <mbedtls_mpi_cmp_mpi+0x5a>
    return( 0 );
    80e8:	2000      	movs	r0, #0
    80ea:	e7e8      	b.n	80be <mbedtls_mpi_cmp_mpi+0x5a>
        return( 0 );
    80ec:	2000      	movs	r0, #0
    80ee:	e7e6      	b.n	80be <mbedtls_mpi_cmp_mpi+0x5a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    80f0:	2001      	movs	r0, #1
    80f2:	e7e4      	b.n	80be <mbedtls_mpi_cmp_mpi+0x5a>

000080f4 <mbedtls_mpi_cmp_int>:
{
    80f4:	b500      	push	{lr}
    80f6:	b085      	sub	sp, #20
    *p  = ( z < 0 ) ? -z : z;
    80f8:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    80fc:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    8100:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    8102:	2900      	cmp	r1, #0
    8104:	db0b      	blt.n	811e <mbedtls_mpi_cmp_int+0x2a>
    8106:	2301      	movs	r3, #1
    8108:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    810a:	2301      	movs	r3, #1
    810c:	9302      	str	r3, [sp, #8]
    Y.p = p;
    810e:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    8112:	a901      	add	r1, sp, #4
    8114:	f7ff ffa6 	bl	8064 <mbedtls_mpi_cmp_mpi>
}
    8118:	b005      	add	sp, #20
    811a:	f85d fb04 	ldr.w	pc, [sp], #4
    Y.s = ( z < 0 ) ? -1 : 1;
    811e:	f04f 33ff 	mov.w	r3, #4294967295
    8122:	e7f1      	b.n	8108 <mbedtls_mpi_cmp_int+0x14>

00008124 <mbedtls_mpi_add_abs>:
{
    8124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8126:	4607      	mov	r7, r0
    8128:	4614      	mov	r4, r2
    if( X == B )
    812a:	4290      	cmp	r0, r2
    812c:	d014      	beq.n	8158 <mbedtls_mpi_add_abs+0x34>
    if( X != A )
    812e:	42b9      	cmp	r1, r7
    8130:	d005      	beq.n	813e <mbedtls_mpi_add_abs+0x1a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    8132:	4638      	mov	r0, r7
    8134:	f7ff fde3 	bl	7cfe <mbedtls_mpi_copy>
    8138:	4684      	mov	ip, r0
    813a:	2800      	cmp	r0, #0
    813c:	d143      	bne.n	81c6 <mbedtls_mpi_add_abs+0xa2>
    X->s = 1;
    813e:	2301      	movs	r3, #1
    8140:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
    8142:	6866      	ldr	r6, [r4, #4]
    8144:	b15e      	cbz	r6, 815e <mbedtls_mpi_add_abs+0x3a>
        if( B->p[j - 1] != 0 )
    8146:	68a1      	ldr	r1, [r4, #8]
    8148:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
    814c:	3b01      	subs	r3, #1
    814e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8152:	b923      	cbnz	r3, 815e <mbedtls_mpi_add_abs+0x3a>
    for( j = B->n; j > 0; j-- )
    8154:	3e01      	subs	r6, #1
    8156:	e7f5      	b.n	8144 <mbedtls_mpi_add_abs+0x20>
        const mbedtls_mpi *T = A; A = X; B = T;
    8158:	460c      	mov	r4, r1
    815a:	4601      	mov	r1, r0
    815c:	e7e7      	b.n	812e <mbedtls_mpi_add_abs+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    815e:	4631      	mov	r1, r6
    8160:	4638      	mov	r0, r7
    8162:	f7ff fda3 	bl	7cac <mbedtls_mpi_grow>
    8166:	4684      	mov	ip, r0
    8168:	bb68      	cbnz	r0, 81c6 <mbedtls_mpi_add_abs+0xa2>
    o = B->p; p = X->p; c = 0;
    816a:	68a0      	ldr	r0, [r4, #8]
    816c:	68bb      	ldr	r3, [r7, #8]
    816e:	2400      	movs	r4, #0
    for( i = 0; i < j; i++, o++, p++ )
    8170:	4625      	mov	r5, r4
    8172:	e00e      	b.n	8192 <mbedtls_mpi_add_abs+0x6e>
        tmp= *o;
    8174:	f850 1b04 	ldr.w	r1, [r0], #4
        *p +=  c; c  = ( *p <  c );
    8178:	681a      	ldr	r2, [r3, #0]
    817a:	18a4      	adds	r4, r4, r2
    817c:	bf2c      	ite	cs
    817e:	2201      	movcs	r2, #1
    8180:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
    8182:	440c      	add	r4, r1
    8184:	f843 4b04 	str.w	r4, [r3], #4
    8188:	428c      	cmp	r4, r1
    818a:	bf2c      	ite	cs
    818c:	4614      	movcs	r4, r2
    818e:	1c54      	addcc	r4, r2, #1
    for( i = 0; i < j; i++, o++, p++ )
    8190:	3501      	adds	r5, #1
    8192:	42b5      	cmp	r5, r6
    8194:	d3ee      	bcc.n	8174 <mbedtls_mpi_add_abs+0x50>
    8196:	e008      	b.n	81aa <mbedtls_mpi_add_abs+0x86>
        *p += c; c = ( *p < c ); i++; p++;
    8198:	681a      	ldr	r2, [r3, #0]
    819a:	4422      	add	r2, r4
    819c:	f843 2b04 	str.w	r2, [r3], #4
    81a0:	42a2      	cmp	r2, r4
    81a2:	bf2c      	ite	cs
    81a4:	2400      	movcs	r4, #0
    81a6:	2401      	movcc	r4, #1
    81a8:	3501      	adds	r5, #1
    while( c != 0 )
    81aa:	b164      	cbz	r4, 81c6 <mbedtls_mpi_add_abs+0xa2>
        if( i >= X->n )
    81ac:	687a      	ldr	r2, [r7, #4]
    81ae:	42aa      	cmp	r2, r5
    81b0:	d8f2      	bhi.n	8198 <mbedtls_mpi_add_abs+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    81b2:	1c69      	adds	r1, r5, #1
    81b4:	4638      	mov	r0, r7
    81b6:	f7ff fd79 	bl	7cac <mbedtls_mpi_grow>
    81ba:	4684      	mov	ip, r0
    81bc:	b918      	cbnz	r0, 81c6 <mbedtls_mpi_add_abs+0xa2>
            p = X->p + i;
    81be:	68bb      	ldr	r3, [r7, #8]
    81c0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    81c4:	e7e8      	b.n	8198 <mbedtls_mpi_add_abs+0x74>
}
    81c6:	4660      	mov	r0, ip
    81c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000081ca <mbedtls_mpi_sub_abs>:
{
    81ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    81cc:	b085      	sub	sp, #20
    81ce:	4605      	mov	r5, r0
    81d0:	460c      	mov	r4, r1
    81d2:	4616      	mov	r6, r2
    mbedtls_mpi_init( &TB );
    81d4:	a801      	add	r0, sp, #4
    81d6:	f7ff fd51 	bl	7c7c <mbedtls_mpi_init>
    if( X == B )
    81da:	42b5      	cmp	r5, r6
    81dc:	d014      	beq.n	8208 <mbedtls_mpi_sub_abs+0x3e>
    if( X != A )
    81de:	42a5      	cmp	r5, r4
    81e0:	d005      	beq.n	81ee <mbedtls_mpi_sub_abs+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    81e2:	4621      	mov	r1, r4
    81e4:	4628      	mov	r0, r5
    81e6:	f7ff fd8a 	bl	7cfe <mbedtls_mpi_copy>
    81ea:	4607      	mov	r7, r0
    81ec:	b9d8      	cbnz	r0, 8226 <mbedtls_mpi_sub_abs+0x5c>
    X->s = 1;
    81ee:	2301      	movs	r3, #1
    81f0:	602b      	str	r3, [r5, #0]
    for( n = B->n; n > 0; n-- )
    81f2:	6874      	ldr	r4, [r6, #4]
    81f4:	b184      	cbz	r4, 8218 <mbedtls_mpi_sub_abs+0x4e>
        if( B->p[n - 1] != 0 )
    81f6:	68b1      	ldr	r1, [r6, #8]
    81f8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    81fc:	3b01      	subs	r3, #1
    81fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8202:	b94b      	cbnz	r3, 8218 <mbedtls_mpi_sub_abs+0x4e>
    for( n = B->n; n > 0; n-- )
    8204:	3c01      	subs	r4, #1
    8206:	e7f5      	b.n	81f4 <mbedtls_mpi_sub_abs+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
    8208:	4631      	mov	r1, r6
    820a:	a801      	add	r0, sp, #4
    820c:	f7ff fd77 	bl	7cfe <mbedtls_mpi_copy>
    8210:	4607      	mov	r7, r0
    8212:	b940      	cbnz	r0, 8226 <mbedtls_mpi_sub_abs+0x5c>
        B = &TB;
    8214:	ae01      	add	r6, sp, #4
    8216:	e7e2      	b.n	81de <mbedtls_mpi_sub_abs+0x14>
    carry = mpi_sub_hlp( n, X->p, B->p );
    8218:	68b2      	ldr	r2, [r6, #8]
    821a:	68a9      	ldr	r1, [r5, #8]
    821c:	4620      	mov	r0, r4
    821e:	f7ff fac9 	bl	77b4 <mpi_sub_hlp>
    if( carry != 0 )
    8222:	b950      	cbnz	r0, 823a <mbedtls_mpi_sub_abs+0x70>
    ret = 0;
    8224:	2700      	movs	r7, #0
    mbedtls_mpi_free( &TB );
    8226:	a801      	add	r0, sp, #4
    8228:	f7ff fd2e 	bl	7c88 <mbedtls_mpi_free>
}
    822c:	4638      	mov	r0, r7
    822e:	b005      	add	sp, #20
    8230:	bdf0      	pop	{r4, r5, r6, r7, pc}
            --X->p[n];
    8232:	3b01      	subs	r3, #1
    8234:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for( ; n < X->n && X->p[n] == 0; n++ )
    8238:	3401      	adds	r4, #1
    823a:	6869      	ldr	r1, [r5, #4]
    823c:	42a1      	cmp	r1, r4
    823e:	d904      	bls.n	824a <mbedtls_mpi_sub_abs+0x80>
    8240:	68aa      	ldr	r2, [r5, #8]
    8242:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    8246:	2b00      	cmp	r3, #0
    8248:	d0f3      	beq.n	8232 <mbedtls_mpi_sub_abs+0x68>
        if( n == X->n )
    824a:	42a1      	cmp	r1, r4
    824c:	d007      	beq.n	825e <mbedtls_mpi_sub_abs+0x94>
        --X->p[n];
    824e:	68aa      	ldr	r2, [r5, #8]
    8250:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    8254:	3b01      	subs	r3, #1
    8256:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    ret = 0;
    825a:	2700      	movs	r7, #0
    825c:	e7e3      	b.n	8226 <mbedtls_mpi_sub_abs+0x5c>
            return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    825e:	f06f 0709 	mvn.w	r7, #9
    8262:	e7e3      	b.n	822c <mbedtls_mpi_sub_abs+0x62>

00008264 <mbedtls_mpi_add_mpi>:
{
    8264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8266:	4606      	mov	r6, r0
    8268:	460c      	mov	r4, r1
    826a:	4615      	mov	r5, r2
    s = A->s;
    826c:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s < 0 )
    826e:	6813      	ldr	r3, [r2, #0]
    8270:	fb07 f303 	mul.w	r3, r7, r3
    8274:	2b00      	cmp	r3, #0
    8276:	da16      	bge.n	82a6 <mbedtls_mpi_add_mpi+0x42>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    8278:	4611      	mov	r1, r2
    827a:	4620      	mov	r0, r4
    827c:	f7ff feb9 	bl	7ff2 <mbedtls_mpi_cmp_abs>
    8280:	2800      	cmp	r0, #0
    8282:	db07      	blt.n	8294 <mbedtls_mpi_add_mpi+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    8284:	462a      	mov	r2, r5
    8286:	4621      	mov	r1, r4
    8288:	4630      	mov	r0, r6
    828a:	f7ff ff9e 	bl	81ca <mbedtls_mpi_sub_abs>
    828e:	b970      	cbnz	r0, 82ae <mbedtls_mpi_add_mpi+0x4a>
            X->s =  s;
    8290:	6037      	str	r7, [r6, #0]
    8292:	e00c      	b.n	82ae <mbedtls_mpi_add_mpi+0x4a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    8294:	4622      	mov	r2, r4
    8296:	4629      	mov	r1, r5
    8298:	4630      	mov	r0, r6
    829a:	f7ff ff96 	bl	81ca <mbedtls_mpi_sub_abs>
    829e:	b930      	cbnz	r0, 82ae <mbedtls_mpi_add_mpi+0x4a>
            X->s = -s;
    82a0:	427f      	negs	r7, r7
    82a2:	6037      	str	r7, [r6, #0]
    82a4:	e003      	b.n	82ae <mbedtls_mpi_add_mpi+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    82a6:	f7ff ff3d 	bl	8124 <mbedtls_mpi_add_abs>
    82aa:	b900      	cbnz	r0, 82ae <mbedtls_mpi_add_mpi+0x4a>
        X->s = s;
    82ac:	6037      	str	r7, [r6, #0]
}
    82ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000082b0 <mbedtls_mpi_sub_mpi>:
{
    82b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82b2:	4606      	mov	r6, r0
    82b4:	460c      	mov	r4, r1
    82b6:	4615      	mov	r5, r2
    s = A->s;
    82b8:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s > 0 )
    82ba:	6813      	ldr	r3, [r2, #0]
    82bc:	fb07 f303 	mul.w	r3, r7, r3
    82c0:	2b00      	cmp	r3, #0
    82c2:	dd17      	ble.n	82f4 <mbedtls_mpi_sub_mpi+0x44>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    82c4:	4611      	mov	r1, r2
    82c6:	4620      	mov	r0, r4
    82c8:	f7ff fe93 	bl	7ff2 <mbedtls_mpi_cmp_abs>
    82cc:	2800      	cmp	r0, #0
    82ce:	db07      	blt.n	82e0 <mbedtls_mpi_sub_mpi+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    82d0:	462a      	mov	r2, r5
    82d2:	4621      	mov	r1, r4
    82d4:	4630      	mov	r0, r6
    82d6:	f7ff ff78 	bl	81ca <mbedtls_mpi_sub_abs>
    82da:	b900      	cbnz	r0, 82de <mbedtls_mpi_sub_mpi+0x2e>
            X->s =  s;
    82dc:	6037      	str	r7, [r6, #0]
}
    82de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    82e0:	4622      	mov	r2, r4
    82e2:	4629      	mov	r1, r5
    82e4:	4630      	mov	r0, r6
    82e6:	f7ff ff70 	bl	81ca <mbedtls_mpi_sub_abs>
    82ea:	2800      	cmp	r0, #0
    82ec:	d1f7      	bne.n	82de <mbedtls_mpi_sub_mpi+0x2e>
            X->s = -s;
    82ee:	427f      	negs	r7, r7
    82f0:	6037      	str	r7, [r6, #0]
    82f2:	e7f4      	b.n	82de <mbedtls_mpi_sub_mpi+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    82f4:	f7ff ff16 	bl	8124 <mbedtls_mpi_add_abs>
    82f8:	2800      	cmp	r0, #0
    82fa:	d1f0      	bne.n	82de <mbedtls_mpi_sub_mpi+0x2e>
        X->s = s;
    82fc:	6037      	str	r7, [r6, #0]
    return( ret );
    82fe:	e7ee      	b.n	82de <mbedtls_mpi_sub_mpi+0x2e>

00008300 <mbedtls_mpi_mul_mpi>:
{
    8300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8304:	b087      	sub	sp, #28
    8306:	4680      	mov	r8, r0
    8308:	460e      	mov	r6, r1
    830a:	4617      	mov	r7, r2
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
    830c:	a803      	add	r0, sp, #12
    830e:	f7ff fcb5 	bl	7c7c <mbedtls_mpi_init>
    8312:	4668      	mov	r0, sp
    8314:	f7ff fcb2 	bl	7c7c <mbedtls_mpi_init>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    8318:	45b0      	cmp	r8, r6
    831a:	d00c      	beq.n	8336 <mbedtls_mpi_mul_mpi+0x36>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    831c:	45b8      	cmp	r8, r7
    831e:	d012      	beq.n	8346 <mbedtls_mpi_mul_mpi+0x46>
    for( i = A->n; i > 0; i-- )
    8320:	6875      	ldr	r5, [r6, #4]
    8322:	b1c5      	cbz	r5, 8356 <mbedtls_mpi_mul_mpi+0x56>
        if( A->p[i - 1] != 0 )
    8324:	68b2      	ldr	r2, [r6, #8]
    8326:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    832a:	3b01      	subs	r3, #1
    832c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8330:	b98b      	cbnz	r3, 8356 <mbedtls_mpi_mul_mpi+0x56>
    for( i = A->n; i > 0; i-- )
    8332:	3d01      	subs	r5, #1
    8334:	e7f5      	b.n	8322 <mbedtls_mpi_mul_mpi+0x22>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    8336:	4631      	mov	r1, r6
    8338:	a803      	add	r0, sp, #12
    833a:	f7ff fce0 	bl	7cfe <mbedtls_mpi_copy>
    833e:	4681      	mov	r9, r0
    8340:	b9d0      	cbnz	r0, 8378 <mbedtls_mpi_mul_mpi+0x78>
    8342:	ae03      	add	r6, sp, #12
    8344:	e7ea      	b.n	831c <mbedtls_mpi_mul_mpi+0x1c>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    8346:	4639      	mov	r1, r7
    8348:	4668      	mov	r0, sp
    834a:	f7ff fcd8 	bl	7cfe <mbedtls_mpi_copy>
    834e:	4681      	mov	r9, r0
    8350:	b990      	cbnz	r0, 8378 <mbedtls_mpi_mul_mpi+0x78>
    8352:	466f      	mov	r7, sp
    8354:	e7e4      	b.n	8320 <mbedtls_mpi_mul_mpi+0x20>
    for( j = B->n; j > 0; j-- )
    8356:	687c      	ldr	r4, [r7, #4]
    8358:	b144      	cbz	r4, 836c <mbedtls_mpi_mul_mpi+0x6c>
        if( B->p[j - 1] != 0 )
    835a:	68ba      	ldr	r2, [r7, #8]
    835c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    8360:	3b01      	subs	r3, #1
    8362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8366:	b90b      	cbnz	r3, 836c <mbedtls_mpi_mul_mpi+0x6c>
    for( j = B->n; j > 0; j-- )
    8368:	3c01      	subs	r4, #1
    836a:	e7f5      	b.n	8358 <mbedtls_mpi_mul_mpi+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    836c:	1929      	adds	r1, r5, r4
    836e:	4640      	mov	r0, r8
    8370:	f7ff fc9c 	bl	7cac <mbedtls_mpi_grow>
    8374:	4681      	mov	r9, r0
    8376:	b148      	cbz	r0, 838c <mbedtls_mpi_mul_mpi+0x8c>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
    8378:	4668      	mov	r0, sp
    837a:	f7ff fc85 	bl	7c88 <mbedtls_mpi_free>
    837e:	a803      	add	r0, sp, #12
    8380:	f7ff fc82 	bl	7c88 <mbedtls_mpi_free>
}
    8384:	4648      	mov	r0, r9
    8386:	b007      	add	sp, #28
    8388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    838c:	2100      	movs	r1, #0
    838e:	4640      	mov	r0, r8
    8390:	f7ff fce7 	bl	7d62 <mbedtls_mpi_lset>
    8394:	4681      	mov	r9, r0
    8396:	2800      	cmp	r0, #0
    8398:	d1ee      	bne.n	8378 <mbedtls_mpi_mul_mpi+0x78>
    for( ; j > 0; j-- )
    839a:	b17c      	cbz	r4, 83bc <mbedtls_mpi_mul_mpi+0xbc>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
    839c:	f8d8 1008 	ldr.w	r1, [r8, #8]
    83a0:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    83a4:	3a01      	subs	r2, #1
    83a6:	68bb      	ldr	r3, [r7, #8]
    83a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    83ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    83b0:	68b1      	ldr	r1, [r6, #8]
    83b2:	4628      	mov	r0, r5
    83b4:	f7ff fa18 	bl	77e8 <mpi_mul_hlp>
    for( ; j > 0; j-- )
    83b8:	3c01      	subs	r4, #1
    83ba:	e7ee      	b.n	839a <mbedtls_mpi_mul_mpi+0x9a>
    X->s = A->s * B->s;
    83bc:	6832      	ldr	r2, [r6, #0]
    83be:	683b      	ldr	r3, [r7, #0]
    83c0:	fb03 f302 	mul.w	r3, r3, r2
    83c4:	f8c8 3000 	str.w	r3, [r8]
    83c8:	e7d6      	b.n	8378 <mbedtls_mpi_mul_mpi+0x78>

000083ca <mbedtls_mpi_mul_int>:
{
    83ca:	b500      	push	{lr}
    83cc:	b085      	sub	sp, #20
    _B.s = 1;
    83ce:	2301      	movs	r3, #1
    83d0:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    83d2:	9302      	str	r3, [sp, #8]
    _B.p = p;
    83d4:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;
    83d8:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    83da:	aa01      	add	r2, sp, #4
    83dc:	f7ff ff90 	bl	8300 <mbedtls_mpi_mul_mpi>
}
    83e0:	b005      	add	sp, #20
    83e2:	f85d fb04 	ldr.w	pc, [sp], #4

000083e6 <mbedtls_mpi_div_mpi>:
{
    83e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83ea:	b097      	sub	sp, #92	; 0x5c
    83ec:	4606      	mov	r6, r0
    83ee:	460f      	mov	r7, r1
    83f0:	4615      	mov	r5, r2
    83f2:	461c      	mov	r4, r3
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    83f4:	2100      	movs	r1, #0
    83f6:	4618      	mov	r0, r3
    83f8:	f7ff fe7c 	bl	80f4 <mbedtls_mpi_cmp_int>
    83fc:	2800      	cmp	r0, #0
    83fe:	f000 81b7 	beq.w	8770 <mbedtls_mpi_div_mpi+0x38a>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    8402:	a813      	add	r0, sp, #76	; 0x4c
    8404:	f7ff fc3a 	bl	7c7c <mbedtls_mpi_init>
    8408:	a810      	add	r0, sp, #64	; 0x40
    840a:	f7ff fc37 	bl	7c7c <mbedtls_mpi_init>
    840e:	a80d      	add	r0, sp, #52	; 0x34
    8410:	f7ff fc34 	bl	7c7c <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
    8414:	a80a      	add	r0, sp, #40	; 0x28
    8416:	f7ff fc31 	bl	7c7c <mbedtls_mpi_init>
    841a:	a807      	add	r0, sp, #28
    841c:	f7ff fc2e 	bl	7c7c <mbedtls_mpi_init>
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    8420:	4621      	mov	r1, r4
    8422:	4628      	mov	r0, r5
    8424:	f7ff fde5 	bl	7ff2 <mbedtls_mpi_cmp_abs>
    8428:	2800      	cmp	r0, #0
    842a:	da10      	bge.n	844e <mbedtls_mpi_div_mpi+0x68>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    842c:	b12e      	cbz	r6, 843a <mbedtls_mpi_div_mpi+0x54>
    842e:	2100      	movs	r1, #0
    8430:	4630      	mov	r0, r6
    8432:	f7ff fc96 	bl	7d62 <mbedtls_mpi_lset>
    8436:	4680      	mov	r8, r0
    8438:	b978      	cbnz	r0, 845a <mbedtls_mpi_div_mpi+0x74>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    843a:	b12f      	cbz	r7, 8448 <mbedtls_mpi_div_mpi+0x62>
    843c:	4629      	mov	r1, r5
    843e:	4638      	mov	r0, r7
    8440:	f7ff fc5d 	bl	7cfe <mbedtls_mpi_copy>
    8444:	4680      	mov	r8, r0
    8446:	b940      	cbnz	r0, 845a <mbedtls_mpi_div_mpi+0x74>
        return( 0 );
    8448:	f04f 0800 	mov.w	r8, #0
    844c:	e014      	b.n	8478 <mbedtls_mpi_div_mpi+0x92>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    844e:	4629      	mov	r1, r5
    8450:	a813      	add	r0, sp, #76	; 0x4c
    8452:	f7ff fc54 	bl	7cfe <mbedtls_mpi_copy>
    8456:	4680      	mov	r8, r0
    8458:	b190      	cbz	r0, 8480 <mbedtls_mpi_div_mpi+0x9a>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    845a:	a813      	add	r0, sp, #76	; 0x4c
    845c:	f7ff fc14 	bl	7c88 <mbedtls_mpi_free>
    8460:	a810      	add	r0, sp, #64	; 0x40
    8462:	f7ff fc11 	bl	7c88 <mbedtls_mpi_free>
    8466:	a80d      	add	r0, sp, #52	; 0x34
    8468:	f7ff fc0e 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
    846c:	a80a      	add	r0, sp, #40	; 0x28
    846e:	f7ff fc0b 	bl	7c88 <mbedtls_mpi_free>
    8472:	a807      	add	r0, sp, #28
    8474:	f7ff fc08 	bl	7c88 <mbedtls_mpi_free>
}
    8478:	4640      	mov	r0, r8
    847a:	b017      	add	sp, #92	; 0x5c
    847c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    8480:	4621      	mov	r1, r4
    8482:	a810      	add	r0, sp, #64	; 0x40
    8484:	f7ff fc3b 	bl	7cfe <mbedtls_mpi_copy>
    8488:	4680      	mov	r8, r0
    848a:	2800      	cmp	r0, #0
    848c:	d1e5      	bne.n	845a <mbedtls_mpi_div_mpi+0x74>
    X.s = Y.s = 1;
    848e:	2301      	movs	r3, #1
    8490:	9310      	str	r3, [sp, #64]	; 0x40
    8492:	9313      	str	r3, [sp, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    8494:	6869      	ldr	r1, [r5, #4]
    8496:	3102      	adds	r1, #2
    8498:	a80d      	add	r0, sp, #52	; 0x34
    849a:	f7ff fc07 	bl	7cac <mbedtls_mpi_grow>
    849e:	4680      	mov	r8, r0
    84a0:	2800      	cmp	r0, #0
    84a2:	d1da      	bne.n	845a <mbedtls_mpi_div_mpi+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    84a4:	2100      	movs	r1, #0
    84a6:	a80d      	add	r0, sp, #52	; 0x34
    84a8:	f7ff fc5b 	bl	7d62 <mbedtls_mpi_lset>
    84ac:	4680      	mov	r8, r0
    84ae:	2800      	cmp	r0, #0
    84b0:	d1d3      	bne.n	845a <mbedtls_mpi_div_mpi+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
    84b2:	2102      	movs	r1, #2
    84b4:	a80a      	add	r0, sp, #40	; 0x28
    84b6:	f7ff fbf9 	bl	7cac <mbedtls_mpi_grow>
    84ba:	4680      	mov	r8, r0
    84bc:	2800      	cmp	r0, #0
    84be:	d1cc      	bne.n	845a <mbedtls_mpi_div_mpi+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
    84c0:	2103      	movs	r1, #3
    84c2:	a807      	add	r0, sp, #28
    84c4:	f7ff fbf2 	bl	7cac <mbedtls_mpi_grow>
    84c8:	4680      	mov	r8, r0
    84ca:	2800      	cmp	r0, #0
    84cc:	d1c5      	bne.n	845a <mbedtls_mpi_div_mpi+0x74>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    84ce:	a810      	add	r0, sp, #64	; 0x40
    84d0:	f7ff fc76 	bl	7dc0 <mbedtls_mpi_bitlen>
    84d4:	f000 031f 	and.w	r3, r0, #31
    if( k < biL - 1 )
    84d8:	2b1e      	cmp	r3, #30
    84da:	d811      	bhi.n	8500 <mbedtls_mpi_div_mpi+0x11a>
        k = biL - 1 - k;
    84dc:	f1c3 031f 	rsb	r3, r3, #31
    84e0:	9300      	str	r3, [sp, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    84e2:	4699      	mov	r9, r3
    84e4:	4619      	mov	r1, r3
    84e6:	a813      	add	r0, sp, #76	; 0x4c
    84e8:	f7ff fcea 	bl	7ec0 <mbedtls_mpi_shift_l>
    84ec:	4680      	mov	r8, r0
    84ee:	2800      	cmp	r0, #0
    84f0:	d1b3      	bne.n	845a <mbedtls_mpi_div_mpi+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    84f2:	4649      	mov	r1, r9
    84f4:	a810      	add	r0, sp, #64	; 0x40
    84f6:	f7ff fce3 	bl	7ec0 <mbedtls_mpi_shift_l>
    84fa:	4680      	mov	r8, r0
    84fc:	b110      	cbz	r0, 8504 <mbedtls_mpi_div_mpi+0x11e>
    84fe:	e7ac      	b.n	845a <mbedtls_mpi_div_mpi+0x74>
    else k = 0;
    8500:	2300      	movs	r3, #0
    8502:	9300      	str	r3, [sp, #0]
    n = X.n - 1;
    8504:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8506:	f103 3bff 	add.w	fp, r3, #4294967295
    t = Y.n - 1;
    850a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    850c:	9201      	str	r2, [sp, #4]
    850e:	1e51      	subs	r1, r2, #1
    8510:	9102      	str	r1, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    8512:	eba3 0902 	sub.w	r9, r3, r2
    8516:	ea4f 1a49 	mov.w	sl, r9, lsl #5
    851a:	4651      	mov	r1, sl
    851c:	a810      	add	r0, sp, #64	; 0x40
    851e:	f7ff fccf 	bl	7ec0 <mbedtls_mpi_shift_l>
    8522:	4680      	mov	r8, r0
    8524:	2800      	cmp	r0, #0
    8526:	d198      	bne.n	845a <mbedtls_mpi_div_mpi+0x74>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    8528:	a910      	add	r1, sp, #64	; 0x40
    852a:	a813      	add	r0, sp, #76	; 0x4c
    852c:	f7ff fd9a 	bl	8064 <mbedtls_mpi_cmp_mpi>
    8530:	2800      	cmp	r0, #0
    8532:	db0e      	blt.n	8552 <mbedtls_mpi_div_mpi+0x16c>
        Z.p[n - t]++;
    8534:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8536:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
    853a:	3301      	adds	r3, #1
    853c:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    8540:	aa10      	add	r2, sp, #64	; 0x40
    8542:	a913      	add	r1, sp, #76	; 0x4c
    8544:	4608      	mov	r0, r1
    8546:	f7ff feb3 	bl	82b0 <mbedtls_mpi_sub_mpi>
    854a:	4680      	mov	r8, r0
    854c:	2800      	cmp	r0, #0
    854e:	d0eb      	beq.n	8528 <mbedtls_mpi_div_mpi+0x142>
    8550:	e783      	b.n	845a <mbedtls_mpi_div_mpi+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    8552:	4651      	mov	r1, sl
    8554:	a810      	add	r0, sp, #64	; 0x40
    8556:	f7ff fd03 	bl	7f60 <mbedtls_mpi_shift_r>
    855a:	4680      	mov	r8, r0
    855c:	2800      	cmp	r0, #0
    855e:	f47f af7c 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
    8562:	9603      	str	r6, [sp, #12]
    8564:	9704      	str	r7, [sp, #16]
    8566:	9f02      	ldr	r7, [sp, #8]
    8568:	9502      	str	r5, [sp, #8]
    856a:	465d      	mov	r5, fp
    856c:	9405      	str	r4, [sp, #20]
    856e:	9c01      	ldr	r4, [sp, #4]
    for( i = n; i > t ; i-- )
    8570:	42bd      	cmp	r5, r7
    8572:	f240 80cc 	bls.w	870e <mbedtls_mpi_div_mpi+0x328>
        if( X.p[i] >= Y.p[t] )
    8576:	9915      	ldr	r1, [sp, #84]	; 0x54
    8578:	ea4f 0985 	mov.w	r9, r5, lsl #2
    857c:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
    8580:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    8584:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8586:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    858a:	4290      	cmp	r0, r2
    858c:	d317      	bcc.n	85be <mbedtls_mpi_div_mpi+0x1d8>
            Z.p[i - t - 1] = ~0;
    858e:	1beb      	subs	r3, r5, r7
    8590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8594:	3b01      	subs	r3, #1
    8596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8598:	f04f 31ff 	mov.w	r1, #4294967295
    859c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Z.p[i - t - 1]++;
    85a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    85a2:	1beb      	subs	r3, r5, r7
    85a4:	9301      	str	r3, [sp, #4]
    85a6:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
    85aa:	f10b 3bff 	add.w	fp, fp, #4294967295
    85ae:	ea4f 068b 	mov.w	r6, fp, lsl #2
    85b2:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
    85b6:	3301      	adds	r3, #1
    85b8:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
    85bc:	e047      	b.n	864e <mbedtls_mpi_div_mpi+0x268>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    85be:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    85c2:	eb05 0c03 	add.w	ip, r5, r3
    85c6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    85ca:	1bee      	subs	r6, r5, r7
    85cc:	441e      	add	r6, r3
    85ce:	2300      	movs	r3, #0
    85d0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
    85d4:	f7ff faa5 	bl	7b22 <mbedtls_int_div_int>
    85d8:	f848 0026 	str.w	r0, [r8, r6, lsl #2]
    85dc:	e7e0      	b.n	85a0 <mbedtls_mpi_div_mpi+0x1ba>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    85de:	463a      	mov	r2, r7
    85e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85e2:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    85e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    85e6:	f853 200a 	ldr.w	r2, [r3, sl]
    85ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85ec:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    85ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    85f0:	599a      	ldr	r2, [r3, r6]
    85f2:	a90a      	add	r1, sp, #40	; 0x28
    85f4:	4608      	mov	r0, r1
    85f6:	f7ff fee8 	bl	83ca <mbedtls_mpi_mul_int>
    85fa:	4680      	mov	r8, r0
    85fc:	2800      	cmp	r0, #0
    85fe:	f47f af2c 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
    8602:	2100      	movs	r1, #0
    8604:	a807      	add	r0, sp, #28
    8606:	f7ff fbac 	bl	7d62 <mbedtls_mpi_lset>
    860a:	4680      	mov	r8, r0
    860c:	2800      	cmp	r0, #0
    860e:	f47f af24 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    8612:	2d01      	cmp	r5, #1
    8614:	d930      	bls.n	8678 <mbedtls_mpi_div_mpi+0x292>
    8616:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    861a:	3b02      	subs	r3, #2
    861c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    861e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8622:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8624:	601a      	str	r2, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    8626:	b34d      	cbz	r5, 867c <mbedtls_mpi_div_mpi+0x296>
    8628:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    862c:	3b01      	subs	r3, #1
    862e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8630:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8634:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8636:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
    8638:	9b15      	ldr	r3, [sp, #84]	; 0x54
    863a:	f853 2009 	ldr.w	r2, [r3, r9]
    863e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8640:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    8642:	a907      	add	r1, sp, #28
    8644:	a80a      	add	r0, sp, #40	; 0x28
    8646:	f7ff fd0d 	bl	8064 <mbedtls_mpi_cmp_mpi>
    864a:	2800      	cmp	r0, #0
    864c:	dd18      	ble.n	8680 <mbedtls_mpi_div_mpi+0x29a>
            Z.p[i - t - 1]--;
    864e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8650:	5993      	ldr	r3, [r2, r6]
    8652:	3b01      	subs	r3, #1
    8654:	5193      	str	r3, [r2, r6]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    8656:	2100      	movs	r1, #0
    8658:	a80a      	add	r0, sp, #40	; 0x28
    865a:	f7ff fb82 	bl	7d62 <mbedtls_mpi_lset>
    865e:	4680      	mov	r8, r0
    8660:	2800      	cmp	r0, #0
    8662:	f47f aefa 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    8666:	2f00      	cmp	r7, #0
    8668:	d0b9      	beq.n	85de <mbedtls_mpi_div_mpi+0x1f8>
    866a:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    866e:	3b02      	subs	r3, #2
    8670:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8672:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8676:	e7b3      	b.n	85e0 <mbedtls_mpi_div_mpi+0x1fa>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    8678:	2200      	movs	r2, #0
    867a:	e7d2      	b.n	8622 <mbedtls_mpi_div_mpi+0x23c>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    867c:	462a      	mov	r2, r5
    867e:	e7d9      	b.n	8634 <mbedtls_mpi_div_mpi+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    8680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8682:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    8686:	a910      	add	r1, sp, #64	; 0x40
    8688:	a80a      	add	r0, sp, #40	; 0x28
    868a:	f7ff fe9e 	bl	83ca <mbedtls_mpi_mul_int>
    868e:	4680      	mov	r8, r0
    8690:	2800      	cmp	r0, #0
    8692:	f47f aee2 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    8696:	9b01      	ldr	r3, [sp, #4]
    8698:	1e5e      	subs	r6, r3, #1
    869a:	0176      	lsls	r6, r6, #5
    869c:	4631      	mov	r1, r6
    869e:	a80a      	add	r0, sp, #40	; 0x28
    86a0:	f7ff fc0e 	bl	7ec0 <mbedtls_mpi_shift_l>
    86a4:	4680      	mov	r8, r0
    86a6:	2800      	cmp	r0, #0
    86a8:	f47f aed7 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    86ac:	aa0a      	add	r2, sp, #40	; 0x28
    86ae:	a913      	add	r1, sp, #76	; 0x4c
    86b0:	4608      	mov	r0, r1
    86b2:	f7ff fdfd 	bl	82b0 <mbedtls_mpi_sub_mpi>
    86b6:	4680      	mov	r8, r0
    86b8:	2800      	cmp	r0, #0
    86ba:	f47f aece 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    86be:	2100      	movs	r1, #0
    86c0:	a813      	add	r0, sp, #76	; 0x4c
    86c2:	f7ff fd17 	bl	80f4 <mbedtls_mpi_cmp_int>
    86c6:	2800      	cmp	r0, #0
    86c8:	db01      	blt.n	86ce <mbedtls_mpi_div_mpi+0x2e8>
    for( i = n; i > t ; i-- )
    86ca:	3d01      	subs	r5, #1
    86cc:	e750      	b.n	8570 <mbedtls_mpi_div_mpi+0x18a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    86ce:	a910      	add	r1, sp, #64	; 0x40
    86d0:	a80a      	add	r0, sp, #40	; 0x28
    86d2:	f7ff fb14 	bl	7cfe <mbedtls_mpi_copy>
    86d6:	4680      	mov	r8, r0
    86d8:	2800      	cmp	r0, #0
    86da:	f47f aebe 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    86de:	4631      	mov	r1, r6
    86e0:	a80a      	add	r0, sp, #40	; 0x28
    86e2:	f7ff fbed 	bl	7ec0 <mbedtls_mpi_shift_l>
    86e6:	4680      	mov	r8, r0
    86e8:	2800      	cmp	r0, #0
    86ea:	f47f aeb6 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    86ee:	aa0a      	add	r2, sp, #40	; 0x28
    86f0:	a913      	add	r1, sp, #76	; 0x4c
    86f2:	4608      	mov	r0, r1
    86f4:	f7ff fdb6 	bl	8264 <mbedtls_mpi_add_mpi>
    86f8:	4680      	mov	r8, r0
    86fa:	2800      	cmp	r0, #0
    86fc:	f47f aead 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
            Z.p[i - t - 1]--;
    8700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8702:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
    8706:	3b01      	subs	r3, #1
    8708:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
    870c:	e7dd      	b.n	86ca <mbedtls_mpi_div_mpi+0x2e4>
    870e:	9e03      	ldr	r6, [sp, #12]
    8710:	9f04      	ldr	r7, [sp, #16]
    8712:	9d02      	ldr	r5, [sp, #8]
    8714:	9c05      	ldr	r4, [sp, #20]
    if( Q != NULL )
    8716:	b166      	cbz	r6, 8732 <mbedtls_mpi_div_mpi+0x34c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    8718:	a90d      	add	r1, sp, #52	; 0x34
    871a:	4630      	mov	r0, r6
    871c:	f7ff faef 	bl	7cfe <mbedtls_mpi_copy>
    8720:	4680      	mov	r8, r0
    8722:	2800      	cmp	r0, #0
    8724:	f47f ae99 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
        Q->s = A->s * B->s;
    8728:	682a      	ldr	r2, [r5, #0]
    872a:	6823      	ldr	r3, [r4, #0]
    872c:	fb03 f302 	mul.w	r3, r3, r2
    8730:	6033      	str	r3, [r6, #0]
    if( R != NULL )
    8732:	2f00      	cmp	r7, #0
    8734:	f43f ae91 	beq.w	845a <mbedtls_mpi_div_mpi+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    8738:	9900      	ldr	r1, [sp, #0]
    873a:	a813      	add	r0, sp, #76	; 0x4c
    873c:	f7ff fc10 	bl	7f60 <mbedtls_mpi_shift_r>
    8740:	4680      	mov	r8, r0
    8742:	2800      	cmp	r0, #0
    8744:	f47f ae89 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
        X.s = A->s;
    8748:	682b      	ldr	r3, [r5, #0]
    874a:	9313      	str	r3, [sp, #76]	; 0x4c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    874c:	a913      	add	r1, sp, #76	; 0x4c
    874e:	4638      	mov	r0, r7
    8750:	f7ff fad5 	bl	7cfe <mbedtls_mpi_copy>
    8754:	4680      	mov	r8, r0
    8756:	2800      	cmp	r0, #0
    8758:	f47f ae7f 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    875c:	2100      	movs	r1, #0
    875e:	4638      	mov	r0, r7
    8760:	f7ff fcc8 	bl	80f4 <mbedtls_mpi_cmp_int>
    8764:	2800      	cmp	r0, #0
    8766:	f47f ae78 	bne.w	845a <mbedtls_mpi_div_mpi+0x74>
            R->s = 1;
    876a:	2301      	movs	r3, #1
    876c:	603b      	str	r3, [r7, #0]
    876e:	e674      	b.n	845a <mbedtls_mpi_div_mpi+0x74>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    8770:	f06f 080b 	mvn.w	r8, #11
    8774:	e680      	b.n	8478 <mbedtls_mpi_div_mpi+0x92>

00008776 <mbedtls_mpi_mod_mpi>:
{
    8776:	b570      	push	{r4, r5, r6, lr}
    8778:	4604      	mov	r4, r0
    877a:	460e      	mov	r6, r1
    877c:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    877e:	2100      	movs	r1, #0
    8780:	4610      	mov	r0, r2
    8782:	f7ff fcb7 	bl	80f4 <mbedtls_mpi_cmp_int>
    8786:	2800      	cmp	r0, #0
    8788:	db26      	blt.n	87d8 <mbedtls_mpi_mod_mpi+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    878a:	462b      	mov	r3, r5
    878c:	4632      	mov	r2, r6
    878e:	4621      	mov	r1, r4
    8790:	2000      	movs	r0, #0
    8792:	f7ff fe28 	bl	83e6 <mbedtls_mpi_div_mpi>
    8796:	4606      	mov	r6, r0
    8798:	b968      	cbnz	r0, 87b6 <mbedtls_mpi_mod_mpi+0x40>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    879a:	2100      	movs	r1, #0
    879c:	4620      	mov	r0, r4
    879e:	f7ff fca9 	bl	80f4 <mbedtls_mpi_cmp_int>
    87a2:	2800      	cmp	r0, #0
    87a4:	da09      	bge.n	87ba <mbedtls_mpi_mod_mpi+0x44>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    87a6:	462a      	mov	r2, r5
    87a8:	4621      	mov	r1, r4
    87aa:	4620      	mov	r0, r4
    87ac:	f7ff fd5a 	bl	8264 <mbedtls_mpi_add_mpi>
    87b0:	4606      	mov	r6, r0
    87b2:	2800      	cmp	r0, #0
    87b4:	d0f1      	beq.n	879a <mbedtls_mpi_mod_mpi+0x24>
}
    87b6:	4630      	mov	r0, r6
    87b8:	bd70      	pop	{r4, r5, r6, pc}
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    87ba:	4629      	mov	r1, r5
    87bc:	4620      	mov	r0, r4
    87be:	f7ff fc51 	bl	8064 <mbedtls_mpi_cmp_mpi>
    87c2:	2800      	cmp	r0, #0
    87c4:	dbf7      	blt.n	87b6 <mbedtls_mpi_mod_mpi+0x40>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    87c6:	462a      	mov	r2, r5
    87c8:	4621      	mov	r1, r4
    87ca:	4620      	mov	r0, r4
    87cc:	f7ff fd70 	bl	82b0 <mbedtls_mpi_sub_mpi>
    87d0:	4606      	mov	r6, r0
    87d2:	2800      	cmp	r0, #0
    87d4:	d0f1      	beq.n	87ba <mbedtls_mpi_mod_mpi+0x44>
    87d6:	e7ee      	b.n	87b6 <mbedtls_mpi_mod_mpi+0x40>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    87d8:	f06f 0609 	mvn.w	r6, #9
    87dc:	e7eb      	b.n	87b6 <mbedtls_mpi_mod_mpi+0x40>

000087de <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    87de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87e2:	f2ad 6d44 	subw	sp, sp, #1604	; 0x644
    87e6:	4607      	mov	r7, r0
    87e8:	4689      	mov	r9, r1
    87ea:	4616      	mov	r6, r2
    87ec:	461d      	mov	r5, r3
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    87ee:	2100      	movs	r1, #0
    87f0:	4618      	mov	r0, r3
    87f2:	f7ff fc7f 	bl	80f4 <mbedtls_mpi_cmp_int>
    87f6:	2800      	cmp	r0, #0
    87f8:	f340 81f7 	ble.w	8bea <mbedtls_mpi_exp_mod+0x40c>
    87fc:	68ab      	ldr	r3, [r5, #8]
    87fe:	681b      	ldr	r3, [r3, #0]
    8800:	f013 0f01 	tst.w	r3, #1
    8804:	f000 81f4 	beq.w	8bf0 <mbedtls_mpi_exp_mod+0x412>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    8808:	2100      	movs	r1, #0
    880a:	4630      	mov	r0, r6
    880c:	f7ff fc72 	bl	80f4 <mbedtls_mpi_cmp_int>
    8810:	2800      	cmp	r0, #0
    8812:	f2c0 81f0 	blt.w	8bf6 <mbedtls_mpi_exp_mod+0x418>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    /*
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    8816:	4629      	mov	r1, r5
    8818:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    881c:	f7ff f9a4 	bl	7b68 <mpi_montg_init>
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    8820:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    8824:	f7ff fa2a 	bl	7c7c <mbedtls_mpi_init>
    8828:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    882c:	f7ff fa26 	bl	7c7c <mbedtls_mpi_init>
    mbedtls_mpi_init( &Apos );
    8830:	a806      	add	r0, sp, #24
    8832:	f7ff fa23 	bl	7c7c <mbedtls_mpi_init>
    memset( W, 0, sizeof( W ) );
    8836:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    883a:	2100      	movs	r1, #0
    883c:	a809      	add	r0, sp, #36	; 0x24
    883e:	f7fe fba0 	bl	6f82 <memset>

    i = mbedtls_mpi_bitlen( E );
    8842:	4630      	mov	r0, r6
    8844:	f7ff fabc 	bl	7dc0 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    8848:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    884c:	d207      	bcs.n	885e <mbedtls_mpi_exp_mod+0x80>
    884e:	28ef      	cmp	r0, #239	; 0xef
    8850:	d813      	bhi.n	887a <mbedtls_mpi_exp_mod+0x9c>
    8852:	284f      	cmp	r0, #79	; 0x4f
    8854:	d813      	bhi.n	887e <mbedtls_mpi_exp_mod+0xa0>
    8856:	2817      	cmp	r0, #23
    8858:	d913      	bls.n	8882 <mbedtls_mpi_exp_mod+0xa4>
    885a:	2403      	movs	r4, #3
    885c:	e000      	b.n	8860 <mbedtls_mpi_exp_mod+0x82>
    885e:	2406      	movs	r4, #6
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    8860:	686b      	ldr	r3, [r5, #4]
    8862:	f103 0a01 	add.w	sl, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    8866:	4651      	mov	r1, sl
    8868:	4638      	mov	r0, r7
    886a:	f7ff fa1f 	bl	7cac <mbedtls_mpi_grow>
    886e:	4680      	mov	r8, r0
    8870:	b148      	cbz	r0, 8886 <mbedtls_mpi_exp_mod+0xa8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    8872:	1e63      	subs	r3, r4, #1
    8874:	2501      	movs	r5, #1
    8876:	409d      	lsls	r5, r3
    8878:	e19a      	b.n	8bb0 <mbedtls_mpi_exp_mod+0x3d2>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    887a:	2405      	movs	r4, #5
    887c:	e7f0      	b.n	8860 <mbedtls_mpi_exp_mod+0x82>
    887e:	2404      	movs	r4, #4
    8880:	e7ee      	b.n	8860 <mbedtls_mpi_exp_mod+0x82>
    8882:	2401      	movs	r4, #1
    8884:	e7ec      	b.n	8860 <mbedtls_mpi_exp_mod+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    8886:	4651      	mov	r1, sl
    8888:	a80c      	add	r0, sp, #48	; 0x30
    888a:	f7ff fa0f 	bl	7cac <mbedtls_mpi_grow>
    888e:	4680      	mov	r8, r0
    8890:	2800      	cmp	r0, #0
    8892:	d1ee      	bne.n	8872 <mbedtls_mpi_exp_mod+0x94>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    8894:	ea4f 014a 	mov.w	r1, sl, lsl #1
    8898:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    889c:	f7ff fa06 	bl	7cac <mbedtls_mpi_grow>
    88a0:	4680      	mov	r8, r0
    88a2:	2800      	cmp	r0, #0
    88a4:	d1e5      	bne.n	8872 <mbedtls_mpi_exp_mod+0x94>
    neg = ( A->s == -1 );
    88a6:	f8d9 3000 	ldr.w	r3, [r9]
    88aa:	9305      	str	r3, [sp, #20]
    if( neg )
    88ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    88b0:	d040      	beq.n	8934 <mbedtls_mpi_exp_mod+0x156>
    if( _RR == NULL || _RR->p == NULL )
    88b2:	f8dd 3668 	ldr.w	r3, [sp, #1640]	; 0x668
    88b6:	2b00      	cmp	r3, #0
    88b8:	d048      	beq.n	894c <mbedtls_mpi_exp_mod+0x16e>
    88ba:	689b      	ldr	r3, [r3, #8]
    88bc:	2b00      	cmp	r3, #0
    88be:	d045      	beq.n	894c <mbedtls_mpi_exp_mod+0x16e>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    88c0:	220c      	movs	r2, #12
    88c2:	f8dd 1668 	ldr.w	r1, [sp, #1640]	; 0x668
    88c6:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    88ca:	f7fe fb36 	bl	6f3a <memcpy>
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    88ce:	4629      	mov	r1, r5
    88d0:	4648      	mov	r0, r9
    88d2:	f7ff fbc7 	bl	8064 <mbedtls_mpi_cmp_mpi>
    88d6:	2800      	cmp	r0, #0
    88d8:	db5e      	blt.n	8998 <mbedtls_mpi_exp_mod+0x1ba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    88da:	462a      	mov	r2, r5
    88dc:	4649      	mov	r1, r9
    88de:	a80c      	add	r0, sp, #48	; 0x30
    88e0:	f7ff ff49 	bl	8776 <mbedtls_mpi_mod_mpi>
    88e4:	4680      	mov	r8, r0
    88e6:	2800      	cmp	r0, #0
    88e8:	d1c3      	bne.n	8872 <mbedtls_mpi_exp_mod+0x94>
    mpi_montmul( &W[1], &RR, N, mm, &T );
    88ea:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    88ee:	9300      	str	r3, [sp, #0]
    88f0:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    88f4:	462a      	mov	r2, r5
    88f6:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    88fa:	a80c      	add	r0, sp, #48	; 0x30
    88fc:	f7ff f950 	bl	7ba0 <mpi_montmul>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    8900:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    8904:	4638      	mov	r0, r7
    8906:	f7ff f9fa 	bl	7cfe <mbedtls_mpi_copy>
    890a:	4680      	mov	r8, r0
    890c:	2800      	cmp	r0, #0
    890e:	d1b0      	bne.n	8872 <mbedtls_mpi_exp_mod+0x94>
    mpi_montred( X, N, mm, &T );
    8910:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    8914:	f8dd 263c 	ldr.w	r2, [sp, #1596]	; 0x63c
    8918:	4629      	mov	r1, r5
    891a:	4638      	mov	r0, r7
    891c:	f7ff f99e 	bl	7c5c <mpi_montred>
    if( wsize > 1 )
    8920:	2c01      	cmp	r4, #1
    8922:	d841      	bhi.n	89a8 <mbedtls_mpi_exp_mod+0x1ca>
    nblimbs = E->n;
    8924:	f8d6 a004 	ldr.w	sl, [r6, #4]
    state   = 0;
    8928:	2300      	movs	r3, #0
    892a:	9304      	str	r3, [sp, #16]
    nbits   = 0;
    892c:	469b      	mov	fp, r3
    bufsize = 0;
    892e:	4699      	mov	r9, r3
    wbits   = 0;
    8930:	9303      	str	r3, [sp, #12]
    8932:	e0a8      	b.n	8a86 <mbedtls_mpi_exp_mod+0x2a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    8934:	4649      	mov	r1, r9
    8936:	a806      	add	r0, sp, #24
    8938:	f7ff f9e1 	bl	7cfe <mbedtls_mpi_copy>
    893c:	4680      	mov	r8, r0
    893e:	2800      	cmp	r0, #0
    8940:	d197      	bne.n	8872 <mbedtls_mpi_exp_mod+0x94>
        Apos.s = 1;
    8942:	2301      	movs	r3, #1
    8944:	9306      	str	r3, [sp, #24]
        A = &Apos;
    8946:	f10d 0918 	add.w	r9, sp, #24
    894a:	e7b2      	b.n	88b2 <mbedtls_mpi_exp_mod+0xd4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    894c:	2101      	movs	r1, #1
    894e:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    8952:	f7ff fa06 	bl	7d62 <mbedtls_mpi_lset>
    8956:	4680      	mov	r8, r0
    8958:	2800      	cmp	r0, #0
    895a:	d18a      	bne.n	8872 <mbedtls_mpi_exp_mod+0x94>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    895c:	6869      	ldr	r1, [r5, #4]
    895e:	0189      	lsls	r1, r1, #6
    8960:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    8964:	f7ff faac 	bl	7ec0 <mbedtls_mpi_shift_l>
    8968:	4680      	mov	r8, r0
    896a:	2800      	cmp	r0, #0
    896c:	d181      	bne.n	8872 <mbedtls_mpi_exp_mod+0x94>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    896e:	462a      	mov	r2, r5
    8970:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    8974:	4608      	mov	r0, r1
    8976:	f7ff fefe 	bl	8776 <mbedtls_mpi_mod_mpi>
    897a:	4680      	mov	r8, r0
    897c:	2800      	cmp	r0, #0
    897e:	f47f af78 	bne.w	8872 <mbedtls_mpi_exp_mod+0x94>
        if( _RR != NULL )
    8982:	f8dd 3668 	ldr.w	r3, [sp, #1640]	; 0x668
    8986:	2b00      	cmp	r3, #0
    8988:	d0a1      	beq.n	88ce <mbedtls_mpi_exp_mod+0xf0>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    898a:	220c      	movs	r2, #12
    898c:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
    8990:	4618      	mov	r0, r3
    8992:	f7fe fad2 	bl	6f3a <memcpy>
    8996:	e79a      	b.n	88ce <mbedtls_mpi_exp_mod+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    8998:	4649      	mov	r1, r9
    899a:	a80c      	add	r0, sp, #48	; 0x30
    899c:	f7ff f9af 	bl	7cfe <mbedtls_mpi_copy>
    89a0:	4680      	mov	r8, r0
    89a2:	2800      	cmp	r0, #0
    89a4:	d0a1      	beq.n	88ea <mbedtls_mpi_exp_mod+0x10c>
    89a6:	e764      	b.n	8872 <mbedtls_mpi_exp_mod+0x94>
        j =  one << ( wsize - 1 );
    89a8:	f104 3bff 	add.w	fp, r4, #4294967295
    89ac:	f04f 0901 	mov.w	r9, #1
    89b0:	fa09 f30b 	lsl.w	r3, r9, fp
    89b4:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    89b6:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    89ba:	ab09      	add	r3, sp, #36	; 0x24
    89bc:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    89c0:	6869      	ldr	r1, [r5, #4]
    89c2:	4449      	add	r1, r9
    89c4:	4650      	mov	r0, sl
    89c6:	f7ff f971 	bl	7cac <mbedtls_mpi_grow>
    89ca:	4680      	mov	r8, r0
    89cc:	2800      	cmp	r0, #0
    89ce:	f47f af50 	bne.w	8872 <mbedtls_mpi_exp_mod+0x94>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    89d2:	a90c      	add	r1, sp, #48	; 0x30
    89d4:	4650      	mov	r0, sl
    89d6:	f7ff f992 	bl	7cfe <mbedtls_mpi_copy>
    89da:	4680      	mov	r8, r0
    89dc:	2800      	cmp	r0, #0
    89de:	f47f af48 	bne.w	8872 <mbedtls_mpi_exp_mod+0x94>
        for( i = 0; i < wsize - 1; i++ )
    89e2:	f04f 0900 	mov.w	r9, #0
    89e6:	e00b      	b.n	8a00 <mbedtls_mpi_exp_mod+0x222>
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    89e8:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    89ec:	9300      	str	r3, [sp, #0]
    89ee:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    89f2:	462a      	mov	r2, r5
    89f4:	4651      	mov	r1, sl
    89f6:	4650      	mov	r0, sl
    89f8:	f7ff f8d2 	bl	7ba0 <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    89fc:	f109 0901 	add.w	r9, r9, #1
    8a00:	45cb      	cmp	fp, r9
    8a02:	d8f1      	bhi.n	89e8 <mbedtls_mpi_exp_mod+0x20a>
        for( i = j + 1; i < ( one << wsize ); i++ )
    8a04:	9b03      	ldr	r3, [sp, #12]
    8a06:	f103 0901 	add.w	r9, r3, #1
    8a0a:	e00b      	b.n	8a24 <mbedtls_mpi_exp_mod+0x246>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    8a0c:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    8a10:	9300      	str	r3, [sp, #0]
    8a12:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    8a16:	462a      	mov	r2, r5
    8a18:	a90c      	add	r1, sp, #48	; 0x30
    8a1a:	4650      	mov	r0, sl
    8a1c:	f7ff f8c0 	bl	7ba0 <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    8a20:	f109 0901 	add.w	r9, r9, #1
    8a24:	2301      	movs	r3, #1
    8a26:	40a3      	lsls	r3, r4
    8a28:	454b      	cmp	r3, r9
    8a2a:	f67f af7b 	bls.w	8924 <mbedtls_mpi_exp_mod+0x146>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    8a2e:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
    8a32:	ab09      	add	r3, sp, #36	; 0x24
    8a34:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    8a38:	6869      	ldr	r1, [r5, #4]
    8a3a:	3101      	adds	r1, #1
    8a3c:	4650      	mov	r0, sl
    8a3e:	f7ff f935 	bl	7cac <mbedtls_mpi_grow>
    8a42:	4680      	mov	r8, r0
    8a44:	2800      	cmp	r0, #0
    8a46:	f47f af14 	bne.w	8872 <mbedtls_mpi_exp_mod+0x94>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    8a4a:	f109 31ff 	add.w	r1, r9, #4294967295
    8a4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    8a52:	ab09      	add	r3, sp, #36	; 0x24
    8a54:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8a58:	4650      	mov	r0, sl
    8a5a:	f7ff f950 	bl	7cfe <mbedtls_mpi_copy>
    8a5e:	4680      	mov	r8, r0
    8a60:	2800      	cmp	r0, #0
    8a62:	d0d3      	beq.n	8a0c <mbedtls_mpi_exp_mod+0x22e>
    8a64:	e705      	b.n	8872 <mbedtls_mpi_exp_mod+0x94>
        if( ei == 0 && state == 1 )
    8a66:	b913      	cbnz	r3, 8a6e <mbedtls_mpi_exp_mod+0x290>
    8a68:	9a04      	ldr	r2, [sp, #16]
    8a6a:	2a01      	cmp	r2, #1
    8a6c:	d023      	beq.n	8ab6 <mbedtls_mpi_exp_mod+0x2d8>
        nbits++;
    8a6e:	f10b 0b01 	add.w	fp, fp, #1
        wbits |= ( ei << ( wsize - nbits ) );
    8a72:	eba4 020b 	sub.w	r2, r4, fp
    8a76:	4093      	lsls	r3, r2
    8a78:	9a03      	ldr	r2, [sp, #12]
    8a7a:	431a      	orrs	r2, r3
    8a7c:	9203      	str	r2, [sp, #12]
        if( nbits == wsize )
    8a7e:	455c      	cmp	r4, fp
    8a80:	d047      	beq.n	8b12 <mbedtls_mpi_exp_mod+0x334>
        state = 2;
    8a82:	2302      	movs	r3, #2
    8a84:	9304      	str	r3, [sp, #16]
        if( bufsize == 0 )
    8a86:	f1b9 0f00 	cmp.w	r9, #0
    8a8a:	d106      	bne.n	8a9a <mbedtls_mpi_exp_mod+0x2bc>
            if( nblimbs == 0 )
    8a8c:	f1ba 0f00 	cmp.w	sl, #0
    8a90:	d062      	beq.n	8b58 <mbedtls_mpi_exp_mod+0x37a>
            nblimbs--;
    8a92:	f10a 3aff 	add.w	sl, sl, #4294967295
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    8a96:	f04f 0920 	mov.w	r9, #32
        bufsize--;
    8a9a:	f109 39ff 	add.w	r9, r9, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
    8a9e:	68b3      	ldr	r3, [r6, #8]
    8aa0:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    8aa4:	fa23 f309 	lsr.w	r3, r3, r9
        if( ei == 0 && state == 0 )
    8aa8:	f013 0301 	ands.w	r3, r3, #1
    8aac:	d1db      	bne.n	8a66 <mbedtls_mpi_exp_mod+0x288>
    8aae:	9a04      	ldr	r2, [sp, #16]
    8ab0:	2a00      	cmp	r2, #0
    8ab2:	d1d8      	bne.n	8a66 <mbedtls_mpi_exp_mod+0x288>
    8ab4:	e7e7      	b.n	8a86 <mbedtls_mpi_exp_mod+0x2a8>
            mpi_montmul( X, X, N, mm, &T );
    8ab6:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    8aba:	9300      	str	r3, [sp, #0]
    8abc:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    8ac0:	462a      	mov	r2, r5
    8ac2:	4639      	mov	r1, r7
    8ac4:	4638      	mov	r0, r7
    8ac6:	f7ff f86b 	bl	7ba0 <mpi_montmul>
            continue;
    8aca:	e7dc      	b.n	8a86 <mbedtls_mpi_exp_mod+0x2a8>
                mpi_montmul( X, X, N, mm, &T );
    8acc:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    8ad0:	9300      	str	r3, [sp, #0]
    8ad2:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    8ad6:	462a      	mov	r2, r5
    8ad8:	4639      	mov	r1, r7
    8ada:	4638      	mov	r0, r7
    8adc:	f7ff f860 	bl	7ba0 <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    8ae0:	f10b 0b01 	add.w	fp, fp, #1
    8ae4:	45a3      	cmp	fp, r4
    8ae6:	d3f1      	bcc.n	8acc <mbedtls_mpi_exp_mod+0x2ee>
            mpi_montmul( X, &W[wbits], N, mm, &T );
    8ae8:	9b03      	ldr	r3, [sp, #12]
    8aea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    8aee:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    8af2:	9300      	str	r3, [sp, #0]
    8af4:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    8af8:	462a      	mov	r2, r5
    8afa:	a809      	add	r0, sp, #36	; 0x24
    8afc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    8b00:	4638      	mov	r0, r7
    8b02:	f7ff f84d 	bl	7ba0 <mpi_montmul>
            state--;
    8b06:	2301      	movs	r3, #1
    8b08:	9304      	str	r3, [sp, #16]
            nbits = 0;
    8b0a:	2300      	movs	r3, #0
    8b0c:	9303      	str	r3, [sp, #12]
            wbits = 0;
    8b0e:	469b      	mov	fp, r3
    8b10:	e7b9      	b.n	8a86 <mbedtls_mpi_exp_mod+0x2a8>
            for( i = 0; i < wsize; i++ )
    8b12:	f04f 0b00 	mov.w	fp, #0
    8b16:	e7e5      	b.n	8ae4 <mbedtls_mpi_exp_mod+0x306>
    for( i = 0; i < nbits; i++ )
    8b18:	f10a 0a01 	add.w	sl, sl, #1
    8b1c:	45da      	cmp	sl, fp
    8b1e:	d21e      	bcs.n	8b5e <mbedtls_mpi_exp_mod+0x380>
        mpi_montmul( X, X, N, mm, &T );
    8b20:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    8b24:	9300      	str	r3, [sp, #0]
    8b26:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    8b2a:	462a      	mov	r2, r5
    8b2c:	4639      	mov	r1, r7
    8b2e:	4638      	mov	r0, r7
    8b30:	f7ff f836 	bl	7ba0 <mpi_montmul>
        wbits <<= 1;
    8b34:	ea4f 0949 	mov.w	r9, r9, lsl #1
        if( ( wbits & ( one << wsize ) ) != 0 )
    8b38:	2301      	movs	r3, #1
    8b3a:	40a3      	lsls	r3, r4
    8b3c:	ea13 0f09 	tst.w	r3, r9
    8b40:	d0ea      	beq.n	8b18 <mbedtls_mpi_exp_mod+0x33a>
            mpi_montmul( X, &W[1], N, mm, &T );
    8b42:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    8b46:	9300      	str	r3, [sp, #0]
    8b48:	f8dd 363c 	ldr.w	r3, [sp, #1596]	; 0x63c
    8b4c:	462a      	mov	r2, r5
    8b4e:	a90c      	add	r1, sp, #48	; 0x30
    8b50:	4638      	mov	r0, r7
    8b52:	f7ff f825 	bl	7ba0 <mpi_montmul>
    8b56:	e7df      	b.n	8b18 <mbedtls_mpi_exp_mod+0x33a>
    8b58:	f8dd 900c 	ldr.w	r9, [sp, #12]
    8b5c:	e7de      	b.n	8b1c <mbedtls_mpi_exp_mod+0x33e>
    mpi_montred( X, N, mm, &T );
    8b5e:	f20d 6324 	addw	r3, sp, #1572	; 0x624
    8b62:	f8dd 263c 	ldr.w	r2, [sp, #1596]	; 0x63c
    8b66:	4629      	mov	r1, r5
    8b68:	4638      	mov	r0, r7
    8b6a:	f7ff f877 	bl	7c5c <mpi_montred>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    8b6e:	9b05      	ldr	r3, [sp, #20]
    8b70:	f1b3 3fff 	cmp.w	r3, #4294967295
    8b74:	f47f ae7d 	bne.w	8872 <mbedtls_mpi_exp_mod+0x94>
    8b78:	6873      	ldr	r3, [r6, #4]
    8b7a:	2b00      	cmp	r3, #0
    8b7c:	f43f ae79 	beq.w	8872 <mbedtls_mpi_exp_mod+0x94>
    8b80:	68b3      	ldr	r3, [r6, #8]
    8b82:	681b      	ldr	r3, [r3, #0]
    8b84:	f013 0f01 	tst.w	r3, #1
    8b88:	f43f ae73 	beq.w	8872 <mbedtls_mpi_exp_mod+0x94>
        X->s = -1;
    8b8c:	f04f 33ff 	mov.w	r3, #4294967295
    8b90:	603b      	str	r3, [r7, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    8b92:	463a      	mov	r2, r7
    8b94:	4629      	mov	r1, r5
    8b96:	4638      	mov	r0, r7
    8b98:	f7ff fb64 	bl	8264 <mbedtls_mpi_add_mpi>
    8b9c:	4680      	mov	r8, r0
cleanup:
    8b9e:	e668      	b.n	8872 <mbedtls_mpi_exp_mod+0x94>
        mbedtls_mpi_free( &W[i] );
    8ba0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    8ba4:	ab09      	add	r3, sp, #36	; 0x24
    8ba6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8baa:	f7ff f86d 	bl	7c88 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    8bae:	3501      	adds	r5, #1
    8bb0:	2301      	movs	r3, #1
    8bb2:	40a3      	lsls	r3, r4
    8bb4:	42ab      	cmp	r3, r5
    8bb6:	d8f3      	bhi.n	8ba0 <mbedtls_mpi_exp_mod+0x3c2>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    8bb8:	a80c      	add	r0, sp, #48	; 0x30
    8bba:	f7ff f865 	bl	7c88 <mbedtls_mpi_free>
    8bbe:	f20d 6024 	addw	r0, sp, #1572	; 0x624
    8bc2:	f7ff f861 	bl	7c88 <mbedtls_mpi_free>
    8bc6:	a806      	add	r0, sp, #24
    8bc8:	f7ff f85e 	bl	7c88 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    8bcc:	f8dd 3668 	ldr.w	r3, [sp, #1640]	; 0x668
    8bd0:	b133      	cbz	r3, 8be0 <mbedtls_mpi_exp_mod+0x402>
    8bd2:	689b      	ldr	r3, [r3, #8]
    8bd4:	b123      	cbz	r3, 8be0 <mbedtls_mpi_exp_mod+0x402>
        mbedtls_mpi_free( &RR );

    return( ret );
}
    8bd6:	4640      	mov	r0, r8
    8bd8:	f20d 6d44 	addw	sp, sp, #1604	; 0x644
    8bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_mpi_free( &RR );
    8be0:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
    8be4:	f7ff f850 	bl	7c88 <mbedtls_mpi_free>
    8be8:	e7f5      	b.n	8bd6 <mbedtls_mpi_exp_mod+0x3f8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    8bea:	f06f 0803 	mvn.w	r8, #3
    8bee:	e7f2      	b.n	8bd6 <mbedtls_mpi_exp_mod+0x3f8>
    8bf0:	f06f 0803 	mvn.w	r8, #3
    8bf4:	e7ef      	b.n	8bd6 <mbedtls_mpi_exp_mod+0x3f8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    8bf6:	f06f 0803 	mvn.w	r8, #3
    8bfa:	e7ec      	b.n	8bd6 <mbedtls_mpi_exp_mod+0x3f8>

00008bfc <platform_calloc_uninit>:
}
    8bfc:	2000      	movs	r0, #0
    8bfe:	4770      	bx	lr

00008c00 <platform_free_uninit>:
}
    8c00:	4770      	bx	lr

00008c02 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    8c02:	4770      	bx	lr

00008c04 <mbedtls_rsa_import>:
{
    8c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c06:	4604      	mov	r4, r0
    8c08:	4615      	mov	r5, r2
    8c0a:	461e      	mov	r6, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    8c0c:	460f      	mov	r7, r1
    8c0e:	b121      	cbz	r1, 8c1a <mbedtls_rsa_import+0x16>
    8c10:	3008      	adds	r0, #8
    8c12:	f7ff f874 	bl	7cfe <mbedtls_mpi_copy>
    8c16:	4601      	mov	r1, r0
    8c18:	bb48      	cbnz	r0, 8c6e <mbedtls_rsa_import+0x6a>
    8c1a:	b135      	cbz	r5, 8c2a <mbedtls_rsa_import+0x26>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    8c1c:	4629      	mov	r1, r5
    8c1e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8c22:	f7ff f86c 	bl	7cfe <mbedtls_mpi_copy>
    8c26:	4601      	mov	r1, r0
    8c28:	bb08      	cbnz	r0, 8c6e <mbedtls_rsa_import+0x6a>
    8c2a:	b136      	cbz	r6, 8c3a <mbedtls_rsa_import+0x36>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    8c2c:	4631      	mov	r1, r6
    8c2e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8c32:	f7ff f864 	bl	7cfe <mbedtls_mpi_copy>
    8c36:	4601      	mov	r1, r0
    8c38:	b9c8      	cbnz	r0, 8c6e <mbedtls_rsa_import+0x6a>
    8c3a:	9b06      	ldr	r3, [sp, #24]
    8c3c:	b133      	cbz	r3, 8c4c <mbedtls_rsa_import+0x48>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    8c3e:	4619      	mov	r1, r3
    8c40:	f104 0020 	add.w	r0, r4, #32
    8c44:	f7ff f85b 	bl	7cfe <mbedtls_mpi_copy>
    8c48:	4601      	mov	r1, r0
    8c4a:	b980      	cbnz	r0, 8c6e <mbedtls_rsa_import+0x6a>
    8c4c:	9b07      	ldr	r3, [sp, #28]
    8c4e:	b133      	cbz	r3, 8c5e <mbedtls_rsa_import+0x5a>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    8c50:	4619      	mov	r1, r3
    8c52:	f104 0014 	add.w	r0, r4, #20
    8c56:	f7ff f852 	bl	7cfe <mbedtls_mpi_copy>
    8c5a:	4601      	mov	r1, r0
    8c5c:	b938      	cbnz	r0, 8c6e <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    8c5e:	b14f      	cbz	r7, 8c74 <mbedtls_rsa_import+0x70>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    8c60:	f104 0008 	add.w	r0, r4, #8
    8c64:	f7ff f8c3 	bl	7dee <mbedtls_mpi_size>
    8c68:	6060      	str	r0, [r4, #4]
    return( 0 );
    8c6a:	2000      	movs	r0, #0
    8c6c:	e001      	b.n	8c72 <mbedtls_rsa_import+0x6e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    8c6e:	f5a1 4081 	sub.w	r0, r1, #16512	; 0x4080
}
    8c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
    8c74:	2000      	movs	r0, #0
    8c76:	e7fc      	b.n	8c72 <mbedtls_rsa_import+0x6e>

00008c78 <mbedtls_rsa_set_padding>:
    ctx->padding = padding;
    8c78:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
    ctx->hash_id = hash_id;
    8c7c:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
    8c80:	4770      	bx	lr

00008c82 <mbedtls_rsa_init>:
{
    8c82:	b570      	push	{r4, r5, r6, lr}
    8c84:	4604      	mov	r4, r0
    8c86:	460d      	mov	r5, r1
    8c88:	4616      	mov	r6, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    8c8a:	22ac      	movs	r2, #172	; 0xac
    8c8c:	2100      	movs	r1, #0
    8c8e:	f7fe f978 	bl	6f82 <memset>
    mbedtls_rsa_set_padding( ctx, padding, hash_id );
    8c92:	4632      	mov	r2, r6
    8c94:	4629      	mov	r1, r5
    8c96:	4620      	mov	r0, r4
    8c98:	f7ff ffee 	bl	8c78 <mbedtls_rsa_set_padding>
}
    8c9c:	bd70      	pop	{r4, r5, r6, pc}

00008c9e <mbedtls_rsa_free>:
/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    if( ctx == NULL )
    8c9e:	b3a8      	cbz	r0, 8d0c <mbedtls_rsa_free+0x6e>
{
    8ca0:	b510      	push	{r4, lr}
    8ca2:	4604      	mov	r4, r0
        return;

    mbedtls_mpi_free( &ctx->Vi );
    8ca4:	308c      	adds	r0, #140	; 0x8c
    8ca6:	f7fe ffef 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    8caa:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8cae:	f7fe ffeb 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    8cb2:	f104 0068 	add.w	r0, r4, #104	; 0x68
    8cb6:	f7fe ffe7 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    8cba:	f104 0020 	add.w	r0, r4, #32
    8cbe:	f7fe ffe3 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    8cc2:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8cc6:	f7fe ffdf 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    8cca:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8cce:	f7fe ffdb 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    8cd2:	f104 0014 	add.w	r0, r4, #20
    8cd6:	f7fe ffd7 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    8cda:	f104 0008 	add.w	r0, r4, #8
    8cde:	f7fe ffd3 	bl	7c88 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    8ce2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8ce6:	f7fe ffcf 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    8cea:	f104 0074 	add.w	r0, r4, #116	; 0x74
    8cee:	f7fe ffcb 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    8cf2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8cf6:	f7fe ffc7 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    8cfa:	f104 0050 	add.w	r0, r4, #80	; 0x50
    8cfe:	f7fe ffc3 	bl	7c88 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    8d02:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8d06:	f7fe ffbf 	bl	7c88 <mbedtls_mpi_free>
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
    8d0a:	bd10      	pop	{r4, pc}
    8d0c:	4770      	bx	lr

00008d0e <mbedtls_sha256_init>:
{
    8d0e:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    8d10:	226c      	movs	r2, #108	; 0x6c
    8d12:	2100      	movs	r1, #0
    8d14:	f7fe f935 	bl	6f82 <memset>
}
    8d18:	bd08      	pop	{r3, pc}

00008d1a <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    8d1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    8d1e:	b3da      	cbz	r2, 8d98 <mbedtls_sha256_update_ret+0x7e>
    8d20:	4606      	mov	r6, r0
    8d22:	460d      	mov	r5, r1
    8d24:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    8d26:	6803      	ldr	r3, [r0, #0]
    8d28:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    8d2c:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    8d30:	4413      	add	r3, r2
    8d32:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    8d34:	4293      	cmp	r3, r2
    8d36:	d202      	bcs.n	8d3e <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    8d38:	6843      	ldr	r3, [r0, #4]
    8d3a:	3301      	adds	r3, #1
    8d3c:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    8d3e:	b10f      	cbz	r7, 8d44 <mbedtls_sha256_update_ret+0x2a>
    8d40:	4544      	cmp	r4, r8
    8d42:	d20a      	bcs.n	8d5a <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    8d44:	2c3f      	cmp	r4, #63	; 0x3f
    8d46:	d91b      	bls.n	8d80 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    8d48:	4629      	mov	r1, r5
    8d4a:	4630      	mov	r0, r6
    8d4c:	f7fb f978 	bl	4040 <mbedtls_internal_sha256_process>
    8d50:	4603      	mov	r3, r0
    8d52:	bb10      	cbnz	r0, 8d9a <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    8d54:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    8d56:	3c40      	subs	r4, #64	; 0x40
    8d58:	e7f4      	b.n	8d44 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    8d5a:	f106 0928 	add.w	r9, r6, #40	; 0x28
    8d5e:	4642      	mov	r2, r8
    8d60:	4629      	mov	r1, r5
    8d62:	eb09 0007 	add.w	r0, r9, r7
    8d66:	f7fe f8e8 	bl	6f3a <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8d6a:	4649      	mov	r1, r9
    8d6c:	4630      	mov	r0, r6
    8d6e:	f7fb f967 	bl	4040 <mbedtls_internal_sha256_process>
    8d72:	4603      	mov	r3, r0
    8d74:	b988      	cbnz	r0, 8d9a <mbedtls_sha256_update_ret+0x80>
        input += fill;
    8d76:	4445      	add	r5, r8
        ilen  -= fill;
    8d78:	3f40      	subs	r7, #64	; 0x40
    8d7a:	443c      	add	r4, r7
        left = 0;
    8d7c:	2700      	movs	r7, #0
    8d7e:	e7e1      	b.n	8d44 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    8d80:	b90c      	cbnz	r4, 8d86 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    8d82:	2300      	movs	r3, #0
    8d84:	e009      	b.n	8d9a <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    8d86:	f106 0028 	add.w	r0, r6, #40	; 0x28
    8d8a:	4622      	mov	r2, r4
    8d8c:	4629      	mov	r1, r5
    8d8e:	4438      	add	r0, r7
    8d90:	f7fe f8d3 	bl	6f3a <memcpy>
    return( 0 );
    8d94:	2300      	movs	r3, #0
    8d96:	e000      	b.n	8d9a <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    8d98:	2300      	movs	r3, #0
}
    8d9a:	4618      	mov	r0, r3
    8d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008da0 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    8da0:	b570      	push	{r4, r5, r6, lr}
    8da2:	4604      	mov	r4, r0
    8da4:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    8da6:	6803      	ldr	r3, [r0, #0]
    8da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    8dac:	1c58      	adds	r0, r3, #1
    8dae:	4423      	add	r3, r4
    8db0:	2280      	movs	r2, #128	; 0x80
    8db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    8db6:	2838      	cmp	r0, #56	; 0x38
    8db8:	d87c      	bhi.n	8eb4 <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    8dba:	f104 0328 	add.w	r3, r4, #40	; 0x28
    8dbe:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    8dc2:	2100      	movs	r1, #0
    8dc4:	4418      	add	r0, r3
    8dc6:	f7fe f8dc 	bl	6f82 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    8dca:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    8dcc:	6863      	ldr	r3, [r4, #4]
    8dce:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    8dd0:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    8dd4:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    8dd6:	0e1e      	lsrs	r6, r3, #24
    8dd8:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    8ddc:	f3c3 4607 	ubfx	r6, r3, #16, #8
    8de0:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    8de4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    8de8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    8dec:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    8df0:	f3c2 5347 	ubfx	r3, r2, #21, #8
    8df4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    8df8:	f3c2 3347 	ubfx	r3, r2, #13, #8
    8dfc:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    8e00:	f3c2 1247 	ubfx	r2, r2, #5, #8
    8e04:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    8e08:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8e0c:	f104 0128 	add.w	r1, r4, #40	; 0x28
    8e10:	4620      	mov	r0, r4
    8e12:	f7fb f915 	bl	4040 <mbedtls_internal_sha256_process>
    8e16:	4603      	mov	r3, r0
    8e18:	2800      	cmp	r0, #0
    8e1a:	d159      	bne.n	8ed0 <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    8e1c:	7ae2      	ldrb	r2, [r4, #11]
    8e1e:	702a      	strb	r2, [r5, #0]
    8e20:	7aa2      	ldrb	r2, [r4, #10]
    8e22:	706a      	strb	r2, [r5, #1]
    8e24:	7a62      	ldrb	r2, [r4, #9]
    8e26:	70aa      	strb	r2, [r5, #2]
    8e28:	7a22      	ldrb	r2, [r4, #8]
    8e2a:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    8e2c:	7be2      	ldrb	r2, [r4, #15]
    8e2e:	712a      	strb	r2, [r5, #4]
    8e30:	7ba2      	ldrb	r2, [r4, #14]
    8e32:	716a      	strb	r2, [r5, #5]
    8e34:	7b62      	ldrb	r2, [r4, #13]
    8e36:	71aa      	strb	r2, [r5, #6]
    8e38:	7b22      	ldrb	r2, [r4, #12]
    8e3a:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    8e3c:	7ce2      	ldrb	r2, [r4, #19]
    8e3e:	722a      	strb	r2, [r5, #8]
    8e40:	7ca2      	ldrb	r2, [r4, #18]
    8e42:	726a      	strb	r2, [r5, #9]
    8e44:	7c62      	ldrb	r2, [r4, #17]
    8e46:	72aa      	strb	r2, [r5, #10]
    8e48:	7c22      	ldrb	r2, [r4, #16]
    8e4a:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    8e4c:	7de2      	ldrb	r2, [r4, #23]
    8e4e:	732a      	strb	r2, [r5, #12]
    8e50:	7da2      	ldrb	r2, [r4, #22]
    8e52:	736a      	strb	r2, [r5, #13]
    8e54:	7d62      	ldrb	r2, [r4, #21]
    8e56:	73aa      	strb	r2, [r5, #14]
    8e58:	7d22      	ldrb	r2, [r4, #20]
    8e5a:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    8e5c:	7ee2      	ldrb	r2, [r4, #27]
    8e5e:	742a      	strb	r2, [r5, #16]
    8e60:	7ea2      	ldrb	r2, [r4, #26]
    8e62:	746a      	strb	r2, [r5, #17]
    8e64:	7e62      	ldrb	r2, [r4, #25]
    8e66:	74aa      	strb	r2, [r5, #18]
    8e68:	7e22      	ldrb	r2, [r4, #24]
    8e6a:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    8e6c:	7fe2      	ldrb	r2, [r4, #31]
    8e6e:	752a      	strb	r2, [r5, #20]
    8e70:	7fa2      	ldrb	r2, [r4, #30]
    8e72:	756a      	strb	r2, [r5, #21]
    8e74:	7f62      	ldrb	r2, [r4, #29]
    8e76:	75aa      	strb	r2, [r5, #22]
    8e78:	7f22      	ldrb	r2, [r4, #28]
    8e7a:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    8e7c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    8e80:	762a      	strb	r2, [r5, #24]
    8e82:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    8e86:	766a      	strb	r2, [r5, #25]
    8e88:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8e8c:	76aa      	strb	r2, [r5, #26]
    8e8e:	f894 2020 	ldrb.w	r2, [r4, #32]
    8e92:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    8e94:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    8e96:	b9da      	cbnz	r2, 8ed0 <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    8e98:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    8e9c:	772b      	strb	r3, [r5, #28]
    8e9e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    8ea2:	776b      	strb	r3, [r5, #29]
    8ea4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    8ea8:	77ab      	strb	r3, [r5, #30]
    8eaa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    8eae:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    8eb0:	4613      	mov	r3, r2
    8eb2:	e00d      	b.n	8ed0 <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
    8eb4:	f104 0628 	add.w	r6, r4, #40	; 0x28
    8eb8:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    8ebc:	2100      	movs	r1, #0
    8ebe:	4430      	add	r0, r6
    8ec0:	f7fe f85f 	bl	6f82 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8ec4:	4631      	mov	r1, r6
    8ec6:	4620      	mov	r0, r4
    8ec8:	f7fb f8ba 	bl	4040 <mbedtls_internal_sha256_process>
    8ecc:	4603      	mov	r3, r0
    8ece:	b108      	cbz	r0, 8ed4 <mbedtls_sha256_finish_ret+0x134>
}
    8ed0:	4618      	mov	r0, r3
    8ed2:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    8ed4:	2238      	movs	r2, #56	; 0x38
    8ed6:	2100      	movs	r1, #0
    8ed8:	4630      	mov	r0, r6
    8eda:	f7fe f852 	bl	6f82 <memset>
    8ede:	e774      	b.n	8dca <mbedtls_sha256_finish_ret+0x2a>

00008ee0 <arch_system_halt>:
	__asm__ volatile(
    8ee0:	f04f 0220 	mov.w	r2, #32
    8ee4:	f3ef 8311 	mrs	r3, BASEPRI
    8ee8:	f382 8811 	msr	BASEPRI, r2
    8eec:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    8ef0:	e7fe      	b.n	8ef0 <arch_system_halt+0x10>

00008ef2 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    8ef2:	b510      	push	{r4, lr}
    8ef4:	4604      	mov	r4, r0
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    8ef6:	f7f8 fe15 	bl	1b24 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    8efa:	4620      	mov	r0, r4
    8efc:	f7ff fff0 	bl	8ee0 <arch_system_halt>

00008f00 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f02:	4605      	mov	r5, r0
    8f04:	460e      	mov	r6, r1
    8f06:	f04f 0320 	mov.w	r3, #32
    8f0a:	f3ef 8711 	mrs	r7, BASEPRI
    8f0e:	f383 8811 	msr	BASEPRI, r3
    8f12:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    8f16:	f7fc f883 	bl	5020 <z_impl_k_current_get>
    8f1a:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    8f1c:	4631      	mov	r1, r6
    8f1e:	4628      	mov	r0, r5
    8f20:	f7ff ffe7 	bl	8ef2 <k_sys_fatal_error_handler>
	__asm__ volatile(
    8f24:	f387 8811 	msr	BASEPRI, r7
    8f28:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    8f2c:	4620      	mov	r0, r4
    8f2e:	f7f9 fd5d 	bl	29ec <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    8f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008f34 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8f34:	68c2      	ldr	r2, [r0, #12]
    8f36:	6903      	ldr	r3, [r0, #16]
    8f38:	431a      	orrs	r2, r3
    8f3a:	f012 0203 	ands.w	r2, r2, #3
    8f3e:	d10d      	bne.n	8f5c <create_free_list+0x28>
	slab->free_list = NULL;
    8f40:	2100      	movs	r1, #0
    8f42:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8f44:	e005      	b.n	8f52 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    8f46:	6941      	ldr	r1, [r0, #20]
    8f48:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    8f4a:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    8f4c:	68c1      	ldr	r1, [r0, #12]
    8f4e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    8f50:	3201      	adds	r2, #1
    8f52:	6881      	ldr	r1, [r0, #8]
    8f54:	4291      	cmp	r1, r2
    8f56:	d8f6      	bhi.n	8f46 <create_free_list+0x12>
	return 0;
    8f58:	2000      	movs	r0, #0
    8f5a:	4770      	bx	lr
		return -EINVAL;
    8f5c:	f06f 0015 	mvn.w	r0, #21
}
    8f60:	4770      	bx	lr

00008f62 <k_mem_slab_init>:
{
    8f62:	b510      	push	{r4, lr}
    8f64:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    8f66:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    8f68:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    8f6a:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    8f6c:	2300      	movs	r3, #0
    8f6e:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    8f70:	f7ff ffe0 	bl	8f34 <create_free_list>
	if (rc < 0) {
    8f74:	2800      	cmp	r0, #0
    8f76:	db01      	blt.n	8f7c <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    8f78:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    8f7a:	6064      	str	r4, [r4, #4]
}
    8f7c:	bd10      	pop	{r4, pc}

00008f7e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    8f7e:	4288      	cmp	r0, r1
    8f80:	da00      	bge.n	8f84 <new_prio_for_inheritance+0x6>
    8f82:	4601      	mov	r1, r0
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    8f84:	2900      	cmp	r1, #0
    8f86:	db01      	blt.n	8f8c <new_prio_for_inheritance+0xe>
    8f88:	4608      	mov	r0, r1
    8f8a:	4770      	bx	lr
    8f8c:	2000      	movs	r0, #0
}
    8f8e:	4770      	bx	lr

00008f90 <adjust_owner_prio>:
{
    8f90:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    8f92:	6880      	ldr	r0, [r0, #8]
    8f94:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8f98:	428b      	cmp	r3, r1
    8f9a:	d101      	bne.n	8fa0 <adjust_owner_prio+0x10>
	return false;
    8f9c:	2000      	movs	r0, #0
}
    8f9e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    8fa0:	f7fb ffba 	bl	4f18 <z_set_prio>
    8fa4:	e7fb      	b.n	8f9e <adjust_owner_prio+0xe>

00008fa6 <z_impl_k_mutex_init>:
{
    8fa6:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8fa8:	2000      	movs	r0, #0
    8faa:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    8fac:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    8fae:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    8fb0:	605b      	str	r3, [r3, #4]
}
    8fb2:	4770      	bx	lr

00008fb4 <pended_on>:
}
    8fb4:	6880      	ldr	r0, [r0, #8]
    8fb6:	4770      	bx	lr

00008fb8 <z_tick_sleep>:
}
    8fb8:	2000      	movs	r0, #0
    8fba:	4770      	bx	lr

00008fbc <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
    8fbc:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8fc0:	f991 300e 	ldrsb.w	r3, [r1, #14]
    8fc4:	429a      	cmp	r2, r3
    8fc6:	db01      	blt.n	8fcc <z_is_t1_higher_prio_than_t2+0x10>
	return false;
    8fc8:	2000      	movs	r0, #0
    8fca:	4770      	bx	lr
		return true;
    8fcc:	2001      	movs	r0, #1
}
    8fce:	4770      	bx	lr

00008fd0 <z_reschedule_irqlock>:
{
    8fd0:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8fd2:	4603      	mov	r3, r0
    8fd4:	b928      	cbnz	r0, 8fe2 <z_reschedule_irqlock+0x12>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8fd6:	f3ef 8205 	mrs	r2, IPSR
    8fda:	b912      	cbnz	r2, 8fe2 <z_reschedule_irqlock+0x12>
    8fdc:	f7f9 fb02 	bl	25e4 <arch_swap>
	return ret;
    8fe0:	e003      	b.n	8fea <z_reschedule_irqlock+0x1a>
    8fe2:	f383 8811 	msr	BASEPRI, r3
    8fe6:	f3bf 8f6f 	isb	sy
}
    8fea:	bd08      	pop	{r3, pc}

00008fec <k_sched_unlock>:
}
    8fec:	4770      	bx	lr

00008fee <z_priq_dumb_best>:
{
    8fee:	4603      	mov	r3, r0
	return list->head == list;
    8ff0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8ff2:	4283      	cmp	r3, r0
    8ff4:	d000      	beq.n	8ff8 <z_priq_dumb_best+0xa>
}
    8ff6:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8ff8:	2000      	movs	r0, #0
	return thread;
    8ffa:	e7fc      	b.n	8ff6 <z_priq_dumb_best+0x8>

00008ffc <z_ready_thread>:
{
    8ffc:	b538      	push	{r3, r4, r5, lr}
    8ffe:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    9000:	2300      	movs	r3, #0
	__asm__ volatile(
    9002:	f04f 0220 	mov.w	r2, #32
    9006:	f3ef 8411 	mrs	r4, BASEPRI
    900a:	f382 8811 	msr	BASEPRI, r2
    900e:	f3bf 8f6f 	isb	sy
    9012:	b943      	cbnz	r3, 9026 <z_ready_thread+0x2a>
		ready_thread(thread);
    9014:	4628      	mov	r0, r5
    9016:	f7fb fe65 	bl	4ce4 <ready_thread>
	__asm__ volatile(
    901a:	f384 8811 	msr	BASEPRI, r4
    901e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9022:	2301      	movs	r3, #1
    9024:	e7f5      	b.n	9012 <z_ready_thread+0x16>
}
    9026:	bd38      	pop	{r3, r4, r5, pc}

00009028 <z_thread_timeout>:
{
    9028:	b570      	push	{r4, r5, r6, lr}
    902a:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    902c:	2300      	movs	r3, #0
	__asm__ volatile(
    902e:	f04f 0220 	mov.w	r2, #32
    9032:	f3ef 8611 	mrs	r6, BASEPRI
    9036:	f382 8811 	msr	BASEPRI, r2
    903a:	f3bf 8f6f 	isb	sy
    903e:	e019      	b.n	9074 <z_thread_timeout+0x4c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    9040:	4620      	mov	r0, r4
    9042:	f7ff ffb7 	bl	8fb4 <pended_on>
    9046:	4621      	mov	r1, r4
    9048:	f7fb fe12 	bl	4c70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    904c:	7b63      	ldrb	r3, [r4, #13]
    904e:	f023 0302 	bic.w	r3, r3, #2
    9052:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9054:	2300      	movs	r3, #0
    9056:	60a3      	str	r3, [r4, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9058:	f815 3c0b 	ldrb.w	r3, [r5, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    905c:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    9060:	f805 3c0b 	strb.w	r3, [r5, #-11]
		ready_thread(thread);
    9064:	4620      	mov	r0, r4
    9066:	f7fb fe3d 	bl	4ce4 <ready_thread>
	__asm__ volatile(
    906a:	f386 8811 	msr	BASEPRI, r6
    906e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9072:	2301      	movs	r3, #1
    9074:	b933      	cbnz	r3, 9084 <z_thread_timeout+0x5c>
		struct k_thread *thread = CONTAINER_OF(timeout,
    9076:	f1a5 0418 	sub.w	r4, r5, #24
		if (thread->base.pended_on != NULL) {
    907a:	f855 3c10 	ldr.w	r3, [r5, #-16]
    907e:	2b00      	cmp	r3, #0
    9080:	d1de      	bne.n	9040 <z_thread_timeout+0x18>
    9082:	e7e9      	b.n	9058 <z_thread_timeout+0x30>
}
    9084:	bd70      	pop	{r4, r5, r6, pc}

00009086 <add_to_waitq_locked>:
{
    9086:	b570      	push	{r4, r5, r6, lr}
    9088:	4605      	mov	r5, r0
    908a:	460e      	mov	r6, r1
	unready_thread(thread);
    908c:	f7fb ff18 	bl	4ec0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    9090:	7b6b      	ldrb	r3, [r5, #13]
    9092:	f043 0302 	orr.w	r3, r3, #2
    9096:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    9098:	b1ae      	cbz	r6, 90c6 <add_to_waitq_locked+0x40>
		thread->base.pended_on = wait_q;
    909a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    909c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    909e:	42a6      	cmp	r6, r4
    90a0:	d019      	beq.n	90d6 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    90a2:	b15c      	cbz	r4, 90bc <add_to_waitq_locked+0x36>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    90a4:	4621      	mov	r1, r4
    90a6:	4628      	mov	r0, r5
    90a8:	f7ff ff88 	bl	8fbc <z_is_t1_higher_prio_than_t2>
    90ac:	b960      	cbnz	r0, 90c8 <add_to_waitq_locked+0x42>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    90ae:	b12c      	cbz	r4, 90bc <add_to_waitq_locked+0x36>
	return (node == list->tail) ? NULL : node->next;
    90b0:	6873      	ldr	r3, [r6, #4]
    90b2:	429c      	cmp	r4, r3
    90b4:	d002      	beq.n	90bc <add_to_waitq_locked+0x36>
    90b6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    90b8:	2c00      	cmp	r4, #0
    90ba:	d1f2      	bne.n	90a2 <add_to_waitq_locked+0x1c>
	node->next = list;
    90bc:	602e      	str	r6, [r5, #0]
	node->prev = list->tail;
    90be:	6873      	ldr	r3, [r6, #4]
    90c0:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
    90c2:	601d      	str	r5, [r3, #0]
	list->tail = node;
    90c4:	6075      	str	r5, [r6, #4]
}
    90c6:	bd70      	pop	{r4, r5, r6, pc}
	node->prev = successor->prev;
    90c8:	6863      	ldr	r3, [r4, #4]
    90ca:	606b      	str	r3, [r5, #4]
	node->next = successor;
    90cc:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    90ce:	6863      	ldr	r3, [r4, #4]
    90d0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    90d2:	6065      	str	r5, [r4, #4]
}
    90d4:	e7f7      	b.n	90c6 <add_to_waitq_locked+0x40>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    90d6:	2400      	movs	r4, #0
    90d8:	e7e3      	b.n	90a2 <add_to_waitq_locked+0x1c>

000090da <pend>:
{
    90da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    90de:	4605      	mov	r5, r0
    90e0:	460f      	mov	r7, r1
    90e2:	4691      	mov	r9, r2
    90e4:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    90e6:	2400      	movs	r4, #0
	__asm__ volatile(
    90e8:	f04f 0320 	mov.w	r3, #32
    90ec:	f3ef 8611 	mrs	r6, BASEPRI
    90f0:	f383 8811 	msr	BASEPRI, r3
    90f4:	f3bf 8f6f 	isb	sy
    90f8:	b94c      	cbnz	r4, 910e <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    90fa:	4639      	mov	r1, r7
    90fc:	4628      	mov	r0, r5
    90fe:	f7ff ffc2 	bl	9086 <add_to_waitq_locked>
	__asm__ volatile(
    9102:	f386 8811 	msr	BASEPRI, r6
    9106:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    910a:	2401      	movs	r4, #1
    910c:	e7f4      	b.n	90f8 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    910e:	464a      	mov	r2, r9
    9110:	4643      	mov	r3, r8
    9112:	4628      	mov	r0, r5
    9114:	f7fb fd82 	bl	4c1c <add_thread_timeout>
}
    9118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000911c <z_unpend_first_thread>:
{
    911c:	b570      	push	{r4, r5, r6, lr}
    911e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    9120:	2300      	movs	r3, #0
	__asm__ volatile(
    9122:	f04f 0220 	mov.w	r2, #32
    9126:	f3ef 8511 	mrs	r5, BASEPRI
    912a:	f382 8811 	msr	BASEPRI, r2
    912e:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
    9132:	461c      	mov	r4, r3
	LOCKED(&sched_spinlock) {
    9134:	b94b      	cbnz	r3, 914a <z_unpend_first_thread+0x2e>
		ret = _priq_wait_best(&wait_q->waitq);
    9136:	4630      	mov	r0, r6
    9138:	f7ff ff59 	bl	8fee <z_priq_dumb_best>
    913c:	4604      	mov	r4, r0
	__asm__ volatile(
    913e:	f385 8811 	msr	BASEPRI, r5
    9142:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9146:	2301      	movs	r3, #1
    9148:	e7f4      	b.n	9134 <z_unpend_first_thread+0x18>

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    914a:	b1dc      	cbz	r4, 9184 <z_unpend_first_thread+0x68>
	LOCKED(&sched_spinlock) {
    914c:	2300      	movs	r3, #0
	__asm__ volatile(
    914e:	f04f 0220 	mov.w	r2, #32
    9152:	f3ef 8511 	mrs	r5, BASEPRI
    9156:	f382 8811 	msr	BASEPRI, r2
    915a:	f3bf 8f6f 	isb	sy
    915e:	b98b      	cbnz	r3, 9184 <z_unpend_first_thread+0x68>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    9160:	4620      	mov	r0, r4
    9162:	f7ff ff27 	bl	8fb4 <pended_on>
    9166:	4621      	mov	r1, r4
    9168:	f7fb fd82 	bl	4c70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    916c:	7b63      	ldrb	r3, [r4, #13]
    916e:	f023 0302 	bic.w	r3, r3, #2
    9172:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9174:	2300      	movs	r3, #0
    9176:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    9178:	f385 8811 	msr	BASEPRI, r5
    917c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9180:	2301      	movs	r3, #1
    9182:	e7ec      	b.n	915e <z_unpend_first_thread+0x42>
	if (thread != NULL) {
    9184:	b11c      	cbz	r4, 918e <z_unpend_first_thread+0x72>
    9186:	f104 0018 	add.w	r0, r4, #24
    918a:	f000 f843 	bl	9214 <z_abort_timeout>
}
    918e:	4620      	mov	r0, r4
    9190:	bd70      	pop	{r4, r5, r6, pc}

00009192 <k_is_in_isr>:
    9192:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    9196:	3800      	subs	r0, #0
    9198:	bf18      	it	ne
    919a:	2001      	movne	r0, #1
    919c:	4770      	bx	lr

0000919e <z_impl_k_busy_wait>:
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
    919e:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    91a0:	f7f8 fc18 	bl	19d4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
    91a4:	bd08      	pop	{r3, pc}

000091a6 <remove_timeout>:
{
    91a6:	b538      	push	{r3, r4, r5, lr}
    91a8:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    91aa:	f7fb ff6b 	bl	5084 <next>
    91ae:	b148      	cbz	r0, 91c4 <remove_timeout+0x1e>
    91b0:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    91b2:	6920      	ldr	r0, [r4, #16]
    91b4:	6965      	ldr	r5, [r4, #20]
    91b6:	6913      	ldr	r3, [r2, #16]
    91b8:	6951      	ldr	r1, [r2, #20]
    91ba:	181b      	adds	r3, r3, r0
    91bc:	eb45 0101 	adc.w	r1, r5, r1
    91c0:	6113      	str	r3, [r2, #16]
    91c2:	6151      	str	r1, [r2, #20]
	node->prev->next = node->next;
    91c4:	6862      	ldr	r2, [r4, #4]
    91c6:	6823      	ldr	r3, [r4, #0]
    91c8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    91ca:	6862      	ldr	r2, [r4, #4]
    91cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    91ce:	2300      	movs	r3, #0
    91d0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    91d2:	6063      	str	r3, [r4, #4]
}
    91d4:	bd38      	pop	{r3, r4, r5, pc}

000091d6 <next_timeout>:
{
    91d6:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    91d8:	f7fb ff4a 	bl	5070 <first>
    91dc:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    91de:	f7fb ff5d 	bl	509c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    91e2:	b18c      	cbz	r4, 9208 <next_timeout+0x32>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    91e4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    91e8:	1a12      	subs	r2, r2, r0
    91ea:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    91ee:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    91f2:	f173 0100 	sbcs.w	r1, r3, #0
    91f6:	da0a      	bge.n	920e <next_timeout+0x38>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    91f8:	4610      	mov	r0, r2
    91fa:	2a00      	cmp	r2, #0
    91fc:	f173 0300 	sbcs.w	r3, r3, #0
    9200:	db00      	blt.n	9204 <next_timeout+0x2e>
}
    9202:	bd10      	pop	{r4, pc}
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    9204:	2000      	movs	r0, #0
    9206:	e7fc      	b.n	9202 <next_timeout+0x2c>
	int32_t ret = to == NULL ? MAX_WAIT
    9208:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    920c:	e7f9      	b.n	9202 <next_timeout+0x2c>
    920e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    9212:	e7f6      	b.n	9202 <next_timeout+0x2c>

00009214 <z_abort_timeout>:
{
    9214:	b570      	push	{r4, r5, r6, lr}
    9216:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    9218:	2300      	movs	r3, #0
	__asm__ volatile(
    921a:	f04f 0220 	mov.w	r2, #32
    921e:	f3ef 8611 	mrs	r6, BASEPRI
    9222:	f382 8811 	msr	BASEPRI, r2
    9226:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    922a:	f06f 0015 	mvn.w	r0, #21
    922e:	e008      	b.n	9242 <z_abort_timeout+0x2e>
			remove_timeout(to);
    9230:	4620      	mov	r0, r4
    9232:	f7ff ffb8 	bl	91a6 <remove_timeout>
			ret = 0;
    9236:	4628      	mov	r0, r5
	__asm__ volatile(
    9238:	f386 8811 	msr	BASEPRI, r6
    923c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9240:	2301      	movs	r3, #1
    9242:	461d      	mov	r5, r3
    9244:	b91b      	cbnz	r3, 924e <z_abort_timeout+0x3a>
	return node->next != NULL;
    9246:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    9248:	2b00      	cmp	r3, #0
    924a:	d1f1      	bne.n	9230 <z_abort_timeout+0x1c>
    924c:	e7f4      	b.n	9238 <z_abort_timeout+0x24>
}
    924e:	bd70      	pop	{r4, r5, r6, pc}

00009250 <k_heap_init>:
{
    9250:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
    9252:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    9256:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    9258:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    925a:	f7fd fac7 	bl	67ec <sys_heap_init>
}
    925e:	bd10      	pop	{r4, pc}

00009260 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    9260:	4770      	bx	lr
