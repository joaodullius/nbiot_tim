
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010200 <_vector_start>:
   10200:	20000c70 	.word	0x20000c70
   10204:	00011a65 	.word	0x00011a65
   10208:	00014bab 	.word	0x00014bab
   1020c:	00011a95 	.word	0x00011a95
   10210:	00011a95 	.word	0x00011a95
   10214:	00011a95 	.word	0x00011a95
   10218:	00011a95 	.word	0x00011a95
   1021c:	00011a95 	.word	0x00011a95
	...
   1022c:	00011879 	.word	0x00011879
   10230:	00011a95 	.word	0x00011a95
   10234:	00000000 	.word	0x00000000
   10238:	00011821 	.word	0x00011821
   1023c:	00014a91 	.word	0x00014a91

00010240 <_irq_vector_table>:
   10240:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   10250:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   10260:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   10270:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   10280:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   10290:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   102a0:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   102b0:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   102c0:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   102d0:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   102e0:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   102f0:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   10300:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   10310:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   10320:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   10330:	00011a25 00011a25 00011a25 00011a25     %...%...%...%...
   10340:	00011a25                                %...

00010344 <_vector_end>:
	...

00010400 <m_firmware_info>:
   10400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10410:	00007e00 00000001 00010200 00010200     .~..............
   10420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001043c <__aeabi_uldivmod>:
   1043c:	b953      	cbnz	r3, 10454 <__aeabi_uldivmod+0x18>
   1043e:	b94a      	cbnz	r2, 10454 <__aeabi_uldivmod+0x18>
   10440:	2900      	cmp	r1, #0
   10442:	bf08      	it	eq
   10444:	2800      	cmpeq	r0, #0
   10446:	bf1c      	itt	ne
   10448:	f04f 31ff 	movne.w	r1, #4294967295
   1044c:	f04f 30ff 	movne.w	r0, #4294967295
   10450:	f000 b96c 	b.w	1072c <__aeabi_idiv0>
   10454:	f1ad 0c08 	sub.w	ip, sp, #8
   10458:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1045c:	f000 f806 	bl	1046c <__udivmoddi4>
   10460:	f8dd e004 	ldr.w	lr, [sp, #4]
   10464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10468:	b004      	add	sp, #16
   1046a:	4770      	bx	lr

0001046c <__udivmoddi4>:
   1046c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10470:	9d08      	ldr	r5, [sp, #32]
   10472:	4604      	mov	r4, r0
   10474:	4688      	mov	r8, r1
   10476:	2b00      	cmp	r3, #0
   10478:	d17d      	bne.n	10576 <__udivmoddi4+0x10a>
   1047a:	428a      	cmp	r2, r1
   1047c:	4617      	mov	r7, r2
   1047e:	d93f      	bls.n	10500 <__udivmoddi4+0x94>
   10480:	fab2 f282 	clz	r2, r2
   10484:	b142      	cbz	r2, 10498 <__udivmoddi4+0x2c>
   10486:	f1c2 0020 	rsb	r0, r2, #32
   1048a:	4091      	lsls	r1, r2
   1048c:	4097      	lsls	r7, r2
   1048e:	fa24 f000 	lsr.w	r0, r4, r0
   10492:	4094      	lsls	r4, r2
   10494:	ea40 0801 	orr.w	r8, r0, r1
   10498:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1049c:	0c23      	lsrs	r3, r4, #16
   1049e:	fa1f fe87 	uxth.w	lr, r7
   104a2:	fbb8 f6fc 	udiv	r6, r8, ip
   104a6:	fb0c 8116 	mls	r1, ip, r6, r8
   104aa:	fb06 f00e 	mul.w	r0, r6, lr
   104ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   104b2:	4298      	cmp	r0, r3
   104b4:	d905      	bls.n	104c2 <__udivmoddi4+0x56>
   104b6:	18fb      	adds	r3, r7, r3
   104b8:	d202      	bcs.n	104c0 <__udivmoddi4+0x54>
   104ba:	4298      	cmp	r0, r3
   104bc:	f200 8124 	bhi.w	10708 <__udivmoddi4+0x29c>
   104c0:	3e01      	subs	r6, #1
   104c2:	1a19      	subs	r1, r3, r0
   104c4:	b2a3      	uxth	r3, r4
   104c6:	fbb1 f0fc 	udiv	r0, r1, ip
   104ca:	fb0c 1110 	mls	r1, ip, r0, r1
   104ce:	fb00 fe0e 	mul.w	lr, r0, lr
   104d2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   104d6:	45a6      	cmp	lr, r4
   104d8:	d905      	bls.n	104e6 <__udivmoddi4+0x7a>
   104da:	193c      	adds	r4, r7, r4
   104dc:	d202      	bcs.n	104e4 <__udivmoddi4+0x78>
   104de:	45a6      	cmp	lr, r4
   104e0:	f200 810f 	bhi.w	10702 <__udivmoddi4+0x296>
   104e4:	3801      	subs	r0, #1
   104e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   104ea:	eba4 040e 	sub.w	r4, r4, lr
   104ee:	2600      	movs	r6, #0
   104f0:	b11d      	cbz	r5, 104fa <__udivmoddi4+0x8e>
   104f2:	40d4      	lsrs	r4, r2
   104f4:	2300      	movs	r3, #0
   104f6:	e9c5 4300 	strd	r4, r3, [r5]
   104fa:	4631      	mov	r1, r6
   104fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10500:	b902      	cbnz	r2, 10504 <__udivmoddi4+0x98>
   10502:	deff      	udf	#255	; 0xff
   10504:	fab2 f282 	clz	r2, r2
   10508:	2a00      	cmp	r2, #0
   1050a:	d150      	bne.n	105ae <__udivmoddi4+0x142>
   1050c:	1bcb      	subs	r3, r1, r7
   1050e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10512:	fa1f f887 	uxth.w	r8, r7
   10516:	2601      	movs	r6, #1
   10518:	0c21      	lsrs	r1, r4, #16
   1051a:	fbb3 fcfe 	udiv	ip, r3, lr
   1051e:	fb0e 301c 	mls	r0, lr, ip, r3
   10522:	460b      	mov	r3, r1
   10524:	fb08 f90c 	mul.w	r9, r8, ip
   10528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1052c:	4589      	cmp	r9, r1
   1052e:	d90a      	bls.n	10546 <__udivmoddi4+0xda>
   10530:	1879      	adds	r1, r7, r1
   10532:	bf2c      	ite	cs
   10534:	2301      	movcs	r3, #1
   10536:	2300      	movcc	r3, #0
   10538:	4589      	cmp	r9, r1
   1053a:	d902      	bls.n	10542 <__udivmoddi4+0xd6>
   1053c:	2b00      	cmp	r3, #0
   1053e:	f000 80d9 	beq.w	106f4 <__udivmoddi4+0x288>
   10542:	f10c 3cff 	add.w	ip, ip, #4294967295
   10546:	eba1 0109 	sub.w	r1, r1, r9
   1054a:	b2a3      	uxth	r3, r4
   1054c:	fbb1 f0fe 	udiv	r0, r1, lr
   10550:	fb0e 1110 	mls	r1, lr, r0, r1
   10554:	fb08 f800 	mul.w	r8, r8, r0
   10558:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1055c:	45a0      	cmp	r8, r4
   1055e:	d905      	bls.n	1056c <__udivmoddi4+0x100>
   10560:	193c      	adds	r4, r7, r4
   10562:	d202      	bcs.n	1056a <__udivmoddi4+0xfe>
   10564:	45a0      	cmp	r8, r4
   10566:	f200 80c9 	bhi.w	106fc <__udivmoddi4+0x290>
   1056a:	3801      	subs	r0, #1
   1056c:	eba4 0408 	sub.w	r4, r4, r8
   10570:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10574:	e7bc      	b.n	104f0 <__udivmoddi4+0x84>
   10576:	428b      	cmp	r3, r1
   10578:	d909      	bls.n	1058e <__udivmoddi4+0x122>
   1057a:	2d00      	cmp	r5, #0
   1057c:	f000 80b1 	beq.w	106e2 <__udivmoddi4+0x276>
   10580:	2600      	movs	r6, #0
   10582:	e9c5 0100 	strd	r0, r1, [r5]
   10586:	4630      	mov	r0, r6
   10588:	4631      	mov	r1, r6
   1058a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1058e:	fab3 f683 	clz	r6, r3
   10592:	2e00      	cmp	r6, #0
   10594:	d146      	bne.n	10624 <__udivmoddi4+0x1b8>
   10596:	428b      	cmp	r3, r1
   10598:	f0c0 80a6 	bcc.w	106e8 <__udivmoddi4+0x27c>
   1059c:	4282      	cmp	r2, r0
   1059e:	f240 80a3 	bls.w	106e8 <__udivmoddi4+0x27c>
   105a2:	4630      	mov	r0, r6
   105a4:	2d00      	cmp	r5, #0
   105a6:	d0a8      	beq.n	104fa <__udivmoddi4+0x8e>
   105a8:	e9c5 4800 	strd	r4, r8, [r5]
   105ac:	e7a5      	b.n	104fa <__udivmoddi4+0x8e>
   105ae:	4097      	lsls	r7, r2
   105b0:	f1c2 0320 	rsb	r3, r2, #32
   105b4:	fa01 f002 	lsl.w	r0, r1, r2
   105b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   105bc:	40d9      	lsrs	r1, r3
   105be:	fa24 f303 	lsr.w	r3, r4, r3
   105c2:	fa1f f887 	uxth.w	r8, r7
   105c6:	4094      	lsls	r4, r2
   105c8:	4303      	orrs	r3, r0
   105ca:	fbb1 f0fe 	udiv	r0, r1, lr
   105ce:	0c1e      	lsrs	r6, r3, #16
   105d0:	fb0e 1110 	mls	r1, lr, r0, r1
   105d4:	fb00 fc08 	mul.w	ip, r0, r8
   105d8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   105dc:	458c      	cmp	ip, r1
   105de:	d909      	bls.n	105f4 <__udivmoddi4+0x188>
   105e0:	1879      	adds	r1, r7, r1
   105e2:	bf2c      	ite	cs
   105e4:	2601      	movcs	r6, #1
   105e6:	2600      	movcc	r6, #0
   105e8:	458c      	cmp	ip, r1
   105ea:	d902      	bls.n	105f2 <__udivmoddi4+0x186>
   105ec:	2e00      	cmp	r6, #0
   105ee:	f000 8093 	beq.w	10718 <__udivmoddi4+0x2ac>
   105f2:	3801      	subs	r0, #1
   105f4:	eba1 010c 	sub.w	r1, r1, ip
   105f8:	b29b      	uxth	r3, r3
   105fa:	fbb1 f6fe 	udiv	r6, r1, lr
   105fe:	fb0e 1116 	mls	r1, lr, r6, r1
   10602:	fb06 fc08 	mul.w	ip, r6, r8
   10606:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1060a:	458c      	cmp	ip, r1
   1060c:	d905      	bls.n	1061a <__udivmoddi4+0x1ae>
   1060e:	1879      	adds	r1, r7, r1
   10610:	d202      	bcs.n	10618 <__udivmoddi4+0x1ac>
   10612:	458c      	cmp	ip, r1
   10614:	f200 8087 	bhi.w	10726 <__udivmoddi4+0x2ba>
   10618:	3e01      	subs	r6, #1
   1061a:	eba1 030c 	sub.w	r3, r1, ip
   1061e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   10622:	e779      	b.n	10518 <__udivmoddi4+0xac>
   10624:	f1c6 0720 	rsb	r7, r6, #32
   10628:	fa03 f406 	lsl.w	r4, r3, r6
   1062c:	fa02 fc06 	lsl.w	ip, r2, r6
   10630:	fa01 fe06 	lsl.w	lr, r1, r6
   10634:	40fa      	lsrs	r2, r7
   10636:	fa20 f807 	lsr.w	r8, r0, r7
   1063a:	40f9      	lsrs	r1, r7
   1063c:	fa00 f306 	lsl.w	r3, r0, r6
   10640:	4322      	orrs	r2, r4
   10642:	ea48 040e 	orr.w	r4, r8, lr
   10646:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1064a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   1064e:	fa1f f982 	uxth.w	r9, r2
   10652:	fbb1 faf8 	udiv	sl, r1, r8
   10656:	fb08 111a 	mls	r1, r8, sl, r1
   1065a:	fb0a f009 	mul.w	r0, sl, r9
   1065e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   10662:	4570      	cmp	r0, lr
   10664:	d90a      	bls.n	1067c <__udivmoddi4+0x210>
   10666:	eb12 0e0e 	adds.w	lr, r2, lr
   1066a:	bf2c      	ite	cs
   1066c:	2101      	movcs	r1, #1
   1066e:	2100      	movcc	r1, #0
   10670:	4570      	cmp	r0, lr
   10672:	d901      	bls.n	10678 <__udivmoddi4+0x20c>
   10674:	2900      	cmp	r1, #0
   10676:	d052      	beq.n	1071e <__udivmoddi4+0x2b2>
   10678:	f10a 3aff 	add.w	sl, sl, #4294967295
   1067c:	ebae 0e00 	sub.w	lr, lr, r0
   10680:	b2a4      	uxth	r4, r4
   10682:	fbbe f0f8 	udiv	r0, lr, r8
   10686:	fb08 ee10 	mls	lr, r8, r0, lr
   1068a:	fb00 f909 	mul.w	r9, r0, r9
   1068e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   10692:	45f1      	cmp	r9, lr
   10694:	d905      	bls.n	106a2 <__udivmoddi4+0x236>
   10696:	eb12 0e0e 	adds.w	lr, r2, lr
   1069a:	d201      	bcs.n	106a0 <__udivmoddi4+0x234>
   1069c:	45f1      	cmp	r9, lr
   1069e:	d838      	bhi.n	10712 <__udivmoddi4+0x2a6>
   106a0:	3801      	subs	r0, #1
   106a2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   106a6:	ebae 0e09 	sub.w	lr, lr, r9
   106aa:	fba0 890c 	umull	r8, r9, r0, ip
   106ae:	45ce      	cmp	lr, r9
   106b0:	4641      	mov	r1, r8
   106b2:	464c      	mov	r4, r9
   106b4:	d302      	bcc.n	106bc <__udivmoddi4+0x250>
   106b6:	d106      	bne.n	106c6 <__udivmoddi4+0x25a>
   106b8:	4543      	cmp	r3, r8
   106ba:	d204      	bcs.n	106c6 <__udivmoddi4+0x25a>
   106bc:	3801      	subs	r0, #1
   106be:	ebb8 010c 	subs.w	r1, r8, ip
   106c2:	eb69 0402 	sbc.w	r4, r9, r2
   106c6:	b315      	cbz	r5, 1070e <__udivmoddi4+0x2a2>
   106c8:	1a5a      	subs	r2, r3, r1
   106ca:	eb6e 0e04 	sbc.w	lr, lr, r4
   106ce:	40f2      	lsrs	r2, r6
   106d0:	fa0e f707 	lsl.w	r7, lr, r7
   106d4:	fa2e f306 	lsr.w	r3, lr, r6
   106d8:	2600      	movs	r6, #0
   106da:	4317      	orrs	r7, r2
   106dc:	e9c5 7300 	strd	r7, r3, [r5]
   106e0:	e70b      	b.n	104fa <__udivmoddi4+0x8e>
   106e2:	462e      	mov	r6, r5
   106e4:	4628      	mov	r0, r5
   106e6:	e708      	b.n	104fa <__udivmoddi4+0x8e>
   106e8:	1a84      	subs	r4, r0, r2
   106ea:	eb61 0103 	sbc.w	r1, r1, r3
   106ee:	2001      	movs	r0, #1
   106f0:	4688      	mov	r8, r1
   106f2:	e757      	b.n	105a4 <__udivmoddi4+0x138>
   106f4:	f1ac 0c02 	sub.w	ip, ip, #2
   106f8:	4439      	add	r1, r7
   106fa:	e724      	b.n	10546 <__udivmoddi4+0xda>
   106fc:	3802      	subs	r0, #2
   106fe:	443c      	add	r4, r7
   10700:	e734      	b.n	1056c <__udivmoddi4+0x100>
   10702:	3802      	subs	r0, #2
   10704:	443c      	add	r4, r7
   10706:	e6ee      	b.n	104e6 <__udivmoddi4+0x7a>
   10708:	3e02      	subs	r6, #2
   1070a:	443b      	add	r3, r7
   1070c:	e6d9      	b.n	104c2 <__udivmoddi4+0x56>
   1070e:	462e      	mov	r6, r5
   10710:	e6f3      	b.n	104fa <__udivmoddi4+0x8e>
   10712:	3802      	subs	r0, #2
   10714:	4496      	add	lr, r2
   10716:	e7c4      	b.n	106a2 <__udivmoddi4+0x236>
   10718:	3802      	subs	r0, #2
   1071a:	4439      	add	r1, r7
   1071c:	e76a      	b.n	105f4 <__udivmoddi4+0x188>
   1071e:	f1aa 0a02 	sub.w	sl, sl, #2
   10722:	4496      	add	lr, r2
   10724:	e7aa      	b.n	1067c <__udivmoddi4+0x210>
   10726:	3e02      	subs	r6, #2
   10728:	4439      	add	r1, r7
   1072a:	e776      	b.n	1061a <__udivmoddi4+0x1ae>

0001072c <__aeabi_idiv0>:
   1072c:	4770      	bx	lr
   1072e:	bf00      	nop

00010730 <__gnu_cmse_nonsecure_call>:
   10730:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
   10734:	4627      	mov	r7, r4
   10736:	46a0      	mov	r8, r4
   10738:	46a1      	mov	r9, r4
   1073a:	46a2      	mov	sl, r4
   1073c:	46a3      	mov	fp, r4
   1073e:	46a4      	mov	ip, r4
   10740:	ed2d 8b10 	vpush	{d8-d15}
   10744:	f04f 0500 	mov.w	r5, #0
   10748:	ec45 5b18 	vmov	d8, r5, r5
   1074c:	ec45 5a19 	vmov	s18, s19, r5, r5
   10750:	ec45 5a1a 	vmov	s20, s21, r5, r5
   10754:	ec45 5a1b 	vmov	s22, s23, r5, r5
   10758:	ec45 5a1c 	vmov	s24, s25, r5, r5
   1075c:	ec45 5a1d 	vmov	s26, s27, r5, r5
   10760:	ec45 5a1e 	vmov	s28, s29, r5, r5
   10764:	ec45 5a1f 	vmov	s30, s31, r5, r5
   10768:	eef1 5a10 	vmrs	r5, fpscr
   1076c:	f64f 7660 	movw	r6, #65376	; 0xff60
   10770:	f6c0 76ff 	movt	r6, #4095	; 0xfff
   10774:	4035      	ands	r5, r6
   10776:	eee1 5a10 	vmsr	fpscr, r5
   1077a:	f384 8800 	msr	CPSR_f, r4
   1077e:	4625      	mov	r5, r4
   10780:	4626      	mov	r6, r4
   10782:	47a4      	blxns	r4
   10784:	ecbd 8b10 	vpop	{d8-d15}
   10788:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0001078c <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
   1078c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10790:	b087      	sub	sp, #28
   10792:	460f      	mov	r7, r1
   10794:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
   10796:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
   10798:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   1079a:	2514      	movs	r5, #20
{
   1079c:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
   1079e:	4698      	mov	r8, r3
{
   107a0:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   107a4:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
   107a8:	4c1e      	ldr	r4, [pc, #120]	; (10824 <print_digits+0x98>)
   107aa:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   107ae:	ea50 0301 	orrs.w	r3, r0, r1
   107b2:	d11a      	bne.n	107ea <print_digits+0x5e>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
   107b4:	2d14      	cmp	r5, #20
		buf[i] = '0';
   107b6:	bf08      	it	eq
   107b8:	2330      	moveq	r3, #48	; 0x30
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   107ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
   107bc:	bf18      	it	ne
   107be:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   107c0:	442c      	add	r4, r5
		buf[i] = '0';
   107c2:	bf08      	it	eq
   107c4:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   107c8:	2c15      	cmp	r4, #21
   107ca:	d01b      	beq.n	10804 <print_digits+0x78>
   107cc:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
   107ce:	2c00      	cmp	r4, #0
   107d0:	dc1a      	bgt.n	10808 <print_digits+0x7c>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
   107d2:	f81d 0005 	ldrb.w	r0, [sp, r5]
   107d6:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
   107d8:	3501      	adds	r5, #1
		out(buf[i], ctx);
   107da:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
   107dc:	2d15      	cmp	r5, #21
   107de:	d1f8      	bne.n	107d2 <print_digits+0x46>
	}
	for (/**/; pad > 0; pad--) {
   107e0:	2c00      	cmp	r4, #0
   107e2:	dc19      	bgt.n	10818 <print_digits+0x8c>
		out(pad_char, ctx);
	}
}
   107e4:	b007      	add	sp, #28
   107e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
   107ea:	4642      	mov	r2, r8
   107ec:	464b      	mov	r3, r9
   107ee:	f7ff fe25 	bl	1043c <__aeabi_uldivmod>
   107f2:	4684      	mov	ip, r0
   107f4:	460b      	mov	r3, r1
   107f6:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
   107f8:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
   107fa:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
   107fe:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   10800:	3d01      	subs	r5, #1
   10802:	e7d4      	b.n	107ae <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   10804:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
   10806:	e7e4      	b.n	107d2 <print_digits+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
   10808:	f1bb 0f00 	cmp.w	fp, #0
   1080c:	d0e1      	beq.n	107d2 <print_digits+0x46>
		out(pad_char, ctx);
   1080e:	4639      	mov	r1, r7
   10810:	4650      	mov	r0, sl
   10812:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
   10814:	3c01      	subs	r4, #1
   10816:	e7da      	b.n	107ce <print_digits+0x42>
		out(pad_char, ctx);
   10818:	4639      	mov	r1, r7
   1081a:	4650      	mov	r0, sl
   1081c:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
   1081e:	3c01      	subs	r4, #1
   10820:	e7de      	b.n	107e0 <print_digits+0x54>
   10822:	bf00      	nop
   10824:	000155f1 	.word	0x000155f1

00010828 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   10828:	680b      	ldr	r3, [r1, #0]
   1082a:	3301      	adds	r3, #1
   1082c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1082e:	4b01      	ldr	r3, [pc, #4]	; (10834 <char_out+0xc>)
   10830:	681b      	ldr	r3, [r3, #0]
   10832:	4718      	bx	r3
   10834:	20000000 	.word	0x20000000

00010838 <__printk_hook_install>:
	_char_out = fn;
   10838:	4b01      	ldr	r3, [pc, #4]	; (10840 <__printk_hook_install+0x8>)
   1083a:	6018      	str	r0, [r3, #0]
}
   1083c:	4770      	bx	lr
   1083e:	bf00      	nop
   10840:	20000000 	.word	0x20000000

00010844 <z_vprintk>:
{
   10844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   10848:	2600      	movs	r6, #0
{
   1084a:	4605      	mov	r5, r0
   1084c:	468b      	mov	fp, r1
   1084e:	461c      	mov	r4, r3
	int min_width = -1;
   10850:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
   10854:	4637      	mov	r7, r6
{
   10856:	b087      	sub	sp, #28
   10858:	f102 3aff 	add.w	sl, r2, #4294967295
			might_format = 0;
   1085c:	f04f 0900 	mov.w	r9, #0
					break;
   10860:	e007      	b.n	10872 <z_vprintk+0x2e>
		if (!might_format) {
   10862:	f1b9 0f00 	cmp.w	r9, #0
   10866:	d10b      	bne.n	10880 <z_vprintk+0x3c>
			if (*fmt != '%') {
   10868:	2825      	cmp	r0, #37	; 0x25
   1086a:	f000 810a 	beq.w	10a82 <z_vprintk+0x23e>
				out((int)*fmt, ctx);
   1086e:	4659      	mov	r1, fp
   10870:	47a8      	blx	r5
	while (*fmt) {
   10872:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   10876:	2800      	cmp	r0, #0
   10878:	d1f3      	bne.n	10862 <z_vprintk+0x1e>
}
   1087a:	b007      	add	sp, #28
   1087c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   10880:	287a      	cmp	r0, #122	; 0x7a
   10882:	d80a      	bhi.n	1089a <z_vprintk+0x56>
   10884:	2862      	cmp	r0, #98	; 0x62
   10886:	d810      	bhi.n	108aa <z_vprintk+0x66>
   10888:	2830      	cmp	r0, #48	; 0x30
   1088a:	d051      	beq.n	10930 <z_vprintk+0xec>
   1088c:	d844      	bhi.n	10918 <z_vprintk+0xd4>
   1088e:	2825      	cmp	r0, #37	; 0x25
   10890:	f000 80f5 	beq.w	10a7e <z_vprintk+0x23a>
   10894:	282d      	cmp	r0, #45	; 0x2d
   10896:	f000 80fb 	beq.w	10a90 <z_vprintk+0x24c>
					out((int)'%', ctx);
   1089a:	4659      	mov	r1, fp
   1089c:	2025      	movs	r0, #37	; 0x25
   1089e:	47a8      	blx	r5
					out((int)*fmt, ctx);
   108a0:	4659      	mov	r1, fp
   108a2:	f89a 0000 	ldrb.w	r0, [sl]
   108a6:	47a8      	blx	r5
   108a8:	e7d8      	b.n	1085c <z_vprintk+0x18>
   108aa:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   108ae:	2b17      	cmp	r3, #23
   108b0:	d8f3      	bhi.n	1089a <z_vprintk+0x56>
   108b2:	a201      	add	r2, pc, #4	; (adr r2, 108b8 <z_vprintk+0x74>)
   108b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   108b8:	00010a77 	.word	0x00010a77
   108bc:	00010979 	.word	0x00010979
   108c0:	0001089b 	.word	0x0001089b
   108c4:	0001089b 	.word	0x0001089b
   108c8:	0001089b 	.word	0x0001089b
   108cc:	0001095b 	.word	0x0001095b
   108d0:	00010979 	.word	0x00010979
   108d4:	0001089b 	.word	0x0001089b
   108d8:	0001089b 	.word	0x0001089b
   108dc:	0001095b 	.word	0x0001095b
   108e0:	0001089b 	.word	0x0001089b
   108e4:	0001089b 	.word	0x0001089b
   108e8:	0001089b 	.word	0x0001089b
   108ec:	000109f3 	.word	0x000109f3
   108f0:	0001089b 	.word	0x0001089b
   108f4:	0001089b 	.word	0x0001089b
   108f8:	00010a3f 	.word	0x00010a3f
   108fc:	0001089b 	.word	0x0001089b
   10900:	00010979 	.word	0x00010979
   10904:	0001089b 	.word	0x0001089b
   10908:	0001089b 	.word	0x0001089b
   1090c:	00010921 	.word	0x00010921
   10910:	0001089b 	.word	0x0001089b
   10914:	0001095b 	.word	0x0001095b
			switch (*fmt) {
   10918:	2839      	cmp	r0, #57	; 0x39
   1091a:	d915      	bls.n	10948 <z_vprintk+0x104>
   1091c:	2858      	cmp	r0, #88	; 0x58
   1091e:	d1bc      	bne.n	1089a <z_vprintk+0x56>
				if (*fmt == 'p') {
   10920:	f89a 3000 	ldrb.w	r3, [sl]
   10924:	2b70      	cmp	r3, #112	; 0x70
   10926:	d16e      	bne.n	10a06 <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
   10928:	2300      	movs	r3, #0
   1092a:	f854 2b04 	ldr.w	r2, [r4], #4
   1092e:	e075      	b.n	10a1c <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
   10930:	f1b8 0f00 	cmp.w	r8, #0
   10934:	da0b      	bge.n	1094e <z_vprintk+0x10a>
   10936:	2f00      	cmp	r7, #0
   10938:	f000 80ac 	beq.w	10a94 <z_vprintk+0x250>
					min_width = *fmt - '0';
   1093c:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   10940:	2f00      	cmp	r7, #0
   10942:	bf08      	it	eq
   10944:	2702      	moveq	r7, #2
   10946:	e794      	b.n	10872 <z_vprintk+0x2e>
				if (min_width < 0) {
   10948:	f1b8 0f00 	cmp.w	r8, #0
   1094c:	dbf6      	blt.n	1093c <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   1094e:	230a      	movs	r3, #10
   10950:	fb03 0808 	mla	r8, r3, r8, r0
   10954:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   10958:	e7f2      	b.n	10940 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
   1095a:	2868      	cmp	r0, #104	; 0x68
   1095c:	d103      	bne.n	10966 <z_vprintk+0x122>
   1095e:	2e68      	cmp	r6, #104	; 0x68
   10960:	d106      	bne.n	10970 <z_vprintk+0x12c>
					length_mod = 'H';
   10962:	2648      	movs	r6, #72	; 0x48
   10964:	e785      	b.n	10872 <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   10966:	286c      	cmp	r0, #108	; 0x6c
   10968:	d102      	bne.n	10970 <z_vprintk+0x12c>
   1096a:	2e6c      	cmp	r6, #108	; 0x6c
   1096c:	f000 8094 	beq.w	10a98 <z_vprintk+0x254>
				} else if (length_mod == 0) {
   10970:	2e00      	cmp	r6, #0
   10972:	d192      	bne.n	1089a <z_vprintk+0x56>
   10974:	4606      	mov	r6, r0
   10976:	e77c      	b.n	10872 <z_vprintk+0x2e>
				if (length_mod == 'z') {
   10978:	2e7a      	cmp	r6, #122	; 0x7a
   1097a:	d106      	bne.n	1098a <z_vprintk+0x146>
					d = va_arg(ap, long);
   1097c:	46a1      	mov	r9, r4
   1097e:	f859 2b04 	ldr.w	r2, [r9], #4
   10982:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   10984:	2875      	cmp	r0, #117	; 0x75
   10986:	d123      	bne.n	109d0 <z_vprintk+0x18c>
   10988:	e00f      	b.n	109aa <z_vprintk+0x166>
				} else if (length_mod == 'l') {
   1098a:	2e6c      	cmp	r6, #108	; 0x6c
   1098c:	d0f6      	beq.n	1097c <z_vprintk+0x138>
				} else if (length_mod == 'L') {
   1098e:	2e4c      	cmp	r6, #76	; 0x4c
   10990:	d105      	bne.n	1099e <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
   10992:	3407      	adds	r4, #7
   10994:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
   10998:	e8f9 2302 	ldrd	r2, r3, [r9], #8
   1099c:	e7f2      	b.n	10984 <z_vprintk+0x140>
				} else if (*fmt == 'u') {
   1099e:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
   109a0:	6822      	ldr	r2, [r4, #0]
   109a2:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
   109a6:	d112      	bne.n	109ce <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
   109a8:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   109aa:	1ef8      	subs	r0, r7, #3
   109ac:	bf18      	it	ne
   109ae:	2001      	movne	r0, #1
   109b0:	2f01      	cmp	r7, #1
   109b2:	bf0c      	ite	eq
   109b4:	2430      	moveq	r4, #48	; 0x30
   109b6:	2420      	movne	r4, #32
   109b8:	9001      	str	r0, [sp, #4]
   109ba:	200a      	movs	r0, #10
   109bc:	e9cd 4802 	strd	r4, r8, [sp, #8]
   109c0:	9000      	str	r0, [sp, #0]
   109c2:	4659      	mov	r1, fp
   109c4:	4628      	mov	r0, r5
   109c6:	f7ff fee1 	bl	1078c <print_digits>
}
   109ca:	464c      	mov	r4, r9
   109cc:	e746      	b.n	1085c <z_vprintk+0x18>
					d = va_arg(ap, int);
   109ce:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   109d0:	2a00      	cmp	r2, #0
   109d2:	f173 0100 	sbcs.w	r1, r3, #0
   109d6:	dae8      	bge.n	109aa <z_vprintk+0x166>
					out((int)'-', ctx);
   109d8:	4659      	mov	r1, fp
   109da:	202d      	movs	r0, #45	; 0x2d
   109dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   109e0:	47a8      	blx	r5
					d = -d;
   109e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   109e6:	4252      	negs	r2, r2
   109e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   109ec:	f108 38ff 	add.w	r8, r8, #4294967295
   109f0:	e7db      	b.n	109aa <z_vprintk+0x166>
				out('0', ctx);
   109f2:	4659      	mov	r1, fp
   109f4:	2030      	movs	r0, #48	; 0x30
   109f6:	47a8      	blx	r5
				out('x', ctx);
   109f8:	4659      	mov	r1, fp
   109fa:	2078      	movs	r0, #120	; 0x78
   109fc:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
   109fe:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
   10a02:	2701      	movs	r7, #1
   10a04:	e78c      	b.n	10920 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   10a06:	2e6c      	cmp	r6, #108	; 0x6c
   10a08:	d08e      	beq.n	10928 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
   10a0a:	2e4c      	cmp	r6, #76	; 0x4c
   10a0c:	d18c      	bne.n	10928 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
   10a0e:	1de3      	adds	r3, r4, #7
   10a10:	f023 0307 	bic.w	r3, r3, #7
   10a14:	461c      	mov	r4, r3
   10a16:	685b      	ldr	r3, [r3, #4]
   10a18:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   10a1c:	1ef8      	subs	r0, r7, #3
   10a1e:	bf18      	it	ne
   10a20:	2001      	movne	r0, #1
   10a22:	2f01      	cmp	r7, #1
   10a24:	bf0c      	ite	eq
   10a26:	2130      	moveq	r1, #48	; 0x30
   10a28:	2120      	movne	r1, #32
   10a2a:	e9cd 1802 	strd	r1, r8, [sp, #8]
   10a2e:	2110      	movs	r1, #16
   10a30:	9001      	str	r0, [sp, #4]
   10a32:	9100      	str	r1, [sp, #0]
   10a34:	4628      	mov	r0, r5
   10a36:	4659      	mov	r1, fp
   10a38:	f7ff fea8 	bl	1078c <print_digits>
   10a3c:	e70e      	b.n	1085c <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
   10a3e:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   10a42:	4699      	mov	r9, r3
   10a44:	464a      	mov	r2, r9
   10a46:	f819 0b01 	ldrb.w	r0, [r9], #1
   10a4a:	b978      	cbnz	r0, 10a6c <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
   10a4c:	2f03      	cmp	r7, #3
   10a4e:	d125      	bne.n	10a9c <z_vprintk+0x258>
					int remaining = min_width - (s - start);
   10a50:	eba2 0903 	sub.w	r9, r2, r3
   10a54:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
   10a58:	f1b9 0f00 	cmp.w	r9, #0
   10a5c:	f77f aefe 	ble.w	1085c <z_vprintk+0x18>
						out(' ', ctx);
   10a60:	4659      	mov	r1, fp
   10a62:	2020      	movs	r0, #32
   10a64:	47a8      	blx	r5
   10a66:	f109 39ff 	add.w	r9, r9, #4294967295
   10a6a:	e7f5      	b.n	10a58 <z_vprintk+0x214>
					out((int)(*s++), ctx);
   10a6c:	4659      	mov	r1, fp
   10a6e:	9304      	str	r3, [sp, #16]
   10a70:	47a8      	blx	r5
   10a72:	9b04      	ldr	r3, [sp, #16]
   10a74:	e7e6      	b.n	10a44 <z_vprintk+0x200>
				out(c, ctx);
   10a76:	4659      	mov	r1, fp
   10a78:	f854 0b04 	ldr.w	r0, [r4], #4
   10a7c:	e713      	b.n	108a6 <z_vprintk+0x62>
				out((int)'%', ctx);
   10a7e:	4659      	mov	r1, fp
   10a80:	e711      	b.n	108a6 <z_vprintk+0x62>
				length_mod = 0;
   10a82:	464e      	mov	r6, r9
				padding = PAD_NONE;
   10a84:	464f      	mov	r7, r9
				min_width = -1;
   10a86:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
   10a8a:	f04f 0901 	mov.w	r9, #1
   10a8e:	e6f0      	b.n	10872 <z_vprintk+0x2e>
			switch (*fmt) {
   10a90:	2703      	movs	r7, #3
   10a92:	e6ee      	b.n	10872 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   10a94:	2701      	movs	r7, #1
   10a96:	e6ec      	b.n	10872 <z_vprintk+0x2e>
					length_mod = 'L';
   10a98:	264c      	movs	r6, #76	; 0x4c
   10a9a:	e6ea      	b.n	10872 <z_vprintk+0x2e>
			might_format = 0;
   10a9c:	4681      	mov	r9, r0
   10a9e:	e6e8      	b.n	10872 <z_vprintk+0x2e>

00010aa0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   10aa0:	b507      	push	{r0, r1, r2, lr}
   10aa2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   10aa4:	2100      	movs	r1, #0
{
   10aa6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   10aa8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
   10aaa:	4803      	ldr	r0, [pc, #12]	; (10ab8 <vprintk+0x18>)
   10aac:	a901      	add	r1, sp, #4
   10aae:	f7ff fec9 	bl	10844 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   10ab2:	b003      	add	sp, #12
   10ab4:	f85d fb04 	ldr.w	pc, [sp], #4
   10ab8:	00010829 	.word	0x00010829

00010abc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10ac0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   10ac4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10ac6:	f019 0808 	ands.w	r8, r9, #8
{
   10aca:	4693      	mov	fp, r2
	if (processing) {
   10acc:	d00e      	beq.n	10aec <process_event+0x30>
		if (evt == EVT_COMPLETE) {
   10ace:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10ad0:	bf0c      	ite	eq
   10ad2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10ad6:	f049 0920 	orrne.w	r9, r9, #32
   10ada:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10ade:	f38b 8811 	msr	BASEPRI, fp
   10ae2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10ae6:	b003      	add	sp, #12
   10ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
   10aec:	f8df a198 	ldr.w	sl, [pc, #408]	; 10c88 <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10af0:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   10af4:	2902      	cmp	r1, #2
   10af6:	d107      	bne.n	10b08 <process_event+0x4c>
			evt = process_recheck(mgr);
   10af8:	4620      	mov	r0, r4
   10afa:	f003 fd9c 	bl	14636 <process_recheck>
		if (evt == EVT_NOP) {
   10afe:	2800      	cmp	r0, #0
   10b00:	d0ed      	beq.n	10ade <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   10b02:	2801      	cmp	r0, #1
   10b04:	8b23      	ldrh	r3, [r4, #24]
   10b06:	d14d      	bne.n	10ba4 <process_event+0xe8>
			res = mgr->last_res;
   10b08:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10b0a:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   10b0c:	2f00      	cmp	r7, #0
   10b0e:	da15      	bge.n	10b3c <process_event+0x80>
		*clients = mgr->clients;
   10b10:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10b12:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   10b16:	e9c4 8800 	strd	r8, r8, [r4]
   10b1a:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10b1e:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   10b20:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10b22:	8b21      	ldrh	r1, [r4, #24]
   10b24:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10b28:	454a      	cmp	r2, r9
   10b2a:	d002      	beq.n	10b32 <process_event+0x76>
		if (do_monitors
   10b2c:	68a3      	ldr	r3, [r4, #8]
   10b2e:	2b00      	cmp	r3, #0
   10b30:	d159      	bne.n	10be6 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   10b32:	b90d      	cbnz	r5, 10b38 <process_event+0x7c>
		    || (transit != NULL)) {
   10b34:	2e00      	cmp	r6, #0
   10b36:	d071      	beq.n	10c1c <process_event+0x160>
   10b38:	2300      	movs	r3, #0
   10b3a:	e055      	b.n	10be8 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10b3c:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   10b40:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   10b42:	2a01      	cmp	r2, #1
   10b44:	d81f      	bhi.n	10b86 <process_event+0xca>
		*clients = mgr->clients;
   10b46:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   10b4a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   10b4c:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   10b4e:	b289      	uxth	r1, r1
	list->tail = NULL;
   10b50:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   10b54:	d10c      	bne.n	10b70 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10b56:	2d00      	cmp	r5, #0
   10b58:	462b      	mov	r3, r5
   10b5a:	bf38      	it	cc
   10b5c:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10b5e:	b12b      	cbz	r3, 10b6c <process_event+0xb0>
				mgr->refs += 1U;
   10b60:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10b62:	681b      	ldr	r3, [r3, #0]
   10b64:	3201      	adds	r2, #1
   10b66:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10b68:	2b00      	cmp	r3, #0
   10b6a:	d1f8      	bne.n	10b5e <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10b6c:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   10b70:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   10b72:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10b74:	f003 fd5f 	bl	14636 <process_recheck>
   10b78:	2800      	cmp	r0, #0
   10b7a:	d0d1      	beq.n	10b20 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10b7c:	8b23      	ldrh	r3, [r4, #24]
   10b7e:	f043 0320 	orr.w	r3, r3, #32
   10b82:	8323      	strh	r3, [r4, #24]
   10b84:	e7cc      	b.n	10b20 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10b86:	2b04      	cmp	r3, #4
   10b88:	d10a      	bne.n	10ba0 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10b8a:	f021 0107 	bic.w	r1, r1, #7
   10b8e:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   10b90:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   10b92:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10b94:	f003 fd4f 	bl	14636 <process_recheck>
   10b98:	b110      	cbz	r0, 10ba0 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10b9a:	f041 0120 	orr.w	r1, r1, #32
   10b9e:	8321      	strh	r1, [r4, #24]
   10ba0:	2500      	movs	r5, #0
   10ba2:	e7bd      	b.n	10b20 <process_event+0x64>
		} else if (evt == EVT_START) {
   10ba4:	2803      	cmp	r0, #3
   10ba6:	d109      	bne.n	10bbc <process_event+0x100>
			transit = mgr->transitions->start;
   10ba8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10baa:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   10bae:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10bb0:	f043 0306 	orr.w	r3, r3, #6
}
   10bb4:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   10bb6:	8323      	strh	r3, [r4, #24]
		res = 0;
   10bb8:	462f      	mov	r7, r5
   10bba:	e7b2      	b.n	10b22 <process_event+0x66>
		} else if (evt == EVT_STOP) {
   10bbc:	2804      	cmp	r0, #4
   10bbe:	d106      	bne.n	10bce <process_event+0x112>
			transit = mgr->transitions->stop;
   10bc0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10bc2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   10bc6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10bc8:	f043 0304 	orr.w	r3, r3, #4
   10bcc:	e7f2      	b.n	10bb4 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   10bce:	2805      	cmp	r0, #5
   10bd0:	d106      	bne.n	10be0 <process_event+0x124>
			transit = mgr->transitions->reset;
   10bd2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10bd4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   10bd8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10bda:	f043 0305 	orr.w	r3, r3, #5
   10bde:	e7e9      	b.n	10bb4 <process_event+0xf8>
   10be0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   10be2:	462e      	mov	r6, r5
   10be4:	e7e8      	b.n	10bb8 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   10be6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10be8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   10bec:	8321      	strh	r1, [r4, #24]
   10bee:	f38b 8811 	msr	BASEPRI, fp
   10bf2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10bf6:	bb03      	cbnz	r3, 10c3a <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   10bf8:	2d00      	cmp	r5, #0
   10bfa:	d134      	bne.n	10c66 <process_event+0x1aa>
			if (transit != NULL) {
   10bfc:	b116      	cbz	r6, 10c04 <process_event+0x148>
				transit(mgr, transition_complete);
   10bfe:	4651      	mov	r1, sl
   10c00:	4620      	mov	r0, r4
   10c02:	47b0      	blx	r6
	__asm__ volatile(
   10c04:	f04f 0320 	mov.w	r3, #32
   10c08:	f3ef 8b11 	mrs	fp, BASEPRI
   10c0c:	f383 8811 	msr	BASEPRI, r3
   10c10:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10c14:	8b23      	ldrh	r3, [r4, #24]
   10c16:	f023 0308 	bic.w	r3, r3, #8
   10c1a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10c1c:	8b23      	ldrh	r3, [r4, #24]
   10c1e:	06da      	lsls	r2, r3, #27
   10c20:	d52a      	bpl.n	10c78 <process_event+0x1bc>
			evt = EVT_COMPLETE;
   10c22:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10c24:	f023 0310 	bic.w	r3, r3, #16
   10c28:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   10c2a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   10c2e:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   10c32:	2900      	cmp	r1, #0
   10c34:	f47f af5e 	bne.w	10af4 <process_event+0x38>
out:
   10c38:	e751      	b.n	10ade <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10c3a:	68a1      	ldr	r1, [r4, #8]
   10c3c:	2900      	cmp	r1, #0
   10c3e:	d0db      	beq.n	10bf8 <process_event+0x13c>
	return node->next;
   10c40:	680b      	ldr	r3, [r1, #0]
   10c42:	2b00      	cmp	r3, #0
   10c44:	bf38      	it	cc
   10c46:	2300      	movcc	r3, #0
   10c48:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   10c4a:	4620      	mov	r0, r4
   10c4c:	463b      	mov	r3, r7
   10c4e:	f8d1 b004 	ldr.w	fp, [r1, #4]
   10c52:	9201      	str	r2, [sp, #4]
   10c54:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10c56:	9a01      	ldr	r2, [sp, #4]
   10c58:	f1b9 0f00 	cmp.w	r9, #0
   10c5c:	d0cc      	beq.n	10bf8 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10c5e:	4649      	mov	r1, r9
   10c60:	f8d9 3000 	ldr.w	r3, [r9]
   10c64:	e7ed      	b.n	10c42 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10c66:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   10c68:	463b      	mov	r3, r7
   10c6a:	4620      	mov	r0, r4
   10c6c:	9201      	str	r2, [sp, #4]
   10c6e:	682d      	ldr	r5, [r5, #0]
   10c70:	f003 fcfd 	bl	1466e <notify_one>
	while (!sys_slist_is_empty(list)) {
   10c74:	9a01      	ldr	r2, [sp, #4]
   10c76:	e7bf      	b.n	10bf8 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10c78:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10c7c:	bf1e      	ittt	ne
   10c7e:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   10c82:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10c84:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   10c86:	e7d0      	b.n	10c2a <process_event+0x16e>
   10c88:	0001469b 	.word	0x0001469b

00010c8c <nordicsemi_nrf91_init>:
   10c8c:	f04f 0220 	mov.w	r2, #32
   10c90:	f3ef 8311 	mrs	r3, BASEPRI
   10c94:	f382 8811 	msr	BASEPRI, r2
   10c98:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   10c9c:	2101      	movs	r1, #1
   10c9e:	4a04      	ldr	r2, [pc, #16]	; (10cb0 <nordicsemi_nrf91_init+0x24>)
   10ca0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   10ca4:	f383 8811 	msr	BASEPRI, r3
   10ca8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   10cac:	2000      	movs	r0, #0
   10cae:	4770      	bx	lr
   10cb0:	50039000 	.word	0x50039000

00010cb4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   10cb4:	b120      	cbz	r0, 10cc0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   10cb6:	4b03      	ldr	r3, [pc, #12]	; (10cc4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   10cb8:	0180      	lsls	r0, r0, #6
   10cba:	f043 0301 	orr.w	r3, r3, #1
   10cbe:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   10cc0:	4770      	bx	lr
   10cc2:	bf00      	nop
   10cc4:	00015350 	.word	0x00015350

00010cc8 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   10cc8:	b507      	push	{r0, r1, r2, lr}
   10cca:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   10ccc:	f04f 0220 	mov.w	r2, #32
   10cd0:	f3ef 8311 	mrs	r3, BASEPRI
   10cd4:	f382 8811 	msr	BASEPRI, r2
   10cd8:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   10cdc:	f003 feda 	bl	14a94 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   10ce0:	9801      	ldr	r0, [sp, #4]
   10ce2:	f000 fff5 	bl	11cd0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   10ce6:	4803      	ldr	r0, [pc, #12]	; (10cf4 <sys_reboot+0x2c>)
   10ce8:	f003 fc98 	bl	1461c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   10cec:	f000 fe48 	bl	11980 <arch_cpu_idle>
   10cf0:	e7fc      	b.n	10cec <sys_reboot+0x24>
   10cf2:	bf00      	nop
   10cf4:	00015602 	.word	0x00015602

00010cf8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   10cf8:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   10cfa:	4806      	ldr	r0, [pc, #24]	; (10d14 <uart_console_init+0x1c>)
   10cfc:	f001 fd60 	bl	127c0 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   10d00:	4b05      	ldr	r3, [pc, #20]	; (10d18 <uart_console_init+0x20>)
   10d02:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   10d04:	4805      	ldr	r0, [pc, #20]	; (10d1c <uart_console_init+0x24>)
   10d06:	f001 fa1b 	bl	12140 <__stdout_hook_install>
	__printk_hook_install(console_out);
   10d0a:	4804      	ldr	r0, [pc, #16]	; (10d1c <uart_console_init+0x24>)
   10d0c:	f7ff fd94 	bl	10838 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   10d10:	2000      	movs	r0, #0
   10d12:	bd08      	pop	{r3, pc}
   10d14:	0001562b 	.word	0x0001562b
   10d18:	20000268 	.word	0x20000268
   10d1c:	00010d21 	.word	0x00010d21

00010d20 <console_out>:
	if ('\n' == c) {
   10d20:	280a      	cmp	r0, #10
{
   10d22:	b538      	push	{r3, r4, r5, lr}
   10d24:	4604      	mov	r4, r0
   10d26:	4d07      	ldr	r5, [pc, #28]	; (10d44 <console_out+0x24>)
	if ('\n' == c) {
   10d28:	d104      	bne.n	10d34 <console_out+0x14>
   10d2a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   10d2c:	6883      	ldr	r3, [r0, #8]
   10d2e:	210d      	movs	r1, #13
   10d30:	685b      	ldr	r3, [r3, #4]
   10d32:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   10d34:	6828      	ldr	r0, [r5, #0]
   10d36:	6883      	ldr	r3, [r0, #8]
   10d38:	b2e1      	uxtb	r1, r4
   10d3a:	685b      	ldr	r3, [r3, #4]
   10d3c:	4798      	blx	r3
}
   10d3e:	4620      	mov	r0, r4
   10d40:	bd38      	pop	{r3, r4, r5, pc}
   10d42:	bf00      	nop
   10d44:	20000268 	.word	0x20000268

00010d48 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
   10d48:	4a0e      	ldr	r2, [pc, #56]	; (10d84 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10d4a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   10d4c:	1a84      	subs	r4, r0, r2
{
   10d4e:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   10d50:	200c      	movs	r0, #12
{
   10d52:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   10d54:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   10d56:	10a3      	asrs	r3, r4, #2
   10d58:	4c0b      	ldr	r4, [pc, #44]	; (10d88 <onoff_stop+0x40>)
   10d5a:	435c      	muls	r4, r3
   10d5c:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   10d5e:	fb00 2004 	mla	r0, r0, r4, r2
   10d62:	4408      	add	r0, r1
   10d64:	f003 fe05 	bl	14972 <set_off_state>
	if (err < 0) {
   10d68:	1e01      	subs	r1, r0, #0
   10d6a:	db05      	blt.n	10d78 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   10d6c:	4b07      	ldr	r3, [pc, #28]	; (10d8c <onoff_stop+0x44>)
   10d6e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   10d72:	6863      	ldr	r3, [r4, #4]
   10d74:	4798      	blx	r3
	return 0;
   10d76:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   10d78:	4628      	mov	r0, r5
   10d7a:	4633      	mov	r3, r6
}
   10d7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   10d80:	4718      	bx	r3
   10d82:	bf00      	nop
   10d84:	2000027c 	.word	0x2000027c
   10d88:	b6db6db7 	.word	0xb6db6db7
   10d8c:	0001536c 	.word	0x0001536c

00010d90 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   10d94:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   10d96:	4e10      	ldr	r6, [pc, #64]	; (10dd8 <onoff_start+0x48>)
{
   10d98:	4680      	mov	r8, r0
	size_t offset = (size_t)(mgr - data->mgr);
   10d9a:	1b84      	subs	r4, r0, r6
   10d9c:	10a3      	asrs	r3, r4, #2
   10d9e:	4c0f      	ldr	r4, [pc, #60]	; (10ddc <onoff_start+0x4c>)
{
   10da0:	460f      	mov	r7, r1
	size_t offset = (size_t)(mgr - data->mgr);
   10da2:	435c      	muls	r4, r3
   10da4:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   10da6:	4365      	muls	r5, r4
   10da8:	f105 0040 	add.w	r0, r5, #64	; 0x40
   10dac:	2140      	movs	r1, #64	; 0x40
   10dae:	4430      	add	r0, r6
   10db0:	f003 fdf8 	bl	149a4 <set_starting_state>
	if (err < 0) {
   10db4:	1e01      	subs	r1, r0, #0
   10db6:	db09      	blt.n	10dcc <onoff_start+0x3c>
	subdata->cb = data->cb;
   10db8:	4a09      	ldr	r2, [pc, #36]	; (10de0 <onoff_start+0x50>)
   10dba:	1973      	adds	r3, r6, r5
	subdata->user_data = data->user_data;
   10dbc:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   10dc0:	4b08      	ldr	r3, [pc, #32]	; (10de4 <onoff_start+0x54>)
   10dc2:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   10dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   10dca:	4718      	bx	r3
		notify(mgr, err);
   10dcc:	4640      	mov	r0, r8
   10dce:	463b      	mov	r3, r7
}
   10dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   10dd4:	4718      	bx	r3
   10dd6:	bf00      	nop
   10dd8:	2000027c 	.word	0x2000027c
   10ddc:	b6db6db7 	.word	0xb6db6db7
   10de0:	00014a07 	.word	0x00014a07
   10de4:	0001536c 	.word	0x0001536c

00010de8 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   10de8:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10dea:	2200      	movs	r2, #0
   10dec:	2101      	movs	r1, #1
{
   10dee:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10df0:	2005      	movs	r0, #5
   10df2:	f000 fd6f 	bl	118d4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   10df6:	2005      	movs	r0, #5
   10df8:	f000 fd4e 	bl	11898 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
   10dfc:	480f      	ldr	r0, [pc, #60]	; (10e3c <clk_init+0x54>)
   10dfe:	f001 fbe9 	bl	125d4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   10e02:	4b0f      	ldr	r3, [pc, #60]	; (10e40 <clk_init+0x58>)
   10e04:	4298      	cmp	r0, r3
   10e06:	d115      	bne.n	10e34 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   10e08:	f003 fff7 	bl	14dfa <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   10e0c:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   10e0e:	490d      	ldr	r1, [pc, #52]	; (10e44 <clk_init+0x5c>)
   10e10:	4630      	mov	r0, r6
   10e12:	f003 fc60 	bl	146d6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   10e16:	2800      	cmp	r0, #0
   10e18:	db0b      	blt.n	10e32 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   10e1a:	2501      	movs	r5, #1
   10e1c:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   10e1e:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   10e20:	4908      	ldr	r1, [pc, #32]	; (10e44 <clk_init+0x5c>)
   10e22:	f104 001c 	add.w	r0, r4, #28
   10e26:	f003 fc56 	bl	146d6 <onoff_manager_init>
		if (err < 0) {
   10e2a:	2800      	cmp	r0, #0
   10e2c:	db01      	blt.n	10e32 <clk_init+0x4a>
	}

	return 0;
   10e2e:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   10e30:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   10e32:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   10e34:	f06f 0004 	mvn.w	r0, #4
   10e38:	e7fb      	b.n	10e32 <clk_init+0x4a>
   10e3a:	bf00      	nop
   10e3c:	00010e85 	.word	0x00010e85
   10e40:	0bad0000 	.word	0x0bad0000
   10e44:	0001537c 	.word	0x0001537c

00010e48 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   10e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   10e4a:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   10e4c:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   10e4e:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   10e50:	434b      	muls	r3, r1
   10e52:	480a      	ldr	r0, [pc, #40]	; (10e7c <clkstarted_handle.constprop.0+0x34>)
   10e54:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   10e56:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   10e58:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   10e5c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   10e5e:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
   10e60:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   10e62:	f003 fdbd 	bl	149e0 <set_on_state>
	if (callback) {
   10e66:	b135      	cbz	r5, 10e76 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   10e68:	462b      	mov	r3, r5
   10e6a:	9a01      	ldr	r2, [sp, #4]
   10e6c:	4804      	ldr	r0, [pc, #16]	; (10e80 <clkstarted_handle.constprop.0+0x38>)
}
   10e6e:	b002      	add	sp, #8
   10e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   10e74:	4718      	bx	r3
}
   10e76:	b002      	add	sp, #8
   10e78:	bd70      	pop	{r4, r5, r6, pc}
   10e7a:	bf00      	nop
   10e7c:	2000027c 	.word	0x2000027c
   10e80:	200000bc 	.word	0x200000bc

00010e84 <clock_event_handler>:
	switch (event) {
   10e84:	b110      	cbz	r0, 10e8c <clock_event_handler+0x8>
   10e86:	2801      	cmp	r0, #1
   10e88:	d004      	beq.n	10e94 <clock_event_handler+0x10>
   10e8a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   10e8c:	4b03      	ldr	r3, [pc, #12]	; (10e9c <clock_event_handler+0x18>)
   10e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   10e90:	075b      	lsls	r3, r3, #29
   10e92:	d101      	bne.n	10e98 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   10e94:	f7ff bfd8 	b.w	10e48 <clkstarted_handle.constprop.0>
}
   10e98:	4770      	bx	lr
   10e9a:	bf00      	nop
   10e9c:	2000027c 	.word	0x2000027c

00010ea0 <generic_hfclk_start>:
{
   10ea0:	b508      	push	{r3, lr}
   10ea2:	f04f 0320 	mov.w	r3, #32
   10ea6:	f3ef 8111 	mrs	r1, BASEPRI
   10eaa:	f383 8811 	msr	BASEPRI, r3
   10eae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   10eb2:	4a12      	ldr	r2, [pc, #72]	; (10efc <generic_hfclk_start+0x5c>)
   10eb4:	6813      	ldr	r3, [r2, #0]
   10eb6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   10eba:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   10ebe:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   10ec0:	d00c      	beq.n	10edc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   10ec2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   10ec6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   10eca:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   10ece:	f013 0301 	ands.w	r3, r3, #1
   10ed2:	d003      	beq.n	10edc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   10ed4:	480a      	ldr	r0, [pc, #40]	; (10f00 <generic_hfclk_start+0x60>)
   10ed6:	f003 fd83 	bl	149e0 <set_on_state>
			already_started = true;
   10eda:	2301      	movs	r3, #1
	__asm__ volatile(
   10edc:	f381 8811 	msr	BASEPRI, r1
   10ee0:	f3bf 8f6f 	isb	sy
	if (already_started) {
   10ee4:	b123      	cbz	r3, 10ef0 <generic_hfclk_start+0x50>
}
   10ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   10eea:	2000      	movs	r0, #0
   10eec:	f7ff bfac 	b.w	10e48 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   10ef0:	2001      	movs	r0, #1
}
   10ef2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10ef6:	f001 bb7d 	b.w	125f4 <nrfx_clock_start>
   10efa:	bf00      	nop
   10efc:	200002cc 	.word	0x200002cc
   10f00:	200002bc 	.word	0x200002bc

00010f04 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10f04:	4b07      	ldr	r3, [pc, #28]	; (10f24 <generic_hfclk_stop+0x20>)
   10f06:	e8d3 2fef 	ldaex	r2, [r3]
   10f0a:	f022 0102 	bic.w	r1, r2, #2
   10f0e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10f12:	2800      	cmp	r0, #0
   10f14:	d1f7      	bne.n	10f06 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   10f16:	07d3      	lsls	r3, r2, #31
   10f18:	d402      	bmi.n	10f20 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   10f1a:	2001      	movs	r0, #1
   10f1c:	f001 bb9c 	b.w	12658 <nrfx_clock_stop>
}
   10f20:	4770      	bx	lr
   10f22:	bf00      	nop
   10f24:	200002cc 	.word	0x200002cc

00010f28 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10f28:	2300      	movs	r3, #0
   10f2a:	2201      	movs	r2, #1
{
   10f2c:	b510      	push	{r4, lr}
   10f2e:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10f30:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
   10f34:	9301      	str	r3, [sp, #4]
   10f36:	4b09      	ldr	r3, [pc, #36]	; (10f5c <api_blocking_start+0x34>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10f38:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
   10f3a:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10f3c:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
   10f40:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
   10f44:	f003 fd86 	bl	14a54 <api_start>
	if (err < 0) {
   10f48:	2800      	cmp	r0, #0
   10f4a:	db05      	blt.n	10f58 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   10f4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   10f50:	2300      	movs	r3, #0
   10f52:	4620      	mov	r0, r4
   10f54:	f002 fa02 	bl	1335c <z_impl_k_sem_take>
}
   10f58:	b008      	add	sp, #32
   10f5a:	bd10      	pop	{r4, pc}
   10f5c:	00014a1b 	.word	0x00014a1b

00010f60 <z_nrf_clock_control_lf_on>:
{
   10f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10f64:	2201      	movs	r2, #1
   10f66:	4606      	mov	r6, r0
   10f68:	4939      	ldr	r1, [pc, #228]	; (11050 <z_nrf_clock_control_lf_on+0xf0>)
   10f6a:	e8d1 3fef 	ldaex	r3, [r1]
   10f6e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   10f72:	2800      	cmp	r0, #0
   10f74:	d1f9      	bne.n	10f6a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   10f76:	b933      	cbnz	r3, 10f86 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   10f78:	4936      	ldr	r1, [pc, #216]	; (11054 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   10f7a:	4837      	ldr	r0, [pc, #220]	; (11058 <z_nrf_clock_control_lf_on+0xf8>)
   10f7c:	604b      	str	r3, [r1, #4]
   10f7e:	60cb      	str	r3, [r1, #12]
   10f80:	608a      	str	r2, [r1, #8]
   10f82:	f003 fbbb 	bl	146fc <onoff_request>
	switch (start_mode) {
   10f86:	1e73      	subs	r3, r6, #1
   10f88:	2b01      	cmp	r3, #1
   10f8a:	d832      	bhi.n	10ff2 <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   10f8c:	2e01      	cmp	r6, #1
   10f8e:	d107      	bne.n	10fa0 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   10f90:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   10f94:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   10f98:	f003 0303 	and.w	r3, r3, #3
   10f9c:	2b02      	cmp	r3, #2
   10f9e:	d028      	beq.n	10ff2 <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10fa0:	f004 f822 	bl	14fe8 <k_is_in_isr>
   10fa4:	4604      	mov	r4, r0
   10fa6:	b918      	cbnz	r0, 10fb0 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
   10fa8:	4b2c      	ldr	r3, [pc, #176]	; (1105c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   10faa:	781b      	ldrb	r3, [r3, #0]
   10fac:	2b00      	cmp	r3, #0
   10fae:	d147      	bne.n	11040 <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
   10fb0:	f04f 0320 	mov.w	r3, #32
   10fb4:	f3ef 8511 	mrs	r5, BASEPRI
   10fb8:	f383 8811 	msr	BASEPRI, r3
   10fbc:	f3bf 8f6f 	isb	sy
   10fc0:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10fc2:	4f27      	ldr	r7, [pc, #156]	; (11060 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10fc4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 11064 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10fc8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 11068 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10fcc:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   10fd0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   10fd4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   10fd8:	03d2      	lsls	r2, r2, #15
   10fda:	d50c      	bpl.n	10ff6 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   10fdc:	f003 0303 	and.w	r3, r3, #3
   10fe0:	2b02      	cmp	r3, #2
   10fe2:	d001      	beq.n	10fe8 <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   10fe4:	2e01      	cmp	r6, #1
   10fe6:	d106      	bne.n	10ff6 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   10fe8:	b324      	cbz	r4, 11034 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
   10fea:	f385 8811 	msr	BASEPRI, r5
   10fee:	f3bf 8f6f 	isb	sy
}
   10ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   10ff6:	b1c4      	cbz	r4, 1102a <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   10ff8:	4628      	mov	r0, r5
   10ffa:	f000 fccf 	bl	1199c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   10ffe:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   11002:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   11006:	b2db      	uxtb	r3, r3
   11008:	2b01      	cmp	r3, #1
   1100a:	d1df      	bne.n	10fcc <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1100c:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1100e:	2900      	cmp	r1, #0
   11010:	d0dc      	beq.n	10fcc <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11012:	2100      	movs	r1, #0
   11014:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   11016:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   11018:	2102      	movs	r1, #2
   1101a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   1101e:	2220      	movs	r2, #32
   11020:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11024:	f8c9 3000 	str.w	r3, [r9]
}
   11028:	e7d0      	b.n	10fcc <z_nrf_clock_control_lf_on+0x6c>
	return z_impl_k_sleep(timeout);
   1102a:	2100      	movs	r1, #0
   1102c:	2021      	movs	r0, #33	; 0x21
   1102e:	f002 f94f 	bl	132d0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   11032:	e7e4      	b.n	10ffe <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   11034:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11038:	2202      	movs	r2, #2
   1103a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1103e:	e7d8      	b.n	10ff2 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
   11040:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11044:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   11046:	4605      	mov	r5, r0
   11048:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1104c:	e7b9      	b.n	10fc2 <z_nrf_clock_control_lf_on+0x62>
   1104e:	bf00      	nop
   11050:	200002d0 	.word	0x200002d0
   11054:	2000026c 	.word	0x2000026c
   11058:	20000298 	.word	0x20000298
   1105c:	2000086d 	.word	0x2000086d
   11060:	50005104 	.word	0x50005104
   11064:	e000e100 	.word	0xe000e100
   11068:	50005008 	.word	0x50005008

0001106c <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   1106c:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1106e:	4b08      	ldr	r3, [pc, #32]	; (11090 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   11070:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   11074:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   11078:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   1107c:	4290      	cmp	r0, r2
   1107e:	d100      	bne.n	11082 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   11080:	4770      	bx	lr
   11082:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   11086:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   11088:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1108c:	e7f2      	b.n	11074 <handle_next_cycle_case+0x8>
   1108e:	bf00      	nop
   11090:	50015000 	.word	0x50015000

00011094 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11094:	2200      	movs	r2, #0
   11096:	4b07      	ldr	r3, [pc, #28]	; (110b4 <rtc_nrf_isr+0x20>)
   11098:	601a      	str	r2, [r3, #0]
   1109a:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   1109c:	4a06      	ldr	r2, [pc, #24]	; (110b8 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   1109e:	4b07      	ldr	r3, [pc, #28]	; (110bc <rtc_nrf_isr+0x28>)
   110a0:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   110a4:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   110a6:	1ac0      	subs	r0, r0, r3
   110a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   110ac:	4403      	add	r3, r0
   110ae:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   110b0:	f002 bae0 	b.w	13674 <z_clock_announce>
   110b4:	50015140 	.word	0x50015140
   110b8:	200002d4 	.word	0x200002d4
   110bc:	50015000 	.word	0x50015000

000110c0 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   110c0:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   110c2:	2400      	movs	r4, #0
   110c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   110c8:	4d0e      	ldr	r5, [pc, #56]	; (11104 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   110ca:	4b0f      	ldr	r3, [pc, #60]	; (11108 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   110cc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   110d0:	601c      	str	r4, [r3, #0]
   110d2:	681b      	ldr	r3, [r3, #0]
   110d4:	4b0d      	ldr	r3, [pc, #52]	; (1110c <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
   110d6:	2101      	movs	r1, #1
   110d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   110dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   110e0:	4622      	mov	r2, r4
   110e2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   110e6:	2015      	movs	r0, #21
   110e8:	f000 fbf4 	bl	118d4 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
   110ec:	2015      	movs	r0, #21
   110ee:	f000 fbd3 	bl	11898 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   110f2:	2301      	movs	r3, #1
   110f4:	4a06      	ldr	r2, [pc, #24]	; (11110 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   110f6:	2002      	movs	r0, #2
   110f8:	6013      	str	r3, [r2, #0]
   110fa:	602b      	str	r3, [r5, #0]
   110fc:	f7ff ff30 	bl	10f60 <z_nrf_clock_control_lf_on>

	return 0;
}
   11100:	4620      	mov	r0, r4
   11102:	bd38      	pop	{r3, r4, r5, pc}
   11104:	50015000 	.word	0x50015000
   11108:	50015140 	.word	0x50015140
   1110c:	e000e100 	.word	0xe000e100
   11110:	50015008 	.word	0x50015008

00011114 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   11114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   11116:	4b2d      	ldr	r3, [pc, #180]	; (111cc <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11118:	4c2d      	ldr	r4, [pc, #180]	; (111d0 <z_clock_set_timeout+0xbc>)
   1111a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
   1111e:	4b2d      	ldr	r3, [pc, #180]	; (111d4 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11120:	f1b0 3fff 	cmp.w	r0, #4294967295
   11124:	bf08      	it	eq
   11126:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
   11128:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1112a:	1a52      	subs	r2, r2, r1
   1112c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   11130:	0212      	lsls	r2, r2, #8
   11132:	d438      	bmi.n	111a6 <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
   11134:	3801      	subs	r0, #1
   11136:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1113a:	42a0      	cmp	r0, r4
   1113c:	bfa8      	it	ge
   1113e:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   11140:	3301      	adds	r3, #1
   11142:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   11144:	42a0      	cmp	r0, r4
   11146:	bf94      	ite	ls
   11148:	180c      	addls	r4, r1, r0
   1114a:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   1114c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11150:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
   11152:	4a1e      	ldr	r2, [pc, #120]	; (111cc <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11154:	4d20      	ldr	r5, [pc, #128]	; (111d8 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
   11156:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
   1115a:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
   1115e:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11162:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
   11164:	1a5b      	subs	r3, r3, r1
   11166:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1116a:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
   1116c:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1116e:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   11172:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   11176:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   1117a:	d104      	bne.n	11186 <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
   1117c:	200f      	movs	r0, #15
   1117e:	f003 ff39 	bl	14ff4 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11182:	602e      	str	r6, [r5, #0]
   11184:	682b      	ldr	r3, [r5, #0]
   11186:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1118a:	4b14      	ldr	r3, [pc, #80]	; (111dc <z_clock_set_timeout+0xc8>)
   1118c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   11190:	4b0e      	ldr	r3, [pc, #56]	; (111cc <z_clock_set_timeout+0xb8>)
   11192:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   11196:	1a22      	subs	r2, r4, r0
   11198:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   1119c:	2a01      	cmp	r2, #1
   1119e:	d104      	bne.n	111aa <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
   111a0:	f7ff ff64 	bl	1106c <handle_next_cycle_case>
   111a4:	e00b      	b.n	111be <z_clock_set_timeout+0xaa>
		ticks = 0;
   111a6:	2000      	movs	r0, #0
   111a8:	e7ca      	b.n	11140 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   111aa:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   111ae:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   111b2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   111b6:	1a24      	subs	r4, r4, r0
   111b8:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   111ba:	0223      	lsls	r3, r4, #8
   111bc:	d4f0      	bmi.n	111a0 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
   111be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   111c2:	4b02      	ldr	r3, [pc, #8]	; (111cc <z_clock_set_timeout+0xb8>)
   111c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   111c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111ca:	bf00      	nop
   111cc:	50015000 	.word	0x50015000
   111d0:	007fffff 	.word	0x007fffff
   111d4:	200002d4 	.word	0x200002d4
   111d8:	50015140 	.word	0x50015140
   111dc:	e000e100 	.word	0xe000e100

000111e0 <z_clock_elapsed>:
	__asm__ volatile(
   111e0:	f04f 0220 	mov.w	r2, #32
   111e4:	f3ef 8311 	mrs	r3, BASEPRI
   111e8:	f382 8811 	msr	BASEPRI, r2
   111ec:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   111f0:	4a06      	ldr	r2, [pc, #24]	; (1120c <z_clock_elapsed+0x2c>)
   111f2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   111f6:	4a06      	ldr	r2, [pc, #24]	; (11210 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   111f8:	6812      	ldr	r2, [r2, #0]
   111fa:	1a80      	subs	r0, r0, r2
   111fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   11200:	f383 8811 	msr	BASEPRI, r3
   11204:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   11208:	4770      	bx	lr
   1120a:	bf00      	nop
   1120c:	50015000 	.word	0x50015000
   11210:	200002d4 	.word	0x200002d4

00011214 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
   11214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   11216:	2800      	cmp	r0, #0
{
   11218:	461c      	mov	r4, r3

	for (size_t i = start; i < end; i++) {
   1121a:	460d      	mov	r5, r1
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   1121c:	bf14      	ite	ne
   1121e:	f44f 5300 	movne.w	r3, #8192	; 0x2000
   11222:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	for (size_t i = start; i < end; i++) {
   11226:	4e20      	ldr	r6, [pc, #128]	; (112a8 <config_regions+0x94>)
   11228:	4295      	cmp	r5, r2
   1122a:	d332      	bcc.n	11292 <config_regions+0x7e>
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
   1122c:	fb02 f003 	mul.w	r0, r2, r3
   11230:	3a01      	subs	r2, #1
   11232:	434b      	muls	r3, r1
   11234:	9000      	str	r0, [sp, #0]
   11236:	481d      	ldr	r0, [pc, #116]	; (112ac <config_regions+0x98>)
   11238:	f003 f9f0 	bl	1461c <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
   1123c:	4b1c      	ldr	r3, [pc, #112]	; (112b0 <config_regions+0x9c>)
   1123e:	f014 0f10 	tst.w	r4, #16
   11242:	491c      	ldr	r1, [pc, #112]	; (112b4 <config_regions+0xa0>)
   11244:	481c      	ldr	r0, [pc, #112]	; (112b8 <config_regions+0xa4>)
   11246:	bf08      	it	eq
   11248:	4619      	moveq	r1, r3
   1124a:	f003 f9e7 	bl	1461c <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
   1124e:	f014 0f04 	tst.w	r4, #4
   11252:	bf14      	ite	ne
   11254:	2172      	movne	r1, #114	; 0x72
   11256:	212d      	moveq	r1, #45	; 0x2d
   11258:	4818      	ldr	r0, [pc, #96]	; (112bc <config_regions+0xa8>)
   1125a:	f003 f9df 	bl	1461c <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
   1125e:	f014 0f02 	tst.w	r4, #2
   11262:	bf14      	ite	ne
   11264:	2177      	movne	r1, #119	; 0x77
   11266:	212d      	moveq	r1, #45	; 0x2d
   11268:	4814      	ldr	r0, [pc, #80]	; (112bc <config_regions+0xa8>)
   1126a:	f003 f9d7 	bl	1461c <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
   1126e:	f014 0f01 	tst.w	r4, #1
   11272:	bf0c      	ite	eq
   11274:	212d      	moveq	r1, #45	; 0x2d
   11276:	2178      	movne	r1, #120	; 0x78
   11278:	4810      	ldr	r0, [pc, #64]	; (112bc <config_regions+0xa8>)
   1127a:	f003 f9cf 	bl	1461c <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
   1127e:	216c      	movs	r1, #108	; 0x6c
   11280:	480e      	ldr	r0, [pc, #56]	; (112bc <config_regions+0xa8>)
   11282:	f003 f9cb 	bl	1461c <printk>
	PRINT("\n");
   11286:	480e      	ldr	r0, [pc, #56]	; (112c0 <config_regions+0xac>)
}
   11288:	b003      	add	sp, #12
   1128a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
   1128e:	f003 b9c5 	b.w	1461c <printk>
		if (ram) {
   11292:	b128      	cbz	r0, 112a0 <config_regions+0x8c>
			NRF_SPU->RAMREGION[i].PERM = perm;
   11294:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
   11298:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
   1129c:	3501      	adds	r5, #1
   1129e:	e7c3      	b.n	11228 <config_regions+0x14>
			NRF_SPU->FLASHREGION[i].PERM = perm;
   112a0:	f505 77c0 	add.w	r7, r5, #384	; 0x180
   112a4:	e7f8      	b.n	11298 <config_regions+0x84>
   112a6:	bf00      	nop
   112a8:	50003000 	.word	0x50003000
   112ac:	00015651 	.word	0x00015651
   112b0:	00015645 	.word	0x00015645
   112b4:	0001563c 	.word	0x0001563c
   112b8:	000157d0 	.word	0x000157d0
   112bc:	0001566b 	.word	0x0001566b
   112c0:	000159a6 	.word	0x000159a6

000112c4 <spm_config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(uint8_t id, bool dma_present)
   112c4:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
   112c6:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   112c8:	2b00      	cmp	r3, #0
   112ca:	db0c      	blt.n	112e6 <spm_config_peripheral.constprop.0+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   112cc:	2201      	movs	r2, #1
   112ce:	f000 011f 	and.w	r1, r0, #31
   112d2:	408a      	lsls	r2, r1
   112d4:	095b      	lsrs	r3, r3, #5
   112d6:	4910      	ldr	r1, [pc, #64]	; (11318 <spm_config_peripheral.constprop.0+0x54>)
   112d8:	3320      	adds	r3, #32
   112da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   112de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   112e2:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   112e6:	0083      	lsls	r3, r0, #2
   112e8:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   112ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   112f0:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   112f2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   112f6:	d006      	beq.n	11306 <spm_config_peripheral.constprop.0+0x42>
	return present && (usel || split);
   112f8:	2a00      	cmp	r2, #0
   112fa:	da07      	bge.n	1130c <spm_config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
   112fc:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
   11300:	3a02      	subs	r2, #2
   11302:	2a01      	cmp	r2, #1
   11304:	d802      	bhi.n	1130c <spm_config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
   11306:	4a05      	ldr	r2, [pc, #20]	; (1131c <spm_config_peripheral.constprop.0+0x58>)
   11308:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
   1130c:	2101      	movs	r1, #1
   1130e:	f003 fc14 	bl	14b3a <irq_target_state_set>
	return 0;
}
   11312:	2000      	movs	r0, #0
   11314:	bd08      	pop	{r3, pc}
   11316:	bf00      	nop
   11318:	e000e100 	.word	0xe000e100
   1131c:	80000100 	.word	0x80000100

00011320 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
   11320:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   11322:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
{
   11326:	b085      	sub	sp, #20
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   11328:	4d2e      	ldr	r5, [pc, #184]	; (113e4 <spm_jump+0xc4>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
   1132a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   1132e:	482e      	ldr	r0, [pc, #184]	; (113e8 <spm_jump+0xc8>)
   11330:	f003 f974 	bl	1461c <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   11334:	6821      	ldr	r1, [r4, #0]
   11336:	482d      	ldr	r0, [pc, #180]	; (113ec <spm_jump+0xcc>)
   11338:	f003 f970 	bl	1461c <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   1133c:	6829      	ldr	r1, [r5, #0]
   1133e:	482c      	ldr	r0, [pc, #176]	; (113f0 <spm_jump+0xd0>)
   11340:	f003 f96c 	bl	1461c <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   11344:	2210      	movs	r2, #16
   11346:	2100      	movs	r1, #0
   11348:	4668      	mov	r0, sp
   1134a:	f003 fcbd 	bl	14cc8 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
   1134e:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
   11350:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   11352:	9300      	str	r3, [sp, #0]
   11354:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
   11356:	f000 fe7d 	bl	12054 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
   1135a:	2001      	movs	r0, #1
   1135c:	f000 feaa 	bl	120b4 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
   11360:	2000      	movs	r0, #0
   11362:	f000 fe93 	bl	1208c <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
   11366:	2000      	movs	r0, #0
   11368:	f000 feb8 	bl	120dc <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
   1136c:	2101      	movs	r1, #1
   1136e:	2000      	movs	r0, #0
   11370:	f000 fed2 	bl	12118 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
   11374:	f000 fec6 	bl	12104 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   11378:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
   1137a:	481e      	ldr	r0, [pc, #120]	; (113f4 <spm_jump+0xd4>)
   1137c:	f003 f94e 	bl	1461c <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
   11380:	2008      	movs	r0, #8
   11382:	f7ff ff9f 	bl	112c4 <spm_config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   11386:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
   1138a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1138e:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
   11392:	0864      	lsrs	r4, r4, #1
   11394:	0064      	lsls	r4, r4, #1
   11396:	4620      	mov	r0, r4
   11398:	4621      	mov	r1, r4
   1139a:	4622      	mov	r2, r4
   1139c:	4623      	mov	r3, r4
   1139e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   113a2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   113a6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   113aa:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   113ae:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   113b2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   113b6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   113ba:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   113be:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   113c2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   113c6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   113ca:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   113ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   113d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   113d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   113da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   113de:	f7ff f9a7 	bl	10730 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
   113e2:	bf00      	nop
   113e4:	0001c204 	.word	0x0001c204
   113e8:	0001566e 	.word	0x0001566e
   113ec:	00015685 	.word	0x00015685
   113f0:	0001569a 	.word	0x0001569a
   113f4:	000156b8 	.word	0x000156b8

000113f8 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
   113f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
   113fc:	483b      	ldr	r0, [pc, #236]	; (114ec <spm_config+0xf4>)
   113fe:	f003 f90d 	bl	1461c <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
   11402:	2100      	movs	r1, #0
   11404:	f240 1317 	movw	r3, #279	; 0x117
   11408:	4608      	mov	r0, r1
   1140a:	2203      	movs	r2, #3
   1140c:	f7ff ff02 	bl	11214 <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
   11410:	f240 1307 	movw	r3, #263	; 0x107
   11414:	2220      	movs	r2, #32
   11416:	2103      	movs	r1, #3
   11418:	2000      	movs	r0, #0
   1141a:	f7ff fefb 	bl	11214 <config_regions>
	PRINT("\n");
   1141e:	4834      	ldr	r0, [pc, #208]	; (114f0 <spm_config+0xf8>)
   11420:	f003 f8fc 	bl	1461c <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   11424:	4b33      	ldr	r3, [pc, #204]	; (114f4 <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   11426:	4a34      	ldr	r2, [pc, #208]	; (114f8 <spm_config+0x100>)
   11428:	f3c3 31c4 	ubfx	r1, r3, #15, #5
   1142c:	f3c3 030e 	ubfx	r3, r3, #0, #15
   11430:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   11434:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   11438:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   1143c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
   11440:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
   11444:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
   11448:	482c      	ldr	r0, [pc, #176]	; (114fc <spm_config+0x104>)
   1144a:	0152      	lsls	r2, r2, #5
   1144c:	f003 f8e6 	bl	1461c <printk>
	PRINT("\n");
   11450:	4827      	ldr	r0, [pc, #156]	; (114f0 <spm_config+0xf8>)
   11452:	f003 f8e3 	bl	1461c <printk>
	int err = spm_secure_services_init();
   11456:	f003 fb1e 	bl	14a96 <spm_secure_services_init>
	if (err != 0) {
   1145a:	4601      	mov	r1, r0
   1145c:	b110      	cbz	r0, 11464 <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
   1145e:	4828      	ldr	r0, [pc, #160]	; (11500 <spm_config+0x108>)
   11460:	f003 f8dc 	bl	1461c <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   11464:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
   11466:	4827      	ldr	r0, [pc, #156]	; (11504 <spm_config+0x10c>)
   11468:	f003 f8d8 	bl	1461c <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
   1146c:	f240 1317 	movw	r3, #279	; 0x117
   11470:	2208      	movs	r2, #8
   11472:	2100      	movs	r1, #0
   11474:	2001      	movs	r0, #1
   11476:	f7ff fecd 	bl	11214 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
   1147a:	4d1f      	ldr	r5, [pc, #124]	; (114f8 <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
   1147c:	f240 1307 	movw	r3, #263	; 0x107
   11480:	2220      	movs	r2, #32
   11482:	2108      	movs	r1, #8
   11484:	2001      	movs	r0, #1
   11486:	f7ff fec5 	bl	11214 <config_regions>
	PRINT("\n");
   1148a:	4819      	ldr	r0, [pc, #100]	; (114f0 <spm_config+0xf8>)
   1148c:	f003 f8c6 	bl	1461c <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   11490:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
   11494:	481c      	ldr	r0, [pc, #112]	; (11508 <spm_config+0x110>)
   11496:	f003 f8c1 	bl	1461c <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
   1149a:	4f1c      	ldr	r7, [pc, #112]	; (1150c <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
   1149c:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
   114a0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 11520 <spm_config+0x128>
   114a4:	4d1a      	ldr	r5, [pc, #104]	; (11510 <spm_config+0x118>)
   114a6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 11524 <spm_config+0x12c>
   114aa:	796e      	ldrb	r6, [r5, #5]
   114ac:	4621      	mov	r1, r4
   114ae:	2e00      	cmp	r6, #0
   114b0:	bf14      	ite	ne
   114b2:	463b      	movne	r3, r7
   114b4:	4643      	moveq	r3, r8
   114b6:	4648      	mov	r0, r9
   114b8:	682a      	ldr	r2, [r5, #0]
   114ba:	f003 f8af 	bl	1461c <printk>
		if (!periph[i].nonsecure) {
   114be:	b966      	cbnz	r6, 114da <spm_config+0xe2>
			PRINT("\tSKIP\n");
   114c0:	4814      	ldr	r0, [pc, #80]	; (11514 <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   114c2:	3401      	adds	r4, #1
			PRINT("\tOK\n");
   114c4:	f003 f8aa 	bl	1461c <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   114c8:	2c1a      	cmp	r4, #26
   114ca:	f105 0508 	add.w	r5, r5, #8
   114ce:	d1ec      	bne.n	114aa <spm_config+0xb2>
	PRINT("\n");
   114d0:	4807      	ldr	r0, [pc, #28]	; (114f0 <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
   114d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
   114d6:	f003 b8a1 	b.w	1461c <printk>
		err = spm_config_peripheral(periph[i].id, false);
   114da:	7928      	ldrb	r0, [r5, #4]
   114dc:	f7ff fef2 	bl	112c4 <spm_config_peripheral.constprop.0>
		if (err) {
   114e0:	b108      	cbz	r0, 114e6 <spm_config+0xee>
			PRINT("\tERROR\n");
   114e2:	480d      	ldr	r0, [pc, #52]	; (11518 <spm_config+0x120>)
   114e4:	e7ed      	b.n	114c2 <spm_config+0xca>
			PRINT("\tOK\n");
   114e6:	480d      	ldr	r0, [pc, #52]	; (1151c <spm_config+0x124>)
   114e8:	e7eb      	b.n	114c2 <spm_config+0xca>
   114ea:	bf00      	nop
   114ec:	000156ee 	.word	0x000156ee
   114f0:	000159a6 	.word	0x000159a6
   114f4:	00017fe0 	.word	0x00017fe0
   114f8:	50003000 	.word	0x50003000
   114fc:	00015712 	.word	0x00015712
   11500:	00015758 	.word	0x00015758
   11504:	00015788 	.word	0x00015788
   11508:	000157aa 	.word	0x000157aa
   1150c:	000156e3 	.word	0x000156e3
   11510:	00015388 	.word	0x00015388
   11514:	000157d3 	.word	0x000157d3
   11518:	000157da 	.word	0x000157da
   1151c:	000157e2 	.word	0x000157e2
   11520:	00015649 	.word	0x00015649
   11524:	000157c6 	.word	0x000157c6

00011528 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
   11528:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
   1152a:	2800      	cmp	r0, #0
   1152c:	d050      	beq.n	115d0 <__acle_se_spm_request_read_nse+0xa8>
   1152e:	2a00      	cmp	r2, #0
   11530:	d04e      	beq.n	115d0 <__acle_se_spm_request_read_nse+0xa8>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		uint32_t start = ranges[i].start;
		uint32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
   11532:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   11536:	d348      	bcc.n	115ca <__acle_se_spm_request_read_nse+0xa2>
   11538:	1853      	adds	r3, r2, r1
   1153a:	f5b3 3f81 	cmp.w	r3, #66048	; 0x10200
   1153e:	d906      	bls.n	1154e <__acle_se_spm_request_read_nse+0x26>
   11540:	4c25      	ldr	r4, [pc, #148]	; (115d8 <__acle_se_spm_request_read_nse+0xb0>)
   11542:	42a1      	cmp	r1, r4
   11544:	d93b      	bls.n	115be <__acle_se_spm_request_read_nse+0x96>
   11546:	f604 241d 	addw	r4, r4, #2589	; 0xa1d
   1154a:	42a3      	cmp	r3, r4
   1154c:	d83a      	bhi.n	115c4 <__acle_se_spm_request_read_nse+0x9c>
			memcpy(destination, (const void *)addr, len);
   1154e:	f003 fb90 	bl	14c72 <memcpy>
			return 0;
   11552:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
   11554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11558:	4671      	mov	r1, lr
   1155a:	4672      	mov	r2, lr
   1155c:	4673      	mov	r3, lr
   1155e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   11562:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   11566:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   1156a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   1156e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   11572:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   11576:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   1157a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   1157e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   11582:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   11586:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   1158a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1158e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   11592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   11596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1159a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1159e:	f38e 8c00 	msr	CPSR_fs, lr
   115a2:	b410      	push	{r4}
   115a4:	eef1 ca10 	vmrs	ip, fpscr
   115a8:	f64f 7460 	movw	r4, #65376	; 0xff60
   115ac:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   115b0:	ea0c 0c04 	and.w	ip, ip, r4
   115b4:	eee1 ca10 	vmsr	fpscr, ip
   115b8:	bc10      	pop	{r4}
   115ba:	46f4      	mov	ip, lr
   115bc:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
   115be:	4c07      	ldr	r4, [pc, #28]	; (115dc <__acle_se_spm_request_read_nse+0xb4>)
   115c0:	42a1      	cmp	r1, r4
   115c2:	d902      	bls.n	115ca <__acle_se_spm_request_read_nse+0xa2>
   115c4:	4c06      	ldr	r4, [pc, #24]	; (115e0 <__acle_se_spm_request_read_nse+0xb8>)
   115c6:	42a3      	cmp	r3, r4
   115c8:	d9c1      	bls.n	1154e <__acle_se_spm_request_read_nse+0x26>
	return -EPERM;
   115ca:	f04f 30ff 	mov.w	r0, #4294967295
   115ce:	e7c1      	b.n	11554 <__acle_se_spm_request_read_nse+0x2c>
		return -EINVAL;
   115d0:	f06f 0015 	mvn.w	r0, #21
   115d4:	e7be      	b.n	11554 <__acle_se_spm_request_read_nse+0x2c>
   115d6:	bf00      	nop
   115d8:	00ff0203 	.word	0x00ff0203
   115dc:	00ff012f 	.word	0x00ff012f
   115e0:	00ff0138 	.word	0x00ff0138

000115e4 <__acle_se_spm_firmware_info_nse>:


#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
   115e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115e8:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
   115ea:	460e      	mov	r6, r1
{
   115ec:	b085      	sub	sp, #20
	if (info == NULL) {
   115ee:	2900      	cmp	r1, #0
   115f0:	d054      	beq.n	1169c <__acle_se_spm_firmware_info_nse+0xb8>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   115f2:	f04f 0800 	mov.w	r8, #0
   115f6:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 116b0 <__acle_se_spm_firmware_info_nse+0xcc>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   115fa:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 116b4 <__acle_se_spm_firmware_info_nse+0xd0>
   115fe:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
   11600:	f85b 5b04 	ldr.w	r5, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   11604:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
   11608:	444d      	add	r5, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   1160a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1160e:	220c      	movs	r2, #12
   11610:	4639      	mov	r1, r7
   11612:	4628      	mov	r0, r5
   11614:	f003 fb06 	bl	14c24 <memcmp>
   11618:	4604      	mov	r4, r0
   1161a:	b908      	cbnz	r0, 11620 <__acle_se_spm_firmware_info_nse+0x3c>
		if (finfo) {
   1161c:	2d00      	cmp	r5, #0
   1161e:	d140      	bne.n	116a2 <__acle_se_spm_firmware_info_nse+0xbe>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   11620:	f108 0801 	add.w	r8, r8, #1
   11624:	f1b8 0f05 	cmp.w	r8, #5
   11628:	d1ea      	bne.n	11600 <__acle_se_spm_firmware_info_nse+0x1c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
   1162a:	f06f 040d 	mvn.w	r4, #13
}
   1162e:	4620      	mov	r0, r4
   11630:	b005      	add	sp, #20
   11632:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   11636:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   1163a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   1163e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   11642:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   11646:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   1164a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   1164e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   11652:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   11656:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   1165a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   1165e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   11662:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   11666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1166a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1166e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11672:	4671      	mov	r1, lr
   11674:	4672      	mov	r2, lr
   11676:	4673      	mov	r3, lr
   11678:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1167c:	f38e 8c00 	msr	CPSR_fs, lr
   11680:	b410      	push	{r4}
   11682:	eef1 ca10 	vmrs	ip, fpscr
   11686:	f64f 7460 	movw	r4, #65376	; 0xff60
   1168a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   1168e:	ea0c 0c04 	and.w	ip, ip, r4
   11692:	eee1 ca10 	vmsr	fpscr, ip
   11696:	bc10      	pop	{r4}
   11698:	46f4      	mov	ip, lr
   1169a:	4774      	bxns	lr
		return -EINVAL;
   1169c:	f06f 0415 	mvn.w	r4, #21
   116a0:	e7c5      	b.n	1162e <__acle_se_spm_firmware_info_nse+0x4a>
		memcpy(info, tmp_info, sizeof(*tmp_info));
   116a2:	223c      	movs	r2, #60	; 0x3c
   116a4:	4629      	mov	r1, r5
   116a6:	4630      	mov	r0, r6
   116a8:	f003 fae3 	bl	14c72 <memcpy>
		return 0;
   116ac:	e7bf      	b.n	1162e <__acle_se_spm_firmware_info_nse+0x4a>
   116ae:	bf00      	nop
   116b0:	00015458 	.word	0x00015458
   116b4:	00015300 	.word	0x00015300

000116b8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   116b8:	4801      	ldr	r0, [pc, #4]	; (116c0 <nrf_cc3xx_platform_abort_init+0x8>)
   116ba:	f002 ba75 	b.w	13ba8 <nrf_cc3xx_platform_set_abort>
   116be:	bf00      	nop
   116c0:	0001546c 	.word	0x0001546c

000116c4 <mutex_unlock_platform>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   116c4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   116c6:	b130      	cbz	r0, 116d6 <mutex_unlock_platform+0x12>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   116c8:	6843      	ldr	r3, [r0, #4]
   116ca:	b13b      	cbz	r3, 116dc <mutex_unlock_platform+0x18>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
   116cc:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   116ce:	f001 fa7d 	bl	12bcc <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC3XX_PLATFORM_SUCCESS;
   116d2:	2000      	movs	r0, #0
}
   116d4:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   116d6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   116da:	e7fb      	b.n	116d4 <mutex_unlock_platform+0x10>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   116dc:	4800      	ldr	r0, [pc, #0]	; (116e0 <mutex_unlock_platform+0x1c>)
   116de:	e7f9      	b.n	116d4 <mutex_unlock_platform+0x10>
   116e0:	ffff8fea 	.word	0xffff8fea

000116e4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   116e4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   116e6:	4604      	mov	r4, r0
   116e8:	b918      	cbnz	r0, 116f2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   116ea:	4b0b      	ldr	r3, [pc, #44]	; (11718 <mutex_free_platform+0x34>)
   116ec:	480b      	ldr	r0, [pc, #44]	; (1171c <mutex_free_platform+0x38>)
   116ee:	685b      	ldr	r3, [r3, #4]
   116f0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   116f2:	6861      	ldr	r1, [r4, #4]
   116f4:	b159      	cbz	r1, 1170e <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   116f6:	f011 0102 	ands.w	r1, r1, #2
   116fa:	6820      	ldr	r0, [r4, #0]
   116fc:	d008      	beq.n	11710 <mutex_free_platform+0x2c>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
   116fe:	4601      	mov	r1, r0
   11700:	4807      	ldr	r0, [pc, #28]	; (11720 <mutex_free_platform+0x3c>)
   11702:	f001 f9c1 	bl	12a88 <k_mem_slab_free>
        mutex->mutex = NULL;
   11706:	2300      	movs	r3, #0
   11708:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   1170a:	2300      	movs	r3, #0
   1170c:	6063      	str	r3, [r4, #4]
}
   1170e:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   11710:	2214      	movs	r2, #20
   11712:	f003 fad9 	bl	14cc8 <memset>
   11716:	e7f8      	b.n	1170a <mutex_free_platform+0x26>
   11718:	20000070 	.word	0x20000070
   1171c:	000158e3 	.word	0x000158e3
   11720:	200002d8 	.word	0x200002d8

00011724 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   11724:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   11726:	4604      	mov	r4, r0
   11728:	b918      	cbnz	r0, 11732 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   1172a:	4b14      	ldr	r3, [pc, #80]	; (1177c <mutex_init_platform+0x58>)
   1172c:	4814      	ldr	r0, [pc, #80]	; (11780 <mutex_init_platform+0x5c>)
   1172e:	685b      	ldr	r3, [r3, #4]
   11730:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   11732:	6863      	ldr	r3, [r4, #4]
   11734:	b9cb      	cbnz	r3, 1176a <mutex_init_platform+0x46>
   11736:	6823      	ldr	r3, [r4, #0]
   11738:	b9bb      	cbnz	r3, 1176a <mutex_init_platform+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   1173a:	f04f 32ff 	mov.w	r2, #4294967295
   1173e:	f04f 33ff 	mov.w	r3, #4294967295
   11742:	4621      	mov	r1, r4
   11744:	480f      	ldr	r0, [pc, #60]	; (11784 <mutex_init_platform+0x60>)
   11746:	f001 f96d 	bl	12a24 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   1174a:	b908      	cbnz	r0, 11750 <mutex_init_platform+0x2c>
   1174c:	6823      	ldr	r3, [r4, #0]
   1174e:	b91b      	cbnz	r3, 11758 <mutex_init_platform+0x34>
            platform_abort_apis.abort_fn(
   11750:	4b0a      	ldr	r3, [pc, #40]	; (1177c <mutex_init_platform+0x58>)
   11752:	480d      	ldr	r0, [pc, #52]	; (11788 <mutex_init_platform+0x64>)
   11754:	685b      	ldr	r3, [r3, #4]
   11756:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   11758:	2214      	movs	r2, #20
   1175a:	2100      	movs	r1, #0
   1175c:	6820      	ldr	r0, [r4, #0]
   1175e:	f003 fab3 	bl	14cc8 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   11762:	6863      	ldr	r3, [r4, #4]
   11764:	f043 0302 	orr.w	r3, r3, #2
   11768:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   1176a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   1176c:	f003 fb89 	bl	14e82 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   11770:	6863      	ldr	r3, [r4, #4]
   11772:	f043 0301 	orr.w	r3, r3, #1
   11776:	6063      	str	r3, [r4, #4]
}
   11778:	bd10      	pop	{r4, pc}
   1177a:	bf00      	nop
   1177c:	20000070 	.word	0x20000070
   11780:	000158e3 	.word	0x000158e3
   11784:	200002d8 	.word	0x200002d8
   11788:	00015909 	.word	0x00015909

0001178c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1178c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   1178e:	b168      	cbz	r0, 117ac <mutex_lock_platform+0x20>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   11790:	6843      	ldr	r3, [r0, #4]
   11792:	b173      	cbz	r3, 117b2 <mutex_lock_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   11794:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   11796:	f04f 33ff 	mov.w	r3, #4294967295
   1179a:	f04f 32ff 	mov.w	r2, #4294967295
   1179e:	f001 f99d 	bl	12adc <z_impl_k_mutex_lock>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   117a2:	4b05      	ldr	r3, [pc, #20]	; (117b8 <mutex_lock_platform+0x2c>)
    if (ret == 0) {
   117a4:	2800      	cmp	r0, #0
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   117a6:	bf18      	it	ne
   117a8:	4618      	movne	r0, r3
}
   117aa:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   117ac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   117b0:	e7fb      	b.n	117aa <mutex_lock_platform+0x1e>
        return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   117b2:	4802      	ldr	r0, [pc, #8]	; (117bc <mutex_lock_platform+0x30>)
   117b4:	e7f9      	b.n	117aa <mutex_lock_platform+0x1e>
   117b6:	bf00      	nop
   117b8:	ffff8fe9 	.word	0xffff8fe9
   117bc:	ffff8fea 	.word	0xffff8fea

000117c0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   117c0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   117c2:	4906      	ldr	r1, [pc, #24]	; (117dc <nrf_cc3xx_platform_mutex_init+0x1c>)
   117c4:	2340      	movs	r3, #64	; 0x40
   117c6:	2214      	movs	r2, #20
   117c8:	4805      	ldr	r0, [pc, #20]	; (117e0 <nrf_cc3xx_platform_mutex_init+0x20>)
   117ca:	f003 fb3f 	bl	14e4c <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   117ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   117d2:	4904      	ldr	r1, [pc, #16]	; (117e4 <nrf_cc3xx_platform_mutex_init+0x24>)
   117d4:	4804      	ldr	r0, [pc, #16]	; (117e8 <nrf_cc3xx_platform_mutex_init+0x28>)
   117d6:	f002 ba39 	b.w	13c4c <nrf_cc3xx_platform_set_mutexes>
   117da:	bf00      	nop
   117dc:	200002f4 	.word	0x200002f4
   117e0:	200002d8 	.word	0x200002d8
   117e4:	00015484 	.word	0x00015484
   117e8:	00015474 	.word	0x00015474

000117ec <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   117ec:	4a09      	ldr	r2, [pc, #36]	; (11814 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   117ee:	490a      	ldr	r1, [pc, #40]	; (11818 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   117f0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   117f2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   117f4:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   117f6:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   117f8:	4908      	ldr	r1, [pc, #32]	; (1181c <arch_swap+0x30>)
   117fa:	684b      	ldr	r3, [r1, #4]
   117fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11800:	604b      	str	r3, [r1, #4]
   11802:	2300      	movs	r3, #0
   11804:	f383 8811 	msr	BASEPRI, r3
   11808:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1180c:	6893      	ldr	r3, [r2, #8]
}
   1180e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   11810:	4770      	bx	lr
   11812:	bf00      	nop
   11814:	20000810 	.word	0x20000810
   11818:	000154f8 	.word	0x000154f8
   1181c:	e000ed00 	.word	0xe000ed00

00011820 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11820:	4913      	ldr	r1, [pc, #76]	; (11870 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11822:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11824:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   11828:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1182a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1182e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11832:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11834:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11838:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1183c:	4f0d      	ldr	r7, [pc, #52]	; (11874 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1183e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11842:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   11844:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   11846:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11848:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1184a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1184c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1184e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11852:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   11856:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1185a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1185e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   11862:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   11864:	f003 f997 	bl	14b96 <configure_builtin_stack_guard>
    pop {r2, lr}
   11868:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   1186c:	4770      	bx	lr
   1186e:	0000      	.short	0x0000
    ldr r1, =_kernel
   11870:	20000810 	.word	0x20000810
    ldr v4, =_SCS_ICSR
   11874:	e000ed04 	.word	0xe000ed04

00011878 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   11878:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1187c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1187e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11882:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11886:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11888:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1188c:	2902      	cmp	r1, #2
    beq _oops
   1188e:	d0ff      	beq.n	11890 <_oops>

00011890 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11890:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   11892:	f003 f986 	bl	14ba2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   11896:	bd01      	pop	{r0, pc}

00011898 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   11898:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1189a:	2b00      	cmp	r3, #0
   1189c:	db08      	blt.n	118b0 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1189e:	2201      	movs	r2, #1
   118a0:	f000 001f 	and.w	r0, r0, #31
   118a4:	fa02 f000 	lsl.w	r0, r2, r0
   118a8:	4a02      	ldr	r2, [pc, #8]	; (118b4 <arch_irq_enable+0x1c>)
   118aa:	095b      	lsrs	r3, r3, #5
   118ac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   118b0:	4770      	bx	lr
   118b2:	bf00      	nop
   118b4:	e000e100 	.word	0xe000e100

000118b8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   118b8:	4b05      	ldr	r3, [pc, #20]	; (118d0 <arch_irq_is_enabled+0x18>)
   118ba:	0942      	lsrs	r2, r0, #5
   118bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   118c0:	2301      	movs	r3, #1
   118c2:	f000 001f 	and.w	r0, r0, #31
   118c6:	fa03 f000 	lsl.w	r0, r3, r0
}
   118ca:	4010      	ands	r0, r2
   118cc:	4770      	bx	lr
   118ce:	bf00      	nop
   118d0:	e000e100 	.word	0xe000e100

000118d4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   118d4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   118d6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   118d8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   118dc:	bfac      	ite	ge
   118de:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   118e2:	4b06      	ldrlt	r3, [pc, #24]	; (118fc <z_arm_irq_priority_set+0x28>)
   118e4:	ea4f 1141 	mov.w	r1, r1, lsl #5
   118e8:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   118ea:	bfab      	itete	ge
   118ec:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   118f0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   118f4:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   118f8:	5419      	strblt	r1, [r3, r0]
}
   118fa:	4770      	bx	lr
   118fc:	e000ed14 	.word	0xe000ed14

00011900 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   11900:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   11904:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   11906:	490b      	ldr	r1, [pc, #44]	; (11934 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   11908:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1190c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1190e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   11912:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   11916:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   11918:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1191c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   11924:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   11928:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1192a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1192c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   1192e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11930:	4770      	bx	lr
   11932:	bf00      	nop
   11934:	0001478f 	.word	0x0001478f

00011938 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   11938:	b508      	push	{r3, lr}
   1193a:	4604      	mov	r4, r0
   1193c:	460e      	mov	r6, r1
   1193e:	4615      	mov	r5, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   11940:	2300      	movs	r3, #0
   11942:	eee1 3a10 	vmsr	fpscr, r3
	z_arm_configure_static_mpu_regions();
   11946:	f000 fa0d 	bl	11d64 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1194a:	4b09      	ldr	r3, [pc, #36]	; (11970 <arch_switch_to_main_thread+0x38>)
   1194c:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1194e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   11950:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11954:	4628      	mov	r0, r5
   11956:	f386 8809 	msr	PSP, r6
   1195a:	2100      	movs	r1, #0
   1195c:	b663      	cpsie	if
   1195e:	f381 8811 	msr	BASEPRI, r1
   11962:	f3bf 8f6f 	isb	sy
   11966:	2200      	movs	r2, #0
   11968:	2300      	movs	r3, #0
   1196a:	f002 ff10 	bl	1478e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1196e:	bf00      	nop
   11970:	20000810 	.word	0x20000810

00011974 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   11974:	4901      	ldr	r1, [pc, #4]	; (1197c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   11976:	2210      	movs	r2, #16
	str	r2, [r1]
   11978:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1197a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1197c:	e000ed10 	.word	0xe000ed10

00011980 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11980:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   11982:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   11984:	f380 8811 	msr	BASEPRI, r0
	isb
   11988:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1198c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   11990:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   11992:	b662      	cpsie	i
	isb
   11994:	f3bf 8f6f 	isb	sy

	bx	lr
   11998:	4770      	bx	lr
   1199a:	bf00      	nop

0001199c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1199c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1199e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   119a0:	f381 8811 	msr	BASEPRI, r1

	wfe
   119a4:	bf20      	wfe

	msr	BASEPRI, r0
   119a6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   119aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   119ac:	4770      	bx	lr
   119ae:	bf00      	nop

000119b0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   119b0:	bf30      	wfi
    b z_SysNmiOnReset
   119b2:	f7ff bffd 	b.w	119b0 <z_SysNmiOnReset>
   119b6:	bf00      	nop

000119b8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   119b8:	4a17      	ldr	r2, [pc, #92]	; (11a18 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   119ba:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   119bc:	4b17      	ldr	r3, [pc, #92]	; (11a1c <z_arm_prep_c+0x64>)
   119be:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   119c2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   119c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   119c8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   119cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   119d0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   119d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   119d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   119dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   119e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
   119e4:	4a0e      	ldr	r2, [pc, #56]	; (11a20 <z_arm_prep_c+0x68>)
   119e6:	6853      	ldr	r3, [r2, #4]
   119e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   119ec:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   119ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   119f2:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   119f6:	2300      	movs	r3, #0
   119f8:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   119fc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   11a00:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   11a04:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11a08:	f000 ff1c 	bl	12844 <z_bss_zero>
	z_data_copy();
   11a0c:	f000 ff24 	bl	12858 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11a10:	f000 f970 	bl	11cf4 <z_arm_interrupt_init>
	z_cstart();
   11a14:	f000 ff5e 	bl	128d4 <z_cstart>
   11a18:	00010200 	.word	0x00010200
   11a1c:	e000ed00 	.word	0xe000ed00
   11a20:	e000ef30 	.word	0xe000ef30

00011a24 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11a24:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11a26:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11a28:	4a0b      	ldr	r2, [pc, #44]	; (11a58 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   11a2a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   11a2c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   11a2e:	bf1e      	ittt	ne
	movne	r1, #0
   11a30:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   11a32:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   11a34:	f003 fa08 	blne	14e48 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11a38:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   11a3a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   11a3e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11a42:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11a46:	4905      	ldr	r1, [pc, #20]	; (11a5c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11a48:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   11a4a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   11a4c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   11a4e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   11a52:	4903      	ldr	r1, [pc, #12]	; (11a60 <_isr_wrapper+0x3c>)
	bx r1
   11a54:	4708      	bx	r1
   11a56:	0000      	.short	0x0000
	ldr r2, =_kernel
   11a58:	20000810 	.word	0x20000810
	ldr r1, =_sw_isr_table
   11a5c:	000150f8 	.word	0x000150f8
	ldr r1, =z_arm_int_exit
   11a60:	00011cb5 	.word	0x00011cb5

00011a64 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   11a64:	f002 ff7a 	bl	1495c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11a68:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11a6a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   11a6e:	4808      	ldr	r0, [pc, #32]	; (11a90 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11a70:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11a74:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11a76:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11a7a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11a7e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11a80:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11a82:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11a86:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11a8a:	f7ff ff95 	bl	119b8 <z_arm_prep_c>
   11a8e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   11a90:	20000db0 	.word	0x20000db0

00011a94 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11a94:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11a98:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11a9c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11a9e:	4672      	mov	r2, lr
	bl z_arm_fault
   11aa0:	f000 f870 	bl	11b84 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11aa4:	bd01      	pop	{r0, pc}
   11aa6:	bf00      	nop

00011aa8 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11aa8:	4b0c      	ldr	r3, [pc, #48]	; (11adc <mem_manage_fault.isra.0+0x34>)
   11aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11ab0:	0792      	lsls	r2, r2, #30
   11ab2:	d508      	bpl.n	11ac6 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   11ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11ab8:	0612      	lsls	r2, r2, #24
   11aba:	d504      	bpl.n	11ac6 <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   11abc:	b118      	cbz	r0, 11ac6 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   11ac4:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   11ac6:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11ac8:	4b04      	ldr	r3, [pc, #16]	; (11adc <mem_manage_fault.isra.0+0x34>)
   11aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   11ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11ad2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   11ad6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   11ad8:	7008      	strb	r0, [r1, #0]

	return reason;
}
   11ada:	4770      	bx	lr
   11adc:	e000ed00 	.word	0xe000ed00

00011ae0 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11ae0:	4b0d      	ldr	r3, [pc, #52]	; (11b18 <bus_fault.isra.0+0x38>)
   11ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11ae8:	0592      	lsls	r2, r2, #22
   11aea:	d508      	bpl.n	11afe <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11af0:	0412      	lsls	r2, r2, #16
   11af2:	d504      	bpl.n	11afe <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   11af4:	b118      	cbz	r0, 11afe <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11afc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   11afe:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11b00:	4b05      	ldr	r3, [pc, #20]	; (11b18 <bus_fault.isra.0+0x38>)
   11b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11b06:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11b08:	bf58      	it	pl
   11b0a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11b0e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   11b12:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   11b14:	7008      	strb	r0, [r1, #0]

	return reason;
}
   11b16:	4770      	bx	lr
   11b18:	e000ed00 	.word	0xe000ed00

00011b1c <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11b1c:	4b09      	ldr	r3, [pc, #36]	; (11b44 <usage_fault.isra.0+0x28>)
   11b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   11b22:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   11b2e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11b32:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   11b36:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
   11b3a:	bf18      	it	ne
   11b3c:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11b3e:	629a      	str	r2, [r3, #40]	; 0x28
}
   11b40:	4770      	bx	lr
   11b42:	bf00      	nop
   11b44:	e000ed00 	.word	0xe000ed00

00011b48 <secure_fault.isra.0>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
   11b48:	4b0d      	ldr	r3, [pc, #52]	; (11b80 <secure_fault.isra.0+0x38>)
   11b4a:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
   11b4c:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
   11b4e:	695a      	ldr	r2, [r3, #20]
   11b50:	07d0      	lsls	r0, r2, #31
   11b52:	d40f      	bmi.n	11b74 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
   11b54:	695a      	ldr	r2, [r3, #20]
   11b56:	0791      	lsls	r1, r2, #30
   11b58:	d40c      	bmi.n	11b74 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
   11b5a:	695a      	ldr	r2, [r3, #20]
   11b5c:	0752      	lsls	r2, r2, #29
   11b5e:	d409      	bmi.n	11b74 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
   11b60:	695a      	ldr	r2, [r3, #20]
   11b62:	0710      	lsls	r0, r2, #28
   11b64:	d406      	bmi.n	11b74 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
   11b66:	695a      	ldr	r2, [r3, #20]
   11b68:	06d1      	lsls	r1, r2, #27
   11b6a:	d403      	bmi.n	11b74 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
   11b6c:	695a      	ldr	r2, [r3, #20]
   11b6e:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
   11b70:	bf58      	it	pl
   11b72:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
   11b74:	695a      	ldr	r2, [r3, #20]
   11b76:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   11b7a:	615a      	str	r2, [r3, #20]
}
   11b7c:	4770      	bx	lr
   11b7e:	bf00      	nop
   11b80:	e000edd0 	.word	0xe000edd0

00011b84 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11b84:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11b86:	4b41      	ldr	r3, [pc, #260]	; (11c8c <z_arm_fault+0x108>)
   11b88:	2500      	movs	r5, #0
   11b8a:	685b      	ldr	r3, [r3, #4]
{
   11b8c:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   11b92:	f385 8811 	msr	BASEPRI, r5
   11b96:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11b9a:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   11b9e:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   11ba2:	d11e      	bne.n	11be2 <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
   11ba4:	f012 0401 	ands.w	r4, r2, #1
   11ba8:	d01a      	beq.n	11be0 <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11baa:	0656      	lsls	r6, r2, #25
   11bac:	f002 0408 	and.w	r4, r2, #8
   11bb0:	d467      	bmi.n	11c82 <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   11bb2:	f082 0204 	eor.w	r2, r2, #4
   11bb6:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11bba:	b164      	cbz	r4, 11bd6 <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
   11bbc:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
   11bc0:	2200      	movs	r2, #0
   11bc2:	3b03      	subs	r3, #3
   11bc4:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   11bc8:	2b04      	cmp	r3, #4
   11bca:	d84b      	bhi.n	11c64 <z_arm_fault+0xe0>
   11bcc:	e8df f003 	tbb	[pc, r3]
   11bd0:	41504c0b 	.word	0x41504c0b
   11bd4:	48          	.byte	0x48
   11bd5:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
   11bd6:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
   11bda:	e7f1      	b.n	11bc0 <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
   11bdc:	460e      	mov	r6, r1
   11bde:	e7ef      	b.n	11bc0 <z_arm_fault+0x3c>
	*nested_exc = false;
   11be0:	4625      	mov	r5, r4
		return NULL;
   11be2:	462e      	mov	r6, r5
   11be4:	e7ec      	b.n	11bc0 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11be6:	4b29      	ldr	r3, [pc, #164]	; (11c8c <z_arm_fault+0x108>)
   11be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11bea:	0792      	lsls	r2, r2, #30
   11bec:	d43a      	bmi.n	11c64 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11bee:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   11bf0:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   11bf4:	d008      	beq.n	11c08 <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
   11bf6:	3328      	adds	r3, #40	; 0x28
   11bf8:	781b      	ldrb	r3, [r3, #0]
   11bfa:	b1eb      	cbz	r3, 11c38 <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
   11bfc:	2001      	movs	r0, #1
   11bfe:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   11c02:	f7ff ff51 	bl	11aa8 <mem_manage_fault.isra.0>
   11c06:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11c08:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11c0c:	b993      	cbnz	r3, 11c34 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11c0e:	2220      	movs	r2, #32
   11c10:	4631      	mov	r1, r6
   11c12:	a802      	add	r0, sp, #8
   11c14:	f003 f82d 	bl	14c72 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c1a:	b36d      	cbz	r5, 11c78 <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11c1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11c20:	b922      	cbnz	r2, 11c2c <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11c22:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11c26:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11c2a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   11c2c:	4620      	mov	r0, r4
   11c2e:	a902      	add	r1, sp, #8
   11c30:	f002 ffb5 	bl	14b9e <z_arm_fatal_error>
}
   11c34:	b00b      	add	sp, #44	; 0x2c
   11c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   11c38:	4b15      	ldr	r3, [pc, #84]	; (11c90 <z_arm_fault+0x10c>)
   11c3a:	781b      	ldrb	r3, [r3, #0]
   11c3c:	b12b      	cbz	r3, 11c4a <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
   11c3e:	2001      	movs	r0, #1
   11c40:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   11c44:	f7ff ff4c 	bl	11ae0 <bus_fault.isra.0>
   11c48:	e7dd      	b.n	11c06 <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
   11c4a:	4b12      	ldr	r3, [pc, #72]	; (11c94 <z_arm_fault+0x110>)
   11c4c:	881f      	ldrh	r7, [r3, #0]
   11c4e:	b2bf      	uxth	r7, r7
   11c50:	b117      	cbz	r7, 11c58 <z_arm_fault+0xd4>
		reason = usage_fault(esf);
   11c52:	f7ff ff63 	bl	11b1c <usage_fault.isra.0>
   11c56:	e7d6      	b.n	11c06 <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
   11c58:	4b0f      	ldr	r3, [pc, #60]	; (11c98 <z_arm_fault+0x114>)
   11c5a:	695c      	ldr	r4, [r3, #20]
   11c5c:	2c00      	cmp	r4, #0
   11c5e:	d0d3      	beq.n	11c08 <z_arm_fault+0x84>
		secure_fault(esf);
   11c60:	f7ff ff72 	bl	11b48 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11c64:	2400      	movs	r4, #0
   11c66:	e7cf      	b.n	11c08 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
   11c68:	2000      	movs	r0, #0
   11c6a:	f10d 0107 	add.w	r1, sp, #7
   11c6e:	e7c8      	b.n	11c02 <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
   11c70:	2000      	movs	r0, #0
   11c72:	f10d 0107 	add.w	r1, sp, #7
   11c76:	e7e5      	b.n	11c44 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11c78:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11c7c:	f023 0301 	bic.w	r3, r3, #1
   11c80:	e7d3      	b.n	11c2a <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11c82:	2c00      	cmp	r4, #0
   11c84:	d1aa      	bne.n	11bdc <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
   11c86:	4606      	mov	r6, r0
			*nested_exc = true;
   11c88:	2501      	movs	r5, #1
   11c8a:	e799      	b.n	11bc0 <z_arm_fault+0x3c>
   11c8c:	e000ed00 	.word	0xe000ed00
   11c90:	e000ed29 	.word	0xe000ed29
   11c94:	e000ed2a 	.word	0xe000ed2a
   11c98:	e000edd0 	.word	0xe000edd0

00011c9c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11c9c:	4b04      	ldr	r3, [pc, #16]	; (11cb0 <z_arm_fault_init+0x14>)
   11c9e:	695a      	ldr	r2, [r3, #20]
   11ca0:	f042 0210 	orr.w	r2, r2, #16
   11ca4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   11ca6:	695a      	ldr	r2, [r3, #20]
   11ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   11cac:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   11cae:	4770      	bx	lr
   11cb0:	e000ed00 	.word	0xe000ed00

00011cb4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11cb4:	4b04      	ldr	r3, [pc, #16]	; (11cc8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11cb6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11cb8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   11cba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11cbc:	d003      	beq.n	11cc6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   11cbe:	4903      	ldr	r1, [pc, #12]	; (11ccc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11cc4:	600a      	str	r2, [r1, #0]

00011cc6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11cc6:	4770      	bx	lr
	ldr r3, =_kernel
   11cc8:	20000810 	.word	0x20000810
	ldr r1, =_SCS_ICSR
   11ccc:	e000ed04 	.word	0xe000ed04

00011cd0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11cd0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11cd4:	4905      	ldr	r1, [pc, #20]	; (11cec <sys_arch_reboot+0x1c>)
   11cd6:	4b06      	ldr	r3, [pc, #24]	; (11cf0 <sys_arch_reboot+0x20>)
   11cd8:	68ca      	ldr	r2, [r1, #12]
   11cda:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11cde:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11ce0:	60cb      	str	r3, [r1, #12]
   11ce2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11ce6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11ce8:	e7fd      	b.n	11ce6 <sys_arch_reboot+0x16>
   11cea:	bf00      	nop
   11cec:	e000ed00 	.word	0xe000ed00
   11cf0:	05fa0004 	.word	0x05fa0004

00011cf4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11cf4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11cf6:	2120      	movs	r1, #32
   11cf8:	4803      	ldr	r0, [pc, #12]	; (11d08 <z_arm_interrupt_init+0x14>)
   11cfa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11cfc:	3301      	adds	r3, #1
   11cfe:	2b41      	cmp	r3, #65	; 0x41
   11d00:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11d04:	d1f9      	bne.n	11cfa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11d06:	4770      	bx	lr
   11d08:	e000e100 	.word	0xe000e100

00011d0c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   11d0c:	b510      	push	{r4, lr}
   11d0e:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   11d10:	f001 f962 	bl	12fd8 <z_thread_single_abort>

	if (_current == thread) {
   11d14:	4b11      	ldr	r3, [pc, #68]	; (11d5c <z_impl_k_thread_abort+0x50>)
   11d16:	689b      	ldr	r3, [r3, #8]
   11d18:	42a3      	cmp	r3, r4
   11d1a:	d107      	bne.n	11d2c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11d1c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11d20:	b183      	cbz	r3, 11d44 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11d22:	4a0f      	ldr	r2, [pc, #60]	; (11d60 <z_impl_k_thread_abort+0x54>)
   11d24:	6853      	ldr	r3, [r2, #4]
   11d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11d2a:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   11d2c:	f04f 0320 	mov.w	r3, #32
   11d30:	f3ef 8011 	mrs	r0, BASEPRI
   11d34:	f383 8811 	msr	BASEPRI, r3
   11d38:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   11d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   11d40:	f003 b8a6 	b.w	14e90 <z_reschedule_irqlock>
   11d44:	f04f 0320 	mov.w	r3, #32
   11d48:	f3ef 8011 	mrs	r0, BASEPRI
   11d4c:	f383 8811 	msr	BASEPRI, r3
   11d50:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   11d54:	f7ff fd4a 	bl	117ec <arch_swap>
	return ret;
   11d58:	e7e8      	b.n	11d2c <z_impl_k_thread_abort+0x20>
   11d5a:	bf00      	nop
   11d5c:	20000810 	.word	0x20000810
   11d60:	e000ed00 	.word	0xe000ed00

00011d64 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11d64:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   11d66:	4b0e      	ldr	r3, [pc, #56]	; (11da0 <z_arm_configure_static_mpu_regions+0x3c>)
{
   11d68:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   11d6a:	9302      	str	r3, [sp, #8]
   11d6c:	4b0d      	ldr	r3, [pc, #52]	; (11da4 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11d6e:	4c0e      	ldr	r4, [pc, #56]	; (11da8 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   11d70:	9303      	str	r3, [sp, #12]
   11d72:	4b0e      	ldr	r3, [pc, #56]	; (11dac <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11d74:	4a0e      	ldr	r2, [pc, #56]	; (11db0 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   11d76:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   11d78:	ab02      	add	r3, sp, #8
   11d7a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11d7c:	a801      	add	r0, sp, #4
   11d7e:	4623      	mov	r3, r4
   11d80:	2101      	movs	r1, #1
   11d82:	f000 f907 	bl	11f94 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   11d86:	2300      	movs	r3, #0
   11d88:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11d8a:	4b0a      	ldr	r3, [pc, #40]	; (11db4 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11d8c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11d8e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11d90:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   11d92:	9305      	str	r3, [sp, #20]
   11d94:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11d96:	f000 f907 	bl	11fa8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11d9a:	b008      	add	sp, #32
   11d9c:	bd10      	pop	{r4, pc}
   11d9e:	bf00      	nop
   11da0:	20000000 	.word	0x20000000
   11da4:	00000000 	.word	0x00000000
   11da8:	20010000 	.word	0x20010000
   11dac:	00010006 	.word	0x00010006
   11db0:	20000000 	.word	0x20000000
   11db4:	20000160 	.word	0x20000160

00011db8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11db8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11dba:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11dbc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11dbe:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   11dc2:	f004 031f 	and.w	r3, r4, #31
   11dc6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11dc8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11dca:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11dcc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   11dd0:	4904      	ldr	r1, [pc, #16]	; (11de4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11dd2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11dd6:	f043 0301 	orr.w	r3, r3, #1
   11dda:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   11ddc:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   11dde:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11de0:	bd10      	pop	{r4, pc}
   11de2:	bf00      	nop
   11de4:	e000ed90 	.word	0xe000ed90

00011de8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   11de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dec:	4607      	mov	r7, r0
   11dee:	4688      	mov	r8, r1
   11df0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11df2:	2600      	movs	r6, #0
	MPU->RNR = index;
   11df4:	4d4a      	ldr	r5, [pc, #296]	; (11f20 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   11df6:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   11df8:	4546      	cmp	r6, r8
   11dfa:	da0b      	bge.n	11e14 <mpu_configure_regions_and_partition.constprop.0+0x2c>
		if (regions[i]->size == 0U) {
   11dfc:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   11e00:	f8d3 9004 	ldr.w	r9, [r3, #4]
   11e04:	f1b9 0f00 	cmp.w	r9, #0
   11e08:	d03a      	beq.n	11e80 <mpu_configure_regions_and_partition.constprop.0+0x98>
		&&
   11e0a:	f1b9 0f1f 	cmp.w	r9, #31
   11e0e:	d805      	bhi.n	11e1c <mpu_configure_regions_and_partition.constprop.0+0x34>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   11e10:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   11e14:	4620      	mov	r0, r4
   11e16:	b005      	add	sp, #20
   11e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   11e1c:	f019 0f1f 	tst.w	r9, #31
   11e20:	d1f6      	bne.n	11e10 <mpu_configure_regions_and_partition.constprop.0+0x28>
		((part->start &
   11e22:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   11e26:	f01a 0f1f 	tst.w	sl, #31
   11e2a:	d1f1      	bne.n	11e10 <mpu_configure_regions_and_partition.constprop.0+0x28>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11e2c:	4650      	mov	r0, sl
   11e2e:	f002 fee3 	bl	14bf8 <arm_cmse_mpu_region_get>
   11e32:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11e34:	eb09 000a 	add.w	r0, r9, sl
   11e38:	3801      	subs	r0, #1
   11e3a:	f002 fedd 	bl	14bf8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11e3e:	4583      	cmp	fp, r0
   11e40:	d1e6      	bne.n	11e10 <mpu_configure_regions_and_partition.constprop.0+0x28>
		if ((u_reg_index == -EINVAL) ||
   11e42:	f11b 0f16 	cmn.w	fp, #22
   11e46:	d0e3      	beq.n	11e10 <mpu_configure_regions_and_partition.constprop.0+0x28>
			(u_reg_index > (reg_index - 1))) {
   11e48:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   11e4a:	455b      	cmp	r3, fp
   11e4c:	dbe0      	blt.n	11e10 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
   11e4e:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   11e52:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   11e54:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11e58:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   11e5a:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   11e5e:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11e62:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   11e66:	e9d1 3200 	ldrd	r3, r2, [r1]
   11e6a:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   11e6c:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   11e6e:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   11e72:	d118      	bne.n	11ea6 <mpu_configure_regions_and_partition.constprop.0+0xbe>
   11e74:	45ca      	cmp	sl, r9
   11e76:	d105      	bne.n	11e84 <mpu_configure_regions_and_partition.constprop.0+0x9c>
			mpu_configure_region(u_reg_index, regions[i]);
   11e78:	fa5f f08b 	uxtb.w	r0, fp
   11e7c:	f002 fe9c 	bl	14bb8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   11e80:	3601      	adds	r6, #1
   11e82:	e7b9      	b.n	11df8 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   11e84:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11e88:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   11e8a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11e8e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   11e92:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11e94:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   11e96:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   11e98:	f002 fe8e 	bl	14bb8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11e9c:	f110 0f16 	cmn.w	r0, #22
   11ea0:	d0b6      	beq.n	11e10 <mpu_configure_regions_and_partition.constprop.0+0x28>
			reg_index++;
   11ea2:	1c44      	adds	r4, r0, #1
   11ea4:	e7ec      	b.n	11e80 <mpu_configure_regions_and_partition.constprop.0+0x98>
	MPU->RNR = index;
   11ea6:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11eaa:	692a      	ldr	r2, [r5, #16]
   11eac:	3b01      	subs	r3, #1
   11eae:	f023 031f 	bic.w	r3, r3, #31
   11eb2:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   11eb6:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   11eb8:	45ca      	cmp	sl, r9
   11eba:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11ebc:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   11ebe:	d0eb      	beq.n	11e98 <mpu_configure_regions_and_partition.constprop.0+0xb0>
				mpu_configure_region(reg_index, regions[i]);
   11ec0:	f002 fe7a 	bl	14bb8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11ec4:	f110 0f16 	cmn.w	r0, #22
   11ec8:	d0a2      	beq.n	11e10 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
   11eca:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   11ece:	68ea      	ldr	r2, [r5, #12]
   11ed0:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   11ed4:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   11ed8:	f362 0304 	bfi	r3, r2, #0, #5
   11edc:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11ee0:	692b      	ldr	r3, [r5, #16]
   11ee2:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11ee6:	085b      	lsrs	r3, r3, #1
   11ee8:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   11eec:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11ef0:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   11ef4:	e9d3 1300 	ldrd	r1, r3, [r3]
   11ef8:	440b      	add	r3, r1
   11efa:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   11efc:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   11f00:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   11f02:	4453      	add	r3, sl
   11f04:	eba3 0309 	sub.w	r3, r3, r9
   11f08:	b2c0      	uxtb	r0, r0
   11f0a:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   11f0e:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   11f10:	9303      	str	r3, [sp, #12]
   11f12:	f63f af7d 	bhi.w	11e10 <mpu_configure_regions_and_partition.constprop.0+0x28>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   11f16:	4669      	mov	r1, sp
   11f18:	f7ff ff4e 	bl	11db8 <region_init>
   11f1c:	e7c1      	b.n	11ea2 <mpu_configure_regions_and_partition.constprop.0+0xba>
   11f1e:	bf00      	nop
   11f20:	e000ed90 	.word	0xe000ed90

00011f24 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11f24:	2205      	movs	r2, #5
   11f26:	4b03      	ldr	r3, [pc, #12]	; (11f34 <arm_core_mpu_enable+0x10>)
   11f28:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   11f2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11f2e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11f32:	4770      	bx	lr
   11f34:	e000ed90 	.word	0xe000ed90

00011f38 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   11f38:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11f3c:	2200      	movs	r2, #0
   11f3e:	4b01      	ldr	r3, [pc, #4]	; (11f44 <arm_core_mpu_disable+0xc>)
   11f40:	605a      	str	r2, [r3, #4]
}
   11f42:	4770      	bx	lr
   11f44:	e000ed90 	.word	0xe000ed90

00011f48 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   11f48:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11f4a:	4c0e      	ldr	r4, [pc, #56]	; (11f84 <arm_mpu_init+0x3c>)
   11f4c:	6825      	ldr	r5, [r4, #0]
   11f4e:	2d10      	cmp	r5, #16
   11f50:	d814      	bhi.n	11f7c <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   11f52:	f7ff fff1 	bl	11f38 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11f56:	2000      	movs	r0, #0
	MPU->MAIR0 =
   11f58:	4b0b      	ldr	r3, [pc, #44]	; (11f88 <arm_mpu_init+0x40>)
   11f5a:	4a0c      	ldr	r2, [pc, #48]	; (11f8c <arm_mpu_init+0x44>)
   11f5c:	631a      	str	r2, [r3, #48]	; 0x30
   11f5e:	4285      	cmp	r5, r0
   11f60:	d105      	bne.n	11f6e <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   11f62:	4b0b      	ldr	r3, [pc, #44]	; (11f90 <arm_mpu_init+0x48>)
   11f64:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   11f66:	f7ff ffdd 	bl	11f24 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   11f6a:	2000      	movs	r0, #0
}
   11f6c:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11f6e:	6861      	ldr	r1, [r4, #4]
   11f70:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11f74:	f7ff ff20 	bl	11db8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11f78:	3001      	adds	r0, #1
   11f7a:	e7f0      	b.n	11f5e <arm_mpu_init+0x16>
		return -1;
   11f7c:	f04f 30ff 	mov.w	r0, #4294967295
   11f80:	e7f4      	b.n	11f6c <arm_mpu_init+0x24>
   11f82:	bf00      	nop
   11f84:	00015498 	.word	0x00015498
   11f88:	e000ed90 	.word	0xe000ed90
   11f8c:	0044ffaa 	.word	0x0044ffaa
   11f90:	2000086c 	.word	0x2000086c

00011f94 <arm_core_mpu_configure_static_mpu_regions>:
{
   11f94:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11f96:	4c03      	ldr	r4, [pc, #12]	; (11fa4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   11f98:	7822      	ldrb	r2, [r4, #0]
   11f9a:	f7ff ff25 	bl	11de8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11f9e:	7020      	strb	r0, [r4, #0]
}
   11fa0:	bd10      	pop	{r4, pc}
   11fa2:	bf00      	nop
   11fa4:	2000086c 	.word	0x2000086c

00011fa8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   11fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fac:	4d26      	ldr	r5, [pc, #152]	; (12048 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   11fae:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11fb0:	4606      	mov	r6, r0
   11fb2:	f04f 0800 	mov.w	r8, #0
   11fb6:	46ab      	mov	fp, r5
	MPU->RNR = index;
   11fb8:	4f24      	ldr	r7, [pc, #144]	; (1204c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11fba:	45d0      	cmp	r8, sl
   11fbc:	da1b      	bge.n	11ff6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   11fbe:	f8d6 9004 	ldr.w	r9, [r6, #4]
   11fc2:	f1b9 0f00 	cmp.w	r9, #0
   11fc6:	d039      	beq.n	1203c <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   11fc8:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11fca:	4608      	mov	r0, r1
   11fcc:	9101      	str	r1, [sp, #4]
   11fce:	f002 fe13 	bl	14bf8 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11fd2:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11fd4:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11fd6:	eb09 0001 	add.w	r0, r9, r1
   11fda:	3801      	subs	r0, #1
   11fdc:	f002 fe0c 	bl	14bf8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11fe0:	4284      	cmp	r4, r0
   11fe2:	f04f 0214 	mov.w	r2, #20
   11fe6:	4b1a      	ldr	r3, [pc, #104]	; (12050 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   11fe8:	d008      	beq.n	11ffc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   11fea:	f06f 0315 	mvn.w	r3, #21
   11fee:	fb02 f808 	mul.w	r8, r2, r8
   11ff2:	f84b 3008 	str.w	r3, [fp, r8]
}
   11ff6:	b003      	add	sp, #12
   11ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11ffc:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   12000:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   12002:	d0f8      	beq.n	11ff6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   12004:	7819      	ldrb	r1, [r3, #0]
   12006:	42a1      	cmp	r1, r4
   12008:	ddf5      	ble.n	11ff6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   1200a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   1200e:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   12010:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   12012:	68fc      	ldr	r4, [r7, #12]
   12014:	f100 0108 	add.w	r1, r0, #8
   12018:	7b00      	ldrb	r0, [r0, #12]
   1201a:	f364 0004 	bfi	r0, r4, #0, #5
   1201e:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12020:	6938      	ldr	r0, [r7, #16]
   12022:	790c      	ldrb	r4, [r1, #4]
   12024:	0840      	lsrs	r0, r0, #1
   12026:	f360 1447 	bfi	r4, r0, #5, #3
   1202a:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1202c:	68f9      	ldr	r1, [r7, #12]
   1202e:	f021 011f 	bic.w	r1, r1, #31
   12032:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   12034:	6939      	ldr	r1, [r7, #16]
   12036:	f021 011f 	bic.w	r1, r1, #31
   1203a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1203c:	f108 0801 	add.w	r8, r8, #1
   12040:	3514      	adds	r5, #20
   12042:	360c      	adds	r6, #12
   12044:	e7b9      	b.n	11fba <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   12046:	bf00      	nop
   12048:	200007f4 	.word	0x200007f4
   1204c:	e000ed90 	.word	0xe000ed90
   12050:	2000086c 	.word	0x2000086c

00012054 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
   12054:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
   12056:	4b0c      	ldr	r3, [pc, #48]	; (12088 <tz_nonsecure_state_setup+0x34>)
   12058:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
   1205a:	6803      	ldr	r3, [r0, #0]
   1205c:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
   12060:	6843      	ldr	r3, [r0, #4]
   12062:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
   12066:	7b02      	ldrb	r2, [r0, #12]
   12068:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
   1206c:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
   12070:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
   12074:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
   12076:	bf48      	it	mi
   12078:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
   1207c:	b109      	cbz	r1, 12082 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
   1207e:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
   12082:	f383 8894 	msr	CONTROL_NS, r3
}
   12086:	4770      	bx	lr
   12088:	e002ed00 	.word	0xe002ed00

0001208c <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   1208c:	4a08      	ldr	r2, [pc, #32]	; (120b0 <tz_nbanked_exception_target_state_set+0x24>)
   1208e:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
   12090:	b148      	cbz	r0, 120a6 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
   12092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12096:	041b      	lsls	r3, r3, #16
   12098:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   1209a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   1209e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   120a2:	60d3      	str	r3, [r2, #12]
}
   120a4:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   120a6:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
   120a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   120ac:	e7f5      	b.n	1209a <tz_nbanked_exception_target_state_set+0xe>
   120ae:	bf00      	nop
   120b0:	e000ed00 	.word	0xe000ed00

000120b4 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   120b4:	4a08      	ldr	r2, [pc, #32]	; (120d8 <tz_nonsecure_exception_prio_config+0x24>)
   120b6:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
   120b8:	b140      	cbz	r0, 120cc <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   120ba:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
   120bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   120c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   120c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   120c8:	60d3      	str	r3, [r2, #12]
}
   120ca:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
   120cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   120d0:	041b      	lsls	r3, r3, #16
   120d2:	0c1b      	lsrs	r3, r3, #16
   120d4:	e7f4      	b.n	120c0 <tz_nonsecure_exception_prio_config+0xc>
   120d6:	bf00      	nop
   120d8:	e000ed00 	.word	0xe000ed00

000120dc <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   120dc:	4a08      	ldr	r2, [pc, #32]	; (12100 <tz_nonsecure_system_reset_req_block+0x24>)
   120de:	68d3      	ldr	r3, [r2, #12]
	if (block) {
   120e0:	b140      	cbz	r0, 120f4 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   120e2:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
   120e4:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   120e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   120ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
   120f0:	60d3      	str	r3, [r2, #12]
}
   120f2:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
   120f4:	f023 0308 	bic.w	r3, r3, #8
   120f8:	041b      	lsls	r3, r3, #16
   120fa:	0c1b      	lsrs	r3, r3, #16
   120fc:	e7f4      	b.n	120e8 <tz_nonsecure_system_reset_req_block+0xc>
   120fe:	bf00      	nop
   12100:	e000ed00 	.word	0xe000ed00

00012104 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
   12104:	4a03      	ldr	r2, [pc, #12]	; (12114 <tz_nonsecure_fpu_access_enable+0x10>)
   12106:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1210a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   1210e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
   12112:	4770      	bx	lr
   12114:	e000ed00 	.word	0xe000ed00

00012118 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
   12118:	4b08      	ldr	r3, [pc, #32]	; (1213c <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
   1211a:	681a      	ldr	r2, [r3, #0]
   1211c:	b118      	cbz	r0, 12126 <tz_sau_configure+0xe>
   1211e:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   12122:	601a      	str	r2, [r3, #0]
		}
	}
}
   12124:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
   12126:	f022 0201 	bic.w	r2, r2, #1
   1212a:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   1212c:	681a      	ldr	r2, [r3, #0]
		if (allns) {
   1212e:	b111      	cbz	r1, 12136 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   12130:	f042 0202 	orr.w	r2, r2, #2
   12134:	e7f5      	b.n	12122 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   12136:	f022 0202 	bic.w	r2, r2, #2
   1213a:	e7f2      	b.n	12122 <tz_sau_configure+0xa>
   1213c:	e000edd0 	.word	0xe000edd0

00012140 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   12140:	4b01      	ldr	r3, [pc, #4]	; (12148 <__stdout_hook_install+0x8>)
   12142:	6018      	str	r0, [r3, #0]
}
   12144:	4770      	bx	lr
   12146:	bf00      	nop
   12148:	20000024 	.word	0x20000024

0001214c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1214c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1214e:	794b      	ldrb	r3, [r1, #5]
   12150:	2b01      	cmp	r3, #1
   12152:	d029      	beq.n	121a8 <uarte_nrfx_configure+0x5c>
   12154:	2b03      	cmp	r3, #3
   12156:	d124      	bne.n	121a2 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   12158:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1215a:	798b      	ldrb	r3, [r1, #6]
   1215c:	2b03      	cmp	r3, #3
   1215e:	d120      	bne.n	121a2 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   12160:	79cc      	ldrb	r4, [r1, #7]
   12162:	b124      	cbz	r4, 1216e <uarte_nrfx_configure+0x22>
   12164:	2c01      	cmp	r4, #1
   12166:	d11c      	bne.n	121a2 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   12168:	6843      	ldr	r3, [r0, #4]
   1216a:	791b      	ldrb	r3, [r3, #4]
   1216c:	b1cb      	cbz	r3, 121a2 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1216e:	790a      	ldrb	r2, [r1, #4]
   12170:	b112      	cbz	r2, 12178 <uarte_nrfx_configure+0x2c>
   12172:	2a02      	cmp	r2, #2
   12174:	d115      	bne.n	121a2 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12176:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   12178:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1217a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1217c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   12180:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   12182:	d065      	beq.n	12250 <uarte_nrfx_configure+0x104>
   12184:	d82d      	bhi.n	121e2 <uarte_nrfx_configure+0x96>
   12186:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1218a:	d064      	beq.n	12256 <uarte_nrfx_configure+0x10a>
   1218c:	d816      	bhi.n	121bc <uarte_nrfx_configure+0x70>
   1218e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   12192:	d062      	beq.n	1225a <uarte_nrfx_configure+0x10e>
   12194:	d80a      	bhi.n	121ac <uarte_nrfx_configure+0x60>
   12196:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1219a:	d061      	beq.n	12260 <uarte_nrfx_configure+0x114>
   1219c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   121a0:	d061      	beq.n	12266 <uarte_nrfx_configure+0x11a>
   121a2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   121a6:	e052      	b.n	1224e <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   121a8:	2600      	movs	r6, #0
   121aa:	e7d6      	b.n	1215a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   121ac:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   121b0:	d05c      	beq.n	1226c <uarte_nrfx_configure+0x120>
   121b2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   121b6:	d1f4      	bne.n	121a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   121b8:	4b37      	ldr	r3, [pc, #220]	; (12298 <uarte_nrfx_configure+0x14c>)
   121ba:	e03c      	b.n	12236 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   121bc:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   121c0:	d057      	beq.n	12272 <uarte_nrfx_configure+0x126>
   121c2:	d807      	bhi.n	121d4 <uarte_nrfx_configure+0x88>
   121c4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   121c8:	d055      	beq.n	12276 <uarte_nrfx_configure+0x12a>
   121ca:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   121ce:	d1e8      	bne.n	121a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   121d0:	4b32      	ldr	r3, [pc, #200]	; (1229c <uarte_nrfx_configure+0x150>)
   121d2:	e030      	b.n	12236 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   121d4:	f647 2712 	movw	r7, #31250	; 0x7a12
   121d8:	42bb      	cmp	r3, r7
   121da:	d1e2      	bne.n	121a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   121dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   121e0:	e029      	b.n	12236 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   121e2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   121e6:	d048      	beq.n	1227a <uarte_nrfx_configure+0x12e>
   121e8:	d813      	bhi.n	12212 <uarte_nrfx_configure+0xc6>
   121ea:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   121ee:	d047      	beq.n	12280 <uarte_nrfx_configure+0x134>
   121f0:	d809      	bhi.n	12206 <uarte_nrfx_configure+0xba>
   121f2:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   121f6:	42bb      	cmp	r3, r7
   121f8:	d044      	beq.n	12284 <uarte_nrfx_configure+0x138>
   121fa:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   121fe:	d1d0      	bne.n	121a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   12200:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   12204:	e017      	b.n	12236 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12206:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1220a:	d1ca      	bne.n	121a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1220c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   12210:	e011      	b.n	12236 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12212:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   12216:	d038      	beq.n	1228a <uarte_nrfx_configure+0x13e>
   12218:	d808      	bhi.n	1222c <uarte_nrfx_configure+0xe0>
   1221a:	4f21      	ldr	r7, [pc, #132]	; (122a0 <uarte_nrfx_configure+0x154>)
   1221c:	42bb      	cmp	r3, r7
   1221e:	d037      	beq.n	12290 <uarte_nrfx_configure+0x144>
   12220:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   12224:	d1bd      	bne.n	121a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   12226:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1222a:	e004      	b.n	12236 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1222c:	4f1d      	ldr	r7, [pc, #116]	; (122a4 <uarte_nrfx_configure+0x158>)
   1222e:	42bb      	cmp	r3, r7
   12230:	d1b7      	bne.n	121a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   12232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   12236:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1223a:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   1223c:	4334      	orrs	r4, r6
   1223e:	4322      	orrs	r2, r4
   12240:	3304      	adds	r3, #4
   12242:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12244:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   12248:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1224c:	2000      	movs	r0, #0
}
   1224e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   12250:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   12254:	e7ef      	b.n	12236 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   12256:	4b14      	ldr	r3, [pc, #80]	; (122a8 <uarte_nrfx_configure+0x15c>)
   12258:	e7ed      	b.n	12236 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1225a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1225e:	e7ea      	b.n	12236 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   12260:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   12264:	e7e7      	b.n	12236 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12266:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1226a:	e7e4      	b.n	12236 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1226c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   12270:	e7e1      	b.n	12236 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   12272:	4b0e      	ldr	r3, [pc, #56]	; (122ac <uarte_nrfx_configure+0x160>)
   12274:	e7df      	b.n	12236 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   12276:	4b0e      	ldr	r3, [pc, #56]	; (122b0 <uarte_nrfx_configure+0x164>)
   12278:	e7dd      	b.n	12236 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1227a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1227e:	e7da      	b.n	12236 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   12280:	4b0c      	ldr	r3, [pc, #48]	; (122b4 <uarte_nrfx_configure+0x168>)
   12282:	e7d8      	b.n	12236 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   12284:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   12288:	e7d5      	b.n	12236 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1228a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1228e:	e7d2      	b.n	12236 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   12290:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   12294:	e7cf      	b.n	12236 <uarte_nrfx_configure+0xea>
   12296:	bf00      	nop
   12298:	0013b000 	.word	0x0013b000
   1229c:	004ea000 	.word	0x004ea000
   122a0:	0003d090 	.word	0x0003d090
   122a4:	000f4240 	.word	0x000f4240
   122a8:	00275000 	.word	0x00275000
   122ac:	0075c000 	.word	0x0075c000
   122b0:	003af000 	.word	0x003af000
   122b4:	013a9000 	.word	0x013a9000

000122b8 <uarte_instance_init.isra.0>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(const struct device *dev,
   122b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	nrf_uarte_disable(uarte);

	data->dev = dev;

	nrf_gpio_pin_write(config->pseltxd, 1);
   122ba:	680f      	ldr	r7, [r1, #0]
static int uarte_instance_init(const struct device *dev,
   122bc:	460d      	mov	r5, r1

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   122be:	2101      	movs	r1, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   122c0:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
   122c4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   122c6:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   122c8:	681c      	ldr	r4, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   122ca:	f007 021f 	and.w	r2, r7, #31
    p_reg->OUTSET = set_mask;
   122ce:	4b25      	ldr	r3, [pc, #148]	; (12364 <uarte_instance_init.isra.0+0xac>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   122d0:	4091      	lsls	r1, r2
   122d2:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
	data->dev = dev;
   122d6:	6030      	str	r0, [r6, #0]
    p_reg->OUTSET = set_mask;
   122d8:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   122da:	2103      	movs	r1, #3
   122dc:	3280      	adds	r2, #128	; 0x80
   122de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   122e2:	686a      	ldr	r2, [r5, #4]
   122e4:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   122e6:	bf1e      	ittt	ne
   122e8:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   122ec:	3180      	addne	r1, #128	; 0x80
   122ee:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   122f2:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
   122f4:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
   122f8:	1c4f      	adds	r7, r1, #1
   122fa:	bf18      	it	ne
   122fc:	2700      	movne	r7, #0
    p_reg->PSEL.RXD = pselrxd;
   122fe:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
   12302:	bf1e      	ittt	ne
   12304:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12308:	3280      	addne	r2, #128	; 0x80
   1230a:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1230e:	68ef      	ldr	r7, [r5, #12]
   12310:	1c7a      	adds	r2, r7, #1
   12312:	d00c      	beq.n	1232e <uarte_instance_init.isra.0+0x76>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12314:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
   12318:	f007 021f 	and.w	r2, r7, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1231c:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
   12320:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12324:	f04f 0c03 	mov.w	ip, #3
   12328:	3280      	adds	r2, #128	; 0x80
   1232a:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1232e:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   12332:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   12336:	68c1      	ldr	r1, [r0, #12]
   12338:	3104      	adds	r1, #4
   1233a:	f7ff ff07 	bl	1214c <uarte_nrfx_configure>
	if (err) {
   1233e:	b980      	cbnz	r0, 12362 <uarte_instance_init.isra.0+0xaa>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   12340:	2308      	movs	r3, #8
   12342:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   12346:	686b      	ldr	r3, [r5, #4]
   12348:	3301      	adds	r3, #1
   1234a:	d00a      	beq.n	12362 <uarte_instance_init.isra.0+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1234c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   12350:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
   12354:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   12356:	3610      	adds	r6, #16
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   12358:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1235c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12360:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   12362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12364:	50842500 	.word	0x50842500

00012368 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   12368:	b530      	push	{r4, r5, lr}
   1236a:	b085      	sub	sp, #20
   1236c:	4605      	mov	r5, r0
   1236e:	466c      	mov	r4, sp
   12370:	4b04      	ldr	r3, [pc, #16]	; (12384 <uarte_0_init+0x1c>)
   12372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   12374:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   12378:	4621      	mov	r1, r4
   1237a:	4628      	mov	r0, r5
   1237c:	f7ff ff9c 	bl	122b8 <uarte_instance_init.isra.0>
   12380:	b005      	add	sp, #20
   12382:	bd30      	pop	{r4, r5, pc}
   12384:	0001530c 	.word	0x0001530c

00012388 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   12388:	b530      	push	{r4, r5, lr}
   1238a:	b085      	sub	sp, #20
   1238c:	4605      	mov	r5, r0
   1238e:	466c      	mov	r4, sp
   12390:	4b04      	ldr	r3, [pc, #16]	; (123a4 <uarte_1_init+0x1c>)
   12392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   12394:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   12398:	4621      	mov	r1, r4
   1239a:	4628      	mov	r0, r5
   1239c:	f7ff ff8c 	bl	122b8 <uarte_instance_init.isra.0>
   123a0:	b005      	add	sp, #20
   123a2:	bd30      	pop	{r4, r5, pc}
   123a4:	0001531c 	.word	0x0001531c

000123a8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   123a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   123ac:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   123ae:	4c21      	ldr	r4, [pc, #132]	; (12434 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   123b0:	4e21      	ldr	r6, [pc, #132]	; (12438 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   123b2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   123b6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 12440 <check_ext_api_requests+0x98>
{
   123ba:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   123bc:	45a8      	cmp	r8, r5
   123be:	d803      	bhi.n	123c8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   123c0:	2000      	movs	r0, #0
   123c2:	b005      	add	sp, #20
   123c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   123c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   123ca:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   123ce:	681f      	ldr	r7, [r3, #0]
   123d0:	ab01      	add	r3, sp, #4
   123d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   123d6:	220c      	movs	r2, #12
   123d8:	4619      	mov	r1, r3
   123da:	4638      	mov	r0, r7
   123dc:	f002 fc22 	bl	14c24 <memcmp>
   123e0:	b990      	cbnz	r0, 12408 <check_ext_api_requests+0x60>
   123e2:	b18f      	cbz	r7, 12408 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   123e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   123e6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   123e8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   123ea:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   123ec:	4291      	cmp	r1, r2
   123ee:	d10b      	bne.n	12408 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   123f0:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   123f2:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   123f4:	4291      	cmp	r1, r2
   123f6:	d807      	bhi.n	12408 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   123f8:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   123fa:	4291      	cmp	r1, r2
   123fc:	d904      	bls.n	12408 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   123fe:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   12400:	695b      	ldr	r3, [r3, #20]
   12402:	ea32 0303 	bics.w	r3, r2, r3
   12406:	d00a      	beq.n	1241e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   12408:	6a27      	ldr	r7, [r4, #32]
   1240a:	b167      	cbz	r7, 12426 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1240c:	480b      	ldr	r0, [pc, #44]	; (1243c <check_ext_api_requests+0x94>)
   1240e:	f002 f905 	bl	1461c <printk>
			k_panic();
   12412:	4040      	eors	r0, r0
   12414:	f380 8811 	msr	BASEPRI, r0
   12418:	f04f 0004 	mov.w	r0, #4
   1241c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1241e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12420:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   12422:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12424:	e7ca      	b.n	123bc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   12426:	4648      	mov	r0, r9
   12428:	f002 f8f8 	bl	1461c <printk>
			*ext_api_req->ext_api = NULL;
   1242c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1242e:	601f      	str	r7, [r3, #0]
   12430:	e7f5      	b.n	1241e <check_ext_api_requests+0x76>
   12432:	bf00      	nop
   12434:	0001043c 	.word	0x0001043c
   12438:	0001532c 	.word	0x0001532c
   1243c:	0001594c 	.word	0x0001594c
   12440:	00015975 	.word	0x00015975

00012444 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   12444:	4b05      	ldr	r3, [pc, #20]	; (1245c <nrf91_errata_14+0x18>)
   12446:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   12448:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   1244a:	681b      	ldr	r3, [r3, #0]
   1244c:	2b09      	cmp	r3, #9
   1244e:	d103      	bne.n	12458 <nrf91_errata_14+0x14>
            {
                switch(var2)
   12450:	1e43      	subs	r3, r0, #1
   12452:	4258      	negs	r0, r3
   12454:	4158      	adcs	r0, r3
   12456:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   12458:	2000      	movs	r0, #0
    #endif
}
   1245a:	4770      	bx	lr
   1245c:	00ff0134 	.word	0x00ff0134

00012460 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   12460:	4a4f      	ldr	r2, [pc, #316]	; (125a0 <SystemInit+0x140>)
{
   12462:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   12464:	6813      	ldr	r3, [r2, #0]
   12466:	f043 0302 	orr.w	r3, r3, #2
   1246a:	6013      	str	r3, [r2, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   1246c:	4b4d      	ldr	r3, [pc, #308]	; (125a4 <SystemInit+0x144>)
            if (var1 == 0x09)
   1246e:	681b      	ldr	r3, [r3, #0]
   12470:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
   12472:	bf01      	itttt	eq
   12474:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
   12478:	2200      	moveq	r2, #0
   1247a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
   1247e:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
   12482:	f7ff ffdf 	bl	12444 <nrf91_errata_14>
   12486:	b130      	cbz	r0, 12496 <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
   12488:	2301      	movs	r3, #1
   1248a:	4a47      	ldr	r2, [pc, #284]	; (125a8 <SystemInit+0x148>)
   1248c:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   1248e:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
   12492:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   12496:	4b43      	ldr	r3, [pc, #268]	; (125a4 <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   12498:	681b      	ldr	r3, [r3, #0]
   1249a:	2b09      	cmp	r3, #9
   1249c:	d107      	bne.n	124ae <SystemInit+0x4e>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   1249e:	4b43      	ldr	r3, [pc, #268]	; (125ac <SystemInit+0x14c>)
            {
                switch(var2)
   124a0:	681b      	ldr	r3, [r3, #0]
   124a2:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   124a4:	bf1e      	ittt	ne
   124a6:	2201      	movne	r2, #1
   124a8:	4b41      	ldrne	r3, [pc, #260]	; (125b0 <SystemInit+0x150>)
   124aa:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
   124ae:	f7ff ffc9 	bl	12444 <nrf91_errata_14>
   124b2:	b110      	cbz	r0, 124ba <SystemInit+0x5a>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
   124b4:	220e      	movs	r2, #14
   124b6:	4b3f      	ldr	r3, [pc, #252]	; (125b4 <SystemInit+0x154>)
   124b8:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   124ba:	4b3a      	ldr	r3, [pc, #232]	; (125a4 <SystemInit+0x144>)
            if (var1 == 0x09)
   124bc:	681b      	ldr	r3, [r3, #0]
   124be:	2b09      	cmp	r3, #9
   124c0:	d104      	bne.n	124cc <SystemInit+0x6c>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
   124c2:	2200      	movs	r2, #0
   124c4:	4b3c      	ldr	r3, [pc, #240]	; (125b8 <SystemInit+0x158>)
   124c6:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
   124c8:	2201      	movs	r2, #1
   124ca:	605a      	str	r2, [r3, #4]
{
   124cc:	2200      	movs	r2, #0
   124ce:	00d3      	lsls	r3, r2, #3
   124d0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   124d4:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   124d8:	3101      	adds	r1, #1
   124da:	d008      	beq.n	124ee <SystemInit+0x8e>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   124dc:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   124e0:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   124e2:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   124e6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   124ea:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   124ec:	d1ef      	bne.n	124ce <SystemInit+0x6e>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   124ee:	4b33      	ldr	r3, [pc, #204]	; (125bc <SystemInit+0x15c>)
   124f0:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
   124f2:	07d1      	lsls	r1, r2, #31
   124f4:	d53b      	bpl.n	1256e <SystemInit+0x10e>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   124f6:	4b32      	ldr	r3, [pc, #200]	; (125c0 <SystemInit+0x160>)
   124f8:	4619      	mov	r1, r3
   124fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   124fe:	2a01      	cmp	r2, #1
   12500:	d1fb      	bne.n	124fa <SystemInit+0x9a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
   12502:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12506:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   1250a:	2b01      	cmp	r3, #1
   1250c:	d1fb      	bne.n	12506 <SystemInit+0xa6>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   1250e:	4b2b      	ldr	r3, [pc, #172]	; (125bc <SystemInit+0x15c>)
   12510:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
   12512:	07d2      	lsls	r2, r2, #31
   12514:	d508      	bpl.n	12528 <SystemInit+0xc8>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
   12516:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12518:	4929      	ldr	r1, [pc, #164]	; (125c0 <SystemInit+0x160>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
   1251a:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
   1251e:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12520:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
   12524:	2a01      	cmp	r2, #1
   12526:	d1fb      	bne.n	12520 <SystemInit+0xc0>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   12528:	6a1a      	ldr	r2, [r3, #32]
   1252a:	3201      	adds	r2, #1
   1252c:	d10a      	bne.n	12544 <SystemInit+0xe4>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
   1252e:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
   12530:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12534:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
   12538:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1253a:	4a21      	ldr	r2, [pc, #132]	; (125c0 <SystemInit+0x160>)
   1253c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   12540:	2b01      	cmp	r3, #1
   12542:	d1fb      	bne.n	1253c <SystemInit+0xdc>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
   12544:	2200      	movs	r2, #0
   12546:	4b1e      	ldr	r3, [pc, #120]	; (125c0 <SystemInit+0x160>)
   12548:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1254c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   12550:	2a01      	cmp	r2, #1
   12552:	d1fb      	bne.n	1254c <SystemInit+0xec>
  __ASM volatile ("dsb 0xF":::"memory");
   12554:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12558:	491a      	ldr	r1, [pc, #104]	; (125c4 <SystemInit+0x164>)
   1255a:	4b1b      	ldr	r3, [pc, #108]	; (125c8 <SystemInit+0x168>)
   1255c:	68ca      	ldr	r2, [r1, #12]
   1255e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12562:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12564:	60cb      	str	r3, [r1, #12]
   12566:	f3bf 8f4f 	dsb	sy
    __NOP();
   1256a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1256c:	e7fd      	b.n	1256a <SystemInit+0x10a>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   1256e:	6a1b      	ldr	r3, [r3, #32]
   12570:	3301      	adds	r3, #1
   12572:	d0c0      	beq.n	124f6 <SystemInit+0x96>
        SCB->NSACR |= (3UL << 10);
   12574:	4b13      	ldr	r3, [pc, #76]	; (125c4 <SystemInit+0x164>)
   12576:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1257a:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
   1257e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   12582:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12586:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   1258a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1258e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12592:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   12596:	4b0d      	ldr	r3, [pc, #52]	; (125cc <SystemInit+0x16c>)
   12598:	4a0d      	ldr	r2, [pc, #52]	; (125d0 <SystemInit+0x170>)
   1259a:	601a      	str	r2, [r3, #0]
}
   1259c:	bd08      	pop	{r3, pc}
   1259e:	bf00      	nop
   125a0:	e000edd0 	.word	0xe000edd0
   125a4:	00ff0130 	.word	0x00ff0130
   125a8:	50004a38 	.word	0x50004a38
   125ac:	00ff0134 	.word	0x00ff0134
   125b0:	50004000 	.word	0x50004000
   125b4:	5003aee4 	.word	0x5003aee4
   125b8:	5000470c 	.word	0x5000470c
   125bc:	00ff8000 	.word	0x00ff8000
   125c0:	50039000 	.word	0x50039000
   125c4:	e000ed00 	.word	0xe000ed00
   125c8:	05fa0004 	.word	0x05fa0004
   125cc:	20000050 	.word	0x20000050
   125d0:	03d09000 	.word	0x03d09000

000125d4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   125d4:	4b04      	ldr	r3, [pc, #16]	; (125e8 <nrfx_clock_init+0x14>)
   125d6:	791a      	ldrb	r2, [r3, #4]
   125d8:	b922      	cbnz	r2, 125e4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   125da:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   125dc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   125de:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   125e0:	4802      	ldr	r0, [pc, #8]	; (125ec <nrfx_clock_init+0x18>)
   125e2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   125e4:	4802      	ldr	r0, [pc, #8]	; (125f0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   125e6:	4770      	bx	lr
   125e8:	20000808 	.word	0x20000808
   125ec:	0bad0000 	.word	0x0bad0000
   125f0:	0bad000c 	.word	0x0bad000c

000125f4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   125f4:	b110      	cbz	r0, 125fc <nrfx_clock_start+0x8>
   125f6:	2801      	cmp	r0, #1
   125f8:	d020      	beq.n	1263c <nrfx_clock_start+0x48>
   125fa:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   125fc:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   12600:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12604:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   12608:	03c9      	lsls	r1, r1, #15
   1260a:	d511      	bpl.n	12630 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1260c:	f003 0303 	and.w	r3, r3, #3
   12610:	2b02      	cmp	r3, #2
   12612:	d10d      	bne.n	12630 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   12614:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12618:	2200      	movs	r2, #0
   1261a:	4b0d      	ldr	r3, [pc, #52]	; (12650 <nrfx_clock_start+0x5c>)
   1261c:	601a      	str	r2, [r3, #0]
   1261e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12620:	2202      	movs	r2, #2
   12622:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12626:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1262a:	2201      	movs	r2, #1
   1262c:	609a      	str	r2, [r3, #8]
}
   1262e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   12630:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12634:	2201      	movs	r2, #1
   12636:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1263a:	e7ed      	b.n	12618 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1263c:	2200      	movs	r2, #0
   1263e:	4b05      	ldr	r3, [pc, #20]	; (12654 <nrfx_clock_start+0x60>)
   12640:	601a      	str	r2, [r3, #0]
   12642:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12644:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12648:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1264c:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1264e:	4770      	bx	lr
   12650:	50005104 	.word	0x50005104
   12654:	50005100 	.word	0x50005100

00012658 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   12658:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1265a:	b110      	cbz	r0, 12662 <nrfx_clock_stop+0xa>
   1265c:	2801      	cmp	r0, #1
   1265e:	d018      	beq.n	12692 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   12660:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   12662:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12666:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12668:	2101      	movs	r1, #1
   1266a:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1266e:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
   12670:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12674:	4a15      	ldr	r2, [pc, #84]	; (126cc <nrfx_clock_stop+0x74>)
   12676:	6010      	str	r0, [r2, #0]
   12678:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1267a:	4a15      	ldr	r2, [pc, #84]	; (126d0 <nrfx_clock_stop+0x78>)
   1267c:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1267e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   12682:	03db      	lsls	r3, r3, #15
   12684:	d5ec      	bpl.n	12660 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   12686:	2001      	movs	r0, #1
   12688:	f002 fbb5 	bl	14df6 <nrfx_busy_wait>
   1268c:	3d01      	subs	r5, #1
   1268e:	d1f6      	bne.n	1267e <nrfx_clock_stop+0x26>
   12690:	e7e6      	b.n	12660 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   12692:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12696:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12698:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1269c:	4b0d      	ldr	r3, [pc, #52]	; (126d4 <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
   1269e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   126a2:	601a      	str	r2, [r3, #0]
   126a4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   126a6:	4b0c      	ldr	r3, [pc, #48]	; (126d8 <nrfx_clock_stop+0x80>)
   126a8:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   126aa:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   126ae:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   126b2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   126b6:	03d2      	lsls	r2, r2, #15
   126b8:	d5d2      	bpl.n	12660 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   126ba:	2b00      	cmp	r3, #0
   126bc:	d0d0      	beq.n	12660 <nrfx_clock_stop+0x8>
   126be:	2001      	movs	r0, #1
   126c0:	f002 fb99 	bl	14df6 <nrfx_busy_wait>
   126c4:	3d01      	subs	r5, #1
   126c6:	d1f0      	bne.n	126aa <nrfx_clock_stop+0x52>
   126c8:	e7ca      	b.n	12660 <nrfx_clock_stop+0x8>
   126ca:	bf00      	nop
   126cc:	50005104 	.word	0x50005104
   126d0:	5000500c 	.word	0x5000500c
   126d4:	50005100 	.word	0x50005100
   126d8:	50005004 	.word	0x50005004

000126dc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   126dc:	4b16      	ldr	r3, [pc, #88]	; (12738 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   126de:	b510      	push	{r4, lr}
   126e0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   126e2:	b152      	cbz	r2, 126fa <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   126e4:	2000      	movs	r0, #0
   126e6:	6018      	str	r0, [r3, #0]
   126e8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   126ea:	2201      	movs	r2, #1
   126ec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   126f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   126f4:	4b11      	ldr	r3, [pc, #68]	; (1273c <nrfx_power_clock_irq_handler+0x60>)
   126f6:	681b      	ldr	r3, [r3, #0]
   126f8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   126fa:	4b11      	ldr	r3, [pc, #68]	; (12740 <nrfx_power_clock_irq_handler+0x64>)
   126fc:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   126fe:	b18a      	cbz	r2, 12724 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12700:	2200      	movs	r2, #0
   12702:	601a      	str	r2, [r3, #0]
   12704:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12706:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1270a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1270e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   12712:	f002 0203 	and.w	r2, r2, #3
   12716:	2a01      	cmp	r2, #1
   12718:	f04f 0102 	mov.w	r1, #2
   1271c:	d103      	bne.n	12726 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1271e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12722:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   12724:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   12726:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1272a:	4b04      	ldr	r3, [pc, #16]	; (1273c <nrfx_power_clock_irq_handler+0x60>)
   1272c:	2001      	movs	r0, #1
}
   1272e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   12732:	681b      	ldr	r3, [r3, #0]
   12734:	4718      	bx	r3
   12736:	bf00      	nop
   12738:	50005100 	.word	0x50005100
   1273c:	20000808 	.word	0x20000808
   12740:	50005104 	.word	0x50005104

00012744 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   12744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   12746:	4b10      	ldr	r3, [pc, #64]	; (12788 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   12748:	4f10      	ldr	r7, [pc, #64]	; (1278c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1274a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1274e:	3001      	adds	r0, #1
   12750:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   12754:	42ae      	cmp	r6, r5
   12756:	d800      	bhi.n	1275a <z_sys_init_run_level+0x16>
		}
	}
}
   12758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1275a:	e9d5 3400 	ldrd	r3, r4, [r5]
   1275e:	4620      	mov	r0, r4
   12760:	4798      	blx	r3
   12762:	b170      	cbz	r0, 12782 <z_sys_init_run_level+0x3e>
   12764:	b16c      	cbz	r4, 12782 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   12766:	2301      	movs	r3, #1
				(dev - __device_start));
   12768:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1276a:	4a09      	ldr	r2, [pc, #36]	; (12790 <z_sys_init_run_level+0x4c>)
   1276c:	1124      	asrs	r4, r4, #4
   1276e:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   12770:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   12774:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   12778:	fa03 f404 	lsl.w	r4, r3, r4
   1277c:	4304      	orrs	r4, r0
   1277e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   12782:	3508      	adds	r5, #8
   12784:	e7e6      	b.n	12754 <z_sys_init_run_level+0x10>
   12786:	bf00      	nop
   12788:	000154e4 	.word	0x000154e4
   1278c:	200000bc 	.word	0x200000bc
   12790:	2000010c 	.word	0x2000010c

00012794 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   12794:	4b08      	ldr	r3, [pc, #32]	; (127b8 <z_device_ready+0x24>)
   12796:	1ac0      	subs	r0, r0, r3
   12798:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1279a:	4b08      	ldr	r3, [pc, #32]	; (127bc <z_device_ready+0x28>)
   1279c:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1279e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   127a2:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   127a4:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   127a8:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   127ac:	4210      	tst	r0, r2
}
   127ae:	bf0c      	ite	eq
   127b0:	4618      	moveq	r0, r3
   127b2:	2000      	movne	r0, #0
   127b4:	4770      	bx	lr
   127b6:	bf00      	nop
   127b8:	200000bc 	.word	0x200000bc
   127bc:	2000010c 	.word	0x2000010c

000127c0 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   127c0:	4911      	ldr	r1, [pc, #68]	; (12808 <z_impl_device_get_binding+0x48>)
{
   127c2:	b570      	push	{r4, r5, r6, lr}
   127c4:	4605      	mov	r5, r0
   127c6:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   127c8:	4c10      	ldr	r4, [pc, #64]	; (1280c <z_impl_device_get_binding+0x4c>)
   127ca:	428c      	cmp	r4, r1
   127cc:	d104      	bne.n	127d8 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   127ce:	4c0f      	ldr	r4, [pc, #60]	; (1280c <z_impl_device_get_binding+0x4c>)
   127d0:	42b4      	cmp	r4, r6
   127d2:	d10a      	bne.n	127ea <z_impl_device_get_binding+0x2a>
	return NULL;
   127d4:	2400      	movs	r4, #0
   127d6:	e014      	b.n	12802 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   127d8:	4620      	mov	r0, r4
   127da:	f7ff ffdb 	bl	12794 <z_device_ready>
   127de:	b110      	cbz	r0, 127e6 <z_impl_device_get_binding+0x26>
   127e0:	6823      	ldr	r3, [r4, #0]
   127e2:	42ab      	cmp	r3, r5
   127e4:	d00d      	beq.n	12802 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   127e6:	3410      	adds	r4, #16
   127e8:	e7ef      	b.n	127ca <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   127ea:	4620      	mov	r0, r4
   127ec:	f7ff ffd2 	bl	12794 <z_device_ready>
   127f0:	b908      	cbnz	r0, 127f6 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   127f2:	3410      	adds	r4, #16
   127f4:	e7ec      	b.n	127d0 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   127f6:	4628      	mov	r0, r5
   127f8:	6821      	ldr	r1, [r4, #0]
   127fa:	f002 fa07 	bl	14c0c <strcmp>
   127fe:	2800      	cmp	r0, #0
   12800:	d1f7      	bne.n	127f2 <z_impl_device_get_binding+0x32>
}
   12802:	4620      	mov	r0, r4
   12804:	bd70      	pop	{r4, r5, r6, pc}
   12806:	bf00      	nop
   12808:	2000010c 	.word	0x2000010c
   1280c:	200000bc 	.word	0x200000bc

00012810 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   12810:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   12812:	4d0b      	ldr	r5, [pc, #44]	; (12840 <idle+0x30>)
   12814:	f04f 0220 	mov.w	r2, #32
   12818:	f3ef 8311 	mrs	r3, BASEPRI
   1281c:	f382 8811 	msr	BASEPRI, r2
   12820:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   12824:	f002 fbfe 	bl	15024 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   12828:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   1282a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1282c:	2802      	cmp	r0, #2
   1282e:	bfd8      	it	le
   12830:	4608      	movle	r0, r1
   12832:	f002 fc07 	bl	15044 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   12836:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   12838:	f7ff f8a2 	bl	11980 <arch_cpu_idle>
}
   1283c:	e7ea      	b.n	12814 <idle+0x4>
   1283e:	bf00      	nop
   12840:	20000810 	.word	0x20000810

00012844 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   12844:	4802      	ldr	r0, [pc, #8]	; (12850 <z_bss_zero+0xc>)
   12846:	4a03      	ldr	r2, [pc, #12]	; (12854 <z_bss_zero+0x10>)
   12848:	2100      	movs	r1, #0
   1284a:	1a12      	subs	r2, r2, r0
   1284c:	f002 ba3c 	b.w	14cc8 <memset>
   12850:	20000160 	.word	0x20000160
   12854:	20000870 	.word	0x20000870

00012858 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   12858:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1285a:	4806      	ldr	r0, [pc, #24]	; (12874 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1285c:	4a06      	ldr	r2, [pc, #24]	; (12878 <z_data_copy+0x20>)
   1285e:	4907      	ldr	r1, [pc, #28]	; (1287c <z_data_copy+0x24>)
   12860:	1a12      	subs	r2, r2, r0
   12862:	f002 fa06 	bl	14c72 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   12866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1286a:	4a05      	ldr	r2, [pc, #20]	; (12880 <z_data_copy+0x28>)
   1286c:	4905      	ldr	r1, [pc, #20]	; (12884 <z_data_copy+0x2c>)
   1286e:	4806      	ldr	r0, [pc, #24]	; (12888 <z_data_copy+0x30>)
   12870:	f002 b9ff 	b.w	14c72 <memcpy>
   12874:	20000000 	.word	0x20000000
   12878:	20000160 	.word	0x20000160
   1287c:	000159f0 	.word	0x000159f0
   12880:	00000000 	.word	0x00000000
   12884:	000159f0 	.word	0x000159f0
   12888:	20000000 	.word	0x20000000

0001288c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1288c:	2201      	movs	r2, #1
{
   1288e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   12890:	4b0b      	ldr	r3, [pc, #44]	; (128c0 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   12892:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   12894:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   12896:	f7ff ff55 	bl	12744 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1289a:	4a0a      	ldr	r2, [pc, #40]	; (128c4 <bg_thread_main+0x38>)
   1289c:	490a      	ldr	r1, [pc, #40]	; (128c8 <bg_thread_main+0x3c>)
   1289e:	480b      	ldr	r0, [pc, #44]	; (128cc <bg_thread_main+0x40>)
   128a0:	f001 febc 	bl	1461c <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   128a4:	2003      	movs	r0, #3
   128a6:	f7ff ff4d 	bl	12744 <z_sys_init_run_level>

	z_init_static_threads();
   128aa:	f000 fdb1 	bl	13410 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   128ae:	f001 fe8f 	bl	145d0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   128b2:	4a07      	ldr	r2, [pc, #28]	; (128d0 <bg_thread_main+0x44>)
   128b4:	7b13      	ldrb	r3, [r2, #12]
   128b6:	f023 0301 	bic.w	r3, r3, #1
   128ba:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   128bc:	bd08      	pop	{r3, pc}
   128be:	bf00      	nop
   128c0:	2000086d 	.word	0x2000086d
   128c4:	00015644 	.word	0x00015644
   128c8:	000159b3 	.word	0x000159b3
   128cc:	000159bf 	.word	0x000159bf
   128d0:	200001e0 	.word	0x200001e0

000128d4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   128d4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   128d8:	4b37      	ldr	r3, [pc, #220]	; (129b8 <z_cstart+0xe4>)
   128da:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
   128dc:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   128e0:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   128e4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   128e8:	2400      	movs	r4, #0
   128ea:	23e0      	movs	r3, #224	; 0xe0
   128ec:	4d33      	ldr	r5, [pc, #204]	; (129bc <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   128ee:	f04f 0b01 	mov.w	fp, #1
   128f2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   128f6:	77ec      	strb	r4, [r5, #31]
   128f8:	762c      	strb	r4, [r5, #24]
   128fa:	766c      	strb	r4, [r5, #25]
   128fc:	76ac      	strb	r4, [r5, #26]
   128fe:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   12900:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   12902:	4e2f      	ldr	r6, [pc, #188]	; (129c0 <z_cstart+0xec>)
   12904:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   12908:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   1290a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1290c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 129dc <z_cstart+0x108>
   12910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   12914:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   12916:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   12918:	f7ff f9c0 	bl	11c9c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1291c:	f7ff f82a 	bl	11974 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   12920:	f04f 33ff 	mov.w	r3, #4294967295
   12924:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   12926:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   12928:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1292c:	4d25      	ldr	r5, [pc, #148]	; (129c4 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1292e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   12932:	ab06      	add	r3, sp, #24
   12934:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   12936:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   12938:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   1293c:	f7ff ff02 	bl	12744 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   12940:	2001      	movs	r0, #1
   12942:	f7ff feff 	bl	12744 <z_sys_init_run_level>
	z_sched_init();
   12946:	f000 fc69 	bl	1321c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1294a:	4b1f      	ldr	r3, [pc, #124]	; (129c8 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1294c:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1294e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12952:	491e      	ldr	r1, [pc, #120]	; (129cc <z_cstart+0xf8>)
   12954:	9305      	str	r3, [sp, #20]
   12956:	4630      	mov	r0, r6
   12958:	4653      	mov	r3, sl
   1295a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1295e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12962:	9400      	str	r4, [sp, #0]
   12964:	f000 fd24 	bl	133b0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12968:	7b73      	ldrb	r3, [r6, #13]
   1296a:	4680      	mov	r8, r0
   1296c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   12970:	4630      	mov	r0, r6
   12972:	7373      	strb	r3, [r6, #13]
   12974:	f002 fab8 	bl	14ee8 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   12978:	230f      	movs	r3, #15
   1297a:	4f15      	ldr	r7, [pc, #84]	; (129d0 <z_cstart+0xfc>)
   1297c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12980:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12984:	4913      	ldr	r1, [pc, #76]	; (129d4 <z_cstart+0x100>)
   12986:	4b14      	ldr	r3, [pc, #80]	; (129d8 <z_cstart+0x104>)
   12988:	4638      	mov	r0, r7
   1298a:	e9cd b404 	strd	fp, r4, [sp, #16]
   1298e:	e9cd 4400 	strd	r4, r4, [sp]
   12992:	f000 fd0d 	bl	133b0 <z_setup_new_thread>
   12996:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   12998:	4652      	mov	r2, sl
   1299a:	f023 0304 	bic.w	r3, r3, #4
   1299e:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   129a0:	f105 0318 	add.w	r3, r5, #24
   129a4:	4641      	mov	r1, r8
   129a6:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   129a8:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   129ac:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   129ae:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   129b0:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   129b4:	f7fe ffc0 	bl	11938 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   129b8:	20000db0 	.word	0x20000db0
   129bc:	e000ed00 	.word	0xe000ed00
   129c0:	200001e0 	.word	0x200001e0
   129c4:	20000810 	.word	0x20000810
   129c8:	000159e6 	.word	0x000159e6
   129cc:	20000870 	.word	0x20000870
   129d0:	20000160 	.word	0x20000160
   129d4:	20000c70 	.word	0x20000c70
   129d8:	00012811 	.word	0x00012811
   129dc:	0001288d 	.word	0x0001288d

000129e0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   129e0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   129e2:	4b0e      	ldr	r3, [pc, #56]	; (12a1c <init_mem_slab_module+0x3c>)
   129e4:	4c0e      	ldr	r4, [pc, #56]	; (12a20 <init_mem_slab_module+0x40>)
   129e6:	42a3      	cmp	r3, r4
   129e8:	d301      	bcc.n	129ee <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   129ea:	2000      	movs	r0, #0
	return rc;
}
   129ec:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   129ee:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   129f2:	ea41 0200 	orr.w	r2, r1, r0
   129f6:	f012 0203 	ands.w	r2, r2, #3
   129fa:	d10b      	bne.n	12a14 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   129fc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   129fe:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   12a00:	42aa      	cmp	r2, r5
   12a02:	d101      	bne.n	12a08 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   12a04:	331c      	adds	r3, #28
   12a06:	e7ee      	b.n	129e6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   12a08:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   12a0a:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   12a0c:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   12a0e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   12a10:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   12a12:	e7f5      	b.n	12a00 <init_mem_slab_module+0x20>
		return -EINVAL;
   12a14:	f06f 0015 	mvn.w	r0, #21
	return rc;
   12a18:	e7e8      	b.n	129ec <init_mem_slab_module+0xc>
   12a1a:	bf00      	nop
   12a1c:	20000110 	.word	0x20000110
   12a20:	20000110 	.word	0x20000110

00012a24 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   12a24:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   12a26:	460c      	mov	r4, r1
   12a28:	4616      	mov	r6, r2
   12a2a:	461f      	mov	r7, r3
   12a2c:	f04f 0320 	mov.w	r3, #32
   12a30:	f3ef 8111 	mrs	r1, BASEPRI
   12a34:	f383 8811 	msr	BASEPRI, r3
   12a38:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   12a3c:	6943      	ldr	r3, [r0, #20]
   12a3e:	b15b      	cbz	r3, 12a58 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   12a40:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   12a42:	681b      	ldr	r3, [r3, #0]
   12a44:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   12a46:	6983      	ldr	r3, [r0, #24]
   12a48:	3301      	adds	r3, #1
   12a4a:	6183      	str	r3, [r0, #24]
		result = 0;
   12a4c:	2000      	movs	r0, #0
	__asm__ volatile(
   12a4e:	f381 8811 	msr	BASEPRI, r1
   12a52:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   12a56:	e011      	b.n	12a7c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12a58:	ea56 0207 	orrs.w	r2, r6, r7
   12a5c:	d103      	bne.n	12a66 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   12a5e:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   12a62:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   12a64:	e7f3      	b.n	12a4e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   12a66:	4602      	mov	r2, r0
   12a68:	e9cd 6700 	strd	r6, r7, [sp]
   12a6c:	4804      	ldr	r0, [pc, #16]	; (12a80 <k_mem_slab_alloc+0x5c>)
   12a6e:	f000 fb4f 	bl	13110 <z_pend_curr>
		if (result == 0) {
   12a72:	b918      	cbnz	r0, 12a7c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   12a74:	4b03      	ldr	r3, [pc, #12]	; (12a84 <k_mem_slab_alloc+0x60>)
   12a76:	689b      	ldr	r3, [r3, #8]
   12a78:	695b      	ldr	r3, [r3, #20]
   12a7a:	6023      	str	r3, [r4, #0]
}
   12a7c:	b002      	add	sp, #8
   12a7e:	bdd0      	pop	{r4, r6, r7, pc}
   12a80:	2000086e 	.word	0x2000086e
   12a84:	20000810 	.word	0x20000810

00012a88 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   12a88:	b570      	push	{r4, r5, r6, lr}
   12a8a:	4604      	mov	r4, r0
   12a8c:	460d      	mov	r5, r1
	__asm__ volatile(
   12a8e:	f04f 0320 	mov.w	r3, #32
   12a92:	f3ef 8611 	mrs	r6, BASEPRI
   12a96:	f383 8811 	msr	BASEPRI, r3
   12a9a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   12a9e:	f002 fa7e 	bl	14f9e <z_unpend_first_thread>

	if (pending_thread != NULL) {
   12aa2:	b158      	cbz	r0, 12abc <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   12aa4:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   12aa6:	682a      	ldr	r2, [r5, #0]
   12aa8:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   12aaa:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   12aac:	f002 fa1c 	bl	14ee8 <z_ready_thread>
		z_reschedule(&lock, key);
   12ab0:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   12ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   12ab6:	4808      	ldr	r0, [pc, #32]	; (12ad8 <k_mem_slab_free+0x50>)
   12ab8:	f000 b910 	b.w	12cdc <z_reschedule>
		**(char ***)mem = slab->free_list;
   12abc:	682b      	ldr	r3, [r5, #0]
   12abe:	6962      	ldr	r2, [r4, #20]
   12ac0:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   12ac2:	682b      	ldr	r3, [r5, #0]
   12ac4:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   12ac6:	69a3      	ldr	r3, [r4, #24]
   12ac8:	3b01      	subs	r3, #1
   12aca:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   12acc:	f386 8811 	msr	BASEPRI, r6
   12ad0:	f3bf 8f6f 	isb	sy
}
   12ad4:	bd70      	pop	{r4, r5, r6, pc}
   12ad6:	bf00      	nop
   12ad8:	2000086e 	.word	0x2000086e

00012adc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   12adc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12ae0:	4604      	mov	r4, r0
   12ae2:	4616      	mov	r6, r2
   12ae4:	461f      	mov	r7, r3
	__asm__ volatile(
   12ae6:	f04f 0320 	mov.w	r3, #32
   12aea:	f3ef 8811 	mrs	r8, BASEPRI
   12aee:	f383 8811 	msr	BASEPRI, r3
   12af2:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   12af6:	68c3      	ldr	r3, [r0, #12]
   12af8:	4a32      	ldr	r2, [pc, #200]	; (12bc4 <z_impl_k_mutex_lock+0xe8>)
   12afa:	b16b      	cbz	r3, 12b18 <z_impl_k_mutex_lock+0x3c>
   12afc:	6880      	ldr	r0, [r0, #8]
   12afe:	6891      	ldr	r1, [r2, #8]
   12b00:	4288      	cmp	r0, r1
   12b02:	d019      	beq.n	12b38 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   12b04:	ea56 0307 	orrs.w	r3, r6, r7
   12b08:	d118      	bne.n	12b3c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   12b0a:	f388 8811 	msr	BASEPRI, r8
   12b0e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   12b12:	f06f 000f 	mvn.w	r0, #15
   12b16:	e00c      	b.n	12b32 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   12b18:	6891      	ldr	r1, [r2, #8]
   12b1a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   12b1e:	3301      	adds	r3, #1
   12b20:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   12b22:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   12b24:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   12b26:	60a3      	str	r3, [r4, #8]
   12b28:	f388 8811 	msr	BASEPRI, r8
   12b2c:	f3bf 8f6f 	isb	sy
		return 0;
   12b30:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   12b32:	b002      	add	sp, #8
   12b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   12b38:	6921      	ldr	r1, [r4, #16]
   12b3a:	e7f0      	b.n	12b1e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   12b3c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   12b40:	f991 100e 	ldrsb.w	r1, [r1, #14]
   12b44:	4299      	cmp	r1, r3
   12b46:	bfa8      	it	ge
   12b48:	4619      	movge	r1, r3
   12b4a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   12b4e:	4299      	cmp	r1, r3
   12b50:	da2c      	bge.n	12bac <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   12b52:	f000 fb1f 	bl	13194 <z_set_prio>
   12b56:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   12b58:	4622      	mov	r2, r4
   12b5a:	4641      	mov	r1, r8
   12b5c:	e9cd 6700 	strd	r6, r7, [sp]
   12b60:	4819      	ldr	r0, [pc, #100]	; (12bc8 <z_impl_k_mutex_lock+0xec>)
   12b62:	f000 fad5 	bl	13110 <z_pend_curr>
	if (got_mutex == 0) {
   12b66:	2800      	cmp	r0, #0
   12b68:	d0e3      	beq.n	12b32 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   12b6a:	f04f 0320 	mov.w	r3, #32
   12b6e:	f3ef 8611 	mrs	r6, BASEPRI
   12b72:	f383 8811 	msr	BASEPRI, r3
   12b76:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12b7a:	6823      	ldr	r3, [r4, #0]
   12b7c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12b7e:	42a3      	cmp	r3, r4
   12b80:	d007      	beq.n	12b92 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   12b82:	b133      	cbz	r3, 12b92 <z_impl_k_mutex_lock+0xb6>
   12b84:	f993 300e 	ldrsb.w	r3, [r3, #14]
   12b88:	4299      	cmp	r1, r3
   12b8a:	bfa8      	it	ge
   12b8c:	4619      	movge	r1, r3
   12b8e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   12b92:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   12b94:	f990 300e 	ldrsb.w	r3, [r0, #14]
   12b98:	4299      	cmp	r1, r3
   12b9a:	d109      	bne.n	12bb0 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   12b9c:	b16d      	cbz	r5, 12bba <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   12b9e:	4631      	mov	r1, r6
   12ba0:	4809      	ldr	r0, [pc, #36]	; (12bc8 <z_impl_k_mutex_lock+0xec>)
   12ba2:	f000 f89b 	bl	12cdc <z_reschedule>
	return -EAGAIN;
   12ba6:	f06f 000a 	mvn.w	r0, #10
   12baa:	e7c2      	b.n	12b32 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   12bac:	2500      	movs	r5, #0
   12bae:	e7d3      	b.n	12b58 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   12bb0:	f000 faf0 	bl	13194 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   12bb4:	2800      	cmp	r0, #0
   12bb6:	d1f2      	bne.n	12b9e <z_impl_k_mutex_lock+0xc2>
   12bb8:	e7f0      	b.n	12b9c <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   12bba:	f386 8811 	msr	BASEPRI, r6
   12bbe:	f3bf 8f6f 	isb	sy
   12bc2:	e7f0      	b.n	12ba6 <z_impl_k_mutex_lock+0xca>
   12bc4:	20000810 	.word	0x20000810
   12bc8:	2000086e 	.word	0x2000086e

00012bcc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   12bcc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   12bce:	6883      	ldr	r3, [r0, #8]
{
   12bd0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   12bd2:	2b00      	cmp	r3, #0
   12bd4:	d036      	beq.n	12c44 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   12bd6:	4a1e      	ldr	r2, [pc, #120]	; (12c50 <z_impl_k_mutex_unlock+0x84>)
   12bd8:	6892      	ldr	r2, [r2, #8]
   12bda:	4293      	cmp	r3, r2
   12bdc:	d135      	bne.n	12c4a <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   12bde:	7bda      	ldrb	r2, [r3, #15]
   12be0:	3a01      	subs	r2, #1
   12be2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   12be4:	68c3      	ldr	r3, [r0, #12]
   12be6:	2b01      	cmp	r3, #1
   12be8:	d005      	beq.n	12bf6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   12bea:	3b01      	subs	r3, #1
   12bec:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   12bee:	f000 f8d5 	bl	12d9c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   12bf2:	2000      	movs	r0, #0
}
   12bf4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   12bf6:	f04f 0320 	mov.w	r3, #32
   12bfa:	f3ef 8511 	mrs	r5, BASEPRI
   12bfe:	f383 8811 	msr	BASEPRI, r3
   12c02:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   12c06:	6901      	ldr	r1, [r0, #16]
   12c08:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   12c0a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   12c0e:	4299      	cmp	r1, r3
   12c10:	d001      	beq.n	12c16 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   12c12:	f000 fabf 	bl	13194 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   12c16:	4620      	mov	r0, r4
   12c18:	f002 f9c1 	bl	14f9e <z_unpend_first_thread>
	mutex->owner = new_owner;
   12c1c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   12c1e:	b158      	cbz	r0, 12c38 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   12c20:	f990 200e 	ldrsb.w	r2, [r0, #14]
   12c24:	6122      	str	r2, [r4, #16]
   12c26:	2200      	movs	r2, #0
   12c28:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   12c2a:	f002 f95d 	bl	14ee8 <z_ready_thread>
		z_reschedule(&lock, key);
   12c2e:	4629      	mov	r1, r5
   12c30:	4808      	ldr	r0, [pc, #32]	; (12c54 <z_impl_k_mutex_unlock+0x88>)
   12c32:	f000 f853 	bl	12cdc <z_reschedule>
   12c36:	e7da      	b.n	12bee <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   12c38:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12c3a:	f385 8811 	msr	BASEPRI, r5
   12c3e:	f3bf 8f6f 	isb	sy
   12c42:	e7d4      	b.n	12bee <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   12c44:	f06f 0015 	mvn.w	r0, #21
   12c48:	e7d4      	b.n	12bf4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   12c4a:	f04f 30ff 	mov.w	r0, #4294967295
   12c4e:	e7d1      	b.n	12bf4 <z_impl_k_mutex_unlock+0x28>
   12c50:	20000810 	.word	0x20000810
   12c54:	2000086e 	.word	0x2000086e

00012c58 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   12c58:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   12c5a:	4c08      	ldr	r4, [pc, #32]	; (12c7c <z_reset_time_slice+0x24>)
   12c5c:	6823      	ldr	r3, [r4, #0]
   12c5e:	b15b      	cbz	r3, 12c78 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   12c60:	f7fe fabe 	bl	111e0 <z_clock_elapsed>
   12c64:	6822      	ldr	r2, [r4, #0]
   12c66:	4906      	ldr	r1, [pc, #24]	; (12c80 <z_reset_time_slice+0x28>)
   12c68:	4410      	add	r0, r2
   12c6a:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   12c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   12c70:	2100      	movs	r1, #0
   12c72:	4610      	mov	r0, r2
   12c74:	f002 b9e6 	b.w	15044 <z_set_timeout_expiry>
}
   12c78:	bd10      	pop	{r4, pc}
   12c7a:	bf00      	nop
   12c7c:	20000848 	.word	0x20000848
   12c80:	20000810 	.word	0x20000810

00012c84 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   12c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c86:	460c      	mov	r4, r1
	__asm__ volatile(
   12c88:	f04f 0320 	mov.w	r3, #32
   12c8c:	f3ef 8511 	mrs	r5, BASEPRI
   12c90:	f383 8811 	msr	BASEPRI, r3
   12c94:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12c9c:	f240 36e7 	movw	r6, #999	; 0x3e7
   12ca0:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   12ca2:	2200      	movs	r2, #0
   12ca4:	fbe1 6700 	umlal	r6, r7, r1, r0
   12ca8:	4b09      	ldr	r3, [pc, #36]	; (12cd0 <k_sched_time_slice_set+0x4c>)
   12caa:	4630      	mov	r0, r6
   12cac:	611a      	str	r2, [r3, #16]
   12cae:	4639      	mov	r1, r7
   12cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12cb4:	2300      	movs	r3, #0
   12cb6:	f7fd fbc1 	bl	1043c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   12cba:	4b06      	ldr	r3, [pc, #24]	; (12cd4 <k_sched_time_slice_set+0x50>)
   12cbc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   12cbe:	4b06      	ldr	r3, [pc, #24]	; (12cd8 <k_sched_time_slice_set+0x54>)
   12cc0:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   12cc2:	f7ff ffc9 	bl	12c58 <z_reset_time_slice>
	__asm__ volatile(
   12cc6:	f385 8811 	msr	BASEPRI, r5
   12cca:	f3bf 8f6f 	isb	sy
	}
}
   12cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12cd0:	20000810 	.word	0x20000810
   12cd4:	20000848 	.word	0x20000848
   12cd8:	20000844 	.word	0x20000844

00012cdc <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   12cdc:	b949      	cbnz	r1, 12cf2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12cde:	f3ef 8005 	mrs	r0, IPSR
   12ce2:	b930      	cbnz	r0, 12cf2 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   12ce4:	4b05      	ldr	r3, [pc, #20]	; (12cfc <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   12ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   12ce8:	689b      	ldr	r3, [r3, #8]
   12cea:	429a      	cmp	r2, r3
   12cec:	d001      	beq.n	12cf2 <z_reschedule+0x16>
	ret = arch_swap(key);
   12cee:	f7fe bd7d 	b.w	117ec <arch_swap>
   12cf2:	f381 8811 	msr	BASEPRI, r1
   12cf6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   12cfa:	4770      	bx	lr
   12cfc:	20000810 	.word	0x20000810

00012d00 <k_sched_lock>:
	__asm__ volatile(
   12d00:	f04f 0320 	mov.w	r3, #32
   12d04:	f3ef 8111 	mrs	r1, BASEPRI
   12d08:	f383 8811 	msr	BASEPRI, r3
   12d0c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   12d10:	4b04      	ldr	r3, [pc, #16]	; (12d24 <k_sched_lock+0x24>)
   12d12:	689a      	ldr	r2, [r3, #8]
   12d14:	7bd3      	ldrb	r3, [r2, #15]
   12d16:	3b01      	subs	r3, #1
   12d18:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   12d1a:	f381 8811 	msr	BASEPRI, r1
   12d1e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   12d22:	4770      	bx	lr
   12d24:	20000810 	.word	0x20000810

00012d28 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   12d28:	4b09      	ldr	r3, [pc, #36]	; (12d50 <z_priq_dumb_remove+0x28>)
   12d2a:	f103 0228 	add.w	r2, r3, #40	; 0x28
   12d2e:	4282      	cmp	r2, r0
   12d30:	d105      	bne.n	12d3e <z_priq_dumb_remove+0x16>
   12d32:	689b      	ldr	r3, [r3, #8]
   12d34:	428b      	cmp	r3, r1
   12d36:	d102      	bne.n	12d3e <z_priq_dumb_remove+0x16>
   12d38:	7b4b      	ldrb	r3, [r1, #13]
   12d3a:	06db      	lsls	r3, r3, #27
   12d3c:	d106      	bne.n	12d4c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   12d3e:	e9d1 3200 	ldrd	r3, r2, [r1]
   12d42:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   12d44:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12d46:	2300      	movs	r3, #0
	node->prev = NULL;
   12d48:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   12d4c:	4770      	bx	lr
   12d4e:	bf00      	nop
   12d50:	20000810 	.word	0x20000810

00012d54 <update_cache>:
{
   12d54:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   12d56:	4c10      	ldr	r4, [pc, #64]	; (12d98 <update_cache+0x44>)
{
   12d58:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   12d5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   12d5e:	f002 f8b9 	bl	14ed4 <z_priq_dumb_best>
   12d62:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   12d64:	68a3      	ldr	r3, [r4, #8]
   12d66:	7b59      	ldrb	r1, [r3, #13]
   12d68:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   12d6a:	bf44      	itt	mi
   12d6c:	f041 0108 	orrmi.w	r1, r1, #8
   12d70:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   12d72:	b905      	cbnz	r5, 12d76 <update_cache+0x22>
   12d74:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   12d76:	b94e      	cbnz	r6, 12d8c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   12d78:	7b5a      	ldrb	r2, [r3, #13]
   12d7a:	06d2      	lsls	r2, r2, #27
   12d7c:	d106      	bne.n	12d8c <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   12d7e:	69aa      	ldr	r2, [r5, #24]
   12d80:	b922      	cbnz	r2, 12d8c <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   12d82:	89da      	ldrh	r2, [r3, #14]
   12d84:	2a7f      	cmp	r2, #127	; 0x7f
   12d86:	d901      	bls.n	12d8c <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   12d88:	6263      	str	r3, [r4, #36]	; 0x24
}
   12d8a:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   12d8c:	42ab      	cmp	r3, r5
   12d8e:	d001      	beq.n	12d94 <update_cache+0x40>
			z_reset_time_slice();
   12d90:	f7ff ff62 	bl	12c58 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   12d94:	6265      	str	r5, [r4, #36]	; 0x24
}
   12d96:	e7f8      	b.n	12d8a <update_cache+0x36>
   12d98:	20000810 	.word	0x20000810

00012d9c <k_sched_unlock>:
{
   12d9c:	b510      	push	{r4, lr}
	__asm__ volatile(
   12d9e:	f04f 0320 	mov.w	r3, #32
   12da2:	f3ef 8411 	mrs	r4, BASEPRI
   12da6:	f383 8811 	msr	BASEPRI, r3
   12daa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   12dae:	4b08      	ldr	r3, [pc, #32]	; (12dd0 <k_sched_unlock+0x34>)
		update_cache(0);
   12db0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   12db2:	689a      	ldr	r2, [r3, #8]
   12db4:	7bd3      	ldrb	r3, [r2, #15]
   12db6:	3301      	adds	r3, #1
   12db8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   12dba:	f7ff ffcb 	bl	12d54 <update_cache>
	__asm__ volatile(
   12dbe:	f384 8811 	msr	BASEPRI, r4
   12dc2:	f3bf 8f6f 	isb	sy
}
   12dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   12dca:	f002 b86d 	b.w	14ea8 <z_reschedule_unlocked>
   12dce:	bf00      	nop
   12dd0:	20000810 	.word	0x20000810

00012dd4 <ready_thread>:
{
   12dd4:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12dd6:	7b43      	ldrb	r3, [r0, #13]
   12dd8:	06db      	lsls	r3, r3, #27
   12dda:	d12a      	bne.n	12e32 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   12ddc:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   12dde:	bb43      	cbnz	r3, 12e32 <ready_thread+0x5e>
	return list->head == list;
   12de0:	4a15      	ldr	r2, [pc, #84]	; (12e38 <ready_thread+0x64>)
   12de2:	4611      	mov	r1, r2
   12de4:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12de8:	428c      	cmp	r4, r1
   12dea:	bf18      	it	ne
   12dec:	4623      	movne	r3, r4
   12dee:	2b00      	cmp	r3, #0
   12df0:	bf38      	it	cc
   12df2:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   12df4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12df6:	b1b3      	cbz	r3, 12e26 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   12df8:	f990 600e 	ldrsb.w	r6, [r0, #14]
   12dfc:	f993 500e 	ldrsb.w	r5, [r3, #14]
   12e00:	42ae      	cmp	r6, r5
   12e02:	db03      	blt.n	12e0c <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   12e04:	42a3      	cmp	r3, r4
   12e06:	d00e      	beq.n	12e26 <ready_thread+0x52>
   12e08:	681b      	ldr	r3, [r3, #0]
   12e0a:	e7f4      	b.n	12df6 <ready_thread+0x22>
	node->prev = successor->prev;
   12e0c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   12e0e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   12e12:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   12e14:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   12e16:	7b43      	ldrb	r3, [r0, #13]
   12e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12e1c:	7343      	strb	r3, [r0, #13]
}
   12e1e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   12e20:	2000      	movs	r0, #0
   12e22:	f7ff bf97 	b.w	12d54 <update_cache>
	node->prev = list->tail;
   12e26:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   12e2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12e2c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   12e2e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   12e30:	e7f1      	b.n	12e16 <ready_thread+0x42>
}
   12e32:	bc70      	pop	{r4, r5, r6}
   12e34:	4770      	bx	lr
   12e36:	bf00      	nop
   12e38:	20000810 	.word	0x20000810

00012e3c <z_sched_start>:
{
   12e3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   12e3e:	f04f 0220 	mov.w	r2, #32
   12e42:	f3ef 8411 	mrs	r4, BASEPRI
   12e46:	f382 8811 	msr	BASEPRI, r2
   12e4a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   12e4e:	7b42      	ldrb	r2, [r0, #13]
   12e50:	0751      	lsls	r1, r2, #29
   12e52:	d404      	bmi.n	12e5e <z_sched_start+0x22>
	__asm__ volatile(
   12e54:	f384 8811 	msr	BASEPRI, r4
   12e58:	f3bf 8f6f 	isb	sy
}
   12e5c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12e5e:	f022 0204 	bic.w	r2, r2, #4
   12e62:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   12e64:	f7ff ffb6 	bl	12dd4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   12e68:	4621      	mov	r1, r4
}
   12e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   12e6e:	4801      	ldr	r0, [pc, #4]	; (12e74 <z_sched_start+0x38>)
   12e70:	f7ff bf34 	b.w	12cdc <z_reschedule>
   12e74:	2000086e 	.word	0x2000086e

00012e78 <move_thread_to_end_of_prio_q>:
{
   12e78:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   12e7a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   12e7e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   12e80:	2b00      	cmp	r3, #0
   12e82:	da02      	bge.n	12e8a <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   12e84:	4817      	ldr	r0, [pc, #92]	; (12ee4 <move_thread_to_end_of_prio_q+0x6c>)
   12e86:	f7ff ff4f 	bl	12d28 <z_priq_dumb_remove>
	return list->head == list;
   12e8a:	4a17      	ldr	r2, [pc, #92]	; (12ee8 <move_thread_to_end_of_prio_q+0x70>)
   12e8c:	4610      	mov	r0, r2
   12e8e:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   12e92:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12e94:	4283      	cmp	r3, r0
   12e96:	bf08      	it	eq
   12e98:	2300      	moveq	r3, #0
   12e9a:	2b00      	cmp	r3, #0
   12e9c:	bf38      	it	cc
   12e9e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12ea0:	b1d3      	cbz	r3, 12ed8 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   12ea2:	f991 600e 	ldrsb.w	r6, [r1, #14]
   12ea6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   12eaa:	42ae      	cmp	r6, r5
   12eac:	db03      	blt.n	12eb6 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   12eae:	42a3      	cmp	r3, r4
   12eb0:	d012      	beq.n	12ed8 <move_thread_to_end_of_prio_q+0x60>
   12eb2:	681b      	ldr	r3, [r3, #0]
   12eb4:	e7f4      	b.n	12ea0 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   12eb6:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   12eb8:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   12ebc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   12ebe:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   12ec0:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   12ec2:	6890      	ldr	r0, [r2, #8]
   12ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12ec8:	734b      	strb	r3, [r1, #13]
   12eca:	1a43      	subs	r3, r0, r1
   12ecc:	4258      	negs	r0, r3
   12ece:	4158      	adcs	r0, r3
}
   12ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   12ed4:	f7ff bf3e 	b.w	12d54 <update_cache>
	node->prev = list->tail;
   12ed8:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   12edc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12ede:	6019      	str	r1, [r3, #0]
	list->tail = node;
   12ee0:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   12ee2:	e7ed      	b.n	12ec0 <move_thread_to_end_of_prio_q+0x48>
   12ee4:	20000838 	.word	0x20000838
   12ee8:	20000810 	.word	0x20000810

00012eec <z_time_slice>:
{
   12eec:	4601      	mov	r1, r0
   12eee:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   12ef0:	f04f 0320 	mov.w	r3, #32
   12ef4:	f3ef 8411 	mrs	r4, BASEPRI
   12ef8:	f383 8811 	msr	BASEPRI, r3
   12efc:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   12f00:	4b16      	ldr	r3, [pc, #88]	; (12f5c <z_time_slice+0x70>)
   12f02:	4a17      	ldr	r2, [pc, #92]	; (12f60 <z_time_slice+0x74>)
   12f04:	6898      	ldr	r0, [r3, #8]
   12f06:	6815      	ldr	r5, [r2, #0]
   12f08:	42a8      	cmp	r0, r5
   12f0a:	461d      	mov	r5, r3
   12f0c:	d106      	bne.n	12f1c <z_time_slice+0x30>
			z_reset_time_slice();
   12f0e:	f7ff fea3 	bl	12c58 <z_reset_time_slice>
	__asm__ volatile(
   12f12:	f384 8811 	msr	BASEPRI, r4
   12f16:	f3bf 8f6f 	isb	sy
}
   12f1a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   12f1c:	2600      	movs	r6, #0
   12f1e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   12f20:	4a10      	ldr	r2, [pc, #64]	; (12f64 <z_time_slice+0x78>)
   12f22:	6812      	ldr	r2, [r2, #0]
   12f24:	b1ba      	cbz	r2, 12f56 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   12f26:	89c2      	ldrh	r2, [r0, #14]
   12f28:	2a7f      	cmp	r2, #127	; 0x7f
   12f2a:	d814      	bhi.n	12f56 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   12f2c:	7b42      	ldrb	r2, [r0, #13]
   12f2e:	06d2      	lsls	r2, r2, #27
   12f30:	d111      	bne.n	12f56 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   12f32:	4a0d      	ldr	r2, [pc, #52]	; (12f68 <z_time_slice+0x7c>)
   12f34:	f990 600e 	ldrsb.w	r6, [r0, #14]
   12f38:	6812      	ldr	r2, [r2, #0]
   12f3a:	4296      	cmp	r6, r2
   12f3c:	db0b      	blt.n	12f56 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   12f3e:	4a0b      	ldr	r2, [pc, #44]	; (12f6c <z_time_slice+0x80>)
   12f40:	4290      	cmp	r0, r2
   12f42:	d008      	beq.n	12f56 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   12f44:	691a      	ldr	r2, [r3, #16]
   12f46:	428a      	cmp	r2, r1
   12f48:	dc02      	bgt.n	12f50 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   12f4a:	f7ff ff95 	bl	12e78 <move_thread_to_end_of_prio_q>
   12f4e:	e7de      	b.n	12f0e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   12f50:	1a52      	subs	r2, r2, r1
   12f52:	611a      	str	r2, [r3, #16]
   12f54:	e7dd      	b.n	12f12 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   12f56:	2300      	movs	r3, #0
   12f58:	612b      	str	r3, [r5, #16]
   12f5a:	e7da      	b.n	12f12 <z_time_slice+0x26>
   12f5c:	20000810 	.word	0x20000810
   12f60:	20000840 	.word	0x20000840
   12f64:	20000848 	.word	0x20000848
   12f68:	20000844 	.word	0x20000844
   12f6c:	20000160 	.word	0x20000160

00012f70 <z_impl_k_thread_suspend>:
{
   12f70:	b570      	push	{r4, r5, r6, lr}
   12f72:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   12f74:	3018      	adds	r0, #24
   12f76:	f002 f83f 	bl	14ff8 <z_abort_timeout>
	__asm__ volatile(
   12f7a:	f04f 0320 	mov.w	r3, #32
   12f7e:	f3ef 8611 	mrs	r6, BASEPRI
   12f82:	f383 8811 	msr	BASEPRI, r3
   12f86:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   12f8a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   12f8e:	2b00      	cmp	r3, #0
   12f90:	da07      	bge.n	12fa2 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   12f92:	4621      	mov	r1, r4
   12f94:	480e      	ldr	r0, [pc, #56]	; (12fd0 <z_impl_k_thread_suspend+0x60>)
   12f96:	f7ff fec7 	bl	12d28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   12f9a:	7b63      	ldrb	r3, [r4, #13]
   12f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   12fa0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   12fa2:	4d0c      	ldr	r5, [pc, #48]	; (12fd4 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   12fa4:	7b63      	ldrb	r3, [r4, #13]
   12fa6:	68a8      	ldr	r0, [r5, #8]
   12fa8:	f043 0310 	orr.w	r3, r3, #16
   12fac:	7363      	strb	r3, [r4, #13]
   12fae:	1b03      	subs	r3, r0, r4
   12fb0:	4258      	negs	r0, r3
   12fb2:	4158      	adcs	r0, r3
   12fb4:	f7ff fece 	bl	12d54 <update_cache>
	__asm__ volatile(
   12fb8:	f386 8811 	msr	BASEPRI, r6
   12fbc:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   12fc0:	68ab      	ldr	r3, [r5, #8]
   12fc2:	42a3      	cmp	r3, r4
   12fc4:	d103      	bne.n	12fce <z_impl_k_thread_suspend+0x5e>
}
   12fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   12fca:	f001 bf6d 	b.w	14ea8 <z_reschedule_unlocked>
}
   12fce:	bd70      	pop	{r4, r5, r6, pc}
   12fd0:	20000838 	.word	0x20000838
   12fd4:	20000810 	.word	0x20000810

00012fd8 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   12fd8:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   12fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12fde:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   12fe0:	b103      	cbz	r3, 12fe4 <z_thread_single_abort+0xc>
		thread->fn_abort();
   12fe2:	4798      	blx	r3
   12fe4:	f104 0018 	add.w	r0, r4, #24
   12fe8:	f002 f806 	bl	14ff8 <z_abort_timeout>
	__asm__ volatile(
   12fec:	f04f 0320 	mov.w	r3, #32
   12ff0:	f3ef 8611 	mrs	r6, BASEPRI
   12ff4:	f383 8811 	msr	BASEPRI, r3
   12ff8:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12ffc:	7b63      	ldrb	r3, [r4, #13]
   12ffe:	06d8      	lsls	r0, r3, #27
   13000:	d123      	bne.n	1304a <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   13002:	69a2      	ldr	r2, [r4, #24]
   13004:	bb0a      	cbnz	r2, 1304a <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   13006:	0619      	lsls	r1, r3, #24
   13008:	d507      	bpl.n	1301a <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1300a:	4621      	mov	r1, r4
   1300c:	481e      	ldr	r0, [pc, #120]	; (13088 <z_thread_single_abort+0xb0>)
   1300e:	f7ff fe8b 	bl	12d28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   13012:	7b63      	ldrb	r3, [r4, #13]
   13014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13018:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1301a:	4b1c      	ldr	r3, [pc, #112]	; (1308c <z_thread_single_abort+0xb4>)
   1301c:	6898      	ldr	r0, [r3, #8]
   1301e:	1b02      	subs	r2, r0, r4
   13020:	4250      	negs	r0, r2
   13022:	4150      	adcs	r0, r2
   13024:	f7ff fe96 	bl	12d54 <update_cache>
			waiter->base.pended_on = NULL;
   13028:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   1302a:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1302c:	f104 0830 	add.w	r8, r4, #48	; 0x30
   13030:	f043 0308 	orr.w	r3, r3, #8
   13034:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   13036:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13038:	4545      	cmp	r5, r8
   1303a:	d000      	beq.n	1303e <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1303c:	b995      	cbnz	r5, 13064 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1303e:	f386 8811 	msr	BASEPRI, r6
   13042:	f3bf 8f6f 	isb	sy
}
   13046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1304a:	079b      	lsls	r3, r3, #30
   1304c:	d5ec      	bpl.n	13028 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1304e:	4621      	mov	r1, r4
   13050:	68a0      	ldr	r0, [r4, #8]
   13052:	f7ff fe69 	bl	12d28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13056:	7b63      	ldrb	r3, [r4, #13]
   13058:	f023 0302 	bic.w	r3, r3, #2
   1305c:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1305e:	2300      	movs	r3, #0
   13060:	60a3      	str	r3, [r4, #8]
   13062:	e7e1      	b.n	13028 <z_thread_single_abort+0x50>
   13064:	f105 0018 	add.w	r0, r5, #24
   13068:	f001 ffc6 	bl	14ff8 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1306c:	68a8      	ldr	r0, [r5, #8]
   1306e:	4629      	mov	r1, r5
   13070:	f7ff fe5a 	bl	12d28 <z_priq_dumb_remove>
   13074:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   13076:	4628      	mov	r0, r5
   13078:	f023 0302 	bic.w	r3, r3, #2
   1307c:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1307e:	60af      	str	r7, [r5, #8]
   13080:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   13082:	f7ff fea7 	bl	12dd4 <ready_thread>
   13086:	e7d6      	b.n	13036 <z_thread_single_abort+0x5e>
   13088:	20000838 	.word	0x20000838
   1308c:	20000810 	.word	0x20000810

00013090 <unready_thread>:
{
   13090:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   13092:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   13096:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   13098:	2b00      	cmp	r3, #0
   1309a:	da06      	bge.n	130aa <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1309c:	4807      	ldr	r0, [pc, #28]	; (130bc <unready_thread+0x2c>)
   1309e:	f7ff fe43 	bl	12d28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   130a2:	7b4b      	ldrb	r3, [r1, #13]
   130a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   130a8:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   130aa:	4b05      	ldr	r3, [pc, #20]	; (130c0 <unready_thread+0x30>)
   130ac:	6898      	ldr	r0, [r3, #8]
   130ae:	1a43      	subs	r3, r0, r1
   130b0:	4258      	negs	r0, r3
   130b2:	4158      	adcs	r0, r3
}
   130b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   130b8:	f7ff be4c 	b.w	12d54 <update_cache>
   130bc:	20000838 	.word	0x20000838
   130c0:	20000810 	.word	0x20000810

000130c4 <pend>:
{
   130c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   130c8:	4606      	mov	r6, r0
   130ca:	4614      	mov	r4, r2
   130cc:	461d      	mov	r5, r3
	__asm__ volatile(
   130ce:	f04f 0320 	mov.w	r3, #32
   130d2:	f3ef 8711 	mrs	r7, BASEPRI
   130d6:	f383 8811 	msr	BASEPRI, r3
   130da:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   130de:	f001 ff33 	bl	14f48 <add_to_waitq_locked>
	__asm__ volatile(
   130e2:	f387 8811 	msr	BASEPRI, r7
   130e6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   130ea:	1c6b      	adds	r3, r5, #1
   130ec:	bf08      	it	eq
   130ee:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   130f2:	d008      	beq.n	13106 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   130f4:	4622      	mov	r2, r4
   130f6:	462b      	mov	r3, r5
   130f8:	f106 0018 	add.w	r0, r6, #24
   130fc:	4903      	ldr	r1, [pc, #12]	; (1310c <pend+0x48>)
}
   130fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13102:	f000 ba2f 	b.w	13564 <z_add_timeout>
   13106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1310a:	bf00      	nop
   1310c:	00014f09 	.word	0x00014f09

00013110 <z_pend_curr>:
{
   13110:	b510      	push	{r4, lr}
   13112:	460c      	mov	r4, r1
	pending_current = _current;
   13114:	4b06      	ldr	r3, [pc, #24]	; (13130 <z_pend_curr+0x20>)
{
   13116:	4611      	mov	r1, r2
	pending_current = _current;
   13118:	6898      	ldr	r0, [r3, #8]
   1311a:	4b06      	ldr	r3, [pc, #24]	; (13134 <z_pend_curr+0x24>)
   1311c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1311e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   13122:	f7ff ffcf 	bl	130c4 <pend>
   13126:	4620      	mov	r0, r4
}
   13128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1312c:	f7fe bb5e 	b.w	117ec <arch_swap>
   13130:	20000810 	.word	0x20000810
   13134:	20000840 	.word	0x20000840

00013138 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   13138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1313a:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1313c:	f001 ff9d 	bl	1507a <z_tick_get_32>
   13140:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   13142:	f04f 0320 	mov.w	r3, #32
   13146:	f3ef 8711 	mrs	r7, BASEPRI
   1314a:	f383 8811 	msr	BASEPRI, r3
   1314e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   13152:	4e0d      	ldr	r6, [pc, #52]	; (13188 <z_tick_sleep.part.0+0x50>)
   13154:	4b0d      	ldr	r3, [pc, #52]	; (1318c <z_tick_sleep.part.0+0x54>)
   13156:	68b0      	ldr	r0, [r6, #8]
   13158:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1315a:	f7ff ff99 	bl	13090 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1315e:	68b0      	ldr	r0, [r6, #8]
   13160:	490b      	ldr	r1, [pc, #44]	; (13190 <z_tick_sleep.part.0+0x58>)
   13162:	462a      	mov	r2, r5
   13164:	17eb      	asrs	r3, r5, #31
   13166:	3018      	adds	r0, #24
   13168:	f000 f9fc 	bl	13564 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1316c:	68b2      	ldr	r2, [r6, #8]
   1316e:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   13170:	7b53      	ldrb	r3, [r2, #13]
   13172:	f043 0310 	orr.w	r3, r3, #16
   13176:	7353      	strb	r3, [r2, #13]
   13178:	f7fe fb38 	bl	117ec <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1317c:	f001 ff7d 	bl	1507a <z_tick_get_32>
   13180:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   13182:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   13186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13188:	20000810 	.word	0x20000810
   1318c:	20000840 	.word	0x20000840
   13190:	00014f09 	.word	0x00014f09

00013194 <z_set_prio>:
{
   13194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13198:	4604      	mov	r4, r0
   1319a:	f04f 0320 	mov.w	r3, #32
   1319e:	f3ef 8811 	mrs	r8, BASEPRI
   131a2:	f383 8811 	msr	BASEPRI, r3
   131a6:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   131aa:	7b43      	ldrb	r3, [r0, #13]
   131ac:	b24e      	sxtb	r6, r1
   131ae:	06db      	lsls	r3, r3, #27
   131b0:	d12e      	bne.n	13210 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   131b2:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   131b4:	bb65      	cbnz	r5, 13210 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   131b6:	4f18      	ldr	r7, [pc, #96]	; (13218 <z_set_prio+0x84>)
   131b8:	4621      	mov	r1, r4
   131ba:	f107 0028 	add.w	r0, r7, #40	; 0x28
   131be:	f7ff fdb3 	bl	12d28 <z_priq_dumb_remove>
	return list->head == list;
   131c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   131c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   131c6:	4283      	cmp	r3, r0
   131c8:	bf18      	it	ne
   131ca:	461d      	movne	r5, r3
   131cc:	2d00      	cmp	r5, #0
   131ce:	bf38      	it	cc
   131d0:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   131d2:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   131d4:	b1b5      	cbz	r5, 13204 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   131d6:	f995 100e 	ldrsb.w	r1, [r5, #14]
   131da:	42b1      	cmp	r1, r6
   131dc:	dc03      	bgt.n	131e6 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   131de:	42aa      	cmp	r2, r5
   131e0:	d010      	beq.n	13204 <z_set_prio+0x70>
   131e2:	682d      	ldr	r5, [r5, #0]
   131e4:	e7f6      	b.n	131d4 <z_set_prio+0x40>
	node->prev = successor->prev;
   131e6:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   131e8:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   131ec:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   131ee:	606c      	str	r4, [r5, #4]
			update_cache(1);
   131f0:	2001      	movs	r0, #1
   131f2:	f7ff fdaf 	bl	12d54 <update_cache>
   131f6:	2001      	movs	r0, #1
	__asm__ volatile(
   131f8:	f388 8811 	msr	BASEPRI, r8
   131fc:	f3bf 8f6f 	isb	sy
}
   13200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   13204:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   13208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1320a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1320c:	62fc      	str	r4, [r7, #44]	; 0x2c
}
   1320e:	e7ef      	b.n	131f0 <z_set_prio+0x5c>
			thread->base.prio = prio;
   13210:	2000      	movs	r0, #0
   13212:	73a6      	strb	r6, [r4, #14]
   13214:	e7f0      	b.n	131f8 <z_set_prio+0x64>
   13216:	bf00      	nop
   13218:	20000810 	.word	0x20000810

0001321c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1321c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1321e:	4b04      	ldr	r3, [pc, #16]	; (13230 <z_sched_init+0x14>)
   13220:	4608      	mov	r0, r1
   13222:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   13226:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1322a:	f7ff bd2b 	b.w	12c84 <k_sched_time_slice_set>
   1322e:	bf00      	nop
   13230:	20000810 	.word	0x20000810

00013234 <z_impl_k_yield>:
{
   13234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   13236:	4c24      	ldr	r4, [pc, #144]	; (132c8 <z_impl_k_yield+0x94>)
   13238:	4b24      	ldr	r3, [pc, #144]	; (132cc <z_impl_k_yield+0x98>)
   1323a:	68a2      	ldr	r2, [r4, #8]
   1323c:	429a      	cmp	r2, r3
   1323e:	d030      	beq.n	132a2 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   13240:	f04f 0320 	mov.w	r3, #32
   13244:	f3ef 8511 	mrs	r5, BASEPRI
   13248:	f383 8811 	msr	BASEPRI, r3
   1324c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   13250:	68a1      	ldr	r1, [r4, #8]
   13252:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13256:	f7ff fd67 	bl	12d28 <z_priq_dumb_remove>
	return list->head == list;
   1325a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1325c:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1325e:	4283      	cmp	r3, r0
   13260:	bf08      	it	eq
   13262:	2300      	moveq	r3, #0
   13264:	2b00      	cmp	r3, #0
   13266:	bf38      	it	cc
   13268:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1326a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1326c:	b32b      	cbz	r3, 132ba <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1326e:	f992 700e 	ldrsb.w	r7, [r2, #14]
   13272:	f993 600e 	ldrsb.w	r6, [r3, #14]
   13276:	42b7      	cmp	r7, r6
   13278:	db03      	blt.n	13282 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1327a:	428b      	cmp	r3, r1
   1327c:	d01d      	beq.n	132ba <z_impl_k_yield+0x86>
   1327e:	681b      	ldr	r3, [r3, #0]
   13280:	e7f4      	b.n	1326c <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   13282:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   13284:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   13288:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1328a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1328c:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   1328e:	2001      	movs	r0, #1
   13290:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13294:	7353      	strb	r3, [r2, #13]
   13296:	f7ff fd5d 	bl	12d54 <update_cache>
	__asm__ volatile(
   1329a:	f385 8811 	msr	BASEPRI, r5
   1329e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   132a2:	f04f 0320 	mov.w	r3, #32
   132a6:	f3ef 8011 	mrs	r0, BASEPRI
   132aa:	f383 8811 	msr	BASEPRI, r3
   132ae:	f3bf 8f6f 	isb	sy
}
   132b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   132b6:	f7fe ba99 	b.w	117ec <arch_swap>
	node->prev = list->tail;
   132ba:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   132be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   132c0:	601a      	str	r2, [r3, #0]
	list->tail = node;
   132c2:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   132c4:	e7e2      	b.n	1328c <z_impl_k_yield+0x58>
   132c6:	bf00      	nop
   132c8:	20000810 	.word	0x20000810
   132cc:	20000160 	.word	0x20000160

000132d0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   132d0:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   132d2:	3301      	adds	r3, #1
   132d4:	bf08      	it	eq
   132d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   132da:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   132dc:	d106      	bne.n	132ec <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   132de:	4b0b      	ldr	r3, [pc, #44]	; (1330c <z_impl_k_sleep+0x3c>)
   132e0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   132e2:	f7ff fe45 	bl	12f70 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   132e6:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   132ea:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   132ec:	4604      	mov	r4, r0
	if (ticks == 0) {
   132ee:	b948      	cbnz	r0, 13304 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   132f0:	f7ff ffa0 	bl	13234 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   132f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   132f8:	fb84 3400 	smull	r3, r4, r4, r0
   132fc:	0bd8      	lsrs	r0, r3, #15
   132fe:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   13302:	e7f2      	b.n	132ea <z_impl_k_sleep+0x1a>
   13304:	f7ff ff18 	bl	13138 <z_tick_sleep.part.0>
   13308:	4604      	mov	r4, r0
   1330a:	e7f3      	b.n	132f4 <z_impl_k_sleep+0x24>
   1330c:	20000810 	.word	0x20000810

00013310 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   13310:	4b01      	ldr	r3, [pc, #4]	; (13318 <z_impl_k_current_get+0x8>)
   13312:	6898      	ldr	r0, [r3, #8]
   13314:	4770      	bx	lr
   13316:	bf00      	nop
   13318:	20000810 	.word	0x20000810

0001331c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1331c:	b538      	push	{r3, r4, r5, lr}
   1331e:	4604      	mov	r4, r0
   13320:	f04f 0320 	mov.w	r3, #32
   13324:	f3ef 8511 	mrs	r5, BASEPRI
   13328:	f383 8811 	msr	BASEPRI, r3
   1332c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   13330:	f001 fe35 	bl	14f9e <z_unpend_first_thread>

	if (thread != NULL) {
   13334:	b148      	cbz	r0, 1334a <z_impl_k_sem_give+0x2e>
   13336:	2200      	movs	r2, #0
   13338:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1333a:	f001 fdd5 	bl	14ee8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1333e:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   13340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   13344:	4804      	ldr	r0, [pc, #16]	; (13358 <z_impl_k_sem_give+0x3c>)
   13346:	f7ff bcc9 	b.w	12cdc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1334a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1334e:	429a      	cmp	r2, r3
   13350:	bf18      	it	ne
   13352:	3301      	addne	r3, #1
   13354:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   13356:	e7f2      	b.n	1333e <z_impl_k_sem_give+0x22>
   13358:	2000086e 	.word	0x2000086e

0001335c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1335c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1335e:	4614      	mov	r4, r2
   13360:	461d      	mov	r5, r3
   13362:	f04f 0320 	mov.w	r3, #32
   13366:	f3ef 8111 	mrs	r1, BASEPRI
   1336a:	f383 8811 	msr	BASEPRI, r3
   1336e:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   13372:	6883      	ldr	r3, [r0, #8]
   13374:	b143      	cbz	r3, 13388 <z_impl_k_sem_take+0x2c>
		sem->count--;
   13376:	3b01      	subs	r3, #1
   13378:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1337a:	f381 8811 	msr	BASEPRI, r1
   1337e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   13382:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   13384:	b003      	add	sp, #12
   13386:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13388:	ea54 0305 	orrs.w	r3, r4, r5
   1338c:	d106      	bne.n	1339c <z_impl_k_sem_take+0x40>
   1338e:	f381 8811 	msr	BASEPRI, r1
   13392:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   13396:	f06f 000f 	mvn.w	r0, #15
   1339a:	e7f3      	b.n	13384 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1339c:	4602      	mov	r2, r0
   1339e:	e9cd 4500 	strd	r4, r5, [sp]
   133a2:	4802      	ldr	r0, [pc, #8]	; (133ac <z_impl_k_sem_take+0x50>)
   133a4:	f7ff feb4 	bl	13110 <z_pend_curr>
	return ret;
   133a8:	e7ec      	b.n	13384 <z_impl_k_sem_take+0x28>
   133aa:	bf00      	nop
   133ac:	2000086e 	.word	0x2000086e

000133b0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   133b0:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   133b4:	f100 0530 	add.w	r5, r0, #48	; 0x30
   133b8:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   133ba:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   133be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   133c0:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   133c2:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   133c4:	2504      	movs	r5, #4
   133c6:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   133c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   133ca:	3207      	adds	r2, #7
	thread_base->prio = priority;
   133cc:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   133ce:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   133d0:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   133d4:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
   133d8:	eb01 0802 	add.w	r8, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   133dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	node->prev = NULL;
   133de:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   133e2:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   133e4:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   133e6:	9202      	str	r2, [sp, #8]
   133e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   133ea:	9201      	str	r2, [sp, #4]
   133ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   133ee:	9200      	str	r2, [sp, #0]
   133f0:	4642      	mov	r2, r8
   133f2:	f7fe fa85 	bl	11900 <arch_new_thread>
	if (!_current) {
   133f6:	4b05      	ldr	r3, [pc, #20]	; (1340c <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
   133f8:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   133fc:	689b      	ldr	r3, [r3, #8]
   133fe:	b103      	cbz	r3, 13402 <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
   13400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   13402:	4640      	mov	r0, r8
   13404:	6763      	str	r3, [r4, #116]	; 0x74
   13406:	b005      	add	sp, #20
   13408:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
   1340c:	20000810 	.word	0x20000810

00013410 <z_init_static_threads>:
{
   13410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   13414:	4e2a      	ldr	r6, [pc, #168]	; (134c0 <z_init_static_threads+0xb0>)
   13416:	4d2b      	ldr	r5, [pc, #172]	; (134c4 <z_init_static_threads+0xb4>)
   13418:	46b0      	mov	r8, r6
{
   1341a:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1341c:	42b5      	cmp	r5, r6
   1341e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   13422:	d310      	bcc.n	13446 <z_init_static_threads+0x36>
	k_sched_lock();
   13424:	f7ff fc6c 	bl	12d00 <k_sched_lock>
   13428:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1342c:	f240 36e7 	movw	r6, #999	; 0x3e7
   13430:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   13432:	4c24      	ldr	r4, [pc, #144]	; (134c4 <z_init_static_threads+0xb4>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   13434:	f8df a090 	ldr.w	sl, [pc, #144]	; 134c8 <z_init_static_threads+0xb8>
   13438:	4544      	cmp	r4, r8
   1343a:	d321      	bcc.n	13480 <z_init_static_threads+0x70>
}
   1343c:	b006      	add	sp, #24
   1343e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   13442:	f7ff bcab 	b.w	12d9c <k_sched_unlock>
		z_setup_new_thread(
   13446:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1344a:	9305      	str	r3, [sp, #20]
   1344c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   13450:	9304      	str	r3, [sp, #16]
   13452:	f854 3c14 	ldr.w	r3, [r4, #-20]
   13456:	9303      	str	r3, [sp, #12]
   13458:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1345c:	9302      	str	r3, [sp, #8]
   1345e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   13462:	9301      	str	r3, [sp, #4]
   13464:	f854 3c20 	ldr.w	r3, [r4, #-32]
   13468:	9300      	str	r3, [sp, #0]
   1346a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1346e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   13472:	f7ff ff9d 	bl	133b0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   13476:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1347a:	65dd      	str	r5, [r3, #92]	; 0x5c
   1347c:	4625      	mov	r5, r4
   1347e:	e7cd      	b.n	1341c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   13480:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13482:	1c5a      	adds	r2, r3, #1
   13484:	d00d      	beq.n	134a2 <z_init_static_threads+0x92>
   13486:	4630      	mov	r0, r6
   13488:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   1348a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1348e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   13492:	42b9      	cmp	r1, r7
   13494:	bf08      	it	eq
   13496:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   13498:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1349a:	d104      	bne.n	134a6 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1349c:	4628      	mov	r0, r5
   1349e:	f7ff fccd 	bl	12e3c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   134a2:	3430      	adds	r4, #48	; 0x30
   134a4:	e7c8      	b.n	13438 <z_init_static_threads+0x28>
   134a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   134aa:	2300      	movs	r3, #0
   134ac:	f7fc ffc6 	bl	1043c <__aeabi_uldivmod>
   134b0:	4602      	mov	r2, r0
   134b2:	460b      	mov	r3, r1
   134b4:	f105 0018 	add.w	r0, r5, #24
   134b8:	4651      	mov	r1, sl
   134ba:	f000 f853 	bl	13564 <z_add_timeout>
   134be:	e7f0      	b.n	134a2 <z_init_static_threads+0x92>
   134c0:	20000110 	.word	0x20000110
   134c4:	20000110 	.word	0x20000110
   134c8:	00014f09 	.word	0x00014f09

000134cc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   134cc:	4b03      	ldr	r3, [pc, #12]	; (134dc <elapsed+0x10>)
   134ce:	681b      	ldr	r3, [r3, #0]
   134d0:	b90b      	cbnz	r3, 134d6 <elapsed+0xa>
   134d2:	f7fd be85 	b.w	111e0 <z_clock_elapsed>
}
   134d6:	2000      	movs	r0, #0
   134d8:	4770      	bx	lr
   134da:	bf00      	nop
   134dc:	2000084c 	.word	0x2000084c

000134e0 <remove_timeout>:
{
   134e0:	b530      	push	{r4, r5, lr}
   134e2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   134e4:	b168      	cbz	r0, 13502 <remove_timeout+0x22>
   134e6:	4a0a      	ldr	r2, [pc, #40]	; (13510 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   134e8:	6852      	ldr	r2, [r2, #4]
   134ea:	4290      	cmp	r0, r2
   134ec:	d009      	beq.n	13502 <remove_timeout+0x22>
	if (next(t) != NULL) {
   134ee:	b143      	cbz	r3, 13502 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   134f0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   134f4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   134f8:	1912      	adds	r2, r2, r4
   134fa:	eb45 0101 	adc.w	r1, r5, r1
   134fe:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   13502:	6842      	ldr	r2, [r0, #4]
   13504:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   13506:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13508:	2300      	movs	r3, #0
	node->prev = NULL;
   1350a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1350e:	bd30      	pop	{r4, r5, pc}
   13510:	20000054 	.word	0x20000054

00013514 <next_timeout>:
	return list->head == list;
   13514:	4b11      	ldr	r3, [pc, #68]	; (1355c <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   13516:	b510      	push	{r4, lr}
   13518:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1351a:	429c      	cmp	r4, r3
   1351c:	bf08      	it	eq
   1351e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   13520:	f7ff ffd4 	bl	134cc <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   13524:	b1bc      	cbz	r4, 13556 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   13526:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1352a:	1a12      	subs	r2, r2, r0
   1352c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   13530:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   13534:	f173 0100 	sbcs.w	r1, r3, #0
   13538:	da0d      	bge.n	13556 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   1353a:	4619      	mov	r1, r3
   1353c:	2a00      	cmp	r2, #0
   1353e:	f171 0300 	sbcs.w	r3, r1, #0
   13542:	4610      	mov	r0, r2
   13544:	da00      	bge.n	13548 <next_timeout+0x34>
   13546:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   13548:	4b05      	ldr	r3, [pc, #20]	; (13560 <next_timeout+0x4c>)
   1354a:	691b      	ldr	r3, [r3, #16]
   1354c:	b113      	cbz	r3, 13554 <next_timeout+0x40>
   1354e:	4298      	cmp	r0, r3
   13550:	bfa8      	it	ge
   13552:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   13554:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   13556:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1355a:	e7f5      	b.n	13548 <next_timeout+0x34>
   1355c:	20000054 	.word	0x20000054
   13560:	20000810 	.word	0x20000810

00013564 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   13564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13568:	9101      	str	r1, [sp, #4]
   1356a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1356c:	1c4b      	adds	r3, r1, #1
   1356e:	bf08      	it	eq
   13570:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   13574:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13576:	d06b      	beq.n	13650 <z_add_timeout+0xec>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   13578:	f06f 0301 	mvn.w	r3, #1
   1357c:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   13580:	1c54      	adds	r4, r2, #1
   13582:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   13586:	ebb3 0804 	subs.w	r8, r3, r4
   1358a:	eb6b 0905 	sbc.w	r9, fp, r5
   1358e:	f1b8 0f00 	cmp.w	r8, #0
   13592:	f179 0300 	sbcs.w	r3, r9, #0
   13596:	db0f      	blt.n	135b8 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   13598:	f7ff ff98 	bl	134cc <elapsed>
   1359c:	f06f 0301 	mvn.w	r3, #1
   135a0:	4a32      	ldr	r2, [pc, #200]	; (1366c <z_add_timeout+0x108>)
   135a2:	e9d2 1c00 	ldrd	r1, ip, [r2]
   135a6:	1a5b      	subs	r3, r3, r1
   135a8:	eb6b 020c 	sbc.w	r2, fp, ip
   135ac:	1b1e      	subs	r6, r3, r4
   135ae:	eb62 0705 	sbc.w	r7, r2, r5
   135b2:	1a34      	subs	r4, r6, r0
   135b4:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   135b8:	9b01      	ldr	r3, [sp, #4]
   135ba:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   135be:	f04f 0320 	mov.w	r3, #32
   135c2:	f3ef 8611 	mrs	r6, BASEPRI
   135c6:	f383 8811 	msr	BASEPRI, r3
   135ca:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   135ce:	f7ff ff7d 	bl	134cc <elapsed>
	ticks = MAX(1, ticks);
   135d2:	2c01      	cmp	r4, #1
   135d4:	f175 0300 	sbcs.w	r3, r5, #0
   135d8:	bfbc      	itt	lt
   135da:	2401      	movlt	r4, #1
   135dc:	2500      	movlt	r5, #0
	return list->head == list;
   135de:	4b24      	ldr	r3, [pc, #144]	; (13670 <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
   135e0:	1824      	adds	r4, r4, r0
   135e2:	681a      	ldr	r2, [r3, #0]
   135e4:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   135e8:	429a      	cmp	r2, r3
   135ea:	e9ca 4504 	strd	r4, r5, [sl, #16]
   135ee:	d001      	beq.n	135f4 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   135f0:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   135f2:	b952      	cbnz	r2, 1360a <z_add_timeout+0xa6>
	node->prev = list->tail;
   135f4:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   135f6:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   135fa:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   135fe:	685a      	ldr	r2, [r3, #4]
   13600:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   13604:	f8c3 a004 	str.w	sl, [r3, #4]
}
   13608:	e014      	b.n	13634 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   1360a:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1360e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   13612:	4544      	cmp	r4, r8
   13614:	eb75 0109 	sbcs.w	r1, r5, r9
   13618:	da1d      	bge.n	13656 <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
   1361a:	ebb8 0004 	subs.w	r0, r8, r4
   1361e:	eb69 0105 	sbc.w	r1, r9, r5
   13622:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   13626:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   13628:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1362c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   13630:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   13634:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13636:	429a      	cmp	r2, r3
   13638:	d006      	beq.n	13648 <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1363a:	4592      	cmp	sl, r2
   1363c:	d104      	bne.n	13648 <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
   1363e:	f7ff ff69 	bl	13514 <next_timeout>
   13642:	2100      	movs	r1, #0
   13644:	f7fd fd66 	bl	11114 <z_clock_set_timeout>
	__asm__ volatile(
   13648:	f386 8811 	msr	BASEPRI, r6
   1364c:	f3bf 8f6f 	isb	sy
		}
	}
}
   13650:	b003      	add	sp, #12
   13652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   13656:	ebb4 0008 	subs.w	r0, r4, r8
   1365a:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1365e:	42ba      	cmp	r2, r7
   13660:	e9ca 0104 	strd	r0, r1, [sl, #16]
   13664:	d0c6      	beq.n	135f4 <z_add_timeout+0x90>
   13666:	6812      	ldr	r2, [r2, #0]
   13668:	e7c3      	b.n	135f2 <z_add_timeout+0x8e>
   1366a:	bf00      	nop
   1366c:	20000260 	.word	0x20000260
   13670:	20000054 	.word	0x20000054

00013674 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   13674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13678:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1367a:	f7ff fc37 	bl	12eec <z_time_slice>
	__asm__ volatile(
   1367e:	f04f 0320 	mov.w	r3, #32
   13682:	f3ef 8411 	mrs	r4, BASEPRI
   13686:	f383 8811 	msr	BASEPRI, r3
   1368a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1368e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 13740 <z_clock_announce+0xcc>
   13692:	4d2a      	ldr	r5, [pc, #168]	; (1373c <z_clock_announce+0xc8>)
   13694:	4651      	mov	r1, sl
	return list->head == list;
   13696:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 13744 <z_clock_announce+0xd0>
   1369a:	602e      	str	r6, [r5, #0]
   1369c:	f8d5 c000 	ldr.w	ip, [r5]
   136a0:	f8db 0000 	ldr.w	r0, [fp]
   136a4:	4662      	mov	r2, ip
   136a6:	e9da 8900 	ldrd	r8, r9, [sl]
   136aa:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   136ac:	4558      	cmp	r0, fp
   136ae:	e9cd 2300 	strd	r2, r3, [sp]
   136b2:	d00d      	beq.n	136d0 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   136b4:	b160      	cbz	r0, 136d0 <z_clock_announce+0x5c>
   136b6:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   136ba:	45b4      	cmp	ip, r6
   136bc:	41bb      	sbcs	r3, r7
   136be:	da1d      	bge.n	136fc <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   136c0:	9b00      	ldr	r3, [sp, #0]
   136c2:	ebb6 0c03 	subs.w	ip, r6, r3
   136c6:	9b01      	ldr	r3, [sp, #4]
   136c8:	eb67 0603 	sbc.w	r6, r7, r3
   136cc:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   136d0:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   136d2:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   136d4:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   136d6:	eb13 0208 	adds.w	r2, r3, r8
   136da:	9b01      	ldr	r3, [sp, #4]
   136dc:	eb43 0309 	adc.w	r3, r3, r9
   136e0:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   136e4:	f7ff ff16 	bl	13514 <next_timeout>
   136e8:	4631      	mov	r1, r6
   136ea:	f7fd fd13 	bl	11114 <z_clock_set_timeout>
	__asm__ volatile(
   136ee:	f384 8811 	msr	BASEPRI, r4
   136f2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   136f6:	b003      	add	sp, #12
   136f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   136fc:	2200      	movs	r2, #0
   136fe:	2300      	movs	r3, #0
		curr_tick += dt;
   13700:	eb18 0806 	adds.w	r8, r8, r6
   13704:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   13708:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1370c:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   13710:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   13714:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   13716:	f7ff fee3 	bl	134e0 <remove_timeout>
   1371a:	f384 8811 	msr	BASEPRI, r4
   1371e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   13722:	6883      	ldr	r3, [r0, #8]
   13724:	4798      	blx	r3
	__asm__ volatile(
   13726:	f04f 0320 	mov.w	r3, #32
   1372a:	f3ef 8411 	mrs	r4, BASEPRI
   1372e:	f383 8811 	msr	BASEPRI, r3
   13732:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   13736:	4902      	ldr	r1, [pc, #8]	; (13740 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   13738:	e7b0      	b.n	1369c <z_clock_announce+0x28>
   1373a:	bf00      	nop
   1373c:	2000084c 	.word	0x2000084c
   13740:	20000260 	.word	0x20000260
   13744:	20000054 	.word	0x20000054

00013748 <z_tick_get>:

int64_t z_tick_get(void)
{
   13748:	b510      	push	{r4, lr}
   1374a:	f04f 0320 	mov.w	r3, #32
   1374e:	f3ef 8411 	mrs	r4, BASEPRI
   13752:	f383 8811 	msr	BASEPRI, r3
   13756:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1375a:	f7fd fd41 	bl	111e0 <z_clock_elapsed>
   1375e:	4b06      	ldr	r3, [pc, #24]	; (13778 <z_tick_get+0x30>)
   13760:	e9d3 2300 	ldrd	r2, r3, [r3]
   13764:	1812      	adds	r2, r2, r0
   13766:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1376a:	f384 8811 	msr	BASEPRI, r4
   1376e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   13772:	4610      	mov	r0, r2
   13774:	4619      	mov	r1, r3
   13776:	bd10      	pop	{r4, pc}
   13778:	20000260 	.word	0x20000260

0001377c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1377c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1377e:	4c06      	ldr	r4, [pc, #24]	; (13798 <statics_init+0x1c>)
   13780:	4d06      	ldr	r5, [pc, #24]	; (1379c <statics_init+0x20>)
   13782:	42ac      	cmp	r4, r5
   13784:	d301      	bcc.n	1378a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   13786:	2000      	movs	r0, #0
   13788:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1378a:	4620      	mov	r0, r4
   1378c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   13790:	f001 fc77 	bl	15082 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   13794:	3414      	adds	r4, #20
   13796:	e7f4      	b.n	13782 <statics_init+0x6>
   13798:	20000110 	.word	0x20000110
   1379c:	20000110 	.word	0x20000110

000137a0 <CC_PalMemCopyPlat>:
   137a0:	f001 ba50 	b.w	14c44 <memmove>

000137a4 <CC_PalMemSetZeroPlat>:
   137a4:	460a      	mov	r2, r1
   137a6:	2100      	movs	r1, #0
   137a8:	f001 ba8e 	b.w	14cc8 <memset>

000137ac <CC_PalInit>:
   137ac:	b510      	push	{r4, lr}
   137ae:	4811      	ldr	r0, [pc, #68]	; (137f4 <CC_PalInit+0x48>)
   137b0:	f000 f848 	bl	13844 <CC_PalMutexCreate>
   137b4:	b100      	cbz	r0, 137b8 <CC_PalInit+0xc>
   137b6:	bd10      	pop	{r4, pc}
   137b8:	480f      	ldr	r0, [pc, #60]	; (137f8 <CC_PalInit+0x4c>)
   137ba:	f000 f843 	bl	13844 <CC_PalMutexCreate>
   137be:	2800      	cmp	r0, #0
   137c0:	d1f9      	bne.n	137b6 <CC_PalInit+0xa>
   137c2:	4c0e      	ldr	r4, [pc, #56]	; (137fc <CC_PalInit+0x50>)
   137c4:	4620      	mov	r0, r4
   137c6:	f000 f83d 	bl	13844 <CC_PalMutexCreate>
   137ca:	2800      	cmp	r0, #0
   137cc:	d1f3      	bne.n	137b6 <CC_PalInit+0xa>
   137ce:	4b0c      	ldr	r3, [pc, #48]	; (13800 <CC_PalInit+0x54>)
   137d0:	480c      	ldr	r0, [pc, #48]	; (13804 <CC_PalInit+0x58>)
   137d2:	601c      	str	r4, [r3, #0]
   137d4:	f000 f836 	bl	13844 <CC_PalMutexCreate>
   137d8:	4601      	mov	r1, r0
   137da:	2800      	cmp	r0, #0
   137dc:	d1eb      	bne.n	137b6 <CC_PalInit+0xa>
   137de:	f000 f82d 	bl	1383c <CC_PalDmaInit>
   137e2:	4604      	mov	r4, r0
   137e4:	b108      	cbz	r0, 137ea <CC_PalInit+0x3e>
   137e6:	4620      	mov	r0, r4
   137e8:	bd10      	pop	{r4, pc}
   137ea:	f000 f851 	bl	13890 <CC_PalPowerSaveModeInit>
   137ee:	4620      	mov	r0, r4
   137f0:	e7fa      	b.n	137e8 <CC_PalInit+0x3c>
   137f2:	bf00      	nop
   137f4:	20000068 	.word	0x20000068
   137f8:	2000005c 	.word	0x2000005c
   137fc:	20000064 	.word	0x20000064
   13800:	2000006c 	.word	0x2000006c
   13804:	20000060 	.word	0x20000060

00013808 <CC_PalTerminate>:
   13808:	b508      	push	{r3, lr}
   1380a:	4808      	ldr	r0, [pc, #32]	; (1382c <CC_PalTerminate+0x24>)
   1380c:	f000 f824 	bl	13858 <CC_PalMutexDestroy>
   13810:	4807      	ldr	r0, [pc, #28]	; (13830 <CC_PalTerminate+0x28>)
   13812:	f000 f821 	bl	13858 <CC_PalMutexDestroy>
   13816:	4807      	ldr	r0, [pc, #28]	; (13834 <CC_PalTerminate+0x2c>)
   13818:	f000 f81e 	bl	13858 <CC_PalMutexDestroy>
   1381c:	4806      	ldr	r0, [pc, #24]	; (13838 <CC_PalTerminate+0x30>)
   1381e:	f000 f81b 	bl	13858 <CC_PalMutexDestroy>
   13822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13826:	f000 b80b 	b.w	13840 <CC_PalDmaTerminate>
   1382a:	bf00      	nop
   1382c:	20000068 	.word	0x20000068
   13830:	2000005c 	.word	0x2000005c
   13834:	20000064 	.word	0x20000064
   13838:	20000060 	.word	0x20000060

0001383c <CC_PalDmaInit>:
   1383c:	2000      	movs	r0, #0
   1383e:	4770      	bx	lr

00013840 <CC_PalDmaTerminate>:
   13840:	4770      	bx	lr
   13842:	bf00      	nop

00013844 <CC_PalMutexCreate>:
   13844:	b508      	push	{r3, lr}
   13846:	4b03      	ldr	r3, [pc, #12]	; (13854 <CC_PalMutexCreate+0x10>)
   13848:	6802      	ldr	r2, [r0, #0]
   1384a:	681b      	ldr	r3, [r3, #0]
   1384c:	6810      	ldr	r0, [r2, #0]
   1384e:	4798      	blx	r3
   13850:	2000      	movs	r0, #0
   13852:	bd08      	pop	{r3, pc}
   13854:	20000080 	.word	0x20000080

00013858 <CC_PalMutexDestroy>:
   13858:	b508      	push	{r3, lr}
   1385a:	4b03      	ldr	r3, [pc, #12]	; (13868 <CC_PalMutexDestroy+0x10>)
   1385c:	6802      	ldr	r2, [r0, #0]
   1385e:	685b      	ldr	r3, [r3, #4]
   13860:	6810      	ldr	r0, [r2, #0]
   13862:	4798      	blx	r3
   13864:	2000      	movs	r0, #0
   13866:	bd08      	pop	{r3, pc}
   13868:	20000080 	.word	0x20000080

0001386c <CC_PalMutexLock>:
   1386c:	4b02      	ldr	r3, [pc, #8]	; (13878 <CC_PalMutexLock+0xc>)
   1386e:	6802      	ldr	r2, [r0, #0]
   13870:	689b      	ldr	r3, [r3, #8]
   13872:	6810      	ldr	r0, [r2, #0]
   13874:	4718      	bx	r3
   13876:	bf00      	nop
   13878:	20000080 	.word	0x20000080

0001387c <CC_PalMutexUnlock>:
   1387c:	b508      	push	{r3, lr}
   1387e:	4b03      	ldr	r3, [pc, #12]	; (1388c <CC_PalMutexUnlock+0x10>)
   13880:	6802      	ldr	r2, [r0, #0]
   13882:	68db      	ldr	r3, [r3, #12]
   13884:	6810      	ldr	r0, [r2, #0]
   13886:	4798      	blx	r3
   13888:	2000      	movs	r0, #0
   1388a:	bd08      	pop	{r3, pc}
   1388c:	20000080 	.word	0x20000080

00013890 <CC_PalPowerSaveModeInit>:
   13890:	b570      	push	{r4, r5, r6, lr}
   13892:	4c09      	ldr	r4, [pc, #36]	; (138b8 <CC_PalPowerSaveModeInit+0x28>)
   13894:	4d09      	ldr	r5, [pc, #36]	; (138bc <CC_PalPowerSaveModeInit+0x2c>)
   13896:	6920      	ldr	r0, [r4, #16]
   13898:	68ab      	ldr	r3, [r5, #8]
   1389a:	4798      	blx	r3
   1389c:	b118      	cbz	r0, 138a6 <CC_PalPowerSaveModeInit+0x16>
   1389e:	4b08      	ldr	r3, [pc, #32]	; (138c0 <CC_PalPowerSaveModeInit+0x30>)
   138a0:	4808      	ldr	r0, [pc, #32]	; (138c4 <CC_PalPowerSaveModeInit+0x34>)
   138a2:	685b      	ldr	r3, [r3, #4]
   138a4:	4798      	blx	r3
   138a6:	2100      	movs	r1, #0
   138a8:	4a07      	ldr	r2, [pc, #28]	; (138c8 <CC_PalPowerSaveModeInit+0x38>)
   138aa:	68eb      	ldr	r3, [r5, #12]
   138ac:	6011      	str	r1, [r2, #0]
   138ae:	6920      	ldr	r0, [r4, #16]
   138b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   138b4:	4718      	bx	r3
   138b6:	bf00      	nop
   138b8:	20000090 	.word	0x20000090
   138bc:	20000080 	.word	0x20000080
   138c0:	20000070 	.word	0x20000070
   138c4:	000154fc 	.word	0x000154fc
   138c8:	20000850 	.word	0x20000850

000138cc <CC_PalPowerSaveModeSelect>:
   138cc:	b570      	push	{r4, r5, r6, lr}
   138ce:	4d1a      	ldr	r5, [pc, #104]	; (13938 <CC_PalPowerSaveModeSelect+0x6c>)
   138d0:	4e1a      	ldr	r6, [pc, #104]	; (1393c <CC_PalPowerSaveModeSelect+0x70>)
   138d2:	4604      	mov	r4, r0
   138d4:	68b2      	ldr	r2, [r6, #8]
   138d6:	6928      	ldr	r0, [r5, #16]
   138d8:	4790      	blx	r2
   138da:	b9f0      	cbnz	r0, 1391a <CC_PalPowerSaveModeSelect+0x4e>
   138dc:	b15c      	cbz	r4, 138f6 <CC_PalPowerSaveModeSelect+0x2a>
   138de:	4c18      	ldr	r4, [pc, #96]	; (13940 <CC_PalPowerSaveModeSelect+0x74>)
   138e0:	6823      	ldr	r3, [r4, #0]
   138e2:	b1ab      	cbz	r3, 13910 <CC_PalPowerSaveModeSelect+0x44>
   138e4:	2b01      	cmp	r3, #1
   138e6:	d01a      	beq.n	1391e <CC_PalPowerSaveModeSelect+0x52>
   138e8:	3b01      	subs	r3, #1
   138ea:	6023      	str	r3, [r4, #0]
   138ec:	6928      	ldr	r0, [r5, #16]
   138ee:	68f3      	ldr	r3, [r6, #12]
   138f0:	4798      	blx	r3
   138f2:	2000      	movs	r0, #0
   138f4:	bd70      	pop	{r4, r5, r6, pc}
   138f6:	4c12      	ldr	r4, [pc, #72]	; (13940 <CC_PalPowerSaveModeSelect+0x74>)
   138f8:	6821      	ldr	r1, [r4, #0]
   138fa:	b939      	cbnz	r1, 1390c <CC_PalPowerSaveModeSelect+0x40>
   138fc:	2001      	movs	r0, #1
   138fe:	4b11      	ldr	r3, [pc, #68]	; (13944 <CC_PalPowerSaveModeSelect+0x78>)
   13900:	4a11      	ldr	r2, [pc, #68]	; (13948 <CC_PalPowerSaveModeSelect+0x7c>)
   13902:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   13906:	6813      	ldr	r3, [r2, #0]
   13908:	2b00      	cmp	r3, #0
   1390a:	d1fc      	bne.n	13906 <CC_PalPowerSaveModeSelect+0x3a>
   1390c:	3101      	adds	r1, #1
   1390e:	6021      	str	r1, [r4, #0]
   13910:	68f3      	ldr	r3, [r6, #12]
   13912:	6928      	ldr	r0, [r5, #16]
   13914:	4798      	blx	r3
   13916:	2000      	movs	r0, #0
   13918:	bd70      	pop	{r4, r5, r6, pc}
   1391a:	480c      	ldr	r0, [pc, #48]	; (1394c <CC_PalPowerSaveModeSelect+0x80>)
   1391c:	bd70      	pop	{r4, r5, r6, pc}
   1391e:	4a0a      	ldr	r2, [pc, #40]	; (13948 <CC_PalPowerSaveModeSelect+0x7c>)
   13920:	6813      	ldr	r3, [r2, #0]
   13922:	2b00      	cmp	r3, #0
   13924:	d1fc      	bne.n	13920 <CC_PalPowerSaveModeSelect+0x54>
   13926:	4a07      	ldr	r2, [pc, #28]	; (13944 <CC_PalPowerSaveModeSelect+0x78>)
   13928:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1392c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   13930:	f000 f820 	bl	13974 <CC_HalMaskInterrupt>
   13934:	6823      	ldr	r3, [r4, #0]
   13936:	e7d7      	b.n	138e8 <CC_PalPowerSaveModeSelect+0x1c>
   13938:	20000090 	.word	0x20000090
   1393c:	20000080 	.word	0x20000080
   13940:	20000850 	.word	0x20000850
   13944:	50840000 	.word	0x50840000
   13948:	50841910 	.word	0x50841910
   1394c:	ffff8fe9 	.word	0xffff8fe9

00013950 <CC_HalInit>:
   13950:	2000      	movs	r0, #0
   13952:	4770      	bx	lr

00013954 <CC_HalTerminate>:
   13954:	2000      	movs	r0, #0
   13956:	4770      	bx	lr

00013958 <CC_HalClearInterruptBit>:
   13958:	0543      	lsls	r3, r0, #21
   1395a:	d503      	bpl.n	13964 <CC_HalClearInterruptBit+0xc>
   1395c:	f04f 32ff 	mov.w	r2, #4294967295
   13960:	4b02      	ldr	r3, [pc, #8]	; (1396c <CC_HalClearInterruptBit+0x14>)
   13962:	601a      	str	r2, [r3, #0]
   13964:	4b02      	ldr	r3, [pc, #8]	; (13970 <CC_HalClearInterruptBit+0x18>)
   13966:	6018      	str	r0, [r3, #0]
   13968:	4770      	bx	lr
   1396a:	bf00      	nop
   1396c:	50841108 	.word	0x50841108
   13970:	50841a08 	.word	0x50841a08

00013974 <CC_HalMaskInterrupt>:
   13974:	4b01      	ldr	r3, [pc, #4]	; (1397c <CC_HalMaskInterrupt+0x8>)
   13976:	6018      	str	r0, [r3, #0]
   13978:	4770      	bx	lr
   1397a:	bf00      	nop
   1397c:	50841a04 	.word	0x50841a04

00013980 <CC_HalWaitInterruptRND>:
   13980:	b108      	cbz	r0, 13986 <CC_HalWaitInterruptRND+0x6>
   13982:	f000 b803 	b.w	1398c <CC_PalWaitInterruptRND>
   13986:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1398a:	4770      	bx	lr

0001398c <CC_PalWaitInterruptRND>:
   1398c:	4602      	mov	r2, r0
   1398e:	4807      	ldr	r0, [pc, #28]	; (139ac <CC_PalWaitInterruptRND+0x20>)
   13990:	6803      	ldr	r3, [r0, #0]
   13992:	4213      	tst	r3, r2
   13994:	d0fc      	beq.n	13990 <CC_PalWaitInterruptRND+0x4>
   13996:	b121      	cbz	r1, 139a2 <CC_PalWaitInterruptRND+0x16>
   13998:	4b05      	ldr	r3, [pc, #20]	; (139b0 <CC_PalWaitInterruptRND+0x24>)
   1399a:	4806      	ldr	r0, [pc, #24]	; (139b4 <CC_PalWaitInterruptRND+0x28>)
   1399c:	681b      	ldr	r3, [r3, #0]
   1399e:	600b      	str	r3, [r1, #0]
   139a0:	6003      	str	r3, [r0, #0]
   139a2:	4b05      	ldr	r3, [pc, #20]	; (139b8 <CC_PalWaitInterruptRND+0x2c>)
   139a4:	2000      	movs	r0, #0
   139a6:	601a      	str	r2, [r3, #0]
   139a8:	4770      	bx	lr
   139aa:	bf00      	nop
   139ac:	50841a00 	.word	0x50841a00
   139b0:	50841104 	.word	0x50841104
   139b4:	50841108 	.word	0x50841108
   139b8:	50841a08 	.word	0x50841a08

000139bc <mbedtls_platform_setup>:
   139bc:	f000 b89e 	b.w	13afc <nrf_cc3xx_platform_init>

000139c0 <mbedtls_platform_zeroize>:
   139c0:	b138      	cbz	r0, 139d2 <mbedtls_platform_zeroize+0x12>
   139c2:	b131      	cbz	r1, 139d2 <mbedtls_platform_zeroize+0x12>
   139c4:	2200      	movs	r2, #0
   139c6:	4401      	add	r1, r0
   139c8:	4603      	mov	r3, r0
   139ca:	3001      	adds	r0, #1
   139cc:	4281      	cmp	r1, r0
   139ce:	701a      	strb	r2, [r3, #0]
   139d0:	d1fa      	bne.n	139c8 <mbedtls_platform_zeroize+0x8>
   139d2:	4770      	bx	lr

000139d4 <mbedtls_hardware_poll>:
   139d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139d8:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
   139dc:	460e      	mov	r6, r1
   139de:	9205      	str	r2, [sp, #20]
   139e0:	2100      	movs	r1, #0
   139e2:	4614      	mov	r4, r2
   139e4:	a812      	add	r0, sp, #72	; 0x48
   139e6:	f44f 7208 	mov.w	r2, #544	; 0x220
   139ea:	461d      	mov	r5, r3
   139ec:	f001 f96c 	bl	14cc8 <memset>
   139f0:	2100      	movs	r1, #0
   139f2:	2228      	movs	r2, #40	; 0x28
   139f4:	a808      	add	r0, sp, #32
   139f6:	9106      	str	r1, [sp, #24]
   139f8:	f001 f966 	bl	14cc8 <memset>
   139fc:	2e00      	cmp	r6, #0
   139fe:	d03c      	beq.n	13a7a <mbedtls_hardware_poll+0xa6>
   13a00:	2d00      	cmp	r5, #0
   13a02:	d03a      	beq.n	13a7a <mbedtls_hardware_poll+0xa6>
   13a04:	2c00      	cmp	r4, #0
   13a06:	d038      	beq.n	13a7a <mbedtls_hardware_poll+0xa6>
   13a08:	2104      	movs	r1, #4
   13a0a:	a806      	add	r0, sp, #24
   13a0c:	f7ff feca 	bl	137a4 <CC_PalMemSetZeroPlat>
   13a10:	a808      	add	r0, sp, #32
   13a12:	2128      	movs	r1, #40	; 0x28
   13a14:	f7ff fec6 	bl	137a4 <CC_PalMemSetZeroPlat>
   13a18:	a808      	add	r0, sp, #32
   13a1a:	f000 f831 	bl	13a80 <RNG_PLAT_SetUserRngParameters>
   13a1e:	b178      	cbz	r0, 13a40 <mbedtls_hardware_poll+0x6c>
   13a20:	f04f 37ff 	mov.w	r7, #4294967295
   13a24:	f44f 7108 	mov.w	r1, #544	; 0x220
   13a28:	a812      	add	r0, sp, #72	; 0x48
   13a2a:	f7ff ffc9 	bl	139c0 <mbedtls_platform_zeroize>
   13a2e:	2104      	movs	r1, #4
   13a30:	a806      	add	r0, sp, #24
   13a32:	f7ff ffc5 	bl	139c0 <mbedtls_platform_zeroize>
   13a36:	4638      	mov	r0, r7
   13a38:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   13a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a40:	ab12      	add	r3, sp, #72	; 0x48
   13a42:	f10d 081c 	add.w	r8, sp, #28
   13a46:	4602      	mov	r2, r0
   13a48:	e9cd 5301 	strd	r5, r3, [sp, #4]
   13a4c:	9003      	str	r0, [sp, #12]
   13a4e:	ab05      	add	r3, sp, #20
   13a50:	a908      	add	r1, sp, #32
   13a52:	f8cd 8000 	str.w	r8, [sp]
   13a56:	a806      	add	r0, sp, #24
   13a58:	f000 fd14 	bl	14484 <LLF_RND_GetTrngSource>
   13a5c:	2800      	cmp	r0, #0
   13a5e:	d1df      	bne.n	13a20 <mbedtls_hardware_poll+0x4c>
   13a60:	682b      	ldr	r3, [r5, #0]
   13a62:	42a3      	cmp	r3, r4
   13a64:	d3dc      	bcc.n	13a20 <mbedtls_hardware_poll+0x4c>
   13a66:	f8d8 1000 	ldr.w	r1, [r8]
   13a6a:	4607      	mov	r7, r0
   13a6c:	4622      	mov	r2, r4
   13a6e:	4630      	mov	r0, r6
   13a70:	3108      	adds	r1, #8
   13a72:	f7ff fe95 	bl	137a0 <CC_PalMemCopyPlat>
   13a76:	602c      	str	r4, [r5, #0]
   13a78:	e7d4      	b.n	13a24 <mbedtls_hardware_poll+0x50>
   13a7a:	f04f 37ff 	mov.w	r7, #4294967295
   13a7e:	e7da      	b.n	13a36 <mbedtls_hardware_poll+0x62>

00013a80 <RNG_PLAT_SetUserRngParameters>:
   13a80:	231c      	movs	r3, #28
   13a82:	b530      	push	{r4, r5, lr}
   13a84:	b083      	sub	sp, #12
   13a86:	a901      	add	r1, sp, #4
   13a88:	4604      	mov	r4, r0
   13a8a:	9301      	str	r3, [sp, #4]
   13a8c:	f000 f9ce 	bl	13e2c <CC_PalTrngParamGet>
   13a90:	4605      	mov	r5, r0
   13a92:	b938      	cbnz	r0, 13aa4 <RNG_PLAT_SetUserRngParameters+0x24>
   13a94:	9b01      	ldr	r3, [sp, #4]
   13a96:	2b1c      	cmp	r3, #28
   13a98:	d007      	beq.n	13aaa <RNG_PLAT_SetUserRngParameters+0x2a>
   13a9a:	4d16      	ldr	r5, [pc, #88]	; (13af4 <RNG_PLAT_SetUserRngParameters+0x74>)
   13a9c:	4620      	mov	r0, r4
   13a9e:	211c      	movs	r1, #28
   13aa0:	f7ff fe80 	bl	137a4 <CC_PalMemSetZeroPlat>
   13aa4:	4628      	mov	r0, r5
   13aa6:	b003      	add	sp, #12
   13aa8:	bd30      	pop	{r4, r5, pc}
   13aaa:	2101      	movs	r1, #1
   13aac:	e9d4 3200 	ldrd	r3, r2, [r4]
   13ab0:	3b00      	subs	r3, #0
   13ab2:	bf18      	it	ne
   13ab4:	2301      	movne	r3, #1
   13ab6:	61e1      	str	r1, [r4, #28]
   13ab8:	b10a      	cbz	r2, 13abe <RNG_PLAT_SetUserRngParameters+0x3e>
   13aba:	f043 0302 	orr.w	r3, r3, #2
   13abe:	68a2      	ldr	r2, [r4, #8]
   13ac0:	b932      	cbnz	r2, 13ad0 <RNG_PLAT_SetUserRngParameters+0x50>
   13ac2:	68e2      	ldr	r2, [r4, #12]
   13ac4:	b942      	cbnz	r2, 13ad8 <RNG_PLAT_SetUserRngParameters+0x58>
   13ac6:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13aca:	b98b      	cbnz	r3, 13af0 <RNG_PLAT_SetUserRngParameters+0x70>
   13acc:	4d0a      	ldr	r5, [pc, #40]	; (13af8 <RNG_PLAT_SetUserRngParameters+0x78>)
   13ace:	e7e5      	b.n	13a9c <RNG_PLAT_SetUserRngParameters+0x1c>
   13ad0:	68e2      	ldr	r2, [r4, #12]
   13ad2:	f043 0304 	orr.w	r3, r3, #4
   13ad6:	b13a      	cbz	r2, 13ae8 <RNG_PLAT_SetUserRngParameters+0x68>
   13ad8:	2200      	movs	r2, #0
   13ada:	4628      	mov	r0, r5
   13adc:	f043 0308 	orr.w	r3, r3, #8
   13ae0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13ae4:	b003      	add	sp, #12
   13ae6:	bd30      	pop	{r4, r5, pc}
   13ae8:	4615      	mov	r5, r2
   13aea:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13aee:	e7d9      	b.n	13aa4 <RNG_PLAT_SetUserRngParameters+0x24>
   13af0:	4615      	mov	r5, r2
   13af2:	e7d7      	b.n	13aa4 <RNG_PLAT_SetUserRngParameters+0x24>
   13af4:	00f00c37 	.word	0x00f00c37
   13af8:	00f00c0e 	.word	0x00f00c0e

00013afc <nrf_cc3xx_platform_init>:
   13afc:	b510      	push	{r4, lr}
   13afe:	4c0c      	ldr	r4, [pc, #48]	; (13b30 <nrf_cc3xx_platform_init+0x34>)
   13b00:	6823      	ldr	r3, [r4, #0]
   13b02:	b113      	cbz	r3, 13b0a <nrf_cc3xx_platform_init+0xe>
   13b04:	4b0b      	ldr	r3, [pc, #44]	; (13b34 <nrf_cc3xx_platform_init+0x38>)
   13b06:	681b      	ldr	r3, [r3, #0]
   13b08:	b92b      	cbnz	r3, 13b16 <nrf_cc3xx_platform_init+0x1a>
   13b0a:	f000 f94f 	bl	13dac <CC_LibInit>
   13b0e:	b930      	cbnz	r0, 13b1e <nrf_cc3xx_platform_init+0x22>
   13b10:	2201      	movs	r2, #1
   13b12:	4b08      	ldr	r3, [pc, #32]	; (13b34 <nrf_cc3xx_platform_init+0x38>)
   13b14:	601a      	str	r2, [r3, #0]
   13b16:	2301      	movs	r3, #1
   13b18:	2000      	movs	r0, #0
   13b1a:	6023      	str	r3, [r4, #0]
   13b1c:	bd10      	pop	{r4, pc}
   13b1e:	3801      	subs	r0, #1
   13b20:	2806      	cmp	r0, #6
   13b22:	d901      	bls.n	13b28 <nrf_cc3xx_platform_init+0x2c>
   13b24:	4804      	ldr	r0, [pc, #16]	; (13b38 <nrf_cc3xx_platform_init+0x3c>)
   13b26:	bd10      	pop	{r4, pc}
   13b28:	4b04      	ldr	r3, [pc, #16]	; (13b3c <nrf_cc3xx_platform_init+0x40>)
   13b2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13b2e:	bd10      	pop	{r4, pc}
   13b30:	20000854 	.word	0x20000854
   13b34:	20000858 	.word	0x20000858
   13b38:	ffff8ffe 	.word	0xffff8ffe
   13b3c:	0001551c 	.word	0x0001551c

00013b40 <nrf_cc3xx_platform_init_no_rng>:
   13b40:	b510      	push	{r4, lr}
   13b42:	4c0a      	ldr	r4, [pc, #40]	; (13b6c <nrf_cc3xx_platform_init_no_rng+0x2c>)
   13b44:	6823      	ldr	r3, [r4, #0]
   13b46:	b11b      	cbz	r3, 13b50 <nrf_cc3xx_platform_init_no_rng+0x10>
   13b48:	2301      	movs	r3, #1
   13b4a:	2000      	movs	r0, #0
   13b4c:	6023      	str	r3, [r4, #0]
   13b4e:	bd10      	pop	{r4, pc}
   13b50:	f000 f898 	bl	13c84 <CC_LibInitNoRng>
   13b54:	2800      	cmp	r0, #0
   13b56:	d0f7      	beq.n	13b48 <nrf_cc3xx_platform_init_no_rng+0x8>
   13b58:	3801      	subs	r0, #1
   13b5a:	2806      	cmp	r0, #6
   13b5c:	d803      	bhi.n	13b66 <nrf_cc3xx_platform_init_no_rng+0x26>
   13b5e:	4b04      	ldr	r3, [pc, #16]	; (13b70 <nrf_cc3xx_platform_init_no_rng+0x30>)
   13b60:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13b64:	bd10      	pop	{r4, pc}
   13b66:	4803      	ldr	r0, [pc, #12]	; (13b74 <nrf_cc3xx_platform_init_no_rng+0x34>)
   13b68:	bd10      	pop	{r4, pc}
   13b6a:	bf00      	nop
   13b6c:	20000854 	.word	0x20000854
   13b70:	0001551c 	.word	0x0001551c
   13b74:	ffff8ffe 	.word	0xffff8ffe

00013b78 <nrf_cc3xx_platform_abort>:
   13b78:	f3bf 8f4f 	dsb	sy
   13b7c:	4905      	ldr	r1, [pc, #20]	; (13b94 <nrf_cc3xx_platform_abort+0x1c>)
   13b7e:	4b06      	ldr	r3, [pc, #24]	; (13b98 <nrf_cc3xx_platform_abort+0x20>)
   13b80:	68ca      	ldr	r2, [r1, #12]
   13b82:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13b86:	4313      	orrs	r3, r2
   13b88:	60cb      	str	r3, [r1, #12]
   13b8a:	f3bf 8f4f 	dsb	sy
   13b8e:	bf00      	nop
   13b90:	e7fd      	b.n	13b8e <nrf_cc3xx_platform_abort+0x16>
   13b92:	bf00      	nop
   13b94:	e000ed00 	.word	0xe000ed00
   13b98:	05fa0004 	.word	0x05fa0004

00013b9c <CC_PalAbort>:
   13b9c:	4b01      	ldr	r3, [pc, #4]	; (13ba4 <CC_PalAbort+0x8>)
   13b9e:	685b      	ldr	r3, [r3, #4]
   13ba0:	4718      	bx	r3
   13ba2:	bf00      	nop
   13ba4:	20000070 	.word	0x20000070

00013ba8 <nrf_cc3xx_platform_set_abort>:
   13ba8:	4b02      	ldr	r3, [pc, #8]	; (13bb4 <nrf_cc3xx_platform_set_abort+0xc>)
   13baa:	e9d0 1200 	ldrd	r1, r2, [r0]
   13bae:	e9c3 1200 	strd	r1, r2, [r3]
   13bb2:	4770      	bx	lr
   13bb4:	20000070 	.word	0x20000070

00013bb8 <mutex_unlock>:
   13bb8:	b148      	cbz	r0, 13bce <mutex_unlock+0x16>
   13bba:	6843      	ldr	r3, [r0, #4]
   13bbc:	b12b      	cbz	r3, 13bca <mutex_unlock+0x12>
   13bbe:	f3bf 8f5f 	dmb	sy
   13bc2:	2300      	movs	r3, #0
   13bc4:	6003      	str	r3, [r0, #0]
   13bc6:	4618      	mov	r0, r3
   13bc8:	4770      	bx	lr
   13bca:	4802      	ldr	r0, [pc, #8]	; (13bd4 <mutex_unlock+0x1c>)
   13bcc:	4770      	bx	lr
   13bce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13bd2:	4770      	bx	lr
   13bd4:	ffff8fea 	.word	0xffff8fea

00013bd8 <mutex_free>:
   13bd8:	b510      	push	{r4, lr}
   13bda:	4604      	mov	r4, r0
   13bdc:	b128      	cbz	r0, 13bea <mutex_free+0x12>
   13bde:	6863      	ldr	r3, [r4, #4]
   13be0:	b113      	cbz	r3, 13be8 <mutex_free+0x10>
   13be2:	2300      	movs	r3, #0
   13be4:	6023      	str	r3, [r4, #0]
   13be6:	6063      	str	r3, [r4, #4]
   13be8:	bd10      	pop	{r4, pc}
   13bea:	4b02      	ldr	r3, [pc, #8]	; (13bf4 <mutex_free+0x1c>)
   13bec:	4802      	ldr	r0, [pc, #8]	; (13bf8 <mutex_free+0x20>)
   13bee:	685b      	ldr	r3, [r3, #4]
   13bf0:	4798      	blx	r3
   13bf2:	e7f4      	b.n	13bde <mutex_free+0x6>
   13bf4:	20000070 	.word	0x20000070
   13bf8:	00015538 	.word	0x00015538

00013bfc <mutex_init>:
   13bfc:	b510      	push	{r4, lr}
   13bfe:	4604      	mov	r4, r0
   13c00:	b130      	cbz	r0, 13c10 <mutex_init+0x14>
   13c02:	2200      	movs	r2, #0
   13c04:	6863      	ldr	r3, [r4, #4]
   13c06:	6022      	str	r2, [r4, #0]
   13c08:	f043 0301 	orr.w	r3, r3, #1
   13c0c:	6063      	str	r3, [r4, #4]
   13c0e:	bd10      	pop	{r4, pc}
   13c10:	4801      	ldr	r0, [pc, #4]	; (13c18 <mutex_init+0x1c>)
   13c12:	f7ff ffc3 	bl	13b9c <CC_PalAbort>
   13c16:	e7f4      	b.n	13c02 <mutex_init+0x6>
   13c18:	00015560 	.word	0x00015560

00013c1c <mutex_lock>:
   13c1c:	b180      	cbz	r0, 13c40 <mutex_lock+0x24>
   13c1e:	6843      	ldr	r3, [r0, #4]
   13c20:	b163      	cbz	r3, 13c3c <mutex_lock+0x20>
   13c22:	2201      	movs	r2, #1
   13c24:	e8d0 3fef 	ldaex	r3, [r0]
   13c28:	e8c0 2fe1 	stlex	r1, r2, [r0]
   13c2c:	2900      	cmp	r1, #0
   13c2e:	d1f9      	bne.n	13c24 <mutex_lock+0x8>
   13c30:	2b01      	cmp	r3, #1
   13c32:	d0f7      	beq.n	13c24 <mutex_lock+0x8>
   13c34:	f3bf 8f5f 	dmb	sy
   13c38:	2000      	movs	r0, #0
   13c3a:	4770      	bx	lr
   13c3c:	4802      	ldr	r0, [pc, #8]	; (13c48 <mutex_lock+0x2c>)
   13c3e:	4770      	bx	lr
   13c40:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13c44:	4770      	bx	lr
   13c46:	bf00      	nop
   13c48:	ffff8fea 	.word	0xffff8fea

00013c4c <nrf_cc3xx_platform_set_mutexes>:
   13c4c:	b470      	push	{r4, r5, r6}
   13c4e:	4b0b      	ldr	r3, [pc, #44]	; (13c7c <nrf_cc3xx_platform_set_mutexes+0x30>)
   13c50:	6806      	ldr	r6, [r0, #0]
   13c52:	68c2      	ldr	r2, [r0, #12]
   13c54:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
   13c58:	e9c3 4202 	strd	r4, r2, [r3, #8]
   13c5c:	e9c3 6500 	strd	r6, r5, [r3]
   13c60:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
   13c64:	680e      	ldr	r6, [r1, #0]
   13c66:	4b06      	ldr	r3, [pc, #24]	; (13c80 <nrf_cc3xx_platform_set_mutexes+0x34>)
   13c68:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
   13c6c:	e9c3 6500 	strd	r6, r5, [r3]
   13c70:	e9c3 4002 	strd	r4, r0, [r3, #8]
   13c74:	611a      	str	r2, [r3, #16]
   13c76:	bc70      	pop	{r4, r5, r6}
   13c78:	4770      	bx	lr
   13c7a:	bf00      	nop
   13c7c:	20000080 	.word	0x20000080
   13c80:	20000090 	.word	0x20000090

00013c84 <CC_LibInitNoRng>:
   13c84:	b510      	push	{r4, lr}
   13c86:	f7ff fe63 	bl	13950 <CC_HalInit>
   13c8a:	b120      	cbz	r0, 13c96 <CC_LibInitNoRng+0x12>
   13c8c:	2403      	movs	r4, #3
   13c8e:	f7ff fdbb 	bl	13808 <CC_PalTerminate>
   13c92:	4620      	mov	r0, r4
   13c94:	bd10      	pop	{r4, pc}
   13c96:	f7ff fd89 	bl	137ac <CC_PalInit>
   13c9a:	b990      	cbnz	r0, 13cc2 <CC_LibInitNoRng+0x3e>
   13c9c:	f7ff fe16 	bl	138cc <CC_PalPowerSaveModeSelect>
   13ca0:	b990      	cbnz	r0, 13cc8 <CC_LibInitNoRng+0x44>
   13ca2:	4b0f      	ldr	r3, [pc, #60]	; (13ce0 <CC_LibInitNoRng+0x5c>)
   13ca4:	681b      	ldr	r3, [r3, #0]
   13ca6:	0e1b      	lsrs	r3, r3, #24
   13ca8:	2bf0      	cmp	r3, #240	; 0xf0
   13caa:	d108      	bne.n	13cbe <CC_LibInitNoRng+0x3a>
   13cac:	4a0d      	ldr	r2, [pc, #52]	; (13ce4 <CC_LibInitNoRng+0x60>)
   13cae:	4b0e      	ldr	r3, [pc, #56]	; (13ce8 <CC_LibInitNoRng+0x64>)
   13cb0:	6812      	ldr	r2, [r2, #0]
   13cb2:	429a      	cmp	r2, r3
   13cb4:	d00a      	beq.n	13ccc <CC_LibInitNoRng+0x48>
   13cb6:	2407      	movs	r4, #7
   13cb8:	f7ff fe4c 	bl	13954 <CC_HalTerminate>
   13cbc:	e7e7      	b.n	13c8e <CC_LibInitNoRng+0xa>
   13cbe:	2406      	movs	r4, #6
   13cc0:	e7fa      	b.n	13cb8 <CC_LibInitNoRng+0x34>
   13cc2:	2404      	movs	r4, #4
   13cc4:	4620      	mov	r0, r4
   13cc6:	bd10      	pop	{r4, pc}
   13cc8:	2400      	movs	r4, #0
   13cca:	e7f5      	b.n	13cb8 <CC_LibInitNoRng+0x34>
   13ccc:	2001      	movs	r0, #1
   13cce:	f7ff fdfd 	bl	138cc <CC_PalPowerSaveModeSelect>
   13cd2:	4604      	mov	r4, r0
   13cd4:	2800      	cmp	r0, #0
   13cd6:	d1f7      	bne.n	13cc8 <CC_LibInitNoRng+0x44>
   13cd8:	4b04      	ldr	r3, [pc, #16]	; (13cec <CC_LibInitNoRng+0x68>)
   13cda:	6018      	str	r0, [r3, #0]
   13cdc:	e7d9      	b.n	13c92 <CC_LibInitNoRng+0xe>
   13cde:	bf00      	nop
   13ce0:	50841928 	.word	0x50841928
   13ce4:	50841a24 	.word	0x50841a24
   13ce8:	20e00000 	.word	0x20e00000
   13cec:	50841a0c 	.word	0x50841a0c

00013cf0 <CC_LibInitRngModule>:
   13cf0:	b530      	push	{r4, r5, lr}
   13cf2:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   13cf6:	f44f 7208 	mov.w	r2, #544	; 0x220
   13cfa:	2100      	movs	r1, #0
   13cfc:	a80c      	add	r0, sp, #48	; 0x30
   13cfe:	f000 ffe3 	bl	14cc8 <memset>
   13d02:	2100      	movs	r1, #0
   13d04:	2228      	movs	r2, #40	; 0x28
   13d06:	a802      	add	r0, sp, #8
   13d08:	9101      	str	r1, [sp, #4]
   13d0a:	f000 ffdd 	bl	14cc8 <memset>
   13d0e:	a802      	add	r0, sp, #8
   13d10:	f7ff feb6 	bl	13a80 <RNG_PLAT_SetUserRngParameters>
   13d14:	b120      	cbz	r0, 13d20 <CC_LibInitRngModule+0x30>
   13d16:	2405      	movs	r4, #5
   13d18:	4620      	mov	r0, r4
   13d1a:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   13d1e:	bd30      	pop	{r4, r5, pc}
   13d20:	4d1d      	ldr	r5, [pc, #116]	; (13d98 <CC_LibInitRngModule+0xa8>)
   13d22:	f04f 31ff 	mov.w	r1, #4294967295
   13d26:	6828      	ldr	r0, [r5, #0]
   13d28:	f7ff fda0 	bl	1386c <CC_PalMutexLock>
   13d2c:	4604      	mov	r4, r0
   13d2e:	b9e8      	cbnz	r0, 13d6c <CC_LibInitRngModule+0x7c>
   13d30:	2000      	movs	r0, #0
   13d32:	f7ff fdcb 	bl	138cc <CC_PalPowerSaveModeSelect>
   13d36:	bb58      	cbnz	r0, 13d90 <CC_LibInitRngModule+0xa0>
   13d38:	aa0c      	add	r2, sp, #48	; 0x30
   13d3a:	a902      	add	r1, sp, #8
   13d3c:	a801      	add	r0, sp, #4
   13d3e:	f000 fbed 	bl	1451c <LLF_RND_RunTrngStartupTest>
   13d42:	4604      	mov	r4, r0
   13d44:	2001      	movs	r0, #1
   13d46:	f7ff fdc1 	bl	138cc <CC_PalPowerSaveModeSelect>
   13d4a:	b9e8      	cbnz	r0, 13d88 <CC_LibInitRngModule+0x98>
   13d4c:	6828      	ldr	r0, [r5, #0]
   13d4e:	f7ff fd95 	bl	1387c <CC_PalMutexUnlock>
   13d52:	b928      	cbnz	r0, 13d60 <CC_LibInitRngModule+0x70>
   13d54:	2c00      	cmp	r4, #0
   13d56:	d1de      	bne.n	13d16 <CC_LibInitRngModule+0x26>
   13d58:	4620      	mov	r0, r4
   13d5a:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   13d5e:	bd30      	pop	{r4, r5, pc}
   13d60:	480e      	ldr	r0, [pc, #56]	; (13d9c <CC_LibInitRngModule+0xac>)
   13d62:	f7ff ff1b 	bl	13b9c <CC_PalAbort>
   13d66:	2c00      	cmp	r4, #0
   13d68:	d0f6      	beq.n	13d58 <CC_LibInitRngModule+0x68>
   13d6a:	e7d4      	b.n	13d16 <CC_LibInitRngModule+0x26>
   13d6c:	480c      	ldr	r0, [pc, #48]	; (13da0 <CC_LibInitRngModule+0xb0>)
   13d6e:	f7ff ff15 	bl	13b9c <CC_PalAbort>
   13d72:	2c01      	cmp	r4, #1
   13d74:	d1dc      	bne.n	13d30 <CC_LibInitRngModule+0x40>
   13d76:	6828      	ldr	r0, [r5, #0]
   13d78:	f7ff fd80 	bl	1387c <CC_PalMutexUnlock>
   13d7c:	2800      	cmp	r0, #0
   13d7e:	d0ca      	beq.n	13d16 <CC_LibInitRngModule+0x26>
   13d80:	4806      	ldr	r0, [pc, #24]	; (13d9c <CC_LibInitRngModule+0xac>)
   13d82:	f7ff ff0b 	bl	13b9c <CC_PalAbort>
   13d86:	e7c6      	b.n	13d16 <CC_LibInitRngModule+0x26>
   13d88:	4806      	ldr	r0, [pc, #24]	; (13da4 <CC_LibInitRngModule+0xb4>)
   13d8a:	f7ff ff07 	bl	13b9c <CC_PalAbort>
   13d8e:	e7dd      	b.n	13d4c <CC_LibInitRngModule+0x5c>
   13d90:	4805      	ldr	r0, [pc, #20]	; (13da8 <CC_LibInitRngModule+0xb8>)
   13d92:	f7ff ff03 	bl	13b9c <CC_PalAbort>
   13d96:	e7cf      	b.n	13d38 <CC_LibInitRngModule+0x48>
   13d98:	2000006c 	.word	0x2000006c
   13d9c:	0001559c 	.word	0x0001559c
   13da0:	00015584 	.word	0x00015584
   13da4:	000155d4 	.word	0x000155d4
   13da8:	000155b4 	.word	0x000155b4

00013dac <CC_LibInit>:
   13dac:	b508      	push	{r3, lr}
   13dae:	f7ff fdcf 	bl	13950 <CC_HalInit>
   13db2:	b118      	cbz	r0, 13dbc <CC_LibInit+0x10>
   13db4:	f7ff fd28 	bl	13808 <CC_PalTerminate>
   13db8:	2003      	movs	r0, #3
   13dba:	bd08      	pop	{r3, pc}
   13dbc:	f7ff fcf6 	bl	137ac <CC_PalInit>
   13dc0:	b9c0      	cbnz	r0, 13df4 <CC_LibInit+0x48>
   13dc2:	f7ff fd83 	bl	138cc <CC_PalPowerSaveModeSelect>
   13dc6:	b9b8      	cbnz	r0, 13df8 <CC_LibInit+0x4c>
   13dc8:	4b14      	ldr	r3, [pc, #80]	; (13e1c <CC_LibInit+0x70>)
   13dca:	681b      	ldr	r3, [r3, #0]
   13dcc:	0e1b      	lsrs	r3, r3, #24
   13dce:	2bf0      	cmp	r3, #240	; 0xf0
   13dd0:	d10a      	bne.n	13de8 <CC_LibInit+0x3c>
   13dd2:	4a13      	ldr	r2, [pc, #76]	; (13e20 <CC_LibInit+0x74>)
   13dd4:	4b13      	ldr	r3, [pc, #76]	; (13e24 <CC_LibInit+0x78>)
   13dd6:	6812      	ldr	r2, [r2, #0]
   13dd8:	429a      	cmp	r2, r3
   13dda:	d017      	beq.n	13e0c <CC_LibInit+0x60>
   13ddc:	f7ff fdba 	bl	13954 <CC_HalTerminate>
   13de0:	f7ff fd12 	bl	13808 <CC_PalTerminate>
   13de4:	2007      	movs	r0, #7
   13de6:	bd08      	pop	{r3, pc}
   13de8:	f7ff fdb4 	bl	13954 <CC_HalTerminate>
   13dec:	f7ff fd0c 	bl	13808 <CC_PalTerminate>
   13df0:	2006      	movs	r0, #6
   13df2:	bd08      	pop	{r3, pc}
   13df4:	2004      	movs	r0, #4
   13df6:	bd08      	pop	{r3, pc}
   13df8:	f7ff fdac 	bl	13954 <CC_HalTerminate>
   13dfc:	f7ff fd04 	bl	13808 <CC_PalTerminate>
   13e00:	f7ff ff76 	bl	13cf0 <CC_LibInitRngModule>
   13e04:	2800      	cmp	r0, #0
   13e06:	bf18      	it	ne
   13e08:	2005      	movne	r0, #5
   13e0a:	bd08      	pop	{r3, pc}
   13e0c:	2001      	movs	r0, #1
   13e0e:	f7ff fd5d 	bl	138cc <CC_PalPowerSaveModeSelect>
   13e12:	2800      	cmp	r0, #0
   13e14:	d1f0      	bne.n	13df8 <CC_LibInit+0x4c>
   13e16:	4b04      	ldr	r3, [pc, #16]	; (13e28 <CC_LibInit+0x7c>)
   13e18:	6018      	str	r0, [r3, #0]
   13e1a:	e7f1      	b.n	13e00 <CC_LibInit+0x54>
   13e1c:	50841928 	.word	0x50841928
   13e20:	50841a24 	.word	0x50841a24
   13e24:	20e00000 	.word	0x20e00000
   13e28:	50841a0c 	.word	0x50841a0c

00013e2c <CC_PalTrngParamGet>:
   13e2c:	2800      	cmp	r0, #0
   13e2e:	d066      	beq.n	13efe <CC_PalTrngParamGet+0xd2>
   13e30:	2900      	cmp	r1, #0
   13e32:	d064      	beq.n	13efe <CC_PalTrngParamGet+0xd2>
   13e34:	680b      	ldr	r3, [r1, #0]
   13e36:	2b1c      	cmp	r3, #28
   13e38:	d161      	bne.n	13efe <CC_PalTrngParamGet+0xd2>
   13e3a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13e3e:	4a3b      	ldr	r2, [pc, #236]	; (13f2c <CC_PalTrngParamGet+0x100>)
   13e40:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
   13e44:	4291      	cmp	r1, r2
   13e46:	d05c      	beq.n	13f02 <CC_PalTrngParamGet+0xd6>
   13e48:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   13e4c:	3201      	adds	r2, #1
   13e4e:	d058      	beq.n	13f02 <CC_PalTrngParamGet+0xd6>
   13e50:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   13e54:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13e58:	6002      	str	r2, [r0, #0]
   13e5a:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
   13e5e:	4a34      	ldr	r2, [pc, #208]	; (13f30 <CC_PalTrngParamGet+0x104>)
   13e60:	4291      	cmp	r1, r2
   13e62:	d060      	beq.n	13f26 <CC_PalTrngParamGet+0xfa>
   13e64:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13e68:	3201      	adds	r2, #1
   13e6a:	d05c      	beq.n	13f26 <CC_PalTrngParamGet+0xfa>
   13e6c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13e70:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13e74:	6042      	str	r2, [r0, #4]
   13e76:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13e7a:	f512 7f94 	cmn.w	r2, #296	; 0x128
   13e7e:	d04f      	beq.n	13f20 <CC_PalTrngParamGet+0xf4>
   13e80:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13e84:	3201      	adds	r2, #1
   13e86:	d04b      	beq.n	13f20 <CC_PalTrngParamGet+0xf4>
   13e88:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13e8c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13e90:	6082      	str	r2, [r0, #8]
   13e92:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
   13e96:	4a27      	ldr	r2, [pc, #156]	; (13f34 <CC_PalTrngParamGet+0x108>)
   13e98:	4291      	cmp	r1, r2
   13e9a:	d03e      	beq.n	13f1a <CC_PalTrngParamGet+0xee>
   13e9c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13ea0:	3201      	adds	r2, #1
   13ea2:	d03a      	beq.n	13f1a <CC_PalTrngParamGet+0xee>
   13ea4:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13ea8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13eac:	60c2      	str	r2, [r0, #12]
   13eae:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13eb2:	3270      	adds	r2, #112	; 0x70
   13eb4:	d02f      	beq.n	13f16 <CC_PalTrngParamGet+0xea>
   13eb6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13eba:	3201      	adds	r2, #1
   13ebc:	d02b      	beq.n	13f16 <CC_PalTrngParamGet+0xea>
   13ebe:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13ec2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13ec6:	6102      	str	r2, [r0, #16]
   13ec8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13ecc:	32af      	adds	r2, #175	; 0xaf
   13ece:	d020      	beq.n	13f12 <CC_PalTrngParamGet+0xe6>
   13ed0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13ed4:	3201      	adds	r2, #1
   13ed6:	d01c      	beq.n	13f12 <CC_PalTrngParamGet+0xe6>
   13ed8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13edc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13ee0:	6142      	str	r2, [r0, #20]
   13ee2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
   13ee6:	4a14      	ldr	r2, [pc, #80]	; (13f38 <CC_PalTrngParamGet+0x10c>)
   13ee8:	4291      	cmp	r1, r2
   13eea:	d00d      	beq.n	13f08 <CC_PalTrngParamGet+0xdc>
   13eec:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   13ef0:	3201      	adds	r2, #1
   13ef2:	d009      	beq.n	13f08 <CC_PalTrngParamGet+0xdc>
   13ef4:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
   13ef8:	6183      	str	r3, [r0, #24]
   13efa:	2000      	movs	r0, #0
   13efc:	4770      	bx	lr
   13efe:	2001      	movs	r0, #1
   13f00:	4770      	bx	lr
   13f02:	f640 02fc 	movw	r2, #2300	; 0x8fc
   13f06:	e7a5      	b.n	13e54 <CC_PalTrngParamGet+0x28>
   13f08:	f240 3337 	movw	r3, #823	; 0x337
   13f0c:	6183      	str	r3, [r0, #24]
   13f0e:	2000      	movs	r0, #0
   13f10:	4770      	bx	lr
   13f12:	2251      	movs	r2, #81	; 0x51
   13f14:	e7e2      	b.n	13edc <CC_PalTrngParamGet+0xb0>
   13f16:	2290      	movs	r2, #144	; 0x90
   13f18:	e7d3      	b.n	13ec2 <CC_PalTrngParamGet+0x96>
   13f1a:	f642 1204 	movw	r2, #10500	; 0x2904
   13f1e:	e7c3      	b.n	13ea8 <CC_PalTrngParamGet+0x7c>
   13f20:	f640 62d8 	movw	r2, #3800	; 0xed8
   13f24:	e7b2      	b.n	13e8c <CC_PalTrngParamGet+0x60>
   13f26:	f242 02d0 	movw	r2, #8400	; 0x20d0
   13f2a:	e7a1      	b.n	13e70 <CC_PalTrngParamGet+0x44>
   13f2c:	fffff8fc 	.word	0xfffff8fc
   13f30:	ffff20d0 	.word	0xffff20d0
   13f34:	ffff2904 	.word	0xffff2904
   13f38:	fffff337 	.word	0xfffff337

00013f3c <startTrngHW>:
   13f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13f40:	2800      	cmp	r0, #0
   13f42:	d077      	beq.n	14034 <startTrngHW+0xf8>
   13f44:	460c      	mov	r4, r1
   13f46:	2900      	cmp	r1, #0
   13f48:	d074      	beq.n	14034 <startTrngHW+0xf8>
   13f4a:	461d      	mov	r5, r3
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	d071      	beq.n	14034 <startTrngHW+0xf8>
   13f50:	4606      	mov	r6, r0
   13f52:	b11a      	cbz	r2, 13f5c <startTrngHW+0x20>
   13f54:	2201      	movs	r2, #1
   13f56:	2300      	movs	r3, #0
   13f58:	602a      	str	r2, [r5, #0]
   13f5a:	6003      	str	r3, [r0, #0]
   13f5c:	682b      	ldr	r3, [r5, #0]
   13f5e:	2b00      	cmp	r3, #0
   13f60:	d064      	beq.n	1402c <startTrngHW+0xf0>
   13f62:	4629      	mov	r1, r5
   13f64:	4620      	mov	r0, r4
   13f66:	f000 fb15 	bl	14594 <LLF_RND_GetFastestRosc>
   13f6a:	4607      	mov	r7, r0
   13f6c:	2800      	cmp	r0, #0
   13f6e:	d15e      	bne.n	1402e <startTrngHW+0xf2>
   13f70:	4621      	mov	r1, r4
   13f72:	6828      	ldr	r0, [r5, #0]
   13f74:	f000 faf0 	bl	14558 <LLF_RND_GetRoscSampleCnt>
   13f78:	4607      	mov	r7, r0
   13f7a:	2800      	cmp	r0, #0
   13f7c:	d157      	bne.n	1402e <startTrngHW+0xf2>
   13f7e:	682b      	ldr	r3, [r5, #0]
   13f80:	2b08      	cmp	r3, #8
   13f82:	d066      	beq.n	14052 <startTrngHW+0x116>
   13f84:	2b04      	cmp	r3, #4
   13f86:	d067      	beq.n	14058 <startTrngHW+0x11c>
   13f88:	f1a3 0802 	sub.w	r8, r3, #2
   13f8c:	fab8 f888 	clz	r8, r8
   13f90:	ea4f 1858 	mov.w	r8, r8, lsr #5
   13f94:	2301      	movs	r3, #1
   13f96:	469c      	mov	ip, r3
   13f98:	4a31      	ldr	r2, [pc, #196]	; (14060 <startTrngHW+0x124>)
   13f9a:	4932      	ldr	r1, [pc, #200]	; (14064 <startTrngHW+0x128>)
   13f9c:	6013      	str	r3, [r2, #0]
   13f9e:	4610      	mov	r0, r2
   13fa0:	600b      	str	r3, [r1, #0]
   13fa2:	3a94      	subs	r2, #148	; 0x94
   13fa4:	f8c0 c000 	str.w	ip, [r0]
   13fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13faa:	6013      	str	r3, [r2, #0]
   13fac:	6811      	ldr	r1, [r2, #0]
   13fae:	428b      	cmp	r3, r1
   13fb0:	d1f8      	bne.n	13fa4 <startTrngHW+0x68>
   13fb2:	f04f 0900 	mov.w	r9, #0
   13fb6:	4b2c      	ldr	r3, [pc, #176]	; (14068 <startTrngHW+0x12c>)
   13fb8:	f04f 30ff 	mov.w	r0, #4294967295
   13fbc:	f8c3 9000 	str.w	r9, [r3]
   13fc0:	f7ff fcca 	bl	13958 <CC_HalClearInterruptBit>
   13fc4:	4b29      	ldr	r3, [pc, #164]	; (1406c <startTrngHW+0x130>)
   13fc6:	4a2a      	ldr	r2, [pc, #168]	; (14070 <startTrngHW+0x134>)
   13fc8:	4648      	mov	r0, r9
   13fca:	601a      	str	r2, [r3, #0]
   13fcc:	f7ff fcd2 	bl	13974 <CC_HalMaskInterrupt>
   13fd0:	4a28      	ldr	r2, [pc, #160]	; (14074 <startTrngHW+0x138>)
   13fd2:	4b29      	ldr	r3, [pc, #164]	; (14078 <startTrngHW+0x13c>)
   13fd4:	f8c2 8000 	str.w	r8, [r2]
   13fd8:	6818      	ldr	r0, [r3, #0]
   13fda:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   13fde:	f7ff fcc9 	bl	13974 <CC_HalMaskInterrupt>
   13fe2:	220a      	movs	r2, #10
   13fe4:	4b25      	ldr	r3, [pc, #148]	; (1407c <startTrngHW+0x140>)
   13fe6:	601a      	str	r2, [r3, #0]
   13fe8:	9a08      	ldr	r2, [sp, #32]
   13fea:	6923      	ldr	r3, [r4, #16]
   13fec:	2a01      	cmp	r2, #1
   13fee:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13ff0:	d024      	beq.n	1403c <startTrngHW+0x100>
   13ff2:	4a23      	ldr	r2, [pc, #140]	; (14080 <startTrngHW+0x144>)
   13ff4:	fba2 2303 	umull	r2, r3, r2, r3
   13ff8:	091b      	lsrs	r3, r3, #4
   13ffa:	2201      	movs	r2, #1
   13ffc:	fb03 f301 	mul.w	r3, r3, r1
   14000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14004:	491f      	ldr	r1, [pc, #124]	; (14084 <startTrngHW+0x148>)
   14006:	03db      	lsls	r3, r3, #15
   14008:	099b      	lsrs	r3, r3, #6
   1400a:	600b      	str	r3, [r1, #0]
   1400c:	4b16      	ldr	r3, [pc, #88]	; (14068 <startTrngHW+0x12c>)
   1400e:	4638      	mov	r0, r7
   14010:	601a      	str	r2, [r3, #0]
   14012:	6833      	ldr	r3, [r6, #0]
   14014:	682a      	ldr	r2, [r5, #0]
   14016:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1401a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1401e:	6033      	str	r3, [r6, #0]
   14020:	682a      	ldr	r2, [r5, #0]
   14022:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14026:	6033      	str	r3, [r6, #0]
   14028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1402c:	4f16      	ldr	r7, [pc, #88]	; (14088 <startTrngHW+0x14c>)
   1402e:	4638      	mov	r0, r7
   14030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14034:	4f15      	ldr	r7, [pc, #84]	; (1408c <startTrngHW+0x150>)
   14036:	4638      	mov	r0, r7
   14038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1403c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14040:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   14044:	3201      	adds	r2, #1
   14046:	d002      	beq.n	1404e <startTrngHW+0x112>
   14048:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1404c:	e7d1      	b.n	13ff2 <startTrngHW+0xb6>
   1404e:	2316      	movs	r3, #22
   14050:	e7d3      	b.n	13ffa <startTrngHW+0xbe>
   14052:	f04f 0803 	mov.w	r8, #3
   14056:	e79d      	b.n	13f94 <startTrngHW+0x58>
   14058:	f04f 0802 	mov.w	r8, #2
   1405c:	e79a      	b.n	13f94 <startTrngHW+0x58>
   1405e:	bf00      	nop
   14060:	508411c4 	.word	0x508411c4
   14064:	50841140 	.word	0x50841140
   14068:	5084112c 	.word	0x5084112c
   1406c:	50841100 	.word	0x50841100
   14070:	0ffffffe 	.word	0x0ffffffe
   14074:	5084110c 	.word	0x5084110c
   14078:	50841a04 	.word	0x50841a04
   1407c:	50841138 	.word	0x50841138
   14080:	aaaaaaab 	.word	0xaaaaaaab
   14084:	508411d8 	.word	0x508411d8
   14088:	00f10c31 	.word	0x00f10c31
   1408c:	00f10c35 	.word	0x00f10c35

00014090 <LLF_RND_RepetitionCounterTest.part.0>:
   14090:	b4f0      	push	{r4, r5, r6, r7}
   14092:	2400      	movs	r4, #0
   14094:	00c9      	lsls	r1, r1, #3
   14096:	4626      	mov	r6, r4
   14098:	4627      	mov	r7, r4
   1409a:	f101 3cff 	add.w	ip, r1, #4294967295
   1409e:	e006      	b.n	140ae <LLF_RND_RepetitionCounterTest.part.0+0x1e>
   140a0:	429f      	cmp	r7, r3
   140a2:	d015      	beq.n	140d0 <LLF_RND_RepetitionCounterTest.part.0+0x40>
   140a4:	2601      	movs	r6, #1
   140a6:	4565      	cmp	r5, ip
   140a8:	d818      	bhi.n	140dc <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   140aa:	462c      	mov	r4, r5
   140ac:	461f      	mov	r7, r3
   140ae:	0963      	lsrs	r3, r4, #5
   140b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   140b4:	f004 011f 	and.w	r1, r4, #31
   140b8:	40cb      	lsrs	r3, r1
   140ba:	291f      	cmp	r1, #31
   140bc:	f104 0501 	add.w	r5, r4, #1
   140c0:	bf18      	it	ne
   140c2:	f003 0301 	andne.w	r3, r3, #1
   140c6:	2c00      	cmp	r4, #0
   140c8:	d1ea      	bne.n	140a0 <LLF_RND_RepetitionCounterTest.part.0+0x10>
   140ca:	2601      	movs	r6, #1
   140cc:	4635      	mov	r5, r6
   140ce:	e7ec      	b.n	140aa <LLF_RND_RepetitionCounterTest.part.0+0x1a>
   140d0:	3601      	adds	r6, #1
   140d2:	4296      	cmp	r6, r2
   140d4:	d1e7      	bne.n	140a6 <LLF_RND_RepetitionCounterTest.part.0+0x16>
   140d6:	4803      	ldr	r0, [pc, #12]	; (140e4 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
   140d8:	bcf0      	pop	{r4, r5, r6, r7}
   140da:	4770      	bx	lr
   140dc:	2000      	movs	r0, #0
   140de:	bcf0      	pop	{r4, r5, r6, r7}
   140e0:	4770      	bx	lr
   140e2:	bf00      	nop
   140e4:	00f10c36 	.word	0x00f10c36

000140e8 <LLF_RND_AdaptiveProportionTest>:
   140e8:	2800      	cmp	r0, #0
   140ea:	d05f      	beq.n	141ac <LLF_RND_AdaptiveProportionTest+0xc4>
   140ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   140f0:	1e4c      	subs	r4, r1, #1
   140f2:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   140f6:	d226      	bcs.n	14146 <LLF_RND_AdaptiveProportionTest+0x5e>
   140f8:	b32b      	cbz	r3, 14146 <LLF_RND_AdaptiveProportionTest+0x5e>
   140fa:	b322      	cbz	r2, 14146 <LLF_RND_AdaptiveProportionTest+0x5e>
   140fc:	00cc      	lsls	r4, r1, #3
   140fe:	2b01      	cmp	r3, #1
   14100:	f104 3eff 	add.w	lr, r4, #4294967295
   14104:	d02f      	beq.n	14166 <LLF_RND_AdaptiveProportionTest+0x7e>
   14106:	2100      	movs	r1, #0
   14108:	468c      	mov	ip, r1
   1410a:	460f      	mov	r7, r1
   1410c:	460d      	mov	r5, r1
   1410e:	f103 38ff 	add.w	r8, r3, #4294967295
   14112:	094c      	lsrs	r4, r1, #5
   14114:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   14118:	f001 061f 	and.w	r6, r1, #31
   1411c:	40f4      	lsrs	r4, r6
   1411e:	2e1f      	cmp	r6, #31
   14120:	bf18      	it	ne
   14122:	f004 0401 	andne.w	r4, r4, #1
   14126:	b921      	cbnz	r1, 14132 <LLF_RND_AdaptiveProportionTest+0x4a>
   14128:	2501      	movs	r5, #1
   1412a:	46ac      	mov	ip, r5
   1412c:	4629      	mov	r1, r5
   1412e:	4627      	mov	r7, r4
   14130:	e7ef      	b.n	14112 <LLF_RND_AdaptiveProportionTest+0x2a>
   14132:	42ab      	cmp	r3, r5
   14134:	d013      	beq.n	1415e <LLF_RND_AdaptiveProportionTest+0x76>
   14136:	42a7      	cmp	r7, r4
   14138:	d101      	bne.n	1413e <LLF_RND_AdaptiveProportionTest+0x56>
   1413a:	f10c 0c01 	add.w	ip, ip, #1
   1413e:	4545      	cmp	r5, r8
   14140:	d104      	bne.n	1414c <LLF_RND_AdaptiveProportionTest+0x64>
   14142:	4562      	cmp	r2, ip
   14144:	d202      	bcs.n	1414c <LLF_RND_AdaptiveProportionTest+0x64>
   14146:	481a      	ldr	r0, [pc, #104]	; (141b0 <LLF_RND_AdaptiveProportionTest+0xc8>)
   14148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1414c:	463c      	mov	r4, r7
   1414e:	3101      	adds	r1, #1
   14150:	458e      	cmp	lr, r1
   14152:	f105 0501 	add.w	r5, r5, #1
   14156:	d2ea      	bcs.n	1412e <LLF_RND_AdaptiveProportionTest+0x46>
   14158:	2000      	movs	r0, #0
   1415a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1415e:	2500      	movs	r5, #0
   14160:	f04f 0c01 	mov.w	ip, #1
   14164:	e7f3      	b.n	1414e <LLF_RND_AdaptiveProportionTest+0x66>
   14166:	2600      	movs	r6, #0
   14168:	46b4      	mov	ip, r6
   1416a:	4637      	mov	r7, r6
   1416c:	4631      	mov	r1, r6
   1416e:	094b      	lsrs	r3, r1, #5
   14170:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   14174:	f001 051f 	and.w	r5, r1, #31
   14178:	40eb      	lsrs	r3, r5
   1417a:	2d1f      	cmp	r5, #31
   1417c:	bf18      	it	ne
   1417e:	f003 0301 	andne.w	r3, r3, #1
   14182:	b139      	cbz	r1, 14194 <LLF_RND_AdaptiveProportionTest+0xac>
   14184:	b95f      	cbnz	r7, 1419e <LLF_RND_AdaptiveProportionTest+0xb6>
   14186:	459c      	cmp	ip, r3
   14188:	d001      	beq.n	1418e <LLF_RND_AdaptiveProportionTest+0xa6>
   1418a:	4663      	mov	r3, ip
   1418c:	e008      	b.n	141a0 <LLF_RND_AdaptiveProportionTest+0xb8>
   1418e:	4663      	mov	r3, ip
   14190:	3601      	adds	r6, #1
   14192:	e005      	b.n	141a0 <LLF_RND_AdaptiveProportionTest+0xb8>
   14194:	2601      	movs	r6, #1
   14196:	4631      	mov	r1, r6
   14198:	469c      	mov	ip, r3
   1419a:	2701      	movs	r7, #1
   1419c:	e7e7      	b.n	1416e <LLF_RND_AdaptiveProportionTest+0x86>
   1419e:	463e      	mov	r6, r7
   141a0:	42b2      	cmp	r2, r6
   141a2:	d3d0      	bcc.n	14146 <LLF_RND_AdaptiveProportionTest+0x5e>
   141a4:	3101      	adds	r1, #1
   141a6:	42a1      	cmp	r1, r4
   141a8:	d1f6      	bne.n	14198 <LLF_RND_AdaptiveProportionTest+0xb0>
   141aa:	e7d5      	b.n	14158 <LLF_RND_AdaptiveProportionTest+0x70>
   141ac:	4800      	ldr	r0, [pc, #0]	; (141b0 <LLF_RND_AdaptiveProportionTest+0xc8>)
   141ae:	4770      	bx	lr
   141b0:	00f10c37 	.word	0x00f10c37

000141b4 <getTrngSource>:
   141b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141b8:	b08d      	sub	sp, #52	; 0x34
   141ba:	9e18      	ldr	r6, [sp, #96]	; 0x60
   141bc:	4607      	mov	r7, r0
   141be:	460c      	mov	r4, r1
   141c0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   141c2:	2e00      	cmp	r6, #0
   141c4:	d14c      	bne.n	14260 <getTrngSource+0xac>
   141c6:	f8d1 b010 	ldr.w	fp, [r1, #16]
   141ca:	2100      	movs	r1, #0
   141cc:	601d      	str	r5, [r3, #0]
   141ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
   141d0:	6019      	str	r1, [r3, #0]
   141d2:	2a00      	cmp	r2, #0
   141d4:	f000 811e 	beq.w	14414 <getTrngSource+0x260>
   141d8:	4a9a      	ldr	r2, [pc, #616]	; (14444 <getTrngSource+0x290>)
   141da:	4b9b      	ldr	r3, [pc, #620]	; (14448 <getTrngSource+0x294>)
   141dc:	6811      	ldr	r1, [r2, #0]
   141de:	6a62      	ldr	r2, [r4, #36]	; 0x24
   141e0:	681b      	ldr	r3, [r3, #0]
   141e2:	429a      	cmp	r2, r3
   141e4:	d147      	bne.n	14276 <getTrngSource+0xc2>
   141e6:	290a      	cmp	r1, #10
   141e8:	d145      	bne.n	14276 <getTrngSource+0xc2>
   141ea:	78fb      	ldrb	r3, [r7, #3]
   141ec:	9304      	str	r3, [sp, #16]
   141ee:	2304      	movs	r3, #4
   141f0:	46b8      	mov	r8, r7
   141f2:	9302      	str	r3, [sp, #8]
   141f4:	4b95      	ldr	r3, [pc, #596]	; (1444c <getTrngSource+0x298>)
   141f6:	fba3 230b 	umull	r2, r3, r3, fp
   141fa:	ea4f 0a93 	mov.w	sl, r3, lsr #2
   141fe:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   14202:	f105 0208 	add.w	r2, r5, #8
   14206:	9203      	str	r2, [sp, #12]
   14208:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
   1420c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1420e:	f8c3 b000 	str.w	fp, [r3]
   14212:	f1bb 0f00 	cmp.w	fp, #0
   14216:	f000 80c3 	beq.w	143a0 <getTrngSource+0x1ec>
   1421a:	465d      	mov	r5, fp
   1421c:	f04f 0900 	mov.w	r9, #0
   14220:	9e03      	ldr	r6, [sp, #12]
   14222:	f000 f9c7 	bl	145b4 <LLF_RND_TurnOffTrng>
   14226:	2300      	movs	r3, #0
   14228:	9305      	str	r3, [sp, #20]
   1422a:	f1b8 0f00 	cmp.w	r8, #0
   1422e:	f000 80e5 	beq.w	143fc <getTrngSource+0x248>
   14232:	2c00      	cmp	r4, #0
   14234:	f000 80e2 	beq.w	143fc <getTrngSource+0x248>
   14238:	9b04      	ldr	r3, [sp, #16]
   1423a:	2b00      	cmp	r3, #0
   1423c:	f000 80dc 	beq.w	143f8 <getTrngSource+0x244>
   14240:	4620      	mov	r0, r4
   14242:	a904      	add	r1, sp, #16
   14244:	f000 f9a6 	bl	14594 <LLF_RND_GetFastestRosc>
   14248:	b1b8      	cbz	r0, 1427a <getTrngSource+0xc6>
   1424a:	4b81      	ldr	r3, [pc, #516]	; (14450 <getTrngSource+0x29c>)
   1424c:	4298      	cmp	r0, r3
   1424e:	f040 80a7 	bne.w	143a0 <getTrngSource+0x1ec>
   14252:	9002      	str	r0, [sp, #8]
   14254:	f000 f9ae 	bl	145b4 <LLF_RND_TurnOffTrng>
   14258:	9802      	ldr	r0, [sp, #8]
   1425a:	b00d      	add	sp, #52	; 0x34
   1425c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14260:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   14264:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   14268:	3001      	adds	r0, #1
   1426a:	bf0c      	ite	eq
   1426c:	f44f 7b04 	moveq.w	fp, #528	; 0x210
   14270:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
   14274:	e7a9      	b.n	141ca <getTrngSource+0x16>
   14276:	4877      	ldr	r0, [pc, #476]	; (14454 <getTrngSource+0x2a0>)
   14278:	e7eb      	b.n	14252 <getTrngSource+0x9e>
   1427a:	4621      	mov	r1, r4
   1427c:	9804      	ldr	r0, [sp, #16]
   1427e:	f000 f96b 	bl	14558 <LLF_RND_GetRoscSampleCnt>
   14282:	2800      	cmp	r0, #0
   14284:	d1e1      	bne.n	1424a <getTrngSource+0x96>
   14286:	9f04      	ldr	r7, [sp, #16]
   14288:	2f08      	cmp	r7, #8
   1428a:	f000 80b9 	beq.w	14400 <getTrngSource+0x24c>
   1428e:	2f04      	cmp	r7, #4
   14290:	f000 80b8 	beq.w	14404 <getTrngSource+0x250>
   14294:	f1a7 0702 	sub.w	r7, r7, #2
   14298:	fab7 f787 	clz	r7, r7
   1429c:	097f      	lsrs	r7, r7, #5
   1429e:	2301      	movs	r3, #1
   142a0:	4619      	mov	r1, r3
   142a2:	486d      	ldr	r0, [pc, #436]	; (14458 <getTrngSource+0x2a4>)
   142a4:	6003      	str	r3, [r0, #0]
   142a6:	f840 3c84 	str.w	r3, [r0, #-132]
   142aa:	4b6b      	ldr	r3, [pc, #428]	; (14458 <getTrngSource+0x2a4>)
   142ac:	4866      	ldr	r0, [pc, #408]	; (14448 <getTrngSource+0x294>)
   142ae:	6019      	str	r1, [r3, #0]
   142b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   142b2:	6003      	str	r3, [r0, #0]
   142b4:	6800      	ldr	r0, [r0, #0]
   142b6:	4283      	cmp	r3, r0
   142b8:	d1f7      	bne.n	142aa <getTrngSource+0xf6>
   142ba:	2300      	movs	r3, #0
   142bc:	4a67      	ldr	r2, [pc, #412]	; (1445c <getTrngSource+0x2a8>)
   142be:	f04f 30ff 	mov.w	r0, #4294967295
   142c2:	6013      	str	r3, [r2, #0]
   142c4:	f7ff fb48 	bl	13958 <CC_HalClearInterruptBit>
   142c8:	2300      	movs	r3, #0
   142ca:	4965      	ldr	r1, [pc, #404]	; (14460 <getTrngSource+0x2ac>)
   142cc:	4618      	mov	r0, r3
   142ce:	4b65      	ldr	r3, [pc, #404]	; (14464 <getTrngSource+0x2b0>)
   142d0:	6019      	str	r1, [r3, #0]
   142d2:	f7ff fb4f 	bl	13974 <CC_HalMaskInterrupt>
   142d6:	4964      	ldr	r1, [pc, #400]	; (14468 <getTrngSource+0x2b4>)
   142d8:	4b64      	ldr	r3, [pc, #400]	; (1446c <getTrngSource+0x2b8>)
   142da:	600f      	str	r7, [r1, #0]
   142dc:	6818      	ldr	r0, [r3, #0]
   142de:	4f5b      	ldr	r7, [pc, #364]	; (1444c <getTrngSource+0x298>)
   142e0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   142e4:	f7ff fb46 	bl	13974 <CC_HalMaskInterrupt>
   142e8:	210a      	movs	r1, #10
   142ea:	2201      	movs	r2, #1
   142ec:	4b55      	ldr	r3, [pc, #340]	; (14444 <getTrngSource+0x290>)
   142ee:	4860      	ldr	r0, [pc, #384]	; (14470 <getTrngSource+0x2bc>)
   142f0:	6019      	str	r1, [r3, #0]
   142f2:	6921      	ldr	r1, [r4, #16]
   142f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   142f6:	fba7 c101 	umull	ip, r1, r7, r1
   142fa:	0909      	lsrs	r1, r1, #4
   142fc:	fb03 f301 	mul.w	r3, r3, r1
   14300:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14304:	03db      	lsls	r3, r3, #15
   14306:	099b      	lsrs	r3, r3, #6
   14308:	6003      	str	r3, [r0, #0]
   1430a:	4b54      	ldr	r3, [pc, #336]	; (1445c <getTrngSource+0x2a8>)
   1430c:	a805      	add	r0, sp, #20
   1430e:	601a      	str	r2, [r3, #0]
   14310:	9904      	ldr	r1, [sp, #16]
   14312:	f8d8 2000 	ldr.w	r2, [r8]
   14316:	020b      	lsls	r3, r1, #8
   14318:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1431c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   14320:	4313      	orrs	r3, r2
   14322:	f8c8 3000 	str.w	r3, [r8]
   14326:	f000 f907 	bl	14538 <LLF_RND_WaitRngInterrupt>
   1432a:	2800      	cmp	r0, #0
   1432c:	d18d      	bne.n	1424a <getTrngSource+0x96>
   1432e:	4b51      	ldr	r3, [pc, #324]	; (14474 <getTrngSource+0x2c0>)
   14330:	fba7 2705 	umull	r2, r7, r7, r5
   14334:	681a      	ldr	r2, [r3, #0]
   14336:	3314      	adds	r3, #20
   14338:	9206      	str	r2, [sp, #24]
   1433a:	f853 2c10 	ldr.w	r2, [r3, #-16]
   1433e:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   14342:	9207      	str	r2, [sp, #28]
   14344:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   14348:	9208      	str	r2, [sp, #32]
   1434a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   1434e:	9209      	str	r2, [sp, #36]	; 0x24
   14350:	f853 2c04 	ldr.w	r2, [r3, #-4]
   14354:	920a      	str	r2, [sp, #40]	; 0x28
   14356:	681b      	ldr	r3, [r3, #0]
   14358:	930b      	str	r3, [sp, #44]	; 0x2c
   1435a:	d102      	bne.n	14362 <getTrngSource+0x1ae>
   1435c:	f1ba 0f00 	cmp.w	sl, #0
   14360:	d141      	bne.n	143e6 <getTrngSource+0x232>
   14362:	2218      	movs	r2, #24
   14364:	4630      	mov	r0, r6
   14366:	eb0d 0102 	add.w	r1, sp, r2
   1436a:	f7ff fa19 	bl	137a0 <CC_PalMemCopyPlat>
   1436e:	3d18      	subs	r5, #24
   14370:	3618      	adds	r6, #24
   14372:	f109 0901 	add.w	r9, r9, #1
   14376:	2d00      	cmp	r5, #0
   14378:	f47f af53 	bne.w	14222 <getTrngSource+0x6e>
   1437c:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
   14380:	d85d      	bhi.n	1443e <getTrngSource+0x28a>
   14382:	9d03      	ldr	r5, [sp, #12]
   14384:	4659      	mov	r1, fp
   14386:	4628      	mov	r0, r5
   14388:	6962      	ldr	r2, [r4, #20]
   1438a:	f7ff fe81 	bl	14090 <LLF_RND_RepetitionCounterTest.part.0>
   1438e:	2800      	cmp	r0, #0
   14390:	d04b      	beq.n	1442a <getTrngSource+0x276>
   14392:	2300      	movs	r3, #0
   14394:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14396:	6013      	str	r3, [r2, #0]
   14398:	4b2d      	ldr	r3, [pc, #180]	; (14450 <getTrngSource+0x29c>)
   1439a:	4298      	cmp	r0, r3
   1439c:	f43f af59 	beq.w	14252 <getTrngSource+0x9e>
   143a0:	9d04      	ldr	r5, [sp, #16]
   143a2:	2d08      	cmp	r5, #8
   143a4:	d034      	beq.n	14410 <getTrngSource+0x25c>
   143a6:	2200      	movs	r2, #0
   143a8:	ab04      	add	r3, sp, #16
   143aa:	4621      	mov	r1, r4
   143ac:	4640      	mov	r0, r8
   143ae:	006d      	lsls	r5, r5, #1
   143b0:	9200      	str	r2, [sp, #0]
   143b2:	9504      	str	r5, [sp, #16]
   143b4:	f7ff fdc2 	bl	13f3c <startTrngHW>
   143b8:	4b2f      	ldr	r3, [pc, #188]	; (14478 <getTrngSource+0x2c4>)
   143ba:	4298      	cmp	r0, r3
   143bc:	d024      	beq.n	14408 <getTrngSource+0x254>
   143be:	2800      	cmp	r0, #0
   143c0:	f47f af47 	bne.w	14252 <getTrngSource+0x9e>
   143c4:	f8d8 2000 	ldr.w	r2, [r8]
   143c8:	0a13      	lsrs	r3, r2, #8
   143ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   143ce:	4313      	orrs	r3, r2
   143d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   143d4:	f8c8 3000 	str.w	r3, [r8]
   143d8:	9b02      	ldr	r3, [sp, #8]
   143da:	3b01      	subs	r3, #1
   143dc:	9302      	str	r3, [sp, #8]
   143de:	f47f af15 	bne.w	1420c <getTrngSource+0x58>
   143e2:	2000      	movs	r0, #0
   143e4:	e735      	b.n	14252 <getTrngSource+0x9e>
   143e6:	4630      	mov	r0, r6
   143e8:	4652      	mov	r2, sl
   143ea:	a906      	add	r1, sp, #24
   143ec:	f7ff f9d8 	bl	137a0 <CC_PalMemCopyPlat>
   143f0:	eba5 050a 	sub.w	r5, r5, sl
   143f4:	4456      	add	r6, sl
   143f6:	e7bc      	b.n	14372 <getTrngSource+0x1be>
   143f8:	481f      	ldr	r0, [pc, #124]	; (14478 <getTrngSource+0x2c4>)
   143fa:	e726      	b.n	1424a <getTrngSource+0x96>
   143fc:	481f      	ldr	r0, [pc, #124]	; (1447c <getTrngSource+0x2c8>)
   143fe:	e724      	b.n	1424a <getTrngSource+0x96>
   14400:	2703      	movs	r7, #3
   14402:	e74c      	b.n	1429e <getTrngSource+0xea>
   14404:	2702      	movs	r7, #2
   14406:	e74a      	b.n	1429e <getTrngSource+0xea>
   14408:	6a23      	ldr	r3, [r4, #32]
   1440a:	2b00      	cmp	r3, #0
   1440c:	f43f af21 	beq.w	14252 <getTrngSource+0x9e>
   14410:	481b      	ldr	r0, [pc, #108]	; (14480 <getTrngSource+0x2cc>)
   14412:	e71e      	b.n	14252 <getTrngSource+0x9e>
   14414:	2201      	movs	r2, #1
   14416:	4621      	mov	r1, r4
   14418:	4638      	mov	r0, r7
   1441a:	9600      	str	r6, [sp, #0]
   1441c:	ab04      	add	r3, sp, #16
   1441e:	f7ff fd8d 	bl	13f3c <startTrngHW>
   14422:	2800      	cmp	r0, #0
   14424:	f43f aee3 	beq.w	141ee <getTrngSource+0x3a>
   14428:	e713      	b.n	14252 <getTrngSource+0x9e>
   1442a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1442e:	4659      	mov	r1, fp
   14430:	4628      	mov	r0, r5
   14432:	69a2      	ldr	r2, [r4, #24]
   14434:	f7ff fe58 	bl	140e8 <LLF_RND_AdaptiveProportionTest>
   14438:	2800      	cmp	r0, #0
   1443a:	d1aa      	bne.n	14392 <getTrngSource+0x1de>
   1443c:	e7d1      	b.n	143e2 <getTrngSource+0x22e>
   1443e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14440:	601d      	str	r5, [r3, #0]
   14442:	e7ad      	b.n	143a0 <getTrngSource+0x1ec>
   14444:	50841138 	.word	0x50841138
   14448:	50841130 	.word	0x50841130
   1444c:	aaaaaaab 	.word	0xaaaaaaab
   14450:	00f10c02 	.word	0x00f10c02
   14454:	00f10c30 	.word	0x00f10c30
   14458:	508411c4 	.word	0x508411c4
   1445c:	5084112c 	.word	0x5084112c
   14460:	0ffffffe 	.word	0x0ffffffe
   14464:	50841100 	.word	0x50841100
   14468:	5084110c 	.word	0x5084110c
   1446c:	50841a04 	.word	0x50841a04
   14470:	508411d8 	.word	0x508411d8
   14474:	50841114 	.word	0x50841114
   14478:	00f10c31 	.word	0x00f10c31
   1447c:	00f10c35 	.word	0x00f10c35
   14480:	00f10c32 	.word	0x00f10c32

00014484 <LLF_RND_GetTrngSource>:
   14484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14488:	4e1f      	ldr	r6, [pc, #124]	; (14508 <LLF_RND_GetTrngSource+0x84>)
   1448a:	b084      	sub	sp, #16
   1448c:	4604      	mov	r4, r0
   1448e:	460d      	mov	r5, r1
   14490:	6830      	ldr	r0, [r6, #0]
   14492:	f04f 31ff 	mov.w	r1, #4294967295
   14496:	4690      	mov	r8, r2
   14498:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1449a:	f7ff f9e7 	bl	1386c <CC_PalMutexLock>
   1449e:	b9d8      	cbnz	r0, 144d8 <LLF_RND_GetTrngSource+0x54>
   144a0:	2000      	movs	r0, #0
   144a2:	f7ff fa13 	bl	138cc <CC_PalPowerSaveModeSelect>
   144a6:	b9f8      	cbnz	r0, 144e8 <LLF_RND_GetTrngSource+0x64>
   144a8:	2300      	movs	r3, #0
   144aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   144ac:	4620      	mov	r0, r4
   144ae:	9200      	str	r2, [sp, #0]
   144b0:	9302      	str	r3, [sp, #8]
   144b2:	4642      	mov	r2, r8
   144b4:	4629      	mov	r1, r5
   144b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   144b8:	9701      	str	r7, [sp, #4]
   144ba:	f7ff fe7b 	bl	141b4 <getTrngSource>
   144be:	4604      	mov	r4, r0
   144c0:	2001      	movs	r0, #1
   144c2:	f7ff fa03 	bl	138cc <CC_PalPowerSaveModeSelect>
   144c6:	b9d0      	cbnz	r0, 144fe <LLF_RND_GetTrngSource+0x7a>
   144c8:	6830      	ldr	r0, [r6, #0]
   144ca:	f7ff f9d7 	bl	1387c <CC_PalMutexUnlock>
   144ce:	b978      	cbnz	r0, 144f0 <LLF_RND_GetTrngSource+0x6c>
   144d0:	4620      	mov	r0, r4
   144d2:	b004      	add	sp, #16
   144d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   144d8:	480c      	ldr	r0, [pc, #48]	; (1450c <LLF_RND_GetTrngSource+0x88>)
   144da:	f7ff fb5f 	bl	13b9c <CC_PalAbort>
   144de:	2000      	movs	r0, #0
   144e0:	f7ff f9f4 	bl	138cc <CC_PalPowerSaveModeSelect>
   144e4:	2800      	cmp	r0, #0
   144e6:	d0df      	beq.n	144a8 <LLF_RND_GetTrngSource+0x24>
   144e8:	4809      	ldr	r0, [pc, #36]	; (14510 <LLF_RND_GetTrngSource+0x8c>)
   144ea:	f7ff fb57 	bl	13b9c <CC_PalAbort>
   144ee:	e7db      	b.n	144a8 <LLF_RND_GetTrngSource+0x24>
   144f0:	4808      	ldr	r0, [pc, #32]	; (14514 <LLF_RND_GetTrngSource+0x90>)
   144f2:	f7ff fb53 	bl	13b9c <CC_PalAbort>
   144f6:	4620      	mov	r0, r4
   144f8:	b004      	add	sp, #16
   144fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   144fe:	4806      	ldr	r0, [pc, #24]	; (14518 <LLF_RND_GetTrngSource+0x94>)
   14500:	f7ff fb4c 	bl	13b9c <CC_PalAbort>
   14504:	e7e0      	b.n	144c8 <LLF_RND_GetTrngSource+0x44>
   14506:	bf00      	nop
   14508:	2000006c 	.word	0x2000006c
   1450c:	00015584 	.word	0x00015584
   14510:	000155b4 	.word	0x000155b4
   14514:	0001559c 	.word	0x0001559c
   14518:	000155d4 	.word	0x000155d4

0001451c <LLF_RND_RunTrngStartupTest>:
   1451c:	b510      	push	{r4, lr}
   1451e:	2401      	movs	r4, #1
   14520:	b086      	sub	sp, #24
   14522:	ab05      	add	r3, sp, #20
   14524:	e9cd 2401 	strd	r2, r4, [sp, #4]
   14528:	9300      	str	r3, [sp, #0]
   1452a:	2200      	movs	r2, #0
   1452c:	ab04      	add	r3, sp, #16
   1452e:	f7ff fe41 	bl	141b4 <getTrngSource>
   14532:	b006      	add	sp, #24
   14534:	bd10      	pop	{r4, pc}
   14536:	bf00      	nop

00014538 <LLF_RND_WaitRngInterrupt>:
   14538:	4601      	mov	r1, r0
   1453a:	b508      	push	{r3, lr}
   1453c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   14540:	f7ff fa1e 	bl	13980 <CC_HalWaitInterruptRND>
   14544:	2300      	movs	r3, #0
   14546:	4902      	ldr	r1, [pc, #8]	; (14550 <LLF_RND_WaitRngInterrupt+0x18>)
   14548:	4a02      	ldr	r2, [pc, #8]	; (14554 <LLF_RND_WaitRngInterrupt+0x1c>)
   1454a:	600b      	str	r3, [r1, #0]
   1454c:	6013      	str	r3, [r2, #0]
   1454e:	bd08      	pop	{r3, pc}
   14550:	508411c8 	.word	0x508411c8
   14554:	5084112c 	.word	0x5084112c

00014558 <LLF_RND_GetRoscSampleCnt>:
   14558:	3801      	subs	r0, #1
   1455a:	2807      	cmp	r0, #7
   1455c:	d805      	bhi.n	1456a <LLF_RND_GetRoscSampleCnt+0x12>
   1455e:	e8df f000 	tbb	[pc, r0]
   14562:	0e0a      	.short	0x0e0a
   14564:	04041204 	.word	0x04041204
   14568:	0604      	.short	0x0604
   1456a:	4809      	ldr	r0, [pc, #36]	; (14590 <LLF_RND_GetRoscSampleCnt+0x38>)
   1456c:	4770      	bx	lr
   1456e:	68cb      	ldr	r3, [r1, #12]
   14570:	2000      	movs	r0, #0
   14572:	624b      	str	r3, [r1, #36]	; 0x24
   14574:	4770      	bx	lr
   14576:	680b      	ldr	r3, [r1, #0]
   14578:	2000      	movs	r0, #0
   1457a:	624b      	str	r3, [r1, #36]	; 0x24
   1457c:	4770      	bx	lr
   1457e:	684b      	ldr	r3, [r1, #4]
   14580:	2000      	movs	r0, #0
   14582:	624b      	str	r3, [r1, #36]	; 0x24
   14584:	4770      	bx	lr
   14586:	688b      	ldr	r3, [r1, #8]
   14588:	2000      	movs	r0, #0
   1458a:	624b      	str	r3, [r1, #36]	; 0x24
   1458c:	4770      	bx	lr
   1458e:	bf00      	nop
   14590:	00f10c31 	.word	0x00f10c31

00014594 <LLF_RND_GetFastestRosc>:
   14594:	680b      	ldr	r3, [r1, #0]
   14596:	e002      	b.n	1459e <LLF_RND_GetFastestRosc+0xa>
   14598:	2b08      	cmp	r3, #8
   1459a:	600b      	str	r3, [r1, #0]
   1459c:	d806      	bhi.n	145ac <LLF_RND_GetFastestRosc+0x18>
   1459e:	6a02      	ldr	r2, [r0, #32]
   145a0:	4213      	tst	r3, r2
   145a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
   145a6:	d0f7      	beq.n	14598 <LLF_RND_GetFastestRosc+0x4>
   145a8:	2000      	movs	r0, #0
   145aa:	4770      	bx	lr
   145ac:	4800      	ldr	r0, [pc, #0]	; (145b0 <LLF_RND_GetFastestRosc+0x1c>)
   145ae:	4770      	bx	lr
   145b0:	00f10c31 	.word	0x00f10c31

000145b4 <LLF_RND_TurnOffTrng>:
   145b4:	2300      	movs	r3, #0
   145b6:	4904      	ldr	r1, [pc, #16]	; (145c8 <LLF_RND_TurnOffTrng+0x14>)
   145b8:	4a04      	ldr	r2, [pc, #16]	; (145cc <LLF_RND_TurnOffTrng+0x18>)
   145ba:	600b      	str	r3, [r1, #0]
   145bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   145c0:	6013      	str	r3, [r2, #0]
   145c2:	f7ff b9c9 	b.w	13958 <CC_HalClearInterruptBit>
   145c6:	bf00      	nop
   145c8:	5084112c 	.word	0x5084112c
   145cc:	508411c4 	.word	0x508411c4

000145d0 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
   145d0:	b508      	push	{r3, lr}
	spm_config();
   145d2:	f7fc ff11 	bl	113f8 <spm_config>
	spm_jump();
}
   145d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   145da:	f7fc bea1 	b.w	11320 <spm_jump>

000145de <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   145de:	b160      	cbz	r0, 145fa <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   145e0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   145e2:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   145e6:	2b01      	cmp	r3, #1
   145e8:	d003      	beq.n	145f2 <sys_notify_validate+0x14>
   145ea:	2b03      	cmp	r3, #3
   145ec:	d105      	bne.n	145fa <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   145ee:	6803      	ldr	r3, [r0, #0]
   145f0:	b11b      	cbz	r3, 145fa <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   145f2:	2300      	movs	r3, #0
   145f4:	6083      	str	r3, [r0, #8]
   145f6:	4618      	mov	r0, r3
   145f8:	4770      	bx	lr
		return -EINVAL;
   145fa:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   145fe:	4770      	bx	lr

00014600 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   14600:	2200      	movs	r2, #0
   14602:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   14604:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   14606:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
   1460a:	2b03      	cmp	r3, #3
	sys_notify_generic_callback rv = 0;
   1460c:	bf14      	ite	ne
   1460e:	4613      	movne	r3, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   14610:	6803      	ldreq	r3, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   14612:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   14614:	4618      	mov	r0, r3
   14616:	4770      	bx	lr

00014618 <arch_printk_char_out>:
}
   14618:	2000      	movs	r0, #0
   1461a:	4770      	bx	lr

0001461c <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
   1461c:	b40f      	push	{r0, r1, r2, r3}
   1461e:	b507      	push	{r0, r1, r2, lr}
   14620:	a904      	add	r1, sp, #16
   14622:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14626:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   14628:	f7fc fa3a 	bl	10aa0 <vprintk>
	}
	va_end(ap);
}
   1462c:	b003      	add	sp, #12
   1462e:	f85d eb04 	ldr.w	lr, [sp], #4
   14632:	b004      	add	sp, #16
   14634:	4770      	bx	lr

00014636 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14636:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   14638:	f013 0307 	ands.w	r3, r3, #7
   1463c:	d105      	bne.n	1464a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1463e:	6803      	ldr	r3, [r0, #0]
   14640:	2b00      	cmp	r3, #0
		evt = EVT_START;
   14642:	bf0c      	ite	eq
   14644:	2000      	moveq	r0, #0
   14646:	2003      	movne	r0, #3
   14648:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1464a:	2b02      	cmp	r3, #2
   1464c:	d105      	bne.n	1465a <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   1464e:	8b43      	ldrh	r3, [r0, #26]
   14650:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   14652:	bf14      	ite	ne
   14654:	2000      	movne	r0, #0
   14656:	2004      	moveq	r0, #4
   14658:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1465a:	2b01      	cmp	r3, #1
   1465c:	d105      	bne.n	1466a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1465e:	6803      	ldr	r3, [r0, #0]
   14660:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   14662:	bf0c      	ite	eq
   14664:	2000      	moveq	r0, #0
   14666:	2005      	movne	r0, #5
   14668:	4770      	bx	lr
	int evt = EVT_NOP;
   1466a:	2000      	movs	r0, #0
}
   1466c:	4770      	bx	lr

0001466e <notify_one>:
{
   1466e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14670:	460d      	mov	r5, r1
   14672:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   14674:	4619      	mov	r1, r3
   14676:	1d28      	adds	r0, r5, #4
{
   14678:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1467a:	9300      	str	r3, [sp, #0]
   1467c:	f7ff ffc0 	bl	14600 <sys_notify_finalize>
	if (cb) {
   14680:	4604      	mov	r4, r0
   14682:	b140      	cbz	r0, 14696 <notify_one+0x28>
		cb(mgr, cli, state, res);
   14684:	e9dd 3200 	ldrd	r3, r2, [sp]
   14688:	4629      	mov	r1, r5
   1468a:	4630      	mov	r0, r6
   1468c:	46a4      	mov	ip, r4
}
   1468e:	b002      	add	sp, #8
   14690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   14694:	4760      	bx	ip
}
   14696:	b002      	add	sp, #8
   14698:	bd70      	pop	{r4, r5, r6, pc}

0001469a <transition_complete>:
{
   1469a:	b410      	push	{r4}
	__asm__ volatile(
   1469c:	f04f 0420 	mov.w	r4, #32
   146a0:	f3ef 8211 	mrs	r2, BASEPRI
   146a4:	f384 8811 	msr	BASEPRI, r4
   146a8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   146ac:	6141      	str	r1, [r0, #20]
}
   146ae:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   146b2:	2101      	movs	r1, #1
   146b4:	f7fc ba02 	b.w	10abc <process_event>

000146b8 <validate_args>:
{
   146b8:	b510      	push	{r4, lr}
   146ba:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   146bc:	b140      	cbz	r0, 146d0 <validate_args+0x18>
   146be:	b139      	cbz	r1, 146d0 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   146c0:	1d08      	adds	r0, r1, #4
   146c2:	f7ff ff8c 	bl	145de <sys_notify_validate>
	if ((rv == 0)
   146c6:	b928      	cbnz	r0, 146d4 <validate_args+0x1c>
	    && ((cli->notify.flags
   146c8:	68a3      	ldr	r3, [r4, #8]
   146ca:	f033 0303 	bics.w	r3, r3, #3
   146ce:	d001      	beq.n	146d4 <validate_args+0x1c>
		rv = -EINVAL;
   146d0:	f06f 0015 	mvn.w	r0, #21
}
   146d4:	bd10      	pop	{r4, pc}

000146d6 <onoff_manager_init>:
{
   146d6:	b538      	push	{r3, r4, r5, lr}
   146d8:	460c      	mov	r4, r1
	if ((mgr == NULL)
   146da:	4605      	mov	r5, r0
   146dc:	b158      	cbz	r0, 146f6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   146de:	b151      	cbz	r1, 146f6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   146e0:	680b      	ldr	r3, [r1, #0]
   146e2:	b143      	cbz	r3, 146f6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   146e4:	684b      	ldr	r3, [r1, #4]
   146e6:	b133      	cbz	r3, 146f6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   146e8:	221c      	movs	r2, #28
   146ea:	2100      	movs	r1, #0
   146ec:	f000 faec 	bl	14cc8 <memset>
	return 0;
   146f0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   146f2:	612c      	str	r4, [r5, #16]
}
   146f4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   146f6:	f06f 0015 	mvn.w	r0, #21
   146fa:	e7fb      	b.n	146f4 <onoff_manager_init+0x1e>

000146fc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   146fc:	b570      	push	{r4, r5, r6, lr}
   146fe:	4604      	mov	r4, r0
   14700:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   14702:	f7ff ffd9 	bl	146b8 <validate_args>

	if (rv < 0) {
   14706:	1e05      	subs	r5, r0, #0
   14708:	db31      	blt.n	1476e <onoff_request+0x72>
   1470a:	f04f 0320 	mov.w	r3, #32
   1470e:	f3ef 8111 	mrs	r1, BASEPRI
   14712:	f383 8811 	msr	BASEPRI, r3
   14716:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1471a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1471e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14720:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   14722:	42ab      	cmp	r3, r5
   14724:	f000 0207 	and.w	r2, r0, #7
   14728:	d02e      	beq.n	14788 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1472a:	2a02      	cmp	r2, #2
   1472c:	d10e      	bne.n	1474c <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1472e:	3301      	adds	r3, #1
   14730:	8363      	strh	r3, [r4, #26]
	rv = state;
   14732:	4615      	mov	r5, r2
		notify = true;
   14734:	2301      	movs	r3, #1
	__asm__ volatile(
   14736:	f381 8811 	msr	BASEPRI, r1
   1473a:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1473e:	b1b3      	cbz	r3, 1476e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   14740:	2300      	movs	r3, #0
   14742:	4631      	mov	r1, r6
   14744:	4620      	mov	r0, r4
   14746:	f7ff ff92 	bl	1466e <notify_one>
   1474a:	e010      	b.n	1476e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1474c:	0783      	lsls	r3, r0, #30
   1474e:	d001      	beq.n	14754 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   14750:	2a06      	cmp	r2, #6
   14752:	d10e      	bne.n	14772 <onoff_request+0x76>
	parent->next = child;
   14754:	2300      	movs	r3, #0
   14756:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   14758:	6863      	ldr	r3, [r4, #4]
   1475a:	b993      	cbnz	r3, 14782 <onoff_request+0x86>
	list->head = node;
   1475c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   14760:	4615      	mov	r5, r2
   14762:	b962      	cbnz	r2, 1477e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   14764:	460a      	mov	r2, r1
   14766:	4620      	mov	r0, r4
   14768:	2102      	movs	r1, #2
   1476a:	f7fc f9a7 	bl	10abc <process_event>
		}
	}

	return rv;
}
   1476e:	4628      	mov	r0, r5
   14770:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   14772:	2a05      	cmp	r2, #5
   14774:	bf0c      	ite	eq
   14776:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   1477a:	f06f 0504 	mvnne.w	r5, #4
   1477e:	2300      	movs	r3, #0
   14780:	e7d9      	b.n	14736 <onoff_request+0x3a>
	parent->next = child;
   14782:	601e      	str	r6, [r3, #0]
	list->tail = node;
   14784:	6066      	str	r6, [r4, #4]
}
   14786:	e7eb      	b.n	14760 <onoff_request+0x64>
		rv = -EAGAIN;
   14788:	f06f 050a 	mvn.w	r5, #10
   1478c:	e7f7      	b.n	1477e <onoff_request+0x82>

0001478e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1478e:	4604      	mov	r4, r0
   14790:	b508      	push	{r3, lr}
   14792:	4608      	mov	r0, r1
   14794:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   14796:	461a      	mov	r2, r3
   14798:	47a0      	blx	r4
	return z_impl_k_current_get();
   1479a:	f7fe fdb9 	bl	13310 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1479e:	f7fd fab5 	bl	11d0c <z_impl_k_thread_abort>

000147a2 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   147a2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   147a4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   147a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   147ac:	bf2c      	ite	cs
   147ae:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   147b2:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   147b6:	4770      	bx	lr

000147b8 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   147b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   147bc:	6880      	ldr	r0, [r0, #8]
   147be:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   147c2:	bf2c      	ite	cs
   147c4:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   147c8:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   147cc:	4770      	bx	lr

000147ce <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   147ce:	2201      	movs	r2, #1
{
   147d0:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   147d2:	f7ff ffe6 	bl	147a2 <chunk_field>
}
   147d6:	0840      	lsrs	r0, r0, #1
   147d8:	bd08      	pop	{r3, pc}

000147da <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   147da:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   147dc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   147e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   147e4:	d308      	bcc.n	147f8 <set_chunk_used+0x1e>
		if (used) {
   147e6:	684b      	ldr	r3, [r1, #4]
   147e8:	b11a      	cbz	r2, 147f2 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   147ea:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   147ee:	604b      	str	r3, [r1, #4]
   147f0:	4770      	bx	lr
   147f2:	f023 0301 	bic.w	r3, r3, #1
   147f6:	e7fa      	b.n	147ee <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   147f8:	884b      	ldrh	r3, [r1, #2]
   147fa:	b11a      	cbz	r2, 14804 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   147fc:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   14800:	804b      	strh	r3, [r1, #2]
		}
	}
}
   14802:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   14804:	f023 0301 	bic.w	r3, r3, #1
   14808:	e7fa      	b.n	14800 <set_chunk_used+0x26>

0001480a <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1480a:	0053      	lsls	r3, r2, #1
   1480c:	2201      	movs	r2, #1
   1480e:	f7ff bfd3 	b.w	147b8 <chunk_set>

00014812 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   14812:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   14814:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   14816:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1481a:	bf2c      	ite	cs
   1481c:	2002      	movcs	r0, #2
   1481e:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   14820:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   14822:	fab0 f080 	clz	r0, r0
}
   14826:	f1c0 001f 	rsb	r0, r0, #31
   1482a:	4770      	bx	lr

0001482c <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1482c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14830:	4604      	mov	r4, r0
   14832:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   14834:	f7ff ffcb 	bl	147ce <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   14838:	68a3      	ldr	r3, [r4, #8]
   1483a:	4601      	mov	r1, r0
   1483c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14840:	d301      	bcc.n	14846 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   14842:	2801      	cmp	r0, #1
   14844:	d035      	beq.n	148b2 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   14846:	4620      	mov	r0, r4
   14848:	f7ff ffe3 	bl	14812 <bucket_idx>
	if (b->next == 0) {
   1484c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   14850:	6916      	ldr	r6, [r2, #16]
   14852:	b99e      	cbnz	r6, 1487c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   14854:	2301      	movs	r3, #1
   14856:	fa03 f000 	lsl.w	r0, r3, r0
   1485a:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1485c:	4629      	mov	r1, r5
   1485e:	4303      	orrs	r3, r0
   14860:	60e3      	str	r3, [r4, #12]
   14862:	4620      	mov	r0, r4
		b->next = c;
   14864:	6115      	str	r5, [r2, #16]
   14866:	462b      	mov	r3, r5
   14868:	2202      	movs	r2, #2
   1486a:	f7ff ffa5 	bl	147b8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1486e:	2203      	movs	r2, #3
   14870:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   14872:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   14874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14878:	f7ff bf9e 	b.w	147b8 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1487c:	2202      	movs	r2, #2
   1487e:	4631      	mov	r1, r6
   14880:	4620      	mov	r0, r4
   14882:	f7ff ff8e 	bl	147a2 <chunk_field>
   14886:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   14888:	4603      	mov	r3, r0
   1488a:	2202      	movs	r2, #2
   1488c:	4629      	mov	r1, r5
   1488e:	4620      	mov	r0, r4
   14890:	f7ff ff92 	bl	147b8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   14894:	4633      	mov	r3, r6
   14896:	2203      	movs	r2, #3
   14898:	4629      	mov	r1, r5
   1489a:	4620      	mov	r0, r4
   1489c:	f7ff ff8c 	bl	147b8 <chunk_set>
   148a0:	2203      	movs	r2, #3
   148a2:	4639      	mov	r1, r7
   148a4:	462b      	mov	r3, r5
   148a6:	4620      	mov	r0, r4
   148a8:	f7ff ff86 	bl	147b8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   148ac:	2202      	movs	r2, #2
   148ae:	4631      	mov	r1, r6
   148b0:	e7df      	b.n	14872 <free_list_add+0x46>
   148b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000148b6 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   148b6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   148ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   148bc:	bf2c      	ite	cs
   148be:	2508      	movcs	r5, #8
   148c0:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   148c2:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   148c4:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   148c6:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   148c8:	1dcc      	adds	r4, r1, #7
   148ca:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   148ce:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   148d0:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   148d4:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   148d6:	440d      	add	r5, r1
   148d8:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   148dc:	1b2d      	subs	r5, r5, r4
   148de:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   148e0:	4629      	mov	r1, r5
   148e2:	4620      	mov	r0, r4
	h->len = buf_sz;
   148e4:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   148e6:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   148e8:	f7ff ff93 	bl	14812 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   148ec:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   148ee:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   148f0:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   148f2:	361b      	adds	r6, #27
   148f4:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   148f6:	f104 0210 	add.w	r2, r4, #16
   148fa:	428b      	cmp	r3, r1
   148fc:	db29      	blt.n	14952 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   148fe:	4632      	mov	r2, r6
   14900:	4620      	mov	r0, r4
   14902:	2100      	movs	r1, #0
   14904:	f7ff ff81 	bl	1480a <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   14908:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1490a:	4620      	mov	r0, r4
   1490c:	2201      	movs	r2, #1
   1490e:	2100      	movs	r1, #0
   14910:	f7ff ff63 	bl	147da <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   14914:	463a      	mov	r2, r7
   14916:	4631      	mov	r1, r6
   14918:	f7ff ff77 	bl	1480a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1491c:	4633      	mov	r3, r6
   1491e:	4631      	mov	r1, r6
   14920:	4620      	mov	r0, r4
   14922:	2200      	movs	r2, #0
   14924:	f7ff ff48 	bl	147b8 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   14928:	4629      	mov	r1, r5
   1492a:	4620      	mov	r0, r4
   1492c:	2200      	movs	r2, #0
   1492e:	f7ff ff6c 	bl	1480a <set_chunk_size>
   14932:	463b      	mov	r3, r7
   14934:	4629      	mov	r1, r5
   14936:	4620      	mov	r0, r4
   14938:	2200      	movs	r2, #0
   1493a:	f7ff ff3d 	bl	147b8 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1493e:	4629      	mov	r1, r5
   14940:	4620      	mov	r0, r4
   14942:	2201      	movs	r2, #1
   14944:	f7ff ff49 	bl	147da <set_chunk_used>

	free_list_add(h, chunk0_size);
   14948:	4631      	mov	r1, r6
}
   1494a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1494e:	f7ff bf6d 	b.w	1482c <free_list_add>
		h->buckets[i].next = 0;
   14952:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   14956:	3301      	adds	r3, #1
   14958:	e7cf      	b.n	148fa <sys_heap_init+0x44>

0001495a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1495a:	4770      	bx	lr

0001495c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1495c:	f7fd bd80 	b.w	12460 <SystemInit>

00014960 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   14960:	b2cb      	uxtb	r3, r1
   14962:	210c      	movs	r1, #12
   14964:	68c2      	ldr	r2, [r0, #12]
   14966:	fb03 2101 	mla	r1, r3, r1, r2
   1496a:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1496c:	f000 0007 	and.w	r0, r0, #7
   14970:	4770      	bx	lr

00014972 <set_off_state>:
	__asm__ volatile(
   14972:	f04f 0320 	mov.w	r3, #32
   14976:	f3ef 8211 	mrs	r2, BASEPRI
   1497a:	f383 8811 	msr	BASEPRI, r3
   1497e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14982:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   14984:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   14988:	d001      	beq.n	1498e <set_off_state+0x1c>
   1498a:	428b      	cmp	r3, r1
   1498c:	d107      	bne.n	1499e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1498e:	2301      	movs	r3, #1
   14990:	6003      	str	r3, [r0, #0]
	int err = 0;
   14992:	2000      	movs	r0, #0
	__asm__ volatile(
   14994:	f382 8811 	msr	BASEPRI, r2
   14998:	f3bf 8f6f 	isb	sy
}
   1499c:	4770      	bx	lr
		err = -EPERM;
   1499e:	f04f 30ff 	mov.w	r0, #4294967295
   149a2:	e7f7      	b.n	14994 <set_off_state+0x22>

000149a4 <set_starting_state>:
{
   149a4:	b510      	push	{r4, lr}
	__asm__ volatile(
   149a6:	f04f 0320 	mov.w	r3, #32
   149aa:	f3ef 8211 	mrs	r2, BASEPRI
   149ae:	f383 8811 	msr	BASEPRI, r3
   149b2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   149b6:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   149b8:	f003 0407 	and.w	r4, r3, #7
   149bc:	2c01      	cmp	r4, #1
   149be:	d106      	bne.n	149ce <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   149c0:	6001      	str	r1, [r0, #0]
	int err = 0;
   149c2:	2000      	movs	r0, #0
	__asm__ volatile(
   149c4:	f382 8811 	msr	BASEPRI, r2
   149c8:	f3bf 8f6f 	isb	sy
}
   149cc:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   149ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   149d2:	428b      	cmp	r3, r1
		err = -EBUSY;
   149d4:	bf14      	ite	ne
   149d6:	f04f 30ff 	movne.w	r0, #4294967295
   149da:	f06f 000f 	mvneq.w	r0, #15
   149de:	e7f1      	b.n	149c4 <set_starting_state+0x20>

000149e0 <set_on_state>:
	__asm__ volatile(
   149e0:	f04f 0320 	mov.w	r3, #32
   149e4:	f3ef 8211 	mrs	r2, BASEPRI
   149e8:	f383 8811 	msr	BASEPRI, r3
   149ec:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   149f0:	6803      	ldr	r3, [r0, #0]
   149f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   149f6:	f043 0302 	orr.w	r3, r3, #2
   149fa:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   149fc:	f382 8811 	msr	BASEPRI, r2
   14a00:	f3bf 8f6f 	isb	sy
}
   14a04:	4770      	bx	lr

00014a06 <onoff_started_callback>:
{
   14a06:	b410      	push	{r4}
	notify(mgr, 0);
   14a08:	241c      	movs	r4, #28
	return &data->mgr[type];
   14a0a:	68c0      	ldr	r0, [r0, #12]
   14a0c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   14a0e:	fb03 0004 	mla	r0, r3, r4, r0
   14a12:	2100      	movs	r1, #0
}
   14a14:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   14a18:	4710      	bx	r2

00014a1a <blocking_start_callback>:
{
   14a1a:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   14a1c:	f7fe bc7e 	b.w	1331c <z_impl_k_sem_give>

00014a20 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   14a20:	2000      	movs	r0, #0
   14a22:	f7fd be19 	b.w	12658 <nrfx_clock_stop>

00014a26 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   14a26:	2000      	movs	r0, #0
   14a28:	f7fd bde4 	b.w	125f4 <nrfx_clock_start>

00014a2c <api_stop>:
{
   14a2c:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   14a2e:	230c      	movs	r3, #12
   14a30:	b2cc      	uxtb	r4, r1
   14a32:	4363      	muls	r3, r4
{
   14a34:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   14a36:	68c0      	ldr	r0, [r0, #12]
   14a38:	3340      	adds	r3, #64	; 0x40
   14a3a:	2180      	movs	r1, #128	; 0x80
   14a3c:	4418      	add	r0, r3
   14a3e:	f7ff ff98 	bl	14972 <set_off_state>
	if (err < 0) {
   14a42:	2800      	cmp	r0, #0
   14a44:	db05      	blt.n	14a52 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   14a46:	6869      	ldr	r1, [r5, #4]
   14a48:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   14a4c:	6863      	ldr	r3, [r4, #4]
   14a4e:	4798      	blx	r3
	return 0;
   14a50:	2000      	movs	r0, #0
}
   14a52:	bd38      	pop	{r3, r4, r5, pc}

00014a54 <api_start>:
{
   14a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   14a58:	f04f 080c 	mov.w	r8, #12
   14a5c:	b2cd      	uxtb	r5, r1
   14a5e:	fb08 f805 	mul.w	r8, r8, r5
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   14a62:	68c4      	ldr	r4, [r0, #12]
{
   14a64:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   14a66:	f108 0040 	add.w	r0, r8, #64	; 0x40
   14a6a:	2180      	movs	r1, #128	; 0x80
   14a6c:	4420      	add	r0, r4
{
   14a6e:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   14a70:	f7ff ff98 	bl	149a4 <set_starting_state>
	if (err < 0) {
   14a74:	2800      	cmp	r0, #0
   14a76:	db09      	blt.n	14a8c <api_start+0x38>
	subdata->cb = data->cb;
   14a78:	687b      	ldr	r3, [r7, #4]
   14a7a:	4444      	add	r4, r8
   14a7c:	63a3      	str	r3, [r4, #56]	; 0x38
	subdata->user_data = data->user_data;
   14a7e:	68bb      	ldr	r3, [r7, #8]
   14a80:	63e3      	str	r3, [r4, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
   14a82:	6873      	ldr	r3, [r6, #4]
   14a84:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   14a88:	4798      	blx	r3
	return 0;
   14a8a:	2000      	movs	r0, #0
}
   14a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014a90 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   14a90:	4770      	bx	lr

00014a92 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   14a92:	4770      	bx	lr

00014a94 <sys_clock_disable>:
   14a94:	4770      	bx	lr

00014a96 <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
   14a96:	2300      	movs	r3, #0
{
   14a98:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
   14a9a:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
   14a9c:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
   14aa0:	f7fe ff8c 	bl	139bc <mbedtls_platform_setup>
}
   14aa4:	b003      	add	sp, #12
   14aa6:	f85d fb04 	ldr.w	pc, [sp], #4

00014aaa <__acle_se_spm_request_random_number_nse>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   14aaa:	2990      	cmp	r1, #144	; 0x90
{
   14aac:	b508      	push	{r3, lr}
   14aae:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   14ab0:	d139      	bne.n	14b26 <__acle_se_spm_request_random_number_nse+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
   14ab2:	460a      	mov	r2, r1
   14ab4:	4601      	mov	r1, r0
   14ab6:	2000      	movs	r0, #0
   14ab8:	f7fe ff8c 	bl	139d4 <mbedtls_hardware_poll>
}
   14abc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14ac0:	4671      	mov	r1, lr
   14ac2:	4672      	mov	r2, lr
   14ac4:	4673      	mov	r3, lr
   14ac6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   14aca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   14ace:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   14ad2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   14ad6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   14ada:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   14ade:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   14ae2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   14ae6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   14aea:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   14aee:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   14af2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   14af6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   14afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   14afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   14b02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   14b06:	f38e 8c00 	msr	CPSR_fs, lr
   14b0a:	b410      	push	{r4}
   14b0c:	eef1 ca10 	vmrs	ip, fpscr
   14b10:	f64f 7460 	movw	r4, #65376	; 0xff60
   14b14:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   14b18:	ea0c 0c04 	and.w	ip, ip, r4
   14b1c:	eee1 ca10 	vmsr	fpscr, ip
   14b20:	bc10      	pop	{r4}
   14b22:	46f4      	mov	ip, lr
   14b24:	4774      	bxns	lr
		return -EINVAL;
   14b26:	f06f 0015 	mvn.w	r0, #21
   14b2a:	e7c7      	b.n	14abc <__acle_se_spm_request_random_number_nse+0x12>

00014b2c <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   14b2c:	2000      	movs	r0, #0
   14b2e:	f7fc b8cb 	b.w	10cc8 <sys_reboot>

00014b32 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14b32:	2100      	movs	r1, #0
   14b34:	2001      	movs	r0, #1
   14b36:	f000 b832 	b.w	14b9e <z_arm_fatal_error>

00014b3a <irq_target_state_set>:
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
   14b3a:	b243      	sxtb	r3, r0
   14b3c:	b9c9      	cbnz	r1, 14b72 <irq_target_state_set+0x38>
  if ((int32_t)(IRQn) >= 0)
   14b3e:	2b00      	cmp	r3, #0
   14b40:	db15      	blt.n	14b6e <irq_target_state_set+0x34>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14b42:	2101      	movs	r1, #1
   14b44:	095b      	lsrs	r3, r3, #5
   14b46:	009b      	lsls	r3, r3, #2
   14b48:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   14b4c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   14b50:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
   14b54:	f000 001f 	and.w	r0, r0, #31
   14b58:	4081      	lsls	r1, r0
   14b5a:	ea22 0201 	bic.w	r2, r2, r1
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14b5e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   14b62:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   14b66:	40c1      	lsrs	r1, r0
   14b68:	f001 0101 	and.w	r1, r1, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
   14b6c:	b2c9      	uxtb	r1, r1
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
	}
}
   14b6e:	4608      	mov	r0, r1
   14b70:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   14b72:	2b00      	cmp	r3, #0
   14b74:	db0d      	blt.n	14b92 <irq_target_state_set+0x58>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14b76:	2201      	movs	r2, #1
   14b78:	095b      	lsrs	r3, r3, #5
   14b7a:	009b      	lsls	r3, r3, #2
   14b7c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   14b80:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   14b84:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   14b88:	f000 001f 	and.w	r0, r0, #31
   14b8c:	4082      	lsls	r2, r0
   14b8e:	430a      	orrs	r2, r1
   14b90:	e7e5      	b.n	14b5e <irq_target_state_set+0x24>
		return IRQ_TARGET_STATE_SECURE;
   14b92:	2100      	movs	r1, #0
   14b94:	e7eb      	b.n	14b6e <irq_target_state_set+0x34>

00014b96 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   14b96:	6e83      	ldr	r3, [r0, #104]	; 0x68
   14b98:	f383 880b 	msr	PSPLIM, r3
}
   14b9c:	4770      	bx	lr

00014b9e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14b9e:	f000 b937 	b.w	14e10 <z_fatal_error>

00014ba2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14ba2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   14ba4:	6800      	ldr	r0, [r0, #0]
   14ba6:	f000 b933 	b.w	14e10 <z_fatal_error>

00014baa <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   14baa:	b508      	push	{r3, lr}
	handler();
   14bac:	f7fc ff00 	bl	119b0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   14bb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   14bb4:	f7fd b87e 	b.w	11cb4 <z_arm_exc_exit>

00014bb8 <mpu_configure_region>:
{
   14bb8:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   14bba:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   14bbc:	680c      	ldr	r4, [r1, #0]
{
   14bbe:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   14bc0:	890a      	ldrh	r2, [r1, #8]
   14bc2:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   14bc4:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   14bc6:	3b01      	subs	r3, #1
   14bc8:	f024 041f 	bic.w	r4, r4, #31
   14bcc:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   14bce:	f002 021f 	and.w	r2, r2, #31
   14bd2:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   14bd6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   14bda:	280f      	cmp	r0, #15
   14bdc:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   14bde:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   14be2:	9303      	str	r3, [sp, #12]
   14be4:	d805      	bhi.n	14bf2 <mpu_configure_region+0x3a>
	region_init(index, region_conf);
   14be6:	4669      	mov	r1, sp
   14be8:	f7fd f8e6 	bl	11db8 <region_init>
}
   14bec:	4620      	mov	r0, r4
   14bee:	b005      	add	sp, #20
   14bf0:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   14bf2:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   14bf6:	e7f9      	b.n	14bec <mpu_configure_region+0x34>

00014bf8 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   14bf8:	e840 f000 	tt	r0, r0
   14bfc:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   14bfe:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   14c02:	bf14      	ite	ne
   14c04:	4618      	movne	r0, r3
   14c06:	f06f 0015 	mvneq.w	r0, #21
   14c0a:	4770      	bx	lr

00014c0c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   14c0c:	3801      	subs	r0, #1
   14c0e:	3901      	subs	r1, #1
   14c10:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   14c14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   14c18:	4293      	cmp	r3, r2
   14c1a:	d101      	bne.n	14c20 <strcmp+0x14>
   14c1c:	2b00      	cmp	r3, #0
   14c1e:	d1f7      	bne.n	14c10 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   14c20:	1a98      	subs	r0, r3, r2
   14c22:	4770      	bx	lr

00014c24 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   14c24:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   14c26:	b15a      	cbz	r2, 14c40 <memcmp+0x1c>
   14c28:	3901      	subs	r1, #1
   14c2a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   14c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
   14c30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   14c34:	42a0      	cmp	r0, r4
   14c36:	d001      	beq.n	14c3c <memcmp+0x18>
   14c38:	429a      	cmp	r2, r3
   14c3a:	d0f7      	beq.n	14c2c <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   14c3c:	1ad0      	subs	r0, r2, r3
}
   14c3e:	bd10      	pop	{r4, pc}
		return 0;
   14c40:	4610      	mov	r0, r2
   14c42:	e7fc      	b.n	14c3e <memcmp+0x1a>

00014c44 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   14c44:	1a43      	subs	r3, r0, r1
   14c46:	4293      	cmp	r3, r2
{
   14c48:	b510      	push	{r4, lr}
   14c4a:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   14c4e:	d308      	bcc.n	14c62 <memmove+0x1e>
	char *dest = d;
   14c50:	4602      	mov	r2, r0
   14c52:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   14c54:	429a      	cmp	r2, r3
   14c56:	d00b      	beq.n	14c70 <memmove+0x2c>
			*dest = *src;
   14c58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   14c5c:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   14c60:	e7f8      	b.n	14c54 <memmove+0x10>
   14c62:	440a      	add	r2, r1
			dest[n] = src[n];
   14c64:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   14c68:	428a      	cmp	r2, r1
			dest[n] = src[n];
   14c6a:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   14c6e:	d1f9      	bne.n	14c64 <memmove+0x20>
		}
	}

	return d;
}
   14c70:	bd10      	pop	{r4, pc}

00014c72 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   14c72:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   14c74:	ea81 0400 	eor.w	r4, r1, r0
   14c78:	07a5      	lsls	r5, r4, #30
   14c7a:	4603      	mov	r3, r0
   14c7c:	d00b      	beq.n	14c96 <memcpy+0x24>
   14c7e:	3b01      	subs	r3, #1
   14c80:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   14c82:	4291      	cmp	r1, r2
   14c84:	d11b      	bne.n	14cbe <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   14c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   14c88:	2a00      	cmp	r2, #0
   14c8a:	d0fc      	beq.n	14c86 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   14c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   14c90:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   14c92:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   14c96:	079c      	lsls	r4, r3, #30
   14c98:	d1f6      	bne.n	14c88 <memcpy+0x16>
   14c9a:	f022 0403 	bic.w	r4, r2, #3
   14c9e:	1f1d      	subs	r5, r3, #4
   14ca0:	0896      	lsrs	r6, r2, #2
   14ca2:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   14ca4:	42b9      	cmp	r1, r7
   14ca6:	d105      	bne.n	14cb4 <memcpy+0x42>
   14ca8:	f06f 0503 	mvn.w	r5, #3
   14cac:	4423      	add	r3, r4
   14cae:	fb05 2206 	mla	r2, r5, r6, r2
   14cb2:	e7e4      	b.n	14c7e <memcpy+0xc>
			*(d_word++) = *(s_word++);
   14cb4:	f851 cb04 	ldr.w	ip, [r1], #4
   14cb8:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   14cbc:	e7f2      	b.n	14ca4 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   14cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
   14cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   14cc6:	e7dc      	b.n	14c82 <memcpy+0x10>

00014cc8 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   14cc8:	4603      	mov	r3, r0
{
   14cca:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   14ccc:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   14cce:	079c      	lsls	r4, r3, #30
   14cd0:	d111      	bne.n	14cf6 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   14cd2:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   14cd6:	f022 0603 	bic.w	r6, r2, #3
   14cda:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   14cde:	441e      	add	r6, r3
   14ce0:	0894      	lsrs	r4, r2, #2
   14ce2:	42b3      	cmp	r3, r6
   14ce4:	d10d      	bne.n	14d02 <memset+0x3a>
   14ce6:	f06f 0503 	mvn.w	r5, #3
   14cea:	fb05 2204 	mla	r2, r5, r4, r2
   14cee:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   14cf0:	4293      	cmp	r3, r2
   14cf2:	d109      	bne.n	14d08 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   14cf4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   14cf6:	2a00      	cmp	r2, #0
   14cf8:	d0fc      	beq.n	14cf4 <memset+0x2c>
		*(d_byte++) = c_byte;
   14cfa:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   14cfe:	3a01      	subs	r2, #1
   14d00:	e7e5      	b.n	14cce <memset+0x6>
		*(d_word++) = c_word;
   14d02:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   14d06:	e7ec      	b.n	14ce2 <memset+0x1a>
		*(d_byte++) = c_byte;
   14d08:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   14d0c:	e7f0      	b.n	14cf0 <memset+0x28>

00014d0e <_stdout_hook_default>:
}
   14d0e:	f04f 30ff 	mov.w	r0, #4294967295
   14d12:	4770      	bx	lr

00014d14 <uarte_nrfx_config_get>:
{
   14d14:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   14d16:	68c2      	ldr	r2, [r0, #12]
   14d18:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   14d1c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   14d20:	2000      	movs	r0, #0
   14d22:	4770      	bx	lr

00014d24 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   14d24:	6843      	ldr	r3, [r0, #4]
   14d26:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   14d28:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   14d2c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   14d30:	4770      	bx	lr

00014d32 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   14d32:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   14d34:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   14d36:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14d38:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14d3c:	b148      	cbz	r0, 14d52 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d3e:	2000      	movs	r0, #0
	*c = data->rx_data;
   14d40:	7c12      	ldrb	r2, [r2, #16]
   14d42:	700a      	strb	r2, [r1, #0]
   14d44:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   14d48:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d4c:	2201      	movs	r2, #1
   14d4e:	601a      	str	r2, [r3, #0]
	return 0;
   14d50:	4770      	bx	lr
		return -1;
   14d52:	f04f 30ff 	mov.w	r0, #4294967295
}
   14d56:	4770      	bx	lr

00014d58 <uarte_nrfx_poll_out>:
{
   14d58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   14d5c:	6843      	ldr	r3, [r0, #4]
{
   14d5e:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   14d62:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14d64:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   14d66:	f000 f93f 	bl	14fe8 <k_is_in_isr>
   14d6a:	bb98      	cbnz	r0, 14dd4 <uarte_nrfx_poll_out+0x7c>
		lock = &data->poll_out_lock;
   14d6c:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14d6e:	f04f 0801 	mov.w	r8, #1
   14d72:	f106 070c 	add.w	r7, r6, #12
   14d76:	e8d7 3fef 	ldaex	r3, [r7]
   14d7a:	2b00      	cmp	r3, #0
   14d7c:	d103      	bne.n	14d86 <uarte_nrfx_poll_out+0x2e>
   14d7e:	e8c7 8fe2 	stlex	r2, r8, [r7]
   14d82:	2a00      	cmp	r2, #0
   14d84:	d1f7      	bne.n	14d76 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   14d86:	d007      	beq.n	14d98 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   14d88:	2021      	movs	r0, #33	; 0x21
   14d8a:	2100      	movs	r1, #0
   14d8c:	3d01      	subs	r5, #1
   14d8e:	f7fe fa9f 	bl	132d0 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   14d92:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   14d96:	d1ee      	bne.n	14d76 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d98:	2300      	movs	r3, #0
   14d9a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14d9e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14da2:	f10d 0307 	add.w	r3, sp, #7
   14da6:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14daa:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14dac:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   14db0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14db4:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14db6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   14dba:	b923      	cbnz	r3, 14dc6 <uarte_nrfx_poll_out+0x6e>
   14dbc:	2001      	movs	r0, #1
   14dbe:	f000 f81a 	bl	14df6 <nrfx_busy_wait>
   14dc2:	3d01      	subs	r5, #1
   14dc4:	d1f7      	bne.n	14db6 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14dc6:	2301      	movs	r3, #1
   14dc8:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   14dca:	2300      	movs	r3, #0
   14dcc:	60f3      	str	r3, [r6, #12]
}
   14dce:	b002      	add	sp, #8
   14dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   14dd4:	2301      	movs	r3, #1
   14dd6:	60f3      	str	r3, [r6, #12]
   14dd8:	e7de      	b.n	14d98 <uarte_nrfx_poll_out+0x40>

00014dda <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   14dda:	2000      	movs	r0, #0
{
   14ddc:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
   14dde:	f7fc ff77 	bl	11cd0 <sys_arch_reboot>

00014de2 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
   14de2:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   14de4:	f7fc fc68 	bl	116b8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   14de8:	f7fc fcea 	bl	117c0 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
   14dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   14df0:	f7fe bea6 	b.w	13b40 <nrf_cc3xx_platform_init_no_rng>

00014df4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   14df4:	4700      	bx	r0

00014df6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   14df6:	f000 b8fd 	b.w	14ff4 <z_impl_k_busy_wait>

00014dfa <nrfx_clock_enable>:
{
   14dfa:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   14dfc:	2005      	movs	r0, #5
   14dfe:	f7fc fd5b 	bl	118b8 <arch_irq_is_enabled>
   14e02:	b920      	cbnz	r0, 14e0e <nrfx_clock_enable+0x14>
}
   14e04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   14e08:	2005      	movs	r0, #5
   14e0a:	f7fc bd45 	b.w	11898 <arch_irq_enable>
   14e0e:	bd08      	pop	{r3, pc}

00014e10 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14e10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14e12:	4605      	mov	r5, r0
   14e14:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   14e16:	f04f 0320 	mov.w	r3, #32
   14e1a:	f3ef 8611 	mrs	r6, BASEPRI
   14e1e:	f383 8811 	msr	BASEPRI, r3
   14e22:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   14e26:	f7fe fa73 	bl	13310 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   14e2a:	9901      	ldr	r1, [sp, #4]
   14e2c:	4604      	mov	r4, r0
   14e2e:	4628      	mov	r0, r5
   14e30:	f7ff ffd3 	bl	14dda <k_sys_fatal_error_handler>
	__asm__ volatile(
   14e34:	f386 8811 	msr	BASEPRI, r6
   14e38:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14e3c:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   14e3e:	b002      	add	sp, #8
   14e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14e44:	f7fc bf62 	b.w	11d0c <z_impl_k_thread_abort>

00014e48 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   14e48:	f7ff be23 	b.w	14a92 <z_clock_idle_exit>

00014e4c <k_mem_slab_init>:
{
   14e4c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   14e4e:	2400      	movs	r4, #0
   14e50:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14e52:	ea41 0402 	orr.w	r4, r1, r2
   14e56:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   14e5a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   14e5e:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14e60:	d10c      	bne.n	14e7c <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   14e62:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14e64:	42a3      	cmp	r3, r4
   14e66:	d103      	bne.n	14e70 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   14e68:	e9c0 0000 	strd	r0, r0, [r0]
}
   14e6c:	2000      	movs	r0, #0
}
   14e6e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   14e70:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14e72:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   14e74:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   14e76:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   14e78:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   14e7a:	e7f3      	b.n	14e64 <k_mem_slab_init+0x18>
		return -EINVAL;
   14e7c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   14e80:	e7f5      	b.n	14e6e <k_mem_slab_init+0x22>

00014e82 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   14e82:	2300      	movs	r3, #0
   14e84:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   14e88:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   14e8c:	4618      	mov	r0, r3
   14e8e:	4770      	bx	lr

00014e90 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14e90:	4603      	mov	r3, r0
   14e92:	b920      	cbnz	r0, 14e9e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14e94:	f3ef 8205 	mrs	r2, IPSR
   14e98:	b90a      	cbnz	r2, 14e9e <z_reschedule_irqlock+0xe>
   14e9a:	f7fc bca7 	b.w	117ec <arch_swap>
   14e9e:	f383 8811 	msr	BASEPRI, r3
   14ea2:	f3bf 8f6f 	isb	sy
}
   14ea6:	4770      	bx	lr

00014ea8 <z_reschedule_unlocked>:
	__asm__ volatile(
   14ea8:	f04f 0320 	mov.w	r3, #32
   14eac:	f3ef 8011 	mrs	r0, BASEPRI
   14eb0:	f383 8811 	msr	BASEPRI, r3
   14eb4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   14eb8:	f7ff bfea 	b.w	14e90 <z_reschedule_irqlock>

00014ebc <unpend_thread_no_timeout>:
{
   14ebc:	4601      	mov	r1, r0
   14ebe:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   14ec0:	6880      	ldr	r0, [r0, #8]
   14ec2:	f7fd ff31 	bl	12d28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14ec6:	7b4b      	ldrb	r3, [r1, #13]
   14ec8:	f023 0302 	bic.w	r3, r3, #2
   14ecc:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   14ece:	2300      	movs	r3, #0
   14ed0:	608b      	str	r3, [r1, #8]
}
   14ed2:	bd08      	pop	{r3, pc}

00014ed4 <z_priq_dumb_best>:
	return list->head == list;
   14ed4:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14ed6:	4298      	cmp	r0, r3
   14ed8:	d004      	beq.n	14ee4 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   14eda:	2b00      	cmp	r3, #0
   14edc:	bf38      	it	cc
   14ede:	2300      	movcc	r3, #0
   14ee0:	4618      	mov	r0, r3
   14ee2:	4770      	bx	lr
	struct k_thread *thread = NULL;
   14ee4:	2000      	movs	r0, #0
}
   14ee6:	4770      	bx	lr

00014ee8 <z_ready_thread>:
{
   14ee8:	b510      	push	{r4, lr}
   14eea:	f04f 0320 	mov.w	r3, #32
   14eee:	f3ef 8411 	mrs	r4, BASEPRI
   14ef2:	f383 8811 	msr	BASEPRI, r3
   14ef6:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   14efa:	f7fd ff6b 	bl	12dd4 <ready_thread>
	__asm__ volatile(
   14efe:	f384 8811 	msr	BASEPRI, r4
   14f02:	f3bf 8f6f 	isb	sy
}
   14f06:	bd10      	pop	{r4, pc}

00014f08 <z_thread_timeout>:
{
   14f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14f0a:	4604      	mov	r4, r0
	__asm__ volatile(
   14f0c:	f04f 0320 	mov.w	r3, #32
   14f10:	f3ef 8511 	mrs	r5, BASEPRI
   14f14:	f383 8811 	msr	BASEPRI, r3
   14f18:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   14f1c:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   14f20:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   14f22:	b11b      	cbz	r3, 14f2c <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   14f24:	9001      	str	r0, [sp, #4]
   14f26:	f7ff ffc9 	bl	14ebc <unpend_thread_no_timeout>
   14f2a:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   14f2c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   14f30:	f023 0314 	bic.w	r3, r3, #20
   14f34:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   14f38:	f7fd ff4c 	bl	12dd4 <ready_thread>
	__asm__ volatile(
   14f3c:	f385 8811 	msr	BASEPRI, r5
   14f40:	f3bf 8f6f 	isb	sy
}
   14f44:	b003      	add	sp, #12
   14f46:	bd30      	pop	{r4, r5, pc}

00014f48 <add_to_waitq_locked>:
{
   14f48:	b538      	push	{r3, r4, r5, lr}
   14f4a:	4604      	mov	r4, r0
   14f4c:	460d      	mov	r5, r1
	unready_thread(thread);
   14f4e:	f7fe f89f 	bl	13090 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   14f52:	7b63      	ldrb	r3, [r4, #13]
   14f54:	f043 0302 	orr.w	r3, r3, #2
   14f58:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   14f5a:	b1c5      	cbz	r5, 14f8e <add_to_waitq_locked+0x46>
	return list->head == list;
   14f5c:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   14f5e:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f60:	429d      	cmp	r5, r3
   14f62:	bf08      	it	eq
   14f64:	2300      	moveq	r3, #0
   14f66:	2b00      	cmp	r3, #0
   14f68:	bf38      	it	cc
   14f6a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14f6c:	b183      	cbz	r3, 14f90 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   14f6e:	f994 100e 	ldrsb.w	r1, [r4, #14]
   14f72:	f993 200e 	ldrsb.w	r2, [r3, #14]
   14f76:	4291      	cmp	r1, r2
   14f78:	db04      	blt.n	14f84 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   14f7a:	686a      	ldr	r2, [r5, #4]
   14f7c:	429a      	cmp	r2, r3
   14f7e:	d007      	beq.n	14f90 <add_to_waitq_locked+0x48>
   14f80:	681b      	ldr	r3, [r3, #0]
   14f82:	e7f3      	b.n	14f6c <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   14f84:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   14f86:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   14f8a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   14f8c:	605c      	str	r4, [r3, #4]
}
   14f8e:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   14f90:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   14f92:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   14f94:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   14f96:	686b      	ldr	r3, [r5, #4]
   14f98:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14f9a:	606c      	str	r4, [r5, #4]
   14f9c:	e7f7      	b.n	14f8e <add_to_waitq_locked+0x46>

00014f9e <z_unpend_first_thread>:
{
   14f9e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14fa0:	f04f 0320 	mov.w	r3, #32
   14fa4:	f3ef 8211 	mrs	r2, BASEPRI
   14fa8:	f383 8811 	msr	BASEPRI, r3
   14fac:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   14fb0:	f7ff ff90 	bl	14ed4 <z_priq_dumb_best>
   14fb4:	4604      	mov	r4, r0
	__asm__ volatile(
   14fb6:	f382 8811 	msr	BASEPRI, r2
   14fba:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   14fbe:	b188      	cbz	r0, 14fe4 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   14fc0:	f04f 0320 	mov.w	r3, #32
   14fc4:	f3ef 8511 	mrs	r5, BASEPRI
   14fc8:	f383 8811 	msr	BASEPRI, r3
   14fcc:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   14fd0:	f7ff ff74 	bl	14ebc <unpend_thread_no_timeout>
	__asm__ volatile(
   14fd4:	f385 8811 	msr	BASEPRI, r5
   14fd8:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   14fdc:	f104 0018 	add.w	r0, r4, #24
   14fe0:	f000 f80a 	bl	14ff8 <z_abort_timeout>
}
   14fe4:	4620      	mov	r0, r4
   14fe6:	bd38      	pop	{r3, r4, r5, pc}

00014fe8 <k_is_in_isr>:
   14fe8:	f3ef 8005 	mrs	r0, IPSR
}
   14fec:	3800      	subs	r0, #0
   14fee:	bf18      	it	ne
   14ff0:	2001      	movne	r0, #1
   14ff2:	4770      	bx	lr

00014ff4 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   14ff4:	f7fb be5e 	b.w	10cb4 <arch_busy_wait>

00014ff8 <z_abort_timeout>:
{
   14ff8:	b510      	push	{r4, lr}
	__asm__ volatile(
   14ffa:	f04f 0220 	mov.w	r2, #32
   14ffe:	f3ef 8411 	mrs	r4, BASEPRI
   15002:	f382 8811 	msr	BASEPRI, r2
   15006:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1500a:	6803      	ldr	r3, [r0, #0]
   1500c:	b13b      	cbz	r3, 1501e <z_abort_timeout+0x26>
			remove_timeout(to);
   1500e:	f7fe fa67 	bl	134e0 <remove_timeout>
			ret = 0;
   15012:	2000      	movs	r0, #0
	__asm__ volatile(
   15014:	f384 8811 	msr	BASEPRI, r4
   15018:	f3bf 8f6f 	isb	sy
}
   1501c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1501e:	f06f 0015 	mvn.w	r0, #21
   15022:	e7f7      	b.n	15014 <z_abort_timeout+0x1c>

00015024 <z_get_next_timeout_expiry>:
{
   15024:	b510      	push	{r4, lr}
	__asm__ volatile(
   15026:	f04f 0320 	mov.w	r3, #32
   1502a:	f3ef 8411 	mrs	r4, BASEPRI
   1502e:	f383 8811 	msr	BASEPRI, r3
   15032:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   15036:	f7fe fa6d 	bl	13514 <next_timeout>
	__asm__ volatile(
   1503a:	f384 8811 	msr	BASEPRI, r4
   1503e:	f3bf 8f6f 	isb	sy
}
   15042:	bd10      	pop	{r4, pc}

00015044 <z_set_timeout_expiry>:
{
   15044:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15046:	4604      	mov	r4, r0
   15048:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   1504a:	f04f 0320 	mov.w	r3, #32
   1504e:	f3ef 8511 	mrs	r5, BASEPRI
   15052:	f383 8811 	msr	BASEPRI, r3
   15056:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1505a:	f7fe fa5b 	bl	13514 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1505e:	2801      	cmp	r0, #1
   15060:	dd05      	ble.n	1506e <z_set_timeout_expiry+0x2a>
   15062:	42a0      	cmp	r0, r4
   15064:	9901      	ldr	r1, [sp, #4]
   15066:	dd02      	ble.n	1506e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   15068:	4620      	mov	r0, r4
   1506a:	f7fc f853 	bl	11114 <z_clock_set_timeout>
	__asm__ volatile(
   1506e:	f385 8811 	msr	BASEPRI, r5
   15072:	f3bf 8f6f 	isb	sy
}
   15076:	b003      	add	sp, #12
   15078:	bd30      	pop	{r4, r5, pc}

0001507a <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1507a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1507c:	f7fe fb64 	bl	13748 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   15080:	bd08      	pop	{r3, pc}

00015082 <k_heap_init>:
{
   15082:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   15084:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   15088:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1508c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   15090:	f7ff bc11 	b.w	148b6 <sys_heap_init>

00015094 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   15094:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00015b60 <spm_firmware_info_nse-0x2480>:
	...

00017fe0 <spm_firmware_info_nse>:
   17fe0:	e97f e97f 	sg
   17fe4:	f7f9 bafe 	b.w	115e4 <__acle_se_spm_firmware_info_nse>

00017fe8 <spm_request_random_number_nse>:
   17fe8:	e97f e97f 	sg
   17fec:	f7fc bd5d 	b.w	14aaa <__acle_se_spm_request_random_number_nse>

00017ff0 <spm_request_read_nse>:
   17ff0:	e97f e97f 	sg
   17ff4:	f7f9 ba98 	b.w	11528 <__acle_se_spm_request_read_nse>
	...
