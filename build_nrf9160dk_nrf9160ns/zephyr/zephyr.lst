
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_start>:
   1c200:	20032038 	.word	0x20032038
   1c204:	00026f39 	.word	0x00026f39
   1c208:	000425e5 	.word	0x000425e5
   1c20c:	00026f69 	.word	0x00026f69
   1c210:	00026f69 	.word	0x00026f69
   1c214:	00026f69 	.word	0x00026f69
   1c218:	00026f69 	.word	0x00026f69
   1c21c:	00026f69 	.word	0x00026f69
	...
   1c22c:	00026e95 	.word	0x00026e95
   1c230:	00026f69 	.word	0x00026f69
   1c234:	00000000 	.word	0x00000000
   1c238:	00026de5 	.word	0x00026de5
   1c23c:	000267d1 	.word	0x000267d1

0001c240 <_irq_vector_table>:
   1c240:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c250:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c260:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c270:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c280:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c290:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c2a0:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c2b0:	0002949d 00043ab5 00026ef9 00026ef9     .....:...n...n..
   1c2c0:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c2d0:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c2e0:	00026ef9 00026ef9 00043ad3 00026ef9     .n...n...:...n..
   1c2f0:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c300:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c310:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c320:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c330:	00026ef9 00026ef9 00026ef9 00026ef9     .n...n...n...n..
   1c340:	00026ef9                                .n..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	00033f8c 00000001 0001c200 0001c200     .?..............
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	3c01      	subs	r4, #1
   1c57c:	bf28      	it	cs
   1c57e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1c582:	d2e9      	bcs.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_d2iz>:
   1ccec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1ccf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1ccf4:	d215      	bcs.n	1cd22 <__aeabi_d2iz+0x36>
   1ccf6:	d511      	bpl.n	1cd1c <__aeabi_d2iz+0x30>
   1ccf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1ccfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd00:	d912      	bls.n	1cd28 <__aeabi_d2iz+0x3c>
   1cd02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd12:	fa23 f002 	lsr.w	r0, r3, r2
   1cd16:	bf18      	it	ne
   1cd18:	4240      	negne	r0, r0
   1cd1a:	4770      	bx	lr
   1cd1c:	f04f 0000 	mov.w	r0, #0
   1cd20:	4770      	bx	lr
   1cd22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd26:	d105      	bne.n	1cd34 <__aeabi_d2iz+0x48>
   1cd28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd2c:	bf08      	it	eq
   1cd2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd32:	4770      	bx	lr
   1cd34:	f04f 0000 	mov.w	r0, #0
   1cd38:	4770      	bx	lr
   1cd3a:	bf00      	nop

0001cd3c <__aeabi_d2uiz>:
   1cd3c:	004a      	lsls	r2, r1, #1
   1cd3e:	d211      	bcs.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd44:	d211      	bcs.n	1cd6a <__aeabi_d2uiz+0x2e>
   1cd46:	d50d      	bpl.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd50:	d40e      	bmi.n	1cd70 <__aeabi_d2uiz+0x34>
   1cd52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd5e:	fa23 f002 	lsr.w	r0, r3, r2
   1cd62:	4770      	bx	lr
   1cd64:	f04f 0000 	mov.w	r0, #0
   1cd68:	4770      	bx	lr
   1cd6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd6e:	d102      	bne.n	1cd76 <__aeabi_d2uiz+0x3a>
   1cd70:	f04f 30ff 	mov.w	r0, #4294967295
   1cd74:	4770      	bx	lr
   1cd76:	f04f 0000 	mov.w	r0, #0
   1cd7a:	4770      	bx	lr

0001cd7c <__aeabi_d2f>:
   1cd7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cd80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cd84:	bf24      	itt	cs
   1cd86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cd8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cd8e:	d90d      	bls.n	1cdac <__aeabi_d2f+0x30>
   1cd90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cd94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cd98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cd9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cda0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cda4:	bf08      	it	eq
   1cda6:	f020 0001 	biceq.w	r0, r0, #1
   1cdaa:	4770      	bx	lr
   1cdac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cdb0:	d121      	bne.n	1cdf6 <__aeabi_d2f+0x7a>
   1cdb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1cdb6:	bfbc      	itt	lt
   1cdb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1cdbc:	4770      	bxlt	lr
   1cdbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cdc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1cdc6:	f1c2 0218 	rsb	r2, r2, #24
   1cdca:	f1c2 0c20 	rsb	ip, r2, #32
   1cdce:	fa10 f30c 	lsls.w	r3, r0, ip
   1cdd2:	fa20 f002 	lsr.w	r0, r0, r2
   1cdd6:	bf18      	it	ne
   1cdd8:	f040 0001 	orrne.w	r0, r0, #1
   1cddc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cde0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1cde4:	fa03 fc0c 	lsl.w	ip, r3, ip
   1cde8:	ea40 000c 	orr.w	r0, r0, ip
   1cdec:	fa23 f302 	lsr.w	r3, r3, r2
   1cdf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1cdf4:	e7cc      	b.n	1cd90 <__aeabi_d2f+0x14>
   1cdf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1cdfa:	d107      	bne.n	1ce0c <__aeabi_d2f+0x90>
   1cdfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1ce00:	bf1e      	ittt	ne
   1ce02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ce06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ce0a:	4770      	bxne	lr
   1ce0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ce10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ce14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ce18:	4770      	bx	lr
   1ce1a:	bf00      	nop

0001ce1c <__aeabi_ldivmod>:
   1ce1c:	b97b      	cbnz	r3, 1ce3e <__aeabi_ldivmod+0x22>
   1ce1e:	b972      	cbnz	r2, 1ce3e <__aeabi_ldivmod+0x22>
   1ce20:	2900      	cmp	r1, #0
   1ce22:	bfbe      	ittt	lt
   1ce24:	2000      	movlt	r0, #0
   1ce26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1ce2a:	e006      	blt.n	1ce3a <__aeabi_ldivmod+0x1e>
   1ce2c:	bf08      	it	eq
   1ce2e:	2800      	cmpeq	r0, #0
   1ce30:	bf1c      	itt	ne
   1ce32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1ce36:	f04f 30ff 	movne.w	r0, #4294967295
   1ce3a:	f000 b9b7 	b.w	1d1ac <__aeabi_idiv0>
   1ce3e:	f1ad 0c08 	sub.w	ip, sp, #8
   1ce42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ce46:	2900      	cmp	r1, #0
   1ce48:	db09      	blt.n	1ce5e <__aeabi_ldivmod+0x42>
   1ce4a:	2b00      	cmp	r3, #0
   1ce4c:	db1a      	blt.n	1ce84 <__aeabi_ldivmod+0x68>
   1ce4e:	f000 f84d 	bl	1ceec <__udivmoddi4>
   1ce52:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce5a:	b004      	add	sp, #16
   1ce5c:	4770      	bx	lr
   1ce5e:	4240      	negs	r0, r0
   1ce60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce64:	2b00      	cmp	r3, #0
   1ce66:	db1b      	blt.n	1cea0 <__aeabi_ldivmod+0x84>
   1ce68:	f000 f840 	bl	1ceec <__udivmoddi4>
   1ce6c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce74:	b004      	add	sp, #16
   1ce76:	4240      	negs	r0, r0
   1ce78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce7c:	4252      	negs	r2, r2
   1ce7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ce82:	4770      	bx	lr
   1ce84:	4252      	negs	r2, r2
   1ce86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ce8a:	f000 f82f 	bl	1ceec <__udivmoddi4>
   1ce8e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce96:	b004      	add	sp, #16
   1ce98:	4240      	negs	r0, r0
   1ce9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce9e:	4770      	bx	lr
   1cea0:	4252      	negs	r2, r2
   1cea2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cea6:	f000 f821 	bl	1ceec <__udivmoddi4>
   1ceaa:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ceae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ceb2:	b004      	add	sp, #16
   1ceb4:	4252      	negs	r2, r2
   1ceb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceba:	4770      	bx	lr

0001cebc <__aeabi_uldivmod>:
   1cebc:	b953      	cbnz	r3, 1ced4 <__aeabi_uldivmod+0x18>
   1cebe:	b94a      	cbnz	r2, 1ced4 <__aeabi_uldivmod+0x18>
   1cec0:	2900      	cmp	r1, #0
   1cec2:	bf08      	it	eq
   1cec4:	2800      	cmpeq	r0, #0
   1cec6:	bf1c      	itt	ne
   1cec8:	f04f 31ff 	movne.w	r1, #4294967295
   1cecc:	f04f 30ff 	movne.w	r0, #4294967295
   1ced0:	f000 b96c 	b.w	1d1ac <__aeabi_idiv0>
   1ced4:	f1ad 0c08 	sub.w	ip, sp, #8
   1ced8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cedc:	f000 f806 	bl	1ceec <__udivmoddi4>
   1cee0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cee8:	b004      	add	sp, #16
   1ceea:	4770      	bx	lr

0001ceec <__udivmoddi4>:
   1ceec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cef0:	9d08      	ldr	r5, [sp, #32]
   1cef2:	4604      	mov	r4, r0
   1cef4:	4688      	mov	r8, r1
   1cef6:	2b00      	cmp	r3, #0
   1cef8:	d17d      	bne.n	1cff6 <__udivmoddi4+0x10a>
   1cefa:	428a      	cmp	r2, r1
   1cefc:	4617      	mov	r7, r2
   1cefe:	d93f      	bls.n	1cf80 <__udivmoddi4+0x94>
   1cf00:	fab2 f282 	clz	r2, r2
   1cf04:	b142      	cbz	r2, 1cf18 <__udivmoddi4+0x2c>
   1cf06:	f1c2 0020 	rsb	r0, r2, #32
   1cf0a:	4091      	lsls	r1, r2
   1cf0c:	4097      	lsls	r7, r2
   1cf0e:	fa24 f000 	lsr.w	r0, r4, r0
   1cf12:	4094      	lsls	r4, r2
   1cf14:	ea40 0801 	orr.w	r8, r0, r1
   1cf18:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1cf1c:	0c23      	lsrs	r3, r4, #16
   1cf1e:	fa1f fe87 	uxth.w	lr, r7
   1cf22:	fbb8 f6fc 	udiv	r6, r8, ip
   1cf26:	fb0c 8116 	mls	r1, ip, r6, r8
   1cf2a:	fb06 f00e 	mul.w	r0, r6, lr
   1cf2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1cf32:	4298      	cmp	r0, r3
   1cf34:	d905      	bls.n	1cf42 <__udivmoddi4+0x56>
   1cf36:	18fb      	adds	r3, r7, r3
   1cf38:	d202      	bcs.n	1cf40 <__udivmoddi4+0x54>
   1cf3a:	4298      	cmp	r0, r3
   1cf3c:	f200 8124 	bhi.w	1d188 <__udivmoddi4+0x29c>
   1cf40:	3e01      	subs	r6, #1
   1cf42:	1a19      	subs	r1, r3, r0
   1cf44:	b2a3      	uxth	r3, r4
   1cf46:	fbb1 f0fc 	udiv	r0, r1, ip
   1cf4a:	fb0c 1110 	mls	r1, ip, r0, r1
   1cf4e:	fb00 fe0e 	mul.w	lr, r0, lr
   1cf52:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1cf56:	45a6      	cmp	lr, r4
   1cf58:	d905      	bls.n	1cf66 <__udivmoddi4+0x7a>
   1cf5a:	193c      	adds	r4, r7, r4
   1cf5c:	d202      	bcs.n	1cf64 <__udivmoddi4+0x78>
   1cf5e:	45a6      	cmp	lr, r4
   1cf60:	f200 810f 	bhi.w	1d182 <__udivmoddi4+0x296>
   1cf64:	3801      	subs	r0, #1
   1cf66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1cf6a:	eba4 040e 	sub.w	r4, r4, lr
   1cf6e:	2600      	movs	r6, #0
   1cf70:	b11d      	cbz	r5, 1cf7a <__udivmoddi4+0x8e>
   1cf72:	40d4      	lsrs	r4, r2
   1cf74:	2300      	movs	r3, #0
   1cf76:	e9c5 4300 	strd	r4, r3, [r5]
   1cf7a:	4631      	mov	r1, r6
   1cf7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cf80:	b902      	cbnz	r2, 1cf84 <__udivmoddi4+0x98>
   1cf82:	deff      	udf	#255	; 0xff
   1cf84:	fab2 f282 	clz	r2, r2
   1cf88:	2a00      	cmp	r2, #0
   1cf8a:	d150      	bne.n	1d02e <__udivmoddi4+0x142>
   1cf8c:	1bcb      	subs	r3, r1, r7
   1cf8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1cf92:	fa1f f887 	uxth.w	r8, r7
   1cf96:	2601      	movs	r6, #1
   1cf98:	0c21      	lsrs	r1, r4, #16
   1cf9a:	fbb3 fcfe 	udiv	ip, r3, lr
   1cf9e:	fb0e 301c 	mls	r0, lr, ip, r3
   1cfa2:	460b      	mov	r3, r1
   1cfa4:	fb08 f90c 	mul.w	r9, r8, ip
   1cfa8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1cfac:	4589      	cmp	r9, r1
   1cfae:	d90a      	bls.n	1cfc6 <__udivmoddi4+0xda>
   1cfb0:	1879      	adds	r1, r7, r1
   1cfb2:	bf2c      	ite	cs
   1cfb4:	2301      	movcs	r3, #1
   1cfb6:	2300      	movcc	r3, #0
   1cfb8:	4589      	cmp	r9, r1
   1cfba:	d902      	bls.n	1cfc2 <__udivmoddi4+0xd6>
   1cfbc:	2b00      	cmp	r3, #0
   1cfbe:	f000 80d9 	beq.w	1d174 <__udivmoddi4+0x288>
   1cfc2:	f10c 3cff 	add.w	ip, ip, #4294967295
   1cfc6:	eba1 0109 	sub.w	r1, r1, r9
   1cfca:	b2a3      	uxth	r3, r4
   1cfcc:	fbb1 f0fe 	udiv	r0, r1, lr
   1cfd0:	fb0e 1110 	mls	r1, lr, r0, r1
   1cfd4:	fb08 f800 	mul.w	r8, r8, r0
   1cfd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1cfdc:	45a0      	cmp	r8, r4
   1cfde:	d905      	bls.n	1cfec <__udivmoddi4+0x100>
   1cfe0:	193c      	adds	r4, r7, r4
   1cfe2:	d202      	bcs.n	1cfea <__udivmoddi4+0xfe>
   1cfe4:	45a0      	cmp	r8, r4
   1cfe6:	f200 80c9 	bhi.w	1d17c <__udivmoddi4+0x290>
   1cfea:	3801      	subs	r0, #1
   1cfec:	eba4 0408 	sub.w	r4, r4, r8
   1cff0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1cff4:	e7bc      	b.n	1cf70 <__udivmoddi4+0x84>
   1cff6:	428b      	cmp	r3, r1
   1cff8:	d909      	bls.n	1d00e <__udivmoddi4+0x122>
   1cffa:	2d00      	cmp	r5, #0
   1cffc:	f000 80b1 	beq.w	1d162 <__udivmoddi4+0x276>
   1d000:	2600      	movs	r6, #0
   1d002:	e9c5 0100 	strd	r0, r1, [r5]
   1d006:	4630      	mov	r0, r6
   1d008:	4631      	mov	r1, r6
   1d00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d00e:	fab3 f683 	clz	r6, r3
   1d012:	2e00      	cmp	r6, #0
   1d014:	d146      	bne.n	1d0a4 <__udivmoddi4+0x1b8>
   1d016:	428b      	cmp	r3, r1
   1d018:	f0c0 80a6 	bcc.w	1d168 <__udivmoddi4+0x27c>
   1d01c:	4282      	cmp	r2, r0
   1d01e:	f240 80a3 	bls.w	1d168 <__udivmoddi4+0x27c>
   1d022:	4630      	mov	r0, r6
   1d024:	2d00      	cmp	r5, #0
   1d026:	d0a8      	beq.n	1cf7a <__udivmoddi4+0x8e>
   1d028:	e9c5 4800 	strd	r4, r8, [r5]
   1d02c:	e7a5      	b.n	1cf7a <__udivmoddi4+0x8e>
   1d02e:	4097      	lsls	r7, r2
   1d030:	f1c2 0320 	rsb	r3, r2, #32
   1d034:	fa01 f002 	lsl.w	r0, r1, r2
   1d038:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1d03c:	40d9      	lsrs	r1, r3
   1d03e:	fa24 f303 	lsr.w	r3, r4, r3
   1d042:	fa1f f887 	uxth.w	r8, r7
   1d046:	4094      	lsls	r4, r2
   1d048:	4303      	orrs	r3, r0
   1d04a:	fbb1 f0fe 	udiv	r0, r1, lr
   1d04e:	0c1e      	lsrs	r6, r3, #16
   1d050:	fb0e 1110 	mls	r1, lr, r0, r1
   1d054:	fb00 fc08 	mul.w	ip, r0, r8
   1d058:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   1d05c:	458c      	cmp	ip, r1
   1d05e:	d909      	bls.n	1d074 <__udivmoddi4+0x188>
   1d060:	1879      	adds	r1, r7, r1
   1d062:	bf2c      	ite	cs
   1d064:	2601      	movcs	r6, #1
   1d066:	2600      	movcc	r6, #0
   1d068:	458c      	cmp	ip, r1
   1d06a:	d902      	bls.n	1d072 <__udivmoddi4+0x186>
   1d06c:	2e00      	cmp	r6, #0
   1d06e:	f000 8093 	beq.w	1d198 <__udivmoddi4+0x2ac>
   1d072:	3801      	subs	r0, #1
   1d074:	eba1 010c 	sub.w	r1, r1, ip
   1d078:	b29b      	uxth	r3, r3
   1d07a:	fbb1 f6fe 	udiv	r6, r1, lr
   1d07e:	fb0e 1116 	mls	r1, lr, r6, r1
   1d082:	fb06 fc08 	mul.w	ip, r6, r8
   1d086:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1d08a:	458c      	cmp	ip, r1
   1d08c:	d905      	bls.n	1d09a <__udivmoddi4+0x1ae>
   1d08e:	1879      	adds	r1, r7, r1
   1d090:	d202      	bcs.n	1d098 <__udivmoddi4+0x1ac>
   1d092:	458c      	cmp	ip, r1
   1d094:	f200 8087 	bhi.w	1d1a6 <__udivmoddi4+0x2ba>
   1d098:	3e01      	subs	r6, #1
   1d09a:	eba1 030c 	sub.w	r3, r1, ip
   1d09e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   1d0a2:	e779      	b.n	1cf98 <__udivmoddi4+0xac>
   1d0a4:	f1c6 0720 	rsb	r7, r6, #32
   1d0a8:	fa03 f406 	lsl.w	r4, r3, r6
   1d0ac:	fa02 fc06 	lsl.w	ip, r2, r6
   1d0b0:	fa01 fe06 	lsl.w	lr, r1, r6
   1d0b4:	40fa      	lsrs	r2, r7
   1d0b6:	fa20 f807 	lsr.w	r8, r0, r7
   1d0ba:	40f9      	lsrs	r1, r7
   1d0bc:	fa00 f306 	lsl.w	r3, r0, r6
   1d0c0:	4322      	orrs	r2, r4
   1d0c2:	ea48 040e 	orr.w	r4, r8, lr
   1d0c6:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1d0ca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   1d0ce:	fa1f f982 	uxth.w	r9, r2
   1d0d2:	fbb1 faf8 	udiv	sl, r1, r8
   1d0d6:	fb08 111a 	mls	r1, r8, sl, r1
   1d0da:	fb0a f009 	mul.w	r0, sl, r9
   1d0de:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   1d0e2:	4570      	cmp	r0, lr
   1d0e4:	d90a      	bls.n	1d0fc <__udivmoddi4+0x210>
   1d0e6:	eb12 0e0e 	adds.w	lr, r2, lr
   1d0ea:	bf2c      	ite	cs
   1d0ec:	2101      	movcs	r1, #1
   1d0ee:	2100      	movcc	r1, #0
   1d0f0:	4570      	cmp	r0, lr
   1d0f2:	d901      	bls.n	1d0f8 <__udivmoddi4+0x20c>
   1d0f4:	2900      	cmp	r1, #0
   1d0f6:	d052      	beq.n	1d19e <__udivmoddi4+0x2b2>
   1d0f8:	f10a 3aff 	add.w	sl, sl, #4294967295
   1d0fc:	ebae 0e00 	sub.w	lr, lr, r0
   1d100:	b2a4      	uxth	r4, r4
   1d102:	fbbe f0f8 	udiv	r0, lr, r8
   1d106:	fb08 ee10 	mls	lr, r8, r0, lr
   1d10a:	fb00 f909 	mul.w	r9, r0, r9
   1d10e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   1d112:	45f1      	cmp	r9, lr
   1d114:	d905      	bls.n	1d122 <__udivmoddi4+0x236>
   1d116:	eb12 0e0e 	adds.w	lr, r2, lr
   1d11a:	d201      	bcs.n	1d120 <__udivmoddi4+0x234>
   1d11c:	45f1      	cmp	r9, lr
   1d11e:	d838      	bhi.n	1d192 <__udivmoddi4+0x2a6>
   1d120:	3801      	subs	r0, #1
   1d122:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1d126:	ebae 0e09 	sub.w	lr, lr, r9
   1d12a:	fba0 890c 	umull	r8, r9, r0, ip
   1d12e:	45ce      	cmp	lr, r9
   1d130:	4641      	mov	r1, r8
   1d132:	464c      	mov	r4, r9
   1d134:	d302      	bcc.n	1d13c <__udivmoddi4+0x250>
   1d136:	d106      	bne.n	1d146 <__udivmoddi4+0x25a>
   1d138:	4543      	cmp	r3, r8
   1d13a:	d204      	bcs.n	1d146 <__udivmoddi4+0x25a>
   1d13c:	3801      	subs	r0, #1
   1d13e:	ebb8 010c 	subs.w	r1, r8, ip
   1d142:	eb69 0402 	sbc.w	r4, r9, r2
   1d146:	b315      	cbz	r5, 1d18e <__udivmoddi4+0x2a2>
   1d148:	1a5a      	subs	r2, r3, r1
   1d14a:	eb6e 0e04 	sbc.w	lr, lr, r4
   1d14e:	40f2      	lsrs	r2, r6
   1d150:	fa0e f707 	lsl.w	r7, lr, r7
   1d154:	fa2e f306 	lsr.w	r3, lr, r6
   1d158:	2600      	movs	r6, #0
   1d15a:	4317      	orrs	r7, r2
   1d15c:	e9c5 7300 	strd	r7, r3, [r5]
   1d160:	e70b      	b.n	1cf7a <__udivmoddi4+0x8e>
   1d162:	462e      	mov	r6, r5
   1d164:	4628      	mov	r0, r5
   1d166:	e708      	b.n	1cf7a <__udivmoddi4+0x8e>
   1d168:	1a84      	subs	r4, r0, r2
   1d16a:	eb61 0103 	sbc.w	r1, r1, r3
   1d16e:	2001      	movs	r0, #1
   1d170:	4688      	mov	r8, r1
   1d172:	e757      	b.n	1d024 <__udivmoddi4+0x138>
   1d174:	f1ac 0c02 	sub.w	ip, ip, #2
   1d178:	4439      	add	r1, r7
   1d17a:	e724      	b.n	1cfc6 <__udivmoddi4+0xda>
   1d17c:	3802      	subs	r0, #2
   1d17e:	443c      	add	r4, r7
   1d180:	e734      	b.n	1cfec <__udivmoddi4+0x100>
   1d182:	3802      	subs	r0, #2
   1d184:	443c      	add	r4, r7
   1d186:	e6ee      	b.n	1cf66 <__udivmoddi4+0x7a>
   1d188:	3e02      	subs	r6, #2
   1d18a:	443b      	add	r3, r7
   1d18c:	e6d9      	b.n	1cf42 <__udivmoddi4+0x56>
   1d18e:	462e      	mov	r6, r5
   1d190:	e6f3      	b.n	1cf7a <__udivmoddi4+0x8e>
   1d192:	3802      	subs	r0, #2
   1d194:	4496      	add	lr, r2
   1d196:	e7c4      	b.n	1d122 <__udivmoddi4+0x236>
   1d198:	3802      	subs	r0, #2
   1d19a:	4439      	add	r1, r7
   1d19c:	e76a      	b.n	1d074 <__udivmoddi4+0x188>
   1d19e:	f1aa 0a02 	sub.w	sl, sl, #2
   1d1a2:	4496      	add	lr, r2
   1d1a4:	e7aa      	b.n	1d0fc <__udivmoddi4+0x210>
   1d1a6:	3e02      	subs	r6, #2
   1d1a8:	4439      	add	r1, r7
   1d1aa:	e776      	b.n	1d09a <__udivmoddi4+0x1ae>

0001d1ac <__aeabi_idiv0>:
   1d1ac:	4770      	bx	lr
   1d1ae:	bf00      	nop

0001d1b0 <__aeabi_dcmpun>:
   1d1b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1d1b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d1b8:	d102      	bne.n	1d1c0 <__aeabi_dcmpun+0x10>
   1d1ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1d1be:	d10a      	bne.n	1d1d6 <__aeabi_dcmpun+0x26>
   1d1c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1d1c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d1c8:	d102      	bne.n	1d1d0 <__aeabi_dcmpun+0x20>
   1d1ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1d1ce:	d102      	bne.n	1d1d6 <__aeabi_dcmpun+0x26>
   1d1d0:	f04f 0000 	mov.w	r0, #0
   1d1d4:	4770      	bx	lr
   1d1d6:	f04f 0001 	mov.w	r0, #1
   1d1da:	4770      	bx	lr

0001d1dc <__aeabi_d2lz>:
   1d1dc:	b538      	push	{r3, r4, r5, lr}
   1d1de:	2200      	movs	r2, #0
   1d1e0:	2300      	movs	r3, #0
   1d1e2:	4604      	mov	r4, r0
   1d1e4:	460d      	mov	r5, r1
   1d1e6:	f7ff fd59 	bl	1cc9c <__aeabi_dcmplt>
   1d1ea:	b928      	cbnz	r0, 1d1f8 <__aeabi_d2lz+0x1c>
   1d1ec:	4620      	mov	r0, r4
   1d1ee:	4629      	mov	r1, r5
   1d1f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d1f4:	f000 b80a 	b.w	1d20c <__aeabi_d2ulz>
   1d1f8:	4620      	mov	r0, r4
   1d1fa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1d1fe:	f000 f805 	bl	1d20c <__aeabi_d2ulz>
   1d202:	4240      	negs	r0, r0
   1d204:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1d208:	bd38      	pop	{r3, r4, r5, pc}
   1d20a:	bf00      	nop

0001d20c <__aeabi_d2ulz>:
   1d20c:	b5d0      	push	{r4, r6, r7, lr}
   1d20e:	2200      	movs	r2, #0
   1d210:	4b0b      	ldr	r3, [pc, #44]	; (1d240 <__aeabi_d2ulz+0x34>)
   1d212:	4606      	mov	r6, r0
   1d214:	460f      	mov	r7, r1
   1d216:	f7ff facf 	bl	1c7b8 <__aeabi_dmul>
   1d21a:	f7ff fd8f 	bl	1cd3c <__aeabi_d2uiz>
   1d21e:	4604      	mov	r4, r0
   1d220:	f7ff fa50 	bl	1c6c4 <__aeabi_ui2d>
   1d224:	2200      	movs	r2, #0
   1d226:	4b07      	ldr	r3, [pc, #28]	; (1d244 <__aeabi_d2ulz+0x38>)
   1d228:	f7ff fac6 	bl	1c7b8 <__aeabi_dmul>
   1d22c:	4602      	mov	r2, r0
   1d22e:	460b      	mov	r3, r1
   1d230:	4630      	mov	r0, r6
   1d232:	4639      	mov	r1, r7
   1d234:	f7ff f908 	bl	1c448 <__aeabi_dsub>
   1d238:	f7ff fd80 	bl	1cd3c <__aeabi_d2uiz>
   1d23c:	4621      	mov	r1, r4
   1d23e:	bdd0      	pop	{r4, r6, r7, pc}
   1d240:	3df00000 	.word	0x3df00000
   1d244:	41f00000 	.word	0x41f00000

0001d248 <strcmp>:
   1d248:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d24c:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d250:	2a01      	cmp	r2, #1
   1d252:	bf28      	it	cs
   1d254:	429a      	cmpcs	r2, r3
   1d256:	d0f7      	beq.n	1d248 <strcmp>
   1d258:	1ad0      	subs	r0, r2, r3
   1d25a:	4770      	bx	lr

0001d25c <strlen>:
   1d25c:	4603      	mov	r3, r0
   1d25e:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d262:	2a00      	cmp	r2, #0
   1d264:	d1fb      	bne.n	1d25e <strlen+0x2>
   1d266:	1a18      	subs	r0, r3, r0
   1d268:	3801      	subs	r0, #1
   1d26a:	4770      	bx	lr
   1d26c:	0000      	movs	r0, r0
	...

0001d270 <motion_work_q_handler>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
}

/**@brief Workqueue handler that runs the callback provided by application.*/
static void motion_work_q_handler(struct k_work *work)
{
   1d270:	b570      	push	{r4, r5, r6, lr}
   1d272:	b096      	sub	sp, #88	; 0x58
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   1d274:	f027 fc5d 	bl	44b32 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1d278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d27c:	460a      	mov	r2, r1
   1d27e:	fba0 0103 	umull	r0, r1, r0, r3
   1d282:	fb03 1102 	mla	r1, r3, r2, r1
		err = sensor_sample_fetch_chan(accel_dev,
   1d286:	4c4e      	ldr	r4, [pc, #312]	; (1d3c0 <motion_work_q_handler+0x150>)
   1d288:	0bc3      	lsrs	r3, r0, #15
   1d28a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1d28e:	0bca      	lsrs	r2, r1, #15
	motion_data_t motion_data;

	motion_data.ts = k_uptime_get();
   1d290:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
		err = sensor_sample_fetch_chan(accel_dev,
   1d294:	6820      	ldr	r0, [r4, #0]
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   1d296:	6883      	ldr	r3, [r0, #8]
   1d298:	2103      	movs	r1, #3
   1d29a:	68db      	ldr	r3, [r3, #12]
   1d29c:	4798      	blx	r3
	if (err) {
   1d29e:	4601      	mov	r1, r0
   1d2a0:	b158      	cbz	r0, 1d2ba <motion_work_q_handler+0x4a>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1d2a2:	4848      	ldr	r0, [pc, #288]	; (1d3c4 <motion_work_q_handler+0x154>)
   1d2a4:	4b48      	ldr	r3, [pc, #288]	; (1d3c8 <motion_work_q_handler+0x158>)
		LOG_ERR("sensor_sample_fetch failed");
   1d2a6:	4949      	ldr	r1, [pc, #292]	; (1d3cc <motion_work_q_handler+0x15c>)
   1d2a8:	1ac0      	subs	r0, r0, r3
   1d2aa:	08c0      	lsrs	r0, r0, #3
   1d2ac:	0180      	lsls	r0, r0, #6
		LOG_ERR("sensor_channel_get failed");
   1d2ae:	f040 0001 	orr.w	r0, r0, #1
   1d2b2:	f024 fab5 	bl	41820 <log_string_sync>
		if (get_orientation(&motion_data.orientation,
					&motion_data.acceleration) == 0) {
			handler(motion_data);
		}
	}
}
   1d2b6:	b016      	add	sp, #88	; 0x58
   1d2b8:	bd70      	pop	{r4, r5, r6, pc}
	err = sensor_channel_get(accel_dev,
   1d2ba:	6820      	ldr	r0, [r4, #0]
   1d2bc:	aa06      	add	r2, sp, #24
   1d2be:	f024 f80a 	bl	412d6 <sensor_channel_get>
	if (err) {
   1d2c2:	b130      	cbz	r0, 1d2d2 <motion_work_q_handler+0x62>
   1d2c4:	483f      	ldr	r0, [pc, #252]	; (1d3c4 <motion_work_q_handler+0x154>)
   1d2c6:	4b40      	ldr	r3, [pc, #256]	; (1d3c8 <motion_work_q_handler+0x158>)
		LOG_ERR("sensor_channel_get failed");
   1d2c8:	4941      	ldr	r1, [pc, #260]	; (1d3d0 <motion_work_q_handler+0x160>)
   1d2ca:	1ac0      	subs	r0, r0, r3
   1d2cc:	08c0      	lsrs	r0, r0, #3
   1d2ce:	0180      	lsls	r0, r0, #6
   1d2d0:	e7ed      	b.n	1d2ae <motion_work_q_handler+0x3e>
	err = sensor_channel_get(accel_dev,
   1d2d2:	2101      	movs	r1, #1
   1d2d4:	6820      	ldr	r0, [r4, #0]
   1d2d6:	aa08      	add	r2, sp, #32
   1d2d8:	f023 fffd 	bl	412d6 <sensor_channel_get>
	if (err) {
   1d2dc:	2800      	cmp	r0, #0
   1d2de:	d1f1      	bne.n	1d2c4 <motion_work_q_handler+0x54>
	err = sensor_channel_get(accel_dev,
   1d2e0:	2102      	movs	r1, #2
   1d2e2:	6820      	ldr	r0, [r4, #0]
   1d2e4:	aa0a      	add	r2, sp, #40	; 0x28
   1d2e6:	f023 fff6 	bl	412d6 <sensor_channel_get>
	if (err) {
   1d2ea:	2800      	cmp	r0, #0
   1d2ec:	d1ea      	bne.n	1d2c4 <motion_work_q_handler+0x54>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d2ee:	9807      	ldr	r0, [sp, #28]
   1d2f0:	f7ff f9f8 	bl	1c6e4 <__aeabi_i2d>
   1d2f4:	a330      	add	r3, pc, #192	; (adr r3, 1d3b8 <motion_work_q_handler+0x148>)
   1d2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2fa:	f7ff fb87 	bl	1ca0c <__aeabi_ddiv>
   1d2fe:	4604      	mov	r4, r0
   1d300:	9806      	ldr	r0, [sp, #24]
   1d302:	460d      	mov	r5, r1
   1d304:	f7ff f9ee 	bl	1c6e4 <__aeabi_i2d>
   1d308:	4602      	mov	r2, r0
   1d30a:	460b      	mov	r3, r1
   1d30c:	4620      	mov	r0, r4
   1d30e:	4629      	mov	r1, r5
   1d310:	f7ff f89c 	bl	1c44c <__adddf3>
	sensor_data->x = sensor_value_to_double(&accel_data[0]);
   1d314:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1d318:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d31a:	f7ff f9e3 	bl	1c6e4 <__aeabi_i2d>
   1d31e:	a326      	add	r3, pc, #152	; (adr r3, 1d3b8 <motion_work_q_handler+0x148>)
   1d320:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d324:	f7ff fb72 	bl	1ca0c <__aeabi_ddiv>
   1d328:	4604      	mov	r4, r0
   1d32a:	9808      	ldr	r0, [sp, #32]
   1d32c:	460d      	mov	r5, r1
   1d32e:	f7ff f9d9 	bl	1c6e4 <__aeabi_i2d>
   1d332:	4602      	mov	r2, r0
   1d334:	460b      	mov	r3, r1
   1d336:	4620      	mov	r0, r4
   1d338:	4629      	mov	r1, r5
   1d33a:	f7ff f887 	bl	1c44c <__adddf3>
	sensor_data->y = sensor_value_to_double(&accel_data[1]);
   1d33e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1d342:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1d344:	f7ff f9ce 	bl	1c6e4 <__aeabi_i2d>
   1d348:	a31b      	add	r3, pc, #108	; (adr r3, 1d3b8 <motion_work_q_handler+0x148>)
   1d34a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d34e:	f7ff fb5d 	bl	1ca0c <__aeabi_ddiv>
   1d352:	4604      	mov	r4, r0
   1d354:	980a      	ldr	r0, [sp, #40]	; 0x28
   1d356:	460d      	mov	r5, r1
   1d358:	f7ff f9c4 	bl	1c6e4 <__aeabi_i2d>
   1d35c:	4602      	mov	r2, r0
   1d35e:	460b      	mov	r3, r1
   1d360:	4620      	mov	r0, r4
   1d362:	4629      	mov	r1, r5
   1d364:	f7ff f872 	bl	1c44c <__adddf3>
	if (acceleration_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1d368:	2200      	movs	r2, #0
   1d36a:	4b1a      	ldr	r3, [pc, #104]	; (1d3d4 <motion_work_q_handler+0x164>)
   1d36c:	4604      	mov	r4, r0
   1d36e:	460d      	mov	r5, r1
   1d370:	f7ff fca8 	bl	1ccc4 <__aeabi_dcmpge>
   1d374:	b190      	cbz	r0, 1d39c <motion_work_q_handler+0x12c>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d376:	2301      	movs	r3, #1
			handler(motion_data);
   1d378:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
   1d37c:	466c      	mov	r4, sp
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d37e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			handler(motion_data);
   1d382:	4b15      	ldr	r3, [pc, #84]	; (1d3d8 <motion_work_q_handler+0x168>)
   1d384:	ad10      	add	r5, sp, #64	; 0x40
   1d386:	681e      	ldr	r6, [r3, #0]
   1d388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d38a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d38c:	e895 0003 	ldmia.w	r5, {r0, r1}
   1d390:	e884 0003 	stmia.w	r4, {r0, r1}
   1d394:	ab0c      	add	r3, sp, #48	; 0x30
   1d396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d398:	47b0      	blx	r6
}
   1d39a:	e78c      	b.n	1d2b6 <motion_work_q_handler+0x46>
	} else if (acceleration_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
   1d39c:	2200      	movs	r2, #0
   1d39e:	4620      	mov	r0, r4
   1d3a0:	4629      	mov	r1, r5
   1d3a2:	4b0e      	ldr	r3, [pc, #56]	; (1d3dc <motion_work_q_handler+0x16c>)
   1d3a4:	f7ff fc84 	bl	1ccb0 <__aeabi_dcmple>
   1d3a8:	b108      	cbz	r0, 1d3ae <motion_work_q_handler+0x13e>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d3aa:	2302      	movs	r3, #2
   1d3ac:	e7e4      	b.n	1d378 <motion_work_q_handler+0x108>
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d3ae:	2303      	movs	r3, #3
   1d3b0:	e7e2      	b.n	1d378 <motion_work_q_handler+0x108>
   1d3b2:	bf00      	nop
   1d3b4:	f3af 8000 	nop.w
   1d3b8:	00000000 	.word	0x00000000
   1d3bc:	412e8480 	.word	0x412e8480
   1d3c0:	20024650 	.word	0x20024650
   1d3c4:	00046484 	.word	0x00046484
   1d3c8:	000463bc 	.word	0x000463bc
   1d3cc:	0004831e 	.word	0x0004831e
   1d3d0:	00048339 	.word	0x00048339
   1d3d4:	40140000 	.word	0x40140000
   1d3d8:	20024654 	.word	0x20024654
   1d3dc:	c0140000 	.word	0xc0140000

0001d3e0 <env_sensors_poll_fn>:
{
	return initialized ? submit_poll_work(0) : -ENXIO;
}

static void env_sensors_poll_fn(struct k_work *work)
{
   1d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3e4:	b08b      	sub	sp, #44	; 0x2c
	int num_sensors = ARRAY_SIZE(env_sensors);
	struct sensor_value data[num_sensors];

	int err;

	if (data_send_interval_s == 0) {
   1d3e6:	4b5e      	ldr	r3, [pc, #376]	; (1d560 <env_sensors_poll_fn+0x180>)
{
   1d3e8:	af00      	add	r7, sp, #0
	if (data_send_interval_s == 0) {
   1d3ea:	681a      	ldr	r2, [r3, #0]
{
   1d3ec:	46eb      	mov	fp, sp
	if (data_send_interval_s == 0) {
   1d3ee:	607b      	str	r3, [r7, #4]
   1d3f0:	2a00      	cmp	r2, #0
   1d3f2:	d046      	beq.n	1d482 <env_sensors_poll_fn+0xa2>
   1d3f4:	4b5b      	ldr	r3, [pc, #364]	; (1d564 <env_sensors_poll_fn+0x184>)
   1d3f6:	4c5c      	ldr	r4, [pc, #368]	; (1d568 <env_sensors_poll_fn+0x188>)
   1d3f8:	4d5c      	ldr	r5, [pc, #368]	; (1d56c <env_sensors_poll_fn+0x18c>)
   1d3fa:	1ae4      	subs	r4, r4, r3
   1d3fc:	2303      	movs	r3, #3
   1d3fe:	08e4      	lsrs	r4, r4, #3
	for (int i = 0; i < num_sensors; i++) {
		if (!(IS_ENABLED(CONFIG_BME680))) {
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
				env_sensors[i]->channel);
			if (err) {
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d400:	01a4      	lsls	r4, r4, #6
   1d402:	f107 0610 	add.w	r6, r7, #16
   1d406:	60fb      	str	r3, [r7, #12]
   1d408:	f044 0401 	orr.w	r4, r4, #1
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
   1d40c:	f855 3b04 	ldr.w	r3, [r5], #4
   1d410:	6a18      	ldr	r0, [r3, #32]
   1d412:	8b19      	ldrh	r1, [r3, #24]
	return api->sample_fetch(dev, type);
   1d414:	6883      	ldr	r3, [r0, #8]
   1d416:	68db      	ldr	r3, [r3, #12]
   1d418:	4798      	blx	r3
			if (err) {
   1d41a:	4680      	mov	r8, r0
   1d41c:	b150      	cbz	r0, 1d434 <env_sensors_poll_fn+0x54>
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d41e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1d422:	69d8      	ldr	r0, [r3, #28]
   1d424:	f024 fa0f 	bl	41846 <log_strdup>
   1d428:	4643      	mov	r3, r8
   1d42a:	4602      	mov	r2, r0
   1d42c:	4950      	ldr	r1, [pc, #320]	; (1d570 <env_sensors_poll_fn+0x190>)
   1d42e:	4620      	mov	r0, r4
   1d430:	f024 f9f6 	bl	41820 <log_string_sync>
					log_strdup(env_sensors[i]->dev_name), err);
			}
		}
		err = sensor_channel_get(env_sensors[i]->dev,
   1d434:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1d438:	6a18      	ldr	r0, [r3, #32]
   1d43a:	8b19      	ldrh	r1, [r3, #24]
	return api->channel_get(dev, chan, val);
   1d43c:	6883      	ldr	r3, [r0, #8]
   1d43e:	4632      	mov	r2, r6
   1d440:	691b      	ldr	r3, [r3, #16]
   1d442:	4798      	blx	r3
			env_sensors[i]->channel, &data[i]);
		if (err) {
   1d444:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1d448:	4681      	mov	r9, r0
   1d44a:	b1f0      	cbz	r0, 1d48a <env_sensors_poll_fn+0xaa>
			LOG_ERR("Failed to fetch data from %s, error: %d",
   1d44c:	69d8      	ldr	r0, [r3, #28]
   1d44e:	f024 f9fa 	bl	41846 <log_strdup>
   1d452:	464b      	mov	r3, r9
   1d454:	4602      	mov	r2, r0
   1d456:	4946      	ldr	r1, [pc, #280]	; (1d570 <env_sensors_poll_fn+0x190>)
   1d458:	4620      	mov	r0, r4
   1d45a:	f024 f9e1 	bl	41820 <log_string_sync>
	for (int i = 0; i < num_sensors; i++) {
   1d45e:	68fb      	ldr	r3, [r7, #12]
   1d460:	3608      	adds	r6, #8
   1d462:	3b01      	subs	r3, #1
   1d464:	60fb      	str	r3, [r7, #12]
   1d466:	d1d1      	bne.n	1d40c <env_sensors_poll_fn+0x2c>
			env_sensors[i]->sensor.ts = k_uptime_get();
			k_spin_unlock(&(env_sensors[i]->lock), key);
		}
	}

	if (data_ready_cb) {
   1d468:	4b42      	ldr	r3, [pc, #264]	; (1d574 <env_sensors_poll_fn+0x194>)
   1d46a:	681b      	ldr	r3, [r3, #0]
   1d46c:	b103      	cbz	r3, 1d470 <env_sensors_poll_fn+0x90>
		data_ready_cb();
   1d46e:	4798      	blx	r3
	}

	submit_poll_work(backoff_enabled ?
   1d470:	4b41      	ldr	r3, [pc, #260]	; (1d578 <env_sensors_poll_fn+0x198>)
   1d472:	781b      	ldrb	r3, [r3, #0]
   1d474:	2b00      	cmp	r3, #0
   1d476:	d16a      	bne.n	1d54e <env_sensors_poll_fn+0x16e>
   1d478:	687b      	ldr	r3, [r7, #4]
   1d47a:	6818      	ldr	r0, [r3, #0]
   1d47c:	f006 f924 	bl	236c8 <submit_poll_work>
   1d480:	46dd      	mov	sp, fp
		CONFIG_ENVIRONMENT_DATA_BACKOFF_TIME : data_send_interval_s);
}
   1d482:	372c      	adds	r7, #44	; 0x2c
   1d484:	46bd      	mov	sp, r7
   1d486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			k_spinlock_key_t key = k_spin_lock(&(env_sensors[i]->lock));
   1d48a:	f103 0824 	add.w	r8, r3, #36	; 0x24
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1d48e:	f04f 0320 	mov.w	r3, #32
   1d492:	f3ef 8211 	mrs	r2, BASEPRI
   1d496:	f383 8811 	msr	BASEPRI, r3
   1d49a:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d49e:	4640      	mov	r0, r8
   1d4a0:	60ba      	str	r2, [r7, #8]
   1d4a2:	f020 fd49 	bl	3df38 <z_spin_lock_valid>
   1d4a6:	b968      	cbnz	r0, 1d4c4 <env_sensors_poll_fn+0xe4>
   1d4a8:	235c      	movs	r3, #92	; 0x5c
   1d4aa:	4a34      	ldr	r2, [pc, #208]	; (1d57c <env_sensors_poll_fn+0x19c>)
   1d4ac:	4934      	ldr	r1, [pc, #208]	; (1d580 <env_sensors_poll_fn+0x1a0>)
   1d4ae:	4835      	ldr	r0, [pc, #212]	; (1d584 <env_sensors_poll_fn+0x1a4>)
   1d4b0:	f023 ff88 	bl	413c4 <printk>
   1d4b4:	4641      	mov	r1, r8
   1d4b6:	4834      	ldr	r0, [pc, #208]	; (1d588 <env_sensors_poll_fn+0x1a8>)
   1d4b8:	f023 ff84 	bl	413c4 <printk>
   1d4bc:	215c      	movs	r1, #92	; 0x5c
   1d4be:	482f      	ldr	r0, [pc, #188]	; (1d57c <env_sensors_poll_fn+0x19c>)
   1d4c0:	f024 f99d 	bl	417fe <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   1d4c4:	4640      	mov	r0, r8
   1d4c6:	f020 fd55 	bl	3df74 <z_spin_lock_set_owner>
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d4ca:	6870      	ldr	r0, [r6, #4]
   1d4cc:	f7ff f90a 	bl	1c6e4 <__aeabi_i2d>
   1d4d0:	a321      	add	r3, pc, #132	; (adr r3, 1d558 <env_sensors_poll_fn+0x178>)
   1d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d4d6:	f7ff fa99 	bl	1ca0c <__aeabi_ddiv>
   1d4da:	4680      	mov	r8, r0
   1d4dc:	6830      	ldr	r0, [r6, #0]
   1d4de:	4689      	mov	r9, r1
   1d4e0:	f7ff f900 	bl	1c6e4 <__aeabi_i2d>
   1d4e4:	4602      	mov	r2, r0
   1d4e6:	460b      	mov	r3, r1
   1d4e8:	4640      	mov	r0, r8
   1d4ea:	4649      	mov	r1, r9
   1d4ec:	f7fe ffae 	bl	1c44c <__adddf3>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
   1d4f0:	f855 ac04 	ldr.w	sl, [r5, #-4]
   1d4f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1d4f8:	f027 fb1b 	bl	44b32 <z_impl_k_uptime_ticks>
   1d4fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d500:	460a      	mov	r2, r1
   1d502:	fba0 0103 	umull	r0, r1, r0, r3
   1d506:	fb03 1102 	mla	r1, r3, r2, r1
   1d50a:	0bc3      	lsrs	r3, r0, #15
   1d50c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1d510:	0bca      	lsrs	r2, r1, #15
			env_sensors[i]->sensor.ts = k_uptime_get();
   1d512:	e9ca 3204 	strd	r3, r2, [sl, #16]
			k_spin_unlock(&(env_sensors[i]->lock), key);
   1d516:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1d51a:	f103 0824 	add.w	r8, r3, #36	; 0x24
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d51e:	4640      	mov	r0, r8
   1d520:	f020 fd18 	bl	3df54 <z_spin_unlock_valid>
   1d524:	b968      	cbnz	r0, 1d542 <env_sensors_poll_fn+0x162>
   1d526:	2384      	movs	r3, #132	; 0x84
   1d528:	4a14      	ldr	r2, [pc, #80]	; (1d57c <env_sensors_poll_fn+0x19c>)
   1d52a:	4918      	ldr	r1, [pc, #96]	; (1d58c <env_sensors_poll_fn+0x1ac>)
   1d52c:	4815      	ldr	r0, [pc, #84]	; (1d584 <env_sensors_poll_fn+0x1a4>)
   1d52e:	f023 ff49 	bl	413c4 <printk>
   1d532:	4641      	mov	r1, r8
   1d534:	4816      	ldr	r0, [pc, #88]	; (1d590 <env_sensors_poll_fn+0x1b0>)
   1d536:	f023 ff45 	bl	413c4 <printk>
   1d53a:	2184      	movs	r1, #132	; 0x84
   1d53c:	480f      	ldr	r0, [pc, #60]	; (1d57c <env_sensors_poll_fn+0x19c>)
   1d53e:	f024 f95e 	bl	417fe <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1d542:	68bb      	ldr	r3, [r7, #8]
   1d544:	f383 8811 	msr	BASEPRI, r3
   1d548:	f3bf 8f6f 	isb	sy
   1d54c:	e787      	b.n	1d45e <env_sensors_poll_fn+0x7e>
	submit_poll_work(backoff_enabled ?
   1d54e:	2014      	movs	r0, #20
   1d550:	e794      	b.n	1d47c <env_sensors_poll_fn+0x9c>
   1d552:	bf00      	nop
   1d554:	f3af 8000 	nop.w
   1d558:	00000000 	.word	0x00000000
   1d55c:	412e8480 	.word	0x412e8480
   1d560:	20020640 	.word	0x20020640
   1d564:	000463bc 	.word	0x000463bc
   1d568:	00046444 	.word	0x00046444
   1d56c:	000467b0 	.word	0x000467b0
   1d570:	000488d2 	.word	0x000488d2
   1d574:	20024678 	.word	0x20024678
   1d578:	2002b0d7 	.word	0x2002b0d7
   1d57c:	000488fa 	.word	0x000488fa
   1d580:	00048920 	.word	0x00048920
   1d584:	00048156 	.word	0x00048156
   1d588:	00048935 	.word	0x00048935
   1d58c:	0004894d 	.word	0x0004894d
   1d590:	00048964 	.word	0x00048964
   1d594:	00000000 	.word	0x00000000

0001d598 <sntp_query>:

	return res;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   1d598:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   1d59c:	4604      	mov	r4, r0
   1d59e:	b09a      	sub	sp, #104	; 0x68
   1d5a0:	460f      	mov	r7, r1
   1d5a2:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   1d5a4:	2100      	movs	r1, #0
   1d5a6:	2230      	movs	r2, #48	; 0x30
   1d5a8:	a802      	add	r0, sp, #8
   1d5aa:	f027 fbbc 	bl	44d26 <memset>
	int ret = 0;

	if (!ctx || !time) {
   1d5ae:	2c00      	cmp	r4, #0
   1d5b0:	f000 8087 	beq.w	1d6c2 <sntp_query+0x12a>
   1d5b4:	2e00      	cmp	r6, #0
   1d5b6:	f000 8084 	beq.w	1d6c2 <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   1d5ba:	231b      	movs	r3, #27
   1d5bc:	f88d 3008 	strb.w	r3, [sp, #8]
   1d5c0:	f027 fab7 	bl	44b32 <z_impl_k_uptime_ticks>
   1d5c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d5c8:	2500      	movs	r5, #0
   1d5ca:	fba0 bc03 	umull	fp, ip, r0, r3
   1d5ce:	fb03 cc01 	mla	ip, r3, r1, ip
   1d5d2:	ea4f 30db 	mov.w	r0, fp, lsr #15
	return time / MSEC_PER_SEC;
   1d5d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d5da:	2300      	movs	r3, #0
   1d5dc:	4629      	mov	r1, r5
   1d5de:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
   1d5e2:	f7ff fc6b 	bl	1cebc <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1d5e6:	4a3c      	ldr	r2, [pc, #240]	; (1d6d8 <sntp_query+0x140>)
   1d5e8:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1d5ea:	0a13      	lsrs	r3, r2, #8
   1d5ec:	0211      	lsls	r1, r2, #8
   1d5ee:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1d5f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1d5f6:	430b      	orrs	r3, r1
   1d5f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1d5fc:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   1d600:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1d602:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1d604:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1d606:	2230      	movs	r2, #48	; 0x30
   1d608:	462b      	mov	r3, r5
   1d60a:	e9cd 5500 	strd	r5, r5, [sp]
   1d60e:	a902      	add	r1, sp, #8
   1d610:	f024 fcea 	bl	41fe8 <z_impl_zsock_sendto>
	if (ret < 0) {
   1d614:	2800      	cmp	r0, #0
   1d616:	db0f      	blt.n	1d638 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   1d618:	4629      	mov	r1, r5
   1d61a:	2230      	movs	r2, #48	; 0x30
   1d61c:	a80e      	add	r0, sp, #56	; 0x38
   1d61e:	f027 fb82 	bl	44d26 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   1d622:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   1d624:	463a      	mov	r2, r7
   1d626:	4620      	mov	r0, r4
   1d628:	f007 fe78 	bl	2531c <z_impl_zsock_poll>
	if (status < 0) {
   1d62c:	42a8      	cmp	r0, r5
   1d62e:	da06      	bge.n	1d63e <sntp_query+0xa6>
		return -errno;
   1d630:	f025 f81f 	bl	42672 <__errno>
   1d634:	6800      	ldr	r0, [r0, #0]
   1d636:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   1d638:	b01a      	add	sp, #104	; 0x68
   1d63a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	if (status == 0) {
   1d63e:	d037      	beq.n	1d6b0 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   1d640:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1d642:	2230      	movs	r2, #48	; 0x30
   1d644:	462b      	mov	r3, r5
   1d646:	e9cd 5500 	strd	r5, r5, [sp]
   1d64a:	a90e      	add	r1, sp, #56	; 0x38
   1d64c:	f024 fcff 	bl	4204e <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   1d650:	2800      	cmp	r0, #0
   1d652:	dbed      	blt.n	1d630 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   1d654:	2830      	cmp	r0, #48	; 0x30
   1d656:	d12e      	bne.n	1d6b6 <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   1d658:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1d65a:	6922      	ldr	r2, [r4, #16]
   1d65c:	ba1b      	rev	r3, r3
   1d65e:	429a      	cmp	r2, r3
   1d660:	d002      	beq.n	1d668 <sntp_query+0xd0>
		return -EINVAL;
   1d662:	f06f 0015 	mvn.w	r0, #21
   1d666:	e7e7      	b.n	1d638 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   1d668:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d66c:	f003 0307 	and.w	r3, r3, #7
   1d670:	2b04      	cmp	r3, #4
   1d672:	d1f6      	bne.n	1d662 <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   1d674:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d678:	b303      	cbz	r3, 1d6bc <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   1d67a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1d67c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1d67e:	ba1b      	rev	r3, r3
   1d680:	ba12      	rev	r2, r2
   1d682:	ea53 0102 	orrs.w	r1, r3, r2
   1d686:	d0ec      	beq.n	1d662 <sntp_query+0xca>
	if (ts & 0x80000000) {
   1d688:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   1d68a:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   1d68c:	da0c      	bge.n	1d6a8 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   1d68e:	4a13      	ldr	r2, [pc, #76]	; (1d6dc <sntp_query+0x144>)
   1d690:	4293      	cmp	r3, r2
   1d692:	d9e6      	bls.n	1d662 <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   1d694:	a10c      	add	r1, pc, #48	; (adr r1, 1d6c8 <sntp_query+0x130>)
   1d696:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1d69a:	18c0      	adds	r0, r0, r3
   1d69c:	f141 0100 	adc.w	r1, r1, #0
   1d6a0:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
   1d6a4:	2000      	movs	r0, #0
   1d6a6:	e7c7      	b.n	1d638 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1d6a8:	a109      	add	r1, pc, #36	; (adr r1, 1d6d0 <sntp_query+0x138>)
   1d6aa:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d6ae:	e7f4      	b.n	1d69a <sntp_query+0x102>
		return -ETIMEDOUT;
   1d6b0:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1d6b4:	e7c0      	b.n	1d638 <sntp_query+0xa0>
		return -EMSGSIZE;
   1d6b6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1d6ba:	e7bd      	b.n	1d638 <sntp_query+0xa0>
		return -EBUSY;
   1d6bc:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   1d6c0:	e7ba      	b.n	1d638 <sntp_query+0xa0>
		return -EFAULT;
   1d6c2:	f06f 000d 	mvn.w	r0, #13
   1d6c6:	e7b7      	b.n	1d638 <sntp_query+0xa0>
   1d6c8:	7c558180 	.word	0x7c558180
   1d6cc:	ffffffff 	.word	0xffffffff
   1d6d0:	7c558180 	.word	0x7c558180
   1d6d4:	00000000 	.word	0x00000000
   1d6d8:	83aa7e80 	.word	0x83aa7e80
   1d6dc:	83aa7e7f 	.word	0x83aa7e7f

0001d6e0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1d6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d6e4:	4605      	mov	r5, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d6e6:	460c      	mov	r4, r1
{
   1d6e8:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d6ea:	b909      	cbnz	r1, 1d6f0 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1d6ec:	2000      	movs	r0, #0
   1d6ee:	e025      	b.n	1d73c <parse_value+0x5c>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d6f0:	6808      	ldr	r0, [r1, #0]
   1d6f2:	2800      	cmp	r0, #0
   1d6f4:	d0fa      	beq.n	1d6ec <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1d6f6:	688b      	ldr	r3, [r1, #8]
   1d6f8:	6862      	ldr	r2, [r4, #4]
   1d6fa:	1d19      	adds	r1, r3, #4
   1d6fc:	4291      	cmp	r1, r2
   1d6fe:	d80c      	bhi.n	1d71a <parse_value+0x3a>
   1d700:	2204      	movs	r2, #4
   1d702:	4991      	ldr	r1, [pc, #580]	; (1d948 <parse_value+0x268>)
   1d704:	4418      	add	r0, r3
   1d706:	f027 fcee 	bl	450e6 <strncmp>
   1d70a:	b930      	cbnz	r0, 1d71a <parse_value+0x3a>
        item->type = cJSON_NULL;
   1d70c:	2304      	movs	r3, #4
   1d70e:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1d710:	68a3      	ldr	r3, [r4, #8]
   1d712:	3304      	adds	r3, #4
    return true;
   1d714:	2001      	movs	r0, #1
    input_buffer->offset++;
   1d716:	60a3      	str	r3, [r4, #8]
    return true;
   1d718:	e010      	b.n	1d73c <parse_value+0x5c>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1d71a:	68a3      	ldr	r3, [r4, #8]
   1d71c:	6862      	ldr	r2, [r4, #4]
   1d71e:	1d59      	adds	r1, r3, #5
   1d720:	4291      	cmp	r1, r2
   1d722:	d80e      	bhi.n	1d742 <parse_value+0x62>
   1d724:	6820      	ldr	r0, [r4, #0]
   1d726:	2205      	movs	r2, #5
   1d728:	4988      	ldr	r1, [pc, #544]	; (1d94c <parse_value+0x26c>)
   1d72a:	4418      	add	r0, r3
   1d72c:	f027 fcdb 	bl	450e6 <strncmp>
   1d730:	b938      	cbnz	r0, 1d742 <parse_value+0x62>
        item->type = cJSON_False;
   1d732:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1d734:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_False;
   1d736:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
   1d738:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   1d73a:	60a2      	str	r2, [r4, #8]
}
   1d73c:	b013      	add	sp, #76	; 0x4c
   1d73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1d742:	68a3      	ldr	r3, [r4, #8]
   1d744:	6862      	ldr	r2, [r4, #4]
   1d746:	1d19      	adds	r1, r3, #4
   1d748:	4291      	cmp	r1, r2
   1d74a:	d80d      	bhi.n	1d768 <parse_value+0x88>
   1d74c:	6820      	ldr	r0, [r4, #0]
   1d74e:	2204      	movs	r2, #4
   1d750:	497f      	ldr	r1, [pc, #508]	; (1d950 <parse_value+0x270>)
   1d752:	4418      	add	r0, r3
   1d754:	f027 fcc7 	bl	450e6 <strncmp>
   1d758:	b930      	cbnz	r0, 1d768 <parse_value+0x88>
        item->type = cJSON_True;
   1d75a:	2302      	movs	r3, #2
        item->valueint = 1;
   1d75c:	2001      	movs	r0, #1
        input_buffer->offset += 4;
   1d75e:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_True;
   1d760:	60eb      	str	r3, [r5, #12]
        item->valueint = 1;
   1d762:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
   1d764:	3204      	adds	r2, #4
   1d766:	e7e8      	b.n	1d73a <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1d768:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   1d76c:	4283      	cmp	r3, r0
   1d76e:	d2bd      	bcs.n	1d6ec <parse_value+0xc>
   1d770:	6821      	ldr	r1, [r4, #0]
   1d772:	5cca      	ldrb	r2, [r1, r3]
   1d774:	18ce      	adds	r6, r1, r3
   1d776:	2a22      	cmp	r2, #34	; 0x22
   1d778:	d104      	bne.n	1d784 <parse_value+0xa4>
        return parse_string(item, input_buffer);
   1d77a:	4621      	mov	r1, r4
   1d77c:	4628      	mov	r0, r5
   1d77e:	f00b f8b3 	bl	288e8 <parse_string>
   1d782:	e7db      	b.n	1d73c <parse_value+0x5c>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1d784:	2a2d      	cmp	r2, #45	; 0x2d
   1d786:	d003      	beq.n	1d790 <parse_value+0xb0>
   1d788:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
   1d78c:	2f09      	cmp	r7, #9
   1d78e:	d85e      	bhi.n	1d84e <parse_value+0x16e>
    unsigned char *after_end = NULL;
   1d790:	2200      	movs	r2, #0
   1d792:	9201      	str	r2, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d794:	2900      	cmp	r1, #0
   1d796:	d0a9      	beq.n	1d6ec <parse_value+0xc>
                number_c_string[i] = decimal_point;
   1d798:	272e      	movs	r7, #46	; 0x2e
   1d79a:	1ac3      	subs	r3, r0, r3
   1d79c:	f10d 0808 	add.w	r8, sp, #8
        switch (buffer_at_offset(input_buffer)[i])
   1d7a0:	f816 1b01 	ldrb.w	r1, [r6], #1
   1d7a4:	2939      	cmp	r1, #57	; 0x39
   1d7a6:	d80f      	bhi.n	1d7c8 <parse_value+0xe8>
   1d7a8:	292a      	cmp	r1, #42	; 0x2a
   1d7aa:	d918      	bls.n	1d7de <parse_value+0xfe>
   1d7ac:	f1a1 002b 	sub.w	r0, r1, #43	; 0x2b
   1d7b0:	280e      	cmp	r0, #14
   1d7b2:	d814      	bhi.n	1d7de <parse_value+0xfe>
   1d7b4:	e8df f000 	tbb	[pc, r0]
   1d7b8:	380c130c 	.word	0x380c130c
   1d7bc:	0c0c0c13 	.word	0x0c0c0c13
   1d7c0:	0c0c0c0c 	.word	0x0c0c0c0c
   1d7c4:	0c0c      	.short	0x0c0c
   1d7c6:	0c          	.byte	0x0c
   1d7c7:	00          	.byte	0x00
   1d7c8:	f001 00df 	and.w	r0, r1, #223	; 0xdf
   1d7cc:	2845      	cmp	r0, #69	; 0x45
   1d7ce:	d106      	bne.n	1d7de <parse_value+0xfe>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   1d7d0:	f808 1002 	strb.w	r1, [r8, r2]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d7d4:	3201      	adds	r2, #1
   1d7d6:	2a3f      	cmp	r2, #63	; 0x3f
   1d7d8:	d001      	beq.n	1d7de <parse_value+0xfe>
   1d7da:	429a      	cmp	r2, r3
   1d7dc:	d1e0      	bne.n	1d7a0 <parse_value+0xc0>
    number_c_string[i] = '\0';
   1d7de:	ab12      	add	r3, sp, #72	; 0x48
   1d7e0:	441a      	add	r2, r3
   1d7e2:	2300      	movs	r3, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d7e4:	4640      	mov	r0, r8
   1d7e6:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
   1d7e8:	f802 3c40 	strb.w	r3, [r2, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d7ec:	f022 fa2e 	bl	3fc4c <strtod>
    if (number_c_string == after_end)
   1d7f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d7f4:	ec57 6b10 	vmov	r6, r7, d0
    if (number_c_string == after_end)
   1d7f8:	45c1      	cmp	r9, r8
   1d7fa:	f43f af77 	beq.w	1d6ec <parse_value+0xc>
    if (number >= INT_MAX)
   1d7fe:	a350      	add	r3, pc, #320	; (adr r3, 1d940 <parse_value+0x260>)
   1d800:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1d804:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
   1d808:	ee10 0a10 	vmov	r0, s0
   1d80c:	4639      	mov	r1, r7
   1d80e:	f7ff fa59 	bl	1ccc4 <__aeabi_dcmpge>
   1d812:	b160      	cbz	r0, 1d82e <parse_value+0x14e>
        item->valueint = INT_MAX;
   1d814:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1d818:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
   1d81a:	2308      	movs	r3, #8
   1d81c:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d81e:	68a3      	ldr	r3, [r4, #8]
   1d820:	eba9 0808 	sub.w	r8, r9, r8
   1d824:	4443      	add	r3, r8
   1d826:	e775      	b.n	1d714 <parse_value+0x34>
                number_c_string[i] = decimal_point;
   1d828:	f808 7002 	strb.w	r7, [r8, r2]
                break;
   1d82c:	e7d2      	b.n	1d7d4 <parse_value+0xf4>
    else if (number <= (double)INT_MIN)
   1d82e:	2200      	movs	r2, #0
   1d830:	4630      	mov	r0, r6
   1d832:	4639      	mov	r1, r7
   1d834:	4b47      	ldr	r3, [pc, #284]	; (1d954 <parse_value+0x274>)
   1d836:	f7ff fa3b 	bl	1ccb0 <__aeabi_dcmple>
   1d83a:	b110      	cbz	r0, 1d842 <parse_value+0x162>
        item->valueint = INT_MIN;
   1d83c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d840:	e7ea      	b.n	1d818 <parse_value+0x138>
        item->valueint = (int)number;
   1d842:	4630      	mov	r0, r6
   1d844:	4639      	mov	r1, r7
   1d846:	f7ff fa51 	bl	1ccec <__aeabi_d2iz>
   1d84a:	6168      	str	r0, [r5, #20]
   1d84c:	e7e5      	b.n	1d81a <parse_value+0x13a>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1d84e:	2a5b      	cmp	r2, #91	; 0x5b
   1d850:	d150      	bne.n	1d8f4 <parse_value+0x214>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d852:	68e2      	ldr	r2, [r4, #12]
   1d854:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1d858:	f4bf af48 	bcs.w	1d6ec <parse_value+0xc>
    input_buffer->depth++;
   1d85c:	3201      	adds	r2, #1
   1d85e:	60e2      	str	r2, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1d860:	5cca      	ldrb	r2, [r1, r3]
   1d862:	2a5b      	cmp	r2, #91	; 0x5b
   1d864:	f47f af42 	bne.w	1d6ec <parse_value+0xc>
    input_buffer->offset++;
   1d868:	3301      	adds	r3, #1
   1d86a:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d86c:	4620      	mov	r0, r4
   1d86e:	f026 f829 	bl	438c4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1d872:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d876:	4293      	cmp	r3, r2
   1d878:	d25d      	bcs.n	1d936 <parse_value+0x256>
   1d87a:	6822      	ldr	r2, [r4, #0]
   1d87c:	5cd2      	ldrb	r2, [r2, r3]
   1d87e:	2a5d      	cmp	r2, #93	; 0x5d
   1d880:	d109      	bne.n	1d896 <parse_value+0x1b6>
    cJSON *head = NULL; /* head of the linked list */
   1d882:	2700      	movs	r7, #0
    input_buffer->depth--;
   1d884:	68e3      	ldr	r3, [r4, #12]
   1d886:	3b01      	subs	r3, #1
   1d888:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   1d88a:	2320      	movs	r3, #32
    item->child = head;
   1d88c:	e9c5 7302 	strd	r7, r3, [r5, #8]
    input_buffer->offset++;
   1d890:	68a3      	ldr	r3, [r4, #8]
   1d892:	3301      	adds	r3, #1
   1d894:	e73e      	b.n	1d714 <parse_value+0x34>
    cJSON *current_item = NULL;
   1d896:	2600      	movs	r6, #0
    cJSON *head = NULL; /* head of the linked list */
   1d898:	4637      	mov	r7, r6
    input_buffer->offset--;
   1d89a:	3b01      	subs	r3, #1
   1d89c:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d89e:	6920      	ldr	r0, [r4, #16]
   1d8a0:	f026 f842 	bl	43928 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1d8a4:	46b0      	mov	r8, r6
   1d8a6:	4606      	mov	r6, r0
   1d8a8:	2800      	cmp	r0, #0
   1d8aa:	f000 809a 	beq.w	1d9e2 <parse_value+0x302>
        if (head == NULL)
   1d8ae:	b1ff      	cbz	r7, 1d8f0 <parse_value+0x210>
            current_item->next = new_item;
   1d8b0:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1d8b4:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1d8b8:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d8ba:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d8bc:	3301      	adds	r3, #1
   1d8be:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d8c0:	f026 f800 	bl	438c4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d8c4:	4621      	mov	r1, r4
   1d8c6:	4630      	mov	r0, r6
   1d8c8:	f7ff ff0a 	bl	1d6e0 <parse_value>
   1d8cc:	2800      	cmp	r0, #0
   1d8ce:	f000 808b 	beq.w	1d9e8 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   1d8d2:	4620      	mov	r0, r4
   1d8d4:	f025 fff6 	bl	438c4 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d8d8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d8dc:	4293      	cmp	r3, r2
   1d8de:	f080 8083 	bcs.w	1d9e8 <parse_value+0x308>
   1d8e2:	6822      	ldr	r2, [r4, #0]
   1d8e4:	5cd3      	ldrb	r3, [r2, r3]
   1d8e6:	2b2c      	cmp	r3, #44	; 0x2c
   1d8e8:	d0d9      	beq.n	1d89e <parse_value+0x1be>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1d8ea:	2b5d      	cmp	r3, #93	; 0x5d
   1d8ec:	d17c      	bne.n	1d9e8 <parse_value+0x308>
   1d8ee:	e7c9      	b.n	1d884 <parse_value+0x1a4>
   1d8f0:	4607      	mov	r7, r0
   1d8f2:	e7e1      	b.n	1d8b8 <parse_value+0x1d8>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1d8f4:	2a7b      	cmp	r2, #123	; 0x7b
   1d8f6:	f47f aef9 	bne.w	1d6ec <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d8fa:	68e2      	ldr	r2, [r4, #12]
   1d8fc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1d900:	f4bf aef4 	bcs.w	1d6ec <parse_value+0xc>
    input_buffer->depth++;
   1d904:	3201      	adds	r2, #1
   1d906:	60e2      	str	r2, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1d908:	5cca      	ldrb	r2, [r1, r3]
   1d90a:	2a7b      	cmp	r2, #123	; 0x7b
   1d90c:	f47f aeee 	bne.w	1d6ec <parse_value+0xc>
    input_buffer->offset++;
   1d910:	3301      	adds	r3, #1
   1d912:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d914:	4620      	mov	r0, r4
   1d916:	f025 ffd5 	bl	438c4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1d91a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d91e:	4293      	cmp	r3, r2
   1d920:	d209      	bcs.n	1d936 <parse_value+0x256>
   1d922:	6822      	ldr	r2, [r4, #0]
   1d924:	5cd2      	ldrb	r2, [r2, r3]
   1d926:	2a7d      	cmp	r2, #125	; 0x7d
   1d928:	d116      	bne.n	1d958 <parse_value+0x278>
    cJSON *head = NULL; /* linked list head */
   1d92a:	2700      	movs	r7, #0
    input_buffer->depth--;
   1d92c:	68e3      	ldr	r3, [r4, #12]
   1d92e:	3b01      	subs	r3, #1
   1d930:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   1d932:	2340      	movs	r3, #64	; 0x40
   1d934:	e7aa      	b.n	1d88c <parse_value+0x1ac>
        input_buffer->offset--;
   1d936:	3b01      	subs	r3, #1
   1d938:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1d93a:	e6d7      	b.n	1d6ec <parse_value+0xc>
   1d93c:	f3af 8000 	nop.w
   1d940:	ffc00000 	.word	0xffc00000
   1d944:	41dfffff 	.word	0x41dfffff
   1d948:	00049f21 	.word	0x00049f21
   1d94c:	00049f38 	.word	0x00049f38
   1d950:	00049f3e 	.word	0x00049f3e
   1d954:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   1d958:	2600      	movs	r6, #0
    cJSON *head = NULL; /* linked list head */
   1d95a:	4637      	mov	r7, r6
        current_item->valuestring = NULL;
   1d95c:	46b0      	mov	r8, r6
    input_buffer->offset--;
   1d95e:	3b01      	subs	r3, #1
   1d960:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d962:	6920      	ldr	r0, [r4, #16]
   1d964:	f025 ffe0 	bl	43928 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1d968:	46b1      	mov	r9, r6
   1d96a:	4606      	mov	r6, r0
   1d96c:	2800      	cmp	r0, #0
   1d96e:	d038      	beq.n	1d9e2 <parse_value+0x302>
        if (head == NULL)
   1d970:	b3af      	cbz	r7, 1d9de <parse_value+0x2fe>
            current_item->next = new_item;
   1d972:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   1d976:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   1d97a:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d97c:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d97e:	3301      	adds	r3, #1
   1d980:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d982:	f025 ff9f 	bl	438c4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1d986:	4621      	mov	r1, r4
   1d988:	4630      	mov	r0, r6
   1d98a:	f00a ffad 	bl	288e8 <parse_string>
   1d98e:	b358      	cbz	r0, 1d9e8 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   1d990:	4620      	mov	r0, r4
   1d992:	f025 ff97 	bl	438c4 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1d996:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
   1d998:	f8c6 8010 	str.w	r8, [r6, #16]
        current_item->string = current_item->valuestring;
   1d99c:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1d99e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d9a2:	4293      	cmp	r3, r2
   1d9a4:	d220      	bcs.n	1d9e8 <parse_value+0x308>
   1d9a6:	6822      	ldr	r2, [r4, #0]
   1d9a8:	5cd2      	ldrb	r2, [r2, r3]
   1d9aa:	2a3a      	cmp	r2, #58	; 0x3a
   1d9ac:	d11c      	bne.n	1d9e8 <parse_value+0x308>
        input_buffer->offset++;
   1d9ae:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
   1d9b0:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d9b2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d9b4:	f025 ff86 	bl	438c4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d9b8:	4621      	mov	r1, r4
   1d9ba:	4630      	mov	r0, r6
   1d9bc:	f7ff fe90 	bl	1d6e0 <parse_value>
   1d9c0:	b190      	cbz	r0, 1d9e8 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   1d9c2:	4620      	mov	r0, r4
   1d9c4:	f025 ff7e 	bl	438c4 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d9c8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d9cc:	4293      	cmp	r3, r2
   1d9ce:	d20b      	bcs.n	1d9e8 <parse_value+0x308>
   1d9d0:	6822      	ldr	r2, [r4, #0]
   1d9d2:	5cd3      	ldrb	r3, [r2, r3]
   1d9d4:	2b2c      	cmp	r3, #44	; 0x2c
   1d9d6:	d0c4      	beq.n	1d962 <parse_value+0x282>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1d9d8:	2b7d      	cmp	r3, #125	; 0x7d
   1d9da:	d105      	bne.n	1d9e8 <parse_value+0x308>
   1d9dc:	e7a6      	b.n	1d92c <parse_value+0x24c>
   1d9de:	4607      	mov	r7, r0
   1d9e0:	e7cb      	b.n	1d97a <parse_value+0x29a>
    if (head != NULL)
   1d9e2:	2f00      	cmp	r7, #0
   1d9e4:	f43f ae82 	beq.w	1d6ec <parse_value+0xc>
        cJSON_Delete(head);
   1d9e8:	4638      	mov	r0, r7
   1d9ea:	f00b fbb5 	bl	29158 <cJSON_Delete>
   1d9ee:	e67d      	b.n	1d6ec <parse_value+0xc>

0001d9f0 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d9f0:	4b17      	ldr	r3, [pc, #92]	; (1da50 <cJSON_CreateNumber+0x60>)
{
   1d9f2:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d9f4:	6818      	ldr	r0, [r3, #0]
{
   1d9f6:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d9fa:	f025 ff95 	bl	43928 <cJSON_New_Item.isra.0>
    if(item)
   1d9fe:	4604      	mov	r4, r0
   1da00:	b170      	cbz	r0, 1da20 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1da02:	2308      	movs	r3, #8
        item->valuedouble = num;
   1da04:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1da08:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1da0a:	4639      	mov	r1, r7
   1da0c:	a30e      	add	r3, pc, #56	; (adr r3, 1da48 <cJSON_CreateNumber+0x58>)
   1da0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1da12:	4630      	mov	r0, r6
   1da14:	f7ff f956 	bl	1ccc4 <__aeabi_dcmpge>
   1da18:	b120      	cbz	r0, 1da24 <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1da1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1da1e:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1da20:	4620      	mov	r0, r4
   1da22:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1da24:	2200      	movs	r2, #0
   1da26:	4630      	mov	r0, r6
   1da28:	4639      	mov	r1, r7
   1da2a:	4b0a      	ldr	r3, [pc, #40]	; (1da54 <cJSON_CreateNumber+0x64>)
   1da2c:	f7ff f940 	bl	1ccb0 <__aeabi_dcmple>
   1da30:	b110      	cbz	r0, 1da38 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1da32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1da36:	e7f2      	b.n	1da1e <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1da38:	4630      	mov	r0, r6
   1da3a:	4639      	mov	r1, r7
   1da3c:	f7ff f956 	bl	1ccec <__aeabi_d2iz>
   1da40:	6160      	str	r0, [r4, #20]
    return item;
   1da42:	e7ed      	b.n	1da20 <cJSON_CreateNumber+0x30>
   1da44:	f3af 8000 	nop.w
   1da48:	ffc00000 	.word	0xffc00000
   1da4c:	41dfffff 	.word	0x41dfffff
   1da50:	200206f0 	.word	0x200206f0
   1da54:	c1e00000 	.word	0xc1e00000

0001da58 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
   1da58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da5c:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
   1da60:	460e      	mov	r6, r1
{
   1da62:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
   1da64:	b971      	cbnz	r1, 1da84 <at_handler+0x2c>
   1da66:	48af      	ldr	r0, [pc, #700]	; (1dd24 <at_handler+0x2cc>)
   1da68:	4baf      	ldr	r3, [pc, #700]	; (1dd28 <at_handler+0x2d0>)
		LOG_ERR("Response buffer is NULL-pointer");
   1da6a:	49b0      	ldr	r1, [pc, #704]	; (1dd2c <at_handler+0x2d4>)
   1da6c:	1ac0      	subs	r0, r0, r3
   1da6e:	08c0      	lsrs	r0, r0, #3
   1da70:	0180      	lsls	r0, r0, #6
   1da72:	f040 0001 	orr.w	r0, r0, #1
   1da76:	f023 fed3 	bl	41820 <log_string_sync>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
   1da7a:	b00c      	add	sp, #48	; 0x30
   1da7c:	ecbd 8b02 	vpop	{d8}
   1da80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   1da84:	2700      	movs	r7, #0
   1da86:	4caa      	ldr	r4, [pc, #680]	; (1dd30 <at_handler+0x2d8>)
		if (strncmp(at_notifs[i], notif,
   1da88:	f854 5b04 	ldr.w	r5, [r4], #4
   1da8c:	4628      	mov	r0, r5
   1da8e:	f7ff fbe5 	bl	1d25c <strlen>
   1da92:	4631      	mov	r1, r6
   1da94:	4602      	mov	r2, r0
   1da96:	4628      	mov	r0, r5
   1da98:	f027 fb25 	bl	450e6 <strncmp>
   1da9c:	4605      	mov	r5, r0
   1da9e:	bb60      	cbnz	r0, 1dafa <at_handler+0xa2>
	switch (notif_type) {
   1daa0:	2f01      	cmp	r7, #1
			*type = i;
   1daa2:	b2fb      	uxtb	r3, r7
	switch (notif_type) {
   1daa4:	f000 8101 	beq.w	1dcaa <at_handler+0x252>
   1daa8:	2b02      	cmp	r3, #2
   1daaa:	f000 8185 	beq.w	1ddb8 <at_handler+0x360>
	size_t len = sizeof(str_buf) - 1;
   1daae:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1dab2:	210a      	movs	r1, #10
   1dab4:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
   1dab6:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1daba:	f026 fb8d 	bl	441d8 <at_params_list_init>
	if (err) {
   1dabe:	4604      	mov	r4, r0
   1dac0:	b1f8      	cbz	r0, 1db02 <at_handler+0xaa>
   1dac2:	4898      	ldr	r0, [pc, #608]	; (1dd24 <at_handler+0x2cc>)
   1dac4:	4b98      	ldr	r3, [pc, #608]	; (1dd28 <at_handler+0x2d0>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   1dac6:	4622      	mov	r2, r4
   1dac8:	1ac0      	subs	r0, r0, r3
   1daca:	08c0      	lsrs	r0, r0, #3
   1dacc:	0180      	lsls	r0, r0, #6
   1dace:	4999      	ldr	r1, [pc, #612]	; (1dd34 <at_handler+0x2dc>)
   1dad0:	f040 0001 	orr.w	r0, r0, #1
   1dad4:	f023 fea4 	bl	41820 <log_string_sync>
   1dad8:	4b93      	ldr	r3, [pc, #588]	; (1dd28 <at_handler+0x2d0>)
   1dada:	4d92      	ldr	r5, [pc, #584]	; (1dd24 <at_handler+0x2cc>)
			LOG_ERR("Failed to parse notification (error %d): %s",
   1dadc:	4630      	mov	r0, r6
   1dade:	1aed      	subs	r5, r5, r3
   1dae0:	f023 feb1 	bl	41846 <log_strdup>
   1dae4:	08ed      	lsrs	r5, r5, #3
   1dae6:	01ad      	lsls	r5, r5, #6
   1dae8:	f045 0501 	orr.w	r5, r5, #1
   1daec:	4603      	mov	r3, r0
   1daee:	4622      	mov	r2, r4
   1daf0:	4628      	mov	r0, r5
   1daf2:	4991      	ldr	r1, [pc, #580]	; (1dd38 <at_handler+0x2e0>)
   1daf4:	f023 fe94 	bl	41820 <log_string_sync>
			return;
   1daf8:	e7bf      	b.n	1da7a <at_handler+0x22>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   1dafa:	3701      	adds	r7, #1
   1dafc:	2f03      	cmp	r7, #3
   1dafe:	d1c3      	bne.n	1da88 <at_handler+0x30>
   1db00:	e7bb      	b.n	1da7a <at_handler+0x22>
	err = at_parser_params_from_str(notification,
   1db02:	4601      	mov	r1, r0
   1db04:	aa07      	add	r2, sp, #28
   1db06:	4630      	mov	r0, r6
   1db08:	f026 fb63 	bl	441d2 <at_parser_params_from_str>
	if (err) {
   1db0c:	4604      	mov	r4, r0
   1db0e:	2800      	cmp	r0, #0
   1db10:	d05c      	beq.n	1dbcc <at_handler+0x174>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   1db12:	4622      	mov	r2, r4
   1db14:	4883      	ldr	r0, [pc, #524]	; (1dd24 <at_handler+0x2cc>)
   1db16:	4b84      	ldr	r3, [pc, #528]	; (1dd28 <at_handler+0x2d0>)
   1db18:	4988      	ldr	r1, [pc, #544]	; (1dd3c <at_handler+0x2e4>)
   1db1a:	1ac0      	subs	r0, r0, r3
   1db1c:	08c0      	lsrs	r0, r0, #3
   1db1e:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not get registration status, error: %d", err);
   1db20:	f040 0001 	orr.w	r0, r0, #1
   1db24:	f023 fe7c 	bl	41820 <log_string_sync>
	at_params_list_free(&resp_list);
   1db28:	a807      	add	r0, sp, #28
   1db2a:	f026 fb68 	bl	441fe <at_params_list_free>
		if (err) {
   1db2e:	2c00      	cmp	r4, #0
   1db30:	d1d2      	bne.n	1dad8 <at_handler+0x80>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1db32:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
   1db36:	2b01      	cmp	r3, #1
   1db38:	d102      	bne.n	1db40 <at_handler+0xe8>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1db3a:	4881      	ldr	r0, [pc, #516]	; (1dd40 <at_handler+0x2e8>)
   1db3c:	f01f ffdc 	bl	3daf8 <z_impl_k_sem_give>
		if (!evt_handler) {
   1db40:	4c80      	ldr	r4, [pc, #512]	; (1dd44 <at_handler+0x2ec>)
   1db42:	6823      	ldr	r3, [r4, #0]
   1db44:	2b00      	cmp	r3, #0
   1db46:	d098      	beq.n	1da7a <at_handler+0x22>
		if (reg_status != prev_reg_status) {
   1db48:	4a7f      	ldr	r2, [pc, #508]	; (1dd48 <at_handler+0x2f0>)
   1db4a:	7811      	ldrb	r1, [r2, #0]
   1db4c:	42a9      	cmp	r1, r5
   1db4e:	d007      	beq.n	1db60 <at_handler+0x108>
			prev_reg_status = reg_status;
   1db50:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1db52:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
   1db54:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1db58:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
   1db5c:	a809      	add	r0, sp, #36	; 0x24
   1db5e:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   1db60:	4e7a      	ldr	r6, [pc, #488]	; (1dd4c <at_handler+0x2f4>)
   1db62:	ad03      	add	r5, sp, #12
   1db64:	2208      	movs	r2, #8
   1db66:	4631      	mov	r1, r6
   1db68:	4628      	mov	r0, r5
   1db6a:	f027 f8ae 	bl	44cca <memcmp>
   1db6e:	b160      	cbz	r0, 1db8a <at_handler+0x132>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
   1db70:	e895 0003 	ldmia.w	r5, {r0, r1}
   1db74:	2304      	movs	r3, #4
   1db76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1db7a:	ab0c      	add	r3, sp, #48	; 0x30
   1db7c:	e903 0003 	stmdb	r3, {r0, r1}
   1db80:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
   1db84:	6823      	ldr	r3, [r4, #0]
   1db86:	a809      	add	r0, sp, #36	; 0x24
   1db88:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
   1db8a:	4e71      	ldr	r6, [pc, #452]	; (1dd50 <at_handler+0x2f8>)
   1db8c:	ad05      	add	r5, sp, #20
   1db8e:	2208      	movs	r2, #8
   1db90:	4631      	mov	r1, r6
   1db92:	4628      	mov	r0, r5
   1db94:	f027 f899 	bl	44cca <memcmp>
   1db98:	b160      	cbz	r0, 1dbb4 <at_handler+0x15c>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
   1db9a:	e895 0003 	ldmia.w	r5, {r0, r1}
   1db9e:	2301      	movs	r3, #1
   1dba0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_psm_cfg, &psm_cfg,
   1dba4:	ab0c      	add	r3, sp, #48	; 0x30
   1dba6:	e903 0003 	stmdb	r3, {r0, r1}
   1dbaa:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
   1dbae:	6823      	ldr	r3, [r4, #0]
   1dbb0:	a809      	add	r0, sp, #36	; 0x24
   1dbb2:	4798      	blx	r3
	bool notify = false;
   1dbb4:	2300      	movs	r3, #0
	if (evt_handler && notify) {
   1dbb6:	4a63      	ldr	r2, [pc, #396]	; (1dd44 <at_handler+0x2ec>)
   1dbb8:	6812      	ldr	r2, [r2, #0]
   1dbba:	2a00      	cmp	r2, #0
   1dbbc:	f43f af5d 	beq.w	1da7a <at_handler+0x22>
   1dbc0:	2b00      	cmp	r3, #0
   1dbc2:	f43f af5a 	beq.w	1da7a <at_handler+0x22>
		evt_handler(&evt);
   1dbc6:	a809      	add	r0, sp, #36	; 0x24
   1dbc8:	4790      	blx	r2
   1dbca:	e756      	b.n	1da7a <at_handler+0x22>
	err = at_params_int_get(&resp_list,
   1dbcc:	2101      	movs	r1, #1
   1dbce:	aa01      	add	r2, sp, #4
   1dbd0:	a807      	add	r0, sp, #28
   1dbd2:	f026 fbc2 	bl	4435a <at_params_int_get>
	if (err) {
   1dbd6:	4604      	mov	r4, r0
   1dbd8:	b138      	cbz	r0, 1dbea <at_handler+0x192>
   1dbda:	4852      	ldr	r0, [pc, #328]	; (1dd24 <at_handler+0x2cc>)
   1dbdc:	4b52      	ldr	r3, [pc, #328]	; (1dd28 <at_handler+0x2d0>)
		LOG_ERR("Could not get registration status, error: %d", err);
   1dbde:	4622      	mov	r2, r4
   1dbe0:	1ac0      	subs	r0, r0, r3
   1dbe2:	08c0      	lsrs	r0, r0, #3
   1dbe4:	495b      	ldr	r1, [pc, #364]	; (1dd54 <at_handler+0x2fc>)
   1dbe6:	0180      	lsls	r0, r0, #6
   1dbe8:	e79a      	b.n	1db20 <at_handler+0xc8>
	*reg_status = status;
   1dbea:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if (*reg_status != LTE_LC_NW_REG_UICC_FAIL) {
   1dbee:	2d5a      	cmp	r5, #90	; 0x5a
   1dbf0:	d045      	beq.n	1dc7e <at_handler+0x226>
		err = at_params_string_get(&resp_list,
   1dbf2:	2102      	movs	r1, #2
   1dbf4:	ab02      	add	r3, sp, #8
   1dbf6:	aa09      	add	r2, sp, #36	; 0x24
   1dbf8:	a807      	add	r0, sp, #28
   1dbfa:	f026 fbc5 	bl	44388 <at_params_string_get>
		if (err) {
   1dbfe:	4607      	mov	r7, r0
   1dc00:	b160      	cbz	r0, 1dc1c <at_handler+0x1c4>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   1dc02:	463a      	mov	r2, r7
   1dc04:	4b47      	ldr	r3, [pc, #284]	; (1dd24 <at_handler+0x2cc>)
   1dc06:	4848      	ldr	r0, [pc, #288]	; (1dd28 <at_handler+0x2d0>)
   1dc08:	4953      	ldr	r1, [pc, #332]	; (1dd58 <at_handler+0x300>)
   1dc0a:	1a1b      	subs	r3, r3, r0
   1dc0c:	08db      	lsrs	r3, r3, #3
   1dc0e:	019b      	lsls	r3, r3, #6
			LOG_ERR("Could not get cell ID, error: %d", err);
   1dc10:	f043 0001 	orr.w	r0, r3, #1
   1dc14:	f023 fe04 	bl	41820 <log_string_sync>
			goto clean_exit;
   1dc18:	463c      	mov	r4, r7
   1dc1a:	e785      	b.n	1db28 <at_handler+0xd0>
		str_buf[len] = '\0';
   1dc1c:	9b02      	ldr	r3, [sp, #8]
   1dc1e:	aa0c      	add	r2, sp, #48	; 0x30
   1dc20:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   1dc22:	4621      	mov	r1, r4
   1dc24:	2210      	movs	r2, #16
   1dc26:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
   1dc28:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   1dc2c:	f022 f916 	bl	3fe5c <strtoul>
		err = at_params_string_get(&resp_list,
   1dc30:	2103      	movs	r1, #3
		cell->tac = strtoul(str_buf, NULL, 16);
   1dc32:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
   1dc34:	ab02      	add	r3, sp, #8
   1dc36:	aa09      	add	r2, sp, #36	; 0x24
   1dc38:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
   1dc3a:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
   1dc3e:	f026 fba3 	bl	44388 <at_params_string_get>
		if (err) {
   1dc42:	4607      	mov	r7, r0
   1dc44:	b138      	cbz	r0, 1dc56 <at_handler+0x1fe>
   1dc46:	4b37      	ldr	r3, [pc, #220]	; (1dd24 <at_handler+0x2cc>)
   1dc48:	4837      	ldr	r0, [pc, #220]	; (1dd28 <at_handler+0x2d0>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   1dc4a:	463a      	mov	r2, r7
   1dc4c:	1a1b      	subs	r3, r3, r0
   1dc4e:	08db      	lsrs	r3, r3, #3
   1dc50:	4942      	ldr	r1, [pc, #264]	; (1dd5c <at_handler+0x304>)
   1dc52:	019b      	lsls	r3, r3, #6
   1dc54:	e7dc      	b.n	1dc10 <at_handler+0x1b8>
		str_buf[len] = '\0';
   1dc56:	9b02      	ldr	r3, [sp, #8]
   1dc58:	aa0c      	add	r2, sp, #48	; 0x30
   1dc5a:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   1dc5c:	4621      	mov	r1, r4
   1dc5e:	2210      	movs	r2, #16
   1dc60:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
   1dc62:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   1dc66:	f022 f8f9 	bl	3fe5c <strtoul>
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1dc6a:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
   1dc6e:	2b01      	cmp	r3, #1
		cell->id = strtoul(str_buf, NULL, 16);
   1dc70:	9003      	str	r0, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1dc72:	d009      	beq.n	1dc88 <at_handler+0x230>
		psm_cfg->tau = -1;
   1dc74:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
   1dc78:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1dc7c:	e754      	b.n	1db28 <at_handler+0xd0>
		cell->tac = UINT32_MAX;
   1dc7e:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
   1dc82:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1dc86:	e7f5      	b.n	1dc74 <at_handler+0x21c>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
   1dc88:	2101      	movs	r1, #1
   1dc8a:	aa05      	add	r2, sp, #20
   1dc8c:	a807      	add	r0, sp, #28
   1dc8e:	f00d fd2b 	bl	2b6e8 <parse_psm_cfg>
		if (err) {
   1dc92:	4604      	mov	r4, r0
   1dc94:	2800      	cmp	r0, #0
   1dc96:	f43f af47 	beq.w	1db28 <at_handler+0xd0>
   1dc9a:	4822      	ldr	r0, [pc, #136]	; (1dd24 <at_handler+0x2cc>)
   1dc9c:	4b22      	ldr	r3, [pc, #136]	; (1dd28 <at_handler+0x2d0>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
   1dc9e:	4622      	mov	r2, r4
   1dca0:	1ac0      	subs	r0, r0, r3
   1dca2:	08c0      	lsrs	r0, r0, #3
   1dca4:	492e      	ldr	r1, [pc, #184]	; (1dd60 <at_handler+0x308>)
   1dca6:	0180      	lsls	r0, r0, #6
   1dca8:	e73a      	b.n	1db20 <at_handler+0xc8>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   1dcaa:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1dcae:	2104      	movs	r1, #4
   1dcb0:	a807      	add	r0, sp, #28
   1dcb2:	f026 fa91 	bl	441d8 <at_params_list_init>
	if (err) {
   1dcb6:	4604      	mov	r4, r0
   1dcb8:	b1b0      	cbz	r0, 1dce8 <at_handler+0x290>
   1dcba:	481a      	ldr	r0, [pc, #104]	; (1dd24 <at_handler+0x2cc>)
   1dcbc:	4b1a      	ldr	r3, [pc, #104]	; (1dd28 <at_handler+0x2d0>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   1dcbe:	4622      	mov	r2, r4
   1dcc0:	1ac0      	subs	r0, r0, r3
   1dcc2:	08c0      	lsrs	r0, r0, #3
   1dcc4:	0180      	lsls	r0, r0, #6
   1dcc6:	491b      	ldr	r1, [pc, #108]	; (1dd34 <at_handler+0x2dc>)
   1dcc8:	f040 0001 	orr.w	r0, r0, #1
   1dccc:	f023 fda8 	bl	41820 <log_string_sync>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
   1dcd0:	4622      	mov	r2, r4
   1dcd2:	4814      	ldr	r0, [pc, #80]	; (1dd24 <at_handler+0x2cc>)
   1dcd4:	4b14      	ldr	r3, [pc, #80]	; (1dd28 <at_handler+0x2d0>)
   1dcd6:	4923      	ldr	r1, [pc, #140]	; (1dd64 <at_handler+0x30c>)
   1dcd8:	1ac0      	subs	r0, r0, r3
   1dcda:	08c0      	lsrs	r0, r0, #3
   1dcdc:	0180      	lsls	r0, r0, #6
			LOG_ERR("Can't parse eDRX, error: %d", err);
   1dcde:	f040 0001 	orr.w	r0, r0, #1
   1dce2:	f023 fd9d 	bl	41820 <log_string_sync>
			return;
   1dce6:	e6c8      	b.n	1da7a <at_handler+0x22>
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   1dce8:	4601      	mov	r1, r0
   1dcea:	aa07      	add	r2, sp, #28
   1dcec:	4630      	mov	r0, r6
   1dcee:	f026 fa70 	bl	441d2 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   1dcf2:	4604      	mov	r4, r0
   1dcf4:	2800      	cmp	r0, #0
   1dcf6:	d039      	beq.n	1dd6c <at_handler+0x314>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   1dcf8:	4622      	mov	r2, r4
   1dcfa:	480a      	ldr	r0, [pc, #40]	; (1dd24 <at_handler+0x2cc>)
   1dcfc:	4b0a      	ldr	r3, [pc, #40]	; (1dd28 <at_handler+0x2d0>)
   1dcfe:	491a      	ldr	r1, [pc, #104]	; (1dd68 <at_handler+0x310>)
   1dd00:	1ac0      	subs	r0, r0, r3
   1dd02:	08c0      	lsrs	r0, r0, #3
   1dd04:	0180      	lsls	r0, r0, #6
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1dd06:	f040 0001 	orr.w	r0, r0, #1
   1dd0a:	f023 fd89 	bl	41820 <log_string_sync>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   1dd0e:	a807      	add	r0, sp, #28
   1dd10:	f026 fa75 	bl	441fe <at_params_list_free>
		if (err) {
   1dd14:	2c00      	cmp	r4, #0
   1dd16:	d1db      	bne.n	1dcd0 <at_handler+0x278>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
   1dd18:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1dd1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
   1dd1e:	2301      	movs	r3, #1
		break;
   1dd20:	e749      	b.n	1dbb6 <at_handler+0x15e>
   1dd22:	bf00      	nop
   1dd24:	00046464 	.word	0x00046464
   1dd28:	000463bc 	.word	0x000463bc
   1dd2c:	0004a92e 	.word	0x0004a92e
   1dd30:	00046ac0 	.word	0x00046ac0
   1dd34:	0004a94e 	.word	0x0004a94e
   1dd38:	0004aa4b 	.word	0x0004aa4b
   1dd3c:	0004a977 	.word	0x0004a977
   1dd40:	20024980 	.word	0x20024980
   1dd44:	2002497c 	.word	0x2002497c
   1dd48:	2002cc33 	.word	0x2002cc33
   1dd4c:	20024998 	.word	0x20024998
   1dd50:	200249a0 	.word	0x200249a0
   1dd54:	0004a9a4 	.word	0x0004a9a4
   1dd58:	0004a9d1 	.word	0x0004a9d1
   1dd5c:	0004a9fd 	.word	0x0004a9fd
   1dd60:	0004aa1e 	.word	0x0004aa1e
   1dd64:	0004aae7 	.word	0x0004aae7
   1dd68:	0004aa77 	.word	0x0004aa77
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   1dd6c:	4639      	mov	r1, r7
   1dd6e:	aa05      	add	r2, sp, #20
   1dd70:	a807      	add	r0, sp, #28
   1dd72:	f026 faf2 	bl	4435a <at_params_int_get>
	if (err) {
   1dd76:	4604      	mov	r4, r0
   1dd78:	b138      	cbz	r0, 1dd8a <at_handler+0x332>
   1dd7a:	487d      	ldr	r0, [pc, #500]	; (1df70 <at_handler+0x518>)
   1dd7c:	4b7d      	ldr	r3, [pc, #500]	; (1df74 <at_handler+0x51c>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1dd7e:	4622      	mov	r2, r4
   1dd80:	1ac0      	subs	r0, r0, r3
   1dd82:	08c0      	lsrs	r0, r0, #3
   1dd84:	497c      	ldr	r1, [pc, #496]	; (1df78 <at_handler+0x520>)
   1dd86:	0180      	lsls	r0, r0, #6
   1dd88:	e7bd      	b.n	1dd06 <at_handler+0x2ae>
	if (temp_mode == 0) {
   1dd8a:	9a05      	ldr	r2, [sp, #20]
   1dd8c:	b912      	cbnz	r2, 1dd94 <at_handler+0x33c>
		*mode = LTE_LC_RRC_MODE_IDLE;
   1dd8e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
   1dd92:	e7bc      	b.n	1dd0e <at_handler+0x2b6>
	} else if (temp_mode == 1) {
   1dd94:	2a01      	cmp	r2, #1
   1dd96:	d102      	bne.n	1dd9e <at_handler+0x346>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   1dd98:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
   1dd9c:	e7b7      	b.n	1dd0e <at_handler+0x2b6>
   1dd9e:	4b75      	ldr	r3, [pc, #468]	; (1df74 <at_handler+0x51c>)
   1dda0:	4873      	ldr	r0, [pc, #460]	; (1df70 <at_handler+0x518>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   1dda2:	4976      	ldr	r1, [pc, #472]	; (1df7c <at_handler+0x524>)
   1dda4:	1ac0      	subs	r0, r0, r3
   1dda6:	08c0      	lsrs	r0, r0, #3
   1dda8:	0180      	lsls	r0, r0, #6
   1ddaa:	f040 0001 	orr.w	r0, r0, #1
   1ddae:	f023 fd37 	bl	41820 <log_string_sync>
		err = -EINVAL;
   1ddb2:	f06f 0415 	mvn.w	r4, #21
   1ddb6:	e7aa      	b.n	1dd0e <at_handler+0x2b6>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1ddb8:	2304      	movs	r3, #4
	switch (sys_mode_current) {
   1ddba:	4d71      	ldr	r5, [pc, #452]	; (1df80 <at_handler+0x528>)
	size_t len = sizeof(tmp_buf) - 1;
   1ddbc:	9303      	str	r3, [sp, #12]
   1ddbe:	782b      	ldrb	r3, [r5, #0]
	struct at_param_list resp_list = {0};
   1ddc0:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
   1ddc4:	3b01      	subs	r3, #1
   1ddc6:	2b04      	cmp	r3, #4
   1ddc8:	d804      	bhi.n	1ddd4 <at_handler+0x37c>
   1ddca:	e8df f003 	tbb	[pc, r3]
   1ddce:	2b17      	.short	0x2b17
   1ddd0:	1703      	.short	0x1703
   1ddd2:	2b          	.byte	0x2b
   1ddd3:	00          	.byte	0x00
   1ddd4:	4b67      	ldr	r3, [pc, #412]	; (1df74 <at_handler+0x51c>)
   1ddd6:	4866      	ldr	r0, [pc, #408]	; (1df70 <at_handler+0x518>)
		LOG_ERR("No LTE connection available in this system mode");
   1ddd8:	496a      	ldr	r1, [pc, #424]	; (1df84 <at_handler+0x52c>)
   1ddda:	1ac0      	subs	r0, r0, r3
   1dddc:	08c0      	lsrs	r0, r0, #3
   1ddde:	0180      	lsls	r0, r0, #6
   1dde0:	f040 0001 	orr.w	r0, r0, #1
   1dde4:	f023 fd1c 	bl	41820 <log_string_sync>
		return -ENOTCONN;
   1dde8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1ddec:	4860      	ldr	r0, [pc, #384]	; (1df70 <at_handler+0x518>)
   1ddee:	4b61      	ldr	r3, [pc, #388]	; (1df74 <at_handler+0x51c>)
			LOG_ERR("Can't parse eDRX, error: %d", err);
   1ddf0:	4622      	mov	r2, r4
   1ddf2:	1ac0      	subs	r0, r0, r3
   1ddf4:	08c0      	lsrs	r0, r0, #3
   1ddf6:	4964      	ldr	r1, [pc, #400]	; (1df88 <at_handler+0x530>)
   1ddf8:	0180      	lsls	r0, r0, #6
   1ddfa:	e770      	b.n	1dcde <at_handler+0x286>
	switch (sys_mode_current) {
   1ddfc:	ed9f 8a63 	vldr	s16, [pc, #396]	; 1df8c <at_handler+0x534>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   1de00:	2105      	movs	r1, #5
   1de02:	a807      	add	r0, sp, #28
   1de04:	f026 f9e8 	bl	441d8 <at_params_list_init>
	if (err) {
   1de08:	4604      	mov	r4, r0
   1de0a:	b170      	cbz	r0, 1de2a <at_handler+0x3d2>
   1de0c:	4b59      	ldr	r3, [pc, #356]	; (1df74 <at_handler+0x51c>)
   1de0e:	4858      	ldr	r0, [pc, #352]	; (1df70 <at_handler+0x518>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   1de10:	4622      	mov	r2, r4
   1de12:	1ac0      	subs	r0, r0, r3
   1de14:	08c0      	lsrs	r0, r0, #3
   1de16:	0180      	lsls	r0, r0, #6
   1de18:	495d      	ldr	r1, [pc, #372]	; (1df90 <at_handler+0x538>)
   1de1a:	f040 0001 	orr.w	r0, r0, #1
   1de1e:	f023 fcff 	bl	41820 <log_string_sync>
		return err;
   1de22:	e7e3      	b.n	1ddec <at_handler+0x394>
		*ptw_multiplier = 2.56;
   1de24:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 1df94 <at_handler+0x53c>
   1de28:	e7ea      	b.n	1de00 <at_handler+0x3a8>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   1de2a:	4601      	mov	r1, r0
   1de2c:	aa07      	add	r2, sp, #28
   1de2e:	4630      	mov	r0, r6
   1de30:	f026 f9cf 	bl	441d2 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   1de34:	4604      	mov	r4, r0
   1de36:	b188      	cbz	r0, 1de5c <at_handler+0x404>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   1de38:	4622      	mov	r2, r4
   1de3a:	484d      	ldr	r0, [pc, #308]	; (1df70 <at_handler+0x518>)
   1de3c:	4b4d      	ldr	r3, [pc, #308]	; (1df74 <at_handler+0x51c>)
   1de3e:	4956      	ldr	r1, [pc, #344]	; (1df98 <at_handler+0x540>)
   1de40:	1ac0      	subs	r0, r0, r3
   1de42:	08c0      	lsrs	r0, r0, #3
   1de44:	0180      	lsls	r0, r0, #6
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1de46:	f040 0001 	orr.w	r0, r0, #1
   1de4a:	f023 fce9 	bl	41820 <log_string_sync>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
   1de4e:	a807      	add	r0, sp, #28
   1de50:	f026 f9d5 	bl	441fe <at_params_list_free>
		if (err) {
   1de54:	2c00      	cmp	r4, #0
   1de56:	d1c9      	bne.n	1ddec <at_handler+0x394>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1de58:	2302      	movs	r3, #2
   1de5a:	e75e      	b.n	1dd1a <at_handler+0x2c2>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1de5c:	2103      	movs	r1, #3
   1de5e:	ab03      	add	r3, sp, #12
   1de60:	aa05      	add	r2, sp, #20
   1de62:	a807      	add	r0, sp, #28
   1de64:	f026 fa90 	bl	44388 <at_params_string_get>
	if (err) {
   1de68:	4604      	mov	r4, r0
   1de6a:	b138      	cbz	r0, 1de7c <at_handler+0x424>
   1de6c:	4840      	ldr	r0, [pc, #256]	; (1df70 <at_handler+0x518>)
   1de6e:	4b41      	ldr	r3, [pc, #260]	; (1df74 <at_handler+0x51c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1de70:	4622      	mov	r2, r4
   1de72:	1ac0      	subs	r0, r0, r3
   1de74:	08c0      	lsrs	r0, r0, #3
   1de76:	4949      	ldr	r1, [pc, #292]	; (1df9c <at_handler+0x544>)
   1de78:	0180      	lsls	r0, r0, #6
   1de7a:	e7e4      	b.n	1de46 <at_handler+0x3ee>
	tmp_buf[len] = '\0';
   1de7c:	9b03      	ldr	r3, [sp, #12]
   1de7e:	aa0c      	add	r2, sp, #48	; 0x30
   1de80:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1de82:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1de84:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   1de88:	2202      	movs	r2, #2
   1de8a:	a805      	add	r0, sp, #20
   1de8c:	f021 ffe6 	bl	3fe5c <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1de90:	b2c0      	uxtb	r0, r0
   1de92:	280f      	cmp	r0, #15
   1de94:	d840      	bhi.n	1df18 <at_handler+0x4c0>
	switch (sys_mode_current) {
   1de96:	782b      	ldrb	r3, [r5, #0]
   1de98:	3b01      	subs	r3, #1
   1de9a:	2b04      	cmp	r3, #4
   1de9c:	d826      	bhi.n	1deec <at_handler+0x494>
   1de9e:	e8df f003 	tbb	[pc, r3]
   1dea2:	2303      	.short	0x2303
   1dea4:	0325      	.short	0x0325
   1dea6:	23          	.byte	0x23
   1dea7:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
   1dea8:	4b3d      	ldr	r3, [pc, #244]	; (1dfa0 <at_handler+0x548>)
		multiplier = edrx_lookup_nbiot[idx];
   1deaa:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1deae:	2800      	cmp	r0, #0
   1deb0:	d030      	beq.n	1df14 <at_handler+0x4bc>
   1deb2:	f7fe fc17 	bl	1c6e4 <__aeabi_i2d>
   1deb6:	a32c      	add	r3, pc, #176	; (adr r3, 1df68 <at_handler+0x510>)
   1deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1debc:	f7fe fc7c 	bl	1c7b8 <__aeabi_dmul>
   1dec0:	f7fe ff5c 	bl	1cd7c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1dec4:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1dec6:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1dec8:	ab03      	add	r3, sp, #12
   1deca:	aa05      	add	r2, sp, #20
   1decc:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
   1dece:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1ded0:	f026 fa5a 	bl	44388 <at_params_string_get>
	if (err) {
   1ded4:	4604      	mov	r4, r0
   1ded6:	b310      	cbz	r0, 1df1e <at_handler+0x4c6>
   1ded8:	4825      	ldr	r0, [pc, #148]	; (1df70 <at_handler+0x518>)
   1deda:	4b26      	ldr	r3, [pc, #152]	; (1df74 <at_handler+0x51c>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1dedc:	4622      	mov	r2, r4
   1dede:	1ac0      	subs	r0, r0, r3
   1dee0:	08c0      	lsrs	r0, r0, #3
   1dee2:	4930      	ldr	r1, [pc, #192]	; (1dfa4 <at_handler+0x54c>)
   1dee4:	0180      	lsls	r0, r0, #6
   1dee6:	e7ae      	b.n	1de46 <at_handler+0x3ee>
		multiplier = edrx_lookup_nbiot[idx];
   1dee8:	4b2f      	ldr	r3, [pc, #188]	; (1dfa8 <at_handler+0x550>)
   1deea:	e7de      	b.n	1deaa <at_handler+0x452>
   1deec:	4b21      	ldr	r3, [pc, #132]	; (1df74 <at_handler+0x51c>)
   1deee:	4820      	ldr	r0, [pc, #128]	; (1df70 <at_handler+0x518>)
		LOG_ERR("No LTE connection available in this system mode");
   1def0:	4924      	ldr	r1, [pc, #144]	; (1df84 <at_handler+0x52c>)
   1def2:	1ac0      	subs	r0, r0, r3
   1def4:	08c0      	lsrs	r0, r0, #3
   1def6:	0180      	lsls	r0, r0, #6
   1def8:	f040 0001 	orr.w	r0, r0, #1
   1defc:	f023 fc90 	bl	41820 <log_string_sync>
		return -ENOTCONN;
   1df00:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1df04:	481a      	ldr	r0, [pc, #104]	; (1df70 <at_handler+0x518>)
   1df06:	4b1b      	ldr	r3, [pc, #108]	; (1df74 <at_handler+0x51c>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1df08:	4622      	mov	r2, r4
   1df0a:	1ac0      	subs	r0, r0, r3
   1df0c:	08c0      	lsrs	r0, r0, #3
   1df0e:	4927      	ldr	r1, [pc, #156]	; (1dfac <at_handler+0x554>)
   1df10:	0180      	lsls	r0, r0, #6
   1df12:	e798      	b.n	1de46 <at_handler+0x3ee>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1df14:	4826      	ldr	r0, [pc, #152]	; (1dfb0 <at_handler+0x558>)
   1df16:	e7d5      	b.n	1dec4 <at_handler+0x46c>
		return -EINVAL;
   1df18:	f06f 0415 	mvn.w	r4, #21
   1df1c:	e7f2      	b.n	1df04 <at_handler+0x4ac>
	tmp_buf[len] = '\0';
   1df1e:	9b03      	ldr	r3, [sp, #12]
   1df20:	aa0c      	add	r2, sp, #48	; 0x30
   1df22:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1df24:	4601      	mov	r1, r0
   1df26:	2202      	movs	r2, #2
	tmp_buf[len] = '\0';
   1df28:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   1df2c:	a805      	add	r0, sp, #20
   1df2e:	f021 ff95 	bl	3fe5c <strtoul>
	if (idx > 15) {
   1df32:	b2c2      	uxtb	r2, r0
   1df34:	2a0f      	cmp	r2, #15
   1df36:	d90c      	bls.n	1df52 <at_handler+0x4fa>
   1df38:	4b0e      	ldr	r3, [pc, #56]	; (1df74 <at_handler+0x51c>)
   1df3a:	480d      	ldr	r0, [pc, #52]	; (1df70 <at_handler+0x518>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1df3c:	491d      	ldr	r1, [pc, #116]	; (1dfb4 <at_handler+0x55c>)
   1df3e:	1ac0      	subs	r0, r0, r3
   1df40:	08c0      	lsrs	r0, r0, #3
   1df42:	0180      	lsls	r0, r0, #6
   1df44:	f040 0001 	orr.w	r0, r0, #1
   1df48:	f023 fc6a 	bl	41820 <log_string_sync>
		err = -EINVAL;
   1df4c:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   1df50:	e77d      	b.n	1de4e <at_handler+0x3f6>
	idx += 1;
   1df52:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   1df54:	b2c0      	uxtb	r0, r0
   1df56:	ee07 0a90 	vmov	s15, r0
   1df5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1df5e:	ee67 7a88 	vmul.f32	s15, s15, s16
   1df62:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
   1df66:	e772      	b.n	1de4e <at_handler+0x3f6>
   1df68:	47ae147b 	.word	0x47ae147b
   1df6c:	40247ae1 	.word	0x40247ae1
   1df70:	00046464 	.word	0x00046464
   1df74:	000463bc 	.word	0x000463bc
   1df78:	0004aaa2 	.word	0x0004aaa2
   1df7c:	0004aacb 	.word	0x0004aacb
   1df80:	2002cc34 	.word	0x2002cc34
   1df84:	0004ab0e 	.word	0x0004ab0e
   1df88:	0004ac02 	.word	0x0004ac02
   1df8c:	3fa3d70a 	.word	0x3fa3d70a
   1df90:	0004a94e 	.word	0x0004a94e
   1df94:	4023d70a 	.word	0x4023d70a
   1df98:	0004ab3e 	.word	0x0004ab3e
   1df9c:	0004ab6a 	.word	0x0004ab6a
   1dfa0:	000474d8 	.word	0x000474d8
   1dfa4:	0004abba 	.word	0x0004abba
   1dfa8:	000474f8 	.word	0x000474f8
   1dfac:	0004ab96 	.word	0x0004ab96
   1dfb0:	40a3d70a 	.word	0x40a3d70a
   1dfb4:	0004abe5 	.word	0x0004abe5

0001dfb8 <double_to_sensor_value>:
 * @param val Sensor value to convert.
 * @param sense_val Pointer to sensor_value to store the converted data.
 */
static void double_to_sensor_value(double val,
				struct sensor_value *sense_val)
{
   1dfb8:	b5d0      	push	{r4, r6, r7, lr}
   1dfba:	4614      	mov	r4, r2
   1dfbc:	460f      	mov	r7, r1
   1dfbe:	4606      	mov	r6, r0
	sense_val->val1 = (int)val;
   1dfc0:	f7fe fe94 	bl	1ccec <__aeabi_d2iz>
   1dfc4:	6020      	str	r0, [r4, #0]
	sense_val->val2 = (val - (int)val) * 1000000;
   1dfc6:	f7fe fb8d 	bl	1c6e4 <__aeabi_i2d>
   1dfca:	4602      	mov	r2, r0
   1dfcc:	460b      	mov	r3, r1
   1dfce:	4630      	mov	r0, r6
   1dfd0:	4639      	mov	r1, r7
   1dfd2:	f7fe fa39 	bl	1c448 <__aeabi_dsub>
   1dfd6:	a304      	add	r3, pc, #16	; (adr r3, 1dfe8 <double_to_sensor_value+0x30>)
   1dfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfdc:	f7fe fbec 	bl	1c7b8 <__aeabi_dmul>
   1dfe0:	f7fe fe84 	bl	1ccec <__aeabi_d2iz>
   1dfe4:	6060      	str	r0, [r4, #4]
}
   1dfe6:	bdd0      	pop	{r4, r6, r7, pc}
   1dfe8:	00000000 	.word	0x00000000
   1dfec:	412e8480 	.word	0x412e8480

0001dff0 <sensor_sim_sample_fetch>:
	return 0;
}

static int sensor_sim_sample_fetch(const struct device *dev,
				enum sensor_channel chan)
{
   1dff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dff2:	2910      	cmp	r1, #16
   1dff4:	f200 80a8 	bhi.w	1e148 <sensor_sim_sample_fetch+0x158>
   1dff8:	e8df f001 	tbb	[pc, r1]
   1dffc:	40302009 	.word	0x40302009
   1e000:	a6a6a6a6 	.word	0xa6a6a6a6
   1e004:	a6a6a6a6 	.word	0xa6a6a6a6
   1e008:	a6926aa6 	.word	0xa6926aa6
   1e00c:	7f          	.byte	0x7f
   1e00d:	00          	.byte	0x00
			accel_samples[0] = static_val_coeff * max_variation;
   1e00e:	4e54      	ldr	r6, [pc, #336]	; (1e160 <sensor_sim_sample_fetch+0x170>)
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1e010:	f013 fe66 	bl	31ce0 <generate_sine.constprop.0>
			accel_samples[0] = static_val_coeff * max_variation;
   1e014:	6830      	ldr	r0, [r6, #0]
   1e016:	f7fe fb65 	bl	1c6e4 <__aeabi_i2d>
   1e01a:	4b52      	ldr	r3, [pc, #328]	; (1e164 <sensor_sim_sample_fetch+0x174>)
   1e01c:	2200      	movs	r2, #0
   1e01e:	4604      	mov	r4, r0
   1e020:	460d      	mov	r5, r1
   1e022:	f7fe fbc9 	bl	1c7b8 <__aeabi_dmul>
   1e026:	4b50      	ldr	r3, [pc, #320]	; (1e168 <sensor_sim_sample_fetch+0x178>)
   1e028:	e9c3 0100 	strd	r0, r1, [r3]
		static_val_coeff *= -1.0;
   1e02c:	4620      	mov	r0, r4
   1e02e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1e032:	f7fe fe5b 	bl	1ccec <__aeabi_d2iz>
   1e036:	6030      	str	r0, [r6, #0]
	return 0;
   1e038:	2000      	movs	r0, #0
	return sensor_sim_generate_data(chan);
}
   1e03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			accel_samples[1] = static_val_coeff * max_variation;
   1e03c:	4e48      	ldr	r6, [pc, #288]	; (1e160 <sensor_sim_sample_fetch+0x170>)
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1e03e:	f013 fe4f 	bl	31ce0 <generate_sine.constprop.0>
			accel_samples[1] = static_val_coeff * max_variation;
   1e042:	6830      	ldr	r0, [r6, #0]
   1e044:	f7fe fb4e 	bl	1c6e4 <__aeabi_i2d>
   1e048:	4b46      	ldr	r3, [pc, #280]	; (1e164 <sensor_sim_sample_fetch+0x174>)
   1e04a:	2200      	movs	r2, #0
   1e04c:	4604      	mov	r4, r0
   1e04e:	460d      	mov	r5, r1
   1e050:	f7fe fbb2 	bl	1c7b8 <__aeabi_dmul>
   1e054:	4b44      	ldr	r3, [pc, #272]	; (1e168 <sensor_sim_sample_fetch+0x178>)
   1e056:	e9c3 0102 	strd	r0, r1, [r3, #8]
		static_val_coeff *= -1.0;
   1e05a:	e7e7      	b.n	1e02c <sensor_sim_sample_fetch+0x3c>
			accel_samples[2] = static_val_coeff * max_variation;
   1e05c:	4e40      	ldr	r6, [pc, #256]	; (1e160 <sensor_sim_sample_fetch+0x170>)
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1e05e:	f013 fe3f 	bl	31ce0 <generate_sine.constprop.0>
			accel_samples[2] = static_val_coeff * max_variation;
   1e062:	6830      	ldr	r0, [r6, #0]
   1e064:	f7fe fb3e 	bl	1c6e4 <__aeabi_i2d>
   1e068:	4b3e      	ldr	r3, [pc, #248]	; (1e164 <sensor_sim_sample_fetch+0x174>)
   1e06a:	2200      	movs	r2, #0
   1e06c:	4604      	mov	r4, r0
   1e06e:	460d      	mov	r5, r1
   1e070:	f7fe fba2 	bl	1c7b8 <__aeabi_dmul>
   1e074:	4b3c      	ldr	r3, [pc, #240]	; (1e168 <sensor_sim_sample_fetch+0x178>)
   1e076:	e9c3 0104 	strd	r0, r1, [r3, #16]
   1e07a:	e7d7      	b.n	1e02c <sensor_sim_sample_fetch+0x3c>
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1e07c:	f013 fe30 	bl	31ce0 <generate_sine.constprop.0>
   1e080:	4c39      	ldr	r4, [pc, #228]	; (1e168 <sensor_sim_sample_fetch+0x178>)
   1e082:	e9c4 0100 	strd	r0, r1, [r4]
	return z_impl_k_sleep(timeout);
   1e086:	2100      	movs	r1, #0
   1e088:	2021      	movs	r0, #33	; 0x21
   1e08a:	f01f fcf9 	bl	3da80 <z_impl_k_sleep>
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1e08e:	f013 fe27 	bl	31ce0 <generate_sine.constprop.0>
   1e092:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[0] = static_val_coeff * max_variation;
   1e096:	4d32      	ldr	r5, [pc, #200]	; (1e160 <sensor_sim_sample_fetch+0x170>)
   1e098:	2100      	movs	r1, #0
   1e09a:	2021      	movs	r0, #33	; 0x21
   1e09c:	f01f fcf0 	bl	3da80 <z_impl_k_sleep>
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1e0a0:	f013 fe1e 	bl	31ce0 <generate_sine.constprop.0>
			accel_samples[0] = static_val_coeff * max_variation;
   1e0a4:	6828      	ldr	r0, [r5, #0]
   1e0a6:	f7fe fb1d 	bl	1c6e4 <__aeabi_i2d>
   1e0aa:	2200      	movs	r2, #0
   1e0ac:	4b2d      	ldr	r3, [pc, #180]	; (1e164 <sensor_sim_sample_fetch+0x174>)
   1e0ae:	4606      	mov	r6, r0
   1e0b0:	460f      	mov	r7, r1
   1e0b2:	f7fe fb81 	bl	1c7b8 <__aeabi_dmul>
   1e0b6:	e9c4 0100 	strd	r0, r1, [r4]
			accel_samples[1] = static_val_coeff * max_variation;
   1e0ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[2] = static_val_coeff * max_variation;
   1e0be:	e9c4 0104 	strd	r0, r1, [r4, #16]
		static_val_coeff *= -1.0;
   1e0c2:	4630      	mov	r0, r6
   1e0c4:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1e0c8:	f7fe fe10 	bl	1ccec <__aeabi_d2iz>
   1e0cc:	6028      	str	r0, [r5, #0]
	return retval;
   1e0ce:	e7b3      	b.n	1e038 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e0d0:	f021 fd10 	bl	3faf4 <rand>
   1e0d4:	f7fe fb06 	bl	1c6e4 <__aeabi_i2d>
   1e0d8:	a31d      	add	r3, pc, #116	; (adr r3, 1e150 <sensor_sim_sample_fetch+0x160>)
   1e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e0de:	f7fe fc95 	bl	1ca0c <__aeabi_ddiv>
   1e0e2:	2200      	movs	r2, #0
   1e0e4:	4b21      	ldr	r3, [pc, #132]	; (1e16c <sensor_sim_sample_fetch+0x17c>)
   1e0e6:	f7fe f9af 	bl	1c448 <__aeabi_dsub>
	temp_sample = base_temp_sample + generate_pseudo_random();
   1e0ea:	4b21      	ldr	r3, [pc, #132]	; (1e170 <sensor_sim_sample_fetch+0x180>)
   1e0ec:	2200      	movs	r2, #0
   1e0ee:	f7fe f9ad 	bl	1c44c <__adddf3>
   1e0f2:	4b20      	ldr	r3, [pc, #128]	; (1e174 <sensor_sim_sample_fetch+0x184>)
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1e0f4:	e9c3 0100 	strd	r0, r1, [r3]
   1e0f8:	e79e      	b.n	1e038 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e0fa:	f021 fcfb 	bl	3faf4 <rand>
   1e0fe:	f7fe faf1 	bl	1c6e4 <__aeabi_i2d>
   1e102:	a313      	add	r3, pc, #76	; (adr r3, 1e150 <sensor_sim_sample_fetch+0x160>)
   1e104:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e108:	f7fe fc80 	bl	1ca0c <__aeabi_ddiv>
   1e10c:	2200      	movs	r2, #0
   1e10e:	4b17      	ldr	r3, [pc, #92]	; (1e16c <sensor_sim_sample_fetch+0x17c>)
   1e110:	f7fe f99a 	bl	1c448 <__aeabi_dsub>
	humidity_sample = base_humidity_sample + generate_pseudo_random();
   1e114:	4b18      	ldr	r3, [pc, #96]	; (1e178 <sensor_sim_sample_fetch+0x188>)
   1e116:	2200      	movs	r2, #0
   1e118:	f7fe f998 	bl	1c44c <__adddf3>
   1e11c:	4b17      	ldr	r3, [pc, #92]	; (1e17c <sensor_sim_sample_fetch+0x18c>)
   1e11e:	e7e9      	b.n	1e0f4 <sensor_sim_sample_fetch+0x104>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e120:	f021 fce8 	bl	3faf4 <rand>
   1e124:	f7fe fade 	bl	1c6e4 <__aeabi_i2d>
   1e128:	a309      	add	r3, pc, #36	; (adr r3, 1e150 <sensor_sim_sample_fetch+0x160>)
   1e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e12e:	f7fe fc6d 	bl	1ca0c <__aeabi_ddiv>
   1e132:	2200      	movs	r2, #0
   1e134:	4b0d      	ldr	r3, [pc, #52]	; (1e16c <sensor_sim_sample_fetch+0x17c>)
   1e136:	f7fe f987 	bl	1c448 <__aeabi_dsub>
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1e13a:	a307      	add	r3, pc, #28	; (adr r3, 1e158 <sensor_sim_sample_fetch+0x168>)
   1e13c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e140:	f7fe f984 	bl	1c44c <__adddf3>
   1e144:	4b0e      	ldr	r3, [pc, #56]	; (1e180 <sensor_sim_sample_fetch+0x190>)
   1e146:	e7d5      	b.n	1e0f4 <sensor_sim_sample_fetch+0x104>
	return 0;
   1e148:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return sensor_sim_generate_data(chan);
   1e14c:	e775      	b.n	1e03a <sensor_sim_sample_fetch+0x4a>
   1e14e:	bf00      	nop
   1e150:	ffc00000 	.word	0xffc00000
   1e154:	41cfffff 	.word	0x41cfffff
   1e158:	cccccccd 	.word	0xcccccccd
   1e15c:	40588ccc 	.word	0x40588ccc
   1e160:	20020748 	.word	0x20020748
   1e164:	40340000 	.word	0x40340000
   1e168:	20023688 	.word	0x20023688
   1e16c:	3ff00000 	.word	0x3ff00000
   1e170:	40350000 	.word	0x40350000
   1e174:	200239b0 	.word	0x200239b0
   1e178:	404a0000 	.word	0x404a0000
   1e17c:	200236a0 	.word	0x200236a0
   1e180:	200236a8 	.word	0x200236a8
   1e184:	00000000 	.word	0x00000000

0001e188 <sin>:
   1e188:	ec51 0b10 	vmov	r0, r1, d0
   1e18c:	4a28      	ldr	r2, [pc, #160]	; (1e230 <sin+0xa8>)
   1e18e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1e192:	4293      	cmp	r3, r2
   1e194:	b500      	push	{lr}
   1e196:	b085      	sub	sp, #20
   1e198:	dd25      	ble.n	1e1e6 <sin+0x5e>
   1e19a:	4a26      	ldr	r2, [pc, #152]	; (1e234 <sin+0xac>)
   1e19c:	4293      	cmp	r3, r2
   1e19e:	dd09      	ble.n	1e1b4 <sin+0x2c>
   1e1a0:	ee10 2a10 	vmov	r2, s0
   1e1a4:	460b      	mov	r3, r1
   1e1a6:	f7fe f94f 	bl	1c448 <__aeabi_dsub>
   1e1aa:	ec41 0b10 	vmov	d0, r0, r1
   1e1ae:	b005      	add	sp, #20
   1e1b0:	f85d fb04 	ldr.w	pc, [sp], #4
   1e1b4:	4668      	mov	r0, sp
   1e1b6:	f000 f83f 	bl	1e238 <__ieee754_rem_pio2>
   1e1ba:	f000 0003 	and.w	r0, r0, #3
   1e1be:	2801      	cmp	r0, #1
   1e1c0:	d019      	beq.n	1e1f6 <sin+0x6e>
   1e1c2:	2802      	cmp	r0, #2
   1e1c4:	d026      	beq.n	1e214 <sin+0x8c>
   1e1c6:	b1e8      	cbz	r0, 1e204 <sin+0x7c>
   1e1c8:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e1cc:	ed9d 0b00 	vldr	d0, [sp]
   1e1d0:	f000 fa6a 	bl	1e6a8 <__kernel_cos>
   1e1d4:	ec53 2b10 	vmov	r2, r3, d0
   1e1d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e1dc:	ee00 3a90 	vmov	s1, r3
   1e1e0:	b005      	add	sp, #20
   1e1e2:	f85d fb04 	ldr.w	pc, [sp], #4
   1e1e6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 1e228 <sin+0xa0>
   1e1ea:	2000      	movs	r0, #0
   1e1ec:	f000 ffc0 	bl	1f170 <__kernel_sin>
   1e1f0:	b005      	add	sp, #20
   1e1f2:	f85d fb04 	ldr.w	pc, [sp], #4
   1e1f6:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e1fa:	ed9d 0b00 	vldr	d0, [sp]
   1e1fe:	f000 fa53 	bl	1e6a8 <__kernel_cos>
   1e202:	e7d4      	b.n	1e1ae <sin+0x26>
   1e204:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e208:	ed9d 0b00 	vldr	d0, [sp]
   1e20c:	2001      	movs	r0, #1
   1e20e:	f000 ffaf 	bl	1f170 <__kernel_sin>
   1e212:	e7cc      	b.n	1e1ae <sin+0x26>
   1e214:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e218:	ed9d 0b00 	vldr	d0, [sp]
   1e21c:	2001      	movs	r0, #1
   1e21e:	f000 ffa7 	bl	1f170 <__kernel_sin>
   1e222:	e7d7      	b.n	1e1d4 <sin+0x4c>
   1e224:	f3af 8000 	nop.w
	...
   1e230:	3fe921fb 	.word	0x3fe921fb
   1e234:	7fefffff 	.word	0x7fefffff

0001e238 <__ieee754_rem_pio2>:
   1e238:	ec53 2b10 	vmov	r2, r3, d0
   1e23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e240:	4995      	ldr	r1, [pc, #596]	; (1e498 <__ieee754_rem_pio2+0x260>)
   1e242:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1e246:	4604      	mov	r4, r0
   1e248:	428d      	cmp	r5, r1
   1e24a:	ed2d 8b04 	vpush	{d8-d9}
   1e24e:	b08b      	sub	sp, #44	; 0x2c
   1e250:	f340 808f 	ble.w	1e372 <__ieee754_rem_pio2+0x13a>
   1e254:	4991      	ldr	r1, [pc, #580]	; (1e49c <__ieee754_rem_pio2+0x264>)
   1e256:	469b      	mov	fp, r3
   1e258:	428d      	cmp	r5, r1
   1e25a:	dc2d      	bgt.n	1e2b8 <__ieee754_rem_pio2+0x80>
   1e25c:	f1bb 0f00 	cmp.w	fp, #0
   1e260:	4619      	mov	r1, r3
   1e262:	ee10 0a10 	vmov	r0, s0
   1e266:	a382      	add	r3, pc, #520	; (adr r3, 1e470 <__ieee754_rem_pio2+0x238>)
   1e268:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e26c:	f340 81c5 	ble.w	1e5fa <__ieee754_rem_pio2+0x3c2>
   1e270:	f7fe f8ea 	bl	1c448 <__aeabi_dsub>
   1e274:	4b8a      	ldr	r3, [pc, #552]	; (1e4a0 <__ieee754_rem_pio2+0x268>)
   1e276:	4606      	mov	r6, r0
   1e278:	460f      	mov	r7, r1
   1e27a:	429d      	cmp	r5, r3
   1e27c:	f000 8093 	beq.w	1e3a6 <__ieee754_rem_pio2+0x16e>
   1e280:	f04f 0a01 	mov.w	sl, #1
   1e284:	a37c      	add	r3, pc, #496	; (adr r3, 1e478 <__ieee754_rem_pio2+0x240>)
   1e286:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e28a:	f7fe f8dd 	bl	1c448 <__aeabi_dsub>
   1e28e:	4602      	mov	r2, r0
   1e290:	460b      	mov	r3, r1
   1e292:	4630      	mov	r0, r6
   1e294:	4639      	mov	r1, r7
   1e296:	e9c4 2300 	strd	r2, r3, [r4]
   1e29a:	f7fe f8d5 	bl	1c448 <__aeabi_dsub>
   1e29e:	a376      	add	r3, pc, #472	; (adr r3, 1e478 <__ieee754_rem_pio2+0x240>)
   1e2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e2a4:	f7fe f8d0 	bl	1c448 <__aeabi_dsub>
   1e2a8:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e2ac:	4650      	mov	r0, sl
   1e2ae:	b00b      	add	sp, #44	; 0x2c
   1e2b0:	ecbd 8b04 	vpop	{d8-d9}
   1e2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2b8:	497a      	ldr	r1, [pc, #488]	; (1e4a4 <__ieee754_rem_pio2+0x26c>)
   1e2ba:	428d      	cmp	r5, r1
   1e2bc:	f340 8096 	ble.w	1e3ec <__ieee754_rem_pio2+0x1b4>
   1e2c0:	4979      	ldr	r1, [pc, #484]	; (1e4a8 <__ieee754_rem_pio2+0x270>)
   1e2c2:	428d      	cmp	r5, r1
   1e2c4:	dc63      	bgt.n	1e38e <__ieee754_rem_pio2+0x156>
   1e2c6:	ea4f 5a25 	mov.w	sl, r5, asr #20
   1e2ca:	4610      	mov	r0, r2
   1e2cc:	ee10 6a10 	vmov	r6, s0
   1e2d0:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
   1e2d4:	eba5 570a 	sub.w	r7, r5, sl, lsl #20
   1e2d8:	4639      	mov	r1, r7
   1e2da:	f7fe fd07 	bl	1ccec <__aeabi_d2iz>
   1e2de:	f7fe fa01 	bl	1c6e4 <__aeabi_i2d>
   1e2e2:	4680      	mov	r8, r0
   1e2e4:	4689      	mov	r9, r1
   1e2e6:	4630      	mov	r0, r6
   1e2e8:	4639      	mov	r1, r7
   1e2ea:	4642      	mov	r2, r8
   1e2ec:	464b      	mov	r3, r9
   1e2ee:	e9cd 8904 	strd	r8, r9, [sp, #16]
   1e2f2:	f7fe f8a9 	bl	1c448 <__aeabi_dsub>
   1e2f6:	2200      	movs	r2, #0
   1e2f8:	4b6c      	ldr	r3, [pc, #432]	; (1e4ac <__ieee754_rem_pio2+0x274>)
   1e2fa:	f7fe fa5d 	bl	1c7b8 <__aeabi_dmul>
   1e2fe:	460f      	mov	r7, r1
   1e300:	4606      	mov	r6, r0
   1e302:	f7fe fcf3 	bl	1ccec <__aeabi_d2iz>
   1e306:	4605      	mov	r5, r0
   1e308:	f7fe f9ec 	bl	1c6e4 <__aeabi_i2d>
   1e30c:	4602      	mov	r2, r0
   1e30e:	460b      	mov	r3, r1
   1e310:	4630      	mov	r0, r6
   1e312:	4639      	mov	r1, r7
   1e314:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e318:	f7fe f896 	bl	1c448 <__aeabi_dsub>
   1e31c:	2200      	movs	r2, #0
   1e31e:	4b63      	ldr	r3, [pc, #396]	; (1e4ac <__ieee754_rem_pio2+0x274>)
   1e320:	f7fe fa4a 	bl	1c7b8 <__aeabi_dmul>
   1e324:	4602      	mov	r2, r0
   1e326:	460b      	mov	r3, r1
   1e328:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1e32c:	2200      	movs	r2, #0
   1e32e:	2300      	movs	r3, #0
   1e330:	f7fe fcaa 	bl	1cc88 <__aeabi_dcmpeq>
   1e334:	2800      	cmp	r0, #0
   1e336:	f000 815e 	beq.w	1e5f6 <__ieee754_rem_pio2+0x3be>
   1e33a:	2d00      	cmp	r5, #0
   1e33c:	bf0c      	ite	eq
   1e33e:	2301      	moveq	r3, #1
   1e340:	2302      	movne	r3, #2
   1e342:	495b      	ldr	r1, [pc, #364]	; (1e4b0 <__ieee754_rem_pio2+0x278>)
   1e344:	2002      	movs	r0, #2
   1e346:	4652      	mov	r2, sl
   1e348:	9101      	str	r1, [sp, #4]
   1e34a:	4621      	mov	r1, r4
   1e34c:	9000      	str	r0, [sp, #0]
   1e34e:	a804      	add	r0, sp, #16
   1e350:	f000 faea 	bl	1e928 <__kernel_rem_pio2>
   1e354:	f1bb 0f00 	cmp.w	fp, #0
   1e358:	4682      	mov	sl, r0
   1e35a:	daa7      	bge.n	1e2ac <__ieee754_rem_pio2+0x74>
   1e35c:	6862      	ldr	r2, [r4, #4]
   1e35e:	f1c0 0a00 	rsb	sl, r0, #0
   1e362:	68e3      	ldr	r3, [r4, #12]
   1e364:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1e368:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e36c:	6062      	str	r2, [r4, #4]
   1e36e:	60e3      	str	r3, [r4, #12]
   1e370:	e79c      	b.n	1e2ac <__ieee754_rem_pio2+0x74>
   1e372:	f04f 0a00 	mov.w	sl, #0
   1e376:	2000      	movs	r0, #0
   1e378:	2100      	movs	r1, #0
   1e37a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e37e:	4650      	mov	r0, sl
   1e380:	ed84 0b00 	vstr	d0, [r4]
   1e384:	b00b      	add	sp, #44	; 0x2c
   1e386:	ecbd 8b04 	vpop	{d8-d9}
   1e38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e38e:	ee10 0a10 	vmov	r0, s0
   1e392:	4619      	mov	r1, r3
   1e394:	f7fe f858 	bl	1c448 <__aeabi_dsub>
   1e398:	f04f 0a00 	mov.w	sl, #0
   1e39c:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e3a0:	e9c4 0100 	strd	r0, r1, [r4]
   1e3a4:	e782      	b.n	1e2ac <__ieee754_rem_pio2+0x74>
   1e3a6:	a336      	add	r3, pc, #216	; (adr r3, 1e480 <__ieee754_rem_pio2+0x248>)
   1e3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3ac:	f7fe f84c 	bl	1c448 <__aeabi_dsub>
   1e3b0:	4606      	mov	r6, r0
   1e3b2:	460f      	mov	r7, r1
   1e3b4:	f04f 0a01 	mov.w	sl, #1
   1e3b8:	a333      	add	r3, pc, #204	; (adr r3, 1e488 <__ieee754_rem_pio2+0x250>)
   1e3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3be:	f7fe f843 	bl	1c448 <__aeabi_dsub>
   1e3c2:	4602      	mov	r2, r0
   1e3c4:	460b      	mov	r3, r1
   1e3c6:	4630      	mov	r0, r6
   1e3c8:	4639      	mov	r1, r7
   1e3ca:	e9c4 2300 	strd	r2, r3, [r4]
   1e3ce:	f7fe f83b 	bl	1c448 <__aeabi_dsub>
   1e3d2:	a32d      	add	r3, pc, #180	; (adr r3, 1e488 <__ieee754_rem_pio2+0x250>)
   1e3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3d8:	f7fe f836 	bl	1c448 <__aeabi_dsub>
   1e3dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e3e0:	4650      	mov	r0, sl
   1e3e2:	b00b      	add	sp, #44	; 0x2c
   1e3e4:	ecbd 8b04 	vpop	{d8-d9}
   1e3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3ec:	f020 fdde 	bl	3efac <fabs>
   1e3f0:	ee10 0a10 	vmov	r0, s0
   1e3f4:	ec57 6b10 	vmov	r6, r7, d0
   1e3f8:	a325      	add	r3, pc, #148	; (adr r3, 1e490 <__ieee754_rem_pio2+0x258>)
   1e3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3fe:	4639      	mov	r1, r7
   1e400:	f7fe f9da 	bl	1c7b8 <__aeabi_dmul>
   1e404:	2200      	movs	r2, #0
   1e406:	4b2b      	ldr	r3, [pc, #172]	; (1e4b4 <__ieee754_rem_pio2+0x27c>)
   1e408:	f7fe f820 	bl	1c44c <__adddf3>
   1e40c:	f7fe fc6e 	bl	1ccec <__aeabi_d2iz>
   1e410:	4682      	mov	sl, r0
   1e412:	f7fe f967 	bl	1c6e4 <__aeabi_i2d>
   1e416:	4680      	mov	r8, r0
   1e418:	4689      	mov	r9, r1
   1e41a:	a315      	add	r3, pc, #84	; (adr r3, 1e470 <__ieee754_rem_pio2+0x238>)
   1e41c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e420:	f7fe f9ca 	bl	1c7b8 <__aeabi_dmul>
   1e424:	4602      	mov	r2, r0
   1e426:	460b      	mov	r3, r1
   1e428:	4630      	mov	r0, r6
   1e42a:	4639      	mov	r1, r7
   1e42c:	f7fe f80c 	bl	1c448 <__aeabi_dsub>
   1e430:	4606      	mov	r6, r0
   1e432:	460f      	mov	r7, r1
   1e434:	4640      	mov	r0, r8
   1e436:	4649      	mov	r1, r9
   1e438:	a30f      	add	r3, pc, #60	; (adr r3, 1e478 <__ieee754_rem_pio2+0x240>)
   1e43a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e43e:	f7fe f9bb 	bl	1c7b8 <__aeabi_dmul>
   1e442:	f1ba 0f1f 	cmp.w	sl, #31
   1e446:	ec49 8b19 	vmov	d9, r8, r9
   1e44a:	ec47 6b18 	vmov	d8, r6, r7
   1e44e:	4680      	mov	r8, r0
   1e450:	4689      	mov	r9, r1
   1e452:	dc33      	bgt.n	1e4bc <__ieee754_rem_pio2+0x284>
   1e454:	4b18      	ldr	r3, [pc, #96]	; (1e4b8 <__ieee754_rem_pio2+0x280>)
   1e456:	f10a 32ff 	add.w	r2, sl, #4294967295
   1e45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e45e:	42ab      	cmp	r3, r5
   1e460:	d02c      	beq.n	1e4bc <__ieee754_rem_pio2+0x284>
   1e462:	4602      	mov	r2, r0
   1e464:	460b      	mov	r3, r1
   1e466:	4630      	mov	r0, r6
   1e468:	4639      	mov	r1, r7
   1e46a:	e0a3      	b.n	1e5b4 <__ieee754_rem_pio2+0x37c>
   1e46c:	f3af 8000 	nop.w
   1e470:	54400000 	.word	0x54400000
   1e474:	3ff921fb 	.word	0x3ff921fb
   1e478:	1a626331 	.word	0x1a626331
   1e47c:	3dd0b461 	.word	0x3dd0b461
   1e480:	1a600000 	.word	0x1a600000
   1e484:	3dd0b461 	.word	0x3dd0b461
   1e488:	2e037073 	.word	0x2e037073
   1e48c:	3ba3198a 	.word	0x3ba3198a
   1e490:	6dc9c883 	.word	0x6dc9c883
   1e494:	3fe45f30 	.word	0x3fe45f30
   1e498:	3fe921fb 	.word	0x3fe921fb
   1e49c:	4002d97b 	.word	0x4002d97b
   1e4a0:	3ff921fb 	.word	0x3ff921fb
   1e4a4:	413921fb 	.word	0x413921fb
   1e4a8:	7fefffff 	.word	0x7fefffff
   1e4ac:	41700000 	.word	0x41700000
   1e4b0:	0004731c 	.word	0x0004731c
   1e4b4:	3fe00000 	.word	0x3fe00000
   1e4b8:	0004729c 	.word	0x0004729c
   1e4bc:	4642      	mov	r2, r8
   1e4be:	464b      	mov	r3, r9
   1e4c0:	ec51 0b18 	vmov	r0, r1, d8
   1e4c4:	f7fd ffc0 	bl	1c448 <__aeabi_dsub>
   1e4c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1e4cc:	152a      	asrs	r2, r5, #20
   1e4ce:	4606      	mov	r6, r0
   1e4d0:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
   1e4d4:	460f      	mov	r7, r1
   1e4d6:	9203      	str	r2, [sp, #12]
   1e4d8:	2d10      	cmp	r5, #16
   1e4da:	dd6f      	ble.n	1e5bc <__ieee754_rem_pio2+0x384>
   1e4dc:	ec59 8b18 	vmov	r8, r9, d8
   1e4e0:	a367      	add	r3, pc, #412	; (adr r3, 1e680 <__ieee754_rem_pio2+0x448>)
   1e4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e4e6:	ec51 0b19 	vmov	r0, r1, d9
   1e4ea:	f7fe f965 	bl	1c7b8 <__aeabi_dmul>
   1e4ee:	4606      	mov	r6, r0
   1e4f0:	460f      	mov	r7, r1
   1e4f2:	4602      	mov	r2, r0
   1e4f4:	460b      	mov	r3, r1
   1e4f6:	ee18 0a10 	vmov	r0, s16
   1e4fa:	4649      	mov	r1, r9
   1e4fc:	f7fd ffa4 	bl	1c448 <__aeabi_dsub>
   1e500:	ec41 0b18 	vmov	d8, r0, r1
   1e504:	ec53 2b18 	vmov	r2, r3, d8
   1e508:	4640      	mov	r0, r8
   1e50a:	4649      	mov	r1, r9
   1e50c:	f7fd ff9c 	bl	1c448 <__aeabi_dsub>
   1e510:	4632      	mov	r2, r6
   1e512:	463b      	mov	r3, r7
   1e514:	f7fd ff98 	bl	1c448 <__aeabi_dsub>
   1e518:	4606      	mov	r6, r0
   1e51a:	460f      	mov	r7, r1
   1e51c:	a35a      	add	r3, pc, #360	; (adr r3, 1e688 <__ieee754_rem_pio2+0x450>)
   1e51e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e522:	ec51 0b19 	vmov	r0, r1, d9
   1e526:	f7fe f947 	bl	1c7b8 <__aeabi_dmul>
   1e52a:	4632      	mov	r2, r6
   1e52c:	463b      	mov	r3, r7
   1e52e:	f7fd ff8b 	bl	1c448 <__aeabi_dsub>
   1e532:	4602      	mov	r2, r0
   1e534:	460b      	mov	r3, r1
   1e536:	4680      	mov	r8, r0
   1e538:	4689      	mov	r9, r1
   1e53a:	ec51 0b18 	vmov	r0, r1, d8
   1e53e:	f7fd ff83 	bl	1c448 <__aeabi_dsub>
   1e542:	9a03      	ldr	r2, [sp, #12]
   1e544:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1e548:	4606      	mov	r6, r0
   1e54a:	460f      	mov	r7, r1
   1e54c:	1ad3      	subs	r3, r2, r3
   1e54e:	2b31      	cmp	r3, #49	; 0x31
   1e550:	dd34      	ble.n	1e5bc <__ieee754_rem_pio2+0x384>
   1e552:	ec56 5b18 	vmov	r5, r6, d8
   1e556:	a34f      	add	r3, pc, #316	; (adr r3, 1e694 <__ieee754_rem_pio2+0x45c>)
   1e558:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e55c:	ec51 0b19 	vmov	r0, r1, d9
   1e560:	f7fe f92a 	bl	1c7b8 <__aeabi_dmul>
   1e564:	4680      	mov	r8, r0
   1e566:	4689      	mov	r9, r1
   1e568:	4602      	mov	r2, r0
   1e56a:	460b      	mov	r3, r1
   1e56c:	ee18 0a10 	vmov	r0, s16
   1e570:	4631      	mov	r1, r6
   1e572:	f7fd ff69 	bl	1c448 <__aeabi_dsub>
   1e576:	ec41 0b18 	vmov	d8, r0, r1
   1e57a:	ec53 2b18 	vmov	r2, r3, d8
   1e57e:	4631      	mov	r1, r6
   1e580:	4628      	mov	r0, r5
   1e582:	f7fd ff61 	bl	1c448 <__aeabi_dsub>
   1e586:	4642      	mov	r2, r8
   1e588:	464b      	mov	r3, r9
   1e58a:	f7fd ff5d 	bl	1c448 <__aeabi_dsub>
   1e58e:	4606      	mov	r6, r0
   1e590:	460f      	mov	r7, r1
   1e592:	a342      	add	r3, pc, #264	; (adr r3, 1e69c <__ieee754_rem_pio2+0x464>)
   1e594:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e598:	ec51 0b19 	vmov	r0, r1, d9
   1e59c:	f7fe f90c 	bl	1c7b8 <__aeabi_dmul>
   1e5a0:	4632      	mov	r2, r6
   1e5a2:	463b      	mov	r3, r7
   1e5a4:	f7fd ff50 	bl	1c448 <__aeabi_dsub>
   1e5a8:	4680      	mov	r8, r0
   1e5aa:	4689      	mov	r9, r1
   1e5ac:	4602      	mov	r2, r0
   1e5ae:	460b      	mov	r3, r1
   1e5b0:	ec51 0b18 	vmov	r0, r1, d8
   1e5b4:	f7fd ff48 	bl	1c448 <__aeabi_dsub>
   1e5b8:	4606      	mov	r6, r0
   1e5ba:	460f      	mov	r7, r1
   1e5bc:	4632      	mov	r2, r6
   1e5be:	463b      	mov	r3, r7
   1e5c0:	e9c4 0100 	strd	r0, r1, [r4]
   1e5c4:	ec51 0b18 	vmov	r0, r1, d8
   1e5c8:	f7fd ff3e 	bl	1c448 <__aeabi_dsub>
   1e5cc:	4642      	mov	r2, r8
   1e5ce:	464b      	mov	r3, r9
   1e5d0:	f7fd ff3a 	bl	1c448 <__aeabi_dsub>
   1e5d4:	f1bb 0f00 	cmp.w	fp, #0
   1e5d8:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e5dc:	f6bf ae66 	bge.w	1e2ac <__ieee754_rem_pio2+0x74>
   1e5e0:	f107 4500 	add.w	r5, r7, #2147483648	; 0x80000000
   1e5e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e5e8:	f1ca 0a00 	rsb	sl, sl, #0
   1e5ec:	e9c4 6500 	strd	r6, r5, [r4]
   1e5f0:	e9c4 0302 	strd	r0, r3, [r4, #8]
   1e5f4:	e65a      	b.n	1e2ac <__ieee754_rem_pio2+0x74>
   1e5f6:	2303      	movs	r3, #3
   1e5f8:	e6a3      	b.n	1e342 <__ieee754_rem_pio2+0x10a>
   1e5fa:	f7fd ff27 	bl	1c44c <__adddf3>
   1e5fe:	4b24      	ldr	r3, [pc, #144]	; (1e690 <__ieee754_rem_pio2+0x458>)
   1e600:	4606      	mov	r6, r0
   1e602:	460f      	mov	r7, r1
   1e604:	429d      	cmp	r5, r3
   1e606:	d016      	beq.n	1e636 <__ieee754_rem_pio2+0x3fe>
   1e608:	f04f 3aff 	mov.w	sl, #4294967295
   1e60c:	a31a      	add	r3, pc, #104	; (adr r3, 1e678 <__ieee754_rem_pio2+0x440>)
   1e60e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e612:	f7fd ff1b 	bl	1c44c <__adddf3>
   1e616:	4602      	mov	r2, r0
   1e618:	460b      	mov	r3, r1
   1e61a:	4630      	mov	r0, r6
   1e61c:	4639      	mov	r1, r7
   1e61e:	e9c4 2300 	strd	r2, r3, [r4]
   1e622:	f7fd ff11 	bl	1c448 <__aeabi_dsub>
   1e626:	a314      	add	r3, pc, #80	; (adr r3, 1e678 <__ieee754_rem_pio2+0x440>)
   1e628:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e62c:	f7fd ff0e 	bl	1c44c <__adddf3>
   1e630:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e634:	e63a      	b.n	1e2ac <__ieee754_rem_pio2+0x74>
   1e636:	a312      	add	r3, pc, #72	; (adr r3, 1e680 <__ieee754_rem_pio2+0x448>)
   1e638:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e63c:	f7fd ff06 	bl	1c44c <__adddf3>
   1e640:	4606      	mov	r6, r0
   1e642:	460f      	mov	r7, r1
   1e644:	f04f 3aff 	mov.w	sl, #4294967295
   1e648:	a30f      	add	r3, pc, #60	; (adr r3, 1e688 <__ieee754_rem_pio2+0x450>)
   1e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e64e:	f7fd fefd 	bl	1c44c <__adddf3>
   1e652:	4602      	mov	r2, r0
   1e654:	460b      	mov	r3, r1
   1e656:	4630      	mov	r0, r6
   1e658:	4639      	mov	r1, r7
   1e65a:	e9c4 2300 	strd	r2, r3, [r4]
   1e65e:	f7fd fef3 	bl	1c448 <__aeabi_dsub>
   1e662:	a309      	add	r3, pc, #36	; (adr r3, 1e688 <__ieee754_rem_pio2+0x450>)
   1e664:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e668:	f7fd fef0 	bl	1c44c <__adddf3>
   1e66c:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e670:	e61c      	b.n	1e2ac <__ieee754_rem_pio2+0x74>
   1e672:	bf00      	nop
   1e674:	f3af 8000 	nop.w
   1e678:	1a626331 	.word	0x1a626331
   1e67c:	3dd0b461 	.word	0x3dd0b461
   1e680:	1a600000 	.word	0x1a600000
   1e684:	3dd0b461 	.word	0x3dd0b461
   1e688:	2e037073 	.word	0x2e037073
   1e68c:	3ba3198a 	.word	0x3ba3198a
   1e690:	3ff921fb 	.word	0x3ff921fb
   1e694:	2e000000 	.word	0x2e000000
   1e698:	3ba3198a 	.word	0x3ba3198a
   1e69c:	252049c1 	.word	0x252049c1
   1e6a0:	397b839a 	.word	0x397b839a
   1e6a4:	00000000 	.word	0x00000000

0001e6a8 <__kernel_cos>:
   1e6a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6ac:	ec57 6b10 	vmov	r6, r7, d0
   1e6b0:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   1e6b4:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   1e6b8:	ec5b ab11 	vmov	sl, fp, d1
   1e6bc:	ed2d 8b04 	vpush	{d8-d9}
   1e6c0:	da71      	bge.n	1e7a6 <__kernel_cos+0xfe>
   1e6c2:	ee10 0a10 	vmov	r0, s0
   1e6c6:	4639      	mov	r1, r7
   1e6c8:	f7fe fb10 	bl	1ccec <__aeabi_d2iz>
   1e6cc:	2800      	cmp	r0, #0
   1e6ce:	f000 80f6 	beq.w	1e8be <__kernel_cos+0x216>
   1e6d2:	4632      	mov	r2, r6
   1e6d4:	463b      	mov	r3, r7
   1e6d6:	4630      	mov	r0, r6
   1e6d8:	4639      	mov	r1, r7
   1e6da:	f7fe f86d 	bl	1c7b8 <__aeabi_dmul>
   1e6de:	4604      	mov	r4, r0
   1e6e0:	460d      	mov	r5, r1
   1e6e2:	a37b      	add	r3, pc, #492	; (adr r3, 1e8d0 <__kernel_cos+0x228>)
   1e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6e8:	f7fe f866 	bl	1c7b8 <__aeabi_dmul>
   1e6ec:	a37a      	add	r3, pc, #488	; (adr r3, 1e8d8 <__kernel_cos+0x230>)
   1e6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6f2:	f7fd feab 	bl	1c44c <__adddf3>
   1e6f6:	4622      	mov	r2, r4
   1e6f8:	462b      	mov	r3, r5
   1e6fa:	f7fe f85d 	bl	1c7b8 <__aeabi_dmul>
   1e6fe:	a378      	add	r3, pc, #480	; (adr r3, 1e8e0 <__kernel_cos+0x238>)
   1e700:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e704:	f7fd fea0 	bl	1c448 <__aeabi_dsub>
   1e708:	4622      	mov	r2, r4
   1e70a:	462b      	mov	r3, r5
   1e70c:	f7fe f854 	bl	1c7b8 <__aeabi_dmul>
   1e710:	a375      	add	r3, pc, #468	; (adr r3, 1e8e8 <__kernel_cos+0x240>)
   1e712:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e716:	f7fd fe99 	bl	1c44c <__adddf3>
   1e71a:	4622      	mov	r2, r4
   1e71c:	462b      	mov	r3, r5
   1e71e:	f7fe f84b 	bl	1c7b8 <__aeabi_dmul>
   1e722:	a373      	add	r3, pc, #460	; (adr r3, 1e8f0 <__kernel_cos+0x248>)
   1e724:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e728:	f7fd fe8e 	bl	1c448 <__aeabi_dsub>
   1e72c:	4622      	mov	r2, r4
   1e72e:	462b      	mov	r3, r5
   1e730:	f7fe f842 	bl	1c7b8 <__aeabi_dmul>
   1e734:	a370      	add	r3, pc, #448	; (adr r3, 1e8f8 <__kernel_cos+0x250>)
   1e736:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e73a:	f7fd fe87 	bl	1c44c <__adddf3>
   1e73e:	4622      	mov	r2, r4
   1e740:	462b      	mov	r3, r5
   1e742:	f7fe f839 	bl	1c7b8 <__aeabi_dmul>
   1e746:	ec41 0b18 	vmov	d8, r0, r1
   1e74a:	2200      	movs	r2, #0
   1e74c:	4b70      	ldr	r3, [pc, #448]	; (1e910 <__kernel_cos+0x268>)
   1e74e:	4620      	mov	r0, r4
   1e750:	4629      	mov	r1, r5
   1e752:	f7fe f831 	bl	1c7b8 <__aeabi_dmul>
   1e756:	4680      	mov	r8, r0
   1e758:	4689      	mov	r9, r1
   1e75a:	4620      	mov	r0, r4
   1e75c:	4629      	mov	r1, r5
   1e75e:	ec53 2b18 	vmov	r2, r3, d8
   1e762:	f7fe f829 	bl	1c7b8 <__aeabi_dmul>
   1e766:	4604      	mov	r4, r0
   1e768:	460d      	mov	r5, r1
   1e76a:	4652      	mov	r2, sl
   1e76c:	465b      	mov	r3, fp
   1e76e:	4630      	mov	r0, r6
   1e770:	4639      	mov	r1, r7
   1e772:	f7fe f821 	bl	1c7b8 <__aeabi_dmul>
   1e776:	4602      	mov	r2, r0
   1e778:	460b      	mov	r3, r1
   1e77a:	4620      	mov	r0, r4
   1e77c:	4629      	mov	r1, r5
   1e77e:	f7fd fe63 	bl	1c448 <__aeabi_dsub>
   1e782:	4602      	mov	r2, r0
   1e784:	460b      	mov	r3, r1
   1e786:	4640      	mov	r0, r8
   1e788:	4649      	mov	r1, r9
   1e78a:	f7fd fe5d 	bl	1c448 <__aeabi_dsub>
   1e78e:	4602      	mov	r2, r0
   1e790:	460b      	mov	r3, r1
   1e792:	2000      	movs	r0, #0
   1e794:	495f      	ldr	r1, [pc, #380]	; (1e914 <__kernel_cos+0x26c>)
   1e796:	f7fd fe57 	bl	1c448 <__aeabi_dsub>
   1e79a:	ecbd 8b04 	vpop	{d8-d9}
   1e79e:	ec41 0b10 	vmov	d0, r0, r1
   1e7a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7a6:	ee10 2a10 	vmov	r2, s0
   1e7aa:	ee10 0a10 	vmov	r0, s0
   1e7ae:	463b      	mov	r3, r7
   1e7b0:	4639      	mov	r1, r7
   1e7b2:	f7fe f801 	bl	1c7b8 <__aeabi_dmul>
   1e7b6:	4604      	mov	r4, r0
   1e7b8:	460d      	mov	r5, r1
   1e7ba:	a345      	add	r3, pc, #276	; (adr r3, 1e8d0 <__kernel_cos+0x228>)
   1e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7c0:	f7fd fffa 	bl	1c7b8 <__aeabi_dmul>
   1e7c4:	a344      	add	r3, pc, #272	; (adr r3, 1e8d8 <__kernel_cos+0x230>)
   1e7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7ca:	f7fd fe3f 	bl	1c44c <__adddf3>
   1e7ce:	4622      	mov	r2, r4
   1e7d0:	462b      	mov	r3, r5
   1e7d2:	f7fd fff1 	bl	1c7b8 <__aeabi_dmul>
   1e7d6:	a342      	add	r3, pc, #264	; (adr r3, 1e8e0 <__kernel_cos+0x238>)
   1e7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7dc:	f7fd fe34 	bl	1c448 <__aeabi_dsub>
   1e7e0:	4622      	mov	r2, r4
   1e7e2:	462b      	mov	r3, r5
   1e7e4:	f7fd ffe8 	bl	1c7b8 <__aeabi_dmul>
   1e7e8:	a33f      	add	r3, pc, #252	; (adr r3, 1e8e8 <__kernel_cos+0x240>)
   1e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7ee:	f7fd fe2d 	bl	1c44c <__adddf3>
   1e7f2:	4622      	mov	r2, r4
   1e7f4:	462b      	mov	r3, r5
   1e7f6:	f7fd ffdf 	bl	1c7b8 <__aeabi_dmul>
   1e7fa:	a33d      	add	r3, pc, #244	; (adr r3, 1e8f0 <__kernel_cos+0x248>)
   1e7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e800:	f7fd fe22 	bl	1c448 <__aeabi_dsub>
   1e804:	4622      	mov	r2, r4
   1e806:	462b      	mov	r3, r5
   1e808:	f7fd ffd6 	bl	1c7b8 <__aeabi_dmul>
   1e80c:	a33a      	add	r3, pc, #232	; (adr r3, 1e8f8 <__kernel_cos+0x250>)
   1e80e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e812:	f7fd fe1b 	bl	1c44c <__adddf3>
   1e816:	462b      	mov	r3, r5
   1e818:	4622      	mov	r2, r4
   1e81a:	f7fd ffcd 	bl	1c7b8 <__aeabi_dmul>
   1e81e:	4b3e      	ldr	r3, [pc, #248]	; (1e918 <__kernel_cos+0x270>)
   1e820:	4599      	cmp	r9, r3
   1e822:	ec41 0b18 	vmov	d8, r0, r1
   1e826:	dd90      	ble.n	1e74a <__kernel_cos+0xa2>
   1e828:	4b3c      	ldr	r3, [pc, #240]	; (1e91c <__kernel_cos+0x274>)
   1e82a:	4599      	cmp	r9, r3
   1e82c:	dc3c      	bgt.n	1e8a8 <__kernel_cos+0x200>
   1e82e:	2200      	movs	r2, #0
   1e830:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   1e834:	2000      	movs	r0, #0
   1e836:	4937      	ldr	r1, [pc, #220]	; (1e914 <__kernel_cos+0x26c>)
   1e838:	4690      	mov	r8, r2
   1e83a:	4699      	mov	r9, r3
   1e83c:	f7fd fe04 	bl	1c448 <__aeabi_dsub>
   1e840:	ec41 0b19 	vmov	d9, r0, r1
   1e844:	2200      	movs	r2, #0
   1e846:	4b32      	ldr	r3, [pc, #200]	; (1e910 <__kernel_cos+0x268>)
   1e848:	4620      	mov	r0, r4
   1e84a:	4629      	mov	r1, r5
   1e84c:	f7fd ffb4 	bl	1c7b8 <__aeabi_dmul>
   1e850:	4642      	mov	r2, r8
   1e852:	464b      	mov	r3, r9
   1e854:	f7fd fdf8 	bl	1c448 <__aeabi_dsub>
   1e858:	4680      	mov	r8, r0
   1e85a:	4689      	mov	r9, r1
   1e85c:	4620      	mov	r0, r4
   1e85e:	4629      	mov	r1, r5
   1e860:	ec53 2b18 	vmov	r2, r3, d8
   1e864:	f7fd ffa8 	bl	1c7b8 <__aeabi_dmul>
   1e868:	4604      	mov	r4, r0
   1e86a:	460d      	mov	r5, r1
   1e86c:	4652      	mov	r2, sl
   1e86e:	465b      	mov	r3, fp
   1e870:	4630      	mov	r0, r6
   1e872:	4639      	mov	r1, r7
   1e874:	f7fd ffa0 	bl	1c7b8 <__aeabi_dmul>
   1e878:	4602      	mov	r2, r0
   1e87a:	460b      	mov	r3, r1
   1e87c:	4620      	mov	r0, r4
   1e87e:	4629      	mov	r1, r5
   1e880:	f7fd fde2 	bl	1c448 <__aeabi_dsub>
   1e884:	4602      	mov	r2, r0
   1e886:	460b      	mov	r3, r1
   1e888:	4640      	mov	r0, r8
   1e88a:	4649      	mov	r1, r9
   1e88c:	f7fd fddc 	bl	1c448 <__aeabi_dsub>
   1e890:	4602      	mov	r2, r0
   1e892:	460b      	mov	r3, r1
   1e894:	ec51 0b19 	vmov	r0, r1, d9
   1e898:	f7fd fdd6 	bl	1c448 <__aeabi_dsub>
   1e89c:	ecbd 8b04 	vpop	{d8-d9}
   1e8a0:	ec41 0b10 	vmov	d0, r0, r1
   1e8a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8a8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 1e900 <__kernel_cos+0x258>
   1e8ac:	f04f 0800 	mov.w	r8, #0
   1e8b0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1e920 <__kernel_cos+0x278>
   1e8b4:	eeb0 9a47 	vmov.f32	s18, s14
   1e8b8:	eef0 9a67 	vmov.f32	s19, s15
   1e8bc:	e7c2      	b.n	1e844 <__kernel_cos+0x19c>
   1e8be:	ecbd 8b04 	vpop	{d8-d9}
   1e8c2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 1e908 <__kernel_cos+0x260>
   1e8c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8ca:	bf00      	nop
   1e8cc:	f3af 8000 	nop.w
   1e8d0:	be8838d4 	.word	0xbe8838d4
   1e8d4:	bda8fae9 	.word	0xbda8fae9
   1e8d8:	bdb4b1c4 	.word	0xbdb4b1c4
   1e8dc:	3e21ee9e 	.word	0x3e21ee9e
   1e8e0:	809c52ad 	.word	0x809c52ad
   1e8e4:	3e927e4f 	.word	0x3e927e4f
   1e8e8:	19cb1590 	.word	0x19cb1590
   1e8ec:	3efa01a0 	.word	0x3efa01a0
   1e8f0:	16c15177 	.word	0x16c15177
   1e8f4:	3f56c16c 	.word	0x3f56c16c
   1e8f8:	5555554c 	.word	0x5555554c
   1e8fc:	3fa55555 	.word	0x3fa55555
   1e900:	00000000 	.word	0x00000000
   1e904:	3fe70000 	.word	0x3fe70000
   1e908:	00000000 	.word	0x00000000
   1e90c:	3ff00000 	.word	0x3ff00000
   1e910:	3fe00000 	.word	0x3fe00000
   1e914:	3ff00000 	.word	0x3ff00000
   1e918:	3fd33332 	.word	0x3fd33332
   1e91c:	3fe90000 	.word	0x3fe90000
   1e920:	3fd20000 	.word	0x3fd20000
   1e924:	00000000 	.word	0x00000000

0001e928 <__kernel_rem_pio2>:
   1e928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e92c:	461c      	mov	r4, r3
   1e92e:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   1e932:	f112 0f14 	cmn.w	r2, #20
   1e936:	910b      	str	r1, [sp, #44]	; 0x2c
   1e938:	f104 31ff 	add.w	r1, r4, #4294967295
   1e93c:	9308      	str	r3, [sp, #32]
   1e93e:	9103      	str	r1, [sp, #12]
   1e940:	4bb4      	ldr	r3, [pc, #720]	; (1ec14 <__kernel_rem_pio2+0x2ec>)
   1e942:	99a2      	ldr	r1, [sp, #648]	; 0x288
   1e944:	9004      	str	r0, [sp, #16]
   1e946:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1e94a:	9305      	str	r3, [sp, #20]
   1e94c:	f2c0 8342 	blt.w	1efd4 <__kernel_rem_pio2+0x6ac>
   1e950:	1ed3      	subs	r3, r2, #3
   1e952:	49b1      	ldr	r1, [pc, #708]	; (1ec18 <__kernel_rem_pio2+0x2f0>)
   1e954:	fb81 0103 	smull	r0, r1, r1, r3
   1e958:	17db      	asrs	r3, r3, #31
   1e95a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1e95e:	9307      	str	r3, [sp, #28]
   1e960:	3301      	adds	r3, #1
   1e962:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1e966:	00db      	lsls	r3, r3, #3
   1e968:	18d3      	adds	r3, r2, r3
   1e96a:	9a07      	ldr	r2, [sp, #28]
   1e96c:	9306      	str	r3, [sp, #24]
   1e96e:	9b03      	ldr	r3, [sp, #12]
   1e970:	1ad4      	subs	r4, r2, r3
   1e972:	9a05      	ldr	r2, [sp, #20]
   1e974:	18d6      	adds	r6, r2, r3
   1e976:	d414      	bmi.n	1e9a2 <__kernel_rem_pio2+0x7a>
   1e978:	3601      	adds	r6, #1
   1e97a:	ad20      	add	r5, sp, #128	; 0x80
   1e97c:	f04f 0800 	mov.w	r8, #0
   1e980:	f04f 0900 	mov.w	r9, #0
   1e984:	4426      	add	r6, r4
   1e986:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
   1e988:	2c00      	cmp	r4, #0
   1e98a:	4640      	mov	r0, r8
   1e98c:	4649      	mov	r1, r9
   1e98e:	db03      	blt.n	1e998 <__kernel_rem_pio2+0x70>
   1e990:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   1e994:	f7fd fea6 	bl	1c6e4 <__aeabi_i2d>
   1e998:	3401      	adds	r4, #1
   1e99a:	42b4      	cmp	r4, r6
   1e99c:	e8e5 0102 	strd	r0, r1, [r5], #8
   1e9a0:	d1f2      	bne.n	1e988 <__kernel_rem_pio2+0x60>
   1e9a2:	9b05      	ldr	r3, [sp, #20]
   1e9a4:	2b00      	cmp	r3, #0
   1e9a6:	f2c0 83c5 	blt.w	1f134 <__kernel_rem_pio2+0x80c>
   1e9aa:	9b08      	ldr	r3, [sp, #32]
   1e9ac:	a920      	add	r1, sp, #128	; 0x80
   1e9ae:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
   1e9b2:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1e9b6:	00da      	lsls	r2, r3, #3
   1e9b8:	eb01 09c3 	add.w	r9, r1, r3, lsl #3
   1e9bc:	9202      	str	r2, [sp, #8]
   1e9be:	9a05      	ldr	r2, [sp, #20]
   1e9c0:	441a      	add	r2, r3
   1e9c2:	9201      	str	r2, [sp, #4]
   1e9c4:	9a04      	ldr	r2, [sp, #16]
   1e9c6:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
   1e9ca:	9b03      	ldr	r3, [sp, #12]
   1e9cc:	2b00      	cmp	r3, #0
   1e9ce:	f2c0 81a6 	blt.w	1ed1e <__kernel_rem_pio2+0x3f6>
   1e9d2:	464f      	mov	r7, r9
   1e9d4:	9e04      	ldr	r6, [sp, #16]
   1e9d6:	2400      	movs	r4, #0
   1e9d8:	2500      	movs	r5, #0
   1e9da:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   1e9de:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   1e9e2:	f7fd fee9 	bl	1c7b8 <__aeabi_dmul>
   1e9e6:	4602      	mov	r2, r0
   1e9e8:	460b      	mov	r3, r1
   1e9ea:	4620      	mov	r0, r4
   1e9ec:	4629      	mov	r1, r5
   1e9ee:	f7fd fd2d 	bl	1c44c <__adddf3>
   1e9f2:	4546      	cmp	r6, r8
   1e9f4:	4604      	mov	r4, r0
   1e9f6:	460d      	mov	r5, r1
   1e9f8:	d1ef      	bne.n	1e9da <__kernel_rem_pio2+0xb2>
   1e9fa:	f10a 0a01 	add.w	sl, sl, #1
   1e9fe:	9b01      	ldr	r3, [sp, #4]
   1ea00:	f109 0908 	add.w	r9, r9, #8
   1ea04:	459a      	cmp	sl, r3
   1ea06:	e8eb 4502 	strd	r4, r5, [fp], #8
   1ea0a:	d1de      	bne.n	1e9ca <__kernel_rem_pio2+0xa2>
   1ea0c:	9a04      	ldr	r2, [sp, #16]
   1ea0e:	a90c      	add	r1, sp, #48	; 0x30
   1ea10:	9b02      	ldr	r3, [sp, #8]
   1ea12:	4413      	add	r3, r2
   1ea14:	9a05      	ldr	r2, [sp, #20]
   1ea16:	469b      	mov	fp, r3
   1ea18:	eb01 0382 	add.w	r3, r1, r2, lsl #2
   1ea1c:	a90b      	add	r1, sp, #44	; 0x2c
   1ea1e:	9201      	str	r2, [sp, #4]
   1ea20:	3b08      	subs	r3, #8
   1ea22:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1ea26:	9309      	str	r3, [sp, #36]	; 0x24
   1ea28:	920a      	str	r2, [sp, #40]	; 0x28
   1ea2a:	9a01      	ldr	r2, [sp, #4]
   1ea2c:	a998      	add	r1, sp, #608	; 0x260
   1ea2e:	2a00      	cmp	r2, #0
   1ea30:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   1ea34:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1ea38:	dd2a      	ble.n	1ea90 <__kernel_rem_pio2+0x168>
   1ea3a:	f50d 79e0 	add.w	r9, sp, #448	; 0x1c0
   1ea3e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   1ea42:	eb09 08c2 	add.w	r8, r9, r2, lsl #3
   1ea46:	2200      	movs	r2, #0
   1ea48:	4b74      	ldr	r3, [pc, #464]	; (1ec1c <__kernel_rem_pio2+0x2f4>)
   1ea4a:	4620      	mov	r0, r4
   1ea4c:	4629      	mov	r1, r5
   1ea4e:	f7fd feb3 	bl	1c7b8 <__aeabi_dmul>
   1ea52:	f7fe f94b 	bl	1ccec <__aeabi_d2iz>
   1ea56:	f7fd fe45 	bl	1c6e4 <__aeabi_i2d>
   1ea5a:	2200      	movs	r2, #0
   1ea5c:	4b70      	ldr	r3, [pc, #448]	; (1ec20 <__kernel_rem_pio2+0x2f8>)
   1ea5e:	4606      	mov	r6, r0
   1ea60:	460f      	mov	r7, r1
   1ea62:	f7fd fea9 	bl	1c7b8 <__aeabi_dmul>
   1ea66:	4602      	mov	r2, r0
   1ea68:	460b      	mov	r3, r1
   1ea6a:	4620      	mov	r0, r4
   1ea6c:	4629      	mov	r1, r5
   1ea6e:	f7fd fceb 	bl	1c448 <__aeabi_dsub>
   1ea72:	f7fe f93b 	bl	1ccec <__aeabi_d2iz>
   1ea76:	4604      	mov	r4, r0
   1ea78:	4639      	mov	r1, r7
   1ea7a:	4630      	mov	r0, r6
   1ea7c:	f84a 4b04 	str.w	r4, [sl], #4
   1ea80:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   1ea84:	f7fd fce2 	bl	1c44c <__adddf3>
   1ea88:	4604      	mov	r4, r0
   1ea8a:	45c8      	cmp	r8, r9
   1ea8c:	460d      	mov	r5, r1
   1ea8e:	d1da      	bne.n	1ea46 <__kernel_rem_pio2+0x11e>
   1ea90:	f8dd 9018 	ldr.w	r9, [sp, #24]
   1ea94:	ec45 4b10 	vmov	d0, r4, r5
   1ea98:	4648      	mov	r0, r9
   1ea9a:	f000 fcb5 	bl	1f408 <scalbn>
   1ea9e:	2200      	movs	r2, #0
   1eaa0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1eaa4:	ee10 0a10 	vmov	r0, s0
   1eaa8:	ec55 4b10 	vmov	r4, r5, d0
   1eaac:	4629      	mov	r1, r5
   1eaae:	f7fd fe83 	bl	1c7b8 <__aeabi_dmul>
   1eab2:	ec41 0b10 	vmov	d0, r0, r1
   1eab6:	f000 fc23 	bl	1f300 <floor>
   1eaba:	2200      	movs	r2, #0
   1eabc:	4b59      	ldr	r3, [pc, #356]	; (1ec24 <__kernel_rem_pio2+0x2fc>)
   1eabe:	ec51 0b10 	vmov	r0, r1, d0
   1eac2:	f7fd fe79 	bl	1c7b8 <__aeabi_dmul>
   1eac6:	4602      	mov	r2, r0
   1eac8:	460b      	mov	r3, r1
   1eaca:	4620      	mov	r0, r4
   1eacc:	4629      	mov	r1, r5
   1eace:	f7fd fcbb 	bl	1c448 <__aeabi_dsub>
   1ead2:	460d      	mov	r5, r1
   1ead4:	4604      	mov	r4, r0
   1ead6:	f7fe f909 	bl	1ccec <__aeabi_d2iz>
   1eada:	4680      	mov	r8, r0
   1eadc:	f7fd fe02 	bl	1c6e4 <__aeabi_i2d>
   1eae0:	460b      	mov	r3, r1
   1eae2:	4602      	mov	r2, r0
   1eae4:	4629      	mov	r1, r5
   1eae6:	4620      	mov	r0, r4
   1eae8:	f7fd fcae 	bl	1c448 <__aeabi_dsub>
   1eaec:	464b      	mov	r3, r9
   1eaee:	4606      	mov	r6, r0
   1eaf0:	460f      	mov	r7, r1
   1eaf2:	2b00      	cmp	r3, #0
   1eaf4:	f340 8098 	ble.w	1ec28 <__kernel_rem_pio2+0x300>
   1eaf8:	9a01      	ldr	r2, [sp, #4]
   1eafa:	a90c      	add	r1, sp, #48	; 0x30
   1eafc:	f1c9 0318 	rsb	r3, r9, #24
   1eb00:	f1c9 0517 	rsb	r5, r9, #23
   1eb04:	3a01      	subs	r2, #1
   1eb06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1eb0a:	fa41 f003 	asr.w	r0, r1, r3
   1eb0e:	fa00 f303 	lsl.w	r3, r0, r3
   1eb12:	4480      	add	r8, r0
   1eb14:	1acb      	subs	r3, r1, r3
   1eb16:	a90c      	add	r1, sp, #48	; 0x30
   1eb18:	fa43 f505 	asr.w	r5, r3, r5
   1eb1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1eb20:	2d00      	cmp	r5, #0
   1eb22:	f300 808b 	bgt.w	1ec3c <__kernel_rem_pio2+0x314>
   1eb26:	2200      	movs	r2, #0
   1eb28:	2300      	movs	r3, #0
   1eb2a:	4630      	mov	r0, r6
   1eb2c:	4639      	mov	r1, r7
   1eb2e:	f7fe f8ab 	bl	1cc88 <__aeabi_dcmpeq>
   1eb32:	2800      	cmp	r0, #0
   1eb34:	f000 8255 	beq.w	1efe2 <__kernel_rem_pio2+0x6ba>
   1eb38:	9901      	ldr	r1, [sp, #4]
   1eb3a:	9b05      	ldr	r3, [sp, #20]
   1eb3c:	f101 3aff 	add.w	sl, r1, #4294967295
   1eb40:	4553      	cmp	r3, sl
   1eb42:	dc10      	bgt.n	1eb66 <__kernel_rem_pio2+0x23e>
   1eb44:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   1eb48:	2200      	movs	r2, #0
   1eb4a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1eb4c:	440b      	add	r3, r1
   1eb4e:	a90c      	add	r1, sp, #48	; 0x30
   1eb50:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1eb54:	f853 1904 	ldr.w	r1, [r3], #-4
   1eb58:	4283      	cmp	r3, r0
   1eb5a:	ea42 0201 	orr.w	r2, r2, r1
   1eb5e:	d1f9      	bne.n	1eb54 <__kernel_rem_pio2+0x22c>
   1eb60:	2a00      	cmp	r2, #0
   1eb62:	f040 80df 	bne.w	1ed24 <__kernel_rem_pio2+0x3fc>
   1eb66:	9b05      	ldr	r3, [sp, #20]
   1eb68:	aa0c      	add	r2, sp, #48	; 0x30
   1eb6a:	3b01      	subs	r3, #1
   1eb6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1eb70:	2b00      	cmp	r3, #0
   1eb72:	f040 80cf 	bne.w	1ed14 <__kernel_rem_pio2+0x3ec>
   1eb76:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1eb78:	2301      	movs	r3, #1
   1eb7a:	f852 1904 	ldr.w	r1, [r2], #-4
   1eb7e:	3301      	adds	r3, #1
   1eb80:	2900      	cmp	r1, #0
   1eb82:	d0fa      	beq.n	1eb7a <__kernel_rem_pio2+0x252>
   1eb84:	9901      	ldr	r1, [sp, #4]
   1eb86:	1c4a      	adds	r2, r1, #1
   1eb88:	18cb      	adds	r3, r1, r3
   1eb8a:	4691      	mov	r9, r2
   1eb8c:	9302      	str	r3, [sp, #8]
   1eb8e:	9b07      	ldr	r3, [sp, #28]
   1eb90:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   1eb94:	9901      	ldr	r1, [sp, #4]
   1eb96:	18d3      	adds	r3, r2, r3
   1eb98:	9808      	ldr	r0, [sp, #32]
   1eb9a:	449a      	add	sl, r3
   1eb9c:	4401      	add	r1, r0
   1eb9e:	ab20      	add	r3, sp, #128	; 0x80
   1eba0:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   1eba4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   1eba6:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
   1ebaa:	ab70      	add	r3, sp, #448	; 0x1c0
   1ebac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ebb0:	9301      	str	r3, [sp, #4]
   1ebb2:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   1ebb6:	4647      	mov	r7, r8
   1ebb8:	f7fd fd94 	bl	1c6e4 <__aeabi_i2d>
   1ebbc:	460b      	mov	r3, r1
   1ebbe:	9903      	ldr	r1, [sp, #12]
   1ebc0:	4602      	mov	r2, r0
   1ebc2:	f108 0808 	add.w	r8, r8, #8
   1ebc6:	2900      	cmp	r1, #0
   1ebc8:	e948 2302 	strd	r2, r3, [r8, #-8]
   1ebcc:	db1e      	blt.n	1ec0c <__kernel_rem_pio2+0x2e4>
   1ebce:	9e04      	ldr	r6, [sp, #16]
   1ebd0:	2400      	movs	r4, #0
   1ebd2:	2500      	movs	r5, #0
   1ebd4:	e001      	b.n	1ebda <__kernel_rem_pio2+0x2b2>
   1ebd6:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   1ebda:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   1ebde:	f7fd fdeb 	bl	1c7b8 <__aeabi_dmul>
   1ebe2:	4602      	mov	r2, r0
   1ebe4:	460b      	mov	r3, r1
   1ebe6:	4620      	mov	r0, r4
   1ebe8:	4629      	mov	r1, r5
   1ebea:	f7fd fc2f 	bl	1c44c <__adddf3>
   1ebee:	455e      	cmp	r6, fp
   1ebf0:	4604      	mov	r4, r0
   1ebf2:	460d      	mov	r5, r1
   1ebf4:	d1ef      	bne.n	1ebd6 <__kernel_rem_pio2+0x2ae>
   1ebf6:	9b01      	ldr	r3, [sp, #4]
   1ebf8:	f109 0901 	add.w	r9, r9, #1
   1ebfc:	e8e3 4502 	strd	r4, r5, [r3], #8
   1ec00:	9301      	str	r3, [sp, #4]
   1ec02:	9b02      	ldr	r3, [sp, #8]
   1ec04:	4599      	cmp	r9, r3
   1ec06:	ddd4      	ble.n	1ebb2 <__kernel_rem_pio2+0x28a>
   1ec08:	9301      	str	r3, [sp, #4]
   1ec0a:	e70e      	b.n	1ea2a <__kernel_rem_pio2+0x102>
   1ec0c:	2400      	movs	r4, #0
   1ec0e:	2500      	movs	r5, #0
   1ec10:	e7f1      	b.n	1ebf6 <__kernel_rem_pio2+0x2ce>
   1ec12:	bf00      	nop
   1ec14:	00047424 	.word	0x00047424
   1ec18:	2aaaaaab 	.word	0x2aaaaaab
   1ec1c:	3e700000 	.word	0x3e700000
   1ec20:	41700000 	.word	0x41700000
   1ec24:	40200000 	.word	0x40200000
   1ec28:	d16b      	bne.n	1ed02 <__kernel_rem_pio2+0x3da>
   1ec2a:	9b01      	ldr	r3, [sp, #4]
   1ec2c:	aa0c      	add	r2, sp, #48	; 0x30
   1ec2e:	3b01      	subs	r3, #1
   1ec30:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1ec34:	15ed      	asrs	r5, r5, #23
   1ec36:	2d00      	cmp	r5, #0
   1ec38:	f77f af75 	ble.w	1eb26 <__kernel_rem_pio2+0x1fe>
   1ec3c:	9b01      	ldr	r3, [sp, #4]
   1ec3e:	f108 0801 	add.w	r8, r8, #1
   1ec42:	2b00      	cmp	r3, #0
   1ec44:	f340 81cb 	ble.w	1efde <__kernel_rem_pio2+0x6b6>
   1ec48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1ec4a:	2c00      	cmp	r4, #0
   1ec4c:	d151      	bne.n	1ecf2 <__kernel_rem_pio2+0x3ca>
   1ec4e:	9b01      	ldr	r3, [sp, #4]
   1ec50:	2b01      	cmp	r3, #1
   1ec52:	d020      	beq.n	1ec96 <__kernel_rem_pio2+0x36e>
   1ec54:	ab0c      	add	r3, sp, #48	; 0x30
   1ec56:	2201      	movs	r2, #1
   1ec58:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1ec5c:	2c00      	cmp	r4, #0
   1ec5e:	d04b      	beq.n	1ecf8 <__kernel_rem_pio2+0x3d0>
   1ec60:	1c53      	adds	r3, r2, #1
   1ec62:	a90c      	add	r1, sp, #48	; 0x30
   1ec64:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   1ec68:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   1ec6c:	9901      	ldr	r1, [sp, #4]
   1ec6e:	4299      	cmp	r1, r3
   1ec70:	dd10      	ble.n	1ec94 <__kernel_rem_pio2+0x36c>
   1ec72:	a80c      	add	r0, sp, #48	; 0x30
   1ec74:	aa0c      	add	r2, sp, #48	; 0x30
   1ec76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1ec7a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1ec7e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1ec82:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   1ec86:	e000      	b.n	1ec8a <__kernel_rem_pio2+0x362>
   1ec88:	681a      	ldr	r2, [r3, #0]
   1ec8a:	1a8a      	subs	r2, r1, r2
   1ec8c:	f843 2b04 	str.w	r2, [r3], #4
   1ec90:	4283      	cmp	r3, r0
   1ec92:	d1f9      	bne.n	1ec88 <__kernel_rem_pio2+0x360>
   1ec94:	2401      	movs	r4, #1
   1ec96:	9b06      	ldr	r3, [sp, #24]
   1ec98:	2b00      	cmp	r3, #0
   1ec9a:	dd0e      	ble.n	1ecba <__kernel_rem_pio2+0x392>
   1ec9c:	2b01      	cmp	r3, #1
   1ec9e:	f000 816c 	beq.w	1ef7a <__kernel_rem_pio2+0x652>
   1eca2:	2b02      	cmp	r3, #2
   1eca4:	d109      	bne.n	1ecba <__kernel_rem_pio2+0x392>
   1eca6:	9b01      	ldr	r3, [sp, #4]
   1eca8:	a90c      	add	r1, sp, #48	; 0x30
   1ecaa:	1e5a      	subs	r2, r3, #1
   1ecac:	ab0c      	add	r3, sp, #48	; 0x30
   1ecae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ecb2:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1ecb6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1ecba:	2d02      	cmp	r5, #2
   1ecbc:	f47f af33 	bne.w	1eb26 <__kernel_rem_pio2+0x1fe>
   1ecc0:	4632      	mov	r2, r6
   1ecc2:	463b      	mov	r3, r7
   1ecc4:	2000      	movs	r0, #0
   1ecc6:	49be      	ldr	r1, [pc, #760]	; (1efc0 <__kernel_rem_pio2+0x698>)
   1ecc8:	f7fd fbbe 	bl	1c448 <__aeabi_dsub>
   1eccc:	4606      	mov	r6, r0
   1ecce:	460f      	mov	r7, r1
   1ecd0:	2c00      	cmp	r4, #0
   1ecd2:	f43f af28 	beq.w	1eb26 <__kernel_rem_pio2+0x1fe>
   1ecd6:	9806      	ldr	r0, [sp, #24]
   1ecd8:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 1efb0 <__kernel_rem_pio2+0x688>
   1ecdc:	f000 fb94 	bl	1f408 <scalbn>
   1ece0:	4630      	mov	r0, r6
   1ece2:	4639      	mov	r1, r7
   1ece4:	ec53 2b10 	vmov	r2, r3, d0
   1ece8:	f7fd fbae 	bl	1c448 <__aeabi_dsub>
   1ecec:	4606      	mov	r6, r0
   1ecee:	460f      	mov	r7, r1
   1ecf0:	e719      	b.n	1eb26 <__kernel_rem_pio2+0x1fe>
   1ecf2:	2301      	movs	r3, #1
   1ecf4:	2200      	movs	r2, #0
   1ecf6:	e7b4      	b.n	1ec62 <__kernel_rem_pio2+0x33a>
   1ecf8:	3201      	adds	r2, #1
   1ecfa:	9901      	ldr	r1, [sp, #4]
   1ecfc:	428a      	cmp	r2, r1
   1ecfe:	d1ab      	bne.n	1ec58 <__kernel_rem_pio2+0x330>
   1ed00:	e7c9      	b.n	1ec96 <__kernel_rem_pio2+0x36e>
   1ed02:	2200      	movs	r2, #0
   1ed04:	4baf      	ldr	r3, [pc, #700]	; (1efc4 <__kernel_rem_pio2+0x69c>)
   1ed06:	f7fd ffdd 	bl	1ccc4 <__aeabi_dcmpge>
   1ed0a:	2800      	cmp	r0, #0
   1ed0c:	f040 8140 	bne.w	1ef90 <__kernel_rem_pio2+0x668>
   1ed10:	4605      	mov	r5, r0
   1ed12:	e708      	b.n	1eb26 <__kernel_rem_pio2+0x1fe>
   1ed14:	9b01      	ldr	r3, [sp, #4]
   1ed16:	1c5a      	adds	r2, r3, #1
   1ed18:	4691      	mov	r9, r2
   1ed1a:	9202      	str	r2, [sp, #8]
   1ed1c:	e737      	b.n	1eb8e <__kernel_rem_pio2+0x266>
   1ed1e:	2400      	movs	r4, #0
   1ed20:	2500      	movs	r5, #0
   1ed22:	e66a      	b.n	1e9fa <__kernel_rem_pio2+0xd2>
   1ed24:	9a06      	ldr	r2, [sp, #24]
   1ed26:	ab0c      	add	r3, sp, #48	; 0x30
   1ed28:	f8cd 801c 	str.w	r8, [sp, #28]
   1ed2c:	3a18      	subs	r2, #24
   1ed2e:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   1ed32:	9503      	str	r5, [sp, #12]
   1ed34:	9206      	str	r2, [sp, #24]
   1ed36:	b973      	cbnz	r3, 1ed56 <__kernel_rem_pio2+0x42e>
   1ed38:	4ba3      	ldr	r3, [pc, #652]	; (1efc8 <__kernel_rem_pio2+0x6a0>)
   1ed3a:	9901      	ldr	r1, [sp, #4]
   1ed3c:	4419      	add	r1, r3
   1ed3e:	460b      	mov	r3, r1
   1ed40:	a90c      	add	r1, sp, #48	; 0x30
   1ed42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1ed46:	f853 1904 	ldr.w	r1, [r3], #-4
   1ed4a:	f10a 3aff 	add.w	sl, sl, #4294967295
   1ed4e:	3a18      	subs	r2, #24
   1ed50:	2900      	cmp	r1, #0
   1ed52:	d0f8      	beq.n	1ed46 <__kernel_rem_pio2+0x41e>
   1ed54:	9206      	str	r2, [sp, #24]
   1ed56:	9806      	ldr	r0, [sp, #24]
   1ed58:	ed9f 0b95 	vldr	d0, [pc, #596]	; 1efb0 <__kernel_rem_pio2+0x688>
   1ed5c:	f000 fb54 	bl	1f408 <scalbn>
   1ed60:	f1ba 0f00 	cmp.w	sl, #0
   1ed64:	ec55 4b10 	vmov	r4, r5, d0
   1ed68:	f2c0 81da 	blt.w	1f120 <__kernel_rem_pio2+0x7f8>
   1ed6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
   1ed70:	f10a 0301 	add.w	r3, sl, #1
   1ed74:	9204      	str	r2, [sp, #16]
   1ed76:	aa70      	add	r2, sp, #448	; 0x1c0
   1ed78:	9306      	str	r3, [sp, #24]
   1ed7a:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
   1ed7e:	aa0c      	add	r2, sp, #48	; 0x30
   1ed80:	f10b 0908 	add.w	r9, fp, #8
   1ed84:	eb02 0883 	add.w	r8, r2, r3, lsl #2
   1ed88:	f858 0d04 	ldr.w	r0, [r8, #-4]!
   1ed8c:	f7fd fcaa 	bl	1c6e4 <__aeabi_i2d>
   1ed90:	4622      	mov	r2, r4
   1ed92:	462b      	mov	r3, r5
   1ed94:	f7fd fd10 	bl	1c7b8 <__aeabi_dmul>
   1ed98:	4606      	mov	r6, r0
   1ed9a:	460f      	mov	r7, r1
   1ed9c:	4b8b      	ldr	r3, [pc, #556]	; (1efcc <__kernel_rem_pio2+0x6a4>)
   1ed9e:	4620      	mov	r0, r4
   1eda0:	4629      	mov	r1, r5
   1eda2:	2200      	movs	r2, #0
   1eda4:	e969 6702 	strd	r6, r7, [r9, #-8]!
   1eda8:	f7fd fd06 	bl	1c7b8 <__aeabi_dmul>
   1edac:	ab0c      	add	r3, sp, #48	; 0x30
   1edae:	4604      	mov	r4, r0
   1edb0:	460d      	mov	r5, r1
   1edb2:	4598      	cmp	r8, r3
   1edb4:	d1e8      	bne.n	1ed88 <__kernel_rem_pio2+0x460>
   1edb6:	ab48      	add	r3, sp, #288	; 0x120
   1edb8:	f04f 0900 	mov.w	r9, #0
   1edbc:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   1edc0:	f8dd a014 	ldr.w	sl, [sp, #20]
   1edc4:	f1ba 0f00 	cmp.w	sl, #0
   1edc8:	db2c      	blt.n	1ee24 <__kernel_rem_pio2+0x4fc>
   1edca:	f8df 8204 	ldr.w	r8, [pc, #516]	; 1efd0 <__kernel_rem_pio2+0x6a8>
   1edce:	465f      	mov	r7, fp
   1edd0:	2600      	movs	r6, #0
   1edd2:	2400      	movs	r4, #0
   1edd4:	2500      	movs	r5, #0
   1edd6:	a378      	add	r3, pc, #480	; (adr r3, 1efb8 <__kernel_rem_pio2+0x690>)
   1edd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eddc:	e003      	b.n	1ede6 <__kernel_rem_pio2+0x4be>
   1edde:	45b1      	cmp	r9, r6
   1ede0:	db10      	blt.n	1ee04 <__kernel_rem_pio2+0x4dc>
   1ede2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   1ede6:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   1edea:	3601      	adds	r6, #1
   1edec:	f7fd fce4 	bl	1c7b8 <__aeabi_dmul>
   1edf0:	4602      	mov	r2, r0
   1edf2:	460b      	mov	r3, r1
   1edf4:	4620      	mov	r0, r4
   1edf6:	4629      	mov	r1, r5
   1edf8:	f7fd fb28 	bl	1c44c <__adddf3>
   1edfc:	45b2      	cmp	sl, r6
   1edfe:	4604      	mov	r4, r0
   1ee00:	460d      	mov	r5, r1
   1ee02:	daec      	bge.n	1edde <__kernel_rem_pio2+0x4b6>
   1ee04:	9b01      	ldr	r3, [sp, #4]
   1ee06:	f1ab 0b08 	sub.w	fp, fp, #8
   1ee0a:	f109 0201 	add.w	r2, r9, #1
   1ee0e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1ee12:	e9c3 4500 	strd	r4, r5, [r3]
   1ee16:	9b02      	ldr	r3, [sp, #8]
   1ee18:	454b      	cmp	r3, r9
   1ee1a:	d006      	beq.n	1ee2a <__kernel_rem_pio2+0x502>
   1ee1c:	f1ba 0f00 	cmp.w	sl, #0
   1ee20:	4691      	mov	r9, r2
   1ee22:	dad2      	bge.n	1edca <__kernel_rem_pio2+0x4a2>
   1ee24:	2400      	movs	r4, #0
   1ee26:	2500      	movs	r5, #0
   1ee28:	e7ec      	b.n	1ee04 <__kernel_rem_pio2+0x4dc>
   1ee2a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1ee2c:	f8dd a008 	ldr.w	sl, [sp, #8]
   1ee30:	2b02      	cmp	r3, #2
   1ee32:	dc1e      	bgt.n	1ee72 <__kernel_rem_pio2+0x54a>
   1ee34:	2b00      	cmp	r3, #0
   1ee36:	f300 810b 	bgt.w	1f050 <__kernel_rem_pio2+0x728>
   1ee3a:	d113      	bne.n	1ee64 <__kernel_rem_pio2+0x53c>
   1ee3c:	9c04      	ldr	r4, [sp, #16]
   1ee3e:	2000      	movs	r0, #0
   1ee40:	9d01      	ldr	r5, [sp, #4]
   1ee42:	2100      	movs	r1, #0
   1ee44:	3408      	adds	r4, #8
   1ee46:	442c      	add	r4, r5
   1ee48:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1ee4c:	f7fd fafe 	bl	1c44c <__adddf3>
   1ee50:	42a5      	cmp	r5, r4
   1ee52:	d1f9      	bne.n	1ee48 <__kernel_rem_pio2+0x520>
   1ee54:	9b03      	ldr	r3, [sp, #12]
   1ee56:	b113      	cbz	r3, 1ee5e <__kernel_rem_pio2+0x536>
   1ee58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1ee5c:	4619      	mov	r1, r3
   1ee5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ee60:	e9c3 0100 	strd	r0, r1, [r3]
   1ee64:	9b07      	ldr	r3, [sp, #28]
   1ee66:	f003 0007 	and.w	r0, r3, #7
   1ee6a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1ee6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee72:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1ee74:	2b03      	cmp	r3, #3
   1ee76:	d1f5      	bne.n	1ee64 <__kernel_rem_pio2+0x53c>
   1ee78:	f1ba 0f00 	cmp.w	sl, #0
   1ee7c:	f000 816d 	beq.w	1f15a <__kernel_rem_pio2+0x832>
   1ee80:	9a01      	ldr	r2, [sp, #4]
   1ee82:	9b04      	ldr	r3, [sp, #16]
   1ee84:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
   1ee88:	18d3      	adds	r3, r2, r3
   1ee8a:	e9d3 4500 	ldrd	r4, r5, [r3]
   1ee8e:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
   1ee92:	4620      	mov	r0, r4
   1ee94:	4629      	mov	r1, r5
   1ee96:	4632      	mov	r2, r6
   1ee98:	463b      	mov	r3, r7
   1ee9a:	f7fd fad7 	bl	1c44c <__adddf3>
   1ee9e:	46a0      	mov	r8, r4
   1eea0:	46a9      	mov	r9, r5
   1eea2:	4604      	mov	r4, r0
   1eea4:	460d      	mov	r5, r1
   1eea6:	4630      	mov	r0, r6
   1eea8:	4622      	mov	r2, r4
   1eeaa:	4639      	mov	r1, r7
   1eeac:	462b      	mov	r3, r5
   1eeae:	f7fd facb 	bl	1c448 <__aeabi_dsub>
   1eeb2:	464b      	mov	r3, r9
   1eeb4:	4642      	mov	r2, r8
   1eeb6:	f7fd fac9 	bl	1c44c <__adddf3>
   1eeba:	9b01      	ldr	r3, [sp, #4]
   1eebc:	455b      	cmp	r3, fp
   1eebe:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1eec2:	e9cb 4500 	strd	r4, r5, [fp]
   1eec6:	d1e2      	bne.n	1ee8e <__kernel_rem_pio2+0x566>
   1eec8:	f1ba 0f01 	cmp.w	sl, #1
   1eecc:	f340 8145 	ble.w	1f15a <__kernel_rem_pio2+0x832>
   1eed0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   1eed4:	9901      	ldr	r1, [sp, #4]
   1eed6:	9a04      	ldr	r2, [sp, #16]
   1eed8:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   1eedc:	4453      	add	r3, sl
   1eede:	440a      	add	r2, r1
   1eee0:	00db      	lsls	r3, r3, #3
   1eee2:	f103 0a08 	add.w	sl, r3, #8
   1eee6:	9302      	str	r3, [sp, #8]
   1eee8:	e9d2 4500 	ldrd	r4, r5, [r2]
   1eeec:	448a      	add	sl, r1
   1eeee:	4620      	mov	r0, r4
   1eef0:	4629      	mov	r1, r5
   1eef2:	46a0      	mov	r8, r4
   1eef4:	46a9      	mov	r9, r5
   1eef6:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
   1eefa:	4632      	mov	r2, r6
   1eefc:	463b      	mov	r3, r7
   1eefe:	f7fd faa5 	bl	1c44c <__adddf3>
   1ef02:	4604      	mov	r4, r0
   1ef04:	460d      	mov	r5, r1
   1ef06:	4630      	mov	r0, r6
   1ef08:	4622      	mov	r2, r4
   1ef0a:	4639      	mov	r1, r7
   1ef0c:	462b      	mov	r3, r5
   1ef0e:	f7fd fa9b 	bl	1c448 <__aeabi_dsub>
   1ef12:	4642      	mov	r2, r8
   1ef14:	464b      	mov	r3, r9
   1ef16:	f7fd fa99 	bl	1c44c <__adddf3>
   1ef1a:	45d3      	cmp	fp, sl
   1ef1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1ef20:	e9ca 4500 	strd	r4, r5, [sl]
   1ef24:	d1e3      	bne.n	1eeee <__kernel_rem_pio2+0x5c6>
   1ef26:	9c02      	ldr	r4, [sp, #8]
   1ef28:	2700      	movs	r7, #0
   1ef2a:	9b01      	ldr	r3, [sp, #4]
   1ef2c:	f04f 0800 	mov.w	r8, #0
   1ef30:	3410      	adds	r4, #16
   1ef32:	4638      	mov	r0, r7
   1ef34:	f103 0510 	add.w	r5, r3, #16
   1ef38:	4641      	mov	r1, r8
   1ef3a:	441c      	add	r4, r3
   1ef3c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1ef40:	f7fd fa84 	bl	1c44c <__adddf3>
   1ef44:	42a5      	cmp	r5, r4
   1ef46:	d1f9      	bne.n	1ef3c <__kernel_rem_pio2+0x614>
   1ef48:	4607      	mov	r7, r0
   1ef4a:	4688      	mov	r8, r1
   1ef4c:	9b03      	ldr	r3, [sp, #12]
   1ef4e:	2b00      	cmp	r3, #0
   1ef50:	f040 80bc 	bne.w	1f0cc <__kernel_rem_pio2+0x7a4>
   1ef54:	9a01      	ldr	r2, [sp, #4]
   1ef56:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ef58:	e9d2 4500 	ldrd	r4, r5, [r2]
   1ef5c:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   1ef60:	e9c1 7804 	strd	r7, r8, [r1, #16]
   1ef64:	e9c1 2302 	strd	r2, r3, [r1, #8]
   1ef68:	9b07      	ldr	r3, [sp, #28]
   1ef6a:	f003 0007 	and.w	r0, r3, #7
   1ef6e:	e9c1 4500 	strd	r4, r5, [r1]
   1ef72:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1ef76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef7a:	9b01      	ldr	r3, [sp, #4]
   1ef7c:	a90c      	add	r1, sp, #48	; 0x30
   1ef7e:	1e5a      	subs	r2, r3, #1
   1ef80:	ab0c      	add	r3, sp, #48	; 0x30
   1ef82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ef86:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1ef8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1ef8e:	e694      	b.n	1ecba <__kernel_rem_pio2+0x392>
   1ef90:	9b01      	ldr	r3, [sp, #4]
   1ef92:	f108 0801 	add.w	r8, r8, #1
   1ef96:	2502      	movs	r5, #2
   1ef98:	2b00      	cmp	r3, #0
   1ef9a:	f73f ae55 	bgt.w	1ec48 <__kernel_rem_pio2+0x320>
   1ef9e:	4632      	mov	r2, r6
   1efa0:	463b      	mov	r3, r7
   1efa2:	2000      	movs	r0, #0
   1efa4:	4906      	ldr	r1, [pc, #24]	; (1efc0 <__kernel_rem_pio2+0x698>)
   1efa6:	f7fd fa4f 	bl	1c448 <__aeabi_dsub>
   1efaa:	4606      	mov	r6, r0
   1efac:	460f      	mov	r7, r1
   1efae:	e5ba      	b.n	1eb26 <__kernel_rem_pio2+0x1fe>
   1efb0:	00000000 	.word	0x00000000
   1efb4:	3ff00000 	.word	0x3ff00000
   1efb8:	40000000 	.word	0x40000000
   1efbc:	3ff921fb 	.word	0x3ff921fb
   1efc0:	3ff00000 	.word	0x3ff00000
   1efc4:	3fe00000 	.word	0x3fe00000
   1efc8:	3ffffffe 	.word	0x3ffffffe
   1efcc:	3e700000 	.word	0x3e700000
   1efd0:	000465c0 	.word	0x000465c0
   1efd4:	2100      	movs	r1, #0
   1efd6:	f06f 0317 	mvn.w	r3, #23
   1efda:	9107      	str	r1, [sp, #28]
   1efdc:	e4c4      	b.n	1e968 <__kernel_rem_pio2+0x40>
   1efde:	2400      	movs	r4, #0
   1efe0:	e659      	b.n	1ec96 <__kernel_rem_pio2+0x36e>
   1efe2:	9b06      	ldr	r3, [sp, #24]
   1efe4:	9503      	str	r5, [sp, #12]
   1efe6:	4258      	negs	r0, r3
   1efe8:	f8cd 801c 	str.w	r8, [sp, #28]
   1efec:	ec47 6b10 	vmov	d0, r6, r7
   1eff0:	f000 fa0a 	bl	1f408 <scalbn>
   1eff4:	2200      	movs	r2, #0
   1eff6:	ee10 0a10 	vmov	r0, s0
   1effa:	4b5a      	ldr	r3, [pc, #360]	; (1f164 <__kernel_rem_pio2+0x83c>)
   1effc:	ec55 4b10 	vmov	r4, r5, d0
   1f000:	4629      	mov	r1, r5
   1f002:	f7fd fe5f 	bl	1ccc4 <__aeabi_dcmpge>
   1f006:	2800      	cmp	r0, #0
   1f008:	d056      	beq.n	1f0b8 <__kernel_rem_pio2+0x790>
   1f00a:	9b06      	ldr	r3, [sp, #24]
   1f00c:	2200      	movs	r2, #0
   1f00e:	4620      	mov	r0, r4
   1f010:	4629      	mov	r1, r5
   1f012:	3318      	adds	r3, #24
   1f014:	9f01      	ldr	r7, [sp, #4]
   1f016:	9306      	str	r3, [sp, #24]
   1f018:	f107 0a01 	add.w	sl, r7, #1
   1f01c:	4b52      	ldr	r3, [pc, #328]	; (1f168 <__kernel_rem_pio2+0x840>)
   1f01e:	f7fd fbcb 	bl	1c7b8 <__aeabi_dmul>
   1f022:	f7fd fe63 	bl	1ccec <__aeabi_d2iz>
   1f026:	4606      	mov	r6, r0
   1f028:	f7fd fb5c 	bl	1c6e4 <__aeabi_i2d>
   1f02c:	2200      	movs	r2, #0
   1f02e:	4b4d      	ldr	r3, [pc, #308]	; (1f164 <__kernel_rem_pio2+0x83c>)
   1f030:	f7fd fbc2 	bl	1c7b8 <__aeabi_dmul>
   1f034:	460b      	mov	r3, r1
   1f036:	4602      	mov	r2, r0
   1f038:	4629      	mov	r1, r5
   1f03a:	4620      	mov	r0, r4
   1f03c:	f7fd fa04 	bl	1c448 <__aeabi_dsub>
   1f040:	f7fd fe54 	bl	1ccec <__aeabi_d2iz>
   1f044:	ab0c      	add	r3, sp, #48	; 0x30
   1f046:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
   1f04a:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
   1f04e:	e682      	b.n	1ed56 <__kernel_rem_pio2+0x42e>
   1f050:	9d01      	ldr	r5, [sp, #4]
   1f052:	2000      	movs	r0, #0
   1f054:	9a06      	ldr	r2, [sp, #24]
   1f056:	2100      	movs	r1, #0
   1f058:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
   1f05c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1f060:	f7fd f9f4 	bl	1c44c <__adddf3>
   1f064:	42a5      	cmp	r5, r4
   1f066:	d1f9      	bne.n	1f05c <__kernel_rem_pio2+0x734>
   1f068:	9b03      	ldr	r3, [sp, #12]
   1f06a:	2b00      	cmp	r3, #0
   1f06c:	d148      	bne.n	1f100 <__kernel_rem_pio2+0x7d8>
   1f06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f070:	4602      	mov	r2, r0
   1f072:	e9c3 0100 	strd	r0, r1, [r3]
   1f076:	460b      	mov	r3, r1
   1f078:	9901      	ldr	r1, [sp, #4]
   1f07a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f07e:	f7fd f9e3 	bl	1c448 <__aeabi_dsub>
   1f082:	f1ba 0f00 	cmp.w	sl, #0
   1f086:	dd0d      	ble.n	1f0a4 <__kernel_rem_pio2+0x77c>
   1f088:	ad4a      	add	r5, sp, #296	; 0x128
   1f08a:	2401      	movs	r4, #1
   1f08c:	3401      	adds	r4, #1
   1f08e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1f092:	f7fd f9db 	bl	1c44c <__adddf3>
   1f096:	45a2      	cmp	sl, r4
   1f098:	daf8      	bge.n	1f08c <__kernel_rem_pio2+0x764>
   1f09a:	9b03      	ldr	r3, [sp, #12]
   1f09c:	b113      	cbz	r3, 1f0a4 <__kernel_rem_pio2+0x77c>
   1f09e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f0a2:	4619      	mov	r1, r3
   1f0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f0a6:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1f0aa:	9b07      	ldr	r3, [sp, #28]
   1f0ac:	f003 0007 	and.w	r0, r3, #7
   1f0b0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0b8:	4620      	mov	r0, r4
   1f0ba:	4629      	mov	r1, r5
   1f0bc:	f7fd fe16 	bl	1ccec <__aeabi_d2iz>
   1f0c0:	9b01      	ldr	r3, [sp, #4]
   1f0c2:	aa0c      	add	r2, sp, #48	; 0x30
   1f0c4:	469a      	mov	sl, r3
   1f0c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   1f0ca:	e644      	b.n	1ed56 <__kernel_rem_pio2+0x42e>
   1f0cc:	9b01      	ldr	r3, [sp, #4]
   1f0ce:	f108 4100 	add.w	r1, r8, #2147483648	; 0x80000000
   1f0d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1f0d4:	461e      	mov	r6, r3
   1f0d6:	685a      	ldr	r2, [r3, #4]
   1f0d8:	68db      	ldr	r3, [r3, #12]
   1f0da:	68b0      	ldr	r0, [r6, #8]
   1f0dc:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1f0e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1f0e4:	6834      	ldr	r4, [r6, #0]
   1f0e6:	60a8      	str	r0, [r5, #8]
   1f0e8:	60eb      	str	r3, [r5, #12]
   1f0ea:	9b07      	ldr	r3, [sp, #28]
   1f0ec:	612f      	str	r7, [r5, #16]
   1f0ee:	f003 0007 	and.w	r0, r3, #7
   1f0f2:	606a      	str	r2, [r5, #4]
   1f0f4:	602c      	str	r4, [r5, #0]
   1f0f6:	6169      	str	r1, [r5, #20]
   1f0f8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f100:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f104:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f106:	4602      	mov	r2, r0
   1f108:	e9c4 0300 	strd	r0, r3, [r4]
   1f10c:	460b      	mov	r3, r1
   1f10e:	9901      	ldr	r1, [sp, #4]
   1f110:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f114:	f7fd f998 	bl	1c448 <__aeabi_dsub>
   1f118:	f1ba 0f00 	cmp.w	sl, #0
   1f11c:	dcb4      	bgt.n	1f088 <__kernel_rem_pio2+0x760>
   1f11e:	e7be      	b.n	1f09e <__kernel_rem_pio2+0x776>
   1f120:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1f122:	2b02      	cmp	r3, #2
   1f124:	dc0a      	bgt.n	1f13c <__kernel_rem_pio2+0x814>
   1f126:	2b00      	cmp	r3, #0
   1f128:	dc12      	bgt.n	1f150 <__kernel_rem_pio2+0x828>
   1f12a:	f47f ae9b 	bne.w	1ee64 <__kernel_rem_pio2+0x53c>
   1f12e:	2000      	movs	r0, #0
   1f130:	2100      	movs	r1, #0
   1f132:	e68f      	b.n	1ee54 <__kernel_rem_pio2+0x52c>
   1f134:	9b08      	ldr	r3, [sp, #32]
   1f136:	00db      	lsls	r3, r3, #3
   1f138:	9302      	str	r3, [sp, #8]
   1f13a:	e467      	b.n	1ea0c <__kernel_rem_pio2+0xe4>
   1f13c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1f13e:	2b03      	cmp	r3, #3
   1f140:	f47f ae90 	bne.w	1ee64 <__kernel_rem_pio2+0x53c>
   1f144:	ab48      	add	r3, sp, #288	; 0x120
   1f146:	2700      	movs	r7, #0
   1f148:	f04f 0800 	mov.w	r8, #0
   1f14c:	9301      	str	r3, [sp, #4]
   1f14e:	e6fd      	b.n	1ef4c <__kernel_rem_pio2+0x624>
   1f150:	ab48      	add	r3, sp, #288	; 0x120
   1f152:	2000      	movs	r0, #0
   1f154:	2100      	movs	r1, #0
   1f156:	9301      	str	r3, [sp, #4]
   1f158:	e786      	b.n	1f068 <__kernel_rem_pio2+0x740>
   1f15a:	2700      	movs	r7, #0
   1f15c:	f04f 0800 	mov.w	r8, #0
   1f160:	e6f4      	b.n	1ef4c <__kernel_rem_pio2+0x624>
   1f162:	bf00      	nop
   1f164:	41700000 	.word	0x41700000
   1f168:	3e700000 	.word	0x3e700000
   1f16c:	00000000 	.word	0x00000000

0001f170 <__kernel_sin>:
   1f170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f174:	ec5b ab10 	vmov	sl, fp, d0
   1f178:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1f17c:	4680      	mov	r8, r0
   1f17e:	ed2d 8b02 	vpush	{d8}
   1f182:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1f186:	b083      	sub	sp, #12
   1f188:	ed8d 1b00 	vstr	d1, [sp]
   1f18c:	da07      	bge.n	1f19e <__kernel_sin+0x2e>
   1f18e:	ee10 0a10 	vmov	r0, s0
   1f192:	4659      	mov	r1, fp
   1f194:	f7fd fdaa 	bl	1ccec <__aeabi_d2iz>
   1f198:	2800      	cmp	r0, #0
   1f19a:	f000 808e 	beq.w	1f2ba <__kernel_sin+0x14a>
   1f19e:	4652      	mov	r2, sl
   1f1a0:	465b      	mov	r3, fp
   1f1a2:	4650      	mov	r0, sl
   1f1a4:	4659      	mov	r1, fp
   1f1a6:	f7fd fb07 	bl	1c7b8 <__aeabi_dmul>
   1f1aa:	4604      	mov	r4, r0
   1f1ac:	460d      	mov	r5, r1
   1f1ae:	4602      	mov	r2, r0
   1f1b0:	460b      	mov	r3, r1
   1f1b2:	4650      	mov	r0, sl
   1f1b4:	4659      	mov	r1, fp
   1f1b6:	f7fd faff 	bl	1c7b8 <__aeabi_dmul>
   1f1ba:	4606      	mov	r6, r0
   1f1bc:	460f      	mov	r7, r1
   1f1be:	4620      	mov	r0, r4
   1f1c0:	4629      	mov	r1, r5
   1f1c2:	a344      	add	r3, pc, #272	; (adr r3, 1f2d4 <__kernel_sin+0x164>)
   1f1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1c8:	f7fd faf6 	bl	1c7b8 <__aeabi_dmul>
   1f1cc:	a343      	add	r3, pc, #268	; (adr r3, 1f2dc <__kernel_sin+0x16c>)
   1f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1d2:	f7fd f939 	bl	1c448 <__aeabi_dsub>
   1f1d6:	4622      	mov	r2, r4
   1f1d8:	462b      	mov	r3, r5
   1f1da:	f7fd faed 	bl	1c7b8 <__aeabi_dmul>
   1f1de:	a341      	add	r3, pc, #260	; (adr r3, 1f2e4 <__kernel_sin+0x174>)
   1f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1e4:	f7fd f932 	bl	1c44c <__adddf3>
   1f1e8:	4622      	mov	r2, r4
   1f1ea:	462b      	mov	r3, r5
   1f1ec:	f7fd fae4 	bl	1c7b8 <__aeabi_dmul>
   1f1f0:	a33e      	add	r3, pc, #248	; (adr r3, 1f2ec <__kernel_sin+0x17c>)
   1f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1f6:	f7fd f927 	bl	1c448 <__aeabi_dsub>
   1f1fa:	4622      	mov	r2, r4
   1f1fc:	462b      	mov	r3, r5
   1f1fe:	f7fd fadb 	bl	1c7b8 <__aeabi_dmul>
   1f202:	a33c      	add	r3, pc, #240	; (adr r3, 1f2f4 <__kernel_sin+0x184>)
   1f204:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f208:	f7fd f920 	bl	1c44c <__adddf3>
   1f20c:	ec41 0b18 	vmov	d8, r0, r1
   1f210:	f1b8 0f00 	cmp.w	r8, #0
   1f214:	d037      	beq.n	1f286 <__kernel_sin+0x116>
   1f216:	2200      	movs	r2, #0
   1f218:	4b2d      	ldr	r3, [pc, #180]	; (1f2d0 <__kernel_sin+0x160>)
   1f21a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f21e:	f7fd facb 	bl	1c7b8 <__aeabi_dmul>
   1f222:	4680      	mov	r8, r0
   1f224:	4689      	mov	r9, r1
   1f226:	4630      	mov	r0, r6
   1f228:	4639      	mov	r1, r7
   1f22a:	ec53 2b18 	vmov	r2, r3, d8
   1f22e:	f7fd fac3 	bl	1c7b8 <__aeabi_dmul>
   1f232:	4602      	mov	r2, r0
   1f234:	460b      	mov	r3, r1
   1f236:	4640      	mov	r0, r8
   1f238:	4649      	mov	r1, r9
   1f23a:	f7fd f905 	bl	1c448 <__aeabi_dsub>
   1f23e:	4622      	mov	r2, r4
   1f240:	462b      	mov	r3, r5
   1f242:	f7fd fab9 	bl	1c7b8 <__aeabi_dmul>
   1f246:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f24a:	f7fd f8fd 	bl	1c448 <__aeabi_dsub>
   1f24e:	4604      	mov	r4, r0
   1f250:	460d      	mov	r5, r1
   1f252:	4630      	mov	r0, r6
   1f254:	4639      	mov	r1, r7
   1f256:	a31c      	add	r3, pc, #112	; (adr r3, 1f2c8 <__kernel_sin+0x158>)
   1f258:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f25c:	f7fd faac 	bl	1c7b8 <__aeabi_dmul>
   1f260:	4602      	mov	r2, r0
   1f262:	460b      	mov	r3, r1
   1f264:	4620      	mov	r0, r4
   1f266:	4629      	mov	r1, r5
   1f268:	f7fd f8f0 	bl	1c44c <__adddf3>
   1f26c:	4602      	mov	r2, r0
   1f26e:	460b      	mov	r3, r1
   1f270:	4650      	mov	r0, sl
   1f272:	4659      	mov	r1, fp
   1f274:	f7fd f8e8 	bl	1c448 <__aeabi_dsub>
   1f278:	ec41 0b10 	vmov	d0, r0, r1
   1f27c:	b003      	add	sp, #12
   1f27e:	ecbd 8b02 	vpop	{d8}
   1f282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f286:	4602      	mov	r2, r0
   1f288:	460b      	mov	r3, r1
   1f28a:	4620      	mov	r0, r4
   1f28c:	4629      	mov	r1, r5
   1f28e:	f7fd fa93 	bl	1c7b8 <__aeabi_dmul>
   1f292:	a30d      	add	r3, pc, #52	; (adr r3, 1f2c8 <__kernel_sin+0x158>)
   1f294:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f298:	f7fd f8d6 	bl	1c448 <__aeabi_dsub>
   1f29c:	4632      	mov	r2, r6
   1f29e:	463b      	mov	r3, r7
   1f2a0:	f7fd fa8a 	bl	1c7b8 <__aeabi_dmul>
   1f2a4:	4652      	mov	r2, sl
   1f2a6:	465b      	mov	r3, fp
   1f2a8:	f7fd f8d0 	bl	1c44c <__adddf3>
   1f2ac:	ec41 0b10 	vmov	d0, r0, r1
   1f2b0:	b003      	add	sp, #12
   1f2b2:	ecbd 8b02 	vpop	{d8}
   1f2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2ba:	ec4b ab10 	vmov	d0, sl, fp
   1f2be:	b003      	add	sp, #12
   1f2c0:	ecbd 8b02 	vpop	{d8}
   1f2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2c8:	55555549 	.word	0x55555549
   1f2cc:	3fc55555 	.word	0x3fc55555
   1f2d0:	3fe00000 	.word	0x3fe00000
   1f2d4:	5acfd57c 	.word	0x5acfd57c
   1f2d8:	3de5d93a 	.word	0x3de5d93a
   1f2dc:	8a2b9ceb 	.word	0x8a2b9ceb
   1f2e0:	3e5ae5e6 	.word	0x3e5ae5e6
   1f2e4:	57b1fe7d 	.word	0x57b1fe7d
   1f2e8:	3ec71de3 	.word	0x3ec71de3
   1f2ec:	19c161d5 	.word	0x19c161d5
   1f2f0:	3f2a01a0 	.word	0x3f2a01a0
   1f2f4:	1110f8a6 	.word	0x1110f8a6
   1f2f8:	3f811111 	.word	0x3f811111
   1f2fc:	00000000 	.word	0x00000000

0001f300 <floor>:
   1f300:	ec51 0b10 	vmov	r0, r1, d0
   1f304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f306:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1f30a:	460c      	mov	r4, r1
   1f30c:	ee10 6a10 	vmov	r6, s0
   1f310:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   1f314:	2d13      	cmp	r5, #19
   1f316:	dc20      	bgt.n	1f35a <__kernel_ram_size+0x22>
   1f318:	2d00      	cmp	r5, #0
   1f31a:	db3d      	blt.n	1f398 <__kernel_ram_size+0x60>
   1f31c:	4f38      	ldr	r7, [pc, #224]	; (1f400 <__kernel_ram_size+0xc8>)
   1f31e:	412f      	asrs	r7, r5
   1f320:	ea01 0307 	and.w	r3, r1, r7
   1f324:	4303      	orrs	r3, r0
   1f326:	d01d      	beq.n	1f364 <__kernel_ram_size+0x2c>
   1f328:	a333      	add	r3, pc, #204	; (adr r3, 1f3f8 <__kernel_ram_size+0xc0>)
   1f32a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f32e:	f7fd f88d 	bl	1c44c <__adddf3>
   1f332:	2200      	movs	r2, #0
   1f334:	2300      	movs	r3, #0
   1f336:	f7fd fccf 	bl	1ccd8 <__aeabi_dcmpgt>
   1f33a:	b148      	cbz	r0, 1f350 <__kernel_ram_size+0x18>
   1f33c:	2c00      	cmp	r4, #0
   1f33e:	da04      	bge.n	1f34a <__kernel_ram_size+0x12>
   1f340:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1f344:	fa43 f505 	asr.w	r5, r3, r5
   1f348:	442c      	add	r4, r5
   1f34a:	ea24 0407 	bic.w	r4, r4, r7
   1f34e:	2600      	movs	r6, #0
   1f350:	4623      	mov	r3, r4
   1f352:	4632      	mov	r2, r6
   1f354:	ec43 2b10 	vmov	d0, r2, r3
   1f358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f35a:	2d33      	cmp	r5, #51	; 0x33
   1f35c:	dd05      	ble.n	1f36a <__kernel_ram_size+0x32>
   1f35e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1f362:	d029      	beq.n	1f3b8 <__kernel_ram_size+0x80>
   1f364:	ec41 0b10 	vmov	d0, r0, r1
   1f368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f36a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   1f36e:	f04f 37ff 	mov.w	r7, #4294967295
   1f372:	40df      	lsrs	r7, r3
   1f374:	4207      	tst	r7, r0
   1f376:	d0f5      	beq.n	1f364 <__kernel_ram_size+0x2c>
   1f378:	a31f      	add	r3, pc, #124	; (adr r3, 1f3f8 <__kernel_ram_size+0xc0>)
   1f37a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f37e:	f7fd f865 	bl	1c44c <__adddf3>
   1f382:	2200      	movs	r2, #0
   1f384:	2300      	movs	r3, #0
   1f386:	f7fd fca7 	bl	1ccd8 <__aeabi_dcmpgt>
   1f38a:	2800      	cmp	r0, #0
   1f38c:	d0e0      	beq.n	1f350 <__kernel_ram_size+0x18>
   1f38e:	2c00      	cmp	r4, #0
   1f390:	db23      	blt.n	1f3da <__kernel_ram_size+0xa2>
   1f392:	ea26 0607 	bic.w	r6, r6, r7
   1f396:	e7db      	b.n	1f350 <__kernel_ram_size+0x18>
   1f398:	a317      	add	r3, pc, #92	; (adr r3, 1f3f8 <__kernel_ram_size+0xc0>)
   1f39a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f39e:	f7fd f855 	bl	1c44c <__adddf3>
   1f3a2:	2200      	movs	r2, #0
   1f3a4:	2300      	movs	r3, #0
   1f3a6:	f7fd fc97 	bl	1ccd8 <__aeabi_dcmpgt>
   1f3aa:	2800      	cmp	r0, #0
   1f3ac:	d0d0      	beq.n	1f350 <__kernel_ram_size+0x18>
   1f3ae:	2c00      	cmp	r4, #0
   1f3b0:	db0a      	blt.n	1f3c8 <__kernel_ram_size+0x90>
   1f3b2:	2600      	movs	r6, #0
   1f3b4:	4634      	mov	r4, r6
   1f3b6:	e7cb      	b.n	1f350 <__kernel_ram_size+0x18>
   1f3b8:	ee10 2a10 	vmov	r2, s0
   1f3bc:	460b      	mov	r3, r1
   1f3be:	f7fd f845 	bl	1c44c <__adddf3>
   1f3c2:	ec41 0b10 	vmov	d0, r0, r1
   1f3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f3c8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1f3cc:	4a0d      	ldr	r2, [pc, #52]	; (1f404 <__kernel_ram_size+0xcc>)
   1f3ce:	4333      	orrs	r3, r6
   1f3d0:	2600      	movs	r6, #0
   1f3d2:	42b3      	cmp	r3, r6
   1f3d4:	bf18      	it	ne
   1f3d6:	4614      	movne	r4, r2
   1f3d8:	e7ba      	b.n	1f350 <__kernel_ram_size+0x18>
   1f3da:	2d14      	cmp	r5, #20
   1f3dc:	d008      	beq.n	1f3f0 <__kernel_ram_size+0xb8>
   1f3de:	2301      	movs	r3, #1
   1f3e0:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   1f3e4:	fa03 f505 	lsl.w	r5, r3, r5
   1f3e8:	19ae      	adds	r6, r5, r6
   1f3ea:	bf28      	it	cs
   1f3ec:	18e4      	addcs	r4, r4, r3
   1f3ee:	e7d0      	b.n	1f392 <__kernel_ram_size+0x5a>
   1f3f0:	3401      	adds	r4, #1
   1f3f2:	e7ce      	b.n	1f392 <__kernel_ram_size+0x5a>
   1f3f4:	f3af 8000 	nop.w
   1f3f8:	8800759c 	.word	0x8800759c
   1f3fc:	7e37e43c 	.word	0x7e37e43c
   1f400:	000fffff 	.word	0x000fffff
   1f404:	bff00000 	.word	0xbff00000

0001f408 <scalbn>:
   1f408:	ec53 2b10 	vmov	r2, r3, d0
   1f40c:	f3c3 510a 	ubfx	r1, r3, #20, #11
   1f410:	b570      	push	{r4, r5, r6, lr}
   1f412:	461c      	mov	r4, r3
   1f414:	4605      	mov	r5, r0
   1f416:	bb81      	cbnz	r1, 1f47a <scalbn+0x72>
   1f418:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1f41c:	ee10 1a10 	vmov	r1, s0
   1f420:	4321      	orrs	r1, r4
   1f422:	d029      	beq.n	1f478 <scalbn+0x70>
   1f424:	4c3c      	ldr	r4, [pc, #240]	; (1f518 <scalbn+0x110>)
   1f426:	4619      	mov	r1, r3
   1f428:	2200      	movs	r2, #0
   1f42a:	4b3c      	ldr	r3, [pc, #240]	; (1f51c <scalbn+0x114>)
   1f42c:	ee10 0a10 	vmov	r0, s0
   1f430:	f7fd f9c2 	bl	1c7b8 <__aeabi_dmul>
   1f434:	42a5      	cmp	r5, r4
   1f436:	4602      	mov	r2, r0
   1f438:	460b      	mov	r3, r1
   1f43a:	db16      	blt.n	1f46a <scalbn+0x62>
   1f43c:	460c      	mov	r4, r1
   1f43e:	f3c1 510a 	ubfx	r1, r1, #20, #11
   1f442:	3936      	subs	r1, #54	; 0x36
   1f444:	4429      	add	r1, r5
   1f446:	f240 70fe 	movw	r0, #2046	; 0x7fe
   1f44a:	4281      	cmp	r1, r0
   1f44c:	dc21      	bgt.n	1f492 <scalbn+0x8a>
   1f44e:	2900      	cmp	r1, #0
   1f450:	dc45      	bgt.n	1f4de <scalbn+0xd6>
   1f452:	f111 0f35 	cmn.w	r1, #53	; 0x35
   1f456:	da34      	bge.n	1f4c2 <scalbn+0xba>
   1f458:	f24c 3150 	movw	r1, #50000	; 0xc350
   1f45c:	428d      	cmp	r5, r1
   1f45e:	dc18      	bgt.n	1f492 <scalbn+0x8a>
   1f460:	2b00      	cmp	r3, #0
   1f462:	a125      	add	r1, pc, #148	; (adr r1, 1f4f8 <scalbn+0xf0>)
   1f464:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f468:	db40      	blt.n	1f4ec <scalbn+0xe4>
   1f46a:	a323      	add	r3, pc, #140	; (adr r3, 1f4f8 <scalbn+0xf0>)
   1f46c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f470:	f7fd f9a2 	bl	1c7b8 <__aeabi_dmul>
   1f474:	ec41 0b10 	vmov	d0, r0, r1
   1f478:	bd70      	pop	{r4, r5, r6, pc}
   1f47a:	f240 76ff 	movw	r6, #2047	; 0x7ff
   1f47e:	42b1      	cmp	r1, r6
   1f480:	d1e0      	bne.n	1f444 <scalbn+0x3c>
   1f482:	ee10 0a10 	vmov	r0, s0
   1f486:	4619      	mov	r1, r3
   1f488:	f7fc ffe0 	bl	1c44c <__adddf3>
   1f48c:	ec41 0b10 	vmov	d0, r0, r1
   1f490:	bd70      	pop	{r4, r5, r6, pc}
   1f492:	2b00      	cmp	r3, #0
   1f494:	a11a      	add	r1, pc, #104	; (adr r1, 1f500 <scalbn+0xf8>)
   1f496:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f49a:	db07      	blt.n	1f4ac <scalbn+0xa4>
   1f49c:	a318      	add	r3, pc, #96	; (adr r3, 1f500 <scalbn+0xf8>)
   1f49e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f4a2:	f7fd f989 	bl	1c7b8 <__aeabi_dmul>
   1f4a6:	ec41 0b10 	vmov	d0, r0, r1
   1f4aa:	bd70      	pop	{r4, r5, r6, pc}
   1f4ac:	a116      	add	r1, pc, #88	; (adr r1, 1f508 <scalbn+0x100>)
   1f4ae:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f4b2:	a313      	add	r3, pc, #76	; (adr r3, 1f500 <scalbn+0xf8>)
   1f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f4b8:	f7fd f97e 	bl	1c7b8 <__aeabi_dmul>
   1f4bc:	ec41 0b10 	vmov	d0, r0, r1
   1f4c0:	e7f3      	b.n	1f4aa <scalbn+0xa2>
   1f4c2:	4817      	ldr	r0, [pc, #92]	; (1f520 <scalbn+0x118>)
   1f4c4:	3136      	adds	r1, #54	; 0x36
   1f4c6:	4020      	ands	r0, r4
   1f4c8:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1f4cc:	4610      	mov	r0, r2
   1f4ce:	2200      	movs	r2, #0
   1f4d0:	4619      	mov	r1, r3
   1f4d2:	4b14      	ldr	r3, [pc, #80]	; (1f524 <scalbn+0x11c>)
   1f4d4:	f7fd f970 	bl	1c7b8 <__aeabi_dmul>
   1f4d8:	ec41 0b10 	vmov	d0, r0, r1
   1f4dc:	bd70      	pop	{r4, r5, r6, pc}
   1f4de:	4810      	ldr	r0, [pc, #64]	; (1f520 <scalbn+0x118>)
   1f4e0:	4020      	ands	r0, r4
   1f4e2:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1f4e6:	ec43 2b10 	vmov	d0, r2, r3
   1f4ea:	bd70      	pop	{r4, r5, r6, pc}
   1f4ec:	a108      	add	r1, pc, #32	; (adr r1, 1f510 <scalbn+0x108>)
   1f4ee:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f4f2:	e7ba      	b.n	1f46a <scalbn+0x62>
   1f4f4:	f3af 8000 	nop.w
   1f4f8:	c2f8f359 	.word	0xc2f8f359
   1f4fc:	01a56e1f 	.word	0x01a56e1f
   1f500:	8800759c 	.word	0x8800759c
   1f504:	7e37e43c 	.word	0x7e37e43c
   1f508:	8800759c 	.word	0x8800759c
   1f50c:	fe37e43c 	.word	0xfe37e43c
   1f510:	c2f8f359 	.word	0xc2f8f359
   1f514:	81a56e1f 	.word	0x81a56e1f
   1f518:	ffff3cb0 	.word	0xffff3cb0
   1f51c:	43500000 	.word	0x43500000
   1f520:	800fffff 	.word	0x800fffff
   1f524:	3c900000 	.word	0x3c900000

0001f528 <_strtod_l>:
   1f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f52c:	461f      	mov	r7, r3
   1f52e:	b0a3      	sub	sp, #140	; 0x8c
   1f530:	2300      	movs	r3, #0
   1f532:	4604      	mov	r4, r0
   1f534:	4688      	mov	r8, r1
   1f536:	9219      	str	r2, [sp, #100]	; 0x64
   1f538:	931e      	str	r3, [sp, #120]	; 0x78
   1f53a:	f04f 0a00 	mov.w	sl, #0
   1f53e:	4ba3      	ldr	r3, [pc, #652]	; (1f7cc <_strtod_l+0x2a4>)
   1f540:	f04f 0b00 	mov.w	fp, #0
   1f544:	681b      	ldr	r3, [r3, #0]
   1f546:	4618      	mov	r0, r3
   1f548:	9307      	str	r3, [sp, #28]
   1f54a:	f7fd fe87 	bl	1d25c <strlen>
   1f54e:	4605      	mov	r5, r0
   1f550:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1f554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f556:	781a      	ldrb	r2, [r3, #0]
   1f558:	2a2b      	cmp	r2, #43	; 0x2b
   1f55a:	d04c      	beq.n	1f5f6 <_strtod_l+0xce>
   1f55c:	d839      	bhi.n	1f5d2 <_strtod_l+0xaa>
   1f55e:	2a0d      	cmp	r2, #13
   1f560:	d832      	bhi.n	1f5c8 <_strtod_l+0xa0>
   1f562:	2a08      	cmp	r2, #8
   1f564:	d832      	bhi.n	1f5cc <_strtod_l+0xa4>
   1f566:	2a00      	cmp	r2, #0
   1f568:	d03c      	beq.n	1f5e4 <_strtod_l+0xbc>
   1f56a:	2300      	movs	r3, #0
   1f56c:	930e      	str	r3, [sp, #56]	; 0x38
   1f56e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   1f570:	7833      	ldrb	r3, [r6, #0]
   1f572:	2b30      	cmp	r3, #48	; 0x30
   1f574:	f040 80b5 	bne.w	1f6e2 <_strtod_l+0x1ba>
   1f578:	7873      	ldrb	r3, [r6, #1]
   1f57a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1f57e:	2b58      	cmp	r3, #88	; 0x58
   1f580:	d16c      	bne.n	1f65c <_strtod_l+0x134>
   1f582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f584:	a91d      	add	r1, sp, #116	; 0x74
   1f586:	9702      	str	r7, [sp, #8]
   1f588:	4620      	mov	r0, r4
   1f58a:	9301      	str	r3, [sp, #4]
   1f58c:	ab1e      	add	r3, sp, #120	; 0x78
   1f58e:	4a90      	ldr	r2, [pc, #576]	; (1f7d0 <_strtod_l+0x2a8>)
   1f590:	9300      	str	r3, [sp, #0]
   1f592:	ab1f      	add	r3, sp, #124	; 0x7c
   1f594:	f020 fefc 	bl	40390 <__gethex>
   1f598:	f010 0707 	ands.w	r7, r0, #7
   1f59c:	4605      	mov	r5, r0
   1f59e:	d005      	beq.n	1f5ac <_strtod_l+0x84>
   1f5a0:	2f06      	cmp	r7, #6
   1f5a2:	d12a      	bne.n	1f5fa <_strtod_l+0xd2>
   1f5a4:	3601      	adds	r6, #1
   1f5a6:	2300      	movs	r3, #0
   1f5a8:	961d      	str	r6, [sp, #116]	; 0x74
   1f5aa:	930e      	str	r3, [sp, #56]	; 0x38
   1f5ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1f5ae:	2b00      	cmp	r3, #0
   1f5b0:	f040 859a 	bne.w	200e8 <_strtod_l+0xbc0>
   1f5b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f5b6:	b1db      	cbz	r3, 1f5f0 <_strtod_l+0xc8>
   1f5b8:	4652      	mov	r2, sl
   1f5ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1f5be:	ec43 2b10 	vmov	d0, r2, r3
   1f5c2:	b023      	add	sp, #140	; 0x8c
   1f5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5c8:	2a20      	cmp	r2, #32
   1f5ca:	d1ce      	bne.n	1f56a <_strtod_l+0x42>
   1f5cc:	3301      	adds	r3, #1
   1f5ce:	931d      	str	r3, [sp, #116]	; 0x74
   1f5d0:	e7c0      	b.n	1f554 <_strtod_l+0x2c>
   1f5d2:	2a2d      	cmp	r2, #45	; 0x2d
   1f5d4:	d1c9      	bne.n	1f56a <_strtod_l+0x42>
   1f5d6:	2201      	movs	r2, #1
   1f5d8:	920e      	str	r2, [sp, #56]	; 0x38
   1f5da:	1c5a      	adds	r2, r3, #1
   1f5dc:	921d      	str	r2, [sp, #116]	; 0x74
   1f5de:	785b      	ldrb	r3, [r3, #1]
   1f5e0:	2b00      	cmp	r3, #0
   1f5e2:	d1c4      	bne.n	1f56e <_strtod_l+0x46>
   1f5e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1f5e6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1f5ea:	2b00      	cmp	r3, #0
   1f5ec:	f040 857a 	bne.w	200e4 <_strtod_l+0xbbc>
   1f5f0:	4652      	mov	r2, sl
   1f5f2:	465b      	mov	r3, fp
   1f5f4:	e7e3      	b.n	1f5be <_strtod_l+0x96>
   1f5f6:	2200      	movs	r2, #0
   1f5f8:	e7ee      	b.n	1f5d8 <_strtod_l+0xb0>
   1f5fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1f5fc:	b13a      	cbz	r2, 1f60e <_strtod_l+0xe6>
   1f5fe:	2135      	movs	r1, #53	; 0x35
   1f600:	a820      	add	r0, sp, #128	; 0x80
   1f602:	f026 fb82 	bl	45d0a <__copybits>
   1f606:	991e      	ldr	r1, [sp, #120]	; 0x78
   1f608:	4620      	mov	r0, r4
   1f60a:	f026 f87b 	bl	45704 <_Bfree>
   1f60e:	3f01      	subs	r7, #1
   1f610:	2f05      	cmp	r7, #5
   1f612:	d807      	bhi.n	1f624 <_strtod_l+0xfc>
   1f614:	e8df f007 	tbb	[pc, r7]
   1f618:	1d180b0e 	.word	0x1d180b0e
   1f61c:	030e      	.short	0x030e
   1f61e:	f04f 0b00 	mov.w	fp, #0
   1f622:	46da      	mov	sl, fp
   1f624:	0728      	lsls	r0, r5, #28
   1f626:	d5c1      	bpl.n	1f5ac <_strtod_l+0x84>
   1f628:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1f62c:	e7be      	b.n	1f5ac <_strtod_l+0x84>
   1f62e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   1f632:	e7f7      	b.n	1f624 <_strtod_l+0xfc>
   1f634:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   1f638:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1f63a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1f63e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1f642:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1f646:	e7ed      	b.n	1f624 <_strtod_l+0xfc>
   1f648:	f8df b188 	ldr.w	fp, [pc, #392]	; 1f7d4 <_strtod_l+0x2ac>
   1f64c:	f04f 0a00 	mov.w	sl, #0
   1f650:	e7e8      	b.n	1f624 <_strtod_l+0xfc>
   1f652:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1f656:	f04f 3aff 	mov.w	sl, #4294967295
   1f65a:	e7e3      	b.n	1f624 <_strtod_l+0xfc>
   1f65c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f65e:	1c5a      	adds	r2, r3, #1
   1f660:	921d      	str	r2, [sp, #116]	; 0x74
   1f662:	785b      	ldrb	r3, [r3, #1]
   1f664:	2b30      	cmp	r3, #48	; 0x30
   1f666:	d0f9      	beq.n	1f65c <_strtod_l+0x134>
   1f668:	2b00      	cmp	r3, #0
   1f66a:	d09f      	beq.n	1f5ac <_strtod_l+0x84>
   1f66c:	2301      	movs	r3, #1
   1f66e:	f04f 0900 	mov.w	r9, #0
   1f672:	9304      	str	r3, [sp, #16]
   1f674:	220a      	movs	r2, #10
   1f676:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f678:	464f      	mov	r7, r9
   1f67a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1f67e:	930a      	str	r3, [sp, #40]	; 0x28
   1f680:	981d      	ldr	r0, [sp, #116]	; 0x74
   1f682:	7806      	ldrb	r6, [r0, #0]
   1f684:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1f688:	b2d9      	uxtb	r1, r3
   1f68a:	2909      	cmp	r1, #9
   1f68c:	d92b      	bls.n	1f6e6 <_strtod_l+0x1be>
   1f68e:	462a      	mov	r2, r5
   1f690:	9907      	ldr	r1, [sp, #28]
   1f692:	f025 fd28 	bl	450e6 <strncmp>
   1f696:	2800      	cmp	r0, #0
   1f698:	d034      	beq.n	1f704 <_strtod_l+0x1dc>
   1f69a:	2000      	movs	r0, #0
   1f69c:	4633      	mov	r3, r6
   1f69e:	463d      	mov	r5, r7
   1f6a0:	4602      	mov	r2, r0
   1f6a2:	9007      	str	r0, [sp, #28]
   1f6a4:	2b65      	cmp	r3, #101	; 0x65
   1f6a6:	d001      	beq.n	1f6ac <_strtod_l+0x184>
   1f6a8:	2b45      	cmp	r3, #69	; 0x45
   1f6aa:	d118      	bne.n	1f6de <_strtod_l+0x1b6>
   1f6ac:	b91d      	cbnz	r5, 1f6b6 <_strtod_l+0x18e>
   1f6ae:	9b04      	ldr	r3, [sp, #16]
   1f6b0:	4303      	orrs	r3, r0
   1f6b2:	d097      	beq.n	1f5e4 <_strtod_l+0xbc>
   1f6b4:	2500      	movs	r5, #0
   1f6b6:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   1f6ba:	f108 0301 	add.w	r3, r8, #1
   1f6be:	931d      	str	r3, [sp, #116]	; 0x74
   1f6c0:	f898 3001 	ldrb.w	r3, [r8, #1]
   1f6c4:	2b2b      	cmp	r3, #43	; 0x2b
   1f6c6:	d075      	beq.n	1f7b4 <_strtod_l+0x28c>
   1f6c8:	2b2d      	cmp	r3, #45	; 0x2d
   1f6ca:	d07b      	beq.n	1f7c4 <_strtod_l+0x29c>
   1f6cc:	f04f 0c00 	mov.w	ip, #0
   1f6d0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1f6d4:	2909      	cmp	r1, #9
   1f6d6:	f240 8083 	bls.w	1f7e0 <_strtod_l+0x2b8>
   1f6da:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1f6de:	2600      	movs	r6, #0
   1f6e0:	e09e      	b.n	1f820 <_strtod_l+0x2f8>
   1f6e2:	2300      	movs	r3, #0
   1f6e4:	e7c3      	b.n	1f66e <_strtod_l+0x146>
   1f6e6:	2f08      	cmp	r7, #8
   1f6e8:	f100 0001 	add.w	r0, r0, #1
   1f6ec:	f107 0701 	add.w	r7, r7, #1
   1f6f0:	bfd4      	ite	le
   1f6f2:	9909      	ldrle	r1, [sp, #36]	; 0x24
   1f6f4:	fb02 3909 	mlagt	r9, r2, r9, r3
   1f6f8:	901d      	str	r0, [sp, #116]	; 0x74
   1f6fa:	bfdc      	itt	le
   1f6fc:	fb02 3301 	mlale	r3, r2, r1, r3
   1f700:	9309      	strle	r3, [sp, #36]	; 0x24
   1f702:	e7bd      	b.n	1f680 <_strtod_l+0x158>
   1f704:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f706:	195a      	adds	r2, r3, r5
   1f708:	921d      	str	r2, [sp, #116]	; 0x74
   1f70a:	5d5b      	ldrb	r3, [r3, r5]
   1f70c:	2f00      	cmp	r7, #0
   1f70e:	d036      	beq.n	1f77e <_strtod_l+0x256>
   1f710:	463d      	mov	r5, r7
   1f712:	9007      	str	r0, [sp, #28]
   1f714:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f718:	2a09      	cmp	r2, #9
   1f71a:	d912      	bls.n	1f742 <_strtod_l+0x21a>
   1f71c:	2201      	movs	r2, #1
   1f71e:	e7c1      	b.n	1f6a4 <_strtod_l+0x17c>
   1f720:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f722:	3001      	adds	r0, #1
   1f724:	1c5a      	adds	r2, r3, #1
   1f726:	921d      	str	r2, [sp, #116]	; 0x74
   1f728:	785b      	ldrb	r3, [r3, #1]
   1f72a:	2b30      	cmp	r3, #48	; 0x30
   1f72c:	d0f8      	beq.n	1f720 <_strtod_l+0x1f8>
   1f72e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   1f732:	2a08      	cmp	r2, #8
   1f734:	f200 84dd 	bhi.w	200f2 <_strtod_l+0xbca>
   1f738:	9007      	str	r0, [sp, #28]
   1f73a:	2000      	movs	r0, #0
   1f73c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1f73e:	4605      	mov	r5, r0
   1f740:	920a      	str	r2, [sp, #40]	; 0x28
   1f742:	3b30      	subs	r3, #48	; 0x30
   1f744:	f100 0201 	add.w	r2, r0, #1
   1f748:	d013      	beq.n	1f772 <_strtod_l+0x24a>
   1f74a:	9907      	ldr	r1, [sp, #28]
   1f74c:	eb00 0e05 	add.w	lr, r0, r5
   1f750:	4411      	add	r1, r2
   1f752:	462a      	mov	r2, r5
   1f754:	9107      	str	r1, [sp, #28]
   1f756:	210a      	movs	r1, #10
   1f758:	4572      	cmp	r2, lr
   1f75a:	d112      	bne.n	1f782 <_strtod_l+0x25a>
   1f75c:	182a      	adds	r2, r5, r0
   1f75e:	3501      	adds	r5, #1
   1f760:	2a08      	cmp	r2, #8
   1f762:	4405      	add	r5, r0
   1f764:	dc1c      	bgt.n	1f7a0 <_strtod_l+0x278>
   1f766:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f768:	220a      	movs	r2, #10
   1f76a:	fb02 3301 	mla	r3, r2, r1, r3
   1f76e:	9309      	str	r3, [sp, #36]	; 0x24
   1f770:	2200      	movs	r2, #0
   1f772:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f774:	4610      	mov	r0, r2
   1f776:	1c59      	adds	r1, r3, #1
   1f778:	911d      	str	r1, [sp, #116]	; 0x74
   1f77a:	785b      	ldrb	r3, [r3, #1]
   1f77c:	e7ca      	b.n	1f714 <_strtod_l+0x1ec>
   1f77e:	4638      	mov	r0, r7
   1f780:	e7d3      	b.n	1f72a <_strtod_l+0x202>
   1f782:	2a08      	cmp	r2, #8
   1f784:	dc04      	bgt.n	1f790 <_strtod_l+0x268>
   1f786:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1f788:	434e      	muls	r6, r1
   1f78a:	9609      	str	r6, [sp, #36]	; 0x24
   1f78c:	3201      	adds	r2, #1
   1f78e:	e7e3      	b.n	1f758 <_strtod_l+0x230>
   1f790:	f102 0c01 	add.w	ip, r2, #1
   1f794:	f1bc 0f10 	cmp.w	ip, #16
   1f798:	bfd8      	it	le
   1f79a:	fb01 f909 	mulle.w	r9, r1, r9
   1f79e:	e7f5      	b.n	1f78c <_strtod_l+0x264>
   1f7a0:	2d10      	cmp	r5, #16
   1f7a2:	bfdc      	itt	le
   1f7a4:	220a      	movle	r2, #10
   1f7a6:	fb02 3909 	mlale	r9, r2, r9, r3
   1f7aa:	e7e1      	b.n	1f770 <_strtod_l+0x248>
   1f7ac:	2300      	movs	r3, #0
   1f7ae:	2201      	movs	r2, #1
   1f7b0:	9307      	str	r3, [sp, #28]
   1f7b2:	e77c      	b.n	1f6ae <_strtod_l+0x186>
   1f7b4:	f04f 0c00 	mov.w	ip, #0
   1f7b8:	f108 0302 	add.w	r3, r8, #2
   1f7bc:	931d      	str	r3, [sp, #116]	; 0x74
   1f7be:	f898 3002 	ldrb.w	r3, [r8, #2]
   1f7c2:	e785      	b.n	1f6d0 <_strtod_l+0x1a8>
   1f7c4:	f04f 0c01 	mov.w	ip, #1
   1f7c8:	e7f6      	b.n	1f7b8 <_strtod_l+0x290>
   1f7ca:	bf00      	nop
   1f7cc:	000474c0 	.word	0x000474c0
   1f7d0:	00047438 	.word	0x00047438
   1f7d4:	7ff00000 	.word	0x7ff00000
   1f7d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f7da:	1c59      	adds	r1, r3, #1
   1f7dc:	911d      	str	r1, [sp, #116]	; 0x74
   1f7de:	785b      	ldrb	r3, [r3, #1]
   1f7e0:	2b30      	cmp	r3, #48	; 0x30
   1f7e2:	d0f9      	beq.n	1f7d8 <_strtod_l+0x2b0>
   1f7e4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   1f7e8:	2908      	cmp	r1, #8
   1f7ea:	f63f af78 	bhi.w	1f6de <_strtod_l+0x1b6>
   1f7ee:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   1f7f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f7f4:	9308      	str	r3, [sp, #32]
   1f7f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f7f8:	1c59      	adds	r1, r3, #1
   1f7fa:	911d      	str	r1, [sp, #116]	; 0x74
   1f7fc:	785b      	ldrb	r3, [r3, #1]
   1f7fe:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1f802:	2e09      	cmp	r6, #9
   1f804:	d937      	bls.n	1f876 <_strtod_l+0x34e>
   1f806:	9e08      	ldr	r6, [sp, #32]
   1f808:	1b89      	subs	r1, r1, r6
   1f80a:	f644 661f 	movw	r6, #19999	; 0x4e1f
   1f80e:	2908      	cmp	r1, #8
   1f810:	dc02      	bgt.n	1f818 <_strtod_l+0x2f0>
   1f812:	4576      	cmp	r6, lr
   1f814:	bfa8      	it	ge
   1f816:	4676      	movge	r6, lr
   1f818:	f1bc 0f00 	cmp.w	ip, #0
   1f81c:	d000      	beq.n	1f820 <_strtod_l+0x2f8>
   1f81e:	4276      	negs	r6, r6
   1f820:	2d00      	cmp	r5, #0
   1f822:	d14f      	bne.n	1f8c4 <_strtod_l+0x39c>
   1f824:	9904      	ldr	r1, [sp, #16]
   1f826:	4301      	orrs	r1, r0
   1f828:	f47f aec0 	bne.w	1f5ac <_strtod_l+0x84>
   1f82c:	2a00      	cmp	r2, #0
   1f82e:	f47f aed9 	bne.w	1f5e4 <_strtod_l+0xbc>
   1f832:	2b69      	cmp	r3, #105	; 0x69
   1f834:	d027      	beq.n	1f886 <_strtod_l+0x35e>
   1f836:	dc24      	bgt.n	1f882 <_strtod_l+0x35a>
   1f838:	2b49      	cmp	r3, #73	; 0x49
   1f83a:	d024      	beq.n	1f886 <_strtod_l+0x35e>
   1f83c:	2b4e      	cmp	r3, #78	; 0x4e
   1f83e:	f47f aed1 	bne.w	1f5e4 <_strtod_l+0xbc>
   1f842:	499f      	ldr	r1, [pc, #636]	; (1fac0 <_strtod_l+0x598>)
   1f844:	a81d      	add	r0, sp, #116	; 0x74
   1f846:	f025 fe26 	bl	45496 <__match>
   1f84a:	2800      	cmp	r0, #0
   1f84c:	f43f aeca 	beq.w	1f5e4 <_strtod_l+0xbc>
   1f850:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f852:	781b      	ldrb	r3, [r3, #0]
   1f854:	2b28      	cmp	r3, #40	; 0x28
   1f856:	d12d      	bne.n	1f8b4 <_strtod_l+0x38c>
   1f858:	aa20      	add	r2, sp, #128	; 0x80
   1f85a:	499a      	ldr	r1, [pc, #616]	; (1fac4 <_strtod_l+0x59c>)
   1f85c:	a81d      	add	r0, sp, #116	; 0x74
   1f85e:	f025 fe2e 	bl	454be <__hexnan>
   1f862:	2805      	cmp	r0, #5
   1f864:	d126      	bne.n	1f8b4 <_strtod_l+0x38c>
   1f866:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f868:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   1f86c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1f870:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1f874:	e69a      	b.n	1f5ac <_strtod_l+0x84>
   1f876:	210a      	movs	r1, #10
   1f878:	fb01 3e0e 	mla	lr, r1, lr, r3
   1f87c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   1f880:	e7b9      	b.n	1f7f6 <_strtod_l+0x2ce>
   1f882:	2b6e      	cmp	r3, #110	; 0x6e
   1f884:	e7db      	b.n	1f83e <_strtod_l+0x316>
   1f886:	4990      	ldr	r1, [pc, #576]	; (1fac8 <_strtod_l+0x5a0>)
   1f888:	a81d      	add	r0, sp, #116	; 0x74
   1f88a:	f025 fe04 	bl	45496 <__match>
   1f88e:	2800      	cmp	r0, #0
   1f890:	f43f aea8 	beq.w	1f5e4 <_strtod_l+0xbc>
   1f894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f896:	a81d      	add	r0, sp, #116	; 0x74
   1f898:	498c      	ldr	r1, [pc, #560]	; (1facc <_strtod_l+0x5a4>)
   1f89a:	3b01      	subs	r3, #1
   1f89c:	931d      	str	r3, [sp, #116]	; 0x74
   1f89e:	f025 fdfa 	bl	45496 <__match>
   1f8a2:	b910      	cbnz	r0, 1f8aa <_strtod_l+0x382>
   1f8a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f8a6:	3301      	adds	r3, #1
   1f8a8:	931d      	str	r3, [sp, #116]	; 0x74
   1f8aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 1fadc <_strtod_l+0x5b4>
   1f8ae:	f04f 0a00 	mov.w	sl, #0
   1f8b2:	e67b      	b.n	1f5ac <_strtod_l+0x84>
   1f8b4:	4886      	ldr	r0, [pc, #536]	; (1fad0 <_strtod_l+0x5a8>)
   1f8b6:	f001 fa23 	bl	20d00 <nan>
   1f8ba:	ed8d 0b04 	vstr	d0, [sp, #16]
   1f8be:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   1f8c2:	e673      	b.n	1f5ac <_strtod_l+0x84>
   1f8c4:	9b07      	ldr	r3, [sp, #28]
   1f8c6:	2f00      	cmp	r7, #0
   1f8c8:	bf08      	it	eq
   1f8ca:	462f      	moveq	r7, r5
   1f8cc:	2d10      	cmp	r5, #16
   1f8ce:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f8d0:	eba6 0303 	sub.w	r3, r6, r3
   1f8d4:	46a8      	mov	r8, r5
   1f8d6:	bfa8      	it	ge
   1f8d8:	f04f 0810 	movge.w	r8, #16
   1f8dc:	9308      	str	r3, [sp, #32]
   1f8de:	f7fc fef1 	bl	1c6c4 <__aeabi_ui2d>
   1f8e2:	2d09      	cmp	r5, #9
   1f8e4:	4682      	mov	sl, r0
   1f8e6:	468b      	mov	fp, r1
   1f8e8:	dd13      	ble.n	1f912 <_strtod_l+0x3ea>
   1f8ea:	4b7a      	ldr	r3, [pc, #488]	; (1fad4 <_strtod_l+0x5ac>)
   1f8ec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   1f8f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1f8f4:	f7fc ff60 	bl	1c7b8 <__aeabi_dmul>
   1f8f8:	4682      	mov	sl, r0
   1f8fa:	468b      	mov	fp, r1
   1f8fc:	4648      	mov	r0, r9
   1f8fe:	f7fc fee1 	bl	1c6c4 <__aeabi_ui2d>
   1f902:	4602      	mov	r2, r0
   1f904:	460b      	mov	r3, r1
   1f906:	4650      	mov	r0, sl
   1f908:	4659      	mov	r1, fp
   1f90a:	f7fc fd9f 	bl	1c44c <__adddf3>
   1f90e:	4682      	mov	sl, r0
   1f910:	468b      	mov	fp, r1
   1f912:	2d0f      	cmp	r5, #15
   1f914:	dc38      	bgt.n	1f988 <_strtod_l+0x460>
   1f916:	9b08      	ldr	r3, [sp, #32]
   1f918:	2b00      	cmp	r3, #0
   1f91a:	f43f ae47 	beq.w	1f5ac <_strtod_l+0x84>
   1f91e:	dd24      	ble.n	1f96a <_strtod_l+0x442>
   1f920:	2b16      	cmp	r3, #22
   1f922:	dc0b      	bgt.n	1f93c <_strtod_l+0x414>
   1f924:	4d6b      	ldr	r5, [pc, #428]	; (1fad4 <_strtod_l+0x5ac>)
   1f926:	4652      	mov	r2, sl
   1f928:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   1f92c:	465b      	mov	r3, fp
   1f92e:	e9d5 0100 	ldrd	r0, r1, [r5]
   1f932:	f7fc ff41 	bl	1c7b8 <__aeabi_dmul>
   1f936:	4682      	mov	sl, r0
   1f938:	468b      	mov	fp, r1
   1f93a:	e637      	b.n	1f5ac <_strtod_l+0x84>
   1f93c:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   1f940:	9a08      	ldr	r2, [sp, #32]
   1f942:	4293      	cmp	r3, r2
   1f944:	db20      	blt.n	1f988 <_strtod_l+0x460>
   1f946:	f1c5 050f 	rsb	r5, r5, #15
   1f94a:	4c62      	ldr	r4, [pc, #392]	; (1fad4 <_strtod_l+0x5ac>)
   1f94c:	4652      	mov	r2, sl
   1f94e:	465b      	mov	r3, fp
   1f950:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1f954:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f958:	f7fc ff2e 	bl	1c7b8 <__aeabi_dmul>
   1f95c:	9b08      	ldr	r3, [sp, #32]
   1f95e:	1b5d      	subs	r5, r3, r5
   1f960:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1f964:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f968:	e7e3      	b.n	1f932 <_strtod_l+0x40a>
   1f96a:	9b08      	ldr	r3, [sp, #32]
   1f96c:	3316      	adds	r3, #22
   1f96e:	db0b      	blt.n	1f988 <_strtod_l+0x460>
   1f970:	9b07      	ldr	r3, [sp, #28]
   1f972:	4650      	mov	r0, sl
   1f974:	4a57      	ldr	r2, [pc, #348]	; (1fad4 <_strtod_l+0x5ac>)
   1f976:	4659      	mov	r1, fp
   1f978:	1b9e      	subs	r6, r3, r6
   1f97a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   1f97e:	e9d6 2300 	ldrd	r2, r3, [r6]
   1f982:	f7fd f843 	bl	1ca0c <__aeabi_ddiv>
   1f986:	e7d6      	b.n	1f936 <_strtod_l+0x40e>
   1f988:	eba5 0808 	sub.w	r8, r5, r8
   1f98c:	9b08      	ldr	r3, [sp, #32]
   1f98e:	4498      	add	r8, r3
   1f990:	f1b8 0f00 	cmp.w	r8, #0
   1f994:	dd71      	ble.n	1fa7a <_strtod_l+0x552>
   1f996:	f018 030f 	ands.w	r3, r8, #15
   1f99a:	d00a      	beq.n	1f9b2 <_strtod_l+0x48a>
   1f99c:	494d      	ldr	r1, [pc, #308]	; (1fad4 <_strtod_l+0x5ac>)
   1f99e:	4652      	mov	r2, sl
   1f9a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1f9a4:	465b      	mov	r3, fp
   1f9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f9aa:	f7fc ff05 	bl	1c7b8 <__aeabi_dmul>
   1f9ae:	4682      	mov	sl, r0
   1f9b0:	468b      	mov	fp, r1
   1f9b2:	f038 080f 	bics.w	r8, r8, #15
   1f9b6:	d04d      	beq.n	1fa54 <_strtod_l+0x52c>
   1f9b8:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   1f9bc:	dd22      	ble.n	1fa04 <_strtod_l+0x4dc>
   1f9be:	2500      	movs	r5, #0
   1f9c0:	462e      	mov	r6, r5
   1f9c2:	9509      	str	r5, [sp, #36]	; 0x24
   1f9c4:	9507      	str	r5, [sp, #28]
   1f9c6:	2322      	movs	r3, #34	; 0x22
   1f9c8:	f8df b110 	ldr.w	fp, [pc, #272]	; 1fadc <_strtod_l+0x5b4>
   1f9cc:	f04f 0a00 	mov.w	sl, #0
   1f9d0:	6023      	str	r3, [r4, #0]
   1f9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f9d4:	2b00      	cmp	r3, #0
   1f9d6:	f43f ade9 	beq.w	1f5ac <_strtod_l+0x84>
   1f9da:	991e      	ldr	r1, [sp, #120]	; 0x78
   1f9dc:	4620      	mov	r0, r4
   1f9de:	f025 fe91 	bl	45704 <_Bfree>
   1f9e2:	9907      	ldr	r1, [sp, #28]
   1f9e4:	4620      	mov	r0, r4
   1f9e6:	f025 fe8d 	bl	45704 <_Bfree>
   1f9ea:	4631      	mov	r1, r6
   1f9ec:	4620      	mov	r0, r4
   1f9ee:	f025 fe89 	bl	45704 <_Bfree>
   1f9f2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f9f4:	4620      	mov	r0, r4
   1f9f6:	f025 fe85 	bl	45704 <_Bfree>
   1f9fa:	4629      	mov	r1, r5
   1f9fc:	4620      	mov	r0, r4
   1f9fe:	f025 fe81 	bl	45704 <_Bfree>
   1fa02:	e5d3      	b.n	1f5ac <_strtod_l+0x84>
   1fa04:	2300      	movs	r3, #0
   1fa06:	ea4f 1828 	mov.w	r8, r8, asr #4
   1fa0a:	4650      	mov	r0, sl
   1fa0c:	4659      	mov	r1, fp
   1fa0e:	4699      	mov	r9, r3
   1fa10:	f1b8 0f01 	cmp.w	r8, #1
   1fa14:	dc21      	bgt.n	1fa5a <_strtod_l+0x532>
   1fa16:	b10b      	cbz	r3, 1fa1c <_strtod_l+0x4f4>
   1fa18:	4682      	mov	sl, r0
   1fa1a:	468b      	mov	fp, r1
   1fa1c:	4b2e      	ldr	r3, [pc, #184]	; (1fad8 <_strtod_l+0x5b0>)
   1fa1e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1fa22:	4652      	mov	r2, sl
   1fa24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   1fa28:	465b      	mov	r3, fp
   1fa2a:	e9d9 0100 	ldrd	r0, r1, [r9]
   1fa2e:	f7fc fec3 	bl	1c7b8 <__aeabi_dmul>
   1fa32:	4b2a      	ldr	r3, [pc, #168]	; (1fadc <_strtod_l+0x5b4>)
   1fa34:	460a      	mov	r2, r1
   1fa36:	4682      	mov	sl, r0
   1fa38:	400b      	ands	r3, r1
   1fa3a:	4929      	ldr	r1, [pc, #164]	; (1fae0 <_strtod_l+0x5b8>)
   1fa3c:	428b      	cmp	r3, r1
   1fa3e:	d8be      	bhi.n	1f9be <_strtod_l+0x496>
   1fa40:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1fa44:	428b      	cmp	r3, r1
   1fa46:	bf86      	itte	hi
   1fa48:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 1fae4 <_strtod_l+0x5bc>
   1fa4c:	f04f 3aff 	movhi.w	sl, #4294967295
   1fa50:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1fa54:	2300      	movs	r3, #0
   1fa56:	9304      	str	r3, [sp, #16]
   1fa58:	e082      	b.n	1fb60 <_strtod_l+0x638>
   1fa5a:	f018 0f01 	tst.w	r8, #1
   1fa5e:	d007      	beq.n	1fa70 <_strtod_l+0x548>
   1fa60:	4b1d      	ldr	r3, [pc, #116]	; (1fad8 <_strtod_l+0x5b0>)
   1fa62:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1fa66:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fa6a:	f7fc fea5 	bl	1c7b8 <__aeabi_dmul>
   1fa6e:	2301      	movs	r3, #1
   1fa70:	f109 0901 	add.w	r9, r9, #1
   1fa74:	ea4f 0868 	mov.w	r8, r8, asr #1
   1fa78:	e7ca      	b.n	1fa10 <_strtod_l+0x4e8>
   1fa7a:	d0eb      	beq.n	1fa54 <_strtod_l+0x52c>
   1fa7c:	f1c8 0800 	rsb	r8, r8, #0
   1fa80:	f018 020f 	ands.w	r2, r8, #15
   1fa84:	d00a      	beq.n	1fa9c <_strtod_l+0x574>
   1fa86:	4b13      	ldr	r3, [pc, #76]	; (1fad4 <_strtod_l+0x5ac>)
   1fa88:	4650      	mov	r0, sl
   1fa8a:	4659      	mov	r1, fp
   1fa8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1fa90:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fa94:	f7fc ffba 	bl	1ca0c <__aeabi_ddiv>
   1fa98:	4682      	mov	sl, r0
   1fa9a:	468b      	mov	fp, r1
   1fa9c:	ea5f 1828 	movs.w	r8, r8, asr #4
   1faa0:	d0d8      	beq.n	1fa54 <_strtod_l+0x52c>
   1faa2:	f1b8 0f1f 	cmp.w	r8, #31
   1faa6:	dd1f      	ble.n	1fae8 <_strtod_l+0x5c0>
   1faa8:	2500      	movs	r5, #0
   1faaa:	462e      	mov	r6, r5
   1faac:	9509      	str	r5, [sp, #36]	; 0x24
   1faae:	9507      	str	r5, [sp, #28]
   1fab0:	2322      	movs	r3, #34	; 0x22
   1fab2:	f04f 0a00 	mov.w	sl, #0
   1fab6:	f04f 0b00 	mov.w	fp, #0
   1faba:	6023      	str	r3, [r4, #0]
   1fabc:	e789      	b.n	1f9d2 <_strtod_l+0x4aa>
   1fabe:	bf00      	nop
   1fac0:	0004f475 	.word	0x0004f475
   1fac4:	0004744c 	.word	0x0004744c
   1fac8:	00048ef4 	.word	0x00048ef4
   1facc:	0004f48c 	.word	0x0004f48c
   1fad0:	00049048 	.word	0x00049048
   1fad4:	00046648 	.word	0x00046648
   1fad8:	00046620 	.word	0x00046620
   1fadc:	7ff00000 	.word	0x7ff00000
   1fae0:	7ca00000 	.word	0x7ca00000
   1fae4:	7fefffff 	.word	0x7fefffff
   1fae8:	f018 0310 	ands.w	r3, r8, #16
   1faec:	4650      	mov	r0, sl
   1faee:	4659      	mov	r1, fp
   1faf0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 1fea8 <_strtod_l+0x980>
   1faf4:	bf18      	it	ne
   1faf6:	236a      	movne	r3, #106	; 0x6a
   1faf8:	9304      	str	r3, [sp, #16]
   1fafa:	2300      	movs	r3, #0
   1fafc:	f018 0f01 	tst.w	r8, #1
   1fb00:	d004      	beq.n	1fb0c <_strtod_l+0x5e4>
   1fb02:	e9d9 2300 	ldrd	r2, r3, [r9]
   1fb06:	f7fc fe57 	bl	1c7b8 <__aeabi_dmul>
   1fb0a:	2301      	movs	r3, #1
   1fb0c:	ea5f 0868 	movs.w	r8, r8, asr #1
   1fb10:	f109 0908 	add.w	r9, r9, #8
   1fb14:	d1f2      	bne.n	1fafc <_strtod_l+0x5d4>
   1fb16:	b10b      	cbz	r3, 1fb1c <_strtod_l+0x5f4>
   1fb18:	4682      	mov	sl, r0
   1fb1a:	468b      	mov	fp, r1
   1fb1c:	9b04      	ldr	r3, [sp, #16]
   1fb1e:	b1bb      	cbz	r3, 1fb50 <_strtod_l+0x628>
   1fb20:	f3cb 530a 	ubfx	r3, fp, #20, #11
   1fb24:	4659      	mov	r1, fp
   1fb26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1fb2a:	2b00      	cmp	r3, #0
   1fb2c:	dd10      	ble.n	1fb50 <_strtod_l+0x628>
   1fb2e:	2b1f      	cmp	r3, #31
   1fb30:	f340 8127 	ble.w	1fd82 <_strtod_l+0x85a>
   1fb34:	2b34      	cmp	r3, #52	; 0x34
   1fb36:	f04f 0a00 	mov.w	sl, #0
   1fb3a:	bfdb      	ittet	le
   1fb3c:	3b20      	suble	r3, #32
   1fb3e:	f04f 32ff 	movle.w	r2, #4294967295
   1fb42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1fb46:	fa02 f303 	lslle.w	r3, r2, r3
   1fb4a:	bfd8      	it	le
   1fb4c:	ea03 0b01 	andle.w	fp, r3, r1
   1fb50:	2200      	movs	r2, #0
   1fb52:	2300      	movs	r3, #0
   1fb54:	4650      	mov	r0, sl
   1fb56:	4659      	mov	r1, fp
   1fb58:	f7fd f896 	bl	1cc88 <__aeabi_dcmpeq>
   1fb5c:	2800      	cmp	r0, #0
   1fb5e:	d1a3      	bne.n	1faa8 <_strtod_l+0x580>
   1fb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fb62:	463a      	mov	r2, r7
   1fb64:	990a      	ldr	r1, [sp, #40]	; 0x28
   1fb66:	4620      	mov	r0, r4
   1fb68:	9300      	str	r3, [sp, #0]
   1fb6a:	462b      	mov	r3, r5
   1fb6c:	f025 fe20 	bl	457b0 <__s2b>
   1fb70:	9009      	str	r0, [sp, #36]	; 0x24
   1fb72:	2800      	cmp	r0, #0
   1fb74:	f43f af23 	beq.w	1f9be <_strtod_l+0x496>
   1fb78:	9b07      	ldr	r3, [sp, #28]
   1fb7a:	2500      	movs	r5, #0
   1fb7c:	1b9e      	subs	r6, r3, r6
   1fb7e:	9b08      	ldr	r3, [sp, #32]
   1fb80:	2b00      	cmp	r3, #0
   1fb82:	bfb4      	ite	lt
   1fb84:	4633      	movlt	r3, r6
   1fb86:	2300      	movge	r3, #0
   1fb88:	462e      	mov	r6, r5
   1fb8a:	9310      	str	r3, [sp, #64]	; 0x40
   1fb8c:	9b08      	ldr	r3, [sp, #32]
   1fb8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1fb92:	9318      	str	r3, [sp, #96]	; 0x60
   1fb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fb96:	4620      	mov	r0, r4
   1fb98:	6859      	ldr	r1, [r3, #4]
   1fb9a:	f025 fd7f 	bl	4569c <_Balloc>
   1fb9e:	9007      	str	r0, [sp, #28]
   1fba0:	2800      	cmp	r0, #0
   1fba2:	f43f af10 	beq.w	1f9c6 <_strtod_l+0x49e>
   1fba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fba8:	300c      	adds	r0, #12
   1fbaa:	691a      	ldr	r2, [r3, #16]
   1fbac:	f103 010c 	add.w	r1, r3, #12
   1fbb0:	3202      	adds	r2, #2
   1fbb2:	0092      	lsls	r2, r2, #2
   1fbb4:	f025 f897 	bl	44ce6 <memcpy>
   1fbb8:	aa20      	add	r2, sp, #128	; 0x80
   1fbba:	a91f      	add	r1, sp, #124	; 0x7c
   1fbbc:	4620      	mov	r0, r4
   1fbbe:	ec4b ab10 	vmov	d0, sl, fp
   1fbc2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   1fbc6:	f026 f81d 	bl	45c04 <__d2b>
   1fbca:	901e      	str	r0, [sp, #120]	; 0x78
   1fbcc:	2800      	cmp	r0, #0
   1fbce:	f43f aefa 	beq.w	1f9c6 <_strtod_l+0x49e>
   1fbd2:	2101      	movs	r1, #1
   1fbd4:	4620      	mov	r0, r4
   1fbd6:	f025 fe79 	bl	458cc <__i2b>
   1fbda:	4606      	mov	r6, r0
   1fbdc:	2800      	cmp	r0, #0
   1fbde:	f43f aef2 	beq.w	1f9c6 <_strtod_l+0x49e>
   1fbe2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1fbe4:	9904      	ldr	r1, [sp, #16]
   1fbe6:	2b00      	cmp	r3, #0
   1fbe8:	eba3 0801 	sub.w	r8, r3, r1
   1fbec:	bfa9      	itett	ge
   1fbee:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   1fbf0:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   1fbf2:	eb03 0902 	addge.w	r9, r3, r2
   1fbf6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   1fbf8:	bfb8      	it	lt
   1fbfa:	1ad7      	sublt	r7, r2, r3
   1fbfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1fbfe:	4ba5      	ldr	r3, [pc, #660]	; (1fe94 <_strtod_l+0x96c>)
   1fc00:	4490      	add	r8, r2
   1fc02:	bfb8      	it	lt
   1fc04:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   1fc08:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1fc0c:	f108 38ff 	add.w	r8, r8, #4294967295
   1fc10:	4598      	cmp	r8, r3
   1fc12:	f280 80ca 	bge.w	1fdaa <_strtod_l+0x882>
   1fc16:	eba3 0308 	sub.w	r3, r3, r8
   1fc1a:	2101      	movs	r1, #1
   1fc1c:	2b1f      	cmp	r3, #31
   1fc1e:	eba2 0203 	sub.w	r2, r2, r3
   1fc22:	f300 80b5 	bgt.w	1fd90 <_strtod_l+0x868>
   1fc26:	fa01 f303 	lsl.w	r3, r1, r3
   1fc2a:	9311      	str	r3, [sp, #68]	; 0x44
   1fc2c:	2300      	movs	r3, #0
   1fc2e:	930c      	str	r3, [sp, #48]	; 0x30
   1fc30:	eb09 0802 	add.w	r8, r9, r2
   1fc34:	9b04      	ldr	r3, [sp, #16]
   1fc36:	4417      	add	r7, r2
   1fc38:	45c1      	cmp	r9, r8
   1fc3a:	441f      	add	r7, r3
   1fc3c:	464b      	mov	r3, r9
   1fc3e:	bfa8      	it	ge
   1fc40:	4643      	movge	r3, r8
   1fc42:	42bb      	cmp	r3, r7
   1fc44:	bfa8      	it	ge
   1fc46:	463b      	movge	r3, r7
   1fc48:	2b00      	cmp	r3, #0
   1fc4a:	bfc2      	ittt	gt
   1fc4c:	eba8 0803 	subgt.w	r8, r8, r3
   1fc50:	1aff      	subgt	r7, r7, r3
   1fc52:	eba9 0903 	subgt.w	r9, r9, r3
   1fc56:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1fc58:	2b00      	cmp	r3, #0
   1fc5a:	dd17      	ble.n	1fc8c <_strtod_l+0x764>
   1fc5c:	4631      	mov	r1, r6
   1fc5e:	461a      	mov	r2, r3
   1fc60:	4620      	mov	r0, r4
   1fc62:	f020 fe2b 	bl	408bc <__pow5mult>
   1fc66:	4606      	mov	r6, r0
   1fc68:	2800      	cmp	r0, #0
   1fc6a:	f43f aeac 	beq.w	1f9c6 <_strtod_l+0x49e>
   1fc6e:	4601      	mov	r1, r0
   1fc70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1fc72:	4620      	mov	r0, r4
   1fc74:	f025 fe33 	bl	458de <__multiply>
   1fc78:	900f      	str	r0, [sp, #60]	; 0x3c
   1fc7a:	2800      	cmp	r0, #0
   1fc7c:	f43f aea3 	beq.w	1f9c6 <_strtod_l+0x49e>
   1fc80:	991e      	ldr	r1, [sp, #120]	; 0x78
   1fc82:	4620      	mov	r0, r4
   1fc84:	f025 fd3e 	bl	45704 <_Bfree>
   1fc88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fc8a:	931e      	str	r3, [sp, #120]	; 0x78
   1fc8c:	f1b8 0f00 	cmp.w	r8, #0
   1fc90:	f300 8090 	bgt.w	1fdb4 <_strtod_l+0x88c>
   1fc94:	9b08      	ldr	r3, [sp, #32]
   1fc96:	2b00      	cmp	r3, #0
   1fc98:	dd08      	ble.n	1fcac <_strtod_l+0x784>
   1fc9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1fc9c:	4620      	mov	r0, r4
   1fc9e:	9907      	ldr	r1, [sp, #28]
   1fca0:	f020 fe0c 	bl	408bc <__pow5mult>
   1fca4:	9007      	str	r0, [sp, #28]
   1fca6:	2800      	cmp	r0, #0
   1fca8:	f43f ae8d 	beq.w	1f9c6 <_strtod_l+0x49e>
   1fcac:	2f00      	cmp	r7, #0
   1fcae:	dd08      	ble.n	1fcc2 <_strtod_l+0x79a>
   1fcb0:	463a      	mov	r2, r7
   1fcb2:	9907      	ldr	r1, [sp, #28]
   1fcb4:	4620      	mov	r0, r4
   1fcb6:	f025 fead 	bl	45a14 <__lshift>
   1fcba:	9007      	str	r0, [sp, #28]
   1fcbc:	2800      	cmp	r0, #0
   1fcbe:	f43f ae82 	beq.w	1f9c6 <_strtod_l+0x49e>
   1fcc2:	f1b9 0f00 	cmp.w	r9, #0
   1fcc6:	dd08      	ble.n	1fcda <_strtod_l+0x7b2>
   1fcc8:	4631      	mov	r1, r6
   1fcca:	464a      	mov	r2, r9
   1fccc:	4620      	mov	r0, r4
   1fcce:	f025 fea1 	bl	45a14 <__lshift>
   1fcd2:	4606      	mov	r6, r0
   1fcd4:	2800      	cmp	r0, #0
   1fcd6:	f43f ae76 	beq.w	1f9c6 <_strtod_l+0x49e>
   1fcda:	9a07      	ldr	r2, [sp, #28]
   1fcdc:	4620      	mov	r0, r4
   1fcde:	991e      	ldr	r1, [sp, #120]	; 0x78
   1fce0:	f025 ff13 	bl	45b0a <__mdiff>
   1fce4:	4605      	mov	r5, r0
   1fce6:	2800      	cmp	r0, #0
   1fce8:	f43f ae6d 	beq.w	1f9c6 <_strtod_l+0x49e>
   1fcec:	68c3      	ldr	r3, [r0, #12]
   1fcee:	4631      	mov	r1, r6
   1fcf0:	930f      	str	r3, [sp, #60]	; 0x3c
   1fcf2:	2300      	movs	r3, #0
   1fcf4:	60c3      	str	r3, [r0, #12]
   1fcf6:	f025 feec 	bl	45ad2 <__mcmp>
   1fcfa:	2800      	cmp	r0, #0
   1fcfc:	da64      	bge.n	1fdc8 <_strtod_l+0x8a0>
   1fcfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fd00:	ea53 030a 	orrs.w	r3, r3, sl
   1fd04:	f040 8086 	bne.w	1fe14 <_strtod_l+0x8ec>
   1fd08:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1fd0c:	2b00      	cmp	r3, #0
   1fd0e:	f040 8081 	bne.w	1fe14 <_strtod_l+0x8ec>
   1fd12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1fd16:	0d1b      	lsrs	r3, r3, #20
   1fd18:	051b      	lsls	r3, r3, #20
   1fd1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1fd1e:	d979      	bls.n	1fe14 <_strtod_l+0x8ec>
   1fd20:	696b      	ldr	r3, [r5, #20]
   1fd22:	b913      	cbnz	r3, 1fd2a <_strtod_l+0x802>
   1fd24:	692b      	ldr	r3, [r5, #16]
   1fd26:	2b01      	cmp	r3, #1
   1fd28:	dd74      	ble.n	1fe14 <_strtod_l+0x8ec>
   1fd2a:	4629      	mov	r1, r5
   1fd2c:	2201      	movs	r2, #1
   1fd2e:	4620      	mov	r0, r4
   1fd30:	f025 fe70 	bl	45a14 <__lshift>
   1fd34:	4631      	mov	r1, r6
   1fd36:	4605      	mov	r5, r0
   1fd38:	f025 fecb 	bl	45ad2 <__mcmp>
   1fd3c:	2800      	cmp	r0, #0
   1fd3e:	dd69      	ble.n	1fe14 <_strtod_l+0x8ec>
   1fd40:	9904      	ldr	r1, [sp, #16]
   1fd42:	465b      	mov	r3, fp
   1fd44:	4a54      	ldr	r2, [pc, #336]	; (1fe98 <_strtod_l+0x970>)
   1fd46:	2900      	cmp	r1, #0
   1fd48:	f000 8084 	beq.w	1fe54 <_strtod_l+0x92c>
   1fd4c:	ea02 010b 	and.w	r1, r2, fp
   1fd50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1fd54:	dc7e      	bgt.n	1fe54 <_strtod_l+0x92c>
   1fd56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1fd5a:	f77f aea9 	ble.w	1fab0 <_strtod_l+0x588>
   1fd5e:	2300      	movs	r3, #0
   1fd60:	4a4e      	ldr	r2, [pc, #312]	; (1fe9c <_strtod_l+0x974>)
   1fd62:	4650      	mov	r0, sl
   1fd64:	4659      	mov	r1, fp
   1fd66:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   1fd6a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1fd6e:	f7fc fd23 	bl	1c7b8 <__aeabi_dmul>
   1fd72:	460b      	mov	r3, r1
   1fd74:	4682      	mov	sl, r0
   1fd76:	468b      	mov	fp, r1
   1fd78:	4303      	orrs	r3, r0
   1fd7a:	bf04      	itt	eq
   1fd7c:	2322      	moveq	r3, #34	; 0x22
   1fd7e:	6023      	streq	r3, [r4, #0]
   1fd80:	e62b      	b.n	1f9da <_strtod_l+0x4b2>
   1fd82:	f04f 32ff 	mov.w	r2, #4294967295
   1fd86:	fa02 f303 	lsl.w	r3, r2, r3
   1fd8a:	ea03 0a0a 	and.w	sl, r3, sl
   1fd8e:	e6df      	b.n	1fb50 <_strtod_l+0x628>
   1fd90:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   1fd94:	9111      	str	r1, [sp, #68]	; 0x44
   1fd96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   1fd9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   1fd9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   1fda2:	fa01 f308 	lsl.w	r3, r1, r8
   1fda6:	930c      	str	r3, [sp, #48]	; 0x30
   1fda8:	e742      	b.n	1fc30 <_strtod_l+0x708>
   1fdaa:	2300      	movs	r3, #0
   1fdac:	930c      	str	r3, [sp, #48]	; 0x30
   1fdae:	2301      	movs	r3, #1
   1fdb0:	9311      	str	r3, [sp, #68]	; 0x44
   1fdb2:	e73d      	b.n	1fc30 <_strtod_l+0x708>
   1fdb4:	4642      	mov	r2, r8
   1fdb6:	991e      	ldr	r1, [sp, #120]	; 0x78
   1fdb8:	4620      	mov	r0, r4
   1fdba:	f025 fe2b 	bl	45a14 <__lshift>
   1fdbe:	901e      	str	r0, [sp, #120]	; 0x78
   1fdc0:	2800      	cmp	r0, #0
   1fdc2:	f47f af67 	bne.w	1fc94 <_strtod_l+0x76c>
   1fdc6:	e5fe      	b.n	1f9c6 <_strtod_l+0x49e>
   1fdc8:	465f      	mov	r7, fp
   1fdca:	d16f      	bne.n	1feac <_strtod_l+0x984>
   1fdcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fdce:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1fdd2:	b342      	cbz	r2, 1fe26 <_strtod_l+0x8fe>
   1fdd4:	4a32      	ldr	r2, [pc, #200]	; (1fea0 <_strtod_l+0x978>)
   1fdd6:	4293      	cmp	r3, r2
   1fdd8:	d128      	bne.n	1fe2c <_strtod_l+0x904>
   1fdda:	9b04      	ldr	r3, [sp, #16]
   1fddc:	4650      	mov	r0, sl
   1fdde:	b1eb      	cbz	r3, 1fe1c <_strtod_l+0x8f4>
   1fde0:	4a2d      	ldr	r2, [pc, #180]	; (1fe98 <_strtod_l+0x970>)
   1fde2:	f04f 31ff 	mov.w	r1, #4294967295
   1fde6:	403a      	ands	r2, r7
   1fde8:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   1fdec:	d819      	bhi.n	1fe22 <_strtod_l+0x8fa>
   1fdee:	0d12      	lsrs	r2, r2, #20
   1fdf0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1fdf4:	fa01 f303 	lsl.w	r3, r1, r3
   1fdf8:	4298      	cmp	r0, r3
   1fdfa:	d117      	bne.n	1fe2c <_strtod_l+0x904>
   1fdfc:	4b29      	ldr	r3, [pc, #164]	; (1fea4 <_strtod_l+0x97c>)
   1fdfe:	429f      	cmp	r7, r3
   1fe00:	d102      	bne.n	1fe08 <_strtod_l+0x8e0>
   1fe02:	3001      	adds	r0, #1
   1fe04:	f43f addf 	beq.w	1f9c6 <_strtod_l+0x49e>
   1fe08:	4b23      	ldr	r3, [pc, #140]	; (1fe98 <_strtod_l+0x970>)
   1fe0a:	f04f 0a00 	mov.w	sl, #0
   1fe0e:	403b      	ands	r3, r7
   1fe10:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1fe14:	9b04      	ldr	r3, [sp, #16]
   1fe16:	2b00      	cmp	r3, #0
   1fe18:	d1a1      	bne.n	1fd5e <_strtod_l+0x836>
   1fe1a:	e5de      	b.n	1f9da <_strtod_l+0x4b2>
   1fe1c:	f04f 33ff 	mov.w	r3, #4294967295
   1fe20:	e7ea      	b.n	1fdf8 <_strtod_l+0x8d0>
   1fe22:	460b      	mov	r3, r1
   1fe24:	e7e8      	b.n	1fdf8 <_strtod_l+0x8d0>
   1fe26:	ea53 030a 	orrs.w	r3, r3, sl
   1fe2a:	d089      	beq.n	1fd40 <_strtod_l+0x818>
   1fe2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fe2e:	b1db      	cbz	r3, 1fe68 <_strtod_l+0x940>
   1fe30:	423b      	tst	r3, r7
   1fe32:	d0ef      	beq.n	1fe14 <_strtod_l+0x8ec>
   1fe34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fe36:	4650      	mov	r0, sl
   1fe38:	9a04      	ldr	r2, [sp, #16]
   1fe3a:	4659      	mov	r1, fp
   1fe3c:	b1c3      	cbz	r3, 1fe70 <_strtod_l+0x948>
   1fe3e:	f025 f99b 	bl	45178 <sulp>
   1fe42:	4602      	mov	r2, r0
   1fe44:	460b      	mov	r3, r1
   1fe46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1fe4a:	f7fc faff 	bl	1c44c <__adddf3>
   1fe4e:	4682      	mov	sl, r0
   1fe50:	468b      	mov	fp, r1
   1fe52:	e7df      	b.n	1fe14 <_strtod_l+0x8ec>
   1fe54:	4013      	ands	r3, r2
   1fe56:	f04f 3aff 	mov.w	sl, #4294967295
   1fe5a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1fe5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1fe62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1fe66:	e7d5      	b.n	1fe14 <_strtod_l+0x8ec>
   1fe68:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fe6a:	ea13 0f0a 	tst.w	r3, sl
   1fe6e:	e7e0      	b.n	1fe32 <_strtod_l+0x90a>
   1fe70:	f025 f982 	bl	45178 <sulp>
   1fe74:	4602      	mov	r2, r0
   1fe76:	460b      	mov	r3, r1
   1fe78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1fe7c:	f7fc fae4 	bl	1c448 <__aeabi_dsub>
   1fe80:	2200      	movs	r2, #0
   1fe82:	2300      	movs	r3, #0
   1fe84:	4682      	mov	sl, r0
   1fe86:	468b      	mov	fp, r1
   1fe88:	f7fc fefe 	bl	1cc88 <__aeabi_dcmpeq>
   1fe8c:	2800      	cmp	r0, #0
   1fe8e:	d0c1      	beq.n	1fe14 <_strtod_l+0x8ec>
   1fe90:	e60e      	b.n	1fab0 <_strtod_l+0x588>
   1fe92:	bf00      	nop
   1fe94:	fffffc02 	.word	0xfffffc02
   1fe98:	7ff00000 	.word	0x7ff00000
   1fe9c:	39500000 	.word	0x39500000
   1fea0:	000fffff 	.word	0x000fffff
   1fea4:	7fefffff 	.word	0x7fefffff
   1fea8:	000465f8 	.word	0x000465f8
   1feac:	4631      	mov	r1, r6
   1feae:	4628      	mov	r0, r5
   1feb0:	f025 fef8 	bl	45ca4 <__ratio>
   1feb4:	2200      	movs	r2, #0
   1feb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1feba:	ee10 0a10 	vmov	r0, s0
   1febe:	ec59 8b10 	vmov	r8, r9, d0
   1fec2:	4649      	mov	r1, r9
   1fec4:	f7fc fef4 	bl	1ccb0 <__aeabi_dcmple>
   1fec8:	2800      	cmp	r0, #0
   1feca:	d07c      	beq.n	1ffc6 <_strtod_l+0xa9e>
   1fecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fece:	2b00      	cmp	r3, #0
   1fed0:	d04c      	beq.n	1ff6c <_strtod_l+0xa44>
   1fed2:	2200      	movs	r2, #0
   1fed4:	4b94      	ldr	r3, [pc, #592]	; (20128 <_strtod_l+0xc00>)
   1fed6:	f04f 0800 	mov.w	r8, #0
   1feda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 20128 <_strtod_l+0xc00>
   1fede:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1fee2:	4b92      	ldr	r3, [pc, #584]	; (2012c <_strtod_l+0xc04>)
   1fee4:	403b      	ands	r3, r7
   1fee6:	9311      	str	r3, [sp, #68]	; 0x44
   1fee8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1feea:	4b91      	ldr	r3, [pc, #580]	; (20130 <_strtod_l+0xc08>)
   1feec:	429a      	cmp	r2, r3
   1feee:	f040 80b2 	bne.w	20056 <_strtod_l+0xb2e>
   1fef2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   1fef6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1fefa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1fefe:	ec4b ab10 	vmov	d0, sl, fp
   1ff02:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   1ff06:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1ff0a:	f020 fd25 	bl	40958 <__ulp>
   1ff0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1ff12:	ec53 2b10 	vmov	r2, r3, d0
   1ff16:	f7fc fc4f 	bl	1c7b8 <__aeabi_dmul>
   1ff1a:	4652      	mov	r2, sl
   1ff1c:	465b      	mov	r3, fp
   1ff1e:	f7fc fa95 	bl	1c44c <__adddf3>
   1ff22:	460b      	mov	r3, r1
   1ff24:	4981      	ldr	r1, [pc, #516]	; (2012c <_strtod_l+0xc04>)
   1ff26:	4682      	mov	sl, r0
   1ff28:	4a82      	ldr	r2, [pc, #520]	; (20134 <_strtod_l+0xc0c>)
   1ff2a:	4019      	ands	r1, r3
   1ff2c:	4291      	cmp	r1, r2
   1ff2e:	d95e      	bls.n	1ffee <_strtod_l+0xac6>
   1ff30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ff32:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1ff36:	4293      	cmp	r3, r2
   1ff38:	d103      	bne.n	1ff42 <_strtod_l+0xa1a>
   1ff3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ff3c:	3301      	adds	r3, #1
   1ff3e:	f43f ad42 	beq.w	1f9c6 <_strtod_l+0x49e>
   1ff42:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 20140 <_strtod_l+0xc18>
   1ff46:	f04f 3aff 	mov.w	sl, #4294967295
   1ff4a:	991e      	ldr	r1, [sp, #120]	; 0x78
   1ff4c:	4620      	mov	r0, r4
   1ff4e:	f025 fbd9 	bl	45704 <_Bfree>
   1ff52:	9907      	ldr	r1, [sp, #28]
   1ff54:	4620      	mov	r0, r4
   1ff56:	f025 fbd5 	bl	45704 <_Bfree>
   1ff5a:	4631      	mov	r1, r6
   1ff5c:	4620      	mov	r0, r4
   1ff5e:	f025 fbd1 	bl	45704 <_Bfree>
   1ff62:	4629      	mov	r1, r5
   1ff64:	4620      	mov	r0, r4
   1ff66:	f025 fbcd 	bl	45704 <_Bfree>
   1ff6a:	e613      	b.n	1fb94 <_strtod_l+0x66c>
   1ff6c:	f1ba 0f00 	cmp.w	sl, #0
   1ff70:	d11b      	bne.n	1ffaa <_strtod_l+0xa82>
   1ff72:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1ff76:	b9f3      	cbnz	r3, 1ffb6 <_strtod_l+0xa8e>
   1ff78:	2200      	movs	r2, #0
   1ff7a:	4b6b      	ldr	r3, [pc, #428]	; (20128 <_strtod_l+0xc00>)
   1ff7c:	4640      	mov	r0, r8
   1ff7e:	4649      	mov	r1, r9
   1ff80:	f7fc fe8c 	bl	1cc9c <__aeabi_dcmplt>
   1ff84:	b9d0      	cbnz	r0, 1ffbc <_strtod_l+0xa94>
   1ff86:	4640      	mov	r0, r8
   1ff88:	4649      	mov	r1, r9
   1ff8a:	2200      	movs	r2, #0
   1ff8c:	4b6a      	ldr	r3, [pc, #424]	; (20138 <_strtod_l+0xc10>)
   1ff8e:	f7fc fc13 	bl	1c7b8 <__aeabi_dmul>
   1ff92:	4680      	mov	r8, r0
   1ff94:	4689      	mov	r9, r1
   1ff96:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1ff9a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   1ff9e:	931b      	str	r3, [sp, #108]	; 0x6c
   1ffa0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   1ffa4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1ffa8:	e79b      	b.n	1fee2 <_strtod_l+0x9ba>
   1ffaa:	f1ba 0f01 	cmp.w	sl, #1
   1ffae:	d102      	bne.n	1ffb6 <_strtod_l+0xa8e>
   1ffb0:	2f00      	cmp	r7, #0
   1ffb2:	f43f ad7d 	beq.w	1fab0 <_strtod_l+0x588>
   1ffb6:	2200      	movs	r2, #0
   1ffb8:	4b60      	ldr	r3, [pc, #384]	; (2013c <_strtod_l+0xc14>)
   1ffba:	e78c      	b.n	1fed6 <_strtod_l+0x9ae>
   1ffbc:	f04f 0800 	mov.w	r8, #0
   1ffc0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 20138 <_strtod_l+0xc10>
   1ffc4:	e7e7      	b.n	1ff96 <_strtod_l+0xa6e>
   1ffc6:	4b5c      	ldr	r3, [pc, #368]	; (20138 <_strtod_l+0xc10>)
   1ffc8:	4640      	mov	r0, r8
   1ffca:	4649      	mov	r1, r9
   1ffcc:	2200      	movs	r2, #0
   1ffce:	f7fc fbf3 	bl	1c7b8 <__aeabi_dmul>
   1ffd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ffd4:	4680      	mov	r8, r0
   1ffd6:	4689      	mov	r9, r1
   1ffd8:	b933      	cbnz	r3, 1ffe8 <_strtod_l+0xac0>
   1ffda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1ffde:	9012      	str	r0, [sp, #72]	; 0x48
   1ffe0:	9313      	str	r3, [sp, #76]	; 0x4c
   1ffe2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1ffe6:	e7dd      	b.n	1ffa4 <_strtod_l+0xa7c>
   1ffe8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   1ffec:	e7f9      	b.n	1ffe2 <_strtod_l+0xaba>
   1ffee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1fff2:	9b04      	ldr	r3, [sp, #16]
   1fff4:	2b00      	cmp	r3, #0
   1fff6:	d1a8      	bne.n	1ff4a <_strtod_l+0xa22>
   1fff8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1fffc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1fffe:	0d1b      	lsrs	r3, r3, #20
   20000:	051b      	lsls	r3, r3, #20
   20002:	429a      	cmp	r2, r3
   20004:	d1a1      	bne.n	1ff4a <_strtod_l+0xa22>
   20006:	4640      	mov	r0, r8
   20008:	4649      	mov	r1, r9
   2000a:	f7fd f8e7 	bl	1d1dc <__aeabi_d2lz>
   2000e:	f7fc fba5 	bl	1c75c <__aeabi_l2d>
   20012:	4602      	mov	r2, r0
   20014:	460b      	mov	r3, r1
   20016:	4640      	mov	r0, r8
   20018:	4649      	mov	r1, r9
   2001a:	f7fc fa15 	bl	1c448 <__aeabi_dsub>
   2001e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   20022:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20024:	4680      	mov	r8, r0
   20026:	ea43 030a 	orr.w	r3, r3, sl
   2002a:	4689      	mov	r9, r1
   2002c:	4313      	orrs	r3, r2
   2002e:	d053      	beq.n	200d8 <_strtod_l+0xbb0>
   20030:	a335      	add	r3, pc, #212	; (adr r3, 20108 <_strtod_l+0xbe0>)
   20032:	e9d3 2300 	ldrd	r2, r3, [r3]
   20036:	f7fc fe31 	bl	1cc9c <__aeabi_dcmplt>
   2003a:	2800      	cmp	r0, #0
   2003c:	f47f accd 	bne.w	1f9da <_strtod_l+0x4b2>
   20040:	4640      	mov	r0, r8
   20042:	4649      	mov	r1, r9
   20044:	a332      	add	r3, pc, #200	; (adr r3, 20110 <_strtod_l+0xbe8>)
   20046:	e9d3 2300 	ldrd	r2, r3, [r3]
   2004a:	f7fc fe45 	bl	1ccd8 <__aeabi_dcmpgt>
   2004e:	2800      	cmp	r0, #0
   20050:	f43f af7b 	beq.w	1ff4a <_strtod_l+0xa22>
   20054:	e4c1      	b.n	1f9da <_strtod_l+0x4b2>
   20056:	9b04      	ldr	r3, [sp, #16]
   20058:	b333      	cbz	r3, 200a8 <_strtod_l+0xb80>
   2005a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2005c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   20060:	d822      	bhi.n	200a8 <_strtod_l+0xb80>
   20062:	4640      	mov	r0, r8
   20064:	4649      	mov	r1, r9
   20066:	a32c      	add	r3, pc, #176	; (adr r3, 20118 <_strtod_l+0xbf0>)
   20068:	e9d3 2300 	ldrd	r2, r3, [r3]
   2006c:	f7fc fe20 	bl	1ccb0 <__aeabi_dcmple>
   20070:	b1a0      	cbz	r0, 2009c <_strtod_l+0xb74>
   20072:	4649      	mov	r1, r9
   20074:	4640      	mov	r0, r8
   20076:	f7fc fe61 	bl	1cd3c <__aeabi_d2uiz>
   2007a:	2801      	cmp	r0, #1
   2007c:	bf38      	it	cc
   2007e:	2001      	movcc	r0, #1
   20080:	f7fc fb20 	bl	1c6c4 <__aeabi_ui2d>
   20084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20086:	4680      	mov	r8, r0
   20088:	4689      	mov	r9, r1
   2008a:	bb13      	cbnz	r3, 200d2 <_strtod_l+0xbaa>
   2008c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   20090:	9014      	str	r0, [sp, #80]	; 0x50
   20092:	9315      	str	r3, [sp, #84]	; 0x54
   20094:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   20098:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   2009c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2009e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   200a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   200a4:	1a9b      	subs	r3, r3, r2
   200a6:	930d      	str	r3, [sp, #52]	; 0x34
   200a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   200ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   200b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   200b4:	f020 fc50 	bl	40958 <__ulp>
   200b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   200bc:	ec53 2b10 	vmov	r2, r3, d0
   200c0:	f7fc fb7a 	bl	1c7b8 <__aeabi_dmul>
   200c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   200c8:	f7fc f9c0 	bl	1c44c <__adddf3>
   200cc:	4682      	mov	sl, r0
   200ce:	468b      	mov	fp, r1
   200d0:	e78f      	b.n	1fff2 <_strtod_l+0xaca>
   200d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   200d6:	e7dd      	b.n	20094 <_strtod_l+0xb6c>
   200d8:	a311      	add	r3, pc, #68	; (adr r3, 20120 <_strtod_l+0xbf8>)
   200da:	e9d3 2300 	ldrd	r2, r3, [r3]
   200de:	f7fc fddd 	bl	1cc9c <__aeabi_dcmplt>
   200e2:	e7b4      	b.n	2004e <_strtod_l+0xb26>
   200e4:	2300      	movs	r3, #0
   200e6:	930e      	str	r3, [sp, #56]	; 0x38
   200e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   200ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
   200ec:	6013      	str	r3, [r2, #0]
   200ee:	f7ff ba61 	b.w	1f5b4 <_strtod_l+0x8c>
   200f2:	2b65      	cmp	r3, #101	; 0x65
   200f4:	f43f ab5a 	beq.w	1f7ac <_strtod_l+0x284>
   200f8:	2b45      	cmp	r3, #69	; 0x45
   200fa:	f43f ab57 	beq.w	1f7ac <_strtod_l+0x284>
   200fe:	2201      	movs	r2, #1
   20100:	f7ff bb90 	b.w	1f824 <_strtod_l+0x2fc>
   20104:	f3af 8000 	nop.w
   20108:	94a03595 	.word	0x94a03595
   2010c:	3fdfffff 	.word	0x3fdfffff
   20110:	35afe535 	.word	0x35afe535
   20114:	3fe00000 	.word	0x3fe00000
   20118:	ffc00000 	.word	0xffc00000
   2011c:	41dfffff 	.word	0x41dfffff
   20120:	94a03595 	.word	0x94a03595
   20124:	3fcfffff 	.word	0x3fcfffff
   20128:	3ff00000 	.word	0x3ff00000
   2012c:	7ff00000 	.word	0x7ff00000
   20130:	7fe00000 	.word	0x7fe00000
   20134:	7c9fffff 	.word	0x7c9fffff
   20138:	3fe00000 	.word	0x3fe00000
   2013c:	bff00000 	.word	0xbff00000
   20140:	7fefffff 	.word	0x7fefffff
   20144:	00000000 	.word	0x00000000

00020148 <_dtoa_r>:
   20148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2014c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2014e:	4604      	mov	r4, r0
   20150:	ed2d 8b02 	vpush	{d8}
   20154:	b095      	sub	sp, #84	; 0x54
   20156:	ec57 6b10 	vmov	r6, r7, d0
   2015a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   2015e:	9105      	str	r1, [sp, #20]
   20160:	9209      	str	r2, [sp, #36]	; 0x24
   20162:	930f      	str	r3, [sp, #60]	; 0x3c
   20164:	e9cd 6702 	strd	r6, r7, [sp, #8]
   20168:	b93d      	cbnz	r5, 2017a <_dtoa_r+0x32>
   2016a:	2010      	movs	r0, #16
   2016c:	f01e ff58 	bl	3f020 <malloc>
   20170:	6260      	str	r0, [r4, #36]	; 0x24
   20172:	6005      	str	r5, [r0, #0]
   20174:	60c5      	str	r5, [r0, #12]
   20176:	e9c0 5501 	strd	r5, r5, [r0, #4]
   2017a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2017c:	6819      	ldr	r1, [r3, #0]
   2017e:	b151      	cbz	r1, 20196 <_dtoa_r+0x4e>
   20180:	685a      	ldr	r2, [r3, #4]
   20182:	2301      	movs	r3, #1
   20184:	4620      	mov	r0, r4
   20186:	4093      	lsls	r3, r2
   20188:	604a      	str	r2, [r1, #4]
   2018a:	608b      	str	r3, [r1, #8]
   2018c:	f025 faba 	bl	45704 <_Bfree>
   20190:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20192:	2200      	movs	r2, #0
   20194:	601a      	str	r2, [r3, #0]
   20196:	1e3b      	subs	r3, r7, #0
   20198:	bfb7      	itett	lt
   2019a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   2019e:	2300      	movge	r3, #0
   201a0:	2201      	movlt	r2, #1
   201a2:	9303      	strlt	r3, [sp, #12]
   201a4:	bfa8      	it	ge
   201a6:	f8c8 3000 	strge.w	r3, [r8]
   201aa:	f8dd 900c 	ldr.w	r9, [sp, #12]
   201ae:	4bb6      	ldr	r3, [pc, #728]	; (20488 <_dtoa_r+0x340>)
   201b0:	bfb8      	it	lt
   201b2:	f8c8 2000 	strlt.w	r2, [r8]
   201b6:	ea33 0309 	bics.w	r3, r3, r9
   201ba:	d11b      	bne.n	201f4 <_dtoa_r+0xac>
   201bc:	f242 730f 	movw	r3, #9999	; 0x270f
   201c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   201c2:	6013      	str	r3, [r2, #0]
   201c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
   201c8:	4333      	orrs	r3, r6
   201ca:	f000 8572 	beq.w	20cb2 <_dtoa_r+0xb6a>
   201ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
   201d0:	b963      	cbnz	r3, 201ec <_dtoa_r+0xa4>
   201d2:	4bae      	ldr	r3, [pc, #696]	; (2048c <_dtoa_r+0x344>)
   201d4:	e025      	b.n	20222 <_dtoa_r+0xda>
   201d6:	4bae      	ldr	r3, [pc, #696]	; (20490 <_dtoa_r+0x348>)
   201d8:	9300      	str	r3, [sp, #0]
   201da:	3308      	adds	r3, #8
   201dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
   201de:	6013      	str	r3, [r2, #0]
   201e0:	9800      	ldr	r0, [sp, #0]
   201e2:	b015      	add	sp, #84	; 0x54
   201e4:	ecbd 8b02 	vpop	{d8}
   201e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201ec:	4ba7      	ldr	r3, [pc, #668]	; (2048c <_dtoa_r+0x344>)
   201ee:	9300      	str	r3, [sp, #0]
   201f0:	3303      	adds	r3, #3
   201f2:	e7f3      	b.n	201dc <_dtoa_r+0x94>
   201f4:	ed9d 7b02 	vldr	d7, [sp, #8]
   201f8:	2200      	movs	r2, #0
   201fa:	2300      	movs	r3, #0
   201fc:	ec51 0b17 	vmov	r0, r1, d7
   20200:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   20204:	f7fc fd40 	bl	1cc88 <__aeabi_dcmpeq>
   20208:	4680      	mov	r8, r0
   2020a:	b160      	cbz	r0, 20226 <_dtoa_r+0xde>
   2020c:	2301      	movs	r3, #1
   2020e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20210:	6013      	str	r3, [r2, #0]
   20212:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20214:	2b00      	cmp	r3, #0
   20216:	f000 8549 	beq.w	20cac <_dtoa_r+0xb64>
   2021a:	4b9e      	ldr	r3, [pc, #632]	; (20494 <_dtoa_r+0x34c>)
   2021c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   2021e:	6013      	str	r3, [r2, #0]
   20220:	3b01      	subs	r3, #1
   20222:	9300      	str	r3, [sp, #0]
   20224:	e7dc      	b.n	201e0 <_dtoa_r+0x98>
   20226:	f3c9 550a 	ubfx	r5, r9, #20, #11
   2022a:	aa12      	add	r2, sp, #72	; 0x48
   2022c:	a913      	add	r1, sp, #76	; 0x4c
   2022e:	4620      	mov	r0, r4
   20230:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   20234:	f025 fce6 	bl	45c04 <__d2b>
   20238:	4682      	mov	sl, r0
   2023a:	2d00      	cmp	r5, #0
   2023c:	d07c      	beq.n	20338 <_dtoa_r+0x1f0>
   2023e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20240:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   20244:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   20248:	f3c3 0313 	ubfx	r3, r3, #0, #20
   2024c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   20250:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   20254:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   20258:	2200      	movs	r2, #0
   2025a:	4b8f      	ldr	r3, [pc, #572]	; (20498 <_dtoa_r+0x350>)
   2025c:	4630      	mov	r0, r6
   2025e:	4639      	mov	r1, r7
   20260:	f7fc f8f2 	bl	1c448 <__aeabi_dsub>
   20264:	a382      	add	r3, pc, #520	; (adr r3, 20470 <_dtoa_r+0x328>)
   20266:	e9d3 2300 	ldrd	r2, r3, [r3]
   2026a:	f7fc faa5 	bl	1c7b8 <__aeabi_dmul>
   2026e:	a382      	add	r3, pc, #520	; (adr r3, 20478 <_dtoa_r+0x330>)
   20270:	e9d3 2300 	ldrd	r2, r3, [r3]
   20274:	f7fc f8ea 	bl	1c44c <__adddf3>
   20278:	4606      	mov	r6, r0
   2027a:	460f      	mov	r7, r1
   2027c:	4628      	mov	r0, r5
   2027e:	f7fc fa31 	bl	1c6e4 <__aeabi_i2d>
   20282:	a37f      	add	r3, pc, #508	; (adr r3, 20480 <_dtoa_r+0x338>)
   20284:	e9d3 2300 	ldrd	r2, r3, [r3]
   20288:	f7fc fa96 	bl	1c7b8 <__aeabi_dmul>
   2028c:	4602      	mov	r2, r0
   2028e:	460b      	mov	r3, r1
   20290:	4630      	mov	r0, r6
   20292:	4639      	mov	r1, r7
   20294:	f7fc f8da 	bl	1c44c <__adddf3>
   20298:	4606      	mov	r6, r0
   2029a:	460f      	mov	r7, r1
   2029c:	f7fc fd26 	bl	1ccec <__aeabi_d2iz>
   202a0:	2200      	movs	r2, #0
   202a2:	4681      	mov	r9, r0
   202a4:	2300      	movs	r3, #0
   202a6:	4630      	mov	r0, r6
   202a8:	4639      	mov	r1, r7
   202aa:	f7fc fcf7 	bl	1cc9c <__aeabi_dcmplt>
   202ae:	b148      	cbz	r0, 202c4 <_dtoa_r+0x17c>
   202b0:	4648      	mov	r0, r9
   202b2:	f7fc fa17 	bl	1c6e4 <__aeabi_i2d>
   202b6:	4632      	mov	r2, r6
   202b8:	463b      	mov	r3, r7
   202ba:	f7fc fce5 	bl	1cc88 <__aeabi_dcmpeq>
   202be:	b908      	cbnz	r0, 202c4 <_dtoa_r+0x17c>
   202c0:	f109 39ff 	add.w	r9, r9, #4294967295
   202c4:	f1b9 0f16 	cmp.w	r9, #22
   202c8:	d855      	bhi.n	20376 <_dtoa_r+0x22e>
   202ca:	4b74      	ldr	r3, [pc, #464]	; (2049c <_dtoa_r+0x354>)
   202cc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   202d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   202d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   202d8:	f7fc fce0 	bl	1cc9c <__aeabi_dcmplt>
   202dc:	2800      	cmp	r0, #0
   202de:	d04c      	beq.n	2037a <_dtoa_r+0x232>
   202e0:	f109 39ff 	add.w	r9, r9, #4294967295
   202e4:	2300      	movs	r3, #0
   202e6:	930e      	str	r3, [sp, #56]	; 0x38
   202e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   202ea:	1b5d      	subs	r5, r3, r5
   202ec:	1e6b      	subs	r3, r5, #1
   202ee:	9304      	str	r3, [sp, #16]
   202f0:	bf45      	ittet	mi
   202f2:	2300      	movmi	r3, #0
   202f4:	f1c5 0801 	rsbmi	r8, r5, #1
   202f8:	f04f 0800 	movpl.w	r8, #0
   202fc:	9304      	strmi	r3, [sp, #16]
   202fe:	f1b9 0f00 	cmp.w	r9, #0
   20302:	db3c      	blt.n	2037e <_dtoa_r+0x236>
   20304:	9b04      	ldr	r3, [sp, #16]
   20306:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   2030a:	444b      	add	r3, r9
   2030c:	9304      	str	r3, [sp, #16]
   2030e:	2300      	movs	r3, #0
   20310:	9306      	str	r3, [sp, #24]
   20312:	9b05      	ldr	r3, [sp, #20]
   20314:	2b09      	cmp	r3, #9
   20316:	f200 8099 	bhi.w	2044c <_dtoa_r+0x304>
   2031a:	2b05      	cmp	r3, #5
   2031c:	bfc5      	ittet	gt
   2031e:	3b04      	subgt	r3, #4
   20320:	2500      	movgt	r5, #0
   20322:	2501      	movle	r5, #1
   20324:	9305      	strgt	r3, [sp, #20]
   20326:	9b05      	ldr	r3, [sp, #20]
   20328:	3b02      	subs	r3, #2
   2032a:	2b03      	cmp	r3, #3
   2032c:	f200 809a 	bhi.w	20464 <_dtoa_r+0x31c>
   20330:	e8df f003 	tbb	[pc, r3]
   20334:	8a7c7e2d 	.word	0x8a7c7e2d
   20338:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
   2033c:	441d      	add	r5, r3
   2033e:	f205 4332 	addw	r3, r5, #1074	; 0x432
   20342:	2b20      	cmp	r3, #32
   20344:	bfc6      	itte	gt
   20346:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   2034a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   2034e:	f1c3 0320 	rsble	r3, r3, #32
   20352:	f105 35ff 	add.w	r5, r5, #4294967295
   20356:	bfc5      	ittet	gt
   20358:	fa09 f303 	lslgt.w	r3, r9, r3
   2035c:	fa26 f000 	lsrgt.w	r0, r6, r0
   20360:	fa06 f003 	lslle.w	r0, r6, r3
   20364:	4318      	orrgt	r0, r3
   20366:	f7fc f9ad 	bl	1c6c4 <__aeabi_ui2d>
   2036a:	2301      	movs	r3, #1
   2036c:	4606      	mov	r6, r0
   2036e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   20372:	9310      	str	r3, [sp, #64]	; 0x40
   20374:	e770      	b.n	20258 <_dtoa_r+0x110>
   20376:	2301      	movs	r3, #1
   20378:	e7b5      	b.n	202e6 <_dtoa_r+0x19e>
   2037a:	900e      	str	r0, [sp, #56]	; 0x38
   2037c:	e7b4      	b.n	202e8 <_dtoa_r+0x1a0>
   2037e:	f1c9 0300 	rsb	r3, r9, #0
   20382:	eba8 0809 	sub.w	r8, r8, r9
   20386:	9306      	str	r3, [sp, #24]
   20388:	2300      	movs	r3, #0
   2038a:	930d      	str	r3, [sp, #52]	; 0x34
   2038c:	e7c1      	b.n	20312 <_dtoa_r+0x1ca>
   2038e:	2300      	movs	r3, #0
   20390:	9308      	str	r3, [sp, #32]
   20392:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20394:	2b00      	cmp	r3, #0
   20396:	f300 8085 	bgt.w	204a4 <_dtoa_r+0x35c>
   2039a:	f04f 0b01 	mov.w	fp, #1
   2039e:	465b      	mov	r3, fp
   203a0:	f8cd b004 	str.w	fp, [sp, #4]
   203a4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   203a8:	2200      	movs	r2, #0
   203aa:	6a66      	ldr	r6, [r4, #36]	; 0x24
   203ac:	6072      	str	r2, [r6, #4]
   203ae:	2204      	movs	r2, #4
   203b0:	f102 0014 	add.w	r0, r2, #20
   203b4:	6871      	ldr	r1, [r6, #4]
   203b6:	4298      	cmp	r0, r3
   203b8:	d97a      	bls.n	204b0 <_dtoa_r+0x368>
   203ba:	4620      	mov	r0, r4
   203bc:	f025 f96e 	bl	4569c <_Balloc>
   203c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   203c2:	6030      	str	r0, [r6, #0]
   203c4:	681b      	ldr	r3, [r3, #0]
   203c6:	9300      	str	r3, [sp, #0]
   203c8:	9b01      	ldr	r3, [sp, #4]
   203ca:	2b0e      	cmp	r3, #14
   203cc:	f200 80f5 	bhi.w	205ba <_dtoa_r+0x472>
   203d0:	2d00      	cmp	r5, #0
   203d2:	f000 80f2 	beq.w	205ba <_dtoa_r+0x472>
   203d6:	f1b9 0f00 	cmp.w	r9, #0
   203da:	dd7d      	ble.n	204d8 <_dtoa_r+0x390>
   203dc:	f009 030f 	and.w	r3, r9, #15
   203e0:	4a2e      	ldr	r2, [pc, #184]	; (2049c <_dtoa_r+0x354>)
   203e2:	f419 7f80 	tst.w	r9, #256	; 0x100
   203e6:	ea4f 1729 	mov.w	r7, r9, asr #4
   203ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   203ee:	ed93 7b00 	vldr	d7, [r3]
   203f2:	eeb0 8a47 	vmov.f32	s16, s14
   203f6:	eef0 8a67 	vmov.f32	s17, s15
   203fa:	d05d      	beq.n	204b8 <_dtoa_r+0x370>
   203fc:	4b28      	ldr	r3, [pc, #160]	; (204a0 <_dtoa_r+0x358>)
   203fe:	f007 070f 	and.w	r7, r7, #15
   20402:	2503      	movs	r5, #3
   20404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   20408:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   2040c:	f7fc fafe 	bl	1ca0c <__aeabi_ddiv>
   20410:	e9cd 0102 	strd	r0, r1, [sp, #8]
   20414:	4e22      	ldr	r6, [pc, #136]	; (204a0 <_dtoa_r+0x358>)
   20416:	2f00      	cmp	r7, #0
   20418:	d150      	bne.n	204bc <_dtoa_r+0x374>
   2041a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2041e:	ec53 2b18 	vmov	r2, r3, d8
   20422:	f7fc faf3 	bl	1ca0c <__aeabi_ddiv>
   20426:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2042a:	e06f      	b.n	2050c <_dtoa_r+0x3c4>
   2042c:	2301      	movs	r3, #1
   2042e:	e7af      	b.n	20390 <_dtoa_r+0x248>
   20430:	2300      	movs	r3, #0
   20432:	9308      	str	r3, [sp, #32]
   20434:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20436:	eb09 0b03 	add.w	fp, r9, r3
   2043a:	f10b 0301 	add.w	r3, fp, #1
   2043e:	2b01      	cmp	r3, #1
   20440:	9301      	str	r3, [sp, #4]
   20442:	bfb8      	it	lt
   20444:	2301      	movlt	r3, #1
   20446:	e7af      	b.n	203a8 <_dtoa_r+0x260>
   20448:	2301      	movs	r3, #1
   2044a:	e7f2      	b.n	20432 <_dtoa_r+0x2ea>
   2044c:	2501      	movs	r5, #1
   2044e:	2300      	movs	r3, #0
   20450:	9508      	str	r5, [sp, #32]
   20452:	9305      	str	r3, [sp, #20]
   20454:	f04f 3bff 	mov.w	fp, #4294967295
   20458:	2200      	movs	r2, #0
   2045a:	2312      	movs	r3, #18
   2045c:	f8cd b004 	str.w	fp, [sp, #4]
   20460:	9209      	str	r2, [sp, #36]	; 0x24
   20462:	e7a1      	b.n	203a8 <_dtoa_r+0x260>
   20464:	2301      	movs	r3, #1
   20466:	9308      	str	r3, [sp, #32]
   20468:	e7f4      	b.n	20454 <_dtoa_r+0x30c>
   2046a:	bf00      	nop
   2046c:	f3af 8000 	nop.w
   20470:	636f4361 	.word	0x636f4361
   20474:	3fd287a7 	.word	0x3fd287a7
   20478:	8b60c8b3 	.word	0x8b60c8b3
   2047c:	3fc68a28 	.word	0x3fc68a28
   20480:	509f79fb 	.word	0x509f79fb
   20484:	3fd34413 	.word	0x3fd34413
   20488:	7ff00000 	.word	0x7ff00000
   2048c:	0004f492 	.word	0x0004f492
   20490:	0004f489 	.word	0x0004f489
   20494:	0004ef59 	.word	0x0004ef59
   20498:	3ff80000 	.word	0x3ff80000
   2049c:	00046648 	.word	0x00046648
   204a0:	00046620 	.word	0x00046620
   204a4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   204a8:	465b      	mov	r3, fp
   204aa:	f8cd b004 	str.w	fp, [sp, #4]
   204ae:	e77b      	b.n	203a8 <_dtoa_r+0x260>
   204b0:	3101      	adds	r1, #1
   204b2:	0052      	lsls	r2, r2, #1
   204b4:	6071      	str	r1, [r6, #4]
   204b6:	e77b      	b.n	203b0 <_dtoa_r+0x268>
   204b8:	2502      	movs	r5, #2
   204ba:	e7ab      	b.n	20414 <_dtoa_r+0x2cc>
   204bc:	07f9      	lsls	r1, r7, #31
   204be:	d508      	bpl.n	204d2 <_dtoa_r+0x38a>
   204c0:	3501      	adds	r5, #1
   204c2:	ec51 0b18 	vmov	r0, r1, d8
   204c6:	e9d6 2300 	ldrd	r2, r3, [r6]
   204ca:	f7fc f975 	bl	1c7b8 <__aeabi_dmul>
   204ce:	ec41 0b18 	vmov	d8, r0, r1
   204d2:	107f      	asrs	r7, r7, #1
   204d4:	3608      	adds	r6, #8
   204d6:	e79e      	b.n	20416 <_dtoa_r+0x2ce>
   204d8:	f000 80ab 	beq.w	20632 <_dtoa_r+0x4ea>
   204dc:	f1c9 0600 	rsb	r6, r9, #0
   204e0:	4baa      	ldr	r3, [pc, #680]	; (2078c <_dtoa_r+0x644>)
   204e2:	4fab      	ldr	r7, [pc, #684]	; (20790 <_dtoa_r+0x648>)
   204e4:	2502      	movs	r5, #2
   204e6:	f006 020f 	and.w	r2, r6, #15
   204ea:	1136      	asrs	r6, r6, #4
   204ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   204f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   204f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   204f8:	f7fc f95e 	bl	1c7b8 <__aeabi_dmul>
   204fc:	2300      	movs	r3, #0
   204fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   20502:	2e00      	cmp	r6, #0
   20504:	f040 808a 	bne.w	2061c <_dtoa_r+0x4d4>
   20508:	2b00      	cmp	r3, #0
   2050a:	d18c      	bne.n	20426 <_dtoa_r+0x2de>
   2050c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2050e:	2b00      	cmp	r3, #0
   20510:	f000 8091 	beq.w	20636 <_dtoa_r+0x4ee>
   20514:	2200      	movs	r2, #0
   20516:	4b9f      	ldr	r3, [pc, #636]	; (20794 <_dtoa_r+0x64c>)
   20518:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   2051c:	4630      	mov	r0, r6
   2051e:	4639      	mov	r1, r7
   20520:	f7fc fbbc 	bl	1cc9c <__aeabi_dcmplt>
   20524:	2800      	cmp	r0, #0
   20526:	f000 8086 	beq.w	20636 <_dtoa_r+0x4ee>
   2052a:	9b01      	ldr	r3, [sp, #4]
   2052c:	2b00      	cmp	r3, #0
   2052e:	f000 8082 	beq.w	20636 <_dtoa_r+0x4ee>
   20532:	f1bb 0f00 	cmp.w	fp, #0
   20536:	dd3c      	ble.n	205b2 <_dtoa_r+0x46a>
   20538:	f109 33ff 	add.w	r3, r9, #4294967295
   2053c:	3501      	adds	r5, #1
   2053e:	2200      	movs	r2, #0
   20540:	4630      	mov	r0, r6
   20542:	9307      	str	r3, [sp, #28]
   20544:	4639      	mov	r1, r7
   20546:	4b94      	ldr	r3, [pc, #592]	; (20798 <_dtoa_r+0x650>)
   20548:	f7fc f936 	bl	1c7b8 <__aeabi_dmul>
   2054c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   20550:	e9cd 0102 	strd	r0, r1, [sp, #8]
   20554:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   20558:	4628      	mov	r0, r5
   2055a:	f7fc f8c3 	bl	1c6e4 <__aeabi_i2d>
   2055e:	4632      	mov	r2, r6
   20560:	463b      	mov	r3, r7
   20562:	f7fc f929 	bl	1c7b8 <__aeabi_dmul>
   20566:	4b8d      	ldr	r3, [pc, #564]	; (2079c <_dtoa_r+0x654>)
   20568:	2200      	movs	r2, #0
   2056a:	f7fb ff6f 	bl	1c44c <__adddf3>
   2056e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   20572:	e9cd 0102 	strd	r0, r1, [sp, #8]
   20576:	9303      	str	r3, [sp, #12]
   20578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2057a:	2b00      	cmp	r3, #0
   2057c:	d160      	bne.n	20640 <_dtoa_r+0x4f8>
   2057e:	2200      	movs	r2, #0
   20580:	4b87      	ldr	r3, [pc, #540]	; (207a0 <_dtoa_r+0x658>)
   20582:	4630      	mov	r0, r6
   20584:	4639      	mov	r1, r7
   20586:	f7fb ff5f 	bl	1c448 <__aeabi_dsub>
   2058a:	4606      	mov	r6, r0
   2058c:	460f      	mov	r7, r1
   2058e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20592:	f7fc fba1 	bl	1ccd8 <__aeabi_dcmpgt>
   20596:	2800      	cmp	r0, #0
   20598:	f040 8297 	bne.w	20aca <_dtoa_r+0x982>
   2059c:	4630      	mov	r0, r6
   2059e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   205a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   205a6:	4639      	mov	r1, r7
   205a8:	f7fc fb78 	bl	1cc9c <__aeabi_dcmplt>
   205ac:	2800      	cmp	r0, #0
   205ae:	f040 8289 	bne.w	20ac4 <_dtoa_r+0x97c>
   205b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   205b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   205ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   205bc:	2b00      	cmp	r3, #0
   205be:	f2c0 815b 	blt.w	20878 <_dtoa_r+0x730>
   205c2:	f1b9 0f0e 	cmp.w	r9, #14
   205c6:	f300 8157 	bgt.w	20878 <_dtoa_r+0x730>
   205ca:	4b70      	ldr	r3, [pc, #448]	; (2078c <_dtoa_r+0x644>)
   205cc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   205d0:	ed93 7b00 	vldr	d7, [r3]
   205d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   205d6:	2b00      	cmp	r3, #0
   205d8:	eeb0 8a47 	vmov.f32	s16, s14
   205dc:	eef0 8a67 	vmov.f32	s17, s15
   205e0:	f280 80e2 	bge.w	207a8 <_dtoa_r+0x660>
   205e4:	9b01      	ldr	r3, [sp, #4]
   205e6:	2b00      	cmp	r3, #0
   205e8:	f300 80de 	bgt.w	207a8 <_dtoa_r+0x660>
   205ec:	f040 826a 	bne.w	20ac4 <_dtoa_r+0x97c>
   205f0:	2200      	movs	r2, #0
   205f2:	4b6b      	ldr	r3, [pc, #428]	; (207a0 <_dtoa_r+0x658>)
   205f4:	ec51 0b17 	vmov	r0, r1, d7
   205f8:	f7fc f8de 	bl	1c7b8 <__aeabi_dmul>
   205fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20600:	f7fc fb60 	bl	1ccc4 <__aeabi_dcmpge>
   20604:	9e01      	ldr	r6, [sp, #4]
   20606:	4637      	mov	r7, r6
   20608:	2800      	cmp	r0, #0
   2060a:	f040 8240 	bne.w	20a8e <_dtoa_r+0x946>
   2060e:	9d00      	ldr	r5, [sp, #0]
   20610:	2331      	movs	r3, #49	; 0x31
   20612:	f109 0901 	add.w	r9, r9, #1
   20616:	f805 3b01 	strb.w	r3, [r5], #1
   2061a:	e23c      	b.n	20a96 <_dtoa_r+0x94e>
   2061c:	07f2      	lsls	r2, r6, #31
   2061e:	d505      	bpl.n	2062c <_dtoa_r+0x4e4>
   20620:	3501      	adds	r5, #1
   20622:	e9d7 2300 	ldrd	r2, r3, [r7]
   20626:	f7fc f8c7 	bl	1c7b8 <__aeabi_dmul>
   2062a:	2301      	movs	r3, #1
   2062c:	1076      	asrs	r6, r6, #1
   2062e:	3708      	adds	r7, #8
   20630:	e767      	b.n	20502 <_dtoa_r+0x3ba>
   20632:	2502      	movs	r5, #2
   20634:	e76a      	b.n	2050c <_dtoa_r+0x3c4>
   20636:	9b01      	ldr	r3, [sp, #4]
   20638:	f8cd 901c 	str.w	r9, [sp, #28]
   2063c:	930c      	str	r3, [sp, #48]	; 0x30
   2063e:	e789      	b.n	20554 <_dtoa_r+0x40c>
   20640:	9900      	ldr	r1, [sp, #0]
   20642:	980c      	ldr	r0, [sp, #48]	; 0x30
   20644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20646:	4401      	add	r1, r0
   20648:	4b50      	ldr	r3, [pc, #320]	; (2078c <_dtoa_r+0x644>)
   2064a:	ed9d 7b02 	vldr	d7, [sp, #8]
   2064e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20652:	9102      	str	r1, [sp, #8]
   20654:	9908      	ldr	r1, [sp, #32]
   20656:	eeb0 8a47 	vmov.f32	s16, s14
   2065a:	eef0 8a67 	vmov.f32	s17, s15
   2065e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   20662:	2900      	cmp	r1, #0
   20664:	d045      	beq.n	206f2 <_dtoa_r+0x5aa>
   20666:	2000      	movs	r0, #0
   20668:	494e      	ldr	r1, [pc, #312]	; (207a4 <_dtoa_r+0x65c>)
   2066a:	f7fc f9cf 	bl	1ca0c <__aeabi_ddiv>
   2066e:	ec53 2b18 	vmov	r2, r3, d8
   20672:	f7fb fee9 	bl	1c448 <__aeabi_dsub>
   20676:	9d00      	ldr	r5, [sp, #0]
   20678:	ec41 0b18 	vmov	d8, r0, r1
   2067c:	4639      	mov	r1, r7
   2067e:	4630      	mov	r0, r6
   20680:	f7fc fb34 	bl	1ccec <__aeabi_d2iz>
   20684:	900c      	str	r0, [sp, #48]	; 0x30
   20686:	f7fc f82d 	bl	1c6e4 <__aeabi_i2d>
   2068a:	4602      	mov	r2, r0
   2068c:	460b      	mov	r3, r1
   2068e:	4630      	mov	r0, r6
   20690:	4639      	mov	r1, r7
   20692:	f7fb fed9 	bl	1c448 <__aeabi_dsub>
   20696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20698:	4606      	mov	r6, r0
   2069a:	460f      	mov	r7, r1
   2069c:	3330      	adds	r3, #48	; 0x30
   2069e:	f805 3b01 	strb.w	r3, [r5], #1
   206a2:	ec53 2b18 	vmov	r2, r3, d8
   206a6:	f7fc faf9 	bl	1cc9c <__aeabi_dcmplt>
   206aa:	2800      	cmp	r0, #0
   206ac:	d164      	bne.n	20778 <_dtoa_r+0x630>
   206ae:	4632      	mov	r2, r6
   206b0:	463b      	mov	r3, r7
   206b2:	2000      	movs	r0, #0
   206b4:	4937      	ldr	r1, [pc, #220]	; (20794 <_dtoa_r+0x64c>)
   206b6:	f7fb fec7 	bl	1c448 <__aeabi_dsub>
   206ba:	ec53 2b18 	vmov	r2, r3, d8
   206be:	f7fc faed 	bl	1cc9c <__aeabi_dcmplt>
   206c2:	2800      	cmp	r0, #0
   206c4:	f040 80b8 	bne.w	20838 <_dtoa_r+0x6f0>
   206c8:	9b02      	ldr	r3, [sp, #8]
   206ca:	429d      	cmp	r5, r3
   206cc:	f43f af71 	beq.w	205b2 <_dtoa_r+0x46a>
   206d0:	2200      	movs	r2, #0
   206d2:	4b31      	ldr	r3, [pc, #196]	; (20798 <_dtoa_r+0x650>)
   206d4:	ec51 0b18 	vmov	r0, r1, d8
   206d8:	f7fc f86e 	bl	1c7b8 <__aeabi_dmul>
   206dc:	2200      	movs	r2, #0
   206de:	4b2e      	ldr	r3, [pc, #184]	; (20798 <_dtoa_r+0x650>)
   206e0:	ec41 0b18 	vmov	d8, r0, r1
   206e4:	4630      	mov	r0, r6
   206e6:	4639      	mov	r1, r7
   206e8:	f7fc f866 	bl	1c7b8 <__aeabi_dmul>
   206ec:	4606      	mov	r6, r0
   206ee:	460f      	mov	r7, r1
   206f0:	e7c4      	b.n	2067c <_dtoa_r+0x534>
   206f2:	ec51 0b17 	vmov	r0, r1, d7
   206f6:	f7fc f85f 	bl	1c7b8 <__aeabi_dmul>
   206fa:	9b02      	ldr	r3, [sp, #8]
   206fc:	9d00      	ldr	r5, [sp, #0]
   206fe:	930c      	str	r3, [sp, #48]	; 0x30
   20700:	ec41 0b18 	vmov	d8, r0, r1
   20704:	4639      	mov	r1, r7
   20706:	4630      	mov	r0, r6
   20708:	f7fc faf0 	bl	1ccec <__aeabi_d2iz>
   2070c:	9011      	str	r0, [sp, #68]	; 0x44
   2070e:	f7fb ffe9 	bl	1c6e4 <__aeabi_i2d>
   20712:	4602      	mov	r2, r0
   20714:	460b      	mov	r3, r1
   20716:	4630      	mov	r0, r6
   20718:	4639      	mov	r1, r7
   2071a:	f7fb fe95 	bl	1c448 <__aeabi_dsub>
   2071e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20720:	4606      	mov	r6, r0
   20722:	460f      	mov	r7, r1
   20724:	3330      	adds	r3, #48	; 0x30
   20726:	2200      	movs	r2, #0
   20728:	f805 3b01 	strb.w	r3, [r5], #1
   2072c:	9b02      	ldr	r3, [sp, #8]
   2072e:	429d      	cmp	r5, r3
   20730:	d125      	bne.n	2077e <_dtoa_r+0x636>
   20732:	4b1c      	ldr	r3, [pc, #112]	; (207a4 <_dtoa_r+0x65c>)
   20734:	ec51 0b18 	vmov	r0, r1, d8
   20738:	f7fb fe88 	bl	1c44c <__adddf3>
   2073c:	4602      	mov	r2, r0
   2073e:	460b      	mov	r3, r1
   20740:	4630      	mov	r0, r6
   20742:	4639      	mov	r1, r7
   20744:	f7fc fac8 	bl	1ccd8 <__aeabi_dcmpgt>
   20748:	2800      	cmp	r0, #0
   2074a:	d175      	bne.n	20838 <_dtoa_r+0x6f0>
   2074c:	2000      	movs	r0, #0
   2074e:	4915      	ldr	r1, [pc, #84]	; (207a4 <_dtoa_r+0x65c>)
   20750:	ec53 2b18 	vmov	r2, r3, d8
   20754:	f7fb fe78 	bl	1c448 <__aeabi_dsub>
   20758:	4602      	mov	r2, r0
   2075a:	460b      	mov	r3, r1
   2075c:	4630      	mov	r0, r6
   2075e:	4639      	mov	r1, r7
   20760:	f7fc fa9c 	bl	1cc9c <__aeabi_dcmplt>
   20764:	2800      	cmp	r0, #0
   20766:	f43f af24 	beq.w	205b2 <_dtoa_r+0x46a>
   2076a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2076c:	1e6b      	subs	r3, r5, #1
   2076e:	930c      	str	r3, [sp, #48]	; 0x30
   20770:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20774:	2b30      	cmp	r3, #48	; 0x30
   20776:	d0f8      	beq.n	2076a <_dtoa_r+0x622>
   20778:	f8dd 901c 	ldr.w	r9, [sp, #28]
   2077c:	e04a      	b.n	20814 <_dtoa_r+0x6cc>
   2077e:	4b06      	ldr	r3, [pc, #24]	; (20798 <_dtoa_r+0x650>)
   20780:	f7fc f81a 	bl	1c7b8 <__aeabi_dmul>
   20784:	4606      	mov	r6, r0
   20786:	460f      	mov	r7, r1
   20788:	e7bc      	b.n	20704 <_dtoa_r+0x5bc>
   2078a:	bf00      	nop
   2078c:	00046648 	.word	0x00046648
   20790:	00046620 	.word	0x00046620
   20794:	3ff00000 	.word	0x3ff00000
   20798:	40240000 	.word	0x40240000
   2079c:	401c0000 	.word	0x401c0000
   207a0:	40140000 	.word	0x40140000
   207a4:	3fe00000 	.word	0x3fe00000
   207a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   207ac:	9d00      	ldr	r5, [sp, #0]
   207ae:	4630      	mov	r0, r6
   207b0:	4639      	mov	r1, r7
   207b2:	ec53 2b18 	vmov	r2, r3, d8
   207b6:	f7fc f929 	bl	1ca0c <__aeabi_ddiv>
   207ba:	f7fc fa97 	bl	1ccec <__aeabi_d2iz>
   207be:	4680      	mov	r8, r0
   207c0:	f7fb ff90 	bl	1c6e4 <__aeabi_i2d>
   207c4:	ec53 2b18 	vmov	r2, r3, d8
   207c8:	f7fb fff6 	bl	1c7b8 <__aeabi_dmul>
   207cc:	4602      	mov	r2, r0
   207ce:	4630      	mov	r0, r6
   207d0:	f108 0630 	add.w	r6, r8, #48	; 0x30
   207d4:	460b      	mov	r3, r1
   207d6:	4639      	mov	r1, r7
   207d8:	f7fb fe36 	bl	1c448 <__aeabi_dsub>
   207dc:	f805 6b01 	strb.w	r6, [r5], #1
   207e0:	9e00      	ldr	r6, [sp, #0]
   207e2:	4602      	mov	r2, r0
   207e4:	9f01      	ldr	r7, [sp, #4]
   207e6:	460b      	mov	r3, r1
   207e8:	1bae      	subs	r6, r5, r6
   207ea:	42b7      	cmp	r7, r6
   207ec:	d137      	bne.n	2085e <_dtoa_r+0x716>
   207ee:	f7fb fe2d 	bl	1c44c <__adddf3>
   207f2:	4606      	mov	r6, r0
   207f4:	460f      	mov	r7, r1
   207f6:	ec53 2b18 	vmov	r2, r3, d8
   207fa:	f7fc fa6d 	bl	1ccd8 <__aeabi_dcmpgt>
   207fe:	b9c8      	cbnz	r0, 20834 <_dtoa_r+0x6ec>
   20800:	4630      	mov	r0, r6
   20802:	4639      	mov	r1, r7
   20804:	ec53 2b18 	vmov	r2, r3, d8
   20808:	f7fc fa3e 	bl	1cc88 <__aeabi_dcmpeq>
   2080c:	b110      	cbz	r0, 20814 <_dtoa_r+0x6cc>
   2080e:	f018 0f01 	tst.w	r8, #1
   20812:	d10f      	bne.n	20834 <_dtoa_r+0x6ec>
   20814:	4620      	mov	r0, r4
   20816:	4651      	mov	r1, sl
   20818:	f024 ff74 	bl	45704 <_Bfree>
   2081c:	2300      	movs	r3, #0
   2081e:	f109 0001 	add.w	r0, r9, #1
   20822:	702b      	strb	r3, [r5, #0]
   20824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20826:	6018      	str	r0, [r3, #0]
   20828:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2082a:	2b00      	cmp	r3, #0
   2082c:	f43f acd8 	beq.w	201e0 <_dtoa_r+0x98>
   20830:	601d      	str	r5, [r3, #0]
   20832:	e4d5      	b.n	201e0 <_dtoa_r+0x98>
   20834:	f8cd 901c 	str.w	r9, [sp, #28]
   20838:	462b      	mov	r3, r5
   2083a:	461d      	mov	r5, r3
   2083c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20840:	2a39      	cmp	r2, #57	; 0x39
   20842:	d108      	bne.n	20856 <_dtoa_r+0x70e>
   20844:	9a00      	ldr	r2, [sp, #0]
   20846:	429a      	cmp	r2, r3
   20848:	d1f7      	bne.n	2083a <_dtoa_r+0x6f2>
   2084a:	9a07      	ldr	r2, [sp, #28]
   2084c:	9900      	ldr	r1, [sp, #0]
   2084e:	3201      	adds	r2, #1
   20850:	9207      	str	r2, [sp, #28]
   20852:	2230      	movs	r2, #48	; 0x30
   20854:	700a      	strb	r2, [r1, #0]
   20856:	781a      	ldrb	r2, [r3, #0]
   20858:	3201      	adds	r2, #1
   2085a:	701a      	strb	r2, [r3, #0]
   2085c:	e78c      	b.n	20778 <_dtoa_r+0x630>
   2085e:	2200      	movs	r2, #0
   20860:	4b9c      	ldr	r3, [pc, #624]	; (20ad4 <_dtoa_r+0x98c>)
   20862:	f7fb ffa9 	bl	1c7b8 <__aeabi_dmul>
   20866:	2200      	movs	r2, #0
   20868:	2300      	movs	r3, #0
   2086a:	4606      	mov	r6, r0
   2086c:	460f      	mov	r7, r1
   2086e:	f7fc fa0b 	bl	1cc88 <__aeabi_dcmpeq>
   20872:	2800      	cmp	r0, #0
   20874:	d09b      	beq.n	207ae <_dtoa_r+0x666>
   20876:	e7cd      	b.n	20814 <_dtoa_r+0x6cc>
   20878:	9a08      	ldr	r2, [sp, #32]
   2087a:	2a00      	cmp	r2, #0
   2087c:	f000 80c4 	beq.w	20a08 <_dtoa_r+0x8c0>
   20880:	9a05      	ldr	r2, [sp, #20]
   20882:	2a01      	cmp	r2, #1
   20884:	f300 80a9 	bgt.w	209da <_dtoa_r+0x892>
   20888:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2088a:	2a00      	cmp	r2, #0
   2088c:	f000 80a1 	beq.w	209d2 <_dtoa_r+0x88a>
   20890:	f203 4333 	addw	r3, r3, #1075	; 0x433
   20894:	9e06      	ldr	r6, [sp, #24]
   20896:	4645      	mov	r5, r8
   20898:	9a04      	ldr	r2, [sp, #16]
   2089a:	2101      	movs	r1, #1
   2089c:	4620      	mov	r0, r4
   2089e:	4498      	add	r8, r3
   208a0:	441a      	add	r2, r3
   208a2:	9204      	str	r2, [sp, #16]
   208a4:	f025 f812 	bl	458cc <__i2b>
   208a8:	4607      	mov	r7, r0
   208aa:	2d00      	cmp	r5, #0
   208ac:	dd0b      	ble.n	208c6 <_dtoa_r+0x77e>
   208ae:	9b04      	ldr	r3, [sp, #16]
   208b0:	2b00      	cmp	r3, #0
   208b2:	dd08      	ble.n	208c6 <_dtoa_r+0x77e>
   208b4:	42ab      	cmp	r3, r5
   208b6:	9a04      	ldr	r2, [sp, #16]
   208b8:	bfa8      	it	ge
   208ba:	462b      	movge	r3, r5
   208bc:	eba8 0803 	sub.w	r8, r8, r3
   208c0:	1aed      	subs	r5, r5, r3
   208c2:	1ad3      	subs	r3, r2, r3
   208c4:	9304      	str	r3, [sp, #16]
   208c6:	9b06      	ldr	r3, [sp, #24]
   208c8:	b1fb      	cbz	r3, 2090a <_dtoa_r+0x7c2>
   208ca:	9b08      	ldr	r3, [sp, #32]
   208cc:	2b00      	cmp	r3, #0
   208ce:	f000 809f 	beq.w	20a10 <_dtoa_r+0x8c8>
   208d2:	2e00      	cmp	r6, #0
   208d4:	dd11      	ble.n	208fa <_dtoa_r+0x7b2>
   208d6:	4639      	mov	r1, r7
   208d8:	4632      	mov	r2, r6
   208da:	4620      	mov	r0, r4
   208dc:	f01f ffee 	bl	408bc <__pow5mult>
   208e0:	4652      	mov	r2, sl
   208e2:	4601      	mov	r1, r0
   208e4:	4607      	mov	r7, r0
   208e6:	4620      	mov	r0, r4
   208e8:	f024 fff9 	bl	458de <__multiply>
   208ec:	4651      	mov	r1, sl
   208ee:	9007      	str	r0, [sp, #28]
   208f0:	4620      	mov	r0, r4
   208f2:	f024 ff07 	bl	45704 <_Bfree>
   208f6:	9b07      	ldr	r3, [sp, #28]
   208f8:	469a      	mov	sl, r3
   208fa:	9b06      	ldr	r3, [sp, #24]
   208fc:	1b9a      	subs	r2, r3, r6
   208fe:	d004      	beq.n	2090a <_dtoa_r+0x7c2>
   20900:	4651      	mov	r1, sl
   20902:	4620      	mov	r0, r4
   20904:	f01f ffda 	bl	408bc <__pow5mult>
   20908:	4682      	mov	sl, r0
   2090a:	2101      	movs	r1, #1
   2090c:	4620      	mov	r0, r4
   2090e:	f024 ffdd 	bl	458cc <__i2b>
   20912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20914:	4606      	mov	r6, r0
   20916:	2b00      	cmp	r3, #0
   20918:	dd7c      	ble.n	20a14 <_dtoa_r+0x8cc>
   2091a:	461a      	mov	r2, r3
   2091c:	4601      	mov	r1, r0
   2091e:	4620      	mov	r0, r4
   20920:	f01f ffcc 	bl	408bc <__pow5mult>
   20924:	9b05      	ldr	r3, [sp, #20]
   20926:	4606      	mov	r6, r0
   20928:	2b01      	cmp	r3, #1
   2092a:	dd76      	ble.n	20a1a <_dtoa_r+0x8d2>
   2092c:	2300      	movs	r3, #0
   2092e:	9306      	str	r3, [sp, #24]
   20930:	6933      	ldr	r3, [r6, #16]
   20932:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   20936:	6918      	ldr	r0, [r3, #16]
   20938:	f024 ff78 	bl	4582c <__hi0bits>
   2093c:	f1c0 0020 	rsb	r0, r0, #32
   20940:	9b04      	ldr	r3, [sp, #16]
   20942:	4418      	add	r0, r3
   20944:	f010 001f 	ands.w	r0, r0, #31
   20948:	f000 8086 	beq.w	20a58 <_dtoa_r+0x910>
   2094c:	f1c0 0320 	rsb	r3, r0, #32
   20950:	2b04      	cmp	r3, #4
   20952:	dd7f      	ble.n	20a54 <_dtoa_r+0x90c>
   20954:	f1c0 001c 	rsb	r0, r0, #28
   20958:	9b04      	ldr	r3, [sp, #16]
   2095a:	4480      	add	r8, r0
   2095c:	4405      	add	r5, r0
   2095e:	4403      	add	r3, r0
   20960:	9304      	str	r3, [sp, #16]
   20962:	f1b8 0f00 	cmp.w	r8, #0
   20966:	dd05      	ble.n	20974 <_dtoa_r+0x82c>
   20968:	4651      	mov	r1, sl
   2096a:	4642      	mov	r2, r8
   2096c:	4620      	mov	r0, r4
   2096e:	f025 f851 	bl	45a14 <__lshift>
   20972:	4682      	mov	sl, r0
   20974:	9b04      	ldr	r3, [sp, #16]
   20976:	2b00      	cmp	r3, #0
   20978:	dd05      	ble.n	20986 <_dtoa_r+0x83e>
   2097a:	4631      	mov	r1, r6
   2097c:	461a      	mov	r2, r3
   2097e:	4620      	mov	r0, r4
   20980:	f025 f848 	bl	45a14 <__lshift>
   20984:	4606      	mov	r6, r0
   20986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20988:	2b00      	cmp	r3, #0
   2098a:	d067      	beq.n	20a5c <_dtoa_r+0x914>
   2098c:	4631      	mov	r1, r6
   2098e:	4650      	mov	r0, sl
   20990:	f025 f89f 	bl	45ad2 <__mcmp>
   20994:	2800      	cmp	r0, #0
   20996:	da61      	bge.n	20a5c <_dtoa_r+0x914>
   20998:	2300      	movs	r3, #0
   2099a:	4651      	mov	r1, sl
   2099c:	220a      	movs	r2, #10
   2099e:	4620      	mov	r0, r4
   209a0:	f024 fec7 	bl	45732 <__multadd>
   209a4:	9b08      	ldr	r3, [sp, #32]
   209a6:	f109 39ff 	add.w	r9, r9, #4294967295
   209aa:	4682      	mov	sl, r0
   209ac:	2b00      	cmp	r3, #0
   209ae:	f000 8187 	beq.w	20cc0 <_dtoa_r+0xb78>
   209b2:	4639      	mov	r1, r7
   209b4:	2300      	movs	r3, #0
   209b6:	220a      	movs	r2, #10
   209b8:	4620      	mov	r0, r4
   209ba:	f024 feba 	bl	45732 <__multadd>
   209be:	f1bb 0f00 	cmp.w	fp, #0
   209c2:	4607      	mov	r7, r0
   209c4:	f300 808e 	bgt.w	20ae4 <_dtoa_r+0x99c>
   209c8:	9b05      	ldr	r3, [sp, #20]
   209ca:	2b02      	cmp	r3, #2
   209cc:	f340 808a 	ble.w	20ae4 <_dtoa_r+0x99c>
   209d0:	e04c      	b.n	20a6c <_dtoa_r+0x924>
   209d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   209d4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   209d8:	e75c      	b.n	20894 <_dtoa_r+0x74c>
   209da:	9b01      	ldr	r3, [sp, #4]
   209dc:	1e5e      	subs	r6, r3, #1
   209de:	9b06      	ldr	r3, [sp, #24]
   209e0:	42b3      	cmp	r3, r6
   209e2:	bfb7      	itett	lt
   209e4:	9b06      	ldrlt	r3, [sp, #24]
   209e6:	1b9e      	subge	r6, r3, r6
   209e8:	9606      	strlt	r6, [sp, #24]
   209ea:	1af2      	sublt	r2, r6, r3
   209ec:	bfbf      	itttt	lt
   209ee:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
   209f0:	2600      	movlt	r6, #0
   209f2:	189b      	addlt	r3, r3, r2
   209f4:	930d      	strlt	r3, [sp, #52]	; 0x34
   209f6:	9b01      	ldr	r3, [sp, #4]
   209f8:	2b00      	cmp	r3, #0
   209fa:	bfb5      	itete	lt
   209fc:	eba8 0503 	sublt.w	r5, r8, r3
   20a00:	4645      	movge	r5, r8
   20a02:	2300      	movlt	r3, #0
   20a04:	9b01      	ldrge	r3, [sp, #4]
   20a06:	e747      	b.n	20898 <_dtoa_r+0x750>
   20a08:	9e06      	ldr	r6, [sp, #24]
   20a0a:	4645      	mov	r5, r8
   20a0c:	9f08      	ldr	r7, [sp, #32]
   20a0e:	e74c      	b.n	208aa <_dtoa_r+0x762>
   20a10:	9a06      	ldr	r2, [sp, #24]
   20a12:	e775      	b.n	20900 <_dtoa_r+0x7b8>
   20a14:	9b05      	ldr	r3, [sp, #20]
   20a16:	2b01      	cmp	r3, #1
   20a18:	dc18      	bgt.n	20a4c <_dtoa_r+0x904>
   20a1a:	9b02      	ldr	r3, [sp, #8]
   20a1c:	b9b3      	cbnz	r3, 20a4c <_dtoa_r+0x904>
   20a1e:	9b03      	ldr	r3, [sp, #12]
   20a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
   20a24:	b9a3      	cbnz	r3, 20a50 <_dtoa_r+0x908>
   20a26:	9b03      	ldr	r3, [sp, #12]
   20a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   20a2c:	0d1b      	lsrs	r3, r3, #20
   20a2e:	051b      	lsls	r3, r3, #20
   20a30:	b12b      	cbz	r3, 20a3e <_dtoa_r+0x8f6>
   20a32:	9b04      	ldr	r3, [sp, #16]
   20a34:	f108 0801 	add.w	r8, r8, #1
   20a38:	3301      	adds	r3, #1
   20a3a:	9304      	str	r3, [sp, #16]
   20a3c:	2301      	movs	r3, #1
   20a3e:	9306      	str	r3, [sp, #24]
   20a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20a42:	2b00      	cmp	r3, #0
   20a44:	f47f af74 	bne.w	20930 <_dtoa_r+0x7e8>
   20a48:	2001      	movs	r0, #1
   20a4a:	e779      	b.n	20940 <_dtoa_r+0x7f8>
   20a4c:	2300      	movs	r3, #0
   20a4e:	e7f6      	b.n	20a3e <_dtoa_r+0x8f6>
   20a50:	9b02      	ldr	r3, [sp, #8]
   20a52:	e7f4      	b.n	20a3e <_dtoa_r+0x8f6>
   20a54:	d085      	beq.n	20962 <_dtoa_r+0x81a>
   20a56:	4618      	mov	r0, r3
   20a58:	301c      	adds	r0, #28
   20a5a:	e77d      	b.n	20958 <_dtoa_r+0x810>
   20a5c:	9b01      	ldr	r3, [sp, #4]
   20a5e:	2b00      	cmp	r3, #0
   20a60:	dc3a      	bgt.n	20ad8 <_dtoa_r+0x990>
   20a62:	9b05      	ldr	r3, [sp, #20]
   20a64:	2b02      	cmp	r3, #2
   20a66:	dd37      	ble.n	20ad8 <_dtoa_r+0x990>
   20a68:	f8dd b004 	ldr.w	fp, [sp, #4]
   20a6c:	f1bb 0f00 	cmp.w	fp, #0
   20a70:	d10d      	bne.n	20a8e <_dtoa_r+0x946>
   20a72:	4631      	mov	r1, r6
   20a74:	465b      	mov	r3, fp
   20a76:	2205      	movs	r2, #5
   20a78:	4620      	mov	r0, r4
   20a7a:	f024 fe5a 	bl	45732 <__multadd>
   20a7e:	4601      	mov	r1, r0
   20a80:	4606      	mov	r6, r0
   20a82:	4650      	mov	r0, sl
   20a84:	f025 f825 	bl	45ad2 <__mcmp>
   20a88:	2800      	cmp	r0, #0
   20a8a:	f73f adc0 	bgt.w	2060e <_dtoa_r+0x4c6>
   20a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20a90:	9d00      	ldr	r5, [sp, #0]
   20a92:	ea6f 0903 	mvn.w	r9, r3
   20a96:	f04f 0800 	mov.w	r8, #0
   20a9a:	4631      	mov	r1, r6
   20a9c:	4620      	mov	r0, r4
   20a9e:	f024 fe31 	bl	45704 <_Bfree>
   20aa2:	2f00      	cmp	r7, #0
   20aa4:	f43f aeb6 	beq.w	20814 <_dtoa_r+0x6cc>
   20aa8:	f1b8 0f00 	cmp.w	r8, #0
   20aac:	d005      	beq.n	20aba <_dtoa_r+0x972>
   20aae:	45b8      	cmp	r8, r7
   20ab0:	d003      	beq.n	20aba <_dtoa_r+0x972>
   20ab2:	4641      	mov	r1, r8
   20ab4:	4620      	mov	r0, r4
   20ab6:	f024 fe25 	bl	45704 <_Bfree>
   20aba:	4639      	mov	r1, r7
   20abc:	4620      	mov	r0, r4
   20abe:	f024 fe21 	bl	45704 <_Bfree>
   20ac2:	e6a7      	b.n	20814 <_dtoa_r+0x6cc>
   20ac4:	2600      	movs	r6, #0
   20ac6:	4637      	mov	r7, r6
   20ac8:	e7e1      	b.n	20a8e <_dtoa_r+0x946>
   20aca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   20acc:	f8dd 901c 	ldr.w	r9, [sp, #28]
   20ad0:	4637      	mov	r7, r6
   20ad2:	e59c      	b.n	2060e <_dtoa_r+0x4c6>
   20ad4:	40240000 	.word	0x40240000
   20ad8:	9b08      	ldr	r3, [sp, #32]
   20ada:	f8dd b004 	ldr.w	fp, [sp, #4]
   20ade:	2b00      	cmp	r3, #0
   20ae0:	f000 80f5 	beq.w	20cce <_dtoa_r+0xb86>
   20ae4:	2d00      	cmp	r5, #0
   20ae6:	dd05      	ble.n	20af4 <_dtoa_r+0x9ac>
   20ae8:	4639      	mov	r1, r7
   20aea:	462a      	mov	r2, r5
   20aec:	4620      	mov	r0, r4
   20aee:	f024 ff91 	bl	45a14 <__lshift>
   20af2:	4607      	mov	r7, r0
   20af4:	9b06      	ldr	r3, [sp, #24]
   20af6:	2b00      	cmp	r3, #0
   20af8:	d055      	beq.n	20ba6 <_dtoa_r+0xa5e>
   20afa:	6879      	ldr	r1, [r7, #4]
   20afc:	4620      	mov	r0, r4
   20afe:	f024 fdcd 	bl	4569c <_Balloc>
   20b02:	693a      	ldr	r2, [r7, #16]
   20b04:	4605      	mov	r5, r0
   20b06:	f107 010c 	add.w	r1, r7, #12
   20b0a:	3202      	adds	r2, #2
   20b0c:	300c      	adds	r0, #12
   20b0e:	0092      	lsls	r2, r2, #2
   20b10:	f024 f8e9 	bl	44ce6 <memcpy>
   20b14:	2201      	movs	r2, #1
   20b16:	4629      	mov	r1, r5
   20b18:	4620      	mov	r0, r4
   20b1a:	f024 ff7b 	bl	45a14 <__lshift>
   20b1e:	9b00      	ldr	r3, [sp, #0]
   20b20:	46b8      	mov	r8, r7
   20b22:	4607      	mov	r7, r0
   20b24:	3301      	adds	r3, #1
   20b26:	9301      	str	r3, [sp, #4]
   20b28:	9b00      	ldr	r3, [sp, #0]
   20b2a:	445b      	add	r3, fp
   20b2c:	9307      	str	r3, [sp, #28]
   20b2e:	9b02      	ldr	r3, [sp, #8]
   20b30:	f003 0301 	and.w	r3, r3, #1
   20b34:	9306      	str	r3, [sp, #24]
   20b36:	9b01      	ldr	r3, [sp, #4]
   20b38:	4631      	mov	r1, r6
   20b3a:	4650      	mov	r0, sl
   20b3c:	f103 3bff 	add.w	fp, r3, #4294967295
   20b40:	f024 fb6d 	bl	4521e <quorem>
   20b44:	4603      	mov	r3, r0
   20b46:	4641      	mov	r1, r8
   20b48:	9002      	str	r0, [sp, #8]
   20b4a:	4650      	mov	r0, sl
   20b4c:	3330      	adds	r3, #48	; 0x30
   20b4e:	9308      	str	r3, [sp, #32]
   20b50:	f024 ffbf 	bl	45ad2 <__mcmp>
   20b54:	463a      	mov	r2, r7
   20b56:	9004      	str	r0, [sp, #16]
   20b58:	4631      	mov	r1, r6
   20b5a:	4620      	mov	r0, r4
   20b5c:	f024 ffd5 	bl	45b0a <__mdiff>
   20b60:	68c2      	ldr	r2, [r0, #12]
   20b62:	4605      	mov	r5, r0
   20b64:	9b08      	ldr	r3, [sp, #32]
   20b66:	bb02      	cbnz	r2, 20baa <_dtoa_r+0xa62>
   20b68:	4601      	mov	r1, r0
   20b6a:	4650      	mov	r0, sl
   20b6c:	f024 ffb1 	bl	45ad2 <__mcmp>
   20b70:	9b08      	ldr	r3, [sp, #32]
   20b72:	4602      	mov	r2, r0
   20b74:	4629      	mov	r1, r5
   20b76:	4620      	mov	r0, r4
   20b78:	e9cd 3208 	strd	r3, r2, [sp, #32]
   20b7c:	f024 fdc2 	bl	45704 <_Bfree>
   20b80:	9b05      	ldr	r3, [sp, #20]
   20b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20b84:	9d01      	ldr	r5, [sp, #4]
   20b86:	ea43 0102 	orr.w	r1, r3, r2
   20b8a:	9b06      	ldr	r3, [sp, #24]
   20b8c:	430b      	orrs	r3, r1
   20b8e:	9b08      	ldr	r3, [sp, #32]
   20b90:	d10d      	bne.n	20bae <_dtoa_r+0xa66>
   20b92:	2b39      	cmp	r3, #57	; 0x39
   20b94:	d027      	beq.n	20be6 <_dtoa_r+0xa9e>
   20b96:	9a04      	ldr	r2, [sp, #16]
   20b98:	2a00      	cmp	r2, #0
   20b9a:	dd01      	ble.n	20ba0 <_dtoa_r+0xa58>
   20b9c:	9b02      	ldr	r3, [sp, #8]
   20b9e:	3331      	adds	r3, #49	; 0x31
   20ba0:	f88b 3000 	strb.w	r3, [fp]
   20ba4:	e779      	b.n	20a9a <_dtoa_r+0x952>
   20ba6:	4638      	mov	r0, r7
   20ba8:	e7b9      	b.n	20b1e <_dtoa_r+0x9d6>
   20baa:	2201      	movs	r2, #1
   20bac:	e7e2      	b.n	20b74 <_dtoa_r+0xa2c>
   20bae:	9904      	ldr	r1, [sp, #16]
   20bb0:	2900      	cmp	r1, #0
   20bb2:	db04      	blt.n	20bbe <_dtoa_r+0xa76>
   20bb4:	9805      	ldr	r0, [sp, #20]
   20bb6:	4301      	orrs	r1, r0
   20bb8:	9806      	ldr	r0, [sp, #24]
   20bba:	4301      	orrs	r1, r0
   20bbc:	d120      	bne.n	20c00 <_dtoa_r+0xab8>
   20bbe:	2a00      	cmp	r2, #0
   20bc0:	ddee      	ble.n	20ba0 <_dtoa_r+0xa58>
   20bc2:	4651      	mov	r1, sl
   20bc4:	2201      	movs	r2, #1
   20bc6:	4620      	mov	r0, r4
   20bc8:	9301      	str	r3, [sp, #4]
   20bca:	f024 ff23 	bl	45a14 <__lshift>
   20bce:	4631      	mov	r1, r6
   20bd0:	4682      	mov	sl, r0
   20bd2:	f024 ff7e 	bl	45ad2 <__mcmp>
   20bd6:	2800      	cmp	r0, #0
   20bd8:	9b01      	ldr	r3, [sp, #4]
   20bda:	dc02      	bgt.n	20be2 <_dtoa_r+0xa9a>
   20bdc:	d1e0      	bne.n	20ba0 <_dtoa_r+0xa58>
   20bde:	07da      	lsls	r2, r3, #31
   20be0:	d5de      	bpl.n	20ba0 <_dtoa_r+0xa58>
   20be2:	2b39      	cmp	r3, #57	; 0x39
   20be4:	d1da      	bne.n	20b9c <_dtoa_r+0xa54>
   20be6:	2339      	movs	r3, #57	; 0x39
   20be8:	f88b 3000 	strb.w	r3, [fp]
   20bec:	462b      	mov	r3, r5
   20bee:	461d      	mov	r5, r3
   20bf0:	3b01      	subs	r3, #1
   20bf2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   20bf6:	2a39      	cmp	r2, #57	; 0x39
   20bf8:	d050      	beq.n	20c9c <_dtoa_r+0xb54>
   20bfa:	3201      	adds	r2, #1
   20bfc:	701a      	strb	r2, [r3, #0]
   20bfe:	e74c      	b.n	20a9a <_dtoa_r+0x952>
   20c00:	2a00      	cmp	r2, #0
   20c02:	dd03      	ble.n	20c0c <_dtoa_r+0xac4>
   20c04:	2b39      	cmp	r3, #57	; 0x39
   20c06:	d0ee      	beq.n	20be6 <_dtoa_r+0xa9e>
   20c08:	3301      	adds	r3, #1
   20c0a:	e7c9      	b.n	20ba0 <_dtoa_r+0xa58>
   20c0c:	9a01      	ldr	r2, [sp, #4]
   20c0e:	9907      	ldr	r1, [sp, #28]
   20c10:	f802 3c01 	strb.w	r3, [r2, #-1]
   20c14:	428a      	cmp	r2, r1
   20c16:	d02a      	beq.n	20c6e <_dtoa_r+0xb26>
   20c18:	4651      	mov	r1, sl
   20c1a:	2300      	movs	r3, #0
   20c1c:	220a      	movs	r2, #10
   20c1e:	4620      	mov	r0, r4
   20c20:	f024 fd87 	bl	45732 <__multadd>
   20c24:	45b8      	cmp	r8, r7
   20c26:	4682      	mov	sl, r0
   20c28:	f04f 0300 	mov.w	r3, #0
   20c2c:	f04f 020a 	mov.w	r2, #10
   20c30:	4641      	mov	r1, r8
   20c32:	4620      	mov	r0, r4
   20c34:	d107      	bne.n	20c46 <_dtoa_r+0xafe>
   20c36:	f024 fd7c 	bl	45732 <__multadd>
   20c3a:	4680      	mov	r8, r0
   20c3c:	4607      	mov	r7, r0
   20c3e:	9b01      	ldr	r3, [sp, #4]
   20c40:	3301      	adds	r3, #1
   20c42:	9301      	str	r3, [sp, #4]
   20c44:	e777      	b.n	20b36 <_dtoa_r+0x9ee>
   20c46:	f024 fd74 	bl	45732 <__multadd>
   20c4a:	4639      	mov	r1, r7
   20c4c:	4680      	mov	r8, r0
   20c4e:	2300      	movs	r3, #0
   20c50:	220a      	movs	r2, #10
   20c52:	4620      	mov	r0, r4
   20c54:	f024 fd6d 	bl	45732 <__multadd>
   20c58:	4607      	mov	r7, r0
   20c5a:	e7f0      	b.n	20c3e <_dtoa_r+0xaf6>
   20c5c:	f1bb 0f00 	cmp.w	fp, #0
   20c60:	9a00      	ldr	r2, [sp, #0]
   20c62:	f04f 0800 	mov.w	r8, #0
   20c66:	bfcc      	ite	gt
   20c68:	465d      	movgt	r5, fp
   20c6a:	2501      	movle	r5, #1
   20c6c:	4415      	add	r5, r2
   20c6e:	4651      	mov	r1, sl
   20c70:	2201      	movs	r2, #1
   20c72:	4620      	mov	r0, r4
   20c74:	9301      	str	r3, [sp, #4]
   20c76:	f024 fecd 	bl	45a14 <__lshift>
   20c7a:	4631      	mov	r1, r6
   20c7c:	4682      	mov	sl, r0
   20c7e:	f024 ff28 	bl	45ad2 <__mcmp>
   20c82:	2800      	cmp	r0, #0
   20c84:	dcb2      	bgt.n	20bec <_dtoa_r+0xaa4>
   20c86:	d102      	bne.n	20c8e <_dtoa_r+0xb46>
   20c88:	9b01      	ldr	r3, [sp, #4]
   20c8a:	07db      	lsls	r3, r3, #31
   20c8c:	d4ae      	bmi.n	20bec <_dtoa_r+0xaa4>
   20c8e:	462b      	mov	r3, r5
   20c90:	461d      	mov	r5, r3
   20c92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20c96:	2a30      	cmp	r2, #48	; 0x30
   20c98:	d0fa      	beq.n	20c90 <_dtoa_r+0xb48>
   20c9a:	e6fe      	b.n	20a9a <_dtoa_r+0x952>
   20c9c:	9a00      	ldr	r2, [sp, #0]
   20c9e:	429a      	cmp	r2, r3
   20ca0:	d1a5      	bne.n	20bee <_dtoa_r+0xaa6>
   20ca2:	2331      	movs	r3, #49	; 0x31
   20ca4:	f109 0901 	add.w	r9, r9, #1
   20ca8:	7013      	strb	r3, [r2, #0]
   20caa:	e6f6      	b.n	20a9a <_dtoa_r+0x952>
   20cac:	4b12      	ldr	r3, [pc, #72]	; (20cf8 <_dtoa_r+0xbb0>)
   20cae:	f7ff bab8 	b.w	20222 <_dtoa_r+0xda>
   20cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   20cb4:	2b00      	cmp	r3, #0
   20cb6:	f47f aa8e 	bne.w	201d6 <_dtoa_r+0x8e>
   20cba:	4b10      	ldr	r3, [pc, #64]	; (20cfc <_dtoa_r+0xbb4>)
   20cbc:	f7ff bab1 	b.w	20222 <_dtoa_r+0xda>
   20cc0:	f1bb 0f00 	cmp.w	fp, #0
   20cc4:	dc03      	bgt.n	20cce <_dtoa_r+0xb86>
   20cc6:	9b05      	ldr	r3, [sp, #20]
   20cc8:	2b02      	cmp	r3, #2
   20cca:	f73f aecf 	bgt.w	20a6c <_dtoa_r+0x924>
   20cce:	9d00      	ldr	r5, [sp, #0]
   20cd0:	4631      	mov	r1, r6
   20cd2:	4650      	mov	r0, sl
   20cd4:	f024 faa3 	bl	4521e <quorem>
   20cd8:	9a00      	ldr	r2, [sp, #0]
   20cda:	f100 0330 	add.w	r3, r0, #48	; 0x30
   20cde:	f805 3b01 	strb.w	r3, [r5], #1
   20ce2:	1aaa      	subs	r2, r5, r2
   20ce4:	4593      	cmp	fp, r2
   20ce6:	ddb9      	ble.n	20c5c <_dtoa_r+0xb14>
   20ce8:	4651      	mov	r1, sl
   20cea:	2300      	movs	r3, #0
   20cec:	220a      	movs	r2, #10
   20cee:	4620      	mov	r0, r4
   20cf0:	f024 fd1f 	bl	45732 <__multadd>
   20cf4:	4682      	mov	sl, r0
   20cf6:	e7eb      	b.n	20cd0 <_dtoa_r+0xb88>
   20cf8:	0004ef58 	.word	0x0004ef58
   20cfc:	0004f489 	.word	0x0004f489

00020d00 <nan>:
   20d00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 20d08 <nan+0x8>
   20d04:	4770      	bx	lr
   20d06:	bf00      	nop
   20d08:	00000000 	.word	0x00000000
   20d0c:	7ff80000 	.word	0x7ff80000

00020d10 <shutdown_modem>:
static bool data_send_enabled(void);
static void connection_evt_handler(const struct cloud_event *const evt);
static void no_sim_go_offline(struct k_work *work);

static void shutdown_modem(void)
{
   20d10:	b538      	push	{r3, r4, r5, lr}
   20d12:	4b0e      	ldr	r3, [pc, #56]	; (20d4c <shutdown_modem+0x3c>)
   20d14:	4c0e      	ldr	r4, [pc, #56]	; (20d50 <shutdown_modem+0x40>)
#if defined(CONFIG_LTE_LINK_CONTROL)
	/* Turn off and shutdown modem */
	LOG_ERR("LTE link disconnect");
   20d16:	490f      	ldr	r1, [pc, #60]	; (20d54 <shutdown_modem+0x44>)
   20d18:	1ae4      	subs	r4, r4, r3
   20d1a:	08e4      	lsrs	r4, r4, #3
   20d1c:	01a4      	lsls	r4, r4, #6
   20d1e:	f044 0501 	orr.w	r5, r4, #1
   20d22:	4628      	mov	r0, r5
   20d24:	f020 fd7c 	bl	41820 <log_string_sync>
	int err = lte_lc_power_off();
   20d28:	f00a fda8 	bl	2b87c <lte_lc_power_off>

	if (err) {
   20d2c:	4602      	mov	r2, r0
   20d2e:	b118      	cbz	r0, 20d38 <shutdown_modem+0x28>
		LOG_ERR("lte_lc_power_off failed: %d", err);
   20d30:	4628      	mov	r0, r5
   20d32:	4909      	ldr	r1, [pc, #36]	; (20d58 <shutdown_modem+0x48>)
   20d34:	f020 fd74 	bl	41820 <log_string_sync>
	}
#endif /* CONFIG_LTE_LINK_CONTROL */
#if defined(CONFIG_BSD_LIBRARY)
	LOG_ERR("Shutdown modem");
   20d38:	f044 0001 	orr.w	r0, r4, #1
   20d3c:	4907      	ldr	r1, [pc, #28]	; (20d5c <shutdown_modem+0x4c>)
   20d3e:	f020 fd6f 	bl	41820 <log_string_sync>
	bsdlib_shutdown();
#endif
}
   20d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bsdlib_shutdown();
   20d46:	f022 beae 	b.w	43aa6 <bsdlib_shutdown>
   20d4a:	bf00      	nop
   20d4c:	000463bc 	.word	0x000463bc
   20d50:	000463cc 	.word	0x000463cc
   20d54:	0004755d 	.word	0x0004755d
   20d58:	00047571 	.word	0x00047571
   20d5c:	0004758d 	.word	0x0004758d

00020d60 <cycle_cloud_connection>:
   20d60:	4b1b      	ldr	r3, [pc, #108]	; (20dd0 <cycle_cloud_connection+0x70>)
					       CONN_CYCLE_AFTER_ASSOCIATION_REQ_MS);
	}
}

static void cycle_cloud_connection(struct k_work *work)
{
   20d62:	b570      	push	{r4, r5, r6, lr}
   20d64:	4c1b      	ldr	r4, [pc, #108]	; (20dd4 <cycle_cloud_connection+0x74>)
	int32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;

	LOG_INF("Disconnecting from cloud...");
   20d66:	491c      	ldr	r1, [pc, #112]	; (20dd8 <cycle_cloud_connection+0x78>)
   20d68:	1ae4      	subs	r4, r4, r3
   20d6a:	08e4      	lsrs	r4, r4, #3
   20d6c:	01a4      	lsls	r4, r4, #6
   20d6e:	f044 0003 	orr.w	r0, r4, #3
   20d72:	f020 fd55 	bl	41820 <log_string_sync>

	if (cloud_disconnect(cloud_backend) != 0) {
   20d76:	4b19      	ldr	r3, [pc, #100]	; (20ddc <cycle_cloud_connection+0x7c>)
   20d78:	6818      	ldr	r0, [r3, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_disconnect(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   20d7a:	b9e8      	cbnz	r0, 20db8 <cycle_cloud_connection+0x58>
		reboot_wait_ms = 5 * MSEC_PER_SEC;
		LOG_INF("Disconnect failed. Device will reboot in %d seconds",
   20d7c:	4918      	ldr	r1, [pc, #96]	; (20de0 <cycle_cloud_connection+0x80>)
   20d7e:	2205      	movs	r2, #5
   20d80:	f044 0003 	orr.w	r0, r4, #3
   20d84:	f020 fd4c 	bl	41820 <log_string_sync>
		reboot_wait_ms = 5 * MSEC_PER_SEC;
   20d88:	f241 3188 	movw	r1, #5000	; 0x1388
   20d8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   20d90:	f240 34e7 	movw	r4, #999	; 0x3e7
   20d94:	2500      	movs	r5, #0
   20d96:	fbc0 4501 	smlal	r4, r5, r0, r1
   20d9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20d9e:	2300      	movs	r3, #0
   20da0:	4620      	mov	r0, r4
   20da2:	4629      	mov	r1, r5
   20da4:	f7fc f88a 	bl	1cebc <__aeabi_uldivmod>
	}

	/* Reboot fail-safe on disconnect */
	k_delayed_work_submit_to_queue(&application_work_q, &cloud_reboot_work,
				       K_MSEC(reboot_wait_ms));
}
   20da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20dac:	4602      	mov	r2, r0
   20dae:	460b      	mov	r3, r1
	k_delayed_work_submit_to_queue(&application_work_q, &cloud_reboot_work,
   20db0:	480c      	ldr	r0, [pc, #48]	; (20de4 <cycle_cloud_connection+0x84>)
   20db2:	490d      	ldr	r1, [pc, #52]	; (20de8 <cycle_cloud_connection+0x88>)
   20db4:	f01d b90e 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
   20db8:	6803      	ldr	r3, [r0, #0]
   20dba:	2b00      	cmp	r3, #0
   20dbc:	d0de      	beq.n	20d7c <cycle_cloud_connection+0x1c>
	    backend->api->disconnect == NULL) {
   20dbe:	68db      	ldr	r3, [r3, #12]
	if (backend == NULL || backend->api == NULL ||
   20dc0:	2b00      	cmp	r3, #0
   20dc2:	d0db      	beq.n	20d7c <cycle_cloud_connection+0x1c>
		return -ENOTSUP;
	}

	return backend->api->disconnect(backend);
   20dc4:	4798      	blx	r3
	if (cloud_disconnect(cloud_backend) != 0) {
   20dc6:	2800      	cmp	r0, #0
   20dc8:	d1d8      	bne.n	20d7c <cycle_cloud_connection+0x1c>
	int32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;
   20dca:	f643 2198 	movw	r1, #15000	; 0x3a98
   20dce:	e7dd      	b.n	20d8c <cycle_cloud_connection+0x2c>
   20dd0:	000463bc 	.word	0x000463bc
   20dd4:	000463cc 	.word	0x000463cc
   20dd8:	0004759c 	.word	0x0004759c
   20ddc:	200245fc 	.word	0x200245fc
   20de0:	000475b8 	.word	0x000475b8
   20de4:	20020cc8 	.word	0x20020cc8
   20de8:	20020de0 	.word	0x20020de0

00020dec <data_send_enabled>:
{
   20dec:	b508      	push	{r3, lr}
	return (atomic_get(&cloud_association) ==
   20dee:	4803      	ldr	r0, [pc, #12]	; (20dfc <data_send_enabled+0x10>)
   20df0:	f020 fa51 	bl	41296 <atomic_get>
}
   20df4:	1f03      	subs	r3, r0, #4
   20df6:	4258      	negs	r0, r3
   20df8:	4158      	adcs	r0, r3
   20dfa:	bd08      	pop	{r3, pc}
   20dfc:	200245f8 	.word	0x200245f8

00020e00 <set_gps_enable>:
		connect_to_cloud(connect_wait_s);
	}
}

static void set_gps_enable(const bool enable)
{
   20e00:	b570      	push	{r4, r5, r6, lr}
   20e02:	4604      	mov	r4, r0
	int32_t delay_ms = 0;
	bool changing = (enable != gps_control_is_enabled());
   20e04:	f002 fac0 	bl	23388 <gps_control_is_enabled>
   20e08:	4605      	mov	r5, r0

	/* Exit early if the link is not ready or if the cloud
	 * state is defined and the local state is not changing.
	 */
	if (!data_send_enabled() ||
   20e0a:	f7ff ffef 	bl	20dec <data_send_enabled>
   20e0e:	2800      	cmp	r0, #0
   20e10:	d039      	beq.n	20e86 <set_gps_enable+0x86>
	    ((cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS) !=
   20e12:	2000      	movs	r0, #0
   20e14:	f002 f968 	bl	230e8 <cloud_get_channel_enable_state>
	if (!data_send_enabled() ||
   20e18:	3001      	adds	r0, #1
   20e1a:	d001      	beq.n	20e20 <set_gps_enable+0x20>
	    CLOUD_CMD_STATE_UNDEFINED) && !changing)) {
   20e1c:	42a5      	cmp	r5, r4
   20e1e:	d032      	beq.n	20e86 <set_gps_enable+0x86>
		return;
	}

	cloud_set_channel_enable_state(CLOUD_CHANNEL_GPS,
   20e20:	2000      	movs	r0, #0
   20e22:	b261      	sxtb	r1, r4
   20e24:	f002 fa02 	bl	2322c <cloud_set_channel_enable_state>
		enable ? CLOUD_CMD_STATE_TRUE : CLOUD_CMD_STATE_FALSE);

	if (changing) {
   20e28:	42a5      	cmp	r5, r4
   20e2a:	d00a      	beq.n	20e42 <set_gps_enable+0x42>
		if (enable) {
   20e2c:	4816      	ldr	r0, [pc, #88]	; (20e88 <set_gps_enable+0x88>)
   20e2e:	4b17      	ldr	r3, [pc, #92]	; (20e8c <set_gps_enable+0x8c>)
   20e30:	1a1b      	subs	r3, r3, r0
   20e32:	08db      	lsrs	r3, r3, #3
   20e34:	0198      	lsls	r0, r3, #6
   20e36:	b134      	cbz	r4, 20e46 <set_gps_enable+0x46>
			LOG_INF("Starting GPS");
   20e38:	4915      	ldr	r1, [pc, #84]	; (20e90 <set_gps_enable+0x90>)
   20e3a:	f040 0003 	orr.w	r0, r0, #3
   20e3e:	f020 fcef 	bl	41820 <log_string_sync>
	int32_t delay_ms = 0;
   20e42:	2100      	movs	r1, #0
   20e44:	e009      	b.n	20e5a <set_gps_enable+0x5a>
			/* GPS will be started from the device config work
			 * handler AFTER the config has been sent to the cloud
			 */
		} else {
			LOG_INF("Stopping GPS");
   20e46:	4913      	ldr	r1, [pc, #76]	; (20e94 <set_gps_enable+0x94>)
   20e48:	f040 0003 	orr.w	r0, r0, #3
   20e4c:	f020 fce8 	bl	41820 <log_string_sync>
			gps_control_stop(0);
   20e50:	4620      	mov	r0, r4
   20e52:	f002 fba9 	bl	235a8 <gps_control_stop>
			/* Allow time for the gps to be stopped before
			 * attemping to send the config update
			 */
			delay_ms = 5 * MSEC_PER_SEC;
   20e56:	f241 3188 	movw	r1, #5000	; 0x1388
   20e5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   20e5e:	f240 34e7 	movw	r4, #999	; 0x3e7
   20e62:	2500      	movs	r5, #0
   20e64:	fbc0 4501 	smlal	r4, r5, r0, r1
   20e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20e6c:	2300      	movs	r3, #0
   20e6e:	4620      	mov	r0, r4
   20e70:	4629      	mov	r1, r5
   20e72:	f7fc f823 	bl	1cebc <__aeabi_uldivmod>
	}

	/* Update config state in cloud */
	k_delayed_work_submit_to_queue(&application_work_q,
			&device_config_work, K_MSEC(delay_ms));
}
   20e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20e7a:	4602      	mov	r2, r0
   20e7c:	460b      	mov	r3, r1
	k_delayed_work_submit_to_queue(&application_work_q,
   20e7e:	4806      	ldr	r0, [pc, #24]	; (20e98 <set_gps_enable+0x98>)
   20e80:	4906      	ldr	r1, [pc, #24]	; (20e9c <set_gps_enable+0x9c>)
   20e82:	f01d b8a7 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
}
   20e86:	bd70      	pop	{r4, r5, r6, pc}
   20e88:	000463bc 	.word	0x000463bc
   20e8c:	000463cc 	.word	0x000463cc
   20e90:	000475ec 	.word	0x000475ec
   20e94:	0004e8d3 	.word	0x0004e8d3
   20e98:	20020cc8 	.word	0x20020cc8
   20e9c:	20020e40 	.word	0x20020e40

00020ea0 <sensor_data_send>:
{
   20ea0:	b530      	push	{r4, r5, lr}
   20ea2:	b087      	sub	sp, #28
   20ea4:	4604      	mov	r4, r0
	struct cloud_msg msg = {
   20ea6:	2218      	movs	r2, #24
   20ea8:	2100      	movs	r1, #0
   20eaa:	4668      	mov	r0, sp
   20eac:	f023 ff3b 	bl	44d26 <memset>
	if (!data_send_enabled() || gps_control_is_active()) {
   20eb0:	f7ff ff9c 	bl	20dec <data_send_enabled>
   20eb4:	b198      	cbz	r0, 20ede <sensor_data_send+0x3e>
   20eb6:	f002 fa71 	bl	2339c <gps_control_is_active>
   20eba:	b980      	cbnz	r0, 20ede <sensor_data_send+0x3e>
	err = cloud_encode_data(data, CLOUD_CMD_GROUP_DATA, &msg);
   20ebc:	466a      	mov	r2, sp
   20ebe:	2106      	movs	r1, #6
   20ec0:	4620      	mov	r0, r4
   20ec2:	f001 fd75 	bl	229b0 <cloud_encode_data>
	if (err) {
   20ec6:	b160      	cbz	r0, 20ee2 <sensor_data_send+0x42>
   20ec8:	4a12      	ldr	r2, [pc, #72]	; (20f14 <sensor_data_send+0x74>)
   20eca:	4b13      	ldr	r3, [pc, #76]	; (20f18 <sensor_data_send+0x78>)
		LOG_ERR("Unable to encode cloud data: %d", err);
   20ecc:	4913      	ldr	r1, [pc, #76]	; (20f1c <sensor_data_send+0x7c>)
   20ece:	1a9b      	subs	r3, r3, r2
   20ed0:	08db      	lsrs	r3, r3, #3
   20ed2:	019b      	lsls	r3, r3, #6
   20ed4:	4602      	mov	r2, r0
   20ed6:	f043 0001 	orr.w	r0, r3, #1
   20eda:	f020 fca1 	bl	41820 <log_string_sync>
}
   20ede:	b007      	add	sp, #28
   20ee0:	bd30      	pop	{r4, r5, pc}
		err = cloud_send(cloud_backend, &msg);
   20ee2:	4b0f      	ldr	r3, [pc, #60]	; (20f20 <sensor_data_send+0x80>)
   20ee4:	4669      	mov	r1, sp
   20ee6:	6818      	ldr	r0, [r3, #0]
   20ee8:	f020 f9c4 	bl	41274 <cloud_send>
   20eec:	4605      	mov	r5, r0
 *
 * @return 0 if the operation was successful, otherwise a (negative) error code.
 */
static inline void cloud_release_data(struct cloud_msg *data)
{
	k_free(data->buf);
   20eee:	9800      	ldr	r0, [sp, #0]
   20ef0:	f023 febc 	bl	44c6c <k_free>
		if (err) {
   20ef4:	2d00      	cmp	r5, #0
   20ef6:	d0f2      	beq.n	20ede <sensor_data_send+0x3e>
   20ef8:	4806      	ldr	r0, [pc, #24]	; (20f14 <sensor_data_send+0x74>)
   20efa:	4c07      	ldr	r4, [pc, #28]	; (20f18 <sensor_data_send+0x78>)
			LOG_ERR("%s failed, data was not sent: %d", __func__,
   20efc:	462b      	mov	r3, r5
   20efe:	1a24      	subs	r4, r4, r0
   20f00:	08e4      	lsrs	r4, r4, #3
   20f02:	01a4      	lsls	r4, r4, #6
   20f04:	4a07      	ldr	r2, [pc, #28]	; (20f24 <sensor_data_send+0x84>)
   20f06:	4908      	ldr	r1, [pc, #32]	; (20f28 <sensor_data_send+0x88>)
   20f08:	f044 0001 	orr.w	r0, r4, #1
   20f0c:	f020 fc88 	bl	41820 <log_string_sync>
   20f10:	e7e5      	b.n	20ede <sensor_data_send+0x3e>
   20f12:	bf00      	nop
   20f14:	000463bc 	.word	0x000463bc
   20f18:	000463cc 	.word	0x000463cc
   20f1c:	000475f9 	.word	0x000475f9
   20f20:	200245fc 	.word	0x200245fc
   20f24:	0004830d 	.word	0x0004830d
   20f28:	00047619 	.word	0x00047619

00020f2c <modem_rsrp_data_send>:
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   20f2c:	2100      	movs	r1, #0
{
   20f2e:	b530      	push	{r4, r5, lr}
   20f30:	b0a1      	sub	sp, #132	; 0x84
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   20f32:	227c      	movs	r2, #124	; 0x7c
   20f34:	a801      	add	r0, sp, #4
   20f36:	9100      	str	r1, [sp, #0]
   20f38:	f023 fef5 	bl	44d26 <memset>
	if (!data_send_enabled()) {
   20f3c:	f7ff ff56 	bl	20dec <data_send_enabled>
   20f40:	b308      	cbz	r0, 20f86 <modem_rsrp_data_send+0x5a>
	rsrp_current = rsrp.value - rsrp.offset;
   20f42:	4b12      	ldr	r3, [pc, #72]	; (20f8c <modem_rsrp_data_send+0x60>)
	if (rsrp_current == rsrp_prev) {
   20f44:	4d12      	ldr	r5, [pc, #72]	; (20f90 <modem_rsrp_data_send+0x64>)
	rsrp_current = rsrp.value - rsrp.offset;
   20f46:	881c      	ldrh	r4, [r3, #0]
   20f48:	885b      	ldrh	r3, [r3, #2]
	if (rsrp_current == rsrp_prev) {
   20f4a:	682a      	ldr	r2, [r5, #0]
	rsrp_current = rsrp.value - rsrp.offset;
   20f4c:	1ae4      	subs	r4, r4, r3
	if (rsrp_current == rsrp_prev) {
   20f4e:	42a2      	cmp	r2, r4
   20f50:	d019      	beq.n	20f86 <modem_rsrp_data_send+0x5a>
	len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
   20f52:	2180      	movs	r1, #128	; 0x80
   20f54:	4623      	mov	r3, r4
   20f56:	4a0f      	ldr	r2, [pc, #60]	; (20f94 <modem_rsrp_data_send+0x68>)
   20f58:	4668      	mov	r0, sp
   20f5a:	f01e fe17 	bl	3fb8c <sniprintf>
	signal_strength_cloud_data.data.buf = buf;
   20f5e:	4b0e      	ldr	r3, [pc, #56]	; (20f98 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.tag += 1;
   20f60:	68da      	ldr	r2, [r3, #12]
	signal_strength_cloud_data.data.len = len;
   20f62:	6098      	str	r0, [r3, #8]
	if (signal_strength_cloud_data.tag == 0) {
   20f64:	3201      	adds	r2, #1
		signal_strength_cloud_data.tag = 0x1;
   20f66:	bf08      	it	eq
   20f68:	2201      	moveq	r2, #1
	sensor_data_send(&signal_strength_cloud_data);
   20f6a:	480b      	ldr	r0, [pc, #44]	; (20f98 <modem_rsrp_data_send+0x6c>)
		signal_strength_cloud_data.tag = 0x1;
   20f6c:	60da      	str	r2, [r3, #12]
	signal_strength_cloud_data.data.buf = buf;
   20f6e:	f8c3 d004 	str.w	sp, [r3, #4]
	sensor_data_send(&signal_strength_cloud_data);
   20f72:	f7ff ff95 	bl	20ea0 <sensor_data_send>
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   20f76:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   20f7a:	2300      	movs	r3, #0
   20f7c:	4907      	ldr	r1, [pc, #28]	; (20f9c <modem_rsrp_data_send+0x70>)
   20f7e:	4808      	ldr	r0, [pc, #32]	; (20fa0 <modem_rsrp_data_send+0x74>)
	rsrp_prev = rsrp_current;
   20f80:	602c      	str	r4, [r5, #0]
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   20f82:	f01d f827 	bl	3dfd4 <k_delayed_work_submit_to_queue>
}
   20f86:	b021      	add	sp, #132	; 0x84
   20f88:	bd30      	pop	{r4, r5, pc}
   20f8a:	bf00      	nop
   20f8c:	20020930 	.word	0x20020930
   20f90:	20024628 	.word	0x20024628
   20f94:	0004c1f0 	.word	0x0004c1f0
   20f98:	20021820 	.word	0x20021820
   20f9c:	200217c0 	.word	0x200217c0
   20fa0:	20020cc8 	.word	0x20020cc8

00020fa4 <send_gps_data_work_fn>:
	sensor_data_send(&gps_cloud_data);
   20fa4:	4801      	ldr	r0, [pc, #4]	; (20fac <send_gps_data_work_fn+0x8>)
   20fa6:	f7ff bf7b 	b.w	20ea0 <sensor_data_send>
   20faa:	bf00      	nop
   20fac:	20020000 	.word	0x20020000

00020fb0 <send_agps_request>:
{
   20fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20fb4:	4b1d      	ldr	r3, [pc, #116]	; (2102c <send_agps_request+0x7c>)
   20fb6:	4c1e      	ldr	r4, [pc, #120]	; (21030 <send_agps_request+0x80>)
	if ((last_request_timestamp != 0) &&
   20fb8:	4d1e      	ldr	r5, [pc, #120]	; (21034 <send_agps_request+0x84>)
   20fba:	1ae4      	subs	r4, r4, r3
   20fbc:	08e4      	lsrs	r4, r4, #3
   20fbe:	e9d5 2300 	ldrd	r2, r3, [r5]
   20fc2:	4313      	orrs	r3, r2
   20fc4:	46a8      	mov	r8, r5
   20fc6:	ea4f 1484 	mov.w	r4, r4, lsl #6
   20fca:	d014      	beq.n	20ff6 <send_agps_request+0x46>
	    (k_uptime_get() - last_request_timestamp) < AGPS_UPDATE_PERIOD) {
   20fcc:	f020 f966 	bl	4129c <k_uptime_get>
   20fd0:	e9d5 3200 	ldrd	r3, r2, [r5]
   20fd4:	1ac6      	subs	r6, r0, r3
	if ((last_request_timestamp != 0) &&
   20fd6:	f04f 0300 	mov.w	r3, #0
	    (k_uptime_get() - last_request_timestamp) < AGPS_UPDATE_PERIOD) {
   20fda:	eb61 0702 	sbc.w	r7, r1, r2
	if ((last_request_timestamp != 0) &&
   20fde:	4a16      	ldr	r2, [pc, #88]	; (21038 <send_agps_request+0x88>)
   20fe0:	4296      	cmp	r6, r2
   20fe2:	eb77 0303 	sbcs.w	r3, r7, r3
   20fe6:	da06      	bge.n	20ff6 <send_agps_request+0x46>
		LOG_WRN("A-GPS request was sent less than 1 hour ago");
   20fe8:	4914      	ldr	r1, [pc, #80]	; (2103c <send_agps_request+0x8c>)
   20fea:	f044 0002 	orr.w	r0, r4, #2
}
   20fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_INF("A-GPS request sent");
   20ff2:	f020 bc15 	b.w	41820 <log_string_sync>
	LOG_INF("Sending A-GPS request");
   20ff6:	f044 0503 	orr.w	r5, r4, #3
   20ffa:	4628      	mov	r0, r5
   20ffc:	4910      	ldr	r1, [pc, #64]	; (21040 <send_agps_request+0x90>)
   20ffe:	f020 fc0f 	bl	41820 <log_string_sync>
	err = gps_agps_request(agps_request, GPS_SOCKET_NOT_PROVIDED);
   21002:	4a10      	ldr	r2, [pc, #64]	; (21044 <send_agps_request+0x94>)
   21004:	2300      	movs	r3, #0
   21006:	ca07      	ldmia	r2, {r0, r1, r2}
   21008:	f005 fd52 	bl	26ab0 <gps_agps_request>
	if (err) {
   2100c:	4602      	mov	r2, r0
   2100e:	b130      	cbz	r0, 2101e <send_agps_request+0x6e>
		LOG_ERR("Failed to request A-GPS data, error: %d", err);
   21010:	f044 0001 	orr.w	r0, r4, #1
   21014:	490c      	ldr	r1, [pc, #48]	; (21048 <send_agps_request+0x98>)
}
   21016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_ERR("Failed to request A-GPS data, error: %d", err);
   2101a:	f020 bc01 	b.w	41820 <log_string_sync>
	last_request_timestamp = k_uptime_get();
   2101e:	f020 f93d 	bl	4129c <k_uptime_get>
   21022:	e9c8 0100 	strd	r0, r1, [r8]
	LOG_INF("A-GPS request sent");
   21026:	4628      	mov	r0, r5
   21028:	4908      	ldr	r1, [pc, #32]	; (2104c <send_agps_request+0x9c>)
   2102a:	e7e0      	b.n	20fee <send_agps_request+0x3e>
   2102c:	000463bc 	.word	0x000463bc
   21030:	000463cc 	.word	0x000463cc
   21034:	20020ea0 	.word	0x20020ea0
   21038:	0036ee80 	.word	0x0036ee80
   2103c:	0004763a 	.word	0x0004763a
   21040:	00047666 	.word	0x00047666
   21044:	200245e8 	.word	0x200245e8
   21048:	0004767c 	.word	0x0004767c
   2104c:	000476a4 	.word	0x000476a4

00021050 <no_sim_go_offline>:
	}
#endif /* CONFIG_BSD_LIBRARY */
}

static void no_sim_go_offline(struct k_work *work)
{
   21050:	b510      	push	{r4, lr}
#if defined(CONFIG_BSD_LIBRARY)
	lte_lc_offline();
   21052:	f00a fc05 	bl	2b860 <lte_lc_offline>
   21056:	2100      	movs	r1, #0
   21058:	f640 40cd 	movw	r0, #3277	; 0xccd
   2105c:	f01c fd10 	bl	3da80 <z_impl_k_sleep>
   21060:	4c0a      	ldr	r4, [pc, #40]	; (2108c <no_sim_go_offline+0x3c>)
   21062:	4b0b      	ldr	r3, [pc, #44]	; (21090 <no_sim_go_offline+0x40>)
	/* Wait for lte_lc events to be processed before printing info message */
	k_sleep(K_MSEC(100));
	LOG_INF("No SIM card detected.");
   21064:	490b      	ldr	r1, [pc, #44]	; (21094 <no_sim_go_offline+0x44>)
   21066:	1ae4      	subs	r4, r4, r3
   21068:	08e4      	lsrs	r4, r4, #3
   2106a:	01a4      	lsls	r4, r4, #6
   2106c:	f044 0403 	orr.w	r4, r4, #3
   21070:	4620      	mov	r0, r4
   21072:	f020 fbd5 	bl	41820 <log_string_sync>
	LOG_INF("Insert SIM and reset device to run the asset tracker.");
   21076:	4620      	mov	r0, r4
   21078:	4907      	ldr	r1, [pc, #28]	; (21098 <no_sim_go_offline+0x48>)
   2107a:	f020 fbd1 	bl	41820 <log_string_sync>
	ui_led_set_pattern(UI_LED_ERROR_LTE_LC);
#endif /* CONFIG_BSD_LIBRARY */
}
   2107e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ui_led_set_pattern(UI_LED_ERROR_LTE_LC);
   21082:	f44f 7040 	mov.w	r0, #768	; 0x300
   21086:	f001 bb21 	b.w	226cc <ui_led_set_pattern>
   2108a:	bf00      	nop
   2108c:	000463cc 	.word	0x000463cc
   21090:	000463bc 	.word	0x000463bc
   21094:	000476b7 	.word	0x000476b7
   21098:	000476cd 	.word	0x000476cd

0002109c <long_press_handler>:
{
   2109c:	b508      	push	{r3, lr}
	if (!data_send_enabled()) {
   2109e:	f7ff fea5 	bl	20dec <data_send_enabled>
   210a2:	b958      	cbnz	r0, 210bc <long_press_handler+0x20>
   210a4:	4b0a      	ldr	r3, [pc, #40]	; (210d0 <long_press_handler+0x34>)
   210a6:	480b      	ldr	r0, [pc, #44]	; (210d4 <long_press_handler+0x38>)
		LOG_INF("Link not ready, long press disregarded");
   210a8:	490b      	ldr	r1, [pc, #44]	; (210d8 <long_press_handler+0x3c>)
   210aa:	1ac0      	subs	r0, r0, r3
   210ac:	08c0      	lsrs	r0, r0, #3
   210ae:	0180      	lsls	r0, r0, #6
   210b0:	f040 0003 	orr.w	r0, r0, #3
}
   210b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_INF("Link not ready, long press disregarded");
   210b8:	f020 bbb2 	b.w	41820 <log_string_sync>
	set_gps_enable(!gps_control_is_enabled());
   210bc:	f002 f964 	bl	23388 <gps_control_is_enabled>
}
   210c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_gps_enable(!gps_control_is_enabled());
   210c4:	f080 0001 	eor.w	r0, r0, #1
   210c8:	b2c0      	uxtb	r0, r0
   210ca:	f7ff be99 	b.w	20e00 <set_gps_enable>
   210ce:	bf00      	nop
   210d0:	000463bc 	.word	0x000463bc
   210d4:	000463cc 	.word	0x000463cc
   210d8:	00047703 	.word	0x00047703

000210dc <ui_evt_handler>:
{
   210dc:	b507      	push	{r0, r1, r2, lr}
   210de:	ab02      	add	r3, sp, #8
   210e0:	e903 0003 	stmdb	r3, {r0, r1}
   210e4:	9b01      	ldr	r3, [sp, #4]
	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT) &&
   210e6:	2b03      	cmp	r3, #3
   210e8:	d107      	bne.n	210fa <ui_evt_handler+0x1e>
	    data_send_enabled()) {
   210ea:	f7ff fe7f 	bl	20dec <data_send_enabled>
	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT) &&
   210ee:	b1c8      	cbz	r0, 21124 <ui_evt_handler+0x48>
}
   210f0:	b003      	add	sp, #12
   210f2:	f85d eb04 	ldr.w	lr, [sp], #4
		motion_simulate_trigger();
   210f6:	f020 b8f1 	b.w	412dc <motion_simulate_trigger>
	if (IS_ENABLED(CONFIG_GPS_CONTROL_ON_LONG_PRESS) &&
   210fa:	2b01      	cmp	r3, #1
   210fc:	d112      	bne.n	21124 <ui_evt_handler+0x48>
		if (evt.type == UI_EVT_BUTTON_ACTIVE) {
   210fe:	f89d 3000 	ldrb.w	r3, [sp]
   21102:	b94b      	cbnz	r3, 21118 <ui_evt_handler+0x3c>
			k_delayed_work_submit_to_queue(&application_work_q,
   21104:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   21108:	2300      	movs	r3, #0
   2110a:	4908      	ldr	r1, [pc, #32]	; (2112c <ui_evt_handler+0x50>)
   2110c:	4808      	ldr	r0, [pc, #32]	; (21130 <ui_evt_handler+0x54>)
}
   2110e:	b003      	add	sp, #12
   21110:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_submit_to_queue(&application_work_q,
   21114:	f01c bf5e 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
			k_delayed_work_cancel(&long_press_button_work);
   21118:	4804      	ldr	r0, [pc, #16]	; (2112c <ui_evt_handler+0x50>)
}
   2111a:	b003      	add	sp, #12
   2111c:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_cancel(&long_press_button_work);
   21120:	f01c bfe2 	b.w	3e0e8 <k_delayed_work_cancel>
}
   21124:	b003      	add	sp, #12
   21126:	f85d fb04 	ldr.w	pc, [sp], #4
   2112a:	bf00      	nop
   2112c:	20020ea8 	.word	0x20020ea8
   21130:	20020cc8 	.word	0x20020cc8

00021134 <modem_rsrp_handler>:
	if (rsrp_value > 97) {
   21134:	2861      	cmp	r0, #97	; 0x61
{
   21136:	b510      	push	{r4, lr}
	if (rsrp_value > 97) {
   21138:	d814      	bhi.n	21164 <modem_rsrp_handler+0x30>
	rsrp.value = rsrp_value;
   2113a:	4b0b      	ldr	r3, [pc, #44]	; (21168 <modem_rsrp_handler+0x34>)
   2113c:	8018      	strh	r0, [r3, #0]
 *
 * @return Remaining time (in milliseconds).
 */
static inline int32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   2113e:	480b      	ldr	r0, [pc, #44]	; (2116c <modem_rsrp_handler+0x38>)
   21140:	f01d f9b6 	bl	3e4b0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   21144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21148:	fba0 0103 	umull	r0, r1, r0, r3
   2114c:	0bc3      	lsrs	r3, r0, #15
	if (CONFIG_HOLD_TIME_RSRP == 0 ||
   2114e:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   21152:	d107      	bne.n	21164 <modem_rsrp_handler+0x30>
}
   21154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   21158:	2200      	movs	r2, #0
   2115a:	2300      	movs	r3, #0
   2115c:	4904      	ldr	r1, [pc, #16]	; (21170 <modem_rsrp_handler+0x3c>)
   2115e:	4805      	ldr	r0, [pc, #20]	; (21174 <modem_rsrp_handler+0x40>)
   21160:	f01c bf38 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
}
   21164:	bd10      	pop	{r4, pc}
   21166:	bf00      	nop
   21168:	20020930 	.word	0x20020930
   2116c:	200217d0 	.word	0x200217d0
   21170:	200217c0 	.word	0x200217c0
   21174:	20020cc8 	.word	0x20020cc8

00021178 <k_work_submit_to_queue.constprop.0>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   21178:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2117a:	f100 0308 	add.w	r3, r0, #8
   2117e:	e8d3 2fef 	ldaex	r2, [r3]
   21182:	f042 0001 	orr.w	r0, r2, #1
   21186:	e8c3 0fec 	stlex	ip, r0, [r3]
   2118a:	f1bc 0f00 	cmp.w	ip, #0
   2118e:	d1f6      	bne.n	2117e <k_work_submit_to_queue.constprop.0+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   21190:	07d3      	lsls	r3, r2, #31
   21192:	d402      	bmi.n	2119a <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
   21194:	4801      	ldr	r0, [pc, #4]	; (2119c <k_work_submit_to_queue.constprop.0+0x24>)
   21196:	f023 bbfa 	b.w	4498e <k_queue_append>
}
   2119a:	4770      	bx	lr
   2119c:	20020cc8 	.word	0x20020cc8

000211a0 <lte_handler>:

#if defined(CONFIG_LTE_LINK_CONTROL)
static void lte_handler(const struct lte_lc_evt *const evt)
{
   211a0:	b510      	push	{r4, lr}
   211a2:	7803      	ldrb	r3, [r0, #0]
   211a4:	4604      	mov	r4, r0
   211a6:	b094      	sub	sp, #80	; 0x50
   211a8:	2b04      	cmp	r3, #4
   211aa:	d80a      	bhi.n	211c2 <lte_handler+0x22>
   211ac:	e8df f003 	tbb	[pc, r3]
   211b0:	4c2a1d03 	.word	0x4c2a1d03
   211b4:	59          	.byte	0x59
   211b5:	00          	.byte	0x00
	switch (evt->type) {
	case LTE_LC_EVT_NW_REG_STATUS:

		if (evt->nw_reg_status == LTE_LC_NW_REG_UICC_FAIL) {
   211b6:	7903      	ldrb	r3, [r0, #4]
   211b8:	2b5a      	cmp	r3, #90	; 0x5a
   211ba:	d104      	bne.n	211c6 <lte_handler+0x26>
			k_work_submit_to_queue(&application_work_q,
   211bc:	482d      	ldr	r0, [pc, #180]	; (21274 <lte_handler+0xd4>)
   211be:	f7ff ffdb 	bl	21178 <k_work_submit_to_queue.constprop.0>
			evt->cell.id, evt->cell.tac);
		break;
	default:
		break;
	}
}
   211c2:	b014      	add	sp, #80	; 0x50
   211c4:	bd10      	pop	{r4, pc}
		} else if ((evt->nw_reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   211c6:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
   211ca:	2a01      	cmp	r2, #1
   211cc:	d1f9      	bne.n	211c2 <lte_handler+0x22>
   211ce:	4a2a      	ldr	r2, [pc, #168]	; (21278 <lte_handler+0xd8>)
   211d0:	482a      	ldr	r0, [pc, #168]	; (2127c <lte_handler+0xdc>)
			LOG_INF("Network registration status: %s",
   211d2:	492b      	ldr	r1, [pc, #172]	; (21280 <lte_handler+0xe0>)
   211d4:	1a80      	subs	r0, r0, r2
   211d6:	4a2b      	ldr	r2, [pc, #172]	; (21284 <lte_handler+0xe4>)
   211d8:	08c0      	lsrs	r0, r0, #3
   211da:	2b01      	cmp	r3, #1
   211dc:	bf08      	it	eq
   211de:	460a      	moveq	r2, r1
   211e0:	4929      	ldr	r1, [pc, #164]	; (21288 <lte_handler+0xe8>)
   211e2:	0180      	lsls	r0, r0, #6
		LOG_INF("RRC mode: %s",
   211e4:	f040 0003 	orr.w	r0, r0, #3
   211e8:	e02b      	b.n	21242 <lte_handler+0xa2>
   211ea:	4b23      	ldr	r3, [pc, #140]	; (21278 <lte_handler+0xd8>)
   211ec:	4823      	ldr	r0, [pc, #140]	; (2127c <lte_handler+0xdc>)
		LOG_INF("PSM parameter update: TAU: %d, Active time: %d",
   211ee:	4927      	ldr	r1, [pc, #156]	; (2128c <lte_handler+0xec>)
   211f0:	1ac0      	subs	r0, r0, r3
   211f2:	08c0      	lsrs	r0, r0, #3
   211f4:	0180      	lsls	r0, r0, #6
   211f6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   211fa:	f040 0003 	orr.w	r0, r0, #3
   211fe:	f020 fb0f 	bl	41820 <log_string_sync>
}
   21202:	e7de      	b.n	211c2 <lte_handler+0x22>
		len = snprintf(log_buf, sizeof(log_buf),
   21204:	6880      	ldr	r0, [r0, #8]
   21206:	f7fb fa7f 	bl	1c708 <__aeabi_f2d>
   2120a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2120e:	6860      	ldr	r0, [r4, #4]
   21210:	f7fb fa7a 	bl	1c708 <__aeabi_f2d>
   21214:	4a1e      	ldr	r2, [pc, #120]	; (21290 <lte_handler+0xf0>)
   21216:	e9cd 0100 	strd	r0, r1, [sp]
   2121a:	213c      	movs	r1, #60	; 0x3c
   2121c:	a805      	add	r0, sp, #20
   2121e:	f01e fcb5 	bl	3fb8c <sniprintf>
		if ((len > 0) && (len < sizeof(log_buf))) {
   21222:	3801      	subs	r0, #1
   21224:	283a      	cmp	r0, #58	; 0x3a
   21226:	d8cc      	bhi.n	211c2 <lte_handler+0x22>
   21228:	4b13      	ldr	r3, [pc, #76]	; (21278 <lte_handler+0xd8>)
   2122a:	4c14      	ldr	r4, [pc, #80]	; (2127c <lte_handler+0xdc>)
			LOG_INF("%s", log_strdup(log_buf));
   2122c:	a805      	add	r0, sp, #20
   2122e:	1ae4      	subs	r4, r4, r3
   21230:	f020 fb09 	bl	41846 <log_strdup>
   21234:	08e4      	lsrs	r4, r4, #3
   21236:	01a4      	lsls	r4, r4, #6
   21238:	f044 0403 	orr.w	r4, r4, #3
   2123c:	4602      	mov	r2, r0
   2123e:	4620      	mov	r0, r4
   21240:	4914      	ldr	r1, [pc, #80]	; (21294 <lte_handler+0xf4>)
		LOG_INF("RRC mode: %s",
   21242:	f020 faed 	bl	41820 <log_string_sync>
   21246:	e7bc      	b.n	211c2 <lte_handler+0x22>
   21248:	4b0b      	ldr	r3, [pc, #44]	; (21278 <lte_handler+0xd8>)
   2124a:	480c      	ldr	r0, [pc, #48]	; (2127c <lte_handler+0xdc>)
   2124c:	7921      	ldrb	r1, [r4, #4]
   2124e:	1ac0      	subs	r0, r0, r3
   21250:	4a11      	ldr	r2, [pc, #68]	; (21298 <lte_handler+0xf8>)
   21252:	4b12      	ldr	r3, [pc, #72]	; (2129c <lte_handler+0xfc>)
   21254:	08c0      	lsrs	r0, r0, #3
   21256:	2901      	cmp	r1, #1
   21258:	bf18      	it	ne
   2125a:	461a      	movne	r2, r3
   2125c:	0180      	lsls	r0, r0, #6
   2125e:	4910      	ldr	r1, [pc, #64]	; (212a0 <lte_handler+0x100>)
   21260:	e7c0      	b.n	211e4 <lte_handler+0x44>
   21262:	4b05      	ldr	r3, [pc, #20]	; (21278 <lte_handler+0xd8>)
   21264:	4805      	ldr	r0, [pc, #20]	; (2127c <lte_handler+0xdc>)
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   21266:	490f      	ldr	r1, [pc, #60]	; (212a4 <lte_handler+0x104>)
   21268:	1ac0      	subs	r0, r0, r3
   2126a:	08c0      	lsrs	r0, r0, #3
   2126c:	0180      	lsls	r0, r0, #6
   2126e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   21272:	e7c2      	b.n	211fa <lte_handler+0x5a>
   21274:	2002461c 	.word	0x2002461c
   21278:	000463bc 	.word	0x000463bc
   2127c:	000463cc 	.word	0x000463cc
   21280:	0004772a 	.word	0x0004772a
   21284:	00047743 	.word	0x00047743
   21288:	00047766 	.word	0x00047766
   2128c:	00047786 	.word	0x00047786
   21290:	000477b5 	.word	0x000477b5
   21294:	0004e84f 	.word	0x0004e84f
   21298:	00047757 	.word	0x00047757
   2129c:	00047761 	.word	0x00047761
   212a0:	000477e4 	.word	0x000477e4
   212a4:	000477f1 	.word	0x000477f1

000212a8 <motion_handler>:
{
   212a8:	b084      	sub	sp, #16
   212aa:	b430      	push	{r4, r5}
   212ac:	ac02      	add	r4, sp, #8
   212ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (motion_data.orientation != last_motion_data.orientation) {
   212b2:	4c0b      	ldr	r4, [pc, #44]	; (212e0 <motion_handler+0x38>)
   212b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   212b8:	7823      	ldrb	r3, [r4, #0]
   212ba:	429a      	cmp	r2, r3
   212bc:	d00d      	beq.n	212da <motion_handler+0x32>
		last_motion_data = motion_data;
   212be:	ad02      	add	r5, sp, #8
   212c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   212c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   212c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   212c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   212c8:	e895 0003 	ldmia.w	r5, {r0, r1}
   212cc:	e884 0003 	stmia.w	r4, {r0, r1}
}
   212d0:	bc30      	pop	{r4, r5}
		k_work_submit_to_queue(&application_work_q,
   212d2:	4804      	ldr	r0, [pc, #16]	; (212e4 <motion_handler+0x3c>)
}
   212d4:	b004      	add	sp, #16
		k_work_submit_to_queue(&application_work_q,
   212d6:	f7ff bf4f 	b.w	21178 <k_work_submit_to_queue.constprop.0>
}
   212da:	bc30      	pop	{r4, r5}
   212dc:	b004      	add	sp, #16
   212de:	4770      	bx	lr
   212e0:	20020e78 	.word	0x20020e78
   212e4:	20024610 	.word	0x20024610

000212e8 <gps_handler>:
{
   212e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   212ec:	460c      	mov	r4, r1
   212ee:	b08a      	sub	sp, #40	; 0x28
	gps_last_active_time = k_uptime_get();
   212f0:	f01f ffd4 	bl	4129c <k_uptime_get>
	switch (evt->type) {
   212f4:	7823      	ldrb	r3, [r4, #0]
   212f6:	2b0a      	cmp	r3, #10
   212f8:	d821      	bhi.n	2133e <gps_handler+0x56>
   212fa:	e8df f013 	tbh	[pc, r3, lsl #1]
   212fe:	000b      	.short	0x000b
   21300:	00340023 	.word	0x00340023
   21304:	004a0020 	.word	0x004a0020
   21308:	00700020 	.word	0x00700020
   2130c:	00c900be 	.word	0x00c900be
   21310:	00e900d0 	.word	0x00e900d0
   21314:	4b74      	ldr	r3, [pc, #464]	; (214e8 <gps_handler+0x200>)
   21316:	4875      	ldr	r0, [pc, #468]	; (214ec <gps_handler+0x204>)
		LOG_INF("GPS_EVT_SEARCH_STARTED");
   21318:	4975      	ldr	r1, [pc, #468]	; (214f0 <gps_handler+0x208>)
   2131a:	1ac0      	subs	r0, r0, r3
   2131c:	08c0      	lsrs	r0, r0, #3
   2131e:	0180      	lsls	r0, r0, #6
   21320:	f040 0003 	orr.w	r0, r0, #3
   21324:	f020 fa7c 	bl	41820 <log_string_sync>
		gps_control_set_active(true);
   21328:	2001      	movs	r0, #1
   2132a:	f002 f841 	bl	233b0 <gps_control_set_active>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   2132e:	2008      	movs	r0, #8
   21330:	f001 f9cc 	bl	226cc <ui_led_set_pattern>
		gps_last_search_start_time = k_uptime_get();
   21334:	f01f ffb2 	bl	4129c <k_uptime_get>
   21338:	4b6e      	ldr	r3, [pc, #440]	; (214f4 <gps_handler+0x20c>)
   2133a:	e9c3 0100 	strd	r0, r1, [r3]
}
   2133e:	b00a      	add	sp, #40	; 0x28
   21340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21344:	4b68      	ldr	r3, [pc, #416]	; (214e8 <gps_handler+0x200>)
   21346:	4869      	ldr	r0, [pc, #420]	; (214ec <gps_handler+0x204>)
		LOG_INF("GPS_EVT_SEARCH_STOPPED");
   21348:	496b      	ldr	r1, [pc, #428]	; (214f8 <gps_handler+0x210>)
   2134a:	1ac0      	subs	r0, r0, r3
   2134c:	08c0      	lsrs	r0, r0, #3
   2134e:	0180      	lsls	r0, r0, #6
   21350:	f040 0003 	orr.w	r0, r0, #3
   21354:	f020 fa64 	bl	41820 <log_string_sync>
		gps_control_set_active(false);
   21358:	2000      	movs	r0, #0
   2135a:	f002 f829 	bl	233b0 <gps_control_set_active>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   2135e:	2008      	movs	r0, #8
   21360:	f001 f9b4 	bl	226cc <ui_led_set_pattern>
		break;
   21364:	e7eb      	b.n	2133e <gps_handler+0x56>
   21366:	4b60      	ldr	r3, [pc, #384]	; (214e8 <gps_handler+0x200>)
   21368:	4c60      	ldr	r4, [pc, #384]	; (214ec <gps_handler+0x204>)
		LOG_INF("GPS_EVT_SEARCH_TIMEOUT");
   2136a:	4964      	ldr	r1, [pc, #400]	; (214fc <gps_handler+0x214>)
   2136c:	1ae4      	subs	r4, r4, r3
   2136e:	08e4      	lsrs	r4, r4, #3
   21370:	01a4      	lsls	r4, r4, #6
   21372:	f044 0403 	orr.w	r4, r4, #3
   21376:	4620      	mov	r0, r4
   21378:	f020 fa52 	bl	41820 <log_string_sync>
		gps_control_set_active(false);
   2137c:	2000      	movs	r0, #0
   2137e:	f002 f817 	bl	233b0 <gps_control_set_active>
		LOG_INF("GPS will be attempted again in %d seconds",
   21382:	f002 f92f 	bl	235e4 <gps_control_get_gps_reporting_interval>
   21386:	495e      	ldr	r1, [pc, #376]	; (21500 <gps_handler+0x218>)
   21388:	4602      	mov	r2, r0
   2138a:	4620      	mov	r0, r4
   2138c:	f020 fa48 	bl	41820 <log_string_sync>
   21390:	e7d5      	b.n	2133e <gps_handler+0x56>
   21392:	4b55      	ldr	r3, [pc, #340]	; (214e8 <gps_handler+0x200>)
   21394:	4855      	ldr	r0, [pc, #340]	; (214ec <gps_handler+0x204>)
		LOG_INF("GPS_EVT_PVT_FIX");
   21396:	495b      	ldr	r1, [pc, #364]	; (21504 <gps_handler+0x21c>)
   21398:	1ac0      	subs	r0, r0, r3
   2139a:	08c0      	lsrs	r0, r0, #3
   2139c:	0180      	lsls	r0, r0, #6
   2139e:	f040 0003 	orr.w	r0, r0, #3
   213a2:	f020 fa3d 	bl	41820 <log_string_sync>
	struct tm gps_time = {
   213a6:	2300      	movs	r3, #0
   213a8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   213ac:	9309      	str	r3, [sp, #36]	; 0x24
		.tm_sec = gps_data->datetime.seconds,
   213ae:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	date_time_set(&gps_time);
   213b2:	a801      	add	r0, sp, #4
		.tm_sec = gps_data->datetime.seconds,
   213b4:	9301      	str	r3, [sp, #4]
		.tm_min = gps_data->datetime.minute,
   213b6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   213ba:	9302      	str	r3, [sp, #8]
		.tm_hour = gps_data->datetime.hour,
   213bc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   213c0:	9303      	str	r3, [sp, #12]
		.tm_mday = gps_data->datetime.day,
   213c2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   213c6:	9304      	str	r3, [sp, #16]
		.tm_mon = gps_data->datetime.month - 1,
   213c8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   213cc:	3b01      	subs	r3, #1
	struct tm gps_time = {
   213ce:	9305      	str	r3, [sp, #20]
		.tm_year = gps_data->datetime.year - 1900,
   213d0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   213d2:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
	struct tm gps_time = {
   213d6:	9306      	str	r3, [sp, #24]
	date_time_set(&gps_time);
   213d8:	f00b fb3e 	bl	2ca58 <date_time_set>
}
   213dc:	e7af      	b.n	2133e <gps_handler+0x56>
   213de:	4b42      	ldr	r3, [pc, #264]	; (214e8 <gps_handler+0x200>)
   213e0:	4d42      	ldr	r5, [pc, #264]	; (214ec <gps_handler+0x204>)
		memcpy(gps_data.buf, evt->nmea.buf, evt->nmea.len);
   213e2:	4e49      	ldr	r6, [pc, #292]	; (21508 <gps_handler+0x220>)
   213e4:	1aed      	subs	r5, r5, r3
   213e6:	08ed      	lsrs	r5, r5, #3
		LOG_INF("Position fix with NMEA data");
   213e8:	01ad      	lsls	r5, r5, #6
   213ea:	f045 0003 	orr.w	r0, r5, #3
   213ee:	4947      	ldr	r1, [pc, #284]	; (2150c <gps_handler+0x224>)
   213f0:	f020 fa16 	bl	41820 <log_string_sync>
		memcpy(gps_data.buf, evt->nmea.buf, evt->nmea.len);
   213f4:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
   213f8:	f104 0108 	add.w	r1, r4, #8
   213fc:	2354      	movs	r3, #84	; 0x54
   213fe:	4630      	mov	r0, r6
   21400:	f023 fc7e 	bl	44d00 <__memcpy_chk>
		gps_data.len = evt->nmea.len;
   21404:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
		gps_cloud_data.data.buf = gps_data.buf;
   21408:	4c41      	ldr	r4, [pc, #260]	; (21510 <gps_handler+0x228>)
		gps_data.len = evt->nmea.len;
   2140a:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
		gps_cloud_data.data.len = gps_data.len;
   2140e:	e9c4 6301 	strd	r6, r3, [r4, #4]
		gps_cloud_data.ts = k_uptime_get();
   21412:	f01f ff43 	bl	4129c <k_uptime_get>
		gps_cloud_data.tag += 1;
   21416:	68e3      	ldr	r3, [r4, #12]
		gps_cloud_data.ts = k_uptime_get();
   21418:	e9c4 0104 	strd	r0, r1, [r4, #16]
		if (gps_cloud_data.tag == 0) {
   2141c:	3301      	adds	r3, #1
			gps_cloud_data.tag = 0x1;
   2141e:	bf08      	it	eq
   21420:	2301      	moveq	r3, #1
   21422:	60e3      	str	r3, [r4, #12]
		int64_t gps_time_from_start_to_fix_seconds = (k_uptime_get() -
   21424:	f01f ff3a 	bl	4129c <k_uptime_get>
   21428:	4b32      	ldr	r3, [pc, #200]	; (214f4 <gps_handler+0x20c>)
   2142a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2142e:	e9d3 4600 	ldrd	r4, r6, [r3]
   21432:	1b00      	subs	r0, r0, r4
   21434:	eb61 0106 	sbc.w	r1, r1, r6
   21438:	2300      	movs	r3, #0
   2143a:	f7fb fcef 	bl	1ce1c <__aeabi_ldivmod>
   2143e:	4607      	mov	r7, r0
		ui_led_set_pattern(UI_LED_GPS_FIX);
   21440:	2008      	movs	r0, #8
		int64_t gps_time_from_start_to_fix_seconds = (k_uptime_get() -
   21442:	4688      	mov	r8, r1
		ui_led_set_pattern(UI_LED_GPS_FIX);
   21444:	f001 f942 	bl	226cc <ui_led_set_pattern>
		gps_control_set_active(false);
   21448:	2000      	movs	r0, #0
   2144a:	f001 ffb1 	bl	233b0 <gps_control_set_active>
		LOG_INF("GPS will be started in %lld seconds",
   2144e:	f002 f8c9 	bl	235e4 <gps_control_get_gps_reporting_interval>
   21452:	17c1      	asrs	r1, r0, #31
   21454:	f510 72b4 	adds.w	r2, r0, #360	; 0x168
   21458:	f141 0300 	adc.w	r3, r1, #0
   2145c:	f045 0603 	orr.w	r6, r5, #3
   21460:	1bd2      	subs	r2, r2, r7
   21462:	4630      	mov	r0, r6
   21464:	492b      	ldr	r1, [pc, #172]	; (21514 <gps_handler+0x22c>)
   21466:	eb63 0308 	sbc.w	r3, r3, r8
   2146a:	f020 f9d9 	bl	41820 <log_string_sync>
		k_work_submit_to_queue(&application_work_q,
   2146e:	482a      	ldr	r0, [pc, #168]	; (21518 <gps_handler+0x230>)
   21470:	f7ff fe82 	bl	21178 <k_work_submit_to_queue.constprop.0>
		env_sensors_poll();
   21474:	f002 f94a 	bl	2370c <env_sensors_poll>
		break;
   21478:	e761      	b.n	2133e <gps_handler+0x56>
   2147a:	481c      	ldr	r0, [pc, #112]	; (214ec <gps_handler+0x204>)
   2147c:	4b1a      	ldr	r3, [pc, #104]	; (214e8 <gps_handler+0x200>)
		LOG_INF("GPS_EVT_OPERATION_BLOCKED");
   2147e:	4927      	ldr	r1, [pc, #156]	; (2151c <gps_handler+0x234>)
   21480:	1ac0      	subs	r0, r0, r3
   21482:	08c0      	lsrs	r0, r0, #3
   21484:	0180      	lsls	r0, r0, #6
		LOG_INF("GPS_EVT_OPERATION_UNBLOCKED");
   21486:	f040 0003 	orr.w	r0, r0, #3
   2148a:	f020 f9c9 	bl	41820 <log_string_sync>
   2148e:	e766      	b.n	2135e <gps_handler+0x76>
   21490:	4816      	ldr	r0, [pc, #88]	; (214ec <gps_handler+0x204>)
   21492:	4b15      	ldr	r3, [pc, #84]	; (214e8 <gps_handler+0x200>)
   21494:	4922      	ldr	r1, [pc, #136]	; (21520 <gps_handler+0x238>)
   21496:	1ac0      	subs	r0, r0, r3
   21498:	08c0      	lsrs	r0, r0, #3
   2149a:	0180      	lsls	r0, r0, #6
   2149c:	e7f3      	b.n	21486 <gps_handler+0x19e>
   2149e:	4b12      	ldr	r3, [pc, #72]	; (214e8 <gps_handler+0x200>)
   214a0:	4812      	ldr	r0, [pc, #72]	; (214ec <gps_handler+0x204>)
		LOG_INF("GPS_EVT_AGPS_DATA_NEEDED");
   214a2:	4920      	ldr	r1, [pc, #128]	; (21524 <gps_handler+0x23c>)
   214a4:	1ac0      	subs	r0, r0, r3
   214a6:	08c0      	lsrs	r0, r0, #3
   214a8:	0180      	lsls	r0, r0, #6
   214aa:	f040 0003 	orr.w	r0, r0, #3
   214ae:	f020 f9b7 	bl	41820 <log_string_sync>
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   214b2:	f854 0f08 	ldr.w	r0, [r4, #8]!
   214b6:	4b1c      	ldr	r3, [pc, #112]	; (21528 <gps_handler+0x240>)
   214b8:	6861      	ldr	r1, [r4, #4]
		k_delayed_work_submit_to_queue(&application_work_q,
   214ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   214be:	c303      	stmia	r3!, {r0, r1}
   214c0:	68a0      	ldr	r0, [r4, #8]
		k_delayed_work_submit_to_queue(&application_work_q,
   214c2:	491a      	ldr	r1, [pc, #104]	; (2152c <gps_handler+0x244>)
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   214c4:	6018      	str	r0, [r3, #0]
		k_delayed_work_submit_to_queue(&application_work_q,
   214c6:	2300      	movs	r3, #0
   214c8:	4819      	ldr	r0, [pc, #100]	; (21530 <gps_handler+0x248>)
   214ca:	f01c fd83 	bl	3dfd4 <k_delayed_work_submit_to_queue>
		break;
   214ce:	e736      	b.n	2133e <gps_handler+0x56>
   214d0:	4b05      	ldr	r3, [pc, #20]	; (214e8 <gps_handler+0x200>)
   214d2:	4806      	ldr	r0, [pc, #24]	; (214ec <gps_handler+0x204>)
		LOG_INF("GPS_EVT_ERROR\n");
   214d4:	4917      	ldr	r1, [pc, #92]	; (21534 <gps_handler+0x24c>)
   214d6:	1ac0      	subs	r0, r0, r3
   214d8:	08c0      	lsrs	r0, r0, #3
   214da:	0180      	lsls	r0, r0, #6
   214dc:	f040 0003 	orr.w	r0, r0, #3
   214e0:	f020 f99e 	bl	41820 <log_string_sync>
   214e4:	e72b      	b.n	2133e <gps_handler+0x56>
   214e6:	bf00      	nop
   214e8:	000463bc 	.word	0x000463bc
   214ec:	000463cc 	.word	0x000463cc
   214f0:	00047822 	.word	0x00047822
   214f4:	20020e70 	.word	0x20020e70
   214f8:	00047839 	.word	0x00047839
   214fc:	00047850 	.word	0x00047850
   21500:	00047867 	.word	0x00047867
   21504:	00047891 	.word	0x00047891
   21508:	2002a5f2 	.word	0x2002a5f2
   2150c:	000478a1 	.word	0x000478a1
   21510:	20020000 	.word	0x20020000
   21514:	000478bd 	.word	0x000478bd
   21518:	2002462c 	.word	0x2002462c
   2151c:	000478e1 	.word	0x000478e1
   21520:	000478fb 	.word	0x000478fb
   21524:	00047917 	.word	0x00047917
   21528:	200245e8 	.word	0x200245e8
   2152c:	200217f0 	.word	0x200217f0
   21530:	20020cc8 	.word	0x20020cc8
   21534:	00047930 	.word	0x00047930

00021538 <date_time_event_handler>:
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

static void date_time_event_handler(const struct date_time_evt *evt)
{
   21538:	b508      	push	{r3, lr}
   2153a:	7803      	ldrb	r3, [r0, #0]
   2153c:	2b03      	cmp	r3, #3
   2153e:	d80d      	bhi.n	2155c <date_time_event_handler+0x24>
   21540:	e8df f003 	tbb	[pc, r3]
   21544:	1f181102 	.word	0x1f181102
   21548:	4811      	ldr	r0, [pc, #68]	; (21590 <date_time_event_handler+0x58>)
   2154a:	4b12      	ldr	r3, [pc, #72]	; (21594 <date_time_event_handler+0x5c>)
	switch (evt->type) {
	case DATE_TIME_OBTAINED_MODEM:
		LOG_INF("DATE_TIME_OBTAINED_MODEM");
   2154c:	4912      	ldr	r1, [pc, #72]	; (21598 <date_time_event_handler+0x60>)
   2154e:	1ac0      	subs	r0, r0, r3
   21550:	08c0      	lsrs	r0, r0, #3
   21552:	0180      	lsls	r0, r0, #6
		break;
	case DATE_TIME_OBTAINED_EXT:
		LOG_INF("DATE_TIME_OBTAINED_EXT");
		break;
	case DATE_TIME_NOT_OBTAINED:
		LOG_INF("DATE_TIME_NOT_OBTAINED");
   21554:	f040 0003 	orr.w	r0, r0, #3
   21558:	f020 f962 	bl	41820 <log_string_sync>

	/* Do not depend on obtained time, continue upon any event from the
	 * date time library.
	 */
	k_sem_give(&date_time_obtained);
}
   2155c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
   21560:	480e      	ldr	r0, [pc, #56]	; (2159c <date_time_event_handler+0x64>)
   21562:	f01c bac9 	b.w	3daf8 <z_impl_k_sem_give>
   21566:	480a      	ldr	r0, [pc, #40]	; (21590 <date_time_event_handler+0x58>)
   21568:	4b0a      	ldr	r3, [pc, #40]	; (21594 <date_time_event_handler+0x5c>)
		LOG_INF("DATE_TIME_OBTAINED_NTP");
   2156a:	490d      	ldr	r1, [pc, #52]	; (215a0 <date_time_event_handler+0x68>)
   2156c:	1ac0      	subs	r0, r0, r3
   2156e:	08c0      	lsrs	r0, r0, #3
   21570:	0180      	lsls	r0, r0, #6
   21572:	e7ef      	b.n	21554 <date_time_event_handler+0x1c>
   21574:	4806      	ldr	r0, [pc, #24]	; (21590 <date_time_event_handler+0x58>)
   21576:	4b07      	ldr	r3, [pc, #28]	; (21594 <date_time_event_handler+0x5c>)
		LOG_INF("DATE_TIME_OBTAINED_EXT");
   21578:	490a      	ldr	r1, [pc, #40]	; (215a4 <date_time_event_handler+0x6c>)
   2157a:	1ac0      	subs	r0, r0, r3
   2157c:	08c0      	lsrs	r0, r0, #3
   2157e:	0180      	lsls	r0, r0, #6
   21580:	e7e8      	b.n	21554 <date_time_event_handler+0x1c>
   21582:	4803      	ldr	r0, [pc, #12]	; (21590 <date_time_event_handler+0x58>)
   21584:	4b03      	ldr	r3, [pc, #12]	; (21594 <date_time_event_handler+0x5c>)
		LOG_INF("DATE_TIME_NOT_OBTAINED");
   21586:	4908      	ldr	r1, [pc, #32]	; (215a8 <date_time_event_handler+0x70>)
   21588:	1ac0      	subs	r0, r0, r3
   2158a:	08c0      	lsrs	r0, r0, #3
   2158c:	0180      	lsls	r0, r0, #6
   2158e:	e7e1      	b.n	21554 <date_time_event_handler+0x1c>
   21590:	000463cc 	.word	0x000463cc
   21594:	000463bc 	.word	0x000463bc
   21598:	0004793f 	.word	0x0004793f
   2159c:	20020c30 	.word	0x20020c30
   215a0:	00047958 	.word	0x00047958
   215a4:	0004796f 	.word	0x0004796f
   215a8:	00047986 	.word	0x00047986

000215ac <cloud_cmd_handler>:
{
   215ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   215ae:	8803      	ldrh	r3, [r0, #0]
   215b0:	2b08      	cmp	r3, #8
   215b2:	d10c      	bne.n	215ce <cloud_cmd_handler+0x22>
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   215b4:	7883      	ldrb	r3, [r0, #2]
   215b6:	2b01      	cmp	r3, #1
   215b8:	d166      	bne.n	21688 <cloud_cmd_handler+0xdc>
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   215ba:	f990 0010 	ldrsb.w	r0, [r0, #16]
   215be:	1e43      	subs	r3, r0, #1
   215c0:	4258      	negs	r0, r3
   215c2:	4158      	adcs	r0, r3
}
   215c4:	b003      	add	sp, #12
   215c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   215ca:	f7ff bc19 	b.w	20e00 <set_gps_enable>
	} else if ((cmd->channel == CLOUD_CHANNEL_MODEM) &&
   215ce:	f241 420a 	movw	r2, #5130	; 0x140a
   215d2:	4293      	cmp	r3, r2
   215d4:	d144      	bne.n	21660 <cloud_cmd_handler+0xb4>
		   (cmd->group == CLOUD_CMD_GROUP_COMMAND) &&
   215d6:	7883      	ldrb	r3, [r0, #2]
   215d8:	2b07      	cmp	r3, #7
   215da:	d155      	bne.n	21688 <cloud_cmd_handler+0xdc>
		cloud_cmd_handle_modem_at_cmd(cmd->data.data_string);
   215dc:	6884      	ldr	r4, [r0, #8]
	if (!at_cmd) {
   215de:	2c00      	cmp	r4, #0
   215e0:	f000 8091 	beq.w	21706 <cloud_cmd_handler+0x15a>
	return z_impl_k_sem_take(sem, timeout);
   215e4:	f44f 7224 	mov.w	r2, #656	; 0x290
   215e8:	2300      	movs	r3, #0
   215ea:	4848      	ldr	r0, [pc, #288]	; (2170c <cloud_cmd_handler+0x160>)
   215ec:	f01c fac8 	bl	3db80 <z_impl_k_sem_take>
	if (k_sem_take(&modem_at_cmd_sem, K_MSEC(20)) != 0) {
   215f0:	4605      	mov	r5, r0
   215f2:	b178      	cbz	r0, 21614 <cloud_cmd_handler+0x68>
   215f4:	4b46      	ldr	r3, [pc, #280]	; (21710 <cloud_cmd_handler+0x164>)
   215f6:	4847      	ldr	r0, [pc, #284]	; (21714 <cloud_cmd_handler+0x168>)
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   215f8:	4a47      	ldr	r2, [pc, #284]	; (21718 <cloud_cmd_handler+0x16c>)
   215fa:	1ac0      	subs	r0, r0, r3
   215fc:	f240 3365 	movw	r3, #869	; 0x365
   21600:	08c0      	lsrs	r0, r0, #3
   21602:	4946      	ldr	r1, [pc, #280]	; (2171c <cloud_cmd_handler+0x170>)
   21604:	0180      	lsls	r0, r0, #6
   21606:	f040 0001 	orr.w	r0, r0, #1
}
   2160a:	b003      	add	sp, #12
   2160c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   21610:	f020 b906 	b.w	41820 <log_string_sync>
	if (strnlen(at_cmd, max_cmd_len) == max_cmd_len) {
   21614:	f640 218d 	movw	r1, #2701	; 0xa8d
   21618:	4620      	mov	r0, r4
   2161a:	f023 fd89 	bl	45130 <strnlen>
   2161e:	f640 228d 	movw	r2, #2701	; 0xa8d
   21622:	4290      	cmp	r0, r2
   21624:	d117      	bne.n	21656 <cloud_cmd_handler+0xaa>
		LOG_ERR("[%s:%d] AT cmd is too long, max length is %zu",
   21626:	f640 238c 	movw	r3, #2700	; 0xa8c
   2162a:	4839      	ldr	r0, [pc, #228]	; (21710 <cloud_cmd_handler+0x164>)
   2162c:	4c39      	ldr	r4, [pc, #228]	; (21714 <cloud_cmd_handler+0x168>)
   2162e:	9300      	str	r3, [sp, #0]
   21630:	1a24      	subs	r4, r4, r0
   21632:	08e4      	lsrs	r4, r4, #3
   21634:	01a4      	lsls	r4, r4, #6
   21636:	f240 336e 	movw	r3, #878	; 0x36e
   2163a:	4a37      	ldr	r2, [pc, #220]	; (21718 <cloud_cmd_handler+0x16c>)
   2163c:	4938      	ldr	r1, [pc, #224]	; (21720 <cloud_cmd_handler+0x174>)
   2163e:	f044 0001 	orr.w	r0, r4, #1
   21642:	f020 f8ed 	bl	41820 <log_string_sync>
		modem_at_cmd_buff[0] = '\0';
   21646:	4b37      	ldr	r3, [pc, #220]	; (21724 <cloud_cmd_handler+0x178>)
   21648:	701d      	strb	r5, [r3, #0]
	k_work_submit_to_queue(&application_work_q, &send_modem_at_cmd_work);
   2164a:	4837      	ldr	r0, [pc, #220]	; (21728 <cloud_cmd_handler+0x17c>)
}
   2164c:	b003      	add	sp, #12
   2164e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			k_work_submit_to_queue(&application_work_q,
   21652:	f7ff bd91 	b.w	21178 <k_work_submit_to_queue.constprop.0>
		strcpy(modem_at_cmd_buff, at_cmd);
   21656:	4621      	mov	r1, r4
   21658:	4832      	ldr	r0, [pc, #200]	; (21724 <cloud_cmd_handler+0x178>)
   2165a:	f023 fd28 	bl	450ae <__strcpy_chk>
   2165e:	e7f4      	b.n	2164a <cloud_cmd_handler+0x9e>
	} else if ((cmd->channel == CLOUD_CHANNEL_RGB_LED) &&
   21660:	f5b3 6fa1 	cmp.w	r3, #1288	; 0x508
   21664:	d110      	bne.n	21688 <cloud_cmd_handler+0xdc>
		   (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   21666:	7883      	ldrb	r3, [r0, #2]
   21668:	2b05      	cmp	r3, #5
   2166a:	d10d      	bne.n	21688 <cloud_cmd_handler+0xdc>
		ui_led_set_color(((uint32_t)cmd->data.sv.value >> 16) & 0xFF,
   2166c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   21670:	f7fb fb64 	bl	1cd3c <__aeabi_d2uiz>
   21674:	b2c2      	uxtb	r2, r0
   21676:	f3c0 2107 	ubfx	r1, r0, #8, #8
   2167a:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
   2167e:	b003      	add	sp, #12
   21680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		ui_led_set_color(((uint32_t)cmd->data.sv.value >> 16) & 0xFF,
   21684:	f01f be2c 	b.w	412e0 <ui_led_set_color>
	} else if ((cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   21688:	6803      	ldr	r3, [r0, #0]
   2168a:	4a28      	ldr	r2, [pc, #160]	; (2172c <cloud_cmd_handler+0x180>)
   2168c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
   21690:	4293      	cmp	r3, r2
   21692:	d11b      	bne.n	216cc <cloud_cmd_handler+0x120>
		if (cmd->channel == CLOUD_CHANNEL_LIGHT_SENSOR) {
   21694:	7842      	ldrb	r2, [r0, #1]
   21696:	2a0e      	cmp	r2, #14
   21698:	d035      	beq.n	21706 <cloud_cmd_handler+0x15a>
		} else if (cmd->channel == CLOUD_CHANNEL_ENVIRONMENT) {
   2169a:	2a07      	cmp	r2, #7
   2169c:	d108      	bne.n	216b0 <cloud_cmd_handler+0x104>
			env_sensors_set_send_interval(
   2169e:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   216a2:	f7fb fb4b 	bl	1cd3c <__aeabi_d2uiz>
}
   216a6:	b003      	add	sp, #12
   216a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			env_sensors_set_send_interval(
   216ac:	f002 b9a6 	b.w	239fc <env_sensors_set_send_interval>
		} else if (cmd->channel == CLOUD_CHANNEL_GPS) {
   216b0:	b34a      	cbz	r2, 21706 <cloud_cmd_handler+0x15a>
   216b2:	4b17      	ldr	r3, [pc, #92]	; (21710 <cloud_cmd_handler+0x164>)
   216b4:	4817      	ldr	r0, [pc, #92]	; (21714 <cloud_cmd_handler+0x168>)
			LOG_ERR("Interval command not valid for channel %d",
   216b6:	491e      	ldr	r1, [pc, #120]	; (21730 <cloud_cmd_handler+0x184>)
   216b8:	1ac0      	subs	r0, r0, r3
   216ba:	08c0      	lsrs	r0, r0, #3
   216bc:	0180      	lsls	r0, r0, #6
   216be:	f040 0001 	orr.w	r0, r0, #1
}
   216c2:	b003      	add	sp, #12
   216c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Interval command not valid for channel %d",
   216c8:	f020 b8aa 	b.w	41820 <log_string_sync>
	} else if ((cmd->group == CLOUD_CMD_GROUP_GET) &&
   216cc:	2b04      	cmp	r3, #4
   216ce:	d11a      	bne.n	21706 <cloud_cmd_handler+0x15a>
		if (cmd->channel == CLOUD_CHANNEL_FLIP) {
   216d0:	7843      	ldrb	r3, [r0, #1]
   216d2:	2b01      	cmp	r3, #1
   216d4:	d101      	bne.n	216da <cloud_cmd_handler+0x12e>
			k_work_submit_to_queue(&application_work_q,
   216d6:	4817      	ldr	r0, [pc, #92]	; (21734 <cloud_cmd_handler+0x188>)
   216d8:	e7b8      	b.n	2164c <cloud_cmd_handler+0xa0>
		} else if (cmd->channel == CLOUD_CHANNEL_DEVICE_INFO) {
   216da:	2b0d      	cmp	r3, #13
   216dc:	d101      	bne.n	216e2 <cloud_cmd_handler+0x136>
			k_work_submit_to_queue(&application_work_q,
   216de:	4816      	ldr	r0, [pc, #88]	; (21738 <cloud_cmd_handler+0x18c>)
   216e0:	e7b4      	b.n	2164c <cloud_cmd_handler+0xa0>
		} else if (cmd->channel == CLOUD_CHANNEL_LTE_LINK_RSRP) {
   216e2:	2b0c      	cmp	r3, #12
   216e4:	d108      	bne.n	216f8 <cloud_cmd_handler+0x14c>
			k_delayed_work_submit_to_queue(&application_work_q,
   216e6:	2200      	movs	r2, #0
   216e8:	2300      	movs	r3, #0
   216ea:	4914      	ldr	r1, [pc, #80]	; (2173c <cloud_cmd_handler+0x190>)
   216ec:	4814      	ldr	r0, [pc, #80]	; (21740 <cloud_cmd_handler+0x194>)
}
   216ee:	b003      	add	sp, #12
   216f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			k_delayed_work_submit_to_queue(&application_work_q,
   216f4:	f01c bc6e 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
		} else if (cmd->channel == CLOUD_CHANNEL_ENVIRONMENT) {
   216f8:	2b07      	cmp	r3, #7
   216fa:	d104      	bne.n	21706 <cloud_cmd_handler+0x15a>
}
   216fc:	b003      	add	sp, #12
   216fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			env_sensors_poll();
   21702:	f002 b803 	b.w	2370c <env_sensors_poll>
}
   21706:	b003      	add	sp, #12
   21708:	bd30      	pop	{r4, r5, pc}
   2170a:	bf00      	nop
   2170c:	20020c78 	.word	0x20020c78
   21710:	000463bc 	.word	0x000463bc
   21714:	000463cc 	.word	0x000463cc
   21718:	000482dc 	.word	0x000482dc
   2171c:	0004799d 	.word	0x0004799d
   21720:	000479bf 	.word	0x000479bf
   21724:	2002a646 	.word	0x2002a646
   21728:	20024638 	.word	0x20024638
   2172c:	00040008 	.word	0x00040008
   21730:	000479ed 	.word	0x000479ed
   21734:	20024610 	.word	0x20024610
   21738:	20024604 	.word	0x20024604
   2173c:	200217c0 	.word	0x200217c0
   21740:	20020cc8 	.word	0x20020cc8

00021744 <send_modem_at_cmd_work_fn>:
{
   21744:	b530      	push	{r4, r5, lr}
   21746:	b091      	sub	sp, #68	; 0x44
	struct cloud_channel_data modem_data = {
   21748:	2218      	movs	r2, #24
   2174a:	2100      	movs	r1, #0
   2174c:	a804      	add	r0, sp, #16
   2174e:	f023 faea 	bl	44d26 <memset>
   21752:	2314      	movs	r3, #20
	struct cloud_msg msg = {
   21754:	2218      	movs	r2, #24
   21756:	2100      	movs	r1, #0
   21758:	a80a      	add	r0, sp, #40	; 0x28
	struct cloud_channel_data modem_data = {
   2175a:	f88d 3010 	strb.w	r3, [sp, #16]
	struct cloud_msg msg = {
   2175e:	f023 fae2 	bl	44d26 <memset>
	size_t len = strlen(modem_at_cmd_buff);
   21762:	4831      	ldr	r0, [pc, #196]	; (21828 <send_modem_at_cmd_work_fn+0xe4>)
   21764:	f7fb fd7a 	bl	1d25c <strlen>
	if (len == 0) {
   21768:	4d2f      	ldr	r5, [pc, #188]	; (21828 <send_modem_at_cmd_work_fn+0xe4>)
   2176a:	bb68      	cbnz	r0, 217c8 <send_modem_at_cmd_work_fn+0x84>
		state = AT_CMD_ERROR;
   2176c:	2301      	movs	r3, #1
		err = -ENOBUFS;
   2176e:	f06f 0468 	mvn.w	r4, #104	; 0x68
		state = AT_CMD_ERROR;
   21772:	f88d 300f 	strb.w	r3, [sp, #15]
	len = strlen(modem_at_cmd_buff);
   21776:	482c      	ldr	r0, [pc, #176]	; (21828 <send_modem_at_cmd_work_fn+0xe4>)
   21778:	f7fb fd70 	bl	1d25c <strlen>
	if (err) {
   2177c:	b374      	cbz	r4, 217dc <send_modem_at_cmd_work_fn+0x98>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   2177e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   21782:	f640 218d 	movw	r1, #2701	; 0xa8d
   21786:	9300      	str	r3, [sp, #0]
   21788:	4a28      	ldr	r2, [pc, #160]	; (2182c <send_modem_at_cmd_work_fn+0xe8>)
   2178a:	4623      	mov	r3, r4
   2178c:	4826      	ldr	r0, [pc, #152]	; (21828 <send_modem_at_cmd_work_fn+0xe4>)
   2178e:	f01e f9fd 	bl	3fb8c <sniprintf>
	modem_data.data.len = len;
   21792:	e9cd 5005 	strd	r5, r0, [sp, #20]
	err = cloud_encode_data(&modem_data, CLOUD_CMD_GROUP_COMMAND, &msg);
   21796:	210a      	movs	r1, #10
   21798:	aa0a      	add	r2, sp, #40	; 0x28
   2179a:	a804      	add	r0, sp, #16
   2179c:	f001 f908 	bl	229b0 <cloud_encode_data>
	if (err) {
   217a0:	b360      	cbz	r0, 217fc <send_modem_at_cmd_work_fn+0xb8>
   217a2:	4b23      	ldr	r3, [pc, #140]	; (21830 <send_modem_at_cmd_work_fn+0xec>)
   217a4:	4c23      	ldr	r4, [pc, #140]	; (21834 <send_modem_at_cmd_work_fn+0xf0>)
		LOG_ERR("[%s:%d] cloud_encode_data failed with error %d",
   217a6:	4a24      	ldr	r2, [pc, #144]	; (21838 <send_modem_at_cmd_work_fn+0xf4>)
   217a8:	1ae4      	subs	r4, r4, r3
   217aa:	f240 236a 	movw	r3, #618	; 0x26a
   217ae:	08e4      	lsrs	r4, r4, #3
   217b0:	4922      	ldr	r1, [pc, #136]	; (2183c <send_modem_at_cmd_work_fn+0xf8>)
   217b2:	01a4      	lsls	r4, r4, #6
   217b4:	9000      	str	r0, [sp, #0]
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   217b6:	f044 0001 	orr.w	r0, r4, #1
   217ba:	f020 f831 	bl	41820 <log_string_sync>
	z_impl_k_sem_give(sem);
   217be:	4820      	ldr	r0, [pc, #128]	; (21840 <send_modem_at_cmd_work_fn+0xfc>)
   217c0:	f01c f99a 	bl	3daf8 <z_impl_k_sem_give>
}
   217c4:	b011      	add	sp, #68	; 0x44
   217c6:	bd30      	pop	{r4, r5, pc}
		err = at_cmd_write(modem_at_cmd_buff, modem_at_cmd_buff,
   217c8:	f640 228d 	movw	r2, #2701	; 0xa8d
   217cc:	4629      	mov	r1, r5
   217ce:	4628      	mov	r0, r5
   217d0:	f10d 030f 	add.w	r3, sp, #15
   217d4:	f009 f94a 	bl	2aa6c <at_cmd_write>
   217d8:	4604      	mov	r4, r0
   217da:	e7cc      	b.n	21776 <send_modem_at_cmd_work_fn+0x32>
	} else if (len == 0) {
   217dc:	b928      	cbnz	r0, 217ea <send_modem_at_cmd_work_fn+0xa6>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   217de:	4919      	ldr	r1, [pc, #100]	; (21844 <send_modem_at_cmd_work_fn+0x100>)
   217e0:	4811      	ldr	r0, [pc, #68]	; (21828 <send_modem_at_cmd_work_fn+0xe4>)
   217e2:	f023 fc5c 	bl	4509e <strcpy>
   217e6:	2004      	movs	r0, #4
   217e8:	e7d3      	b.n	21792 <send_modem_at_cmd_work_fn+0x4e>
	} else if (len > MODEM_AT_CMD_MAX_RESPONSE_LEN) {
   217ea:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   217ee:	d9d0      	bls.n	21792 <send_modem_at_cmd_work_fn+0x4e>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   217f0:	4915      	ldr	r1, [pc, #84]	; (21848 <send_modem_at_cmd_work_fn+0x104>)
   217f2:	480d      	ldr	r0, [pc, #52]	; (21828 <send_modem_at_cmd_work_fn+0xe4>)
   217f4:	f023 fc53 	bl	4509e <strcpy>
   217f8:	2032      	movs	r0, #50	; 0x32
   217fa:	e7ca      	b.n	21792 <send_modem_at_cmd_work_fn+0x4e>
		err = cloud_send(cloud_backend, &msg);
   217fc:	4b13      	ldr	r3, [pc, #76]	; (2184c <send_modem_at_cmd_work_fn+0x108>)
   217fe:	a90a      	add	r1, sp, #40	; 0x28
   21800:	6818      	ldr	r0, [r3, #0]
   21802:	f01f fd37 	bl	41274 <cloud_send>
   21806:	4605      	mov	r5, r0
   21808:	980a      	ldr	r0, [sp, #40]	; 0x28
   2180a:	f023 fa2f 	bl	44c6c <k_free>
		if (err) {
   2180e:	2d00      	cmp	r5, #0
   21810:	d0d5      	beq.n	217be <send_modem_at_cmd_work_fn+0x7a>
   21812:	4c08      	ldr	r4, [pc, #32]	; (21834 <send_modem_at_cmd_work_fn+0xf0>)
   21814:	4806      	ldr	r0, [pc, #24]	; (21830 <send_modem_at_cmd_work_fn+0xec>)
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   21816:	f44f 731c 	mov.w	r3, #624	; 0x270
   2181a:	1a24      	subs	r4, r4, r0
   2181c:	08e4      	lsrs	r4, r4, #3
   2181e:	4a06      	ldr	r2, [pc, #24]	; (21838 <send_modem_at_cmd_work_fn+0xf4>)
   21820:	490b      	ldr	r1, [pc, #44]	; (21850 <send_modem_at_cmd_work_fn+0x10c>)
   21822:	01a4      	lsls	r4, r4, #6
   21824:	9500      	str	r5, [sp, #0]
   21826:	e7c6      	b.n	217b6 <send_modem_at_cmd_work_fn+0x72>
   21828:	2002a646 	.word	0x2002a646
   2182c:	00047a17 	.word	0x00047a17
   21830:	000463bc 	.word	0x000463bc
   21834:	000463cc 	.word	0x000463cc
   21838:	000482c2 	.word	0x000482c2
   2183c:	00047a6a 	.word	0x00047a6a
   21840:	20020c78 	.word	0x20020c78
   21844:	00047a32 	.word	0x00047a32
   21848:	00047a37 	.word	0x00047a37
   2184c:	200245fc 	.word	0x200245fc
   21850:	00047a99 	.word	0x00047a99

00021854 <error_handler>:
{
   21854:	b510      	push	{r4, lr}
   21856:	4604      	mov	r4, r0
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   21858:	2100      	movs	r1, #0
   2185a:	4806      	ldr	r0, [pc, #24]	; (21874 <error_handler+0x20>)
   2185c:	f01f fd13 	bl	41286 <atomic_set>
	if (err_type == ERROR_CLOUD) {
   21860:	b90c      	cbnz	r4, 21866 <error_handler+0x12>
		shutdown_modem();
   21862:	f7ff fa55 	bl	20d10 <shutdown_modem>
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   21866:	f003 f9e9 	bl	24c3c <z_impl_log_panic>
}
   2186a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sys_reboot(0);
   2186e:	2000      	movs	r0, #0
   21870:	f004 bcd6 	b.w	26220 <sys_reboot>
   21874:	200245f8 	.word	0x200245f8

00021878 <k_sys_fatal_error_handler>:
{
   21878:	b510      	push	{r4, lr}
   2187a:	4604      	mov	r4, r0
   2187c:	f003 f9de 	bl	24c3c <z_impl_log_panic>
   21880:	4806      	ldr	r0, [pc, #24]	; (2189c <k_sys_fatal_error_handler+0x24>)
   21882:	4b07      	ldr	r3, [pc, #28]	; (218a0 <k_sys_fatal_error_handler+0x28>)
	LOG_ERR("Running main.c error handler");
   21884:	4907      	ldr	r1, [pc, #28]	; (218a4 <k_sys_fatal_error_handler+0x2c>)
   21886:	1a1b      	subs	r3, r3, r0
   21888:	08db      	lsrs	r3, r3, #3
   2188a:	019b      	lsls	r3, r3, #6
   2188c:	f043 0001 	orr.w	r0, r3, #1
   21890:	f01f ffc6 	bl	41820 <log_string_sync>
	error_handler(ERROR_SYSTEM_FAULT, reason);
   21894:	4621      	mov	r1, r4
   21896:	2003      	movs	r0, #3
   21898:	f7ff ffdc 	bl	21854 <error_handler>
	CODE_UNREACHABLE;
   2189c:	000463bc 	.word	0x000463bc
   218a0:	000463cc 	.word	0x000463cc
   218a4:	00047ac1 	.word	0x00047ac1

000218a8 <env_data_send>:
	struct cloud_msg msg = {
   218a8:	2218      	movs	r2, #24
{
   218aa:	b510      	push	{r4, lr}
   218ac:	b08c      	sub	sp, #48	; 0x30
	struct cloud_msg msg = {
   218ae:	2100      	movs	r1, #0
   218b0:	eb0d 0002 	add.w	r0, sp, r2
   218b4:	f023 fa37 	bl	44d26 <memset>
	if (!data_send_enabled()) {
   218b8:	f7ff fa98 	bl	20dec <data_send_enabled>
   218bc:	b128      	cbz	r0, 218ca <env_data_send+0x22>
	if (gps_control_is_active()) {
   218be:	f001 fd6d 	bl	2339c <gps_control_is_active>
   218c2:	b120      	cbz	r0, 218ce <env_data_send+0x26>
		env_sensors_set_backoff_enable(true);
   218c4:	2001      	movs	r0, #1
   218c6:	f002 f8c7 	bl	23a58 <env_sensors_set_backoff_enable>
}
   218ca:	b00c      	add	sp, #48	; 0x30
   218cc:	bd10      	pop	{r4, pc}
	env_sensors_set_backoff_enable(false);
   218ce:	f002 f8c3 	bl	23a58 <env_sensors_set_backoff_enable>
	if (env_sensors_get_temperature(&env_data) == 0) {
   218d2:	4668      	mov	r0, sp
   218d4:	f001 ff84 	bl	237e0 <env_sensors_get_temperature>
   218d8:	b338      	cbz	r0, 2192a <env_data_send+0x82>
	if (env_sensors_get_humidity(&env_data) == 0) {
   218da:	4668      	mov	r0, sp
   218dc:	f001 ffda 	bl	23894 <env_sensors_get_humidity>
   218e0:	2800      	cmp	r0, #0
   218e2:	d049      	beq.n	21978 <env_data_send+0xd0>
	if (env_sensors_get_pressure(&env_data) == 0) {
   218e4:	4668      	mov	r0, sp
   218e6:	f002 f82f 	bl	23948 <env_sensors_get_pressure>
   218ea:	2800      	cmp	r0, #0
   218ec:	d05d      	beq.n	219aa <env_data_send+0x102>
	if (env_sensors_get_air_quality(&env_data) == 0) {
   218ee:	4668      	mov	r0, sp
   218f0:	f01f fd3c 	bl	4136c <env_sensors_get_air_quality>
   218f4:	2800      	cmp	r0, #0
   218f6:	d1e8      	bne.n	218ca <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_QUAL,
   218f8:	ed9d 0b02 	vldr	d0, [sp, #8]
   218fc:	200b      	movs	r0, #11
   218fe:	f001 fcab 	bl	23258 <cloud_is_send_allowed>
   21902:	2800      	cmp	r0, #0
   21904:	d0e1      	beq.n	218ca <env_data_send+0x22>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   21906:	4668      	mov	r0, sp
   21908:	a906      	add	r1, sp, #24
   2190a:	f001 f8ed 	bl	22ae8 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   2190e:	2800      	cmp	r0, #0
   21910:	d1db      	bne.n	218ca <env_data_send+0x22>
			err = cloud_send(cloud_backend, &msg);
   21912:	4b32      	ldr	r3, [pc, #200]	; (219dc <env_data_send+0x134>)
   21914:	a906      	add	r1, sp, #24
   21916:	6818      	ldr	r0, [r3, #0]
   21918:	f01f fcac 	bl	41274 <cloud_send>
   2191c:	4604      	mov	r4, r0
   2191e:	9806      	ldr	r0, [sp, #24]
   21920:	f023 f9a4 	bl	44c6c <k_free>
			if (err) {
   21924:	2c00      	cmp	r4, #0
   21926:	d0d0      	beq.n	218ca <env_data_send+0x22>
   21928:	e017      	b.n	2195a <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   2192a:	ed9d 0b02 	vldr	d0, [sp, #8]
   2192e:	2008      	movs	r0, #8
   21930:	f001 fc92 	bl	23258 <cloud_is_send_allowed>
   21934:	2800      	cmp	r0, #0
   21936:	d0d0      	beq.n	218da <env_data_send+0x32>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   21938:	4668      	mov	r0, sp
   2193a:	a906      	add	r1, sp, #24
   2193c:	f001 f8d4 	bl	22ae8 <cloud_encode_env_sensors_data>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   21940:	2800      	cmp	r0, #0
   21942:	d1ca      	bne.n	218da <env_data_send+0x32>
			err = cloud_send(cloud_backend, &msg);
   21944:	4b25      	ldr	r3, [pc, #148]	; (219dc <env_data_send+0x134>)
   21946:	a906      	add	r1, sp, #24
   21948:	6818      	ldr	r0, [r3, #0]
   2194a:	f01f fc93 	bl	41274 <cloud_send>
   2194e:	4604      	mov	r4, r0
   21950:	9806      	ldr	r0, [sp, #24]
   21952:	f023 f98b 	bl	44c6c <k_free>
			if (err) {
   21956:	2c00      	cmp	r4, #0
   21958:	d0bf      	beq.n	218da <env_data_send+0x32>
   2195a:	4b21      	ldr	r3, [pc, #132]	; (219e0 <env_data_send+0x138>)
   2195c:	4821      	ldr	r0, [pc, #132]	; (219e4 <env_data_send+0x13c>)
	LOG_ERR("sensor_data_send failed: %d", err);
   2195e:	4622      	mov	r2, r4
   21960:	1ac0      	subs	r0, r0, r3
   21962:	08c0      	lsrs	r0, r0, #3
   21964:	0180      	lsls	r0, r0, #6
   21966:	4920      	ldr	r1, [pc, #128]	; (219e8 <env_data_send+0x140>)
   21968:	f040 0001 	orr.w	r0, r0, #1
   2196c:	f01f ff58 	bl	41820 <log_string_sync>
	cloud_error_handler(err);
   21970:	4620      	mov	r0, r4
   21972:	f01f fca6 	bl	412c2 <cloud_error_handler>
   21976:	e7a8      	b.n	218ca <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_HUMID,
   21978:	ed9d 0b02 	vldr	d0, [sp, #8]
   2197c:	2009      	movs	r0, #9
   2197e:	f001 fc6b 	bl	23258 <cloud_is_send_allowed>
   21982:	2800      	cmp	r0, #0
   21984:	d0ae      	beq.n	218e4 <env_data_send+0x3c>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   21986:	4668      	mov	r0, sp
   21988:	a906      	add	r1, sp, #24
   2198a:	f001 f8ad 	bl	22ae8 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   2198e:	2800      	cmp	r0, #0
   21990:	d1a8      	bne.n	218e4 <env_data_send+0x3c>
			err = cloud_send(cloud_backend, &msg);
   21992:	4b12      	ldr	r3, [pc, #72]	; (219dc <env_data_send+0x134>)
   21994:	a906      	add	r1, sp, #24
   21996:	6818      	ldr	r0, [r3, #0]
   21998:	f01f fc6c 	bl	41274 <cloud_send>
   2199c:	4604      	mov	r4, r0
   2199e:	9806      	ldr	r0, [sp, #24]
   219a0:	f023 f964 	bl	44c6c <k_free>
			if (err) {
   219a4:	2c00      	cmp	r4, #0
   219a6:	d09d      	beq.n	218e4 <env_data_send+0x3c>
   219a8:	e7d7      	b.n	2195a <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_PRESS,
   219aa:	ed9d 0b02 	vldr	d0, [sp, #8]
   219ae:	200a      	movs	r0, #10
   219b0:	f001 fc52 	bl	23258 <cloud_is_send_allowed>
   219b4:	2800      	cmp	r0, #0
   219b6:	d09a      	beq.n	218ee <env_data_send+0x46>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   219b8:	4668      	mov	r0, sp
   219ba:	a906      	add	r1, sp, #24
   219bc:	f001 f894 	bl	22ae8 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   219c0:	2800      	cmp	r0, #0
   219c2:	d194      	bne.n	218ee <env_data_send+0x46>
			err = cloud_send(cloud_backend, &msg);
   219c4:	4b05      	ldr	r3, [pc, #20]	; (219dc <env_data_send+0x134>)
   219c6:	a906      	add	r1, sp, #24
   219c8:	6818      	ldr	r0, [r3, #0]
   219ca:	f01f fc53 	bl	41274 <cloud_send>
   219ce:	4604      	mov	r4, r0
   219d0:	9806      	ldr	r0, [sp, #24]
   219d2:	f023 f94b 	bl	44c6c <k_free>
			if (err) {
   219d6:	2c00      	cmp	r4, #0
   219d8:	d089      	beq.n	218ee <env_data_send+0x46>
   219da:	e7be      	b.n	2195a <env_data_send+0xb2>
   219dc:	200245fc 	.word	0x200245fc
   219e0:	000463bc 	.word	0x000463bc
   219e4:	000463cc 	.word	0x000463cc
   219e8:	00047ade 	.word	0x00047ade

000219ec <motion_data_send>:
{
   219ec:	b510      	push	{r4, lr}
   219ee:	b086      	sub	sp, #24
	if (!flip_mode_enabled || !data_send_enabled() ||
   219f0:	f7ff f9fc 	bl	20dec <data_send_enabled>
   219f4:	b320      	cbz	r0, 21a40 <motion_data_send+0x54>
	    gps_control_is_active()) {
   219f6:	f001 fcd1 	bl	2339c <gps_control_is_active>
	if (!flip_mode_enabled || !data_send_enabled() ||
   219fa:	4601      	mov	r1, r0
   219fc:	bb00      	cbnz	r0, 21a40 <motion_data_send+0x54>
	struct cloud_msg msg = {
   219fe:	2218      	movs	r2, #24
   21a00:	4668      	mov	r0, sp
   21a02:	f023 f990 	bl	44d26 <memset>
	if (cloud_encode_motion_data(&last_motion_data, &msg) == 0) {
   21a06:	4669      	mov	r1, sp
   21a08:	480e      	ldr	r0, [pc, #56]	; (21a44 <motion_data_send+0x58>)
   21a0a:	f001 f8c7 	bl	22b9c <cloud_encode_motion_data>
   21a0e:	b9b8      	cbnz	r0, 21a40 <motion_data_send+0x54>
		err = cloud_send(cloud_backend, &msg);
   21a10:	4b0d      	ldr	r3, [pc, #52]	; (21a48 <motion_data_send+0x5c>)
   21a12:	4669      	mov	r1, sp
   21a14:	6818      	ldr	r0, [r3, #0]
   21a16:	f01f fc2d 	bl	41274 <cloud_send>
   21a1a:	4604      	mov	r4, r0
   21a1c:	9800      	ldr	r0, [sp, #0]
   21a1e:	f023 f925 	bl	44c6c <k_free>
		if (err) {
   21a22:	b16c      	cbz	r4, 21a40 <motion_data_send+0x54>
   21a24:	4809      	ldr	r0, [pc, #36]	; (21a4c <motion_data_send+0x60>)
   21a26:	4b0a      	ldr	r3, [pc, #40]	; (21a50 <motion_data_send+0x64>)
			LOG_ERR("Transmisison of motion data failed: %d", err);
   21a28:	4622      	mov	r2, r4
   21a2a:	1a1b      	subs	r3, r3, r0
   21a2c:	08db      	lsrs	r3, r3, #3
   21a2e:	019b      	lsls	r3, r3, #6
   21a30:	f043 0001 	orr.w	r0, r3, #1
   21a34:	4907      	ldr	r1, [pc, #28]	; (21a54 <motion_data_send+0x68>)
   21a36:	f01f fef3 	bl	41820 <log_string_sync>
			cloud_error_handler(err);
   21a3a:	4620      	mov	r0, r4
   21a3c:	f01f fc41 	bl	412c2 <cloud_error_handler>
}
   21a40:	b006      	add	sp, #24
   21a42:	bd10      	pop	{r4, pc}
   21a44:	20020e78 	.word	0x20020e78
   21a48:	200245fc 	.word	0x200245fc
   21a4c:	000463bc 	.word	0x000463bc
   21a50:	000463cc 	.word	0x000463cc
   21a54:	00047afa 	.word	0x00047afa

00021a58 <device_status_send>:
{
   21a58:	b570      	push	{r4, r5, r6, lr}
   21a5a:	b092      	sub	sp, #72	; 0x48
	if (!data_send_enabled() || gps_control_is_active()) {
   21a5c:	f7ff f9c6 	bl	20dec <data_send_enabled>
   21a60:	2800      	cmp	r0, #0
   21a62:	d03e      	beq.n	21ae2 <device_status_send+0x8a>
   21a64:	f001 fc9a 	bl	2339c <gps_control_is_active>
   21a68:	4606      	mov	r6, r0
   21a6a:	2800      	cmp	r0, #0
   21a6c:	d139      	bne.n	21ae2 <device_status_send+0x8a>
	ret = modem_info_params_get(&modem_param);
   21a6e:	482c      	ldr	r0, [pc, #176]	; (21b20 <device_status_send+0xc8>)
   21a70:	f00a fcc4 	bl	2c3fc <modem_info_params_get>
	if (ret < 0) {
   21a74:	1e02      	subs	r2, r0, #0
   21a76:	da36      	bge.n	21ae6 <device_status_send+0x8e>
   21a78:	482a      	ldr	r0, [pc, #168]	; (21b24 <device_status_send+0xcc>)
   21a7a:	4b2b      	ldr	r3, [pc, #172]	; (21b28 <device_status_send+0xd0>)
		LOG_ERR("Unable to obtain modem parameters: %d", ret);
   21a7c:	492b      	ldr	r1, [pc, #172]	; (21b2c <device_status_send+0xd4>)
   21a7e:	1a1b      	subs	r3, r3, r0
   21a80:	08db      	lsrs	r3, r3, #3
   21a82:	019b      	lsls	r3, r3, #6
   21a84:	f043 0001 	orr.w	r0, r3, #1
   21a88:	f01f feca 	bl	41820 <log_string_sync>
	const char *const ui[] = {
   21a8c:	4d28      	ldr	r5, [pc, #160]	; (21b30 <device_status_send+0xd8>)
   21a8e:	ac06      	add	r4, sp, #24
   21a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21a94:	e895 0003 	ldmia.w	r5, {r0, r1}
	const char *const fota[] = {
   21a98:	4b26      	ldr	r3, [pc, #152]	; (21b34 <device_status_send+0xdc>)
	const char *const ui[] = {
   21a9a:	e884 0003 	stmia.w	r4, {r0, r1}
	const char *const fota[] = {
   21a9e:	9304      	str	r3, [sp, #16]
	struct cloud_msg msg = {
   21aa0:	ac0c      	add	r4, sp, #48	; 0x30
	const char *const fota[] = {
   21aa2:	4b25      	ldr	r3, [pc, #148]	; (21b38 <device_status_send+0xe0>)
	struct cloud_msg msg = {
   21aa4:	2218      	movs	r2, #24
   21aa6:	2100      	movs	r1, #0
   21aa8:	4620      	mov	r0, r4
	const char *const fota[] = {
   21aaa:	9305      	str	r3, [sp, #20]
	struct cloud_msg msg = {
   21aac:	f023 f93b 	bl	44d26 <memset>
   21ab0:	2301      	movs	r3, #1
	ret = cloud_encode_device_status_data(modem_ptr,
   21ab2:	e9cd 3401 	strd	r3, r4, [sp, #4]
	struct cloud_msg msg = {
   21ab6:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	ret = cloud_encode_device_status_data(modem_ptr,
   21aba:	2302      	movs	r3, #2
   21abc:	2206      	movs	r2, #6
   21abe:	9300      	str	r3, [sp, #0]
   21ac0:	4630      	mov	r0, r6
   21ac2:	ab04      	add	r3, sp, #16
   21ac4:	a906      	add	r1, sp, #24
   21ac6:	f001 f8b5 	bl	22c34 <cloud_encode_device_status_data>
	if (ret) {
   21aca:	b170      	cbz	r0, 21aea <device_status_send+0x92>
   21acc:	4a15      	ldr	r2, [pc, #84]	; (21b24 <device_status_send+0xcc>)
   21ace:	4b16      	ldr	r3, [pc, #88]	; (21b28 <device_status_send+0xd0>)
		LOG_ERR("Unable to encode cloud data: %d", ret);
   21ad0:	491a      	ldr	r1, [pc, #104]	; (21b3c <device_status_send+0xe4>)
   21ad2:	1a9b      	subs	r3, r3, r2
   21ad4:	08db      	lsrs	r3, r3, #3
   21ad6:	019b      	lsls	r3, r3, #6
   21ad8:	4602      	mov	r2, r0
   21ada:	f043 0001 	orr.w	r0, r3, #1
   21ade:	f01f fe9f 	bl	41820 <log_string_sync>
}
   21ae2:	b012      	add	sp, #72	; 0x48
   21ae4:	bd70      	pop	{r4, r5, r6, pc}
		modem_ptr = &modem_param;
   21ae6:	4e0e      	ldr	r6, [pc, #56]	; (21b20 <device_status_send+0xc8>)
   21ae8:	e7d0      	b.n	21a8c <device_status_send+0x34>
		ret = cloud_send(cloud_backend, &msg);
   21aea:	4b15      	ldr	r3, [pc, #84]	; (21b40 <device_status_send+0xe8>)
   21aec:	4621      	mov	r1, r4
   21aee:	6818      	ldr	r0, [r3, #0]
   21af0:	f01f fbc0 	bl	41274 <cloud_send>
   21af4:	4604      	mov	r4, r0
   21af6:	980c      	ldr	r0, [sp, #48]	; 0x30
   21af8:	f023 f8b8 	bl	44c6c <k_free>
		if (ret) {
   21afc:	2c00      	cmp	r4, #0
   21afe:	d0f0      	beq.n	21ae2 <device_status_send+0x8a>
   21b00:	4808      	ldr	r0, [pc, #32]	; (21b24 <device_status_send+0xcc>)
   21b02:	4b09      	ldr	r3, [pc, #36]	; (21b28 <device_status_send+0xd0>)
			LOG_ERR("sensor_data_send failed: %d", ret);
   21b04:	4622      	mov	r2, r4
   21b06:	1a1b      	subs	r3, r3, r0
   21b08:	08db      	lsrs	r3, r3, #3
   21b0a:	019b      	lsls	r3, r3, #6
   21b0c:	f043 0001 	orr.w	r0, r3, #1
   21b10:	490c      	ldr	r1, [pc, #48]	; (21b44 <device_status_send+0xec>)
   21b12:	f01f fe85 	bl	41820 <log_string_sync>
			cloud_error_handler(ret);
   21b16:	4620      	mov	r0, r4
   21b18:	f01f fbd3 	bl	412c2 <cloud_error_handler>
   21b1c:	e7e1      	b.n	21ae2 <device_status_send+0x8a>
   21b1e:	bf00      	nop
   21b20:	20020ed8 	.word	0x20020ed8
   21b24:	000463bc 	.word	0x000463bc
   21b28:	000463cc 	.word	0x000463cc
   21b2c:	00047b21 	.word	0x00047b21
   21b30:	00046530 	.word	0x00046530
   21b34:	0004754b 	.word	0x0004754b
   21b38:	00047952 	.word	0x00047952
   21b3c:	000475f9 	.word	0x000475f9
   21b40:	200245fc 	.word	0x200245fc
   21b44:	00047ade 	.word	0x00047ade

00021b48 <device_config_send>:
{
   21b48:	b570      	push	{r4, r5, r6, lr}
   21b4a:	b086      	sub	sp, #24
	struct cloud_msg msg = {
   21b4c:	2218      	movs	r2, #24
   21b4e:	2100      	movs	r1, #0
   21b50:	4668      	mov	r0, sp
   21b52:	f023 f8e8 	bl	44d26 <memset>
   21b56:	2301      	movs	r3, #1
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   21b58:	2000      	movs	r0, #0
	struct cloud_msg msg = {
   21b5a:	f8ad 300c 	strh.w	r3, [sp, #12]
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   21b5e:	f001 fac3 	bl	230e8 <cloud_get_channel_enable_state>
	if (gps_cfg_state == CLOUD_CMD_STATE_UNDEFINED) {
   21b62:	1c43      	adds	r3, r0, #1
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   21b64:	4605      	mov	r5, r0
	if (gps_cfg_state == CLOUD_CMD_STATE_UNDEFINED) {
   21b66:	d00a      	beq.n	21b7e <device_config_send+0x36>
	if (gps_control_is_active() && gps_cfg_state == CLOUD_CMD_STATE_FALSE) {
   21b68:	f001 fc18 	bl	2339c <gps_control_is_active>
   21b6c:	b148      	cbz	r0, 21b82 <device_config_send+0x3a>
   21b6e:	b945      	cbnz	r5, 21b82 <device_config_send+0x3a>
		k_delayed_work_submit_to_queue(&application_work_q,
   21b70:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   21b74:	2300      	movs	r3, #0
   21b76:	491e      	ldr	r1, [pc, #120]	; (21bf0 <device_config_send+0xa8>)
   21b78:	481e      	ldr	r0, [pc, #120]	; (21bf4 <device_config_send+0xac>)
   21b7a:	f01c fa2b 	bl	3dfd4 <k_delayed_work_submit_to_queue>
}
   21b7e:	b006      	add	sp, #24
   21b80:	bd70      	pop	{r4, r5, r6, pc}
	ret = cloud_encode_config_data(&msg);
   21b82:	4668      	mov	r0, sp
   21b84:	f001 fac8 	bl	23118 <cloud_encode_config_data>
	if (ret) {
   21b88:	b180      	cbz	r0, 21bac <device_config_send+0x64>
   21b8a:	4a1b      	ldr	r2, [pc, #108]	; (21bf8 <device_config_send+0xb0>)
   21b8c:	4b1b      	ldr	r3, [pc, #108]	; (21bfc <device_config_send+0xb4>)
		LOG_ERR("Unable to encode cloud data: %d", ret);
   21b8e:	491c      	ldr	r1, [pc, #112]	; (21c00 <device_config_send+0xb8>)
   21b90:	1a9b      	subs	r3, r3, r2
   21b92:	08db      	lsrs	r3, r3, #3
   21b94:	019b      	lsls	r3, r3, #6
   21b96:	4602      	mov	r2, r0
   21b98:	f043 0001 	orr.w	r0, r3, #1
   21b9c:	f01f fe40 	bl	41820 <log_string_sync>
	if (gps_cfg_state == CLOUD_CMD_STATE_TRUE) {
   21ba0:	2d01      	cmp	r5, #1
   21ba2:	d1ec      	bne.n	21b7e <device_config_send+0x36>
		gps_control_start(0);
   21ba4:	2000      	movs	r0, #0
   21ba6:	f001 fce1 	bl	2356c <gps_control_start>
   21baa:	e7e8      	b.n	21b7e <device_config_send+0x36>
	} else if (msg.len && msg.buf) {
   21bac:	9b01      	ldr	r3, [sp, #4]
   21bae:	2b00      	cmp	r3, #0
   21bb0:	d0f6      	beq.n	21ba0 <device_config_send+0x58>
   21bb2:	9b00      	ldr	r3, [sp, #0]
   21bb4:	2b00      	cmp	r3, #0
   21bb6:	d0f3      	beq.n	21ba0 <device_config_send+0x58>
		ret = cloud_send(cloud_backend, &msg);
   21bb8:	4b12      	ldr	r3, [pc, #72]	; (21c04 <device_config_send+0xbc>)
   21bba:	4669      	mov	r1, sp
   21bbc:	6818      	ldr	r0, [r3, #0]
   21bbe:	f01f fb59 	bl	41274 <cloud_send>
   21bc2:	4606      	mov	r6, r0
   21bc4:	9800      	ldr	r0, [sp, #0]
   21bc6:	f023 f851 	bl	44c6c <k_free>
		if (ret) {
   21bca:	2e00      	cmp	r6, #0
   21bcc:	d0e8      	beq.n	21ba0 <device_config_send+0x58>
   21bce:	480a      	ldr	r0, [pc, #40]	; (21bf8 <device_config_send+0xb0>)
   21bd0:	4c0a      	ldr	r4, [pc, #40]	; (21bfc <device_config_send+0xb4>)
			LOG_ERR("%s failed: %d", __func__, ret);
   21bd2:	4633      	mov	r3, r6
   21bd4:	1a24      	subs	r4, r4, r0
   21bd6:	08e4      	lsrs	r4, r4, #3
   21bd8:	01a4      	lsls	r4, r4, #6
   21bda:	f044 0001 	orr.w	r0, r4, #1
   21bde:	4a0a      	ldr	r2, [pc, #40]	; (21c08 <device_config_send+0xc0>)
   21be0:	490a      	ldr	r1, [pc, #40]	; (21c0c <device_config_send+0xc4>)
   21be2:	f01f fe1d 	bl	41820 <log_string_sync>
			cloud_error_handler(ret);
   21be6:	4630      	mov	r0, r6
   21be8:	f01f fb6b 	bl	412c2 <cloud_error_handler>
   21bec:	e7d8      	b.n	21ba0 <device_config_send+0x58>
   21bee:	bf00      	nop
   21bf0:	20020e40 	.word	0x20020e40
   21bf4:	20020cc8 	.word	0x20020cc8
   21bf8:	000463bc 	.word	0x000463bc
   21bfc:	000463cc 	.word	0x000463cc
   21c00:	000475f9 	.word	0x000475f9
   21c04:	200245fc 	.word	0x200245fc
   21c08:	000482fa 	.word	0x000482fa
   21c0c:	00047b47 	.word	0x00047b47

00021c10 <cloud_connect_error_handler>:
{
   21c10:	b538      	push	{r3, r4, r5, lr}
	if (err == CLOUD_CONNECT_RES_SUCCESS) {
   21c12:	4605      	mov	r5, r0
   21c14:	2800      	cmp	r0, #0
   21c16:	d058      	beq.n	21cca <cloud_connect_error_handler+0xba>
   21c18:	4b2c      	ldr	r3, [pc, #176]	; (21ccc <cloud_connect_error_handler+0xbc>)
   21c1a:	4c2d      	ldr	r4, [pc, #180]	; (21cd0 <cloud_connect_error_handler+0xc0>)
	LOG_ERR("Failed to connect to cloud, error %d", err);
   21c1c:	4602      	mov	r2, r0
   21c1e:	1ae4      	subs	r4, r4, r3
   21c20:	08e4      	lsrs	r4, r4, #3
   21c22:	01a4      	lsls	r4, r4, #6
   21c24:	492b      	ldr	r1, [pc, #172]	; (21cd4 <cloud_connect_error_handler+0xc4>)
   21c26:	f044 0001 	orr.w	r0, r4, #1
   21c2a:	350b      	adds	r5, #11
   21c2c:	f01f fdf8 	bl	41820 <log_string_sync>
	switch (err) {
   21c30:	2d0a      	cmp	r5, #10
   21c32:	d848      	bhi.n	21cc6 <cloud_connect_error_handler+0xb6>
   21c34:	e8df f005 	tbb	[pc, r5]
   21c38:	3f414345 	.word	0x3f414345
   21c3c:	1d2c473d 	.word	0x1d2c473d
   21c40:	4717      	.short	0x4717
   21c42:	06          	.byte	0x06
   21c43:	00          	.byte	0x00
		LOG_ERR("Cloud back-end has not been initialized");
   21c44:	4924      	ldr	r1, [pc, #144]	; (21cd8 <cloud_connect_error_handler+0xc8>)
   21c46:	f044 0001 	orr.w	r0, r4, #1
   21c4a:	f01f fde9 	bl	41820 <log_string_sync>
	ui_led_set_pattern(UI_LED_ERROR_CLOUD);
   21c4e:	f44f 6010 	mov.w	r0, #2304	; 0x900
   21c52:	f000 fd3b 	bl	226cc <ui_led_set_pattern>
	shutdown_modem();
   21c56:	f7ff f85b 	bl	20d10 <shutdown_modem>
	return z_impl_k_current_get();
   21c5a:	f01b ff47 	bl	3daec <z_impl_k_current_get>
}
   21c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_suspend(thread);
   21c62:	f01b ba97 	b.w	3d194 <z_impl_k_thread_suspend>
		LOG_ERR("Network error, check cloud configuration");
   21c66:	491d      	ldr	r1, [pc, #116]	; (21cdc <cloud_connect_error_handler+0xcc>)
		LOG_ERR("Unhandled connect error");
   21c68:	f044 0001 	orr.w	r0, r4, #1
   21c6c:	f01f fdd8 	bl	41820 <log_string_sync>
	if (reboot) {
   21c70:	e00e      	b.n	21c90 <cloud_connect_error_handler+0x80>
		if (cloud_backend && cloud_backend->config &&
   21c72:	4b1b      	ldr	r3, [pc, #108]	; (21ce0 <cloud_connect_error_handler+0xd0>)
   21c74:	681b      	ldr	r3, [r3, #0]
   21c76:	b1d3      	cbz	r3, 21cae <cloud_connect_error_handler+0x9e>
   21c78:	685b      	ldr	r3, [r3, #4]
   21c7a:	b1c3      	cbz	r3, 21cae <cloud_connect_error_handler+0x9e>
		    cloud_backend->config->name) {
   21c7c:	681a      	ldr	r2, [r3, #0]
	char *backend_name = "invalid";
   21c7e:	4b19      	ldr	r3, [pc, #100]	; (21ce4 <cloud_connect_error_handler+0xd4>)
   21c80:	2a00      	cmp	r2, #0
   21c82:	bf08      	it	eq
   21c84:	461a      	moveq	r2, r3
		LOG_ERR("An error occurred specific to the cloud back-end: %s",
   21c86:	4918      	ldr	r1, [pc, #96]	; (21ce8 <cloud_connect_error_handler+0xd8>)
   21c88:	f044 0001 	orr.w	r0, r4, #1
   21c8c:	f01f fdc8 	bl	41820 <log_string_sync>
		LOG_ERR("Device will reboot in %d seconds",
   21c90:	f044 0001 	orr.w	r0, r4, #1
   21c94:	f44f 7296 	mov.w	r2, #300	; 0x12c
   21c98:	4914      	ldr	r1, [pc, #80]	; (21cec <cloud_connect_error_handler+0xdc>)
   21c9a:	f01f fdc1 	bl	41820 <log_string_sync>
		k_delayed_work_submit_to_queue(
   21c9e:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   21ca2:	2300      	movs	r3, #0
   21ca4:	4912      	ldr	r1, [pc, #72]	; (21cf0 <cloud_connect_error_handler+0xe0>)
   21ca6:	4813      	ldr	r0, [pc, #76]	; (21cf4 <cloud_connect_error_handler+0xe4>)
   21ca8:	f01c f994 	bl	3dfd4 <k_delayed_work_submit_to_queue>
   21cac:	e7cf      	b.n	21c4e <cloud_connect_error_handler+0x3e>
	char *backend_name = "invalid";
   21cae:	4a0d      	ldr	r2, [pc, #52]	; (21ce4 <cloud_connect_error_handler+0xd4>)
   21cb0:	e7e9      	b.n	21c86 <cloud_connect_error_handler+0x76>
		LOG_ERR("Ensure device has a valid private key");
   21cb2:	4911      	ldr	r1, [pc, #68]	; (21cf8 <cloud_connect_error_handler+0xe8>)
   21cb4:	e7d8      	b.n	21c68 <cloud_connect_error_handler+0x58>
		LOG_ERR("Ensure device has a valid CA and client certificate");
   21cb6:	4911      	ldr	r1, [pc, #68]	; (21cfc <cloud_connect_error_handler+0xec>)
   21cb8:	e7d6      	b.n	21c68 <cloud_connect_error_handler+0x58>
		LOG_ERR("A certificate/authorization error has occurred");
   21cba:	4911      	ldr	r1, [pc, #68]	; (21d00 <cloud_connect_error_handler+0xf0>)
   21cbc:	e7d4      	b.n	21c68 <cloud_connect_error_handler+0x58>
		LOG_ERR("Connect timeout. SIM card may be out of data");
   21cbe:	4911      	ldr	r1, [pc, #68]	; (21d04 <cloud_connect_error_handler+0xf4>)
   21cc0:	e7d2      	b.n	21c68 <cloud_connect_error_handler+0x58>
		LOG_ERR("Connection already exists.");
   21cc2:	4911      	ldr	r1, [pc, #68]	; (21d08 <cloud_connect_error_handler+0xf8>)
   21cc4:	e7d0      	b.n	21c68 <cloud_connect_error_handler+0x58>
		LOG_ERR("Unhandled connect error");
   21cc6:	4911      	ldr	r1, [pc, #68]	; (21d0c <cloud_connect_error_handler+0xfc>)
   21cc8:	e7ce      	b.n	21c68 <cloud_connect_error_handler+0x58>
}
   21cca:	bd38      	pop	{r3, r4, r5, pc}
   21ccc:	000463bc 	.word	0x000463bc
   21cd0:	000463cc 	.word	0x000463cc
   21cd4:	00047b5d 	.word	0x00047b5d
   21cd8:	00047b82 	.word	0x00047b82
   21cdc:	00047baa 	.word	0x00047baa
   21ce0:	200245fc 	.word	0x200245fc
   21ce4:	00047b55 	.word	0x00047b55
   21ce8:	00047bd3 	.word	0x00047bd3
   21cec:	000475cb 	.word	0x000475cb
   21cf0:	20020de0 	.word	0x20020de0
   21cf4:	20020cc8 	.word	0x20020cc8
   21cf8:	00047c08 	.word	0x00047c08
   21cfc:	00047c2e 	.word	0x00047c2e
   21d00:	00047c62 	.word	0x00047c62
   21d04:	00047c91 	.word	0x00047c91
   21d08:	00047cbe 	.word	0x00047cbe
   21d0c:	00047cd9 	.word	0x00047cd9

00021d10 <cloud_connect_work_fn>:
{
   21d10:	b570      	push	{r4, r5, r6, lr}
   21d12:	4b21      	ldr	r3, [pc, #132]	; (21d98 <cloud_connect_work_fn+0x88>)
   21d14:	4c21      	ldr	r4, [pc, #132]	; (21d9c <cloud_connect_work_fn+0x8c>)
	LOG_INF("Connecting to cloud, attempt %d of %d",
   21d16:	4822      	ldr	r0, [pc, #136]	; (21da0 <cloud_connect_work_fn+0x90>)
   21d18:	1ae4      	subs	r4, r4, r3
   21d1a:	f01f fabc 	bl	41296 <atomic_get>
   21d1e:	08e4      	lsrs	r4, r4, #3
   21d20:	01a4      	lsls	r4, r4, #6
   21d22:	f044 0403 	orr.w	r4, r4, #3
   21d26:	4602      	mov	r2, r0
   21d28:	2308      	movs	r3, #8
   21d2a:	4620      	mov	r0, r4
   21d2c:	491d      	ldr	r1, [pc, #116]	; (21da4 <cloud_connect_work_fn+0x94>)
   21d2e:	f01f fd77 	bl	41820 <log_string_sync>
	k_delayed_work_submit_to_queue(&application_work_q,
   21d32:	2300      	movs	r3, #0
   21d34:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21d38:	491b      	ldr	r1, [pc, #108]	; (21da8 <cloud_connect_work_fn+0x98>)
   21d3a:	481c      	ldr	r0, [pc, #112]	; (21dac <cloud_connect_work_fn+0x9c>)
   21d3c:	f01c f94a 	bl	3dfd4 <k_delayed_work_submit_to_queue>
	ui_led_set_pattern(UI_CLOUD_CONNECTING);
   21d40:	f44f 6000 	mov.w	r0, #2048	; 0x800
   21d44:	f000 fcc2 	bl	226cc <ui_led_set_pattern>
	ret = cloud_connect(cloud_backend);
   21d48:	4b19      	ldr	r3, [pc, #100]	; (21db0 <cloud_connect_work_fn+0xa0>)
   21d4a:	6818      	ldr	r0, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   21d4c:	b170      	cbz	r0, 21d6c <cloud_connect_work_fn+0x5c>
   21d4e:	6803      	ldr	r3, [r0, #0]
   21d50:	b163      	cbz	r3, 21d6c <cloud_connect_work_fn+0x5c>
	    backend->api->connect == NULL) {
   21d52:	689b      	ldr	r3, [r3, #8]
	if (backend == NULL || backend->api == NULL ||
   21d54:	b153      	cbz	r3, 21d6c <cloud_connect_work_fn+0x5c>
	return backend->api->connect(backend);
   21d56:	4798      	blx	r3
	if (ret != CLOUD_CONNECT_RES_SUCCESS) {
   21d58:	4605      	mov	r5, r0
   21d5a:	b150      	cbz	r0, 21d72 <cloud_connect_work_fn+0x62>
		k_delayed_work_cancel(&cloud_reboot_work);
   21d5c:	4812      	ldr	r0, [pc, #72]	; (21da8 <cloud_connect_work_fn+0x98>)
   21d5e:	f01c f9c3 	bl	3e0e8 <k_delayed_work_cancel>
		cloud_connect_error_handler(ret);
   21d62:	b268      	sxtb	r0, r5
}
   21d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cloud_connect_error_handler(ret);
   21d68:	f7ff bf52 	b.w	21c10 <cloud_connect_error_handler>
		return CLOUD_CONNECT_RES_ERR_INVALID_PARAM;
   21d6c:	f06f 0501 	mvn.w	r5, #1
   21d70:	e7f4      	b.n	21d5c <cloud_connect_work_fn+0x4c>
		LOG_INF("Cloud connection request sent.");
   21d72:	4620      	mov	r0, r4
   21d74:	490f      	ldr	r1, [pc, #60]	; (21db4 <cloud_connect_work_fn+0xa4>)
   21d76:	f01f fd53 	bl	41820 <log_string_sync>
		LOG_INF("Connection response timeout is set to %d seconds.",
   21d7a:	4620      	mov	r0, r4
   21d7c:	221e      	movs	r2, #30
   21d7e:	490e      	ldr	r1, [pc, #56]	; (21db8 <cloud_connect_work_fn+0xa8>)
   21d80:	f01f fd4e 	bl	41820 <log_string_sync>
}
   21d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   21d88:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21d8c:	2300      	movs	r3, #0
   21d8e:	4906      	ldr	r1, [pc, #24]	; (21da8 <cloud_connect_work_fn+0x98>)
   21d90:	4806      	ldr	r0, [pc, #24]	; (21dac <cloud_connect_work_fn+0x9c>)
   21d92:	f01c b91f 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
   21d96:	bf00      	nop
   21d98:	000463bc 	.word	0x000463bc
   21d9c:	000463cc 	.word	0x000463cc
   21da0:	20024600 	.word	0x20024600
   21da4:	00047cf1 	.word	0x00047cf1
   21da8:	20020de0 	.word	0x20020de0
   21dac:	20020cc8 	.word	0x20020cc8
   21db0:	200245fc 	.word	0x200245fc
   21db4:	0004b944 	.word	0x0004b944
   21db8:	00047d17 	.word	0x00047d17

00021dbc <connect_to_cloud>:
{
   21dbc:	b570      	push	{r4, r5, r6, lr}
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   21dbe:	2100      	movs	r1, #0
{
   21dc0:	4604      	mov	r4, r0
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   21dc2:	4827      	ldr	r0, [pc, #156]	; (21e60 <connect_to_cloud+0xa4>)
   21dc4:	f01f fa5f 	bl	41286 <atomic_set>
	if (atomic_get(&carrier_requested_disconnect)) {
   21dc8:	4826      	ldr	r0, [pc, #152]	; (21e64 <connect_to_cloud+0xa8>)
   21dca:	f01f fa64 	bl	41296 <atomic_get>
   21dce:	2800      	cmp	r0, #0
   21dd0:	d144      	bne.n	21e5c <connect_to_cloud+0xa0>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   21dd2:	4825      	ldr	r0, [pc, #148]	; (21e68 <connect_to_cloud+0xac>)
   21dd4:	e8d0 3fef 	ldaex	r3, [r0]
   21dd8:	3301      	adds	r3, #1
   21dda:	e8c0 3fe2 	stlex	r2, r3, [r0]
   21dde:	2a00      	cmp	r2, #0
   21de0:	d1f8      	bne.n	21dd4 <connect_to_cloud+0x18>
	if (atomic_get(&cloud_connect_attempts) >
   21de2:	f01f fa58 	bl	41296 <atomic_get>
   21de6:	2808      	cmp	r0, #8
   21de8:	dd0d      	ble.n	21e06 <connect_to_cloud+0x4a>
   21dea:	4820      	ldr	r0, [pc, #128]	; (21e6c <connect_to_cloud+0xb0>)
   21dec:	4b20      	ldr	r3, [pc, #128]	; (21e70 <connect_to_cloud+0xb4>)
		LOG_ERR("The max cloud connection attempt count exceeded.");
   21dee:	4921      	ldr	r1, [pc, #132]	; (21e74 <connect_to_cloud+0xb8>)
   21df0:	1a1b      	subs	r3, r3, r0
   21df2:	08db      	lsrs	r3, r3, #3
   21df4:	019b      	lsls	r3, r3, #6
   21df6:	f043 0001 	orr.w	r0, r3, #1
   21dfa:	f01f fd11 	bl	41820 <log_string_sync>
		cloud_error_handler(-ETIMEDOUT);
   21dfe:	f06f 0073 	mvn.w	r0, #115	; 0x73
   21e02:	f01f fa5e 	bl	412c2 <cloud_error_handler>
	if (!initial_connect) {
   21e06:	4b1c      	ldr	r3, [pc, #112]	; (21e78 <connect_to_cloud+0xbc>)
   21e08:	781a      	ldrb	r2, [r3, #0]
   21e0a:	bb22      	cbnz	r2, 21e56 <connect_to_cloud+0x9a>
   21e0c:	4817      	ldr	r0, [pc, #92]	; (21e6c <connect_to_cloud+0xb0>)
   21e0e:	4b18      	ldr	r3, [pc, #96]	; (21e70 <connect_to_cloud+0xb4>)
		LOG_INF("Attempting reconnect in %d seconds...",
   21e10:	4622      	mov	r2, r4
   21e12:	1a1b      	subs	r3, r3, r0
   21e14:	08db      	lsrs	r3, r3, #3
   21e16:	019b      	lsls	r3, r3, #6
   21e18:	f043 0003 	orr.w	r0, r3, #3
   21e1c:	4917      	ldr	r1, [pc, #92]	; (21e7c <connect_to_cloud+0xc0>)
   21e1e:	f01f fcff 	bl	41820 <log_string_sync>
		k_delayed_work_cancel(&cloud_reboot_work);
   21e22:	4817      	ldr	r0, [pc, #92]	; (21e80 <connect_to_cloud+0xc4>)
   21e24:	f01c f960 	bl	3e0e8 <k_delayed_work_cancel>
				       K_SECONDS(connect_delay_s));
   21e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
			return (t * to_hz + off) / from_hz;
   21e2c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   21e30:	4344      	muls	r4, r0
   21e32:	2100      	movs	r1, #0
   21e34:	f240 30e7 	movw	r0, #999	; 0x3e7
   21e38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21e3c:	2300      	movs	r3, #0
   21e3e:	fbe5 0104 	umlal	r0, r1, r5, r4
   21e42:	f7fb f83b 	bl	1cebc <__aeabi_uldivmod>
}
   21e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21e4a:	4602      	mov	r2, r0
   21e4c:	460b      	mov	r3, r1
	k_delayed_work_submit_to_queue(&application_work_q,
   21e4e:	480d      	ldr	r0, [pc, #52]	; (21e84 <connect_to_cloud+0xc8>)
   21e50:	490d      	ldr	r1, [pc, #52]	; (21e88 <connect_to_cloud+0xcc>)
   21e52:	f01c b8bf 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
		initial_connect = false;
   21e56:	2200      	movs	r2, #0
   21e58:	701a      	strb	r2, [r3, #0]
   21e5a:	e7e5      	b.n	21e28 <connect_to_cloud+0x6c>
}
   21e5c:	bd70      	pop	{r4, r5, r6, pc}
   21e5e:	bf00      	nop
   21e60:	200245f8 	.word	0x200245f8
   21e64:	200245f4 	.word	0x200245f4
   21e68:	20024600 	.word	0x20024600
   21e6c:	000463bc 	.word	0x000463bc
   21e70:	000463cc 	.word	0x000463cc
   21e74:	00047d49 	.word	0x00047d49
   21e78:	20020934 	.word	0x20020934
   21e7c:	00047d7a 	.word	0x00047d7a
   21e80:	20020de0 	.word	0x20020de0
   21e84:	20020cc8 	.word	0x20020cc8
   21e88:	20020db0 	.word	0x20020db0

00021e8c <sensors_start>:
{
   21e8c:	b510      	push	{r4, lr}
	if (!started) {
   21e8e:	4c2d      	ldr	r4, [pc, #180]	; (21f44 <sensors_start+0xb8>)
   21e90:	7823      	ldrb	r3, [r4, #0]
   21e92:	2b00      	cmp	r3, #0
   21e94:	d149      	bne.n	21f2a <sensors_start+0x9e>
	err = motion_init_and_start(&application_work_q, motion_handler);
   21e96:	492c      	ldr	r1, [pc, #176]	; (21f48 <sensors_start+0xbc>)
   21e98:	482c      	ldr	r0, [pc, #176]	; (21f4c <sensors_start+0xc0>)
   21e9a:	f000 fb7f 	bl	2259c <motion_init_and_start>
	if (err) {
   21e9e:	b150      	cbz	r0, 21eb6 <sensors_start+0x2a>
   21ea0:	4a2b      	ldr	r2, [pc, #172]	; (21f50 <sensors_start+0xc4>)
   21ea2:	4b2c      	ldr	r3, [pc, #176]	; (21f54 <sensors_start+0xc8>)
		LOG_ERR("motion module init failed, error: %d", err);
   21ea4:	492c      	ldr	r1, [pc, #176]	; (21f58 <sensors_start+0xcc>)
   21ea6:	1a9b      	subs	r3, r3, r2
   21ea8:	08db      	lsrs	r3, r3, #3
   21eaa:	019b      	lsls	r3, r3, #6
   21eac:	4602      	mov	r2, r0
   21eae:	f043 0001 	orr.w	r0, r3, #1
   21eb2:	f01f fcb5 	bl	41820 <log_string_sync>
	err = env_sensors_init_and_start(&application_work_q, env_data_send);
   21eb6:	4929      	ldr	r1, [pc, #164]	; (21f5c <sensors_start+0xd0>)
   21eb8:	4824      	ldr	r0, [pc, #144]	; (21f4c <sensors_start+0xc0>)
   21eba:	f001 fc33 	bl	23724 <env_sensors_init_and_start>
	if (err) {
   21ebe:	b150      	cbz	r0, 21ed6 <sensors_start+0x4a>
   21ec0:	4a23      	ldr	r2, [pc, #140]	; (21f50 <sensors_start+0xc4>)
   21ec2:	4b24      	ldr	r3, [pc, #144]	; (21f54 <sensors_start+0xc8>)
		LOG_ERR("Environmental sensors init failed, error: %d", err);
   21ec4:	4926      	ldr	r1, [pc, #152]	; (21f60 <sensors_start+0xd4>)
   21ec6:	1a9b      	subs	r3, r3, r2
   21ec8:	08db      	lsrs	r3, r3, #3
   21eca:	019b      	lsls	r3, r3, #6
   21ecc:	4602      	mov	r2, r0
   21ece:	f043 0001 	orr.w	r0, r3, #1
   21ed2:	f01f fca5 	bl	41820 <log_string_sync>
	err = modem_info_init();
   21ed6:	f00a f9fb 	bl	2c2d0 <modem_info_init>
	if (err) {
   21eda:	b338      	cbz	r0, 21f2c <sensors_start+0xa0>
   21edc:	4a1c      	ldr	r2, [pc, #112]	; (21f50 <sensors_start+0xc4>)
   21ede:	4b1d      	ldr	r3, [pc, #116]	; (21f54 <sensors_start+0xc8>)
		LOG_ERR("Modem info could not be established: %d", err);
   21ee0:	4920      	ldr	r1, [pc, #128]	; (21f64 <sensors_start+0xd8>)
   21ee2:	1a9b      	subs	r3, r3, r2
   21ee4:	08db      	lsrs	r3, r3, #3
   21ee6:	019b      	lsls	r3, r3, #6
   21ee8:	4602      	mov	r2, r0
   21eea:	f043 0001 	orr.w	r0, r3, #1
   21eee:	f01f fc97 	bl	41820 <log_string_sync>
	k_work_submit_to_queue(&application_work_q, &device_status_work);
   21ef2:	481d      	ldr	r0, [pc, #116]	; (21f68 <sensors_start+0xdc>)
   21ef4:	f7ff f940 	bl	21178 <k_work_submit_to_queue.constprop.0>
	err = gps_control_init(&application_work_q, gps_handler);
   21ef8:	491c      	ldr	r1, [pc, #112]	; (21f6c <sensors_start+0xe0>)
   21efa:	4814      	ldr	r0, [pc, #80]	; (21f4c <sensors_start+0xc0>)
   21efc:	f001 fb78 	bl	235f0 <gps_control_init>
	if (err) {
   21f00:	b148      	cbz	r0, 21f16 <sensors_start+0x8a>
   21f02:	4814      	ldr	r0, [pc, #80]	; (21f54 <sensors_start+0xc8>)
   21f04:	4b12      	ldr	r3, [pc, #72]	; (21f50 <sensors_start+0xc4>)
		LOG_ERR("GPS could not be initialized");
   21f06:	491a      	ldr	r1, [pc, #104]	; (21f70 <sensors_start+0xe4>)
   21f08:	1ac0      	subs	r0, r0, r3
   21f0a:	08c0      	lsrs	r0, r0, #3
   21f0c:	0180      	lsls	r0, r0, #6
   21f0e:	f040 0001 	orr.w	r0, r0, #1
   21f12:	f01f fc85 	bl	41820 <log_string_sync>
		switch (cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS)) {
   21f16:	2000      	movs	r0, #0
   21f18:	f001 f8e6 	bl	230e8 <cloud_get_channel_enable_state>
		set_gps_enable(start_gps);
   21f1c:	1e43      	subs	r3, r0, #1
   21f1e:	4258      	negs	r0, r3
   21f20:	4158      	adcs	r0, r3
   21f22:	f7fe ff6d 	bl	20e00 <set_gps_enable>
		started = true;
   21f26:	2301      	movs	r3, #1
   21f28:	7023      	strb	r3, [r4, #0]
}
   21f2a:	bd10      	pop	{r4, pc}
	modem_info_params_init(&modem_param);
   21f2c:	4811      	ldr	r0, [pc, #68]	; (21f74 <sensors_start+0xe8>)
   21f2e:	f00a fa13 	bl	2c358 <modem_info_params_init>
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   21f32:	220c      	movs	r2, #12
   21f34:	4b10      	ldr	r3, [pc, #64]	; (21f78 <sensors_start+0xec>)
	modem_info_rsrp_register(modem_rsrp_handler);
   21f36:	4811      	ldr	r0, [pc, #68]	; (21f7c <sensors_start+0xf0>)
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   21f38:	701a      	strb	r2, [r3, #0]
	signal_strength_cloud_data.tag = 0x1;
   21f3a:	2201      	movs	r2, #1
   21f3c:	60da      	str	r2, [r3, #12]
	modem_info_rsrp_register(modem_rsrp_handler);
   21f3e:	f00a f999 	bl	2c274 <modem_info_rsrp_register>
   21f42:	e7d6      	b.n	21ef2 <sensors_start+0x66>
   21f44:	2002b0d3 	.word	0x2002b0d3
   21f48:	000212a9 	.word	0x000212a9
   21f4c:	20020cc8 	.word	0x20020cc8
   21f50:	000463bc 	.word	0x000463bc
   21f54:	000463cc 	.word	0x000463cc
   21f58:	00047da0 	.word	0x00047da0
   21f5c:	000218a9 	.word	0x000218a9
   21f60:	00047dc5 	.word	0x00047dc5
   21f64:	00047df2 	.word	0x00047df2
   21f68:	20024604 	.word	0x20024604
   21f6c:	000212e9 	.word	0x000212e9
   21f70:	00047e1a 	.word	0x00047e1a
   21f74:	20020ed8 	.word	0x20020ed8
   21f78:	20021820 	.word	0x20021820
   21f7c:	00021135 	.word	0x00021135

00021f80 <on_pairing_done>:
{
   21f80:	b510      	push	{r4, lr}
	if (atomic_get(&cloud_association) ==
   21f82:	4814      	ldr	r0, [pc, #80]	; (21fd4 <on_pairing_done+0x54>)
   21f84:	f01f f987 	bl	41296 <atomic_get>
   21f88:	2801      	cmp	r0, #1
   21f8a:	d11d      	bne.n	21fc8 <on_pairing_done+0x48>
		k_delayed_work_cancel(&cycle_cloud_connection_work);
   21f8c:	4812      	ldr	r0, [pc, #72]	; (21fd8 <on_pairing_done+0x58>)
   21f8e:	f01c f8ab 	bl	3e0e8 <k_delayed_work_cancel>
   21f92:	4c12      	ldr	r4, [pc, #72]	; (21fdc <on_pairing_done+0x5c>)
   21f94:	4b12      	ldr	r3, [pc, #72]	; (21fe0 <on_pairing_done+0x60>)
		LOG_INF("Device associated with cloud.");
   21f96:	4913      	ldr	r1, [pc, #76]	; (21fe4 <on_pairing_done+0x64>)
   21f98:	1ae4      	subs	r4, r4, r3
   21f9a:	08e4      	lsrs	r4, r4, #3
   21f9c:	01a4      	lsls	r4, r4, #6
   21f9e:	f044 0403 	orr.w	r4, r4, #3
   21fa2:	4620      	mov	r0, r4
   21fa4:	f01f fc3c 	bl	41820 <log_string_sync>
		LOG_INF("Reconnecting for cloud policy to take effect.");
   21fa8:	4620      	mov	r0, r4
   21faa:	490f      	ldr	r1, [pc, #60]	; (21fe8 <on_pairing_done+0x68>)
   21fac:	f01f fc38 	bl	41820 <log_string_sync>
		atomic_set(&cloud_association,
   21fb0:	2103      	movs	r1, #3
   21fb2:	4808      	ldr	r0, [pc, #32]	; (21fd4 <on_pairing_done+0x54>)
   21fb4:	f01f f967 	bl	41286 <atomic_set>
}
   21fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   21fbc:	2200      	movs	r2, #0
   21fbe:	2300      	movs	r3, #0
   21fc0:	4905      	ldr	r1, [pc, #20]	; (21fd8 <on_pairing_done+0x58>)
   21fc2:	480a      	ldr	r0, [pc, #40]	; (21fec <on_pairing_done+0x6c>)
   21fc4:	f01c b806 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_PAIRED);
   21fc8:	2102      	movs	r1, #2
}
   21fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_PAIRED);
   21fce:	4801      	ldr	r0, [pc, #4]	; (21fd4 <on_pairing_done+0x54>)
   21fd0:	f01f b959 	b.w	41286 <atomic_set>
   21fd4:	200245f8 	.word	0x200245f8
   21fd8:	20020e10 	.word	0x20020e10
   21fdc:	000463cc 	.word	0x000463cc
   21fe0:	000463bc 	.word	0x000463bc
   21fe4:	00047e37 	.word	0x00047e37
   21fe8:	00047e55 	.word	0x00047e55
   21fec:	20020cc8 	.word	0x20020cc8

00021ff0 <cloud_event_handler>:
{
   21ff0:	b570      	push	{r4, r5, r6, lr}
   21ff2:	4b7f      	ldr	r3, [pc, #508]	; (221f0 <cloud_event_handler+0x200>)
   21ff4:	4c7f      	ldr	r4, [pc, #508]	; (221f4 <cloud_event_handler+0x204>)
	switch (evt->type) {
   21ff6:	780a      	ldrb	r2, [r1, #0]
   21ff8:	1ae4      	subs	r4, r4, r3
   21ffa:	08e4      	lsrs	r4, r4, #3
{
   21ffc:	460e      	mov	r6, r1
   21ffe:	01a4      	lsls	r4, r4, #6
   22000:	2a0a      	cmp	r2, #10
   22002:	f200 80f1 	bhi.w	221e8 <cloud_event_handler+0x1f8>
   22006:	e8df f012 	tbh	[pc, r2, lsl #1]
   2200a:	000b      	.short	0x000b
   2200c:	000b000b 	.word	0x000b000b
   22010:	00950082 	.word	0x00950082
   22014:	009e009c 	.word	0x009e009c
   22018:	00da00b6 	.word	0x00da00b6
   2201c:	00e300ef 	.word	0x00e300ef
	if (evt->type == CLOUD_EVT_CONNECTING) {
   22020:	b9a2      	cbnz	r2, 2204c <cloud_event_handler+0x5c>
		LOG_INF("CLOUD_EVT_CONNECTING");
   22022:	4975      	ldr	r1, [pc, #468]	; (221f8 <cloud_event_handler+0x208>)
   22024:	f044 0003 	orr.w	r0, r4, #3
   22028:	f01f fbfa 	bl	41820 <log_string_sync>
		ui_led_set_pattern(UI_CLOUD_CONNECTING);
   2202c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   22030:	f000 fb4c 	bl	226cc <ui_led_set_pattern>
		k_delayed_work_cancel(&cloud_reboot_work);
   22034:	4871      	ldr	r0, [pc, #452]	; (221fc <cloud_event_handler+0x20c>)
   22036:	f01c f857 	bl	3e0e8 <k_delayed_work_cancel>
		if (evt->data.err != CLOUD_CONNECT_RES_SUCCESS) {
   2203a:	6870      	ldr	r0, [r6, #4]
   2203c:	2800      	cmp	r0, #0
   2203e:	f000 80d5 	beq.w	221ec <cloud_event_handler+0x1fc>
}
   22042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			cloud_connect_error_handler(evt->data.err);
   22046:	b240      	sxtb	r0, r0
   22048:	f7ff bde2 	b.w	21c10 <cloud_connect_error_handler>
	} else if (evt->type == CLOUD_EVT_CONNECTED) {
   2204c:	2a01      	cmp	r2, #1
   2204e:	d118      	bne.n	22082 <cloud_event_handler+0x92>
		LOG_INF("CLOUD_EVT_CONNECTED");
   22050:	f044 0403 	orr.w	r4, r4, #3
   22054:	4620      	mov	r0, r4
   22056:	496a      	ldr	r1, [pc, #424]	; (22200 <cloud_event_handler+0x210>)
   22058:	f01f fbe2 	bl	41820 <log_string_sync>
		k_delayed_work_cancel(&cloud_reboot_work);
   2205c:	4867      	ldr	r0, [pc, #412]	; (221fc <cloud_event_handler+0x20c>)
   2205e:	f01c f843 	bl	3e0e8 <k_delayed_work_cancel>
	return z_impl_k_sem_take(sem, timeout);
   22062:	2200      	movs	r2, #0
   22064:	2300      	movs	r3, #0
   22066:	4867      	ldr	r0, [pc, #412]	; (22204 <cloud_event_handler+0x214>)
   22068:	f01b fd8a 	bl	3db80 <z_impl_k_sem_take>
		atomic_set(&cloud_connect_attempts, 0);
   2206c:	2100      	movs	r1, #0
   2206e:	4866      	ldr	r0, [pc, #408]	; (22208 <cloud_event_handler+0x218>)
   22070:	f01f f909 	bl	41286 <atomic_set>
		LOG_INF("Persistent Sessions = %u",
   22074:	4620      	mov	r0, r4
   22076:	7932      	ldrb	r2, [r6, #4]
   22078:	4964      	ldr	r1, [pc, #400]	; (2220c <cloud_event_handler+0x21c>)
}
   2207a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   2207e:	f01f bbcf 	b.w	41820 <log_string_sync>
		LOG_INF("CLOUD_EVT_DISCONNECTED: %d", evt->data.err);
   22082:	f044 0503 	orr.w	r5, r4, #3
   22086:	684a      	ldr	r2, [r1, #4]
   22088:	4628      	mov	r0, r5
   2208a:	4961      	ldr	r1, [pc, #388]	; (22210 <cloud_event_handler+0x220>)
   2208c:	f01f fbc8 	bl	41820 <log_string_sync>
		ui_led_set_pattern(UI_LTE_CONNECTED);
   22090:	2004      	movs	r0, #4
   22092:	f000 fb1b 	bl	226cc <ui_led_set_pattern>
		switch (evt->data.err) {
   22096:	6873      	ldr	r3, [r6, #4]
   22098:	2b01      	cmp	r3, #1
   2209a:	d035      	beq.n	22108 <cloud_event_handler+0x118>
   2209c:	2b02      	cmp	r3, #2
   2209e:	d003      	beq.n	220a8 <cloud_event_handler+0xb8>
   220a0:	b313      	cbz	r3, 220e8 <cloud_event_handler+0xf8>
		int32_t connect_wait_s = CONFIG_CLOUD_CONNECT_RETRY_DELAY;
   220a2:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
   220a6:	e011      	b.n	220cc <cloud_event_handler+0xdc>
			LOG_INF("Cloud connection closed.");
   220a8:	4628      	mov	r0, r5
   220aa:	495a      	ldr	r1, [pc, #360]	; (22214 <cloud_event_handler+0x224>)
   220ac:	f01f fbb8 	bl	41820 <log_string_sync>
			if ((atomic_get(&cloud_connect_attempts) == 1) &&
   220b0:	4855      	ldr	r0, [pc, #340]	; (22208 <cloud_event_handler+0x218>)
   220b2:	f01f f8f0 	bl	41296 <atomic_get>
   220b6:	2801      	cmp	r0, #1
   220b8:	d110      	bne.n	220dc <cloud_event_handler+0xec>
			    (atomic_get(&cloud_association) ==
   220ba:	4857      	ldr	r0, [pc, #348]	; (22218 <cloud_event_handler+0x228>)
   220bc:	f01f f8eb 	bl	41296 <atomic_get>
			if ((atomic_get(&cloud_connect_attempts) == 1) &&
   220c0:	b960      	cbnz	r0, 220dc <cloud_event_handler+0xec>
				LOG_INF("This can occur during initial nRF Cloud provisioning.");
   220c2:	4628      	mov	r0, r5
   220c4:	4955      	ldr	r1, [pc, #340]	; (2221c <cloud_event_handler+0x22c>)
   220c6:	f01f fbab 	bl	41820 <log_string_sync>
				connect_wait_s = 10;
   220ca:	240a      	movs	r4, #10
	z_impl_k_sem_give(sem);
   220cc:	484d      	ldr	r0, [pc, #308]	; (22204 <cloud_event_handler+0x214>)
   220ce:	f01b fd13 	bl	3daf8 <z_impl_k_sem_give>
		connect_to_cloud(connect_wait_s);
   220d2:	4620      	mov	r0, r4
}
   220d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		connect_to_cloud(connect_wait_s);
   220d8:	f7ff be70 	b.w	21dbc <connect_to_cloud>
				LOG_INF("This can occur if the device has the wrong nRF Cloud certificates.");
   220dc:	4950      	ldr	r1, [pc, #320]	; (22220 <cloud_event_handler+0x230>)
   220de:	f044 0003 	orr.w	r0, r4, #3
			LOG_INF("Disconnected by the cloud.");
   220e2:	f01f fb9d 	bl	41820 <log_string_sync>
   220e6:	e7dc      	b.n	220a2 <cloud_event_handler+0xb2>
			if (atomic_get(&cloud_association) ==
   220e8:	484b      	ldr	r0, [pc, #300]	; (22218 <cloud_event_handler+0x228>)
   220ea:	f01f f8d4 	bl	41296 <atomic_get>
   220ee:	2803      	cmp	r0, #3
   220f0:	d0eb      	beq.n	220ca <cloud_event_handler+0xda>
			    atomic_get(&cloud_association) ==
   220f2:	4849      	ldr	r0, [pc, #292]	; (22218 <cloud_event_handler+0x228>)
   220f4:	f01f f8cf 	bl	41296 <atomic_get>
			    CLOUD_ASSOCIATION_STATE_RECONNECT ||
   220f8:	2801      	cmp	r0, #1
   220fa:	d0e6      	beq.n	220ca <cloud_event_handler+0xda>
			    (atomic_get(&carrier_requested_disconnect))) {
   220fc:	4849      	ldr	r0, [pc, #292]	; (22224 <cloud_event_handler+0x234>)
   220fe:	f01f f8ca 	bl	41296 <atomic_get>
			    CLOUD_ASSOCIATION_STATE_REQUESTED ||
   22102:	2800      	cmp	r0, #0
   22104:	d1e1      	bne.n	220ca <cloud_event_handler+0xda>
   22106:	e7cc      	b.n	220a2 <cloud_event_handler+0xb2>
			LOG_INF("Disconnected by the cloud.");
   22108:	4628      	mov	r0, r5
   2210a:	4947      	ldr	r1, [pc, #284]	; (22228 <cloud_event_handler+0x238>)
   2210c:	e7e9      	b.n	220e2 <cloud_event_handler+0xf2>
		LOG_INF("CLOUD_EVT_READY");
   2210e:	4947      	ldr	r1, [pc, #284]	; (2222c <cloud_event_handler+0x23c>)
   22110:	f044 0003 	orr.w	r0, r4, #3
   22114:	f01f fb84 	bl	41820 <log_string_sync>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   22118:	2008      	movs	r0, #8
   2211a:	f000 fad7 	bl	226cc <ui_led_set_pattern>
		boot_write_img_confirmed();
   2211e:	f01f fe94 	bl	41e4a <boot_write_img_confirmed>
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_READY);
   22122:	2104      	movs	r1, #4
   22124:	483c      	ldr	r0, [pc, #240]	; (22218 <cloud_event_handler+0x228>)
   22126:	f01f f8ae 	bl	41286 <atomic_set>
}
   2212a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&application_work_q, &sensors_start_work);
   2212e:	4840      	ldr	r0, [pc, #256]	; (22230 <cloud_event_handler+0x240>)
   22130:	f7ff b822 	b.w	21178 <k_work_submit_to_queue.constprop.0>
		LOG_INF("CLOUD_EVT_ERROR");
   22134:	493f      	ldr	r1, [pc, #252]	; (22234 <cloud_event_handler+0x244>)
		LOG_INF("CLOUD_EVT_DATA_SENT");
   22136:	f044 0003 	orr.w	r0, r4, #3
}
   2213a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_INF("CLOUD_EVT_DATA_SENT");
   2213e:	f01f bb6f 	b.w	41820 <log_string_sync>
   22142:	493d      	ldr	r1, [pc, #244]	; (22238 <cloud_event_handler+0x248>)
   22144:	e7f7      	b.n	22136 <cloud_event_handler+0x146>
		LOG_INF("CLOUD_EVT_DATA_RECEIVED");
   22146:	f044 0503 	orr.w	r5, r4, #3
   2214a:	4628      	mov	r0, r5
   2214c:	493b      	ldr	r1, [pc, #236]	; (2223c <cloud_event_handler+0x24c>)
   2214e:	f01f fb67 	bl	41820 <log_string_sync>
		err = cloud_decode_command(evt->data.msg.buf);
   22152:	6870      	ldr	r0, [r6, #4]
   22154:	f000 fe3e 	bl	22dd4 <cloud_decode_command>
		if (err == 0) {
   22158:	2800      	cmp	r0, #0
   2215a:	d047      	beq.n	221ec <cloud_event_handler+0x1fc>
		err = gps_process_agps_data(evt->data.msg.buf,
   2215c:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   22160:	f004 fcc4 	bl	26aec <gps_process_agps_data>
		if (err) {
   22164:	4602      	mov	r2, r0
   22166:	b118      	cbz	r0, 22170 <cloud_event_handler+0x180>
			LOG_WRN("Data was not valid A-GPS data, err: %d", err);
   22168:	4935      	ldr	r1, [pc, #212]	; (22240 <cloud_event_handler+0x250>)
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   2216a:	f044 0002 	orr.w	r0, r4, #2
   2216e:	e784      	b.n	2207a <cloud_event_handler+0x8a>
		LOG_INF("A-GPS data processed");
   22170:	4628      	mov	r0, r5
   22172:	4934      	ldr	r1, [pc, #208]	; (22244 <cloud_event_handler+0x254>)
   22174:	e7e1      	b.n	2213a <cloud_event_handler+0x14a>
		LOG_INF("CLOUD_EVT_PAIR_REQUEST");
   22176:	f044 0403 	orr.w	r4, r4, #3
   2217a:	4620      	mov	r0, r4
   2217c:	4932      	ldr	r1, [pc, #200]	; (22248 <cloud_event_handler+0x258>)
   2217e:	f01f fb4f 	bl	41820 <log_string_sync>
	if (atomic_get(&cloud_association) !=
   22182:	4825      	ldr	r0, [pc, #148]	; (22218 <cloud_event_handler+0x228>)
   22184:	f01f f887 	bl	41296 <atomic_get>
   22188:	2801      	cmp	r0, #1
   2218a:	d02f      	beq.n	221ec <cloud_event_handler+0x1fc>
		atomic_set(&cloud_association,
   2218c:	2101      	movs	r1, #1
   2218e:	4822      	ldr	r0, [pc, #136]	; (22218 <cloud_event_handler+0x228>)
   22190:	f01f f879 	bl	41286 <atomic_set>
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   22194:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   22198:	f000 fa98 	bl	226cc <ui_led_set_pattern>
		LOG_INF("Add device to cloud account.");
   2219c:	4620      	mov	r0, r4
   2219e:	492b      	ldr	r1, [pc, #172]	; (2224c <cloud_event_handler+0x25c>)
   221a0:	f01f fb3e 	bl	41820 <log_string_sync>
		LOG_INF("Waiting for cloud association...");
   221a4:	4620      	mov	r0, r4
   221a6:	492a      	ldr	r1, [pc, #168]	; (22250 <cloud_event_handler+0x260>)
   221a8:	f01f fb3a 	bl	41820 <log_string_sync>
}
   221ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   221b0:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   221b4:	2300      	movs	r3, #0
   221b6:	4927      	ldr	r1, [pc, #156]	; (22254 <cloud_event_handler+0x264>)
   221b8:	4827      	ldr	r0, [pc, #156]	; (22258 <cloud_event_handler+0x268>)
   221ba:	f01b bf0b 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
		LOG_INF("CLOUD_EVT_PAIR_DONE");
   221be:	f044 0003 	orr.w	r0, r4, #3
   221c2:	4926      	ldr	r1, [pc, #152]	; (2225c <cloud_event_handler+0x26c>)
   221c4:	f01f fb2c 	bl	41820 <log_string_sync>
}
   221c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		on_pairing_done();
   221cc:	f7ff bed8 	b.w	21f80 <on_pairing_done>
		LOG_INF("CLOUD_EVT_FOTA_DONE");
   221d0:	f044 0003 	orr.w	r0, r4, #3
   221d4:	4922      	ldr	r1, [pc, #136]	; (22260 <cloud_event_handler+0x270>)
   221d6:	f01f fb23 	bl	41820 <log_string_sync>
		lte_lc_power_off();
   221da:	f009 fb4f 	bl	2b87c <lte_lc_power_off>
}
   221de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		sys_reboot(SYS_REBOOT_COLD);
   221e2:	2001      	movs	r0, #1
   221e4:	f004 b81c 	b.w	26220 <sys_reboot>
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   221e8:	491e      	ldr	r1, [pc, #120]	; (22264 <cloud_event_handler+0x274>)
   221ea:	e7be      	b.n	2216a <cloud_event_handler+0x17a>
}
   221ec:	bd70      	pop	{r4, r5, r6, pc}
   221ee:	bf00      	nop
   221f0:	000463bc 	.word	0x000463bc
   221f4:	000463cc 	.word	0x000463cc
   221f8:	00047e83 	.word	0x00047e83
   221fc:	20020de0 	.word	0x20020de0
   22200:	00047e98 	.word	0x00047e98
   22204:	20020c00 	.word	0x20020c00
   22208:	20024600 	.word	0x20024600
   2220c:	00047eac 	.word	0x00047eac
   22210:	00047ec5 	.word	0x00047ec5
   22214:	00047ee0 	.word	0x00047ee0
   22218:	200245f8 	.word	0x200245f8
   2221c:	00047ef9 	.word	0x00047ef9
   22220:	00047f2f 	.word	0x00047f2f
   22224:	200245f4 	.word	0x200245f4
   22228:	00047f72 	.word	0x00047f72
   2222c:	0004b848 	.word	0x0004b848
   22230:	20024644 	.word	0x20024644
   22234:	00047f8d 	.word	0x00047f8d
   22238:	00047f9d 	.word	0x00047f9d
   2223c:	00047fb1 	.word	0x00047fb1
   22240:	00047fc9 	.word	0x00047fc9
   22244:	00047ff0 	.word	0x00047ff0
   22248:	00048005 	.word	0x00048005
   2224c:	0004801c 	.word	0x0004801c
   22250:	00048039 	.word	0x00048039
   22254:	20020e10 	.word	0x20020e10
   22258:	20020cc8 	.word	0x20020cc8
   2225c:	0004805a 	.word	0x0004805a
   22260:	0004b903 	.word	0x0004b903
   22264:	0004806e 	.word	0x0004806e

00022268 <handle_bsdlib_init_ret>:
{
   22268:	b508      	push	{r3, lr}
	int ret = bsdlib_get_init_ret();
   2226a:	f007 f8f1 	bl	29450 <bsdlib_get_init_ret>
	switch (ret) {
   2226e:	4b18      	ldr	r3, [pc, #96]	; (222d0 <handle_bsdlib_init_ret+0x68>)
	int ret = bsdlib_get_init_ret();
   22270:	4602      	mov	r2, r0
	switch (ret) {
   22272:	4298      	cmp	r0, r3
   22274:	dc08      	bgt.n	22288 <handle_bsdlib_init_ret+0x20>
   22276:	3b02      	subs	r3, #2
   22278:	4298      	cmp	r0, r3
   2227a:	dc17      	bgt.n	222ac <handle_bsdlib_init_ret+0x44>
   2227c:	f1a0 6388 	sub.w	r3, r0, #71303168	; 0x4400000
   22280:	3b01      	subs	r3, #1
   22282:	2b01      	cmp	r3, #1
   22284:	d91d      	bls.n	222c2 <handle_bsdlib_init_ret+0x5a>
}
   22286:	bd08      	pop	{r3, pc}
	switch (ret) {
   22288:	4b12      	ldr	r3, [pc, #72]	; (222d4 <handle_bsdlib_init_ret+0x6c>)
   2228a:	4298      	cmp	r0, r3
   2228c:	d1fb      	bne.n	22286 <handle_bsdlib_init_ret+0x1e>
   2228e:	4812      	ldr	r0, [pc, #72]	; (222d8 <handle_bsdlib_init_ret+0x70>)
   22290:	4b12      	ldr	r3, [pc, #72]	; (222dc <handle_bsdlib_init_ret+0x74>)
		LOG_INF("MODEM UPDATE OK. Will run new firmware");
   22292:	4913      	ldr	r1, [pc, #76]	; (222e0 <handle_bsdlib_init_ret+0x78>)
   22294:	1ac0      	subs	r0, r0, r3
   22296:	08c0      	lsrs	r0, r0, #3
   22298:	0180      	lsls	r0, r0, #6
   2229a:	f040 0003 	orr.w	r0, r0, #3
   2229e:	f01f fabf 	bl	41820 <log_string_sync>
}
   222a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_reboot(SYS_REBOOT_COLD);
   222a6:	2001      	movs	r0, #1
   222a8:	f003 bfba 	b.w	26220 <sys_reboot>
   222ac:	480a      	ldr	r0, [pc, #40]	; (222d8 <handle_bsdlib_init_ret+0x70>)
   222ae:	4b0b      	ldr	r3, [pc, #44]	; (222dc <handle_bsdlib_init_ret+0x74>)
		LOG_ERR("MODEM UPDATE ERROR %d. Will run old firmware", ret);
   222b0:	490c      	ldr	r1, [pc, #48]	; (222e4 <handle_bsdlib_init_ret+0x7c>)
   222b2:	1ac0      	subs	r0, r0, r3
   222b4:	08c0      	lsrs	r0, r0, #3
   222b6:	0180      	lsls	r0, r0, #6
		LOG_ERR("MODEM UPDATE FATAL ERROR %d. Modem failiure", ret);
   222b8:	f040 0001 	orr.w	r0, r0, #1
   222bc:	f01f fab0 	bl	41820 <log_string_sync>
   222c0:	e7ef      	b.n	222a2 <handle_bsdlib_init_ret+0x3a>
   222c2:	4805      	ldr	r0, [pc, #20]	; (222d8 <handle_bsdlib_init_ret+0x70>)
   222c4:	4b05      	ldr	r3, [pc, #20]	; (222dc <handle_bsdlib_init_ret+0x74>)
   222c6:	4908      	ldr	r1, [pc, #32]	; (222e8 <handle_bsdlib_init_ret+0x80>)
   222c8:	1ac0      	subs	r0, r0, r3
   222ca:	08c0      	lsrs	r0, r0, #3
   222cc:	0180      	lsls	r0, r0, #6
   222ce:	e7f3      	b.n	222b8 <handle_bsdlib_init_ret+0x50>
   222d0:	04400004 	.word	0x04400004
   222d4:	05500001 	.word	0x05500001
   222d8:	000463cc 	.word	0x000463cc
   222dc:	000463bc 	.word	0x000463bc
   222e0:	0004808b 	.word	0x0004808b
   222e4:	000480b2 	.word	0x000480b2
   222e8:	000480df 	.word	0x000480df

000222ec <main>:

void main(void)
{
   222ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   222f0:	4b70      	ldr	r3, [pc, #448]	; (224b4 <main+0x1c8>)
   222f2:	4c71      	ldr	r4, [pc, #452]	; (224b8 <main+0x1cc>)
	int ret;

	LOG_INF("Asset tracker started");
   222f4:	4971      	ldr	r1, [pc, #452]	; (224bc <main+0x1d0>)
   222f6:	1ae4      	subs	r4, r4, r3
   222f8:	08e4      	lsrs	r4, r4, #3
   222fa:	01a4      	lsls	r4, r4, #6
   222fc:	f044 0003 	orr.w	r0, r4, #3
   22300:	f01f fa8e 	bl	41820 <log_string_sync>
	k_work_q_start(&application_work_q, application_stack_area,
   22304:	f04f 33ff 	mov.w	r3, #4294967295
   22308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2230c:	496c      	ldr	r1, [pc, #432]	; (224c0 <main+0x1d4>)
   2230e:	486d      	ldr	r0, [pc, #436]	; (224c4 <main+0x1d8>)
   22310:	f01b fe38 	bl	3df84 <k_work_q_start>
		       K_THREAD_STACK_SIZEOF(application_stack_area),
		       CONFIG_APPLICATION_WORKQUEUE_PRIORITY);
	if (IS_ENABLED(CONFIG_WATCHDOG)) {
		watchdog_init_and_start(&application_work_q);
   22314:	486b      	ldr	r0, [pc, #428]	; (224c4 <main+0x1d8>)
   22316:	f001 fbe5 	bl	23ae4 <watchdog_init_and_start>
	}

#if defined(CONFIG_LWM2M_CARRIER)
	k_sem_take(&bsdlib_initialized, K_FOREVER);
#else
	handle_bsdlib_init_ret();
   2231a:	f7ff ffa5 	bl	22268 <handle_bsdlib_init_ret>
	cloud_backend = cloud_get_binding("NRF_CLOUD");
   2231e:	486a      	ldr	r0, [pc, #424]	; (224c8 <main+0x1dc>)
   22320:	f00a fcbc 	bl	2cc9c <cloud_get_binding>
   22324:	4d69      	ldr	r5, [pc, #420]	; (224cc <main+0x1e0>)
   22326:	6028      	str	r0, [r5, #0]
	__ASSERT(cloud_backend != NULL, "nRF Cloud backend not found");
   22328:	b970      	cbnz	r0, 22348 <main+0x5c>
   2232a:	4969      	ldr	r1, [pc, #420]	; (224d0 <main+0x1e4>)
   2232c:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   22330:	4a68      	ldr	r2, [pc, #416]	; (224d4 <main+0x1e8>)
   22332:	4869      	ldr	r0, [pc, #420]	; (224d8 <main+0x1ec>)
   22334:	f01f f846 	bl	413c4 <printk>
   22338:	4868      	ldr	r0, [pc, #416]	; (224dc <main+0x1f0>)
   2233a:	f01f f843 	bl	413c4 <printk>
   2233e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
   22342:	4864      	ldr	r0, [pc, #400]	; (224d4 <main+0x1e8>)
   22344:	f01f fa5b 	bl	417fe <assert_post_action>
	ret = cloud_init(cloud_backend, cloud_event_handler);
   22348:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL || backend->api == NULL ||
   2234a:	2800      	cmp	r0, #0
   2234c:	f000 8092 	beq.w	22474 <main+0x188>
   22350:	6803      	ldr	r3, [r0, #0]
   22352:	2b00      	cmp	r3, #0
   22354:	f000 808e 	beq.w	22474 <main+0x188>
	    backend->api->init == NULL) {
   22358:	681b      	ldr	r3, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   2235a:	2b00      	cmp	r3, #0
   2235c:	f000 808a 	beq.w	22474 <main+0x188>
	return backend->api->init(backend, handler);
   22360:	495f      	ldr	r1, [pc, #380]	; (224e0 <main+0x1f4>)
   22362:	4798      	blx	r3
	if (ret) {
   22364:	4605      	mov	r5, r0
   22366:	b140      	cbz	r0, 2237a <main+0x8e>
		LOG_ERR("Cloud backend could not be initialized, error: %d",
   22368:	f044 0001 	orr.w	r0, r4, #1
   2236c:	462a      	mov	r2, r5
   2236e:	495d      	ldr	r1, [pc, #372]	; (224e4 <main+0x1f8>)
   22370:	f01f fa56 	bl	41820 <log_string_sync>
		cloud_error_handler(ret);
   22374:	4628      	mov	r0, r5
   22376:	f01e ffa4 	bl	412c2 <cloud_error_handler>
	ret = cloud_decode_init(cloud_cmd_handler);
   2237a:	485b      	ldr	r0, [pc, #364]	; (224e8 <main+0x1fc>)
   2237c:	f000 fe96 	bl	230ac <cloud_decode_init>
	if (ret) {
   22380:	4605      	mov	r5, r0
   22382:	b140      	cbz	r0, 22396 <main+0xaa>
		LOG_ERR("Cloud command decoder could not be initialized, error: %d",
   22384:	4602      	mov	r2, r0
   22386:	4959      	ldr	r1, [pc, #356]	; (224ec <main+0x200>)
   22388:	f044 0001 	orr.w	r0, r4, #1
   2238c:	f01f fa48 	bl	41820 <log_string_sync>
		cloud_error_handler(ret);
   22390:	4628      	mov	r0, r5
   22392:	f01e ff96 	bl	412c2 <cloud_error_handler>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22396:	2500      	movs	r5, #0
#endif

	cloud_api_init();

#if defined(CONFIG_USE_UI_MODULE)
	ui_init(ui_evt_handler);
   22398:	4855      	ldr	r0, [pc, #340]	; (224f0 <main+0x204>)
   2239a:	f000 f99d 	bl	226d8 <ui_init>
   2239e:	4b55      	ldr	r3, [pc, #340]	; (224f4 <main+0x208>)
   223a0:	4a55      	ldr	r2, [pc, #340]	; (224f8 <main+0x20c>)
   223a2:	601d      	str	r5, [r3, #0]
   223a4:	e9c3 2501 	strd	r2, r5, [r3, #4]
   223a8:	4b54      	ldr	r3, [pc, #336]	; (224fc <main+0x210>)
   223aa:	4a55      	ldr	r2, [pc, #340]	; (22500 <main+0x214>)
   223ac:	601d      	str	r5, [r3, #0]
   223ae:	e9c3 2501 	strd	r2, r5, [r3, #4]
   223b2:	4b54      	ldr	r3, [pc, #336]	; (22504 <main+0x218>)
   223b4:	4a54      	ldr	r2, [pc, #336]	; (22508 <main+0x21c>)
	k_delayed_work_init(&send_agps_request_work, send_agps_request);
   223b6:	4955      	ldr	r1, [pc, #340]	; (2250c <main+0x220>)
   223b8:	4855      	ldr	r0, [pc, #340]	; (22510 <main+0x224>)
   223ba:	e9c3 2501 	strd	r2, r5, [r3, #4]
   223be:	601d      	str	r5, [r3, #0]
   223c0:	f022 fbab 	bl	44b1a <k_delayed_work_init>
	k_delayed_work_init(&long_press_button_work, long_press_handler);
   223c4:	4953      	ldr	r1, [pc, #332]	; (22514 <main+0x228>)
   223c6:	4854      	ldr	r0, [pc, #336]	; (22518 <main+0x22c>)
   223c8:	f022 fba7 	bl	44b1a <k_delayed_work_init>
	k_delayed_work_init(&cloud_reboot_work, cloud_reboot_handler);
   223cc:	4953      	ldr	r1, [pc, #332]	; (2251c <main+0x230>)
   223ce:	4854      	ldr	r0, [pc, #336]	; (22520 <main+0x234>)
   223d0:	f022 fba3 	bl	44b1a <k_delayed_work_init>
	k_delayed_work_init(&cycle_cloud_connection_work,
   223d4:	4953      	ldr	r1, [pc, #332]	; (22524 <main+0x238>)
   223d6:	4854      	ldr	r0, [pc, #336]	; (22528 <main+0x23c>)
   223d8:	f022 fb9f 	bl	44b1a <k_delayed_work_init>
	k_delayed_work_init(&device_config_work, device_config_send);
   223dc:	4953      	ldr	r1, [pc, #332]	; (2252c <main+0x240>)
   223de:	4854      	ldr	r0, [pc, #336]	; (22530 <main+0x244>)
   223e0:	f022 fb9b 	bl	44b1a <k_delayed_work_init>
	k_delayed_work_init(&cloud_connect_work, cloud_connect_work_fn);
   223e4:	4953      	ldr	r1, [pc, #332]	; (22534 <main+0x248>)
   223e6:	4854      	ldr	r0, [pc, #336]	; (22538 <main+0x24c>)
   223e8:	f022 fb97 	bl	44b1a <k_delayed_work_init>
   223ec:	4b53      	ldr	r3, [pc, #332]	; (2253c <main+0x250>)
   223ee:	4a54      	ldr	r2, [pc, #336]	; (22540 <main+0x254>)
   223f0:	601d      	str	r5, [r3, #0]
   223f2:	e9c3 2501 	strd	r2, r5, [r3, #4]
   223f6:	4b53      	ldr	r3, [pc, #332]	; (22544 <main+0x258>)
   223f8:	4a53      	ldr	r2, [pc, #332]	; (22548 <main+0x25c>)
   223fa:	601d      	str	r5, [r3, #0]
   223fc:	e9c3 2501 	strd	r2, r5, [r3, #4]
   22400:	4b52      	ldr	r3, [pc, #328]	; (2254c <main+0x260>)
   22402:	4a53      	ldr	r2, [pc, #332]	; (22550 <main+0x264>)
	k_delayed_work_init(&rsrp_work, modem_rsrp_data_send);
   22404:	4953      	ldr	r1, [pc, #332]	; (22554 <main+0x268>)
   22406:	4854      	ldr	r0, [pc, #336]	; (22558 <main+0x26c>)
   22408:	e9c3 2501 	strd	r2, r5, [r3, #4]
   2240c:	601d      	str	r5, [r3, #0]
   2240e:	f022 fb84 	bl	44b1a <k_delayed_work_init>
#endif
	work_init();
#if defined(CONFIG_LTE_LINK_CONTROL)
	lte_lc_register_handler(lte_handler);
   22412:	4852      	ldr	r0, [pc, #328]	; (2255c <main+0x270>)
   22414:	f009 f9f8 	bl	2b808 <lte_lc_register_handler>
	LOG_INF("Connecting to LTE network.");
   22418:	f8df 8160 	ldr.w	r8, [pc, #352]	; 2257c <main+0x290>
	LOG_INF("This may take several minutes.");
   2241c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 22580 <main+0x294>
		LOG_ERR("LTE link could not be established.");
   22420:	4f4f      	ldr	r7, [pc, #316]	; (22560 <main+0x274>)
	ui_led_set_pattern(UI_LTE_CONNECTING);
   22422:	f44f 6080 	mov.w	r0, #1024	; 0x400
	LOG_INF("Connecting to LTE network.");
   22426:	f044 0503 	orr.w	r5, r4, #3
	ui_led_set_pattern(UI_LTE_CONNECTING);
   2242a:	f000 f94f 	bl	226cc <ui_led_set_pattern>
	LOG_INF("Connecting to LTE network.");
   2242e:	4641      	mov	r1, r8
   22430:	4628      	mov	r0, r5
   22432:	f01f f9f5 	bl	41820 <log_string_sync>
	LOG_INF("This may take several minutes.");
   22436:	4649      	mov	r1, r9
   22438:	4628      	mov	r0, r5
	LOG_INF("Connecting to LTE network.");
   2243a:	4626      	mov	r6, r4
	LOG_INF("This may take several minutes.");
   2243c:	f01f f9f0 	bl	41820 <log_string_sync>
	int err = lte_lc_init_and_connect();
   22440:	f021 fff5 	bl	4442e <lte_lc_init_and_connect>
	if (err) {
   22444:	b1c8      	cbz	r0, 2247a <main+0x18e>
		LOG_ERR("LTE link could not be established.");
   22446:	4639      	mov	r1, r7
   22448:	f044 0001 	orr.w	r0, r4, #1
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
	while (modem_configure() != 0) {
		LOG_WRN("Failed to establish LTE connection.");
   2244c:	f044 0502 	orr.w	r5, r4, #2
		LOG_ERR("LTE link could not be established.");
   22450:	f01f f9e6 	bl	41820 <log_string_sync>
		LOG_WRN("Failed to establish LTE connection.");
   22454:	4628      	mov	r0, r5
   22456:	4943      	ldr	r1, [pc, #268]	; (22564 <main+0x278>)
   22458:	f01f f9e2 	bl	41820 <log_string_sync>
		LOG_WRN("Will retry in %d seconds.",
   2245c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   22460:	4628      	mov	r0, r5
   22462:	4941      	ldr	r1, [pc, #260]	; (22568 <main+0x27c>)
   22464:	f01f f9dc 	bl	41820 <log_string_sync>
	return z_impl_k_sleep(timeout);
   22468:	2100      	movs	r1, #0
   2246a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
   2246e:	f01b fb07 	bl	3da80 <z_impl_k_sleep>
   22472:	e7d6      	b.n	22422 <main+0x136>
		return -ENOTSUP;
   22474:	f06f 0585 	mvn.w	r5, #133	; 0x85
   22478:	e776      	b.n	22368 <main+0x7c>
	LOG_INF("Connected to LTE network.");
   2247a:	493c      	ldr	r1, [pc, #240]	; (2256c <main+0x280>)
   2247c:	4628      	mov	r0, r5
   2247e:	f01f f9cf 	bl	41820 <log_string_sync>
	ui_led_set_pattern(UI_LTE_CONNECTED);
   22482:	2004      	movs	r0, #4
   22484:	f000 f922 	bl	226cc <ui_led_set_pattern>
#if defined(CONFIG_LWM2M_CARRIER)
	LOG_INF("Waiting for LWM2M carrier to complete initialization...");
	k_sem_take(&cloud_ready_to_connect, K_FOREVER);
#endif

	date_time_update_async(date_time_event_handler);
   22488:	4839      	ldr	r0, [pc, #228]	; (22570 <main+0x284>)
   2248a:	f00a fbf9 	bl	2cc80 <date_time_update_async>
	return z_impl_k_sem_take(sem, timeout);
   2248e:	f44f 22f0 	mov.w	r2, #491520	; 0x78000
   22492:	2300      	movs	r3, #0
   22494:	4837      	ldr	r0, [pc, #220]	; (22574 <main+0x288>)
   22496:	f01b fb73 	bl	3db80 <z_impl_k_sem_take>

	ret = k_sem_take(&date_time_obtained, K_SECONDS(DATE_TIME_TIMEOUT_S));
	if (ret) {
   2249a:	b128      	cbz	r0, 224a8 <main+0x1bc>
		LOG_WRN("Date time, no callback event within %d seconds",
   2249c:	220f      	movs	r2, #15
   2249e:	4936      	ldr	r1, [pc, #216]	; (22578 <main+0x28c>)
   224a0:	f046 0002 	orr.w	r0, r6, #2
   224a4:	f01f f9bc 	bl	41820 <log_string_sync>
			DATE_TIME_TIMEOUT_S);
	}

	connect_to_cloud(0);
}
   224a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	connect_to_cloud(0);
   224ac:	2000      	movs	r0, #0
   224ae:	f7ff bc85 	b.w	21dbc <connect_to_cloud>
   224b2:	bf00      	nop
   224b4:	000463bc 	.word	0x000463bc
   224b8:	000463cc 	.word	0x000463cc
   224bc:	0004810b 	.word	0x0004810b
   224c0:	2002d838 	.word	0x2002d838
   224c4:	20020cc8 	.word	0x20020cc8
   224c8:	00048121 	.word	0x00048121
   224cc:	200245fc 	.word	0x200245fc
   224d0:	00048139 	.word	0x00048139
   224d4:	0004812b 	.word	0x0004812b
   224d8:	00048156 	.word	0x00048156
   224dc:	00048173 	.word	0x00048173
   224e0:	00021ff1 	.word	0x00021ff1
   224e4:	00048191 	.word	0x00048191
   224e8:	000215ad 	.word	0x000215ad
   224ec:	000481c3 	.word	0x000481c3
   224f0:	000210dd 	.word	0x000210dd
   224f4:	20024644 	.word	0x20024644
   224f8:	000412d3 	.word	0x000412d3
   224fc:	2002462c 	.word	0x2002462c
   22500:	00020fa5 	.word	0x00020fa5
   22504:	20024638 	.word	0x20024638
   22508:	00021745 	.word	0x00021745
   2250c:	00020fb1 	.word	0x00020fb1
   22510:	200217f0 	.word	0x200217f0
   22514:	0002109d 	.word	0x0002109d
   22518:	20020ea8 	.word	0x20020ea8
   2251c:	000412b9 	.word	0x000412b9
   22520:	20020de0 	.word	0x20020de0
   22524:	00020d61 	.word	0x00020d61
   22528:	20020e10 	.word	0x20020e10
   2252c:	00021b49 	.word	0x00021b49
   22530:	20020e40 	.word	0x20020e40
   22534:	00021d11 	.word	0x00021d11
   22538:	20020db0 	.word	0x20020db0
   2253c:	20024604 	.word	0x20024604
   22540:	00021a59 	.word	0x00021a59
   22544:	20024610 	.word	0x20024610
   22548:	000219ed 	.word	0x000219ed
   2254c:	2002461c 	.word	0x2002461c
   22550:	00021051 	.word	0x00021051
   22554:	00020f2d 	.word	0x00020f2d
   22558:	200217c0 	.word	0x200217c0
   2255c:	000211a1 	.word	0x000211a1
   22560:	00048218 	.word	0x00048218
   22564:	0004823b 	.word	0x0004823b
   22568:	0004825f 	.word	0x0004825f
   2256c:	00048279 	.word	0x00048279
   22570:	00021539 	.word	0x00021539
   22574:	20020c30 	.word	0x20020c30
   22578:	00048293 	.word	0x00048293
   2257c:	000481fd 	.word	0x000481fd
   22580:	000487f6 	.word	0x000487f6

00022584 <sensor_trigger_handler.isra.0>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
   22584:	4803      	ldr	r0, [pc, #12]	; (22594 <sensor_trigger_handler.isra.0+0x10>)
   22586:	2200      	movs	r2, #0
   22588:	2300      	movs	r3, #0
   2258a:	4903      	ldr	r1, [pc, #12]	; (22598 <sensor_trigger_handler.isra.0+0x14>)
   2258c:	6800      	ldr	r0, [r0, #0]
   2258e:	f01b bd21 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
   22592:	bf00      	nop
   22594:	20024658 	.word	0x20024658
   22598:	20021838 	.word	0x20021838

0002259c <motion_init_and_start>:
}

/**@brief Initialize motion module. */
int motion_init_and_start(struct k_work_q *work_q,
			  motion_handler_t motion_handler)
{
   2259c:	b510      	push	{r4, lr}
	if ((work_q == NULL) || (motion_handler == NULL)) {
   2259e:	b320      	cbz	r0, 225ea <motion_init_and_start+0x4e>
   225a0:	b319      	cbz	r1, 225ea <motion_init_and_start+0x4e>
		return -EINVAL;
	}

	int err;

	motion_work_q = work_q;
   225a2:	4b13      	ldr	r3, [pc, #76]	; (225f0 <motion_init_and_start+0x54>)
   225a4:	6018      	str	r0, [r3, #0]
	handler = motion_handler;
   225a6:	4b13      	ldr	r3, [pc, #76]	; (225f4 <motion_init_and_start+0x58>)

	k_delayed_work_init(&motion_work, motion_work_q_handler);
   225a8:	4813      	ldr	r0, [pc, #76]	; (225f8 <motion_init_and_start+0x5c>)
	handler = motion_handler;
   225aa:	6019      	str	r1, [r3, #0]
	k_delayed_work_init(&motion_work, motion_work_q_handler);
   225ac:	4913      	ldr	r1, [pc, #76]	; (225fc <motion_init_and_start+0x60>)
   225ae:	f022 fab4 	bl	44b1a <k_delayed_work_init>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   225b2:	4813      	ldr	r0, [pc, #76]	; (22600 <motion_init_and_start+0x64>)
   225b4:	f019 fa3c 	bl	3ba30 <z_impl_device_get_binding>
	accel_dev = device_get_binding(CONFIG_ACCEL_DEV_NAME);
   225b8:	4b12      	ldr	r3, [pc, #72]	; (22604 <motion_init_and_start+0x68>)
   225ba:	6018      	str	r0, [r3, #0]
	if (accel_dev == NULL) {
   225bc:	b118      	cbz	r0, 225c6 <motion_init_and_start+0x2a>

	if (err) {
		return err;
	}

	sensor_trigger_handler(NULL, NULL);
   225be:	f7ff ffe1 	bl	22584 <sensor_trigger_handler.isra.0>
	return 0;
   225c2:	2000      	movs	r0, #0
}
   225c4:	bd10      	pop	{r4, pc}
   225c6:	4b10      	ldr	r3, [pc, #64]	; (22608 <motion_init_and_start+0x6c>)
   225c8:	4c10      	ldr	r4, [pc, #64]	; (2260c <motion_init_and_start+0x70>)
		LOG_ERR("Could not get %s device",
   225ca:	480d      	ldr	r0, [pc, #52]	; (22600 <motion_init_and_start+0x64>)
   225cc:	1ae4      	subs	r4, r4, r3
   225ce:	f01f f93a 	bl	41846 <log_strdup>
   225d2:	08e4      	lsrs	r4, r4, #3
   225d4:	01a4      	lsls	r4, r4, #6
   225d6:	f044 0401 	orr.w	r4, r4, #1
   225da:	4602      	mov	r2, r0
   225dc:	490c      	ldr	r1, [pc, #48]	; (22610 <motion_init_and_start+0x74>)
   225de:	4620      	mov	r0, r4
   225e0:	f01f f91e 	bl	41820 <log_string_sync>
		return -ENODEV;
   225e4:	f06f 0012 	mvn.w	r0, #18
   225e8:	e7ec      	b.n	225c4 <motion_init_and_start+0x28>
		return -EINVAL;
   225ea:	f06f 0015 	mvn.w	r0, #21
   225ee:	e7e9      	b.n	225c4 <motion_init_and_start+0x28>
   225f0:	20024658 	.word	0x20024658
   225f4:	20024654 	.word	0x20024654
   225f8:	20021838 	.word	0x20021838
   225fc:	0001d271 	.word	0x0001d271
   22600:	00048353 	.word	0x00048353
   22604:	20024650 	.word	0x20024650
   22608:	000463bc 	.word	0x000463bc
   2260c:	00046484 	.word	0x00046484
   22610:	0004835e 	.word	0x0004835e

00022614 <button_handler>:
}
#endif /* CONFIG_UI_LED_USE_PWM */

/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(uint32_t button_states, uint32_t has_changed)
{
   22614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22616:	4605      	mov	r5, r0
   22618:	460c      	mov	r4, r1
				break;
			}
		}

		/* Button number has been stored, remove from bitmask. */
		has_changed &= ~(1UL << (btn_num - 1));
   2261a:	2601      	movs	r6, #1
		evt.button = btn_num;
		evt.type = (button_states & BIT(btn_num - 1))
				? UI_EVT_BUTTON_ACTIVE
				: UI_EVT_BUTTON_INACTIVE;

		callback(evt);
   2261c:	4f11      	ldr	r7, [pc, #68]	; (22664 <button_handler+0x50>)
	while (has_changed) {
   2261e:	b90c      	cbnz	r4, 22624 <button_handler+0x10>
	}
}
   22620:	b003      	add	sp, #12
   22622:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22624:	2300      	movs	r3, #0
			if (has_changed & BIT(i)) {
   22626:	1c59      	adds	r1, r3, #1
   22628:	fa24 f303 	lsr.w	r3, r4, r3
   2262c:	f013 0001 	ands.w	r0, r3, #1
   22630:	b2ca      	uxtb	r2, r1
   22632:	d103      	bne.n	2263c <button_handler+0x28>
		for (uint8_t i = 0; i < 32; i++) {
   22634:	2920      	cmp	r1, #32
   22636:	460b      	mov	r3, r1
   22638:	d1f5      	bne.n	22626 <button_handler+0x12>
		btn_num = 0;
   2263a:	4602      	mov	r2, r0
		has_changed &= ~(1UL << (btn_num - 1));
   2263c:	1e53      	subs	r3, r2, #1
   2263e:	fa06 f103 	lsl.w	r1, r6, r3
				? UI_EVT_BUTTON_ACTIVE
   22642:	fa25 f303 	lsr.w	r3, r5, r3
				: UI_EVT_BUTTON_INACTIVE;
   22646:	43db      	mvns	r3, r3
   22648:	f003 0301 	and.w	r3, r3, #1
		evt.button = btn_num;
   2264c:	9201      	str	r2, [sp, #4]
				: UI_EVT_BUTTON_INACTIVE;
   2264e:	f88d 3000 	strb.w	r3, [sp]
		callback(evt);
   22652:	aa02      	add	r2, sp, #8
		has_changed &= ~(1UL << (btn_num - 1));
   22654:	ea24 0401 	bic.w	r4, r4, r1
		callback(evt);
   22658:	683b      	ldr	r3, [r7, #0]
   2265a:	e912 0003 	ldmdb	r2, {r0, r1}
   2265e:	4798      	blx	r3
   22660:	e7dd      	b.n	2261e <button_handler+0xa>
   22662:	bf00      	nop
   22664:	2002465c 	.word	0x2002465c

00022668 <leds_update>:
{
   22668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	led_on = !led_on;
   2266c:	4d12      	ldr	r5, [pc, #72]	; (226b8 <leds_update+0x50>)
{
   2266e:	4606      	mov	r6, r0
	led_on = !led_on;
   22670:	782a      	ldrb	r2, [r5, #0]
	led_on_mask = UI_LED_GET_ON(current_led_state);
   22672:	4812      	ldr	r0, [pc, #72]	; (226bc <leds_update+0x54>)
	led_on = !led_on;
   22674:	f082 0201 	eor.w	r2, r2, #1
   22678:	f990 1001 	ldrsb.w	r1, [r0, #1]
   2267c:	f990 4000 	ldrsb.w	r4, [r0]
   22680:	702a      	strb	r2, [r5, #0]
	if (led_on) {
   22682:	b19a      	cbz	r2, 226ac <leds_update+0x44>
		led_on_mask |= UI_LED_GET_BLINK(current_led_state);
   22684:	430c      	orrs	r4, r1
	if (led_on_mask != current_led_on_mask) {
   22686:	4f0e      	ldr	r7, [pc, #56]	; (226c0 <leds_update+0x58>)
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   22688:	b2e4      	uxtb	r4, r4
	if (led_on_mask != current_led_on_mask) {
   2268a:	783b      	ldrb	r3, [r7, #0]
   2268c:	42a3      	cmp	r3, r4
   2268e:	d003      	beq.n	22698 <leds_update+0x30>
		dk_set_leds(led_on_mask);
   22690:	4620      	mov	r0, r4
   22692:	f021 fd7c 	bl	4418e <dk_set_leds>
		current_led_on_mask = led_on_mask;
   22696:	703c      	strb	r4, [r7, #0]
	if (work) {
   22698:	b15e      	cbz	r6, 226b2 <leds_update+0x4a>
}
   2269a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2269e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   226a2:	2300      	movs	r3, #0
   226a4:	4907      	ldr	r1, [pc, #28]	; (226c4 <leds_update+0x5c>)
   226a6:	4808      	ldr	r0, [pc, #32]	; (226c8 <leds_update+0x60>)
   226a8:	f01b bc94 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   226ac:	ea24 0401 	bic.w	r4, r4, r1
   226b0:	e7e9      	b.n	22686 <leds_update+0x1e>
}
   226b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   226b6:	bf00      	nop
   226b8:	2002b0d5 	.word	0x2002b0d5
   226bc:	2002a5e4 	.word	0x2002a5e4
   226c0:	2002b0d4 	.word	0x2002b0d4
   226c4:	20021868 	.word	0x20021868
   226c8:	200244f8 	.word	0x200244f8

000226cc <ui_led_set_pattern>:

void ui_led_set_pattern(enum ui_led_pattern state)
{
	current_led_state = state;
   226cc:	4b01      	ldr	r3, [pc, #4]	; (226d4 <ui_led_set_pattern+0x8>)
   226ce:	8018      	strh	r0, [r3, #0]
#ifdef CONFIG_UI_LED_USE_PWM
	ui_led_set_effect(state);
#else
	current_led_state = state;
#endif /* CONFIG_UI_LED_USE_PWM */
}
   226d0:	4770      	bx	lr
   226d2:	bf00      	nop
   226d4:	2002a5e4 	.word	0x2002a5e4

000226d8 <ui_init>:
	}
#endif
}

int ui_init(ui_callback_t cb)
{
   226d8:	b538      	push	{r3, r4, r5, lr}
   226da:	4605      	mov	r5, r0
	if (err) {
		LOG_ERR("Error when initializing PWM controlled LEDs");
		return err;
	}
#else
	err = dk_leds_init();
   226dc:	f007 fea2 	bl	2a424 <dk_leds_init>
	if (err) {
   226e0:	4604      	mov	r4, r0
   226e2:	b160      	cbz	r0, 226fe <ui_init+0x26>
		LOG_ERR("Could not initialize leds, err code: %d\n", err);
   226e4:	4622      	mov	r2, r4
   226e6:	481a      	ldr	r0, [pc, #104]	; (22750 <ui_init+0x78>)
   226e8:	4b1a      	ldr	r3, [pc, #104]	; (22754 <ui_init+0x7c>)
   226ea:	491b      	ldr	r1, [pc, #108]	; (22758 <ui_init+0x80>)
   226ec:	1ac0      	subs	r0, r0, r3
   226ee:	08c0      	lsrs	r0, r0, #3
   226f0:	0180      	lsls	r0, r0, #6
	if (cb) {
		callback  = cb;

		err = dk_buttons_init(button_handler);
		if (err) {
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   226f2:	f040 0001 	orr.w	r0, r0, #1
   226f6:	f01f f893 	bl	41820 <log_string_sync>
		return err;
	}
#endif /* CONFIG_UI_NMOS */

	return err;
}
   226fa:	4620      	mov	r0, r4
   226fc:	bd38      	pop	{r3, r4, r5, pc}
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   226fe:	210f      	movs	r1, #15
   22700:	f021 fd3b 	bl	4417a <dk_set_leds_state>
	if (err) {
   22704:	4604      	mov	r4, r0
   22706:	b138      	cbz	r0, 22718 <ui_init+0x40>
   22708:	4811      	ldr	r0, [pc, #68]	; (22750 <ui_init+0x78>)
   2270a:	4b12      	ldr	r3, [pc, #72]	; (22754 <ui_init+0x7c>)
		LOG_ERR("Could not set leds state, err code: %d\n", err);
   2270c:	4622      	mov	r2, r4
   2270e:	1ac0      	subs	r0, r0, r3
   22710:	08c0      	lsrs	r0, r0, #3
   22712:	4912      	ldr	r1, [pc, #72]	; (2275c <ui_init+0x84>)
   22714:	0180      	lsls	r0, r0, #6
   22716:	e7ec      	b.n	226f2 <ui_init+0x1a>
	k_delayed_work_init(&leds_update_work, leds_update);
   22718:	4911      	ldr	r1, [pc, #68]	; (22760 <ui_init+0x88>)
   2271a:	4812      	ldr	r0, [pc, #72]	; (22764 <ui_init+0x8c>)
   2271c:	f022 f9fd 	bl	44b1a <k_delayed_work_init>
   22720:	2200      	movs	r2, #0
   22722:	2300      	movs	r3, #0
   22724:	490f      	ldr	r1, [pc, #60]	; (22764 <ui_init+0x8c>)
   22726:	4810      	ldr	r0, [pc, #64]	; (22768 <ui_init+0x90>)
   22728:	f01b fc54 	bl	3dfd4 <k_delayed_work_submit_to_queue>
	if (cb) {
   2272c:	2d00      	cmp	r5, #0
   2272e:	d0e4      	beq.n	226fa <ui_init+0x22>
		callback  = cb;
   22730:	4b0e      	ldr	r3, [pc, #56]	; (2276c <ui_init+0x94>)
		err = dk_buttons_init(button_handler);
   22732:	480f      	ldr	r0, [pc, #60]	; (22770 <ui_init+0x98>)
		callback  = cb;
   22734:	601d      	str	r5, [r3, #0]
		err = dk_buttons_init(button_handler);
   22736:	f007 fec5 	bl	2a4c4 <dk_buttons_init>
		if (err) {
   2273a:	4604      	mov	r4, r0
   2273c:	2800      	cmp	r0, #0
   2273e:	d0dc      	beq.n	226fa <ui_init+0x22>
   22740:	4803      	ldr	r0, [pc, #12]	; (22750 <ui_init+0x78>)
   22742:	4b04      	ldr	r3, [pc, #16]	; (22754 <ui_init+0x7c>)
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   22744:	4622      	mov	r2, r4
   22746:	1ac0      	subs	r0, r0, r3
   22748:	08c0      	lsrs	r0, r0, #3
   2274a:	490a      	ldr	r1, [pc, #40]	; (22774 <ui_init+0x9c>)
   2274c:	0180      	lsls	r0, r0, #6
   2274e:	e7d0      	b.n	226f2 <ui_init+0x1a>
   22750:	000464fc 	.word	0x000464fc
   22754:	000463bc 	.word	0x000463bc
   22758:	0004837d 	.word	0x0004837d
   2275c:	000483a6 	.word	0x000483a6
   22760:	00022669 	.word	0x00022669
   22764:	20021868 	.word	0x20021868
   22768:	200244f8 	.word	0x200244f8
   2276c:	2002465c 	.word	0x2002465c
   22770:	00022615 	.word	0x00022615
   22774:	000483ce 	.word	0x000483ce

00022778 <cloud_set_chan_cfg_item>:
}

static int cloud_set_chan_cfg_item(const enum cloud_channel channel,
			  const enum sensor_chan_cfg_item_type type,
			  const double value)
{
   22778:	b5f0      	push	{r4, r5, r6, r7, lr}
   2277a:	4616      	mov	r6, r2
   2277c:	461f      	mov	r7, r3
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
		if (sensor_cfg[i].chan == channel) {
   2277e:	2230      	movs	r2, #48	; 0x30
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   22780:	2300      	movs	r3, #0
		if (sensor_cfg[i].chan == channel) {
   22782:	4c0a      	ldr	r4, [pc, #40]	; (227ac <cloud_set_chan_cfg_item+0x34>)
   22784:	fb02 f503 	mul.w	r5, r2, r3
   22788:	5d2d      	ldrb	r5, [r5, r4]
   2278a:	4285      	cmp	r5, r0
   2278c:	d108      	bne.n	227a0 <cloud_set_chan_cfg_item+0x28>
	cfg->value[type] = value;
   2278e:	2206      	movs	r2, #6
	return 0;
   22790:	2000      	movs	r0, #0
	cfg->value[type] = value;
   22792:	fb02 1103 	mla	r1, r2, r3, r1
   22796:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   2279a:	e9c1 6702 	strd	r6, r7, [r1, #8]
						      value);
		}
	}

	return -ENOTSUP;
}
   2279e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   227a0:	3301      	adds	r3, #1
   227a2:	2b0a      	cmp	r3, #10
   227a4:	d1ee      	bne.n	22784 <cloud_set_chan_cfg_item+0xc>
	return -ENOTSUP;
   227a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   227aa:	e7f8      	b.n	2279e <cloud_set_chan_cfg_item+0x26>
   227ac:	20020018 	.word	0x20020018

000227b0 <cloud_cmd_handle_sensor_set_chan_cfg>:

	return false;
}

static int cloud_cmd_handle_sensor_set_chan_cfg(struct cloud_command const *const cmd)
{
   227b0:	b570      	push	{r4, r5, r6, lr}
	int err = -ENOTSUP;

	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   227b2:	7803      	ldrb	r3, [r0, #0]
{
   227b4:	4604      	mov	r4, r0
	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   227b6:	2b08      	cmp	r3, #8
   227b8:	d143      	bne.n	22842 <cloud_cmd_handle_sensor_set_chan_cfg+0x92>
		return -EINVAL;
	}

	switch (cmd->type) {
   227ba:	7883      	ldrb	r3, [r0, #2]
   227bc:	2b02      	cmp	r3, #2
   227be:	d00f      	beq.n	227e0 <cloud_cmd_handle_sensor_set_chan_cfg+0x30>
   227c0:	2b03      	cmp	r3, #3
   227c2:	d028      	beq.n	22816 <cloud_cmd_handle_sensor_set_chan_cfg+0x66>
   227c4:	2b01      	cmp	r3, #1
   227c6:	d13f      	bne.n	22848 <cloud_cmd_handle_sensor_set_chan_cfg+0x98>
	case CLOUD_CMD_ENABLE:
		err = cloud_set_chan_cfg_item(
   227c8:	f990 0010 	ldrsb.w	r0, [r0, #16]
   227cc:	f7f9 ff8a 	bl	1c6e4 <__aeabi_i2d>
   227d0:	460b      	mov	r3, r1
   227d2:	2100      	movs	r1, #0
   227d4:	4602      	mov	r2, r0
   227d6:	7860      	ldrb	r0, [r4, #1]
	default:
		break;
	}

	return err;
}
   227d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			err = cloud_set_chan_cfg_item(
   227dc:	f7ff bfcc 	b.w	22778 <cloud_set_chan_cfg_item>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   227e0:	f990 0010 	ldrsb.w	r0, [r0, #16]
   227e4:	7865      	ldrb	r5, [r4, #1]
   227e6:	1c42      	adds	r2, r0, #1
   227e8:	d10e      	bne.n	22808 <cloud_cmd_handle_sensor_set_chan_cfg+0x58>
			err = cloud_set_chan_cfg_item(
   227ea:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   227ee:	2103      	movs	r1, #3
   227f0:	4628      	mov	r0, r5
   227f2:	f7ff ffc1 	bl	22778 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   227f6:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   227f8:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   227fa:	2104      	movs	r1, #4
   227fc:	4b14      	ldr	r3, [pc, #80]	; (22850 <cloud_cmd_handle_sensor_set_chan_cfg+0xa0>)
			cloud_set_chan_cfg_item(
   227fe:	7860      	ldrb	r0, [r4, #1]
   22800:	f7ff ffba 	bl	22778 <cloud_set_chan_cfg_item>
}
   22804:	4628      	mov	r0, r5
   22806:	bd70      	pop	{r4, r5, r6, pc}
			err = cloud_set_chan_cfg_item(
   22808:	f7f9 ff6c 	bl	1c6e4 <__aeabi_i2d>
   2280c:	460b      	mov	r3, r1
   2280e:	4602      	mov	r2, r0
   22810:	2104      	movs	r1, #4
			err = cloud_set_chan_cfg_item(
   22812:	4628      	mov	r0, r5
   22814:	e7e0      	b.n	227d8 <cloud_cmd_handle_sensor_set_chan_cfg+0x28>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   22816:	f990 0010 	ldrsb.w	r0, [r0, #16]
   2281a:	7865      	ldrb	r5, [r4, #1]
   2281c:	1c43      	adds	r3, r0, #1
   2281e:	d10a      	bne.n	22836 <cloud_cmd_handle_sensor_set_chan_cfg+0x86>
			err = cloud_set_chan_cfg_item(
   22820:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   22824:	2101      	movs	r1, #1
   22826:	4628      	mov	r0, r5
   22828:	f7ff ffa6 	bl	22778 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   2282c:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   2282e:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   22830:	2102      	movs	r1, #2
   22832:	4b07      	ldr	r3, [pc, #28]	; (22850 <cloud_cmd_handle_sensor_set_chan_cfg+0xa0>)
   22834:	e7e3      	b.n	227fe <cloud_cmd_handle_sensor_set_chan_cfg+0x4e>
			err = cloud_set_chan_cfg_item(
   22836:	f7f9 ff55 	bl	1c6e4 <__aeabi_i2d>
   2283a:	460b      	mov	r3, r1
   2283c:	4602      	mov	r2, r0
   2283e:	2102      	movs	r1, #2
   22840:	e7e7      	b.n	22812 <cloud_cmd_handle_sensor_set_chan_cfg+0x62>
		return -EINVAL;
   22842:	f06f 0515 	mvn.w	r5, #21
   22846:	e7dd      	b.n	22804 <cloud_cmd_handle_sensor_set_chan_cfg+0x54>
	switch (cmd->type) {
   22848:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2284c:	e7da      	b.n	22804 <cloud_cmd_handle_sensor_set_chan_cfg+0x54>
   2284e:	bf00      	nop
   22850:	3ff00000 	.word	0x3ff00000

00022854 <cloud_cmd_parse_type>:
{
   22854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22858:	460f      	mov	r7, r1
   2285a:	4614      	mov	r4, r2
	if ((type_cmd == NULL) || (parsed_cmd == NULL)) {
   2285c:	4606      	mov	r6, r0
   2285e:	b918      	cbnz	r0, 22868 <cloud_cmd_parse_type+0x14>
		return -EINVAL;
   22860:	f06f 0015 	mvn.w	r0, #21
}
   22864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (type_obj != NULL) {
   22868:	7903      	ldrb	r3, [r0, #4]
   2286a:	2900      	cmp	r1, #0
   2286c:	f000 8081 	beq.w	22972 <cloud_cmd_parse_type+0x11e>
		if (type_cmd->type != CLOUD_CMD_DATA_STRING) {
   22870:	2b07      	cmp	r3, #7
   22872:	d079      	beq.n	22968 <cloud_cmd_parse_type+0x114>
			decoded_obj = json_object_decode(type_obj,
   22874:	4a4a      	ldr	r2, [pc, #296]	; (229a0 <cloud_cmd_parse_type+0x14c>)
   22876:	4638      	mov	r0, r7
   22878:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   2287c:	f01e fd42 	bl	41304 <json_object_decode>
			if (!decoded_obj) {
   22880:	4605      	mov	r5, r0
   22882:	2800      	cmp	r0, #0
   22884:	f000 8085 	beq.w	22992 <cloud_cmd_parse_type+0x13e>
		switch (type_cmd->type) {
   22888:	7933      	ldrb	r3, [r6, #4]
   2288a:	3b01      	subs	r3, #1
   2288c:	2b06      	cmp	r3, #6
   2288e:	f200 8083 	bhi.w	22998 <cloud_cmd_parse_type+0x144>
   22892:	e8df f003 	tbb	[pc, r3]
   22896:	2e04      	.short	0x2e04
   22898:	4e3e2e2e 	.word	0x4e3e2e2e
   2289c:	69          	.byte	0x69
   2289d:	00          	.byte	0x00
			if (cJSON_IsNull(decoded_obj)) {
   2289e:	f021 f8dc 	bl	43a5a <cJSON_IsNull>
   228a2:	b1b8      	cbz	r0, 228d4 <cloud_cmd_parse_type+0x80>
				parsed_cmd->data.sv.state =
   228a4:	2300      	movs	r3, #0
   228a6:	7423      	strb	r3, [r4, #16]
	if ((type_cmd->type == CLOUD_CMD_INTERVAL) &&
   228a8:	7935      	ldrb	r5, [r6, #4]
   228aa:	2d04      	cmp	r5, #4
   228ac:	d10f      	bne.n	228ce <cloud_cmd_parse_type+0x7a>
   228ae:	f994 3010 	ldrsb.w	r3, [r4, #16]
   228b2:	3301      	adds	r3, #1
   228b4:	d10b      	bne.n	228ce <cloud_cmd_parse_type+0x7a>
		if (parsed_cmd->data.sv.value == DISABLE_SEND_INTERVAL_VAL) {
   228b6:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   228ba:	2200      	movs	r2, #0
   228bc:	2300      	movs	r3, #0
   228be:	4640      	mov	r0, r8
   228c0:	4649      	mov	r1, r9
   228c2:	f7fa f9e1 	bl	1cc88 <__aeabi_dcmpeq>
   228c6:	2800      	cmp	r0, #0
   228c8:	d056      	beq.n	22978 <cloud_cmd_parse_type+0x124>
			parsed_cmd->data.sv.state = CLOUD_CMD_STATE_FALSE;
   228ca:	2300      	movs	r3, #0
   228cc:	7423      	strb	r3, [r4, #16]
	return 0;
   228ce:	2000      	movs	r0, #0
	parsed_cmd->type = type_cmd->type;
   228d0:	70a5      	strb	r5, [r4, #2]
	return 0;
   228d2:	e7c7      	b.n	22864 <cloud_cmd_parse_type+0x10>
			} else if (cJSON_IsBool(decoded_obj)) {
   228d4:	4628      	mov	r0, r5
   228d6:	f021 f8b9 	bl	43a4c <cJSON_IsBool>
   228da:	b910      	cbnz	r0, 228e2 <cloud_cmd_parse_type+0x8e>
				return -ESRCH;
   228dc:	f06f 0002 	mvn.w	r0, #2
   228e0:	e7c0      	b.n	22864 <cloud_cmd_parse_type+0x10>
					cJSON_IsTrue(decoded_obj) ?
   228e2:	4628      	mov	r0, r5
   228e4:	f021 f8ac 	bl	43a40 <cJSON_IsTrue>
						CLOUD_CMD_STATE_TRUE :
   228e8:	3800      	subs	r0, #0
   228ea:	bf18      	it	ne
   228ec:	2001      	movne	r0, #1
   228ee:	7420      	strb	r0, [r4, #16]
   228f0:	e7da      	b.n	228a8 <cloud_cmd_parse_type+0x54>
			if (cJSON_IsNull(decoded_obj)) {
   228f2:	f021 f8b2 	bl	43a5a <cJSON_IsNull>
   228f6:	2800      	cmp	r0, #0
   228f8:	d1d4      	bne.n	228a4 <cloud_cmd_parse_type+0x50>
			} else if (cJSON_IsNumber(decoded_obj)) {
   228fa:	4628      	mov	r0, r5
   228fc:	f021 f8b3 	bl	43a66 <cJSON_IsNumber>
   22900:	2800      	cmp	r0, #0
   22902:	d0eb      	beq.n	228dc <cloud_cmd_parse_type+0x88>
				parsed_cmd->data.sv.state =
   22904:	23ff      	movs	r3, #255	; 0xff
   22906:	7423      	strb	r3, [r4, #16]
				parsed_cmd->data.sv.value =
   22908:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   2290c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   22910:	e7ca      	b.n	228a8 <cloud_cmd_parse_type+0x54>
			if (cJSON_GetStringValue(decoded_obj) == NULL) {
   22912:	f021 f8b6 	bl	43a82 <cJSON_GetStringValue>
   22916:	2800      	cmp	r0, #0
   22918:	d0e0      	beq.n	228dc <cloud_cmd_parse_type+0x88>
				cJSON_GetStringValue(decoded_obj), NULL, 16);
   2291a:	4628      	mov	r0, r5
   2291c:	f021 f8b1 	bl	43a82 <cJSON_GetStringValue>
			parsed_cmd->data.sv.value = (double)strtol(
   22920:	2210      	movs	r2, #16
   22922:	2100      	movs	r1, #0
   22924:	f01d fa16 	bl	3fd54 <strtol>
   22928:	f7f9 fedc 	bl	1c6e4 <__aeabi_i2d>
   2292c:	e9c4 0102 	strd	r0, r1, [r4, #8]
			break;
   22930:	e7ba      	b.n	228a8 <cloud_cmd_parse_type+0x54>
	if ((data_obj == NULL) || (params == NULL)) {
   22932:	f114 0f08 	cmn.w	r4, #8
   22936:	d093      	beq.n	22860 <cloud_cmd_parse_type+0xc>
	if (!cJSON_IsObject(data_obj)) {
   22938:	f021 f8aa 	bl	43a90 <cJSON_IsObject>
   2293c:	2800      	cmp	r0, #0
   2293e:	d0cd      	beq.n	228dc <cloud_cmd_parse_type+0x88>
	blob = json_object_decode(data_obj, MODEM_PARAM_BLOB_KEY_STR);
   22940:	4918      	ldr	r1, [pc, #96]	; (229a4 <cloud_cmd_parse_type+0x150>)
   22942:	4628      	mov	r0, r5
   22944:	f01e fcde 	bl	41304 <json_object_decode>
	params->blob = cJSON_GetStringValue(blob);
   22948:	f021 f89b 	bl	43a82 <cJSON_GetStringValue>
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   2294c:	4916      	ldr	r1, [pc, #88]	; (229a8 <cloud_cmd_parse_type+0x154>)
	params->blob = cJSON_GetStringValue(blob);
   2294e:	60a0      	str	r0, [r4, #8]
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   22950:	4628      	mov	r0, r5
   22952:	f01e fcd7 	bl	41304 <json_object_decode>
	params->checksum = cJSON_GetStringValue(checksum);
   22956:	f021 f894 	bl	43a82 <cJSON_GetStringValue>
			-ESRCH : 0);
   2295a:	68a3      	ldr	r3, [r4, #8]
	params->checksum = cJSON_GetStringValue(checksum);
   2295c:	60e0      	str	r0, [r4, #12]
			-ESRCH : 0);
   2295e:	2b00      	cmp	r3, #0
   22960:	d0bc      	beq.n	228dc <cloud_cmd_parse_type+0x88>
			if (parsed_cmd->data.data_string == NULL) {
   22962:	2800      	cmp	r0, #0
   22964:	d1a0      	bne.n	228a8 <cloud_cmd_parse_type+0x54>
   22966:	e7b9      	b.n	228dc <cloud_cmd_parse_type+0x88>
				cJSON_GetStringValue(type_obj);
   22968:	4638      	mov	r0, r7
   2296a:	f021 f88a 	bl	43a82 <cJSON_GetStringValue>
			parsed_cmd->data.data_string =
   2296e:	60a0      	str	r0, [r4, #8]
   22970:	e7f7      	b.n	22962 <cloud_cmd_parse_type+0x10e>
	} else if (type_cmd->type != CLOUD_CMD_EMPTY) {
   22972:	2b00      	cmp	r3, #0
   22974:	d098      	beq.n	228a8 <cloud_cmd_parse_type+0x54>
   22976:	e773      	b.n	22860 <cloud_cmd_parse_type+0xc>
		} else if (parsed_cmd->data.sv.value <
   22978:	2600      	movs	r6, #0
   2297a:	4f0c      	ldr	r7, [pc, #48]	; (229ac <cloud_cmd_parse_type+0x158>)
   2297c:	4632      	mov	r2, r6
   2297e:	463b      	mov	r3, r7
   22980:	4640      	mov	r0, r8
   22982:	4649      	mov	r1, r9
   22984:	f7fa f98a 	bl	1cc9c <__aeabi_dcmplt>
   22988:	2800      	cmp	r0, #0
   2298a:	d0a0      	beq.n	228ce <cloud_cmd_parse_type+0x7a>
			parsed_cmd->data.sv.value = MIN_INTERVAL_VAL_SECONDS;
   2298c:	e9c4 6702 	strd	r6, r7, [r4, #8]
   22990:	e79d      	b.n	228ce <cloud_cmd_parse_type+0x7a>
				return -ENOENT; /* Command not found */
   22992:	f06f 0001 	mvn.w	r0, #1
   22996:	e765      	b.n	22864 <cloud_cmd_parse_type+0x10>
		switch (type_cmd->type) {
   22998:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2299c:	e762      	b.n	22864 <cloud_cmd_parse_type+0x10>
   2299e:	bf00      	nop
   229a0:	00046790 	.word	0x00046790
   229a4:	000483fd 	.word	0x000483fd
   229a8:	00048402 	.word	0x00048402
   229ac:	40140000 	.word	0x40140000

000229b0 <cloud_encode_data>:
{
   229b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   229b4:	4617      	mov	r7, r2
	int64_t data_ts = channel->ts;
   229b6:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   229ba:	e9cd 2300 	strd	r2, r3, [sp]
	if (channel == NULL || channel->data.buf == NULL ||
   229be:	6843      	ldr	r3, [r0, #4]
{
   229c0:	4606      	mov	r6, r0
   229c2:	4688      	mov	r8, r1
	if (channel == NULL || channel->data.buf == NULL ||
   229c4:	2b00      	cmp	r3, #0
   229c6:	d077      	beq.n	22ab8 <cloud_encode_data+0x108>
   229c8:	6883      	ldr	r3, [r0, #8]
   229ca:	2b00      	cmp	r3, #0
   229cc:	d074      	beq.n	22ab8 <cloud_encode_data+0x108>
	    channel->data.len == 0 || output == NULL ||
   229ce:	2f00      	cmp	r7, #0
   229d0:	d072      	beq.n	22ab8 <cloud_encode_data+0x108>
   229d2:	290a      	cmp	r1, #10
   229d4:	d870      	bhi.n	22ab8 <cloud_encode_data+0x108>
	cJSON *root_obj = cJSON_CreateObject();
   229d6:	f006 fc93 	bl	29300 <cJSON_CreateObject>
	if (root_obj == NULL) {
   229da:	4605      	mov	r5, r0
   229dc:	b938      	cbnz	r0, 229ee <cloud_encode_data+0x3e>
		cJSON_Delete(root_obj);
   229de:	f006 fbbb 	bl	29158 <cJSON_Delete>
		return -ENOMEM;
   229e2:	f06f 040b 	mvn.w	r4, #11
}
   229e6:	4620      	mov	r0, r4
   229e8:	b003      	add	sp, #12
   229ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = date_time_uptime_to_unix_time_ms(&data_ts);
   229ee:	4668      	mov	r0, sp
   229f0:	f00a f8ea 	bl	2cbc8 <date_time_uptime_to_unix_time_ms>
	if (ret) {
   229f4:	4602      	mov	r2, r0
   229f6:	b188      	cbz	r0, 22a1c <cloud_encode_data+0x6c>
   229f8:	4b31      	ldr	r3, [pc, #196]	; (22ac0 <cloud_encode_data+0x110>)
   229fa:	4c32      	ldr	r4, [pc, #200]	; (22ac4 <cloud_encode_data+0x114>)
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", ret);
   229fc:	4932      	ldr	r1, [pc, #200]	; (22ac8 <cloud_encode_data+0x118>)
   229fe:	1ae4      	subs	r4, r4, r3
   22a00:	08e4      	lsrs	r4, r4, #3
   22a02:	01a4      	lsls	r4, r4, #6
   22a04:	f044 0402 	orr.w	r4, r4, #2
   22a08:	4620      	mov	r0, r4
   22a0a:	f01e ff09 	bl	41820 <log_string_sync>
		LOG_WRN("Clearing timestamp");
   22a0e:	4620      	mov	r0, r4
   22a10:	492e      	ldr	r1, [pc, #184]	; (22acc <cloud_encode_data+0x11c>)
   22a12:	f01e ff05 	bl	41820 <log_string_sync>
		date_time_timestamp_clear(&data_ts);
   22a16:	4668      	mov	r0, sp
   22a18:	f021 fd97 	bl	4454a <date_time_timestamp_clear>
			   channel_type_str[channel->type]);
   22a1c:	7832      	ldrb	r2, [r6, #0]
	json_str = cJSON_CreateString(item);
   22a1e:	4b2c      	ldr	r3, [pc, #176]	; (22ad0 <cloud_encode_data+0x120>)
   22a20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   22a24:	f006 fc48 	bl	292b8 <cJSON_CreateString>
	if (json_str == NULL) {
   22a28:	4602      	mov	r2, r0
   22a2a:	b348      	cbz	r0, 22a80 <cloud_encode_data+0xd0>
	cJSON_AddItemToObject(parent, str, item);
   22a2c:	4628      	mov	r0, r5
   22a2e:	4929      	ldr	r1, [pc, #164]	; (22ad4 <cloud_encode_data+0x124>)
   22a30:	f020 ffe5 	bl	439fe <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   22a34:	f04f 0900 	mov.w	r9, #0
	json_str = cJSON_CreateString(item);
   22a38:	6870      	ldr	r0, [r6, #4]
   22a3a:	f006 fc3d 	bl	292b8 <cJSON_CreateString>
	if (json_str == NULL) {
   22a3e:	4602      	mov	r2, r0
   22a40:	b308      	cbz	r0, 22a86 <cloud_encode_data+0xd6>
	cJSON_AddItemToObject(parent, str, item);
   22a42:	4628      	mov	r0, r5
   22a44:	4924      	ldr	r1, [pc, #144]	; (22ad8 <cloud_encode_data+0x128>)
   22a46:	f020 ffda 	bl	439fe <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   22a4a:	2400      	movs	r4, #0
	ret += json_add_str(root_obj, CMD_GROUP_KEY_STR, cmd_group_str[group]);
   22a4c:	4b23      	ldr	r3, [pc, #140]	; (22adc <cloud_encode_data+0x12c>)
	ret += json_add_str(root_obj, CMD_DATA_TYPE_KEY_STR, channel->data.buf);
   22a4e:	444c      	add	r4, r9
	json_str = cJSON_CreateString(item);
   22a50:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   22a54:	f006 fc30 	bl	292b8 <cJSON_CreateString>
	if (json_str == NULL) {
   22a58:	4602      	mov	r2, r0
   22a5a:	b1b8      	cbz	r0, 22a8c <cloud_encode_data+0xdc>
	cJSON_AddItemToObject(parent, str, item);
   22a5c:	4628      	mov	r0, r5
   22a5e:	4920      	ldr	r1, [pc, #128]	; (22ae0 <cloud_encode_data+0x130>)
   22a60:	f020 ffcd 	bl	439fe <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   22a64:	2300      	movs	r3, #0
	ret += json_add_number(root_obj, DATA_TS, data_ts);
   22a66:	e9dd 0100 	ldrd	r0, r1, [sp]
	ret += json_add_str(root_obj, CMD_GROUP_KEY_STR, cmd_group_str[group]);
   22a6a:	441c      	add	r4, r3
	ret += json_add_number(root_obj, DATA_TS, data_ts);
   22a6c:	f7f9 fe76 	bl	1c75c <__aeabi_l2d>
	json_num = cJSON_CreateNumber(item);
   22a70:	ec41 0b10 	vmov	d0, r0, r1
   22a74:	f7fa ffbc 	bl	1d9f0 <cJSON_CreateNumber>
	if (json_num == NULL) {
   22a78:	4602      	mov	r2, r0
   22a7a:	b950      	cbnz	r0, 22a92 <cloud_encode_data+0xe2>
		cJSON_Delete(root_obj);
   22a7c:	4628      	mov	r0, r5
   22a7e:	e7ae      	b.n	229de <cloud_encode_data+0x2e>
		return -ENOMEM;
   22a80:	f06f 090b 	mvn.w	r9, #11
   22a84:	e7d8      	b.n	22a38 <cloud_encode_data+0x88>
   22a86:	f06f 040b 	mvn.w	r4, #11
   22a8a:	e7df      	b.n	22a4c <cloud_encode_data+0x9c>
   22a8c:	f06f 030b 	mvn.w	r3, #11
   22a90:	e7e9      	b.n	22a66 <cloud_encode_data+0xb6>
	cJSON_AddItemToObject(parent, str, item);
   22a92:	4628      	mov	r0, r5
   22a94:	4913      	ldr	r1, [pc, #76]	; (22ae4 <cloud_encode_data+0x134>)
   22a96:	f020 ffb2 	bl	439fe <cJSON_AddItemToObject>
	if (ret != 0) {
   22a9a:	2c00      	cmp	r4, #0
   22a9c:	d1ee      	bne.n	22a7c <cloud_encode_data+0xcc>
	buffer = cJSON_PrintUnformatted(root_obj);
   22a9e:	4628      	mov	r0, r5
   22aa0:	f020 ff93 	bl	439ca <cJSON_PrintUnformatted>
   22aa4:	4606      	mov	r6, r0
	cJSON_Delete(root_obj);
   22aa6:	4628      	mov	r0, r5
   22aa8:	f006 fb56 	bl	29158 <cJSON_Delete>
	output->len = strlen(buffer);
   22aac:	4630      	mov	r0, r6
	output->buf = buffer;
   22aae:	603e      	str	r6, [r7, #0]
	output->len = strlen(buffer);
   22ab0:	f7fa fbd4 	bl	1d25c <strlen>
   22ab4:	6078      	str	r0, [r7, #4]
	return 0;
   22ab6:	e796      	b.n	229e6 <cloud_encode_data+0x36>
		return -EINVAL;
   22ab8:	f06f 0415 	mvn.w	r4, #21
   22abc:	e793      	b.n	229e6 <cloud_encode_data+0x36>
   22abe:	bf00      	nop
   22ac0:	000463bc 	.word	0x000463bc
   22ac4:	0004640c 	.word	0x0004640c
   22ac8:	0004840b 	.word	0x0004840b
   22acc:	00048437 	.word	0x00048437
   22ad0:	00046710 	.word	0x00046710
   22ad4:	0004844a 	.word	0x0004844a
   22ad8:	000478b8 	.word	0x000478b8
   22adc:	00046764 	.word	0x00046764
   22ae0:	00048450 	.word	0x00048450
   22ae4:	0004845c 	.word	0x0004845c

00022ae8 <cloud_encode_env_sensors_data>:
{
   22ae8:	b570      	push	{r4, r5, r6, lr}
   22aea:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(sensor_data != NULL);
   22aec:	4604      	mov	r4, r0
{
   22aee:	b08a      	sub	sp, #40	; 0x28
	__ASSERT_NO_MSG(sensor_data != NULL);
   22af0:	b958      	cbnz	r0, 22b0a <cloud_encode_env_sensors_data+0x22>
   22af2:	4925      	ldr	r1, [pc, #148]	; (22b88 <cloud_encode_env_sensors_data+0xa0>)
   22af4:	4825      	ldr	r0, [pc, #148]	; (22b8c <cloud_encode_env_sensors_data+0xa4>)
   22af6:	f240 1387 	movw	r3, #391	; 0x187
   22afa:	4a25      	ldr	r2, [pc, #148]	; (22b90 <cloud_encode_env_sensors_data+0xa8>)
   22afc:	f01e fc62 	bl	413c4 <printk>
   22b00:	f240 1187 	movw	r1, #391	; 0x187
   22b04:	4822      	ldr	r0, [pc, #136]	; (22b90 <cloud_encode_env_sensors_data+0xa8>)
   22b06:	f01e fe7a 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   22b0a:	b95d      	cbnz	r5, 22b24 <cloud_encode_env_sensors_data+0x3c>
   22b0c:	4921      	ldr	r1, [pc, #132]	; (22b94 <cloud_encode_env_sensors_data+0xac>)
   22b0e:	481f      	ldr	r0, [pc, #124]	; (22b8c <cloud_encode_env_sensors_data+0xa4>)
   22b10:	f44f 73c4 	mov.w	r3, #392	; 0x188
   22b14:	4a1e      	ldr	r2, [pc, #120]	; (22b90 <cloud_encode_env_sensors_data+0xa8>)
   22b16:	f01e fc55 	bl	413c4 <printk>
   22b1a:	f44f 71c4 	mov.w	r1, #392	; 0x188
   22b1e:	481c      	ldr	r0, [pc, #112]	; (22b90 <cloud_encode_env_sensors_data+0xa8>)
   22b20:	f01e fe6d 	bl	417fe <assert_post_action>
	struct cloud_channel_data cloud_sensor = { .ts = sensor_data->ts };
   22b24:	2210      	movs	r2, #16
   22b26:	2100      	movs	r1, #0
   22b28:	eb0d 0002 	add.w	r0, sp, r2
   22b2c:	f022 f8fb 	bl	44d26 <memset>
   22b30:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22b34:	e9cd 2308 	strd	r2, r3, [sp, #32]
	switch (sensor_data->type) {
   22b38:	7823      	ldrb	r3, [r4, #0]
   22b3a:	2b03      	cmp	r3, #3
   22b3c:	d820      	bhi.n	22b80 <cloud_encode_env_sensors_data+0x98>
   22b3e:	e8df f003 	tbb	[pc, r3]
   22b42:	1902      	.short	0x1902
   22b44:	1d1b      	.short	0x1d1b
		cloud_sensor.type = CLOUD_CHANNEL_TEMP;
   22b46:	2308      	movs	r3, #8
	len = snprintf(buf, sizeof(buf), "%.1f",
   22b48:	ae02      	add	r6, sp, #8
   22b4a:	2106      	movs	r1, #6
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   22b4c:	f88d 3010 	strb.w	r3, [sp, #16]
	len = snprintf(buf, sizeof(buf), "%.1f",
   22b50:	4630      	mov	r0, r6
   22b52:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   22b56:	e9cd 2300 	strd	r2, r3, [sp]
   22b5a:	4a0f      	ldr	r2, [pc, #60]	; (22b98 <cloud_encode_env_sensors_data+0xb0>)
   22b5c:	f01d f816 	bl	3fb8c <sniprintf>
	cloud_sensor.data.len = len;
   22b60:	b2c0      	uxtb	r0, r0
   22b62:	9006      	str	r0, [sp, #24]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22b64:	462a      	mov	r2, r5
   22b66:	2106      	movs	r1, #6
   22b68:	a804      	add	r0, sp, #16
	cloud_sensor.data.buf = buf;
   22b6a:	9605      	str	r6, [sp, #20]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22b6c:	f7ff ff20 	bl	229b0 <cloud_encode_data>
}
   22b70:	b00a      	add	sp, #40	; 0x28
   22b72:	bd70      	pop	{r4, r5, r6, pc}
		cloud_sensor.type = CLOUD_CHANNEL_HUMID;
   22b74:	2309      	movs	r3, #9
   22b76:	e7e7      	b.n	22b48 <cloud_encode_env_sensors_data+0x60>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_PRESS;
   22b78:	230a      	movs	r3, #10
   22b7a:	e7e5      	b.n	22b48 <cloud_encode_env_sensors_data+0x60>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   22b7c:	230b      	movs	r3, #11
   22b7e:	e7e3      	b.n	22b48 <cloud_encode_env_sensors_data+0x60>
	switch (sensor_data->type) {
   22b80:	f04f 30ff 	mov.w	r0, #4294967295
   22b84:	e7f4      	b.n	22b70 <cloud_encode_env_sensors_data+0x88>
   22b86:	bf00      	nop
   22b88:	00048480 	.word	0x00048480
   22b8c:	00048156 	.word	0x00048156
   22b90:	0004845f 	.word	0x0004845f
   22b94:	0004849b 	.word	0x0004849b
   22b98:	000484b1 	.word	0x000484b1

00022b9c <cloud_encode_motion_data>:
{
   22b9c:	b530      	push	{r4, r5, lr}
   22b9e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(motion_data != NULL);
   22ba0:	4604      	mov	r4, r0
{
   22ba2:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(motion_data != NULL);
   22ba4:	b958      	cbnz	r0, 22bbe <cloud_encode_motion_data+0x22>
   22ba6:	491d      	ldr	r1, [pc, #116]	; (22c1c <cloud_encode_motion_data+0x80>)
   22ba8:	481d      	ldr	r0, [pc, #116]	; (22c20 <cloud_encode_motion_data+0x84>)
   22baa:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   22bae:	4a1d      	ldr	r2, [pc, #116]	; (22c24 <cloud_encode_motion_data+0x88>)
   22bb0:	f01e fc08 	bl	413c4 <printk>
   22bb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   22bb8:	481a      	ldr	r0, [pc, #104]	; (22c24 <cloud_encode_motion_data+0x88>)
   22bba:	f01e fe20 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   22bbe:	b95d      	cbnz	r5, 22bd8 <cloud_encode_motion_data+0x3c>
   22bc0:	4919      	ldr	r1, [pc, #100]	; (22c28 <cloud_encode_motion_data+0x8c>)
   22bc2:	4817      	ldr	r0, [pc, #92]	; (22c20 <cloud_encode_motion_data+0x84>)
   22bc4:	f240 13af 	movw	r3, #431	; 0x1af
   22bc8:	4a16      	ldr	r2, [pc, #88]	; (22c24 <cloud_encode_motion_data+0x88>)
   22bca:	f01e fbfb 	bl	413c4 <printk>
   22bce:	f240 11af 	movw	r1, #431	; 0x1af
   22bd2:	4814      	ldr	r0, [pc, #80]	; (22c24 <cloud_encode_motion_data+0x88>)
   22bd4:	f01e fe13 	bl	417fe <assert_post_action>
	struct cloud_channel_data cloud_sensor = {
   22bd8:	2210      	movs	r2, #16
   22bda:	2100      	movs	r1, #0
   22bdc:	4668      	mov	r0, sp
   22bde:	f022 f8a2 	bl	44d26 <memset>
   22be2:	2301      	movs	r3, #1
   22be4:	f88d 3000 	strb.w	r3, [sp]
   22be8:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   22bec:	e9cd 2304 	strd	r2, r3, [sp, #16]
	switch (motion_data->orientation) {
   22bf0:	7823      	ldrb	r3, [r4, #0]
   22bf2:	2b01      	cmp	r3, #1
   22bf4:	d005      	beq.n	22c02 <cloud_encode_motion_data+0x66>
   22bf6:	2b02      	cmp	r3, #2
   22bf8:	d00d      	beq.n	22c16 <cloud_encode_motion_data+0x7a>
   22bfa:	f04f 30ff 	mov.w	r0, #4294967295
}
   22bfe:	b007      	add	sp, #28
   22c00:	bd30      	pop	{r4, r5, pc}
		cloud_sensor.data.buf = "NORMAL";
   22c02:	4b0a      	ldr	r3, [pc, #40]	; (22c2c <cloud_encode_motion_data+0x90>)
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   22c04:	9301      	str	r3, [sp, #4]
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   22c06:	2303      	movs	r3, #3
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22c08:	462a      	mov	r2, r5
   22c0a:	2106      	movs	r1, #6
   22c0c:	4668      	mov	r0, sp
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   22c0e:	9302      	str	r3, [sp, #8]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22c10:	f7ff fece 	bl	229b0 <cloud_encode_data>
   22c14:	e7f3      	b.n	22bfe <cloud_encode_motion_data+0x62>
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   22c16:	4b06      	ldr	r3, [pc, #24]	; (22c30 <cloud_encode_motion_data+0x94>)
   22c18:	e7f4      	b.n	22c04 <cloud_encode_motion_data+0x68>
   22c1a:	bf00      	nop
   22c1c:	000484b6 	.word	0x000484b6
   22c20:	00048156 	.word	0x00048156
   22c24:	0004845f 	.word	0x0004845f
   22c28:	0004849b 	.word	0x0004849b
   22c2c:	000484d1 	.word	0x000484d1
   22c30:	000484d8 	.word	0x000484d8

00022c34 <cloud_encode_device_status_data>:
{
   22c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c38:	4680      	mov	r8, r0
   22c3a:	4692      	mov	sl, r2
   22c3c:	469b      	mov	fp, r3
	__ASSERT_NO_MSG((ui != NULL) || !ui_count);
   22c3e:	4689      	mov	r9, r1
{
   22c40:	b085      	sub	sp, #20
	__ASSERT_NO_MSG((ui != NULL) || !ui_count);
   22c42:	b961      	cbnz	r1, 22c5e <cloud_encode_device_status_data+0x2a>
   22c44:	b15a      	cbz	r2, 22c5e <cloud_encode_device_status_data+0x2a>
   22c46:	495a      	ldr	r1, [pc, #360]	; (22db0 <cloud_encode_device_status_data+0x17c>)
   22c48:	485a      	ldr	r0, [pc, #360]	; (22db4 <cloud_encode_device_status_data+0x180>)
   22c4a:	f44f 7311 	mov.w	r3, #580	; 0x244
   22c4e:	4a5a      	ldr	r2, [pc, #360]	; (22db8 <cloud_encode_device_status_data+0x184>)
   22c50:	f01e fbb8 	bl	413c4 <printk>
   22c54:	f44f 7111 	mov.w	r1, #580	; 0x244
   22c58:	4857      	ldr	r0, [pc, #348]	; (22db8 <cloud_encode_device_status_data+0x184>)
   22c5a:	f01e fdd0 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG((fota != NULL) || !fota_count);
   22c5e:	f1bb 0f00 	cmp.w	fp, #0
   22c62:	d10d      	bne.n	22c80 <cloud_encode_device_status_data+0x4c>
   22c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22c66:	b15b      	cbz	r3, 22c80 <cloud_encode_device_status_data+0x4c>
   22c68:	4954      	ldr	r1, [pc, #336]	; (22dbc <cloud_encode_device_status_data+0x188>)
   22c6a:	4852      	ldr	r0, [pc, #328]	; (22db4 <cloud_encode_device_status_data+0x180>)
   22c6c:	f240 2345 	movw	r3, #581	; 0x245
   22c70:	4a51      	ldr	r2, [pc, #324]	; (22db8 <cloud_encode_device_status_data+0x184>)
   22c72:	f01e fba7 	bl	413c4 <printk>
   22c76:	f240 2145 	movw	r1, #581	; 0x245
   22c7a:	484f      	ldr	r0, [pc, #316]	; (22db8 <cloud_encode_device_status_data+0x184>)
   22c7c:	f01e fdbf 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   22c80:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22c82:	b95b      	cbnz	r3, 22c9c <cloud_encode_device_status_data+0x68>
   22c84:	494e      	ldr	r1, [pc, #312]	; (22dc0 <cloud_encode_device_status_data+0x18c>)
   22c86:	484b      	ldr	r0, [pc, #300]	; (22db4 <cloud_encode_device_status_data+0x180>)
   22c88:	f240 2346 	movw	r3, #582	; 0x246
   22c8c:	4a4a      	ldr	r2, [pc, #296]	; (22db8 <cloud_encode_device_status_data+0x184>)
   22c8e:	f01e fb99 	bl	413c4 <printk>
   22c92:	f240 2146 	movw	r1, #582	; 0x246
   22c96:	4848      	ldr	r0, [pc, #288]	; (22db8 <cloud_encode_device_status_data+0x184>)
   22c98:	f01e fdb1 	bl	417fe <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   22c9c:	f006 fb30 	bl	29300 <cJSON_CreateObject>
   22ca0:	4606      	mov	r6, r0
	cJSON *state_obj = cJSON_CreateObject();
   22ca2:	f006 fb2d 	bl	29300 <cJSON_CreateObject>
   22ca6:	4607      	mov	r7, r0
	cJSON *reported_obj = cJSON_CreateObject();
   22ca8:	f006 fb2a 	bl	29300 <cJSON_CreateObject>
   22cac:	4605      	mov	r5, r0
	cJSON *device_obj = cJSON_CreateObject();
   22cae:	f006 fb27 	bl	29300 <cJSON_CreateObject>
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   22cb2:	4b44      	ldr	r3, [pc, #272]	; (22dc4 <cloud_encode_device_status_data+0x190>)
	cJSON *device_obj = cJSON_CreateObject();
   22cb4:	4604      	mov	r4, r0
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   22cb6:	889a      	ldrh	r2, [r3, #4]
   22cb8:	6818      	ldr	r0, [r3, #0]
   22cba:	799b      	ldrb	r3, [r3, #6]
   22cbc:	9002      	str	r0, [sp, #8]
   22cbe:	f8ad 200c 	strh.w	r2, [sp, #12]
   22cc2:	f88d 300e 	strb.w	r3, [sp, #14]
	if (root_obj == NULL || state_obj == NULL ||
   22cc6:	b116      	cbz	r6, 22cce <cloud_encode_device_status_data+0x9a>
   22cc8:	b10f      	cbz	r7, 22cce <cloud_encode_device_status_data+0x9a>
   22cca:	b105      	cbz	r5, 22cce <cloud_encode_device_status_data+0x9a>
	    reported_obj == NULL || device_obj == NULL) {
   22ccc:	b984      	cbnz	r4, 22cf0 <cloud_encode_device_status_data+0xbc>
		cJSON_Delete(root_obj);
   22cce:	4630      	mov	r0, r6
   22cd0:	f006 fa42 	bl	29158 <cJSON_Delete>
		cJSON_Delete(state_obj);
   22cd4:	4638      	mov	r0, r7
   22cd6:	f006 fa3f 	bl	29158 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   22cda:	4628      	mov	r0, r5
   22cdc:	f006 fa3c 	bl	29158 <cJSON_Delete>
		cJSON_Delete(device_obj);
   22ce0:	4620      	mov	r0, r4
   22ce2:	f006 fa39 	bl	29158 <cJSON_Delete>
		return -ENOMEM;
   22ce6:	f06f 000b 	mvn.w	r0, #11
}
   22cea:	b005      	add	sp, #20
   22cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cJSON *dummy_obj = cJSON_CreateNull();
   22cf0:	f006 fac6 	bl	29280 <cJSON_CreateNull>
	if (dummy_obj == NULL) {
   22cf4:	4602      	mov	r2, r0
   22cf6:	b118      	cbz	r0, 22d00 <cloud_encode_device_status_data+0xcc>
	cJSON_AddItemToObject(parent, str, item);
   22cf8:	4628      	mov	r0, r5
   22cfa:	a902      	add	r1, sp, #8
   22cfc:	f020 fe7f 	bl	439fe <cJSON_AddItemToObject>
		dev_str[i] = tolower(dev_str[i]);
   22d00:	4831      	ldr	r0, [pc, #196]	; (22dc8 <cloud_encode_device_status_data+0x194>)
   22d02:	aa02      	add	r2, sp, #8
	for (int i = 0; dev_str[i]; ++i) {
   22d04:	f812 3b01 	ldrb.w	r3, [r2], #1
   22d08:	bb8b      	cbnz	r3, 22d6e <cloud_encode_device_status_data+0x13a>
	if (modem_param) {
   22d0a:	f1b8 0f00 	cmp.w	r8, #0
   22d0e:	d137      	bne.n	22d80 <cloud_encode_device_status_data+0x14c>
	size_t item_cnt = 0;
   22d10:	f04f 0800 	mov.w	r8, #0
	if (service_info_json_object_encode(ui, ui_count,
   22d14:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   22d18:	465a      	mov	r2, fp
   22d1a:	9300      	str	r3, [sp, #0]
   22d1c:	4651      	mov	r1, sl
   22d1e:	4648      	mov	r0, r9
   22d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22d22:	9401      	str	r4, [sp, #4]
   22d24:	f000 fae6 	bl	232f4 <service_info_json_object_encode>
   22d28:	b110      	cbz	r0, 22d30 <cloud_encode_device_status_data+0xfc>
	if (item_cnt != 0) {
   22d2a:	f1b8 0f00 	cmp.w	r8, #0
   22d2e:	d02f      	beq.n	22d90 <cloud_encode_device_status_data+0x15c>
	cJSON_AddItemToObject(parent, str, item);
   22d30:	4622      	mov	r2, r4
   22d32:	4628      	mov	r0, r5
   22d34:	a902      	add	r1, sp, #8
   22d36:	f020 fe62 	bl	439fe <cJSON_AddItemToObject>
   22d3a:	462a      	mov	r2, r5
   22d3c:	4638      	mov	r0, r7
   22d3e:	4923      	ldr	r1, [pc, #140]	; (22dcc <cloud_encode_device_status_data+0x198>)
   22d40:	f020 fe5d 	bl	439fe <cJSON_AddItemToObject>
   22d44:	463a      	mov	r2, r7
   22d46:	4922      	ldr	r1, [pc, #136]	; (22dd0 <cloud_encode_device_status_data+0x19c>)
   22d48:	4630      	mov	r0, r6
   22d4a:	f020 fe58 	bl	439fe <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   22d4e:	4630      	mov	r0, r6
   22d50:	f020 fe3b 	bl	439ca <cJSON_PrintUnformatted>
   22d54:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   22d56:	4630      	mov	r0, r6
   22d58:	f006 f9fe 	bl	29158 <cJSON_Delete>
	output->buf = buffer;
   22d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	output->len = strlen(buffer);
   22d5e:	4620      	mov	r0, r4
	output->buf = buffer;
   22d60:	601c      	str	r4, [r3, #0]
	output->len = strlen(buffer);
   22d62:	f7fa fa7b 	bl	1d25c <strlen>
   22d66:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22d68:	6058      	str	r0, [r3, #4]
	return 0;
   22d6a:	2000      	movs	r0, #0
   22d6c:	e7bd      	b.n	22cea <cloud_encode_device_status_data+0xb6>
		dev_str[i] = tolower(dev_str[i]);
   22d6e:	5cc1      	ldrb	r1, [r0, r3]
   22d70:	f001 0103 	and.w	r1, r1, #3
   22d74:	2901      	cmp	r1, #1
   22d76:	bf08      	it	eq
   22d78:	3320      	addeq	r3, #32
   22d7a:	f802 3c01 	strb.w	r3, [r2, #-1]
	for (int i = 0; dev_str[i]; ++i) {
   22d7e:	e7c1      	b.n	22d04 <cloud_encode_device_status_data+0xd0>
		val = modem_info_json_object_encode((struct modem_param_info *)
   22d80:	4640      	mov	r0, r8
   22d82:	4621      	mov	r1, r4
   22d84:	f009 fccc 	bl	2c720 <modem_info_json_object_encode>
		if (val > 0) {
   22d88:	f1b0 0800 	subs.w	r8, r0, #0
   22d8c:	dcc2      	bgt.n	22d14 <cloud_encode_device_status_data+0xe0>
   22d8e:	e7bf      	b.n	22d10 <cloud_encode_device_status_data+0xdc>
		cJSON_Delete(root_obj);
   22d90:	4630      	mov	r0, r6
   22d92:	f006 f9e1 	bl	29158 <cJSON_Delete>
		cJSON_Delete(state_obj);
   22d96:	4638      	mov	r0, r7
   22d98:	f006 f9de 	bl	29158 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   22d9c:	4628      	mov	r0, r5
   22d9e:	f006 f9db 	bl	29158 <cJSON_Delete>
		cJSON_Delete(device_obj);
   22da2:	4620      	mov	r0, r4
   22da4:	f006 f9d8 	bl	29158 <cJSON_Delete>
		return -EAGAIN;
   22da8:	f06f 000a 	mvn.w	r0, #10
   22dac:	e79d      	b.n	22cea <cloud_encode_device_status_data+0xb6>
   22dae:	bf00      	nop
   22db0:	000484e4 	.word	0x000484e4
   22db4:	00048156 	.word	0x00048156
   22db8:	0004845f 	.word	0x0004845f
   22dbc:	00048505 	.word	0x00048505
   22dc0:	0004849b 	.word	0x0004849b
   22dc4:	00048533 	.word	0x00048533
   22dc8:	0004f35b 	.word	0x0004f35b
   22dcc:	0004852a 	.word	0x0004852a
   22dd0:	0004e7b6 	.word	0x0004e7b6

00022dd4 <cloud_decode_command>:
{
   22dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22dd8:	b091      	sub	sp, #68	; 0x44
	if (input == NULL) {
   22dda:	2800      	cmp	r0, #0
   22ddc:	f000 813e 	beq.w	2305c <cloud_decode_command+0x288>
	root_obj = cJSON_Parse(input);
   22de0:	f020 fdef 	bl	439c2 <cJSON_Parse>
	if (root_obj == NULL) {
   22de4:	4604      	mov	r4, r0
   22de6:	2800      	cmp	r0, #0
   22de8:	f000 813b 	beq.w	23062 <cloud_decode_command+0x28e>
   22dec:	4e9e      	ldr	r6, [pc, #632]	; (23068 <cloud_decode_command+0x294>)
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   22dee:	2500      	movs	r5, #0
   22df0:	4637      	mov	r7, r6
			(json_value_string_compare(group_obj,
   22df2:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 230a4 <cloud_decode_command+0x2d0>
		group_obj = json_object_decode(root_obj, cmd_groups[i]->key);
   22df6:	f856 3b04 	ldr.w	r3, [r6], #4
   22dfa:	4620      	mov	r0, r4
   22dfc:	6819      	ldr	r1, [r3, #0]
   22dfe:	f01e fa81 	bl	41304 <json_object_decode>
		if ((group_obj != NULL) &&
   22e02:	b1f8      	cbz	r0, 22e44 <cloud_decode_command+0x70>
					cmd_group_str[cmd_groups[i]->group]))) {
   22e04:	f856 3c04 	ldr.w	r3, [r6, #-4]
   22e08:	791b      	ldrb	r3, [r3, #4]
			(json_value_string_compare(group_obj,
   22e0a:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
   22e0e:	f01e fa6a 	bl	412e6 <json_value_string_compare>
		if ((group_obj != NULL) &&
   22e12:	b1b8      	cbz	r0, 22e44 <cloud_decode_command+0x70>
			group = cmd_groups[i];
   22e14:	f857 6025 	ldr.w	r6, [r7, r5, lsl #2]
	if (group == NULL) {
   22e18:	b9c6      	cbnz	r6, 22e4c <cloud_decode_command+0x78>
	state_obj = cJSON_GetObjectItem(root_obj, "state");
   22e1a:	4994      	ldr	r1, [pc, #592]	; (2306c <cloud_decode_command+0x298>)
   22e1c:	4620      	mov	r0, r4
   22e1e:	f020 fddf 	bl	439e0 <cJSON_GetObjectItem>
	config_obj = cJSON_DetachItemFromObject(
   22e22:	4993      	ldr	r1, [pc, #588]	; (23070 <cloud_decode_command+0x29c>)
   22e24:	2800      	cmp	r0, #0
   22e26:	bf08      	it	eq
   22e28:	4620      	moveq	r0, r4
   22e2a:	f020 fdff 	bl	43a2c <cJSON_DetachItemFromObject>
	if (config_obj == NULL) {
   22e2e:	4606      	mov	r6, r0
   22e30:	2800      	cmp	r0, #0
   22e32:	f040 8097 	bne.w	22f64 <cloud_decode_command+0x190>
	cJSON_Delete(root_obj);
   22e36:	4620      	mov	r0, r4
   22e38:	f006 f98e 	bl	29158 <cJSON_Delete>
	return 0;
   22e3c:	2000      	movs	r0, #0
}
   22e3e:	b011      	add	sp, #68	; 0x44
   22e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   22e44:	3501      	adds	r5, #1
   22e46:	2d04      	cmp	r5, #4
   22e48:	d1d5      	bne.n	22df6 <cloud_decode_command+0x22>
   22e4a:	e7e6      	b.n	22e1a <cloud_decode_command+0x46>
	for (size_t j = 0; j < group->num_children; ++j) {
   22e4c:	f04f 0800 	mov.w	r8, #0
	cmd_parsed.group = group->group;
   22e50:	4f88      	ldr	r7, [pc, #544]	; (23074 <cloud_decode_command+0x2a0>)
   22e52:	7933      	ldrb	r3, [r6, #4]
   22e54:	703b      	strb	r3, [r7, #0]
	for (size_t j = 0; j < group->num_children; ++j) {
   22e56:	68f3      	ldr	r3, [r6, #12]
   22e58:	4598      	cmp	r8, r3
   22e5a:	d2de      	bcs.n	22e1a <cloud_decode_command+0x46>
			json_object_decode(root_obj, group->children[j].key);
   22e5c:	68b3      	ldr	r3, [r6, #8]
   22e5e:	ea4f 1508 	mov.w	r5, r8, lsl #4
   22e62:	4620      	mov	r0, r4
   22e64:	5959      	ldr	r1, [r3, r5]
   22e66:	f01e fa4d 	bl	41304 <json_object_decode>
		if ((channel_obj != NULL) &&
   22e6a:	2800      	cmp	r0, #0
   22e6c:	d04e      	beq.n	22f0c <cloud_decode_command+0x138>
			    channel_type_str[group->children[j].channel]))) {
   22e6e:	68b3      	ldr	r3, [r6, #8]
		    (json_value_string_compare(
   22e70:	4a81      	ldr	r2, [pc, #516]	; (23078 <cloud_decode_command+0x2a4>)
			    channel_type_str[group->children[j].channel]))) {
   22e72:	442b      	add	r3, r5
   22e74:	791b      	ldrb	r3, [r3, #4]
		    (json_value_string_compare(
   22e76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   22e7a:	f01e fa34 	bl	412e6 <json_value_string_compare>
		if ((channel_obj != NULL) &&
   22e7e:	2800      	cmp	r0, #0
   22e80:	d044      	beq.n	22f0c <cloud_decode_command+0x138>
			chan = &group->children[j];
   22e82:	68b3      	ldr	r3, [r6, #8]
	if (chan == NULL) {
   22e84:	195d      	adds	r5, r3, r5
   22e86:	d0c8      	beq.n	22e1a <cloud_decode_command+0x46>
	for (size_t k = 0; k < chan->num_children; ++k) {
   22e88:	f04f 0800 	mov.w	r8, #0
	cmd_parsed.channel = chan->channel;
   22e8c:	792b      	ldrb	r3, [r5, #4]
   22e8e:	4a7b      	ldr	r2, [pc, #492]	; (2307c <cloud_decode_command+0x2a8>)
   22e90:	707b      	strb	r3, [r7, #1]
   22e92:	4b7b      	ldr	r3, [pc, #492]	; (23080 <cloud_decode_command+0x2ac>)
		ret = cloud_cmd_parse_type(type, type_obj, &cmd_parsed);
   22e94:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 23074 <cloud_decode_command+0x2a0>
   22e98:	1a9b      	subs	r3, r3, r2
   22e9a:	08db      	lsrs	r3, r3, #3
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   22e9c:	019b      	lsls	r3, r3, #6
   22e9e:	9305      	str	r3, [sp, #20]
   22ea0:	f043 0303 	orr.w	r3, r3, #3
   22ea4:	9306      	str	r3, [sp, #24]
	for (size_t k = 0; k < chan->num_children; ++k) {
   22ea6:	68eb      	ldr	r3, [r5, #12]
   22ea8:	4598      	cmp	r8, r3
   22eaa:	d2b6      	bcs.n	22e1a <cloud_decode_command+0x46>
		type = &chan->children[k];
   22eac:	68aa      	ldr	r2, [r5, #8]
   22eae:	ea4f 1308 	mov.w	r3, r8, lsl #4
		type_obj = json_object_decode(root_obj, type->key);
   22eb2:	58d1      	ldr	r1, [r2, r3]
   22eb4:	4620      	mov	r0, r4
		type = &chan->children[k];
   22eb6:	eb02 1b08 	add.w	fp, r2, r8, lsl #4
		type_obj = json_object_decode(root_obj, type->key);
   22eba:	f01e fa23 	bl	41304 <json_object_decode>
		ret = cloud_cmd_parse_type(type, type_obj, &cmd_parsed);
   22ebe:	464a      	mov	r2, r9
		type_obj = json_object_decode(root_obj, type->key);
   22ec0:	4601      	mov	r1, r0
		ret = cloud_cmd_parse_type(type, type_obj, &cmd_parsed);
   22ec2:	4658      	mov	r0, fp
   22ec4:	f7ff fcc6 	bl	22854 <cloud_cmd_parse_type>
		if (ret != 0) {
   22ec8:	b318      	cbz	r0, 22f12 <cloud_decode_command+0x13e>
			if (ret != -ENOENT) {
   22eca:	1c81      	adds	r1, r0, #2
   22ecc:	9008      	str	r0, [sp, #32]
   22ece:	d01a      	beq.n	22f06 <cloud_decode_command+0x132>
				LOG_ERR("[%s:%d] Unhandled cmd format for %s, %s, error %d",
   22ed0:	7932      	ldrb	r2, [r6, #4]
   22ed2:	9b05      	ldr	r3, [sp, #20]
   22ed4:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   22ed8:	f043 0b01 	orr.w	fp, r3, #1
   22edc:	f01e fcb3 	bl	41846 <log_strdup>
   22ee0:	7929      	ldrb	r1, [r5, #4]
   22ee2:	4b65      	ldr	r3, [pc, #404]	; (23078 <cloud_decode_command+0x2a4>)
   22ee4:	9007      	str	r0, [sp, #28]
   22ee6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   22eea:	f01e fcac 	bl	41846 <log_strdup>
   22eee:	9b08      	ldr	r3, [sp, #32]
   22ef0:	9a07      	ldr	r2, [sp, #28]
   22ef2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   22ef6:	9200      	str	r2, [sp, #0]
   22ef8:	f44f 7358 	mov.w	r3, #864	; 0x360
   22efc:	4658      	mov	r0, fp
   22efe:	4a61      	ldr	r2, [pc, #388]	; (23084 <cloud_decode_command+0x2b0>)
   22f00:	4961      	ldr	r1, [pc, #388]	; (23088 <cloud_decode_command+0x2b4>)
   22f02:	f01e fc8d 	bl	41820 <log_string_sync>
	for (size_t k = 0; k < chan->num_children; ++k) {
   22f06:	f108 0801 	add.w	r8, r8, #1
   22f0a:	e7cc      	b.n	22ea6 <cloud_decode_command+0xd2>
	for (size_t j = 0; j < group->num_children; ++j) {
   22f0c:	f108 0801 	add.w	r8, r8, #1
   22f10:	e7a1      	b.n	22e56 <cloud_decode_command+0x82>
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   22f12:	783b      	ldrb	r3, [r7, #0]
   22f14:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
   22f18:	f01e fc95 	bl	41846 <log_strdup>
   22f1c:	787b      	ldrb	r3, [r7, #1]
   22f1e:	4a56      	ldr	r2, [pc, #344]	; (23078 <cloud_decode_command+0x2a4>)
   22f20:	4683      	mov	fp, r0
   22f22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   22f26:	f01e fc8e 	bl	41846 <log_strdup>
   22f2a:	78b9      	ldrb	r1, [r7, #2]
   22f2c:	4a57      	ldr	r2, [pc, #348]	; (2308c <cloud_decode_command+0x2b8>)
   22f2e:	9007      	str	r0, [sp, #28]
   22f30:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   22f34:	f01e fc87 	bl	41846 <log_strdup>
   22f38:	9b07      	ldr	r3, [sp, #28]
   22f3a:	4a52      	ldr	r2, [pc, #328]	; (23084 <cloud_decode_command+0x2b0>)
   22f3c:	e9cd b300 	strd	fp, r3, [sp]
   22f40:	4953      	ldr	r1, [pc, #332]	; (23090 <cloud_decode_command+0x2bc>)
   22f42:	f44f 735a 	mov.w	r3, #872	; 0x368
   22f46:	9002      	str	r0, [sp, #8]
   22f48:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   22f4c:	f01e fc68 	bl	41820 <log_string_sync>
		(void)cloud_cmd_handle_sensor_set_chan_cfg(&cmd_parsed);
   22f50:	4648      	mov	r0, r9
   22f52:	f7ff fc2d 	bl	227b0 <cloud_cmd_handle_sensor_set_chan_cfg>
		if (cloud_command_cb) {
   22f56:	4b4f      	ldr	r3, [pc, #316]	; (23094 <cloud_decode_command+0x2c0>)
   22f58:	681b      	ldr	r3, [r3, #0]
   22f5a:	2b00      	cmp	r3, #0
   22f5c:	d0d3      	beq.n	22f06 <cloud_decode_command+0x132>
			cloud_command_cb(&cmd_parsed);
   22f5e:	4648      	mov	r0, r9
   22f60:	4798      	blx	r3
   22f62:	e7d0      	b.n	22f06 <cloud_decode_command+0x132>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   22f64:	2700      	movs	r7, #0
   22f66:	4b46      	ldr	r3, [pc, #280]	; (23080 <cloud_decode_command+0x2ac>)
   22f68:	4a44      	ldr	r2, [pc, #272]	; (2307c <cloud_decode_command+0x2a8>)
   22f6a:	f8df 913c 	ldr.w	r9, [pc, #316]	; 230a8 <cloud_decode_command+0x2d4>
   22f6e:	1a9b      	subs	r3, r3, r2
   22f70:	08db      	lsrs	r3, r3, #3
		cJSON *channel_obj = json_object_decode(
   22f72:	f8df a104 	ldr.w	sl, [pc, #260]	; 23078 <cloud_decode_command+0x2a4>
   22f76:	9307      	str	r3, [sp, #28]
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   22f78:	f8d9 300c 	ldr.w	r3, [r9, #12]
   22f7c:	429f      	cmp	r7, r3
   22f7e:	d303      	bcc.n	22f88 <cloud_decode_command+0x1b4>
	cJSON_Delete(config_obj);
   22f80:	4630      	mov	r0, r6
   22f82:	f006 f8e9 	bl	29158 <cJSON_Delete>
	return 0;
   22f86:	e756      	b.n	22e36 <cloud_decode_command+0x62>
		struct cloud_command found_config_item = {
   22f88:	2218      	movs	r2, #24
   22f8a:	2100      	movs	r1, #0
   22f8c:	a80a      	add	r0, sp, #40	; 0x28
   22f8e:	f021 feca 	bl	44d26 <memset>
   22f92:	2308      	movs	r3, #8
   22f94:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			channel_type_str[group->children[ch].channel]);
   22f98:	f8d9 3008 	ldr.w	r3, [r9, #8]
		cJSON *channel_obj = json_object_decode(
   22f9c:	4630      	mov	r0, r6
			channel_type_str[group->children[ch].channel]);
   22f9e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   22fa2:	791b      	ldrb	r3, [r3, #4]
   22fa4:	013d      	lsls	r5, r7, #4
		cJSON *channel_obj = json_object_decode(
   22fa6:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
   22faa:	f01e f9ab 	bl	41304 <json_object_decode>
		if (channel_obj == NULL) {
   22fae:	9005      	str	r0, [sp, #20]
   22fb0:	b908      	cbnz	r0, 22fb6 <cloud_decode_command+0x1e2>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   22fb2:	3701      	adds	r7, #1
   22fb4:	e7e0      	b.n	22f78 <cloud_decode_command+0x1a4>
		for (size_t type = 0; type < chan->num_children; ++type) {
   22fb6:	f04f 0800 	mov.w	r8, #0
		struct cmd *chan = &group->children[ch];
   22fba:	f8d9 3008 	ldr.w	r3, [r9, #8]
   22fbe:	441d      	add	r5, r3
		found_config_item.channel = chan->channel;
   22fc0:	792b      	ldrb	r3, [r5, #4]
   22fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   22fc6:	9b07      	ldr	r3, [sp, #28]
   22fc8:	019b      	lsls	r3, r3, #6
   22fca:	9306      	str	r3, [sp, #24]
   22fcc:	f043 0303 	orr.w	r3, r3, #3
   22fd0:	9308      	str	r3, [sp, #32]
		for (size_t type = 0; type < chan->num_children; ++type) {
   22fd2:	68eb      	ldr	r3, [r5, #12]
   22fd4:	4598      	cmp	r8, r3
   22fd6:	d2ec      	bcs.n	22fb2 <cloud_decode_command+0x1de>
			int ret = cloud_cmd_parse_type(&chan->children[type],
   22fd8:	68a8      	ldr	r0, [r5, #8]
   22fda:	9905      	ldr	r1, [sp, #20]
   22fdc:	aa0a      	add	r2, sp, #40	; 0x28
   22fde:	eb00 1008 	add.w	r0, r0, r8, lsl #4
   22fe2:	f7ff fc37 	bl	22854 <cloud_cmd_parse_type>
			if (ret != 0) {
   22fe6:	b1b8      	cbz	r0, 23018 <cloud_decode_command+0x244>
				if (ret != -ENOENT) {
   22fe8:	1c82      	adds	r2, r0, #2
   22fea:	9009      	str	r0, [sp, #36]	; 0x24
   22fec:	d011      	beq.n	23012 <cloud_decode_command+0x23e>
					LOG_ERR("[%s:%d] Unhandled cfg format for %s, error %d",
   22fee:	792a      	ldrb	r2, [r5, #4]
   22ff0:	9b06      	ldr	r3, [sp, #24]
   22ff2:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   22ff6:	f043 0b01 	orr.w	fp, r3, #1
   22ffa:	f01e fc24 	bl	41846 <log_strdup>
   22ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23000:	4a25      	ldr	r2, [pc, #148]	; (23098 <cloud_decode_command+0x2c4>)
   23002:	e9cd 0300 	strd	r0, r3, [sp]
   23006:	4925      	ldr	r1, [pc, #148]	; (2309c <cloud_decode_command+0x2c8>)
   23008:	f240 33a5 	movw	r3, #933	; 0x3a5
   2300c:	4658      	mov	r0, fp
   2300e:	f01e fc07 	bl	41820 <log_string_sync>
		for (size_t type = 0; type < chan->num_children; ++type) {
   23012:	f108 0801 	add.w	r8, r8, #1
   23016:	e7dc      	b.n	22fd2 <cloud_decode_command+0x1fe>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   23018:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   2301c:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
   23020:	f01e fc11 	bl	41846 <log_strdup>
   23024:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   23028:	4a18      	ldr	r2, [pc, #96]	; (2308c <cloud_decode_command+0x2b8>)
   2302a:	4683      	mov	fp, r0
   2302c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   23030:	f01e fc09 	bl	41846 <log_strdup>
   23034:	f240 33ad 	movw	r3, #941	; 0x3ad
   23038:	e9cd b000 	strd	fp, r0, [sp]
   2303c:	4a16      	ldr	r2, [pc, #88]	; (23098 <cloud_decode_command+0x2c4>)
   2303e:	4918      	ldr	r1, [pc, #96]	; (230a0 <cloud_decode_command+0x2cc>)
   23040:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   23044:	f01e fbec 	bl	41820 <log_string_sync>
			(void)cloud_cmd_handle_sensor_set_chan_cfg(
   23048:	a80a      	add	r0, sp, #40	; 0x28
   2304a:	f7ff fbb1 	bl	227b0 <cloud_cmd_handle_sensor_set_chan_cfg>
			if (cloud_command_cb) {
   2304e:	4b11      	ldr	r3, [pc, #68]	; (23094 <cloud_decode_command+0x2c0>)
   23050:	681b      	ldr	r3, [r3, #0]
   23052:	2b00      	cmp	r3, #0
   23054:	d0dd      	beq.n	23012 <cloud_decode_command+0x23e>
				cloud_command_cb(&found_config_item);
   23056:	a80a      	add	r0, sp, #40	; 0x28
   23058:	4798      	blx	r3
   2305a:	e7da      	b.n	23012 <cloud_decode_command+0x23e>
		return -EINVAL;
   2305c:	f06f 0015 	mvn.w	r0, #21
   23060:	e6ed      	b.n	22e3e <cloud_decode_command+0x6a>
		return -ENOENT;
   23062:	f06f 0001 	mvn.w	r0, #1
   23066:	e6ea      	b.n	22e3e <cloud_decode_command+0x6a>
   23068:	200205f0 	.word	0x200205f0
   2306c:	0004e7b6 	.word	0x0004e7b6
   23070:	0004eb07 	.word	0x0004eb07
   23074:	20021898 	.word	0x20021898
   23078:	00046710 	.word	0x00046710
   2307c:	000463bc 	.word	0x000463bc
   23080:	0004640c 	.word	0x0004640c
   23084:	00048690 	.word	0x00048690
   23088:	0004853a 	.word	0x0004853a
   2308c:	00046790 	.word	0x00046790
   23090:	0004856c 	.word	0x0004856c
   23094:	20024660 	.word	0x20024660
   23098:	000486a1 	.word	0x000486a1
   2309c:	0004858a 	.word	0x0004858a
   230a0:	000485b8 	.word	0x000485b8
   230a4:	00046764 	.word	0x00046764
   230a8:	20020600 	.word	0x20020600

000230ac <cloud_decode_init>:
{
   230ac:	b510      	push	{r4, lr}
   230ae:	4604      	mov	r4, r0
	cJSON_Init();
   230b0:	f006 f932 	bl	29318 <cJSON_Init>
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   230b4:	2200      	movs	r2, #0
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   230b6:	2000      	movs	r0, #0
	cloud_command_cb = cb;
   230b8:	4b08      	ldr	r3, [pc, #32]	; (230dc <cloud_decode_init+0x30>)
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   230ba:	4909      	ldr	r1, [pc, #36]	; (230e0 <cloud_decode_init+0x34>)
	cloud_command_cb = cb;
   230bc:	601c      	str	r4, [r3, #0]
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   230be:	4b09      	ldr	r3, [pc, #36]	; (230e4 <cloud_decode_init+0x38>)
   230c0:	3201      	adds	r2, #1
   230c2:	2a0a      	cmp	r2, #10
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   230c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
			[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE] =
   230c8:	e9c3 0106 	strd	r0, r1, [r3, #24]
			[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_HIGH_ENABLE] =
   230cc:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   230d0:	f103 0330 	add.w	r3, r3, #48	; 0x30
   230d4:	d1f4      	bne.n	230c0 <cloud_decode_init+0x14>
}
   230d6:	2000      	movs	r0, #0
   230d8:	bd10      	pop	{r4, pc}
   230da:	bf00      	nop
   230dc:	20024660 	.word	0x20024660
   230e0:	bff00000 	.word	0xbff00000
   230e4:	20020018 	.word	0x20020018

000230e8 <cloud_get_channel_enable_state>:
{
   230e8:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   230ea:	2300      	movs	r3, #0
		if (sensor_cfg[i].chan == channel) {
   230ec:	2430      	movs	r4, #48	; 0x30
   230ee:	4a09      	ldr	r2, [pc, #36]	; (23114 <cloud_get_channel_enable_state+0x2c>)
   230f0:	fb04 f103 	mul.w	r1, r4, r3
   230f4:	5c8d      	ldrb	r5, [r1, r2]
   230f6:	4285      	cmp	r5, r0
   230f8:	d106      	bne.n	23108 <cloud_get_channel_enable_state+0x20>
				   [SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE];
   230fa:	440a      	add	r2, r1
   230fc:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   23100:	f7f9 fdf4 	bl	1ccec <__aeabi_d2iz>
   23104:	b240      	sxtb	r0, r0
}
   23106:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23108:	3301      	adds	r3, #1
   2310a:	2b0a      	cmp	r3, #10
   2310c:	d1f0      	bne.n	230f0 <cloud_get_channel_enable_state+0x8>
	return CLOUD_CMD_STATE_UNDEFINED;
   2310e:	f04f 30ff 	mov.w	r0, #4294967295
   23112:	e7f8      	b.n	23106 <cloud_get_channel_enable_state+0x1e>
   23114:	20020018 	.word	0x20020018

00023118 <cloud_encode_config_data>:
{
   23118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(output != NULL);
   2311c:	4606      	mov	r6, r0
   2311e:	b958      	cbnz	r0, 23138 <cloud_encode_config_data+0x20>
   23120:	493a      	ldr	r1, [pc, #232]	; (2320c <cloud_encode_config_data+0xf4>)
   23122:	483b      	ldr	r0, [pc, #236]	; (23210 <cloud_encode_config_data+0xf8>)
   23124:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   23128:	4a3a      	ldr	r2, [pc, #232]	; (23214 <cloud_encode_config_data+0xfc>)
   2312a:	f01e f94b 	bl	413c4 <printk>
   2312e:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   23132:	4838      	ldr	r0, [pc, #224]	; (23214 <cloud_encode_config_data+0xfc>)
   23134:	f01e fb63 	bl	417fe <assert_post_action>
	cJSON *chan_obj = cJSON_CreateObject();
   23138:	f006 f8e2 	bl	29300 <cJSON_CreateObject>
   2313c:	4605      	mov	r5, r0
	cJSON *state_obj = cJSON_CreateObject();
   2313e:	f006 f8df 	bl	29300 <cJSON_CreateObject>
   23142:	4682      	mov	sl, r0
	cJSON *reported_obj = cJSON_CreateObject();
   23144:	f006 f8dc 	bl	29300 <cJSON_CreateObject>
   23148:	4681      	mov	r9, r0
	cJSON *config_obj = cJSON_CreateObject();
   2314a:	f006 f8d9 	bl	29300 <cJSON_CreateObject>
   2314e:	4680      	mov	r8, r0
	cJSON *root_obj = cJSON_CreateObject();
   23150:	f006 f8d6 	bl	29300 <cJSON_CreateObject>
   23154:	4604      	mov	r4, r0
	if (chan_obj == NULL || state_obj == NULL ||
   23156:	2d00      	cmp	r5, #0
   23158:	d043      	beq.n	231e2 <cloud_encode_config_data+0xca>
   2315a:	f1ba 0f00 	cmp.w	sl, #0
   2315e:	d040      	beq.n	231e2 <cloud_encode_config_data+0xca>
   23160:	f1b9 0f00 	cmp.w	r9, #0
   23164:	d03d      	beq.n	231e2 <cloud_encode_config_data+0xca>
	    reported_obj == NULL || config_obj == NULL ||
   23166:	f1b8 0f00 	cmp.w	r8, #0
   2316a:	d03a      	beq.n	231e2 <cloud_encode_config_data+0xca>
   2316c:	2800      	cmp	r0, #0
   2316e:	d038      	beq.n	231e2 <cloud_encode_config_data+0xca>
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   23170:	2000      	movs	r0, #0
   23172:	f7ff ffb9 	bl	230e8 <cloud_get_channel_enable_state>
	if (gps_state != CLOUD_CMD_STATE_UNDEFINED) {
   23176:	1c42      	adds	r2, r0, #1
   23178:	d00a      	beq.n	23190 <cloud_encode_config_data+0x78>
	json_bool = cJSON_CreateBool(value);
   2317a:	1e43      	subs	r3, r0, #1
   2317c:	4258      	negs	r0, r3
   2317e:	4158      	adcs	r0, r3
   23180:	f006 f88a 	bl	29298 <cJSON_CreateBool>
	if (json_bool == NULL) {
   23184:	4602      	mov	r2, r0
   23186:	b360      	cbz	r0, 231e2 <cloud_encode_config_data+0xca>
	cJSON_AddItemToObject(parent, str, item);
   23188:	4628      	mov	r0, r5
   2318a:	4923      	ldr	r1, [pc, #140]	; (23218 <cloud_encode_config_data+0x100>)
   2318c:	f020 fc37 	bl	439fe <cJSON_AddItemToObject>
	if (cJSON_GetArraySize(chan_obj) == 0) {
   23190:	4628      	mov	r0, r5
   23192:	f020 fc1d 	bl	439d0 <cJSON_GetArraySize>
   23196:	4607      	mov	r7, r0
   23198:	b328      	cbz	r0, 231e6 <cloud_encode_config_data+0xce>
	cJSON_AddItemToObject(config_obj, channel_type_str[CLOUD_CHANNEL_GPS],
   2319a:	462a      	mov	r2, r5
   2319c:	4640      	mov	r0, r8
   2319e:	491f      	ldr	r1, [pc, #124]	; (2321c <cloud_encode_config_data+0x104>)
   231a0:	f020 fc2d 	bl	439fe <cJSON_AddItemToObject>
	cJSON_AddItemToObject(reported_obj, "config", config_obj);
   231a4:	4642      	mov	r2, r8
   231a6:	4648      	mov	r0, r9
   231a8:	491d      	ldr	r1, [pc, #116]	; (23220 <cloud_encode_config_data+0x108>)
   231aa:	f020 fc28 	bl	439fe <cJSON_AddItemToObject>
	cJSON_AddItemToObject(state_obj, "reported", reported_obj);
   231ae:	464a      	mov	r2, r9
   231b0:	4650      	mov	r0, sl
   231b2:	491c      	ldr	r1, [pc, #112]	; (23224 <cloud_encode_config_data+0x10c>)
   231b4:	f020 fc23 	bl	439fe <cJSON_AddItemToObject>
	cJSON_AddItemToObject(root_obj, "state", state_obj);
   231b8:	4652      	mov	r2, sl
   231ba:	491b      	ldr	r1, [pc, #108]	; (23228 <cloud_encode_config_data+0x110>)
   231bc:	4620      	mov	r0, r4
   231be:	f020 fc1e 	bl	439fe <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   231c2:	4620      	mov	r0, r4
   231c4:	f020 fc01 	bl	439ca <cJSON_PrintUnformatted>
   231c8:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   231ca:	4620      	mov	r0, r4
   231cc:	f005 ffc4 	bl	29158 <cJSON_Delete>
	output->len = strlen(buffer);
   231d0:	4628      	mov	r0, r5
	output->buf = buffer;
   231d2:	6035      	str	r5, [r6, #0]
	output->len = strlen(buffer);
   231d4:	f7fa f842 	bl	1d25c <strlen>
	return 0;
   231d8:	2700      	movs	r7, #0
	output->len = strlen(buffer);
   231da:	6070      	str	r0, [r6, #4]
}
   231dc:	4638      	mov	r0, r7
   231de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret = -ENOMEM;
   231e2:	f06f 070b 	mvn.w	r7, #11
	output->buf = NULL;
   231e6:	2300      	movs	r3, #0
	cJSON_Delete(chan_obj);
   231e8:	4628      	mov	r0, r5
	output->len = 0;
   231ea:	e9c6 3300 	strd	r3, r3, [r6]
	cJSON_Delete(chan_obj);
   231ee:	f005 ffb3 	bl	29158 <cJSON_Delete>
	cJSON_Delete(state_obj);
   231f2:	4650      	mov	r0, sl
   231f4:	f005 ffb0 	bl	29158 <cJSON_Delete>
	cJSON_Delete(reported_obj);
   231f8:	4648      	mov	r0, r9
   231fa:	f005 ffad 	bl	29158 <cJSON_Delete>
	cJSON_Delete(config_obj);
   231fe:	4640      	mov	r0, r8
   23200:	f005 ffaa 	bl	29158 <cJSON_Delete>
	cJSON_Delete(root_obj);
   23204:	4620      	mov	r0, r4
   23206:	f005 ffa7 	bl	29158 <cJSON_Delete>
	return ret;
   2320a:	e7e7      	b.n	231dc <cloud_encode_config_data+0xc4>
   2320c:	0004849b 	.word	0x0004849b
   23210:	00048156 	.word	0x00048156
   23214:	0004845f 	.word	0x0004845f
   23218:	000485d7 	.word	0x000485d7
   2321c:	0004e52d 	.word	0x0004e52d
   23220:	0004eb07 	.word	0x0004eb07
   23224:	0004852a 	.word	0x0004852a
   23228:	0004e7b6 	.word	0x0004e7b6

0002322c <cloud_set_channel_enable_state>:
{
   2322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2322e:	4606      	mov	r6, r0
   23230:	460f      	mov	r7, r1
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23232:	2500      	movs	r5, #0
   23234:	4c07      	ldr	r4, [pc, #28]	; (23254 <cloud_set_channel_enable_state+0x28>)
		if (sensor_cfg[i].chan == channel) {
   23236:	7823      	ldrb	r3, [r4, #0]
   23238:	42b3      	cmp	r3, r6
   2323a:	d104      	bne.n	23246 <cloud_set_channel_enable_state+0x1a>
				[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] = state;
   2323c:	4638      	mov	r0, r7
   2323e:	f7f9 fa51 	bl	1c6e4 <__aeabi_i2d>
   23242:	e9c4 0102 	strd	r0, r1, [r4, #8]
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23246:	3501      	adds	r5, #1
   23248:	2d0a      	cmp	r5, #10
   2324a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2324e:	d1f2      	bne.n	23236 <cloud_set_channel_enable_state+0xa>
}
   23250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23252:	bf00      	nop
   23254:	20020018 	.word	0x20020018

00023258 <cloud_is_send_allowed>:
{
   23258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (sensor_cfg[i].chan == channel) {
   2325c:	4c23      	ldr	r4, [pc, #140]	; (232ec <cloud_is_send_allowed+0x94>)
{
   2325e:	ec57 6b10 	vmov	r6, r7, d0
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23262:	2500      	movs	r5, #0
		if (sensor_cfg[i].chan == channel) {
   23264:	2230      	movs	r2, #48	; 0x30
   23266:	46a2      	mov	sl, r4
   23268:	fb02 f305 	mul.w	r3, r2, r5
   2326c:	5d19      	ldrb	r1, [r3, r4]
   2326e:	4281      	cmp	r1, r0
   23270:	d12a      	bne.n	232c8 <cloud_is_send_allowed+0x70>
	    (cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] ==
   23272:	441c      	add	r4, r3
	if ((cfg == NULL) ||
   23274:	2200      	movs	r2, #0
   23276:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   2327a:	2300      	movs	r3, #0
   2327c:	f7f9 fd04 	bl	1cc88 <__aeabi_dcmpeq>
   23280:	bb28      	cbnz	r0, 232ce <cloud_is_send_allowed+0x76>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE] ==
   23282:	e9d4 8906 	ldrd	r8, r9, [r4, #24]
   23286:	2200      	movs	r2, #0
   23288:	4640      	mov	r0, r8
   2328a:	4649      	mov	r1, r9
   2328c:	4b18      	ldr	r3, [pc, #96]	; (232f0 <cloud_is_send_allowed+0x98>)
   2328e:	f7f9 fcfb 	bl	1cc88 <__aeabi_dcmpeq>
   23292:	b130      	cbz	r0, 232a2 <cloud_is_send_allowed+0x4a>
		CLOUD_CMD_STATE_TRUE) &&
   23294:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   23298:	4630      	mov	r0, r6
   2329a:	4639      	mov	r1, r7
   2329c:	f7f9 fcfe 	bl	1cc9c <__aeabi_dcmplt>
   232a0:	b9b8      	cbnz	r0, 232d2 <cloud_is_send_allowed+0x7a>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_HIGH_ENABLE] ==
   232a2:	2330      	movs	r3, #48	; 0x30
   232a4:	fb03 a505 	mla	r5, r3, r5, sl
   232a8:	2200      	movs	r2, #0
   232aa:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
   232ae:	4b10      	ldr	r3, [pc, #64]	; (232f0 <cloud_is_send_allowed+0x98>)
   232b0:	f7f9 fcea 	bl	1cc88 <__aeabi_dcmpeq>
   232b4:	b178      	cbz	r0, 232d6 <cloud_is_send_allowed+0x7e>
		CLOUD_CMD_STATE_TRUE) &&
   232b6:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
   232ba:	4630      	mov	r0, r6
   232bc:	4639      	mov	r1, r7
   232be:	f7f9 fd0b 	bl	1ccd8 <__aeabi_dcmpgt>
   232c2:	b930      	cbnz	r0, 232d2 <cloud_is_send_allowed+0x7a>
}
   232c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   232c8:	3501      	adds	r5, #1
   232ca:	2d0a      	cmp	r5, #10
   232cc:	d1cc      	bne.n	23268 <cloud_is_send_allowed+0x10>
		return false;
   232ce:	2000      	movs	r0, #0
   232d0:	e7f8      	b.n	232c4 <cloud_is_send_allowed+0x6c>
		return true;
   232d2:	2001      	movs	r0, #1
   232d4:	e7f6      	b.n	232c4 <cloud_is_send_allowed+0x6c>
			!= CLOUD_CMD_STATE_TRUE) &&
   232d6:	2200      	movs	r2, #0
   232d8:	4640      	mov	r0, r8
   232da:	4649      	mov	r1, r9
   232dc:	4b04      	ldr	r3, [pc, #16]	; (232f0 <cloud_is_send_allowed+0x98>)
   232de:	f7f9 fcd3 	bl	1cc88 <__aeabi_dcmpeq>
   232e2:	fab0 f080 	clz	r0, r0
   232e6:	0940      	lsrs	r0, r0, #5
   232e8:	e7ec      	b.n	232c4 <cloud_is_send_allowed+0x6c>
   232ea:	bf00      	nop
   232ec:	20020018 	.word	0x20020018
   232f0:	3ff00000 	.word	0x3ff00000

000232f4 <service_info_json_object_encode>:
}

int service_info_json_object_encode(
	const char * const ui[], const uint32_t ui_count, const char * const fota[],
	const uint32_t fota_count, const uint16_t fota_version, cJSON * const obj_out)
{
   232f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   232f8:	b087      	sub	sp, #28
   232fa:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   232fe:	4604      	mov	r4, r0
   23300:	4689      	mov	r9, r1
   23302:	4616      	mov	r6, r2
   23304:	461f      	mov	r7, r3
	int err = 0;
	cJSON *service_info_obj = NULL;
	char fota_name[FOTAS_JSON_NAME_SIZE];

	if ((obj_out == NULL) || ((ui == NULL) && ui_count) ||
   23306:	f1b8 0f00 	cmp.w	r8, #0
   2330a:	d02e      	beq.n	2336a <service_info_json_object_encode+0x76>
   2330c:	b900      	cbnz	r0, 23310 <service_info_json_object_encode+0x1c>
   2330e:	bb61      	cbnz	r1, 2336a <service_info_json_object_encode+0x76>
   23310:	b906      	cbnz	r6, 23314 <service_info_json_object_encode+0x20>
	    ((fota == NULL) && fota_count)) {
   23312:	bb57      	cbnz	r7, 2336a <service_info_json_object_encode+0x76>
		return -EINVAL;
	}

	service_info_obj = cJSON_CreateObject();
   23314:	f005 fff4 	bl	29300 <cJSON_CreateObject>
	if (service_info_obj == NULL) {
   23318:	4605      	mov	r5, r0
   2331a:	b348      	cbz	r0, 23370 <service_info_json_object_encode+0x7c>
		return -ENOMEM;
	}

	if (!err) {
		err = add_array_obj(ui, ui_count, UI_JSON_NAME,
   2331c:	4603      	mov	r3, r0
   2331e:	4649      	mov	r1, r9
   23320:	4620      	mov	r0, r4
   23322:	4a15      	ldr	r2, [pc, #84]	; (23378 <service_info_json_object_encode+0x84>)
   23324:	f01d fff2 	bl	4130c <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   23328:	4604      	mov	r4, r0
   2332a:	b9d0      	cbnz	r0, 23362 <service_info_json_object_encode+0x6e>
		snprintf(fota_name, sizeof(fota_name), "%s%hu", FOTAS_JSON_NAME,
   2332c:	210c      	movs	r1, #12
   2332e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   23332:	4a12      	ldr	r2, [pc, #72]	; (2337c <service_info_json_object_encode+0x88>)
   23334:	9300      	str	r3, [sp, #0]
   23336:	eb0d 0001 	add.w	r0, sp, r1
   2333a:	4b11      	ldr	r3, [pc, #68]	; (23380 <service_info_json_object_encode+0x8c>)
   2333c:	f01c fc26 	bl	3fb8c <sniprintf>
			 fota_version);
		err = add_array_obj(fota, fota_count, fota_name,
   23340:	462b      	mov	r3, r5
   23342:	4639      	mov	r1, r7
   23344:	4630      	mov	r0, r6
   23346:	aa03      	add	r2, sp, #12
   23348:	f01d ffe0 	bl	4130c <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   2334c:	4604      	mov	r4, r0
   2334e:	b940      	cbnz	r0, 23362 <service_info_json_object_encode+0x6e>
		cJSON_AddItemToObject(obj_out, SERVICE_INFO_JSON_NAME,
   23350:	462a      	mov	r2, r5
   23352:	4640      	mov	r0, r8
   23354:	490b      	ldr	r1, [pc, #44]	; (23384 <service_info_json_object_encode+0x90>)
   23356:	f020 fb52 	bl	439fe <cJSON_AddItemToObject>
	} else {
		cJSON_Delete(service_info_obj);
	}

	return err;
}
   2335a:	4620      	mov	r0, r4
   2335c:	b007      	add	sp, #28
   2335e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_Delete(service_info_obj);
   23362:	4628      	mov	r0, r5
   23364:	f005 fef8 	bl	29158 <cJSON_Delete>
   23368:	e7f7      	b.n	2335a <service_info_json_object_encode+0x66>
		return -EINVAL;
   2336a:	f06f 0415 	mvn.w	r4, #21
   2336e:	e7f4      	b.n	2335a <service_info_json_object_encode+0x66>
		return -ENOMEM;
   23370:	f06f 040b 	mvn.w	r4, #11
   23374:	e7f1      	b.n	2335a <service_info_json_object_encode+0x66>
   23376:	bf00      	nop
   23378:	000483fa 	.word	0x000483fa
   2337c:	000486bc 	.word	0x000486bc
   23380:	000486b5 	.word	0x000486b5
   23384:	000486c2 	.word	0x000486c2

00023388 <gps_control_is_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23388:	4b03      	ldr	r3, [pc, #12]	; (23398 <gps_control_is_enabled+0x10>)
   2338a:	e8d3 0faf 	lda	r0, [r3]
}

bool gps_control_is_enabled(void)
{
	return atomic_get(&gps_is_enabled);
}
   2338e:	3800      	subs	r0, #0
   23390:	bf18      	it	ne
   23392:	2001      	movne	r0, #1
   23394:	4770      	bx	lr
   23396:	bf00      	nop
   23398:	20024670 	.word	0x20024670

0002339c <gps_control_is_active>:
   2339c:	4b03      	ldr	r3, [pc, #12]	; (233ac <gps_control_is_active+0x10>)
   2339e:	e8d3 0faf 	lda	r0, [r3]

bool gps_control_is_active(void)
{
	return atomic_get(&gps_is_active);
}
   233a2:	3800      	subs	r0, #0
   233a4:	bf18      	it	ne
   233a6:	2001      	movne	r0, #1
   233a8:	4770      	bx	lr
   233aa:	bf00      	nop
   233ac:	2002466c 	.word	0x2002466c

000233b0 <gps_control_set_active>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   233b0:	4b05      	ldr	r3, [pc, #20]	; (233c8 <gps_control_set_active+0x18>)
   233b2:	e8d3 2fef 	ldaex	r2, [r3]
   233b6:	e8c3 0fe1 	stlex	r1, r0, [r3]
   233ba:	2900      	cmp	r1, #0
   233bc:	d1f9      	bne.n	233b2 <gps_control_set_active+0x2>

bool gps_control_set_active(bool active)
{
	return atomic_set(&gps_is_active, active ? 1 : 0);
}
   233be:	1e10      	subs	r0, r2, #0
   233c0:	bf18      	it	ne
   233c2:	2001      	movne	r0, #1
   233c4:	4770      	bx	lr
   233c6:	bf00      	nop
   233c8:	2002466c 	.word	0x2002466c

000233cc <stop>:
{
   233cc:	b538      	push	{r3, r4, r5, lr}
	if (gps_dev == NULL) {
   233ce:	4b18      	ldr	r3, [pc, #96]	; (23430 <stop+0x64>)
   233d0:	4c18      	ldr	r4, [pc, #96]	; (23434 <stop+0x68>)
   233d2:	6818      	ldr	r0, [r3, #0]
   233d4:	4b18      	ldr	r3, [pc, #96]	; (23438 <stop+0x6c>)
   233d6:	1ae4      	subs	r4, r4, r3
   233d8:	08e4      	lsrs	r4, r4, #3
   233da:	01a4      	lsls	r4, r4, #6
   233dc:	b930      	cbnz	r0, 233ec <stop+0x20>
		LOG_ERR("GPS controller is not initialized");
   233de:	4917      	ldr	r1, [pc, #92]	; (2343c <stop+0x70>)
   233e0:	f044 0001 	orr.w	r0, r4, #1
}
   233e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LOG_INF("GPS operation was stopped");
   233e8:	f01e ba1a 	b.w	41820 <log_string_sync>
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->api;

	if (api->stop == NULL) {
   233ec:	6883      	ldr	r3, [r0, #8]
   233ee:	685b      	ldr	r3, [r3, #4]
   233f0:	b153      	cbz	r3, 23408 <stop+0x3c>
		return -ENOTSUP;
	}

	return api->stop(dev);
   233f2:	4798      	blx	r3
	if (err) {
   233f4:	4605      	mov	r5, r0
   233f6:	b150      	cbz	r0, 2340e <stop+0x42>
		LOG_ERR("Failed to disable GPS, error: %d", err);
   233f8:	462a      	mov	r2, r5
   233fa:	f044 0001 	orr.w	r0, r4, #1
   233fe:	4910      	ldr	r1, [pc, #64]	; (23440 <stop+0x74>)
}
   23400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Failed to disable GPS, error: %d", err);
   23404:	f01e ba0c 	b.w	41820 <log_string_sync>
		return -ENOTSUP;
   23408:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2340c:	e7f4      	b.n	233f8 <stop+0x2c>
	k_delayed_work_cancel(&start_work);
   2340e:	480d      	ldr	r0, [pc, #52]	; (23444 <stop+0x78>)
   23410:	f01a fe6a 	bl	3e0e8 <k_delayed_work_cancel>
   23414:	4b0c      	ldr	r3, [pc, #48]	; (23448 <stop+0x7c>)
   23416:	e8d3 2fef 	ldaex	r2, [r3]
   2341a:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2341e:	2900      	cmp	r1, #0
   23420:	d1f9      	bne.n	23416 <stop+0x4a>
	gps_control_set_active(false);
   23422:	4628      	mov	r0, r5
   23424:	f7ff ffc4 	bl	233b0 <gps_control_set_active>
	LOG_INF("GPS operation was stopped");
   23428:	4908      	ldr	r1, [pc, #32]	; (2344c <stop+0x80>)
   2342a:	f044 0003 	orr.w	r0, r4, #3
   2342e:	e7d9      	b.n	233e4 <stop+0x18>
   23430:	20024668 	.word	0x20024668
   23434:	00046454 	.word	0x00046454
   23438:	000463bc 	.word	0x000463bc
   2343c:	000486ce 	.word	0x000486ce
   23440:	000486f0 	.word	0x000486f0
   23444:	200218b0 	.word	0x200218b0
   23448:	20024670 	.word	0x20024670
   2344c:	00048711 	.word	0x00048711

00023450 <start>:
{
   23450:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct gps_config gps_cfg = {
   23454:	2210      	movs	r2, #16
   23456:	2100      	movs	r1, #0
   23458:	4668      	mov	r0, sp
   2345a:	f021 fc64 	bl	44d26 <memset>
   2345e:	2302      	movs	r3, #2
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   23460:	4d34      	ldr	r5, [pc, #208]	; (23534 <start+0xe4>)
	struct gps_config gps_cfg = {
   23462:	f88d 3000 	strb.w	r3, [sp]
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   23466:	682b      	ldr	r3, [r5, #0]
	struct gps_config gps_cfg = {
   23468:	f04f 0801 	mov.w	r8, #1
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   2346c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
	struct gps_config gps_cfg = {
   23470:	9301      	str	r3, [sp, #4]
   23472:	f44f 73b4 	mov.w	r3, #360	; 0x168
   23476:	4c30      	ldr	r4, [pc, #192]	; (23538 <start+0xe8>)
	if (gps_dev == NULL) {
   23478:	4f30      	ldr	r7, [pc, #192]	; (2353c <start+0xec>)
	struct gps_config gps_cfg = {
   2347a:	9302      	str	r3, [sp, #8]
   2347c:	4b30      	ldr	r3, [pc, #192]	; (23540 <start+0xf0>)
	if (gps_dev == NULL) {
   2347e:	683a      	ldr	r2, [r7, #0]
   23480:	1ae4      	subs	r4, r4, r3
   23482:	08e4      	lsrs	r4, r4, #3
	struct gps_config gps_cfg = {
   23484:	f88d 800d 	strb.w	r8, [sp, #13]
	if (gps_dev == NULL) {
   23488:	01a4      	lsls	r4, r4, #6
   2348a:	b93a      	cbnz	r2, 2349c <start+0x4c>
		LOG_ERR("GPS controller is not initialized properly");
   2348c:	492d      	ldr	r1, [pc, #180]	; (23544 <start+0xf4>)
   2348e:	ea44 0008 	orr.w	r0, r4, r8
   23492:	f01e f9c5 	bl	41820 <log_string_sync>
}
   23496:	b004      	add	sp, #16
   23498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("Enabling PSM");
   2349c:	f044 0603 	orr.w	r6, r4, #3
   234a0:	4630      	mov	r0, r6
   234a2:	4929      	ldr	r1, [pc, #164]	; (23548 <start+0xf8>)
   234a4:	f01e f9bc 	bl	41820 <log_string_sync>
	err = lte_lc_psm_req(true);
   234a8:	4640      	mov	r0, r8
   234aa:	f008 fa15 	bl	2b8d8 <lte_lc_psm_req>
	if (err) {
   234ae:	4602      	mov	r2, r0
   234b0:	b198      	cbz	r0, 234da <start+0x8a>
		LOG_ERR("PSM request failed, error: %d", err);
   234b2:	4926      	ldr	r1, [pc, #152]	; (2354c <start+0xfc>)
   234b4:	f044 0001 	orr.w	r0, r4, #1
   234b8:	f01e f9b2 	bl	41820 <log_string_sync>
	err = gps_start(gps_dev, &gps_cfg);
   234bc:	6838      	ldr	r0, [r7, #0]
	if ((dev == NULL) || (cfg == NULL)) {
   234be:	b188      	cbz	r0, 234e4 <start+0x94>
	if (api->start == NULL) {
   234c0:	6883      	ldr	r3, [r0, #8]
   234c2:	681b      	ldr	r3, [r3, #0]
   234c4:	b18b      	cbz	r3, 234ea <start+0x9a>
	return api->start(dev, cfg);
   234c6:	4669      	mov	r1, sp
   234c8:	4798      	blx	r3
	if (err) {
   234ca:	4602      	mov	r2, r0
   234cc:	b180      	cbz	r0, 234f0 <start+0xa0>
		LOG_ERR("Failed to enable GPS, error: %d", err);
   234ce:	4920      	ldr	r1, [pc, #128]	; (23550 <start+0x100>)
   234d0:	f044 0001 	orr.w	r0, r4, #1
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
   234d4:	f01e f9a4 	bl	41820 <log_string_sync>
   234d8:	e7dd      	b.n	23496 <start+0x46>
		LOG_INF("PSM enabled");
   234da:	4630      	mov	r0, r6
   234dc:	491d      	ldr	r1, [pc, #116]	; (23554 <start+0x104>)
   234de:	f01e f99f 	bl	41820 <log_string_sync>
   234e2:	e7eb      	b.n	234bc <start+0x6c>
		return -EINVAL;
   234e4:	f06f 0215 	mvn.w	r2, #21
   234e8:	e7f1      	b.n	234ce <start+0x7e>
		return -ENOTSUP;
   234ea:	f06f 0285 	mvn.w	r2, #133	; 0x85
   234ee:	e7ee      	b.n	234ce <start+0x7e>
   234f0:	2001      	movs	r0, #1
   234f2:	4b19      	ldr	r3, [pc, #100]	; (23558 <start+0x108>)
   234f4:	e8d3 2fef 	ldaex	r2, [r3]
   234f8:	e8c3 0fe1 	stlex	r1, r0, [r3]
   234fc:	2900      	cmp	r1, #0
   234fe:	d1f9      	bne.n	234f4 <start+0xa4>
	gps_control_set_active(true);
   23500:	f7ff ff56 	bl	233b0 <gps_control_set_active>
	LOG_INF("GPS started successfully. Searching for satellites ");
   23504:	f044 0403 	orr.w	r4, r4, #3
	ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   23508:	2008      	movs	r0, #8
   2350a:	f7ff f8df 	bl	226cc <ui_led_set_pattern>
	LOG_INF("GPS started successfully. Searching for satellites ");
   2350e:	4620      	mov	r0, r4
   23510:	4912      	ldr	r1, [pc, #72]	; (2355c <start+0x10c>)
   23512:	f01e f985 	bl	41820 <log_string_sync>
	LOG_INF("to get position fix. This may take several minutes.");
   23516:	4620      	mov	r0, r4
   23518:	4911      	ldr	r1, [pc, #68]	; (23560 <start+0x110>)
   2351a:	f01e f981 	bl	41820 <log_string_sync>
	LOG_INF("The device will attempt to get a fix for %d seconds, ",
   2351e:	f44f 72b4 	mov.w	r2, #360	; 0x168
   23522:	4620      	mov	r0, r4
   23524:	490f      	ldr	r1, [pc, #60]	; (23564 <start+0x114>)
   23526:	f01e f97b 	bl	41820 <log_string_sync>
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
   2352a:	4620      	mov	r0, r4
   2352c:	682a      	ldr	r2, [r5, #0]
   2352e:	490e      	ldr	r1, [pc, #56]	; (23568 <start+0x118>)
   23530:	e7d0      	b.n	234d4 <start+0x84>
   23532:	bf00      	nop
   23534:	20024674 	.word	0x20024674
   23538:	00046454 	.word	0x00046454
   2353c:	20024668 	.word	0x20024668
   23540:	000463bc 	.word	0x000463bc
   23544:	0004872b 	.word	0x0004872b
   23548:	00048756 	.word	0x00048756
   2354c:	00048763 	.word	0x00048763
   23550:	0004878d 	.word	0x0004878d
   23554:	00048781 	.word	0x00048781
   23558:	20024670 	.word	0x20024670
   2355c:	000487ad 	.word	0x000487ad
   23560:	000487e1 	.word	0x000487e1
   23564:	00048815 	.word	0x00048815
   23568:	0004884b 	.word	0x0004884b

0002356c <gps_control_start>:

void gps_control_start(uint32_t delay_ms)
{
   2356c:	b5d0      	push	{r4, r6, r7, lr}
   2356e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   23572:	f240 36e7 	movw	r6, #999	; 0x3e7
   23576:	2700      	movs	r7, #0
   23578:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
   2357c:	4b08      	ldr	r3, [pc, #32]	; (235a0 <gps_control_start+0x34>)
   2357e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23582:	681c      	ldr	r4, [r3, #0]
   23584:	4630      	mov	r0, r6
   23586:	2300      	movs	r3, #0
   23588:	4639      	mov	r1, r7
   2358a:	f7f9 fc97 	bl	1cebc <__aeabi_uldivmod>
   2358e:	4602      	mov	r2, r0
   23590:	460b      	mov	r3, r1
   23592:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
   23594:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
   23598:	4902      	ldr	r1, [pc, #8]	; (235a4 <gps_control_start+0x38>)
   2359a:	f01a bd1b 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
   2359e:	bf00      	nop
   235a0:	20024664 	.word	0x20024664
   235a4:	200218b0 	.word	0x200218b0

000235a8 <gps_control_stop>:

void gps_control_stop(uint32_t delay_ms)
{
   235a8:	b5d0      	push	{r4, r6, r7, lr}
   235aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   235ae:	f240 36e7 	movw	r6, #999	; 0x3e7
   235b2:	2700      	movs	r7, #0
   235b4:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
   235b8:	4b08      	ldr	r3, [pc, #32]	; (235dc <gps_control_stop+0x34>)
   235ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   235be:	681c      	ldr	r4, [r3, #0]
   235c0:	4630      	mov	r0, r6
   235c2:	2300      	movs	r3, #0
   235c4:	4639      	mov	r1, r7
   235c6:	f7f9 fc79 	bl	1cebc <__aeabi_uldivmod>
   235ca:	4602      	mov	r2, r0
   235cc:	460b      	mov	r3, r1
   235ce:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
   235d0:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
   235d4:	4902      	ldr	r1, [pc, #8]	; (235e0 <gps_control_stop+0x38>)
   235d6:	f01a bcfd 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
   235da:	bf00      	nop
   235dc:	20024664 	.word	0x20024664
   235e0:	200218e0 	.word	0x200218e0

000235e4 <gps_control_get_gps_reporting_interval>:

int gps_control_get_gps_reporting_interval(void)
{
	return gps_reporting_interval_seconds;
}
   235e4:	4b01      	ldr	r3, [pc, #4]	; (235ec <gps_control_get_gps_reporting_interval+0x8>)
   235e6:	6818      	ldr	r0, [r3, #0]
   235e8:	4770      	bx	lr
   235ea:	bf00      	nop
   235ec:	20024674 	.word	0x20024674

000235f0 <gps_control_init>:

/** @brief Configures and starts the GPS device. */
int gps_control_init(struct k_work_q *work_q, gps_event_handler_t handler)
{
   235f0:	b570      	push	{r4, r5, r6, lr}
	int err;
	static bool is_init;

	if (is_init) {
   235f2:	4e27      	ldr	r6, [pc, #156]	; (23690 <gps_control_init+0xa0>)
{
   235f4:	460d      	mov	r5, r1
	if (is_init) {
   235f6:	7833      	ldrb	r3, [r6, #0]
   235f8:	2b00      	cmp	r3, #0
   235fa:	d142      	bne.n	23682 <gps_control_init+0x92>
		return -EALREADY;
	}

	if ((work_q == NULL) || (handler == NULL)) {
   235fc:	2800      	cmp	r0, #0
   235fe:	d043      	beq.n	23688 <gps_control_init+0x98>
   23600:	2900      	cmp	r1, #0
   23602:	d041      	beq.n	23688 <gps_control_init+0x98>
		return -EINVAL;
	}

	app_work_q = work_q;
   23604:	4b23      	ldr	r3, [pc, #140]	; (23694 <gps_control_init+0xa4>)
   23606:	6018      	str	r0, [r3, #0]
   23608:	4823      	ldr	r0, [pc, #140]	; (23698 <gps_control_init+0xa8>)
   2360a:	f018 fa11 	bl	3ba30 <z_impl_device_get_binding>

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
   2360e:	4a23      	ldr	r2, [pc, #140]	; (2369c <gps_control_init+0xac>)
   23610:	4c23      	ldr	r4, [pc, #140]	; (236a0 <gps_control_init+0xb0>)
   23612:	6010      	str	r0, [r2, #0]
	if (gps_dev == NULL) {
   23614:	4a23      	ldr	r2, [pc, #140]	; (236a4 <gps_control_init+0xb4>)
   23616:	1aa4      	subs	r4, r4, r2
   23618:	08e4      	lsrs	r4, r4, #3
   2361a:	01a4      	lsls	r4, r4, #6
   2361c:	b968      	cbnz	r0, 2363a <gps_control_init+0x4a>
		LOG_ERR("Could not get %s device",
   2361e:	481e      	ldr	r0, [pc, #120]	; (23698 <gps_control_init+0xa8>)
   23620:	f01e f911 	bl	41846 <log_strdup>
   23624:	f044 0401 	orr.w	r4, r4, #1
   23628:	4602      	mov	r2, r0
   2362a:	491f      	ldr	r1, [pc, #124]	; (236a8 <gps_control_init+0xb8>)
   2362c:	4620      	mov	r0, r4
   2362e:	f01e f8f7 	bl	41820 <log_string_sync>
			log_strdup(CONFIG_GPS_DEV_NAME));
		return -ENODEV;
   23632:	f06f 0512 	mvn.w	r5, #18
	LOG_INF("GPS initialized");

	is_init = true;

	return err;
}
   23636:	4628      	mov	r0, r5
   23638:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->api;

	if (api->init == NULL) {
   2363a:	6883      	ldr	r3, [r0, #8]
   2363c:	68db      	ldr	r3, [r3, #12]
   2363e:	b153      	cbz	r3, 23656 <gps_control_init+0x66>
		return -ENOTSUP;
	}

	return api->init(dev, handler);
   23640:	4629      	mov	r1, r5
   23642:	4798      	blx	r3
	if (err) {
   23644:	4605      	mov	r5, r0
   23646:	b148      	cbz	r0, 2365c <gps_control_init+0x6c>
		LOG_ERR("Could not initialize GPS, error: %d", err);
   23648:	462a      	mov	r2, r5
   2364a:	4918      	ldr	r1, [pc, #96]	; (236ac <gps_control_init+0xbc>)
   2364c:	f044 0001 	orr.w	r0, r4, #1
   23650:	f01e f8e6 	bl	41820 <log_string_sync>
		return err;
   23654:	e7ef      	b.n	23636 <gps_control_init+0x46>
		return -ENOTSUP;
   23656:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2365a:	e7f5      	b.n	23648 <gps_control_init+0x58>
	k_delayed_work_init(&start_work, start);
   2365c:	4914      	ldr	r1, [pc, #80]	; (236b0 <gps_control_init+0xc0>)
   2365e:	4815      	ldr	r0, [pc, #84]	; (236b4 <gps_control_init+0xc4>)
   23660:	f021 fa5b 	bl	44b1a <k_delayed_work_init>
	k_delayed_work_init(&stop_work, stop);
   23664:	4914      	ldr	r1, [pc, #80]	; (236b8 <gps_control_init+0xc8>)
   23666:	4815      	ldr	r0, [pc, #84]	; (236bc <gps_control_init+0xcc>)
   23668:	f021 fa57 	bl	44b1a <k_delayed_work_init>
	gps_reporting_interval_seconds =
   2366c:	221e      	movs	r2, #30
   2366e:	4b14      	ldr	r3, [pc, #80]	; (236c0 <gps_control_init+0xd0>)
	LOG_INF("GPS initialized");
   23670:	4914      	ldr	r1, [pc, #80]	; (236c4 <gps_control_init+0xd4>)
   23672:	f044 0003 	orr.w	r0, r4, #3
	gps_reporting_interval_seconds =
   23676:	601a      	str	r2, [r3, #0]
	LOG_INF("GPS initialized");
   23678:	f01e f8d2 	bl	41820 <log_string_sync>
	is_init = true;
   2367c:	2301      	movs	r3, #1
   2367e:	7033      	strb	r3, [r6, #0]
	return err;
   23680:	e7d9      	b.n	23636 <gps_control_init+0x46>
		return -EALREADY;
   23682:	f06f 0577 	mvn.w	r5, #119	; 0x77
   23686:	e7d6      	b.n	23636 <gps_control_init+0x46>
		return -EINVAL;
   23688:	f06f 0515 	mvn.w	r5, #21
   2368c:	e7d3      	b.n	23636 <gps_control_init+0x46>
   2368e:	bf00      	nop
   23690:	2002b0d6 	.word	0x2002b0d6
   23694:	20024664 	.word	0x20024664
   23698:	00048886 	.word	0x00048886
   2369c:	20024668 	.word	0x20024668
   236a0:	00046454 	.word	0x00046454
   236a4:	000463bc 	.word	0x000463bc
   236a8:	0004835e 	.word	0x0004835e
   236ac:	00048892 	.word	0x00048892
   236b0:	00023451 	.word	0x00023451
   236b4:	200218b0 	.word	0x200218b0
   236b8:	000233cd 	.word	0x000233cd
   236bc:	200218e0 	.word	0x200218e0
   236c0:	20024674 	.word	0x20024674
   236c4:	000488b6 	.word	0x000488b6

000236c8 <submit_poll_work>:
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   236c8:	4b0e      	ldr	r3, [pc, #56]	; (23704 <submit_poll_work+0x3c>)
{
   236ca:	b5d0      	push	{r4, r6, r7, lr}
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   236cc:	681c      	ldr	r4, [r3, #0]
					      K_SECONDS((uint32_t)delay_s));
   236ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   236d2:	f240 36e7 	movw	r6, #999	; 0x3e7
   236d6:	fb03 f100 	mul.w	r1, r3, r0
   236da:	2700      	movs	r7, #0
   236dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   236e0:	fbe0 6701 	umlal	r6, r7, r0, r1
   236e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   236e8:	2300      	movs	r3, #0
   236ea:	4630      	mov	r0, r6
   236ec:	4639      	mov	r1, r7
   236ee:	f7f9 fbe5 	bl	1cebc <__aeabi_uldivmod>
   236f2:	4602      	mov	r2, r0
   236f4:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   236f6:	4620      	mov	r0, r4
}
   236f8:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   236fc:	4902      	ldr	r1, [pc, #8]	; (23708 <submit_poll_work+0x40>)
   236fe:	f01a bc69 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
   23702:	bf00      	nop
   23704:	2002467c 	.word	0x2002467c
   23708:	20021910 	.word	0x20021910

0002370c <env_sensors_poll>:
	return initialized ? submit_poll_work(0) : -ENXIO;
   2370c:	4b04      	ldr	r3, [pc, #16]	; (23720 <env_sensors_poll+0x14>)
   2370e:	781b      	ldrb	r3, [r3, #0]
   23710:	b113      	cbz	r3, 23718 <env_sensors_poll+0xc>
   23712:	2000      	movs	r0, #0
   23714:	f7ff bfd8 	b.w	236c8 <submit_poll_work>
}
   23718:	f06f 0005 	mvn.w	r0, #5
   2371c:	4770      	bx	lr
   2371e:	bf00      	nop
   23720:	2002b0d8 	.word	0x2002b0d8

00023724 <env_sensors_init_and_start>:

/**@brief Initialize environment sensors. */
int env_sensors_init_and_start(struct k_work_q *work_q,
			       const env_sensors_data_ready_cb cb)
{
   23724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23728:	460d      	mov	r5, r1
	if ((work_q == NULL) || (cb == NULL)) {
   2372a:	4606      	mov	r6, r0
   2372c:	2800      	cmp	r0, #0
   2372e:	d03a      	beq.n	237a6 <env_sensors_init_and_start+0x82>
   23730:	2900      	cmp	r1, #0
   23732:	d038      	beq.n	237a6 <env_sensors_init_and_start+0x82>
   23734:	2403      	movs	r4, #3
   23736:	4f1f      	ldr	r7, [pc, #124]	; (237b4 <env_sensors_init_and_start+0x90>)
	}

	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
		env_sensors[i]->dev =
			device_get_binding(env_sensors[i]->dev_name);
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   23738:	f8df 8098 	ldr.w	r8, [pc, #152]	; 237d4 <env_sensors_init_and_start+0xb0>
   2373c:	f8df a098 	ldr.w	sl, [pc, #152]	; 237d8 <env_sensors_init_and_start+0xb4>
   23740:	f8df b098 	ldr.w	fp, [pc, #152]	; 237dc <env_sensors_init_and_start+0xb8>
			device_get_binding(env_sensors[i]->dev_name);
   23744:	f8d7 9000 	ldr.w	r9, [r7]
   23748:	f8d9 001c 	ldr.w	r0, [r9, #28]
   2374c:	f018 f970 	bl	3ba30 <z_impl_device_get_binding>
		env_sensors[i]->dev =
   23750:	f8c9 0020 	str.w	r0, [r9, #32]
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   23754:	f857 9b04 	ldr.w	r9, [r7], #4
   23758:	f8d9 3020 	ldr.w	r3, [r9, #32]
   2375c:	b973      	cbnz	r3, 2377c <env_sensors_init_and_start+0x58>
   2375e:	238f      	movs	r3, #143	; 0x8f
   23760:	4642      	mov	r2, r8
   23762:	4651      	mov	r1, sl
   23764:	4658      	mov	r0, fp
   23766:	f01d fe2d 	bl	413c4 <printk>
   2376a:	f8d9 101c 	ldr.w	r1, [r9, #28]
   2376e:	4812      	ldr	r0, [pc, #72]	; (237b8 <env_sensors_init_and_start+0x94>)
   23770:	f01d fe28 	bl	413c4 <printk>
   23774:	218f      	movs	r1, #143	; 0x8f
   23776:	4640      	mov	r0, r8
   23778:	f01e f841 	bl	417fe <assert_post_action>
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   2377c:	3c01      	subs	r4, #1
   2377e:	d1e1      	bne.n	23744 <env_sensors_init_and_start+0x20>
			env_sensors[i]->dev_name);
	}

	env_sensors_work_q = work_q;
   23780:	4b0e      	ldr	r3, [pc, #56]	; (237bc <env_sensors_init_and_start+0x98>)

	data_ready_cb = cb;

	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   23782:	490f      	ldr	r1, [pc, #60]	; (237c0 <env_sensors_init_and_start+0x9c>)
	env_sensors_work_q = work_q;
   23784:	601e      	str	r6, [r3, #0]
	data_ready_cb = cb;
   23786:	4b0f      	ldr	r3, [pc, #60]	; (237c4 <env_sensors_init_and_start+0xa0>)
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   23788:	480f      	ldr	r0, [pc, #60]	; (237c8 <env_sensors_init_and_start+0xa4>)
	data_ready_cb = cb;
   2378a:	601d      	str	r5, [r3, #0]
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   2378c:	f021 f9c5 	bl	44b1a <k_delayed_work_init>

	initialized = true;
   23790:	2201      	movs	r2, #1
   23792:	4b0e      	ldr	r3, [pc, #56]	; (237cc <env_sensors_init_and_start+0xa8>)
   23794:	701a      	strb	r2, [r3, #0]

	return (data_send_interval_s > 0) ?
   23796:	4b0e      	ldr	r3, [pc, #56]	; (237d0 <env_sensors_init_and_start+0xac>)
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   23798:	681b      	ldr	r3, [r3, #0]
   2379a:	b143      	cbz	r3, 237ae <env_sensors_init_and_start+0x8a>
}
   2379c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   237a0:	2005      	movs	r0, #5
   237a2:	f7ff bf91 	b.w	236c8 <submit_poll_work>
		return -EINVAL;
   237a6:	f06f 0015 	mvn.w	r0, #21
}
   237aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   237ae:	4620      	mov	r0, r4
   237b0:	e7fb      	b.n	237aa <env_sensors_init_and_start+0x86>
   237b2:	bf00      	nop
   237b4:	000467b0 	.word	0x000467b0
   237b8:	000489ae 	.word	0x000489ae
   237bc:	2002467c 	.word	0x2002467c
   237c0:	0001d3e1 	.word	0x0001d3e1
   237c4:	20024678 	.word	0x20024678
   237c8:	20021910 	.word	0x20021910
   237cc:	2002b0d8 	.word	0x2002b0d8
   237d0:	20020640 	.word	0x20020640
   237d4:	00048979 	.word	0x00048979
   237d8:	0004899a 	.word	0x0004899a
   237dc:	00048156 	.word	0x00048156

000237e0 <env_sensors_get_temperature>:

int env_sensors_get_temperature(env_sensor_data_t *sensor_data)
{
   237e0:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   237e2:	4604      	mov	r4, r0
   237e4:	2800      	cmp	r0, #0
   237e6:	d041      	beq.n	2386c <env_sensors_get_temperature+0x8c>
	__asm__ volatile(
   237e8:	f04f 0320 	mov.w	r3, #32
   237ec:	f3ef 8611 	mrs	r6, BASEPRI
   237f0:	f383 8811 	msr	BASEPRI, r3
   237f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   237f8:	481e      	ldr	r0, [pc, #120]	; (23874 <env_sensors_get_temperature+0x94>)
   237fa:	f01a fb9d 	bl	3df38 <z_spin_lock_valid>
   237fe:	b968      	cbnz	r0, 2381c <env_sensors_get_temperature+0x3c>
   23800:	235c      	movs	r3, #92	; 0x5c
   23802:	4a1d      	ldr	r2, [pc, #116]	; (23878 <env_sensors_get_temperature+0x98>)
   23804:	491d      	ldr	r1, [pc, #116]	; (2387c <env_sensors_get_temperature+0x9c>)
   23806:	481e      	ldr	r0, [pc, #120]	; (23880 <env_sensors_get_temperature+0xa0>)
   23808:	f01d fddc 	bl	413c4 <printk>
   2380c:	4919      	ldr	r1, [pc, #100]	; (23874 <env_sensors_get_temperature+0x94>)
   2380e:	481d      	ldr	r0, [pc, #116]	; (23884 <env_sensors_get_temperature+0xa4>)
   23810:	f01d fdd8 	bl	413c4 <printk>
   23814:	215c      	movs	r1, #92	; 0x5c
   23816:	4818      	ldr	r0, [pc, #96]	; (23878 <env_sensors_get_temperature+0x98>)
   23818:	f01d fff1 	bl	417fe <assert_post_action>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2381c:	4d1a      	ldr	r5, [pc, #104]	; (23888 <env_sensors_get_temperature+0xa8>)
	z_spin_lock_set_owner(l);
   2381e:	4815      	ldr	r0, [pc, #84]	; (23874 <env_sensors_get_temperature+0x94>)
   23820:	f01a fba8 	bl	3df74 <z_spin_lock_set_owner>
   23824:	4623      	mov	r3, r4
   23826:	f105 0418 	add.w	r4, r5, #24
   2382a:	462a      	mov	r2, r5
   2382c:	ca03      	ldmia	r2!, {r0, r1}
   2382e:	42a2      	cmp	r2, r4
   23830:	6018      	str	r0, [r3, #0]
   23832:	6059      	str	r1, [r3, #4]
   23834:	4615      	mov	r5, r2
   23836:	f103 0308 	add.w	r3, r3, #8
   2383a:	d1f6      	bne.n	2382a <env_sensors_get_temperature+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2383c:	480d      	ldr	r0, [pc, #52]	; (23874 <env_sensors_get_temperature+0x94>)
   2383e:	f01a fb89 	bl	3df54 <z_spin_unlock_valid>
   23842:	b968      	cbnz	r0, 23860 <env_sensors_get_temperature+0x80>
   23844:	2384      	movs	r3, #132	; 0x84
   23846:	4a0c      	ldr	r2, [pc, #48]	; (23878 <env_sensors_get_temperature+0x98>)
   23848:	4910      	ldr	r1, [pc, #64]	; (2388c <env_sensors_get_temperature+0xac>)
   2384a:	480d      	ldr	r0, [pc, #52]	; (23880 <env_sensors_get_temperature+0xa0>)
   2384c:	f01d fdba 	bl	413c4 <printk>
   23850:	4908      	ldr	r1, [pc, #32]	; (23874 <env_sensors_get_temperature+0x94>)
   23852:	480f      	ldr	r0, [pc, #60]	; (23890 <env_sensors_get_temperature+0xb0>)
   23854:	f01d fdb6 	bl	413c4 <printk>
   23858:	2184      	movs	r1, #132	; 0x84
   2385a:	4807      	ldr	r0, [pc, #28]	; (23878 <env_sensors_get_temperature+0x98>)
   2385c:	f01d ffcf 	bl	417fe <assert_post_action>
	__asm__ volatile(
   23860:	f386 8811 	msr	BASEPRI, r6
   23864:	f3bf 8f6f 	isb	sy
	}
	k_spinlock_key_t key = k_spin_lock(&temp_sensor.lock);

	memcpy(sensor_data, &(temp_sensor.sensor), sizeof(temp_sensor.sensor));
	k_spin_unlock(&temp_sensor.lock, key);
	return 0;
   23868:	2000      	movs	r0, #0
}
   2386a:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   2386c:	f04f 30ff 	mov.w	r0, #4294967295
   23870:	e7fb      	b.n	2386a <env_sensors_get_temperature+0x8a>
   23872:	bf00      	nop
   23874:	2002026c 	.word	0x2002026c
   23878:	000488fa 	.word	0x000488fa
   2387c:	00048920 	.word	0x00048920
   23880:	00048156 	.word	0x00048156
   23884:	00048935 	.word	0x00048935
   23888:	20020248 	.word	0x20020248
   2388c:	0004894d 	.word	0x0004894d
   23890:	00048964 	.word	0x00048964

00023894 <env_sensors_get_humidity>:

int env_sensors_get_humidity(env_sensor_data_t *sensor_data)
{
   23894:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   23896:	4604      	mov	r4, r0
   23898:	2800      	cmp	r0, #0
   2389a:	d041      	beq.n	23920 <env_sensors_get_humidity+0x8c>
	__asm__ volatile(
   2389c:	f04f 0320 	mov.w	r3, #32
   238a0:	f3ef 8611 	mrs	r6, BASEPRI
   238a4:	f383 8811 	msr	BASEPRI, r3
   238a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   238ac:	481e      	ldr	r0, [pc, #120]	; (23928 <env_sensors_get_humidity+0x94>)
   238ae:	f01a fb43 	bl	3df38 <z_spin_lock_valid>
   238b2:	b968      	cbnz	r0, 238d0 <env_sensors_get_humidity+0x3c>
   238b4:	235c      	movs	r3, #92	; 0x5c
   238b6:	4a1d      	ldr	r2, [pc, #116]	; (2392c <env_sensors_get_humidity+0x98>)
   238b8:	491d      	ldr	r1, [pc, #116]	; (23930 <env_sensors_get_humidity+0x9c>)
   238ba:	481e      	ldr	r0, [pc, #120]	; (23934 <env_sensors_get_humidity+0xa0>)
   238bc:	f01d fd82 	bl	413c4 <printk>
   238c0:	4919      	ldr	r1, [pc, #100]	; (23928 <env_sensors_get_humidity+0x94>)
   238c2:	481d      	ldr	r0, [pc, #116]	; (23938 <env_sensors_get_humidity+0xa4>)
   238c4:	f01d fd7e 	bl	413c4 <printk>
   238c8:	215c      	movs	r1, #92	; 0x5c
   238ca:	4818      	ldr	r0, [pc, #96]	; (2392c <env_sensors_get_humidity+0x98>)
   238cc:	f01d ff97 	bl	417fe <assert_post_action>
   238d0:	4d1a      	ldr	r5, [pc, #104]	; (2393c <env_sensors_get_humidity+0xa8>)
	z_spin_lock_set_owner(l);
   238d2:	4815      	ldr	r0, [pc, #84]	; (23928 <env_sensors_get_humidity+0x94>)
   238d4:	f01a fb4e 	bl	3df74 <z_spin_lock_set_owner>
   238d8:	4623      	mov	r3, r4
   238da:	f105 0418 	add.w	r4, r5, #24
   238de:	462a      	mov	r2, r5
   238e0:	ca03      	ldmia	r2!, {r0, r1}
   238e2:	42a2      	cmp	r2, r4
   238e4:	6018      	str	r0, [r3, #0]
   238e6:	6059      	str	r1, [r3, #4]
   238e8:	4615      	mov	r5, r2
   238ea:	f103 0308 	add.w	r3, r3, #8
   238ee:	d1f6      	bne.n	238de <env_sensors_get_humidity+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   238f0:	480d      	ldr	r0, [pc, #52]	; (23928 <env_sensors_get_humidity+0x94>)
   238f2:	f01a fb2f 	bl	3df54 <z_spin_unlock_valid>
   238f6:	b968      	cbnz	r0, 23914 <env_sensors_get_humidity+0x80>
   238f8:	2384      	movs	r3, #132	; 0x84
   238fa:	4a0c      	ldr	r2, [pc, #48]	; (2392c <env_sensors_get_humidity+0x98>)
   238fc:	4910      	ldr	r1, [pc, #64]	; (23940 <env_sensors_get_humidity+0xac>)
   238fe:	480d      	ldr	r0, [pc, #52]	; (23934 <env_sensors_get_humidity+0xa0>)
   23900:	f01d fd60 	bl	413c4 <printk>
   23904:	4908      	ldr	r1, [pc, #32]	; (23928 <env_sensors_get_humidity+0x94>)
   23906:	480f      	ldr	r0, [pc, #60]	; (23944 <env_sensors_get_humidity+0xb0>)
   23908:	f01d fd5c 	bl	413c4 <printk>
   2390c:	2184      	movs	r1, #132	; 0x84
   2390e:	4807      	ldr	r0, [pc, #28]	; (2392c <env_sensors_get_humidity+0x98>)
   23910:	f01d ff75 	bl	417fe <assert_post_action>
	__asm__ volatile(
   23914:	f386 8811 	msr	BASEPRI, r6
   23918:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&humid_sensor.lock);

	memcpy(sensor_data, &(humid_sensor.sensor),
		sizeof(humid_sensor.sensor));
	k_spin_unlock(&humid_sensor.lock, key);
	return 0;
   2391c:	2000      	movs	r0, #0
}
   2391e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   23920:	f04f 30ff 	mov.w	r0, #4294967295
   23924:	e7fb      	b.n	2391e <env_sensors_get_humidity+0x8a>
   23926:	bf00      	nop
   23928:	2002021c 	.word	0x2002021c
   2392c:	000488fa 	.word	0x000488fa
   23930:	00048920 	.word	0x00048920
   23934:	00048156 	.word	0x00048156
   23938:	00048935 	.word	0x00048935
   2393c:	200201f8 	.word	0x200201f8
   23940:	0004894d 	.word	0x0004894d
   23944:	00048964 	.word	0x00048964

00023948 <env_sensors_get_pressure>:

int env_sensors_get_pressure(env_sensor_data_t *sensor_data)
{
   23948:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   2394a:	4604      	mov	r4, r0
   2394c:	2800      	cmp	r0, #0
   2394e:	d041      	beq.n	239d4 <env_sensors_get_pressure+0x8c>
	__asm__ volatile(
   23950:	f04f 0320 	mov.w	r3, #32
   23954:	f3ef 8611 	mrs	r6, BASEPRI
   23958:	f383 8811 	msr	BASEPRI, r3
   2395c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23960:	481e      	ldr	r0, [pc, #120]	; (239dc <env_sensors_get_pressure+0x94>)
   23962:	f01a fae9 	bl	3df38 <z_spin_lock_valid>
   23966:	b968      	cbnz	r0, 23984 <env_sensors_get_pressure+0x3c>
   23968:	235c      	movs	r3, #92	; 0x5c
   2396a:	4a1d      	ldr	r2, [pc, #116]	; (239e0 <env_sensors_get_pressure+0x98>)
   2396c:	491d      	ldr	r1, [pc, #116]	; (239e4 <env_sensors_get_pressure+0x9c>)
   2396e:	481e      	ldr	r0, [pc, #120]	; (239e8 <env_sensors_get_pressure+0xa0>)
   23970:	f01d fd28 	bl	413c4 <printk>
   23974:	4919      	ldr	r1, [pc, #100]	; (239dc <env_sensors_get_pressure+0x94>)
   23976:	481d      	ldr	r0, [pc, #116]	; (239ec <env_sensors_get_pressure+0xa4>)
   23978:	f01d fd24 	bl	413c4 <printk>
   2397c:	215c      	movs	r1, #92	; 0x5c
   2397e:	4818      	ldr	r0, [pc, #96]	; (239e0 <env_sensors_get_pressure+0x98>)
   23980:	f01d ff3d 	bl	417fe <assert_post_action>
   23984:	4d1a      	ldr	r5, [pc, #104]	; (239f0 <env_sensors_get_pressure+0xa8>)
	z_spin_lock_set_owner(l);
   23986:	4815      	ldr	r0, [pc, #84]	; (239dc <env_sensors_get_pressure+0x94>)
   23988:	f01a faf4 	bl	3df74 <z_spin_lock_set_owner>
   2398c:	4623      	mov	r3, r4
   2398e:	f105 0418 	add.w	r4, r5, #24
   23992:	462a      	mov	r2, r5
   23994:	ca03      	ldmia	r2!, {r0, r1}
   23996:	42a2      	cmp	r2, r4
   23998:	6018      	str	r0, [r3, #0]
   2399a:	6059      	str	r1, [r3, #4]
   2399c:	4615      	mov	r5, r2
   2399e:	f103 0308 	add.w	r3, r3, #8
   239a2:	d1f6      	bne.n	23992 <env_sensors_get_pressure+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239a4:	480d      	ldr	r0, [pc, #52]	; (239dc <env_sensors_get_pressure+0x94>)
   239a6:	f01a fad5 	bl	3df54 <z_spin_unlock_valid>
   239aa:	b968      	cbnz	r0, 239c8 <env_sensors_get_pressure+0x80>
   239ac:	2384      	movs	r3, #132	; 0x84
   239ae:	4a0c      	ldr	r2, [pc, #48]	; (239e0 <env_sensors_get_pressure+0x98>)
   239b0:	4910      	ldr	r1, [pc, #64]	; (239f4 <env_sensors_get_pressure+0xac>)
   239b2:	480d      	ldr	r0, [pc, #52]	; (239e8 <env_sensors_get_pressure+0xa0>)
   239b4:	f01d fd06 	bl	413c4 <printk>
   239b8:	4908      	ldr	r1, [pc, #32]	; (239dc <env_sensors_get_pressure+0x94>)
   239ba:	480f      	ldr	r0, [pc, #60]	; (239f8 <env_sensors_get_pressure+0xb0>)
   239bc:	f01d fd02 	bl	413c4 <printk>
   239c0:	2184      	movs	r1, #132	; 0x84
   239c2:	4807      	ldr	r0, [pc, #28]	; (239e0 <env_sensors_get_pressure+0x98>)
   239c4:	f01d ff1b 	bl	417fe <assert_post_action>
	__asm__ volatile(
   239c8:	f386 8811 	msr	BASEPRI, r6
   239cc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&pressure_sensor.lock);

	memcpy(sensor_data, &(pressure_sensor.sensor),
		sizeof(pressure_sensor.sensor));
	k_spin_unlock(&pressure_sensor.lock, key);
	return 0;
   239d0:	2000      	movs	r0, #0
}
   239d2:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   239d4:	f04f 30ff 	mov.w	r0, #4294967295
   239d8:	e7fb      	b.n	239d2 <env_sensors_get_pressure+0x8a>
   239da:	bf00      	nop
   239dc:	20020244 	.word	0x20020244
   239e0:	000488fa 	.word	0x000488fa
   239e4:	00048920 	.word	0x00048920
   239e8:	00048156 	.word	0x00048156
   239ec:	00048935 	.word	0x00048935
   239f0:	20020220 	.word	0x20020220
   239f4:	0004894d 	.word	0x0004894d
   239f8:	00048964 	.word	0x00048964

000239fc <env_sensors_set_send_interval>:
{
	return -1;
}

void env_sensors_set_send_interval(const uint32_t interval_s)
{
   239fc:	b508      	push	{r3, lr}
	if (interval_s == data_send_interval_s) {
   239fe:	4b11      	ldr	r3, [pc, #68]	; (23a44 <env_sensors_set_send_interval+0x48>)
   23a00:	681a      	ldr	r2, [r3, #0]
   23a02:	4282      	cmp	r2, r0
   23a04:	d01c      	beq.n	23a40 <env_sensors_set_send_interval+0x44>
		return;
	}

	data_send_interval_s = MIN(interval_s, MAX_INTERVAL_S);
   23a06:	4a10      	ldr	r2, [pc, #64]	; (23a48 <env_sensors_set_send_interval+0x4c>)
   23a08:	4290      	cmp	r0, r2
   23a0a:	bf94      	ite	ls
   23a0c:	6018      	strls	r0, [r3, #0]
   23a0e:	601a      	strhi	r2, [r3, #0]

	if (!initialized) {
   23a10:	4b0e      	ldr	r3, [pc, #56]	; (23a4c <env_sensors_set_send_interval+0x50>)
   23a12:	781b      	ldrb	r3, [r3, #0]
   23a14:	b1a3      	cbz	r3, 23a40 <env_sensors_set_send_interval+0x44>
		return;
	}

	if (data_send_interval_s) {
   23a16:	b118      	cbz	r0, 23a20 <env_sensors_set_send_interval+0x24>
		/* restart work for new interval to take effect */
		env_sensors_poll();
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
		k_delayed_work_cancel(&env_sensors_poller);
	}
}
   23a18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		env_sensors_poll();
   23a1c:	f7ff be76 	b.w	2370c <env_sensors_poll>
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   23a20:	480b      	ldr	r0, [pc, #44]	; (23a50 <env_sensors_set_send_interval+0x54>)
   23a22:	f01a fd45 	bl	3e4b0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   23a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23a2a:	fba0 0103 	umull	r0, r1, r0, r3
   23a2e:	0bc3      	lsrs	r3, r0, #15
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
   23a30:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   23a34:	d004      	beq.n	23a40 <env_sensors_set_send_interval+0x44>
}
   23a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&env_sensors_poller);
   23a3a:	4806      	ldr	r0, [pc, #24]	; (23a54 <env_sensors_set_send_interval+0x58>)
   23a3c:	f01a bb54 	b.w	3e0e8 <k_delayed_work_cancel>
}
   23a40:	bd08      	pop	{r3, pc}
   23a42:	bf00      	nop
   23a44:	20020640 	.word	0x20020640
   23a48:	0020c49b 	.word	0x0020c49b
   23a4c:	2002b0d8 	.word	0x2002b0d8
   23a50:	20021920 	.word	0x20021920
   23a54:	20021910 	.word	0x20021910

00023a58 <env_sensors_set_backoff_enable>:
	return data_send_interval_s;
}

void env_sensors_set_backoff_enable(const bool enable)
{
	backoff_enabled = enable;
   23a58:	4b01      	ldr	r3, [pc, #4]	; (23a60 <env_sensors_set_backoff_enable+0x8>)
   23a5a:	7018      	strb	r0, [r3, #0]
}
   23a5c:	4770      	bx	lr
   23a5e:	bf00      	nop
   23a60:	2002b0d7 	.word	0x2002b0d7

00023a64 <primary_feed_worker>:
static struct wdt_data_storage wdt_data;
static struct k_work_q *second_work_q;

static void primary_feed_worker(struct k_work *work_desc)
{
	k_work_submit_to_queue(second_work_q, &wdt_data.second_workqueue_work);
   23a64:	4b08      	ldr	r3, [pc, #32]	; (23a88 <primary_feed_worker+0x24>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23a66:	4909      	ldr	r1, [pc, #36]	; (23a8c <primary_feed_worker+0x28>)
   23a68:	6818      	ldr	r0, [r3, #0]
   23a6a:	e8d1 3fef 	ldaex	r3, [r1]
   23a6e:	f043 0201 	orr.w	r2, r3, #1
   23a72:	e8c1 2fec 	stlex	ip, r2, [r1]
   23a76:	f1bc 0f00 	cmp.w	ip, #0
   23a7a:	d1f6      	bne.n	23a6a <primary_feed_worker+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   23a7c:	07db      	lsls	r3, r3, #31
   23a7e:	d402      	bmi.n	23a86 <primary_feed_worker+0x22>
		k_queue_append(&work_q->queue, work);
   23a80:	3908      	subs	r1, #8
   23a82:	f020 bf84 	b.w	4498e <k_queue_append>
}
   23a86:	4770      	bx	lr
   23a88:	20024680 	.word	0x20024680
   23a8c:	20021980 	.word	0x20021980

00023a90 <secondary_feed_worker>:
static void secondary_feed_worker(struct k_work *work_desc)
{
   23a90:	b510      	push	{r4, lr}
	int err = wdt_feed(wdt_data.wdt_drv, wdt_data.wdt_channel_id);
   23a92:	4c0f      	ldr	r4, [pc, #60]	; (23ad0 <secondary_feed_worker+0x40>)
   23a94:	e9d4 0100 	ldrd	r0, r1, [r4]
static inline int z_impl_wdt_feed(const struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->api;

	return api->feed(dev, channel_id);
   23a98:	6883      	ldr	r3, [r0, #8]
   23a9a:	68db      	ldr	r3, [r3, #12]
   23a9c:	4798      	blx	r3

	LOG_DBG("Feeding watchdog");

	if (err) {
   23a9e:	b160      	cbz	r0, 23aba <secondary_feed_worker+0x2a>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
	} else {
		k_delayed_work_submit(&wdt_data.system_workqueue_work,
				      K_MSEC(WDT_FEED_WORKER_DELAY_MS));
	}
}
   23aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23aa4:	4a0b      	ldr	r2, [pc, #44]	; (23ad4 <secondary_feed_worker+0x44>)
   23aa6:	4b0c      	ldr	r3, [pc, #48]	; (23ad8 <secondary_feed_worker+0x48>)
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
   23aa8:	490c      	ldr	r1, [pc, #48]	; (23adc <secondary_feed_worker+0x4c>)
   23aaa:	1a9b      	subs	r3, r3, r2
   23aac:	08db      	lsrs	r3, r3, #3
   23aae:	019b      	lsls	r3, r3, #6
   23ab0:	4602      	mov	r2, r0
   23ab2:	f043 0001 	orr.w	r0, r3, #1
   23ab6:	f01d beb3 	b.w	41820 <log_string_sync>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   23aba:	f104 0108 	add.w	r1, r4, #8
   23abe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
}
   23ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23ac6:	2300      	movs	r3, #0
   23ac8:	4805      	ldr	r0, [pc, #20]	; (23ae0 <secondary_feed_worker+0x50>)
   23aca:	f01a ba83 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
   23ace:	bf00      	nop
   23ad0:	20021940 	.word	0x20021940
   23ad4:	000463bc 	.word	0x000463bc
   23ad8:	00046504 	.word	0x00046504
   23adc:	000489d5 	.word	0x000489d5
   23ae0:	200244f8 	.word	0x200244f8

00023ae4 <watchdog_init_and_start>:

	return 0;
}

int watchdog_init_and_start(struct k_work_q *work_q)
{
   23ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (work_q == NULL) {
   23ae6:	2800      	cmp	r0, #0
   23ae8:	d064      	beq.n	23bb4 <watchdog_init_and_start+0xd0>
		return -EINVAL;
	}
	second_work_q = work_q;
   23aea:	4b34      	ldr	r3, [pc, #208]	; (23bbc <watchdog_init_and_start+0xd8>)
   23aec:	6018      	str	r0, [r3, #0]
   23aee:	4834      	ldr	r0, [pc, #208]	; (23bc0 <watchdog_init_and_start+0xdc>)
   23af0:	f017 ff9e 	bl	3ba30 <z_impl_device_get_binding>
   23af4:	4d33      	ldr	r5, [pc, #204]	; (23bc4 <watchdog_init_and_start+0xe0>)
   23af6:	4a34      	ldr	r2, [pc, #208]	; (23bc8 <watchdog_init_and_start+0xe4>)
	data->wdt_drv = device_get_binding(DT_LABEL(DT_NODELABEL(wdt)));
   23af8:	4e34      	ldr	r6, [pc, #208]	; (23bcc <watchdog_init_and_start+0xe8>)
   23afa:	1aad      	subs	r5, r5, r2
   23afc:	08ed      	lsrs	r5, r5, #3
   23afe:	6030      	str	r0, [r6, #0]
	if (data->wdt_drv == NULL) {
   23b00:	01ad      	lsls	r5, r5, #6
   23b02:	b940      	cbnz	r0, 23b16 <watchdog_init_and_start+0x32>
		LOG_ERR("Cannot bind watchdog driver");
   23b04:	4932      	ldr	r1, [pc, #200]	; (23bd0 <watchdog_init_and_start+0xec>)
   23b06:	f045 0001 	orr.w	r0, r5, #1
   23b0a:	f01d fe89 	bl	41820 <log_string_sync>
		return err;
   23b0e:	f06f 0405 	mvn.w	r4, #5
	return watchdog_enable(&wdt_data);
}
   23b12:	4620      	mov	r0, r4
   23b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return api->install_timeout(dev, cfg);
   23b16:	6883      	ldr	r3, [r0, #8]
   23b18:	492e      	ldr	r1, [pc, #184]	; (23bd4 <watchdog_init_and_start+0xf0>)
   23b1a:	689b      	ldr	r3, [r3, #8]
   23b1c:	4798      	blx	r3
	if (data->wdt_channel_id < 0) {
   23b1e:	2800      	cmp	r0, #0
   23b20:	4602      	mov	r2, r0
	data->wdt_channel_id = wdt_install_timeout(
   23b22:	6070      	str	r0, [r6, #4]
	if (data->wdt_channel_id < 0) {
   23b24:	da07      	bge.n	23b36 <watchdog_init_and_start+0x52>
		LOG_ERR("Cannot install watchdog timer! Error code: %d",
   23b26:	492c      	ldr	r1, [pc, #176]	; (23bd8 <watchdog_init_and_start+0xf4>)
   23b28:	f045 0001 	orr.w	r0, r5, #1
   23b2c:	f01d fe78 	bl	41820 <log_string_sync>
		return -EFAULT;
   23b30:	f06f 040d 	mvn.w	r4, #13
   23b34:	e7ed      	b.n	23b12 <watchdog_init_and_start+0x2e>
	LOG_INF("Watchdog timeout installed. Timeout: %d",
   23b36:	f045 0703 	orr.w	r7, r5, #3
   23b3a:	4638      	mov	r0, r7
   23b3c:	f64e 2260 	movw	r2, #60000	; 0xea60
   23b40:	4926      	ldr	r1, [pc, #152]	; (23bdc <watchdog_init_and_start+0xf8>)
   23b42:	f01d fe6d 	bl	41820 <log_string_sync>
	int err = wdt_setup(data->wdt_drv, WDT_OPT_PAUSE_HALTED_BY_DBG);
   23b46:	6830      	ldr	r0, [r6, #0]
	return api->setup(dev, options);
   23b48:	6883      	ldr	r3, [r0, #8]
   23b4a:	2102      	movs	r1, #2
   23b4c:	681b      	ldr	r3, [r3, #0]
   23b4e:	4798      	blx	r3
	if (err) {
   23b50:	4604      	mov	r4, r0
   23b52:	b130      	cbz	r0, 23b62 <watchdog_init_and_start+0x7e>
		LOG_ERR("Cannot start watchdog! Error code: %d", err);
   23b54:	4602      	mov	r2, r0
   23b56:	4922      	ldr	r1, [pc, #136]	; (23be0 <watchdog_init_and_start+0xfc>)
		LOG_ERR("Cannot start watchdog feed worker!"
   23b58:	f045 0001 	orr.w	r0, r5, #1
		LOG_INF("Watchdog feed enabled. Timeout: %d",
   23b5c:	f01d fe60 	bl	41820 <log_string_sync>
	if (err) {
   23b60:	e7d7      	b.n	23b12 <watchdog_init_and_start+0x2e>
		LOG_INF("Watchdog started");
   23b62:	4638      	mov	r0, r7
   23b64:	491f      	ldr	r1, [pc, #124]	; (23be4 <watchdog_init_and_start+0x100>)
   23b66:	f01d fe5b 	bl	41820 <log_string_sync>
	k_delayed_work_init(&data->system_workqueue_work, primary_feed_worker);
   23b6a:	f106 0008 	add.w	r0, r6, #8
   23b6e:	491e      	ldr	r1, [pc, #120]	; (23be8 <watchdog_init_and_start+0x104>)
   23b70:	f020 ffd3 	bl	44b1a <k_delayed_work_init>
	int err = wdt_feed(data->wdt_drv, data->wdt_channel_id);
   23b74:	e9d6 0100 	ldrd	r0, r1, [r6]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   23b78:	4b1c      	ldr	r3, [pc, #112]	; (23bec <watchdog_init_and_start+0x108>)
   23b7a:	63b4      	str	r4, [r6, #56]	; 0x38
   23b7c:	e9c6 340f 	strd	r3, r4, [r6, #60]	; 0x3c
	return api->feed(dev, channel_id);
   23b80:	6883      	ldr	r3, [r0, #8]
   23b82:	68db      	ldr	r3, [r3, #12]
   23b84:	4798      	blx	r3
	if (err) {
   23b86:	4604      	mov	r4, r0
   23b88:	b110      	cbz	r0, 23b90 <watchdog_init_and_start+0xac>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
   23b8a:	4602      	mov	r2, r0
   23b8c:	4918      	ldr	r1, [pc, #96]	; (23bf0 <watchdog_init_and_start+0x10c>)
   23b8e:	e7e3      	b.n	23b58 <watchdog_init_and_start+0x74>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   23b90:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   23b94:	2300      	movs	r3, #0
   23b96:	4817      	ldr	r0, [pc, #92]	; (23bf4 <watchdog_init_and_start+0x110>)
   23b98:	f106 0108 	add.w	r1, r6, #8
   23b9c:	f01a fa1a 	bl	3dfd4 <k_delayed_work_submit_to_queue>
	if (err) {
   23ba0:	4604      	mov	r4, r0
   23ba2:	b110      	cbz	r0, 23baa <watchdog_init_and_start+0xc6>
		LOG_ERR("Cannot start watchdog feed worker!"
   23ba4:	4602      	mov	r2, r0
   23ba6:	4914      	ldr	r1, [pc, #80]	; (23bf8 <watchdog_init_and_start+0x114>)
   23ba8:	e7d6      	b.n	23b58 <watchdog_init_and_start+0x74>
		LOG_INF("Watchdog feed enabled. Timeout: %d",
   23baa:	f247 5230 	movw	r2, #30000	; 0x7530
   23bae:	4638      	mov	r0, r7
   23bb0:	4912      	ldr	r1, [pc, #72]	; (23bfc <watchdog_init_and_start+0x118>)
   23bb2:	e7d3      	b.n	23b5c <watchdog_init_and_start+0x78>
		return -EINVAL;
   23bb4:	f06f 0415 	mvn.w	r4, #21
   23bb8:	e7ab      	b.n	23b12 <watchdog_init_and_start+0x2e>
   23bba:	bf00      	nop
   23bbc:	20024680 	.word	0x20024680
   23bc0:	000489fa 	.word	0x000489fa
   23bc4:	00046504 	.word	0x00046504
   23bc8:	000463bc 	.word	0x000463bc
   23bcc:	20021940 	.word	0x20021940
   23bd0:	000489fe 	.word	0x000489fe
   23bd4:	000467bc 	.word	0x000467bc
   23bd8:	00048a1a 	.word	0x00048a1a
   23bdc:	00048a48 	.word	0x00048a48
   23be0:	00048a70 	.word	0x00048a70
   23be4:	00048a96 	.word	0x00048a96
   23be8:	00023a65 	.word	0x00023a65
   23bec:	00023a91 	.word	0x00023a91
   23bf0:	000489d5 	.word	0x000489d5
   23bf4:	200244f8 	.word	0x200244f8
   23bf8:	00048aa7 	.word	0x00048aa7
   23bfc:	00048ad9 	.word	0x00048ad9

00023c00 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   23c00:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   23c02:	4c0a      	ldr	r4, [pc, #40]	; (23c2c <crc8_ccitt+0x2c>)
   23c04:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   23c06:	4291      	cmp	r1, r2
   23c08:	d100      	bne.n	23c0c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   23c0a:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   23c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
   23c10:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   23c12:	0903      	lsrs	r3, r0, #4
   23c14:	5ce3      	ldrb	r3, [r4, r3]
   23c16:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   23c1a:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   23c1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   23c20:	5ce0      	ldrb	r0, [r4, r3]
   23c22:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   23c26:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   23c28:	e7ed      	b.n	23c06 <crc8_ccitt+0x6>
   23c2a:	bf00      	nop
   23c2c:	00048b05 	.word	0x00048b05

00023c30 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   23c30:	2803      	cmp	r0, #3
{
   23c32:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   23c34:	d906      	bls.n	23c44 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   23c36:	f01e fd1c 	bl	42672 <__errno>
   23c3a:	2309      	movs	r3, #9
   23c3c:	6003      	str	r3, [r0, #0]
   23c3e:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   23c42:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23c44:	220c      	movs	r2, #12
   23c46:	4b05      	ldr	r3, [pc, #20]	; (23c5c <_check_fd+0x2c>)
   23c48:	fb02 3000 	mla	r0, r2, r0, r3
   23c4c:	3008      	adds	r0, #8
   23c4e:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   23c52:	2b00      	cmp	r3, #0
   23c54:	d0ef      	beq.n	23c36 <_check_fd+0x6>
	return 0;
   23c56:	2000      	movs	r0, #0
   23c58:	e7f3      	b.n	23c42 <_check_fd+0x12>
   23c5a:	bf00      	nop
   23c5c:	20024684 	.word	0x20024684

00023c60 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   23c60:	b570      	push	{r4, r5, r6, lr}
   23c62:	4604      	mov	r4, r0
   23c64:	460d      	mov	r5, r1
   23c66:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   23c68:	f7ff ffe2 	bl	23c30 <_check_fd>
   23c6c:	2800      	cmp	r0, #0
   23c6e:	db0a      	blt.n	23c86 <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   23c70:	4a08      	ldr	r2, [pc, #32]	; (23c94 <z_get_fd_obj+0x34>)
   23c72:	b155      	cbz	r5, 23c8a <z_get_fd_obj+0x2a>
   23c74:	230c      	movs	r3, #12
   23c76:	fb03 2304 	mla	r3, r3, r4, r2
   23c7a:	685b      	ldr	r3, [r3, #4]
   23c7c:	42ab      	cmp	r3, r5
   23c7e:	d004      	beq.n	23c8a <z_get_fd_obj+0x2a>
		errno = err;
   23c80:	f01e fcf7 	bl	42672 <__errno>
   23c84:	6006      	str	r6, [r0, #0]
		return NULL;
   23c86:	2000      	movs	r0, #0
   23c88:	e002      	b.n	23c90 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   23c8a:	200c      	movs	r0, #12
   23c8c:	4344      	muls	r4, r0
   23c8e:	5910      	ldr	r0, [r2, r4]
}
   23c90:	bd70      	pop	{r4, r5, r6, pc}
   23c92:	bf00      	nop
   23c94:	20024684 	.word	0x20024684

00023c98 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   23c98:	b538      	push	{r3, r4, r5, lr}
   23c9a:	4605      	mov	r5, r0
   23c9c:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   23c9e:	f7ff ffc7 	bl	23c30 <_check_fd>
   23ca2:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   23ca4:	bfa3      	ittte	ge
   23ca6:	230c      	movge	r3, #12
   23ca8:	fb03 f005 	mulge.w	r0, r3, r5
   23cac:	4a03      	ldrge	r2, [pc, #12]	; (23cbc <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   23cae:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   23cb0:	bfa1      	itttt	ge
   23cb2:	1813      	addge	r3, r2, r0
   23cb4:	685b      	ldrge	r3, [r3, #4]
   23cb6:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
   23cb8:	5810      	ldrge	r0, [r2, r0]
}
   23cba:	bd38      	pop	{r3, r4, r5, pc}
   23cbc:	20024684 	.word	0x20024684

00023cc0 <z_reserve_fd>:

int z_reserve_fd(void)
{
   23cc0:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   23cc2:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   23cc4:	f04f 33ff 	mov.w	r3, #4294967295
   23cc8:	f04f 32ff 	mov.w	r2, #4294967295
   23ccc:	4812      	ldr	r0, [pc, #72]	; (23d18 <z_reserve_fd+0x58>)
   23cce:	f018 faf5 	bl	3c2bc <z_impl_k_mutex_lock>
   23cd2:	4b12      	ldr	r3, [pc, #72]	; (23d1c <z_reserve_fd+0x5c>)
   23cd4:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   23cd8:	b17a      	cbz	r2, 23cfa <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   23cda:	3401      	adds	r4, #1
   23cdc:	2c04      	cmp	r4, #4
   23cde:	f103 030c 	add.w	r3, r3, #12
   23ce2:	d1f7      	bne.n	23cd4 <z_reserve_fd+0x14>
	errno = ENFILE;
   23ce4:	f01e fcc5 	bl	42672 <__errno>
   23ce8:	2317      	movs	r3, #23
	return -1;
   23cea:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   23cee:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   23cf0:	4809      	ldr	r0, [pc, #36]	; (23d18 <z_reserve_fd+0x58>)
   23cf2:	f018 fbdd 	bl	3c4b0 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   23cf6:	4620      	mov	r0, r4
   23cf8:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23cfa:	e8d3 1fef 	ldaex	r1, [r3]
   23cfe:	3101      	adds	r1, #1
   23d00:	e8c3 1fe0 	stlex	r0, r1, [r3]
   23d04:	2800      	cmp	r0, #0
   23d06:	d1f8      	bne.n	23cfa <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   23d08:	230c      	movs	r3, #12
   23d0a:	4363      	muls	r3, r4
   23d0c:	4904      	ldr	r1, [pc, #16]	; (23d20 <z_reserve_fd+0x60>)
   23d0e:	18c8      	adds	r0, r1, r3
   23d10:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   23d12:	6042      	str	r2, [r0, #4]
   23d14:	e7ec      	b.n	23cf0 <z_reserve_fd+0x30>
   23d16:	bf00      	nop
   23d18:	20020b30 	.word	0x20020b30
   23d1c:	2002468c 	.word	0x2002468c
   23d20:	20024684 	.word	0x20024684

00023d24 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   23d24:	230c      	movs	r3, #12
{
   23d26:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   23d28:	4358      	muls	r0, r3
   23d2a:	4c02      	ldr	r4, [pc, #8]	; (23d34 <z_finalize_fd+0x10>)
   23d2c:	1823      	adds	r3, r4, r0
   23d2e:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   23d30:	605a      	str	r2, [r3, #4]
}
   23d32:	bd10      	pop	{r4, pc}
   23d34:	20024684 	.word	0x20024684

00023d38 <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   23d38:	230c      	movs	r3, #12
   23d3a:	4a0e      	ldr	r2, [pc, #56]	; (23d74 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   23d3c:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   23d3e:	fb03 2300 	mla	r3, r3, r0, r2
   23d42:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23d44:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   23d48:	b191      	cbz	r1, 23d70 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   23d4a:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23d4c:	e8d3 5fef 	ldaex	r5, [r3]
   23d50:	428d      	cmp	r5, r1
   23d52:	d104      	bne.n	23d5e <z_free_fd+0x26>
   23d54:	e8c3 4fec 	stlex	ip, r4, [r3]
   23d58:	f1bc 0f00 	cmp.w	ip, #0
   23d5c:	d1f6      	bne.n	23d4c <z_free_fd+0x14>
   23d5e:	d1f1      	bne.n	23d44 <z_free_fd+0xc>
	if (old_rc != 1) {
   23d60:	2901      	cmp	r1, #1
   23d62:	d105      	bne.n	23d70 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   23d64:	230c      	movs	r3, #12
   23d66:	4358      	muls	r0, r3
   23d68:	2300      	movs	r3, #0
   23d6a:	1811      	adds	r1, r2, r0
   23d6c:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   23d6e:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   23d70:	bd30      	pop	{r4, r5, pc}
   23d72:	bf00      	nop
   23d74:	20024684 	.word	0x20024684

00023d78 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   23d78:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   23d7a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   23d7c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   23d80:	2b02      	cmp	r3, #2
{
   23d82:	4604      	mov	r4, r0
   23d84:	460e      	mov	r6, r1
	notify->result = res;
   23d86:	6081      	str	r1, [r0, #8]
	switch (method) {
   23d88:	d010      	beq.n	23dac <sys_notify_finalize+0x34>
   23d8a:	2b03      	cmp	r3, #3
   23d8c:	d004      	beq.n	23d98 <sys_notify_finalize+0x20>
   23d8e:	2b01      	cmp	r3, #1
   23d90:	d10f      	bne.n	23db2 <sys_notify_finalize+0x3a>
   23d92:	2500      	movs	r5, #0
   23d94:	4628      	mov	r0, r5
   23d96:	e001      	b.n	23d9c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   23d98:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   23d9a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   23d9c:	2300      	movs	r3, #0
   23d9e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   23da0:	b110      	cbz	r0, 23da8 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   23da2:	4631      	mov	r1, r6
   23da4:	f01b f886 	bl	3eeb4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   23da8:	4628      	mov	r0, r5
   23daa:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
   23dac:	2500      	movs	r5, #0
		sig = notify->method.signal;
   23dae:	6800      	ldr	r0, [r0, #0]
		break;
   23db0:	e7f4      	b.n	23d9c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   23db2:	2345      	movs	r3, #69	; 0x45
   23db4:	4a05      	ldr	r2, [pc, #20]	; (23dcc <sys_notify_finalize+0x54>)
   23db6:	4906      	ldr	r1, [pc, #24]	; (23dd0 <sys_notify_finalize+0x58>)
   23db8:	4806      	ldr	r0, [pc, #24]	; (23dd4 <sys_notify_finalize+0x5c>)
   23dba:	f01d fb03 	bl	413c4 <printk>
   23dbe:	2145      	movs	r1, #69	; 0x45
   23dc0:	4802      	ldr	r0, [pc, #8]	; (23dcc <sys_notify_finalize+0x54>)
   23dc2:	f01d fd1c 	bl	417fe <assert_post_action>
	sys_notify_generic_callback rv = 0;
   23dc6:	2500      	movs	r5, #0
   23dc8:	e7e7      	b.n	23d9a <sys_notify_finalize+0x22>
   23dca:	bf00      	nop
   23dcc:	00048b15 	.word	0x00048b15
   23dd0:	0004ef58 	.word	0x0004ef58
   23dd4:	00048156 	.word	0x00048156

00023dd8 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
   23dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ddc:	b087      	sub	sp, #28
   23dde:	460f      	mov	r7, r1
   23de0:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
   23de2:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
   23de4:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   23de6:	2514      	movs	r5, #20
{
   23de8:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
   23dea:	4698      	mov	r8, r3
{
   23dec:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   23df0:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
   23df4:	4c1e      	ldr	r4, [pc, #120]	; (23e70 <print_digits+0x98>)
   23df6:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   23dfa:	ea50 0301 	orrs.w	r3, r0, r1
   23dfe:	d11a      	bne.n	23e36 <print_digits+0x5e>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
   23e00:	2d14      	cmp	r5, #20
		buf[i] = '0';
   23e02:	bf08      	it	eq
   23e04:	2330      	moveq	r3, #48	; 0x30
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   23e06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
   23e08:	bf18      	it	ne
   23e0a:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   23e0c:	442c      	add	r4, r5
		buf[i] = '0';
   23e0e:	bf08      	it	eq
   23e10:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   23e14:	2c15      	cmp	r4, #21
   23e16:	d01b      	beq.n	23e50 <print_digits+0x78>
   23e18:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
   23e1a:	2c00      	cmp	r4, #0
   23e1c:	dc1a      	bgt.n	23e54 <print_digits+0x7c>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
   23e1e:	f81d 0005 	ldrb.w	r0, [sp, r5]
   23e22:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
   23e24:	3501      	adds	r5, #1
		out(buf[i], ctx);
   23e26:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
   23e28:	2d15      	cmp	r5, #21
   23e2a:	d1f8      	bne.n	23e1e <print_digits+0x46>
	}
	for (/**/; pad > 0; pad--) {
   23e2c:	2c00      	cmp	r4, #0
   23e2e:	dc19      	bgt.n	23e64 <print_digits+0x8c>
		out(pad_char, ctx);
	}
}
   23e30:	b007      	add	sp, #28
   23e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
   23e36:	4642      	mov	r2, r8
   23e38:	464b      	mov	r3, r9
   23e3a:	f7f9 f83f 	bl	1cebc <__aeabi_uldivmod>
   23e3e:	4684      	mov	ip, r0
   23e40:	460b      	mov	r3, r1
   23e42:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
   23e44:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
   23e46:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
   23e4a:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   23e4c:	3d01      	subs	r5, #1
   23e4e:	e7d4      	b.n	23dfa <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   23e50:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
   23e52:	e7e4      	b.n	23e1e <print_digits+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
   23e54:	f1bb 0f00 	cmp.w	fp, #0
   23e58:	d0e1      	beq.n	23e1e <print_digits+0x46>
		out(pad_char, ctx);
   23e5a:	4639      	mov	r1, r7
   23e5c:	4650      	mov	r0, sl
   23e5e:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
   23e60:	3c01      	subs	r4, #1
   23e62:	e7da      	b.n	23e1a <print_digits+0x42>
		out(pad_char, ctx);
   23e64:	4639      	mov	r1, r7
   23e66:	4650      	mov	r0, sl
   23e68:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
   23e6a:	3c01      	subs	r4, #1
   23e6c:	e7de      	b.n	23e2c <print_digits+0x54>
   23e6e:	bf00      	nop
   23e70:	00048b38 	.word	0x00048b38

00023e74 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   23e74:	680b      	ldr	r3, [r1, #0]
   23e76:	3301      	adds	r3, #1
   23e78:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   23e7a:	4b01      	ldr	r3, [pc, #4]	; (23e80 <char_out+0xc>)
   23e7c:	681b      	ldr	r3, [r3, #0]
   23e7e:	4718      	bx	r3
   23e80:	20020644 	.word	0x20020644

00023e84 <__printk_hook_install>:
	_char_out = fn;
   23e84:	4b01      	ldr	r3, [pc, #4]	; (23e8c <__printk_hook_install+0x8>)
   23e86:	6018      	str	r0, [r3, #0]
}
   23e88:	4770      	bx	lr
   23e8a:	bf00      	nop
   23e8c:	20020644 	.word	0x20020644

00023e90 <z_vprintk>:
{
   23e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   23e94:	2600      	movs	r6, #0
{
   23e96:	4605      	mov	r5, r0
   23e98:	468b      	mov	fp, r1
   23e9a:	461c      	mov	r4, r3
	int min_width = -1;
   23e9c:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
   23ea0:	4637      	mov	r7, r6
{
   23ea2:	b087      	sub	sp, #28
   23ea4:	f102 3aff 	add.w	sl, r2, #4294967295
			might_format = 0;
   23ea8:	f04f 0900 	mov.w	r9, #0
					break;
   23eac:	e007      	b.n	23ebe <z_vprintk+0x2e>
		if (!might_format) {
   23eae:	f1b9 0f00 	cmp.w	r9, #0
   23eb2:	d10b      	bne.n	23ecc <z_vprintk+0x3c>
			if (*fmt != '%') {
   23eb4:	2825      	cmp	r0, #37	; 0x25
   23eb6:	f000 810a 	beq.w	240ce <z_vprintk+0x23e>
				out((int)*fmt, ctx);
   23eba:	4659      	mov	r1, fp
   23ebc:	47a8      	blx	r5
	while (*fmt) {
   23ebe:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
   23ec2:	2800      	cmp	r0, #0
   23ec4:	d1f3      	bne.n	23eae <z_vprintk+0x1e>
}
   23ec6:	b007      	add	sp, #28
   23ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   23ecc:	287a      	cmp	r0, #122	; 0x7a
   23ece:	d80a      	bhi.n	23ee6 <z_vprintk+0x56>
   23ed0:	2862      	cmp	r0, #98	; 0x62
   23ed2:	d810      	bhi.n	23ef6 <z_vprintk+0x66>
   23ed4:	2830      	cmp	r0, #48	; 0x30
   23ed6:	d051      	beq.n	23f7c <z_vprintk+0xec>
   23ed8:	d844      	bhi.n	23f64 <z_vprintk+0xd4>
   23eda:	2825      	cmp	r0, #37	; 0x25
   23edc:	f000 80f5 	beq.w	240ca <z_vprintk+0x23a>
   23ee0:	282d      	cmp	r0, #45	; 0x2d
   23ee2:	f000 80fb 	beq.w	240dc <z_vprintk+0x24c>
					out((int)'%', ctx);
   23ee6:	4659      	mov	r1, fp
   23ee8:	2025      	movs	r0, #37	; 0x25
   23eea:	47a8      	blx	r5
					out((int)*fmt, ctx);
   23eec:	4659      	mov	r1, fp
   23eee:	f89a 0000 	ldrb.w	r0, [sl]
   23ef2:	47a8      	blx	r5
   23ef4:	e7d8      	b.n	23ea8 <z_vprintk+0x18>
   23ef6:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   23efa:	2b17      	cmp	r3, #23
   23efc:	d8f3      	bhi.n	23ee6 <z_vprintk+0x56>
   23efe:	a201      	add	r2, pc, #4	; (adr r2, 23f04 <z_vprintk+0x74>)
   23f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23f04:	000240c3 	.word	0x000240c3
   23f08:	00023fc5 	.word	0x00023fc5
   23f0c:	00023ee7 	.word	0x00023ee7
   23f10:	00023ee7 	.word	0x00023ee7
   23f14:	00023ee7 	.word	0x00023ee7
   23f18:	00023fa7 	.word	0x00023fa7
   23f1c:	00023fc5 	.word	0x00023fc5
   23f20:	00023ee7 	.word	0x00023ee7
   23f24:	00023ee7 	.word	0x00023ee7
   23f28:	00023fa7 	.word	0x00023fa7
   23f2c:	00023ee7 	.word	0x00023ee7
   23f30:	00023ee7 	.word	0x00023ee7
   23f34:	00023ee7 	.word	0x00023ee7
   23f38:	0002403f 	.word	0x0002403f
   23f3c:	00023ee7 	.word	0x00023ee7
   23f40:	00023ee7 	.word	0x00023ee7
   23f44:	0002408b 	.word	0x0002408b
   23f48:	00023ee7 	.word	0x00023ee7
   23f4c:	00023fc5 	.word	0x00023fc5
   23f50:	00023ee7 	.word	0x00023ee7
   23f54:	00023ee7 	.word	0x00023ee7
   23f58:	00023f6d 	.word	0x00023f6d
   23f5c:	00023ee7 	.word	0x00023ee7
   23f60:	00023fa7 	.word	0x00023fa7
			switch (*fmt) {
   23f64:	2839      	cmp	r0, #57	; 0x39
   23f66:	d915      	bls.n	23f94 <z_vprintk+0x104>
   23f68:	2858      	cmp	r0, #88	; 0x58
   23f6a:	d1bc      	bne.n	23ee6 <z_vprintk+0x56>
				if (*fmt == 'p') {
   23f6c:	f89a 3000 	ldrb.w	r3, [sl]
   23f70:	2b70      	cmp	r3, #112	; 0x70
   23f72:	d16e      	bne.n	24052 <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
   23f74:	2300      	movs	r3, #0
   23f76:	f854 2b04 	ldr.w	r2, [r4], #4
   23f7a:	e075      	b.n	24068 <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
   23f7c:	f1b8 0f00 	cmp.w	r8, #0
   23f80:	da0b      	bge.n	23f9a <z_vprintk+0x10a>
   23f82:	2f00      	cmp	r7, #0
   23f84:	f000 80ac 	beq.w	240e0 <z_vprintk+0x250>
					min_width = *fmt - '0';
   23f88:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   23f8c:	2f00      	cmp	r7, #0
   23f8e:	bf08      	it	eq
   23f90:	2702      	moveq	r7, #2
   23f92:	e794      	b.n	23ebe <z_vprintk+0x2e>
				if (min_width < 0) {
   23f94:	f1b8 0f00 	cmp.w	r8, #0
   23f98:	dbf6      	blt.n	23f88 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   23f9a:	230a      	movs	r3, #10
   23f9c:	fb03 0808 	mla	r8, r3, r8, r0
   23fa0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   23fa4:	e7f2      	b.n	23f8c <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
   23fa6:	2868      	cmp	r0, #104	; 0x68
   23fa8:	d103      	bne.n	23fb2 <z_vprintk+0x122>
   23faa:	2e68      	cmp	r6, #104	; 0x68
   23fac:	d106      	bne.n	23fbc <z_vprintk+0x12c>
					length_mod = 'H';
   23fae:	2648      	movs	r6, #72	; 0x48
   23fb0:	e785      	b.n	23ebe <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   23fb2:	286c      	cmp	r0, #108	; 0x6c
   23fb4:	d102      	bne.n	23fbc <z_vprintk+0x12c>
   23fb6:	2e6c      	cmp	r6, #108	; 0x6c
   23fb8:	f000 8094 	beq.w	240e4 <z_vprintk+0x254>
				} else if (length_mod == 0) {
   23fbc:	2e00      	cmp	r6, #0
   23fbe:	d192      	bne.n	23ee6 <z_vprintk+0x56>
   23fc0:	4606      	mov	r6, r0
   23fc2:	e77c      	b.n	23ebe <z_vprintk+0x2e>
				if (length_mod == 'z') {
   23fc4:	2e7a      	cmp	r6, #122	; 0x7a
   23fc6:	d106      	bne.n	23fd6 <z_vprintk+0x146>
					d = va_arg(ap, long);
   23fc8:	46a1      	mov	r9, r4
   23fca:	f859 2b04 	ldr.w	r2, [r9], #4
   23fce:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   23fd0:	2875      	cmp	r0, #117	; 0x75
   23fd2:	d123      	bne.n	2401c <z_vprintk+0x18c>
   23fd4:	e00f      	b.n	23ff6 <z_vprintk+0x166>
				} else if (length_mod == 'l') {
   23fd6:	2e6c      	cmp	r6, #108	; 0x6c
   23fd8:	d0f6      	beq.n	23fc8 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
   23fda:	2e4c      	cmp	r6, #76	; 0x4c
   23fdc:	d105      	bne.n	23fea <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
   23fde:	3407      	adds	r4, #7
   23fe0:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
   23fe4:	e8f9 2302 	ldrd	r2, r3, [r9], #8
   23fe8:	e7f2      	b.n	23fd0 <z_vprintk+0x140>
				} else if (*fmt == 'u') {
   23fea:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
   23fec:	6822      	ldr	r2, [r4, #0]
   23fee:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
   23ff2:	d112      	bne.n	2401a <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
   23ff4:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   23ff6:	1ef8      	subs	r0, r7, #3
   23ff8:	bf18      	it	ne
   23ffa:	2001      	movne	r0, #1
   23ffc:	2f01      	cmp	r7, #1
   23ffe:	bf0c      	ite	eq
   24000:	2430      	moveq	r4, #48	; 0x30
   24002:	2420      	movne	r4, #32
   24004:	9001      	str	r0, [sp, #4]
   24006:	200a      	movs	r0, #10
   24008:	e9cd 4802 	strd	r4, r8, [sp, #8]
   2400c:	9000      	str	r0, [sp, #0]
   2400e:	4659      	mov	r1, fp
   24010:	4628      	mov	r0, r5
   24012:	f7ff fee1 	bl	23dd8 <print_digits>
}
   24016:	464c      	mov	r4, r9
   24018:	e746      	b.n	23ea8 <z_vprintk+0x18>
					d = va_arg(ap, int);
   2401a:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   2401c:	2a00      	cmp	r2, #0
   2401e:	f173 0100 	sbcs.w	r1, r3, #0
   24022:	dae8      	bge.n	23ff6 <z_vprintk+0x166>
					out((int)'-', ctx);
   24024:	4659      	mov	r1, fp
   24026:	202d      	movs	r0, #45	; 0x2d
   24028:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2402c:	47a8      	blx	r5
					d = -d;
   2402e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   24032:	4252      	negs	r2, r2
   24034:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   24038:	f108 38ff 	add.w	r8, r8, #4294967295
   2403c:	e7db      	b.n	23ff6 <z_vprintk+0x166>
				out('0', ctx);
   2403e:	4659      	mov	r1, fp
   24040:	2030      	movs	r0, #48	; 0x30
   24042:	47a8      	blx	r5
				out('x', ctx);
   24044:	4659      	mov	r1, fp
   24046:	2078      	movs	r0, #120	; 0x78
   24048:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
   2404a:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
   2404e:	2701      	movs	r7, #1
   24050:	e78c      	b.n	23f6c <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   24052:	2e6c      	cmp	r6, #108	; 0x6c
   24054:	d08e      	beq.n	23f74 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
   24056:	2e4c      	cmp	r6, #76	; 0x4c
   24058:	d18c      	bne.n	23f74 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
   2405a:	1de3      	adds	r3, r4, #7
   2405c:	f023 0307 	bic.w	r3, r3, #7
   24060:	461c      	mov	r4, r3
   24062:	685b      	ldr	r3, [r3, #4]
   24064:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   24068:	1ef8      	subs	r0, r7, #3
   2406a:	bf18      	it	ne
   2406c:	2001      	movne	r0, #1
   2406e:	2f01      	cmp	r7, #1
   24070:	bf0c      	ite	eq
   24072:	2130      	moveq	r1, #48	; 0x30
   24074:	2120      	movne	r1, #32
   24076:	e9cd 1802 	strd	r1, r8, [sp, #8]
   2407a:	2110      	movs	r1, #16
   2407c:	9001      	str	r0, [sp, #4]
   2407e:	9100      	str	r1, [sp, #0]
   24080:	4628      	mov	r0, r5
   24082:	4659      	mov	r1, fp
   24084:	f7ff fea8 	bl	23dd8 <print_digits>
   24088:	e70e      	b.n	23ea8 <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
   2408a:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   2408e:	4699      	mov	r9, r3
   24090:	464a      	mov	r2, r9
   24092:	f819 0b01 	ldrb.w	r0, [r9], #1
   24096:	b978      	cbnz	r0, 240b8 <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
   24098:	2f03      	cmp	r7, #3
   2409a:	d125      	bne.n	240e8 <z_vprintk+0x258>
					int remaining = min_width - (s - start);
   2409c:	eba2 0903 	sub.w	r9, r2, r3
   240a0:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
   240a4:	f1b9 0f00 	cmp.w	r9, #0
   240a8:	f77f aefe 	ble.w	23ea8 <z_vprintk+0x18>
						out(' ', ctx);
   240ac:	4659      	mov	r1, fp
   240ae:	2020      	movs	r0, #32
   240b0:	47a8      	blx	r5
   240b2:	f109 39ff 	add.w	r9, r9, #4294967295
   240b6:	e7f5      	b.n	240a4 <z_vprintk+0x214>
					out((int)(*s++), ctx);
   240b8:	4659      	mov	r1, fp
   240ba:	9304      	str	r3, [sp, #16]
   240bc:	47a8      	blx	r5
   240be:	9b04      	ldr	r3, [sp, #16]
   240c0:	e7e6      	b.n	24090 <z_vprintk+0x200>
				out(c, ctx);
   240c2:	4659      	mov	r1, fp
   240c4:	f854 0b04 	ldr.w	r0, [r4], #4
   240c8:	e713      	b.n	23ef2 <z_vprintk+0x62>
				out((int)'%', ctx);
   240ca:	4659      	mov	r1, fp
   240cc:	e711      	b.n	23ef2 <z_vprintk+0x62>
				length_mod = 0;
   240ce:	464e      	mov	r6, r9
				padding = PAD_NONE;
   240d0:	464f      	mov	r7, r9
				min_width = -1;
   240d2:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
   240d6:	f04f 0901 	mov.w	r9, #1
   240da:	e6f0      	b.n	23ebe <z_vprintk+0x2e>
			switch (*fmt) {
   240dc:	2703      	movs	r7, #3
   240de:	e6ee      	b.n	23ebe <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   240e0:	2701      	movs	r7, #1
   240e2:	e6ec      	b.n	23ebe <z_vprintk+0x2e>
					length_mod = 'L';
   240e4:	264c      	movs	r6, #76	; 0x4c
   240e6:	e6ea      	b.n	23ebe <z_vprintk+0x2e>
			might_format = 0;
   240e8:	4681      	mov	r9, r0
   240ea:	e6e8      	b.n	23ebe <z_vprintk+0x2e>

000240ec <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   240ec:	b507      	push	{r0, r1, r2, lr}
   240ee:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   240f0:	2100      	movs	r1, #0
{
   240f2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   240f4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
   240f6:	4803      	ldr	r0, [pc, #12]	; (24104 <vprintk+0x18>)
   240f8:	a901      	add	r1, sp, #4
   240fa:	f7ff fec9 	bl	23e90 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   240fe:	b003      	add	sp, #12
   24100:	f85d fb04 	ldr.w	pc, [sp], #4
   24104:	00023e75 	.word	0x00023e75

00024108 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   24108:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   2410a:	2500      	movs	r5, #0
{
   2410c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   2410e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   24112:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   24114:	a901      	add	r1, sp, #4
   24116:	4805      	ldr	r0, [pc, #20]	; (2412c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   24118:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   2411a:	f7ff feb9 	bl	23e90 <z_vprintk>

	if (ctx.count < ctx.max) {
   2411e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   24122:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   24124:	bfb8      	it	lt
   24126:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   24128:	b005      	add	sp, #20
   2412a:	bd30      	pop	{r4, r5, pc}
   2412c:	0004139f 	.word	0x0004139f

00024130 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   24130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24134:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24138:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   2413c:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2413e:	f019 0f08 	tst.w	r9, #8
{
   24142:	4604      	mov	r4, r0
   24144:	9201      	str	r2, [sp, #4]
	if (processing) {
   24146:	d024      	beq.n	24192 <process_event+0x62>
		if (evt == EVT_COMPLETE) {
   24148:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   2414a:	bf0c      	ite	eq
   2414c:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   24150:	f049 0920 	orrne.w	r9, r9, #32
   24154:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   24158:	3414      	adds	r4, #20
   2415a:	4620      	mov	r0, r4
   2415c:	f019 fefa 	bl	3df54 <z_spin_unlock_valid>
   24160:	b968      	cbnz	r0, 2417e <process_event+0x4e>
   24162:	2384      	movs	r3, #132	; 0x84
   24164:	4aa2      	ldr	r2, [pc, #648]	; (243f0 <process_event+0x2c0>)
   24166:	49a3      	ldr	r1, [pc, #652]	; (243f4 <process_event+0x2c4>)
   24168:	48a3      	ldr	r0, [pc, #652]	; (243f8 <process_event+0x2c8>)
   2416a:	f01d f92b 	bl	413c4 <printk>
   2416e:	4621      	mov	r1, r4
   24170:	48a2      	ldr	r0, [pc, #648]	; (243fc <process_event+0x2cc>)
   24172:	f01d f927 	bl	413c4 <printk>
   24176:	2184      	movs	r1, #132	; 0x84
   24178:	489d      	ldr	r0, [pc, #628]	; (243f0 <process_event+0x2c0>)
   2417a:	f01d fb40 	bl	417fe <assert_post_action>
   2417e:	9b01      	ldr	r3, [sp, #4]
   24180:	f383 8811 	msr	BASEPRI, r3
   24184:	f3bf 8f6f 	isb	sy
}
   24188:	b003      	add	sp, #12
   2418a:	ecbd 8b02 	vpop	{d8}
   2418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   24192:	4f9b      	ldr	r7, [pc, #620]	; (24400 <process_event+0x2d0>)
   24194:	f8df 8260 	ldr.w	r8, [pc, #608]	; 243f8 <process_event+0x2c8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24198:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   2419c:	2902      	cmp	r1, #2
   2419e:	d106      	bne.n	241ae <process_event+0x7e>
			evt = process_recheck(mgr);
   241a0:	4620      	mov	r0, r4
   241a2:	f01d f929 	bl	413f8 <process_recheck>
		if (evt == EVT_NOP) {
   241a6:	2800      	cmp	r0, #0
   241a8:	d0d6      	beq.n	24158 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   241aa:	2801      	cmp	r0, #1
   241ac:	d16a      	bne.n	24284 <process_event+0x154>
			res = mgr->last_res;
   241ae:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   241b2:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   241b4:	f1bb 0f00 	cmp.w	fp, #0
   241b8:	da1c      	bge.n	241f4 <process_event+0xc4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   241ba:	2600      	movs	r6, #0
		*clients = mgr->clients;
   241bc:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   241be:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   241c2:	e9c4 6600 	strd	r6, r6, [r4]
   241c6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   241ca:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   241cc:	9600      	str	r6, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   241ce:	8ba3      	ldrh	r3, [r4, #28]
   241d0:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   241d4:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   241d6:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
   241da:	d003      	beq.n	241e4 <process_event+0xb4>
		if (do_monitors
   241dc:	68a2      	ldr	r2, [r4, #8]
   241de:	2a00      	cmp	r2, #0
   241e0:	f040 811e 	bne.w	24420 <process_event+0x2f0>
		    || !sys_slist_is_empty(&clients)
   241e4:	b91d      	cbnz	r5, 241ee <process_event+0xbe>
		    || (transit != NULL)) {
   241e6:	9a00      	ldr	r2, [sp, #0]
   241e8:	2a00      	cmp	r2, #0
   241ea:	f000 8164 	beq.w	244b6 <process_event+0x386>
   241ee:	f04f 0900 	mov.w	r9, #0
   241f2:	e117      	b.n	24424 <process_event+0x2f4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   241f4:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   241f8:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   241fa:	2901      	cmp	r1, #1
   241fc:	d823      	bhi.n	24246 <process_event+0x116>
	list->head = NULL;
   241fe:	2100      	movs	r1, #0
   24200:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   24204:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   24206:	6825      	ldr	r5, [r4, #0]
   24208:	b29b      	uxth	r3, r3
	list->tail = NULL;
   2420a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   2420e:	d10c      	bne.n	2422a <process_event+0xfa>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   24210:	428d      	cmp	r5, r1
   24212:	462a      	mov	r2, r5
   24214:	bf38      	it	cc
   24216:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   24218:	b12a      	cbz	r2, 24226 <process_event+0xf6>
				mgr->refs += 1U;
   2421a:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2421c:	6812      	ldr	r2, [r2, #0]
   2421e:	3101      	adds	r1, #1
   24220:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   24222:	2a00      	cmp	r2, #0
   24224:	d1f8      	bne.n	24218 <process_event+0xe8>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   24226:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   2422a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   2422c:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   2422e:	f01d f8e3 	bl	413f8 <process_recheck>
   24232:	2800      	cmp	r0, #0
   24234:	f000 80d7 	beq.w	243e6 <process_event+0x2b6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   24238:	8ba3      	ldrh	r3, [r4, #28]
   2423a:	f043 0320 	orr.w	r3, r3, #32
   2423e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   24240:	2300      	movs	r3, #0
   24242:	9300      	str	r3, [sp, #0]
   24244:	e7c3      	b.n	241ce <process_event+0x9e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   24246:	2a04      	cmp	r2, #4
   24248:	d10f      	bne.n	2426a <process_event+0x13a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2424a:	f023 0307 	bic.w	r3, r3, #7
   2424e:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   24250:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   24252:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   24254:	f01d f8d0 	bl	413f8 <process_recheck>
   24258:	2800      	cmp	r0, #0
   2425a:	f000 80c6 	beq.w	243ea <process_event+0x2ba>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2425e:	f042 0220 	orr.w	r2, r2, #32
   24262:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   24264:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   24266:	9500      	str	r5, [sp, #0]
   24268:	e7b1      	b.n	241ce <process_event+0x9e>
		__ASSERT_NO_MSG(false);
   2426a:	4640      	mov	r0, r8
   2426c:	f240 1319 	movw	r3, #281	; 0x119
   24270:	463a      	mov	r2, r7
   24272:	4964      	ldr	r1, [pc, #400]	; (24404 <process_event+0x2d4>)
   24274:	f01d f8a6 	bl	413c4 <printk>
   24278:	f240 1119 	movw	r1, #281	; 0x119
   2427c:	4638      	mov	r0, r7
   2427e:	f01d fabe 	bl	417fe <assert_post_action>
   24282:	e7ef      	b.n	24264 <process_event+0x134>
		} else if (evt == EVT_START) {
   24284:	2803      	cmp	r0, #3
   24286:	d135      	bne.n	242f4 <process_event+0x1c4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   24288:	f1b9 0f00 	cmp.w	r9, #0
   2428c:	d00b      	beq.n	242a6 <process_event+0x176>
   2428e:	4640      	mov	r0, r8
   24290:	495d      	ldr	r1, [pc, #372]	; (24408 <process_event+0x2d8>)
   24292:	f44f 73aa 	mov.w	r3, #340	; 0x154
   24296:	463a      	mov	r2, r7
   24298:	f01d f894 	bl	413c4 <printk>
   2429c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   242a0:	4638      	mov	r0, r7
   242a2:	f01d faac 	bl	417fe <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   242a6:	6823      	ldr	r3, [r4, #0]
   242a8:	b95b      	cbnz	r3, 242c2 <process_event+0x192>
   242aa:	4640      	mov	r0, r8
   242ac:	4957      	ldr	r1, [pc, #348]	; (2440c <process_event+0x2dc>)
   242ae:	f240 1355 	movw	r3, #341	; 0x155
   242b2:	463a      	mov	r2, r7
   242b4:	f01d f886 	bl	413c4 <printk>
   242b8:	f240 1155 	movw	r1, #341	; 0x155
   242bc:	4638      	mov	r0, r7
   242be:	f01d fa9e 	bl	417fe <assert_post_action>
			transit = mgr->transitions->start;
   242c2:	6923      	ldr	r3, [r4, #16]
   242c4:	681b      	ldr	r3, [r3, #0]
   242c6:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   242c8:	b95b      	cbnz	r3, 242e2 <process_event+0x1b2>
   242ca:	4640      	mov	r0, r8
   242cc:	4950      	ldr	r1, [pc, #320]	; (24410 <process_event+0x2e0>)
   242ce:	f44f 73ac 	mov.w	r3, #344	; 0x158
   242d2:	463a      	mov	r2, r7
   242d4:	f01d f876 	bl	413c4 <printk>
   242d8:	f44f 71ac 	mov.w	r1, #344	; 0x158
   242dc:	4638      	mov	r0, r7
   242de:	f01d fa8e 	bl	417fe <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   242e2:	8ba3      	ldrh	r3, [r4, #28]
   242e4:	f023 0307 	bic.w	r3, r3, #7
   242e8:	f043 0306 	orr.w	r3, r3, #6
}
   242ec:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   242ee:	83a3      	strh	r3, [r4, #28]
		res = 0;
   242f0:	46ab      	mov	fp, r5
}
   242f2:	e76c      	b.n	241ce <process_event+0x9e>
		} else if (evt == EVT_STOP) {
   242f4:	2804      	cmp	r0, #4
   242f6:	d132      	bne.n	2435e <process_event+0x22e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   242f8:	f1b9 0f02 	cmp.w	r9, #2
   242fc:	d00b      	beq.n	24316 <process_event+0x1e6>
   242fe:	4640      	mov	r0, r8
   24300:	4944      	ldr	r1, [pc, #272]	; (24414 <process_event+0x2e4>)
   24302:	f240 135b 	movw	r3, #347	; 0x15b
   24306:	463a      	mov	r2, r7
   24308:	f01d f85c 	bl	413c4 <printk>
   2430c:	f240 115b 	movw	r1, #347	; 0x15b
   24310:	4638      	mov	r0, r7
   24312:	f01d fa74 	bl	417fe <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   24316:	8be3      	ldrh	r3, [r4, #30]
   24318:	b15b      	cbz	r3, 24332 <process_event+0x202>
   2431a:	4640      	mov	r0, r8
   2431c:	493e      	ldr	r1, [pc, #248]	; (24418 <process_event+0x2e8>)
   2431e:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   24322:	463a      	mov	r2, r7
   24324:	f01d f84e 	bl	413c4 <printk>
   24328:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   2432c:	4638      	mov	r0, r7
   2432e:	f01d fa66 	bl	417fe <assert_post_action>
			transit = mgr->transitions->stop;
   24332:	6923      	ldr	r3, [r4, #16]
   24334:	685b      	ldr	r3, [r3, #4]
   24336:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   24338:	b95b      	cbnz	r3, 24352 <process_event+0x222>
   2433a:	4640      	mov	r0, r8
   2433c:	4934      	ldr	r1, [pc, #208]	; (24410 <process_event+0x2e0>)
   2433e:	f240 135f 	movw	r3, #351	; 0x15f
   24342:	463a      	mov	r2, r7
   24344:	f01d f83e 	bl	413c4 <printk>
   24348:	f240 115f 	movw	r1, #351	; 0x15f
   2434c:	4638      	mov	r0, r7
   2434e:	f01d fa56 	bl	417fe <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   24352:	8ba3      	ldrh	r3, [r4, #28]
   24354:	f023 0307 	bic.w	r3, r3, #7
   24358:	f043 0304 	orr.w	r3, r3, #4
   2435c:	e7c6      	b.n	242ec <process_event+0x1bc>
		} else if (evt == EVT_RESET) {
   2435e:	2805      	cmp	r0, #5
   24360:	d132      	bne.n	243c8 <process_event+0x298>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   24362:	f1b9 0f01 	cmp.w	r9, #1
   24366:	d00b      	beq.n	24380 <process_event+0x250>
   24368:	4640      	mov	r0, r8
   2436a:	492c      	ldr	r1, [pc, #176]	; (2441c <process_event+0x2ec>)
   2436c:	f44f 73b1 	mov.w	r3, #354	; 0x162
   24370:	463a      	mov	r2, r7
   24372:	f01d f827 	bl	413c4 <printk>
   24376:	f44f 71b1 	mov.w	r1, #354	; 0x162
   2437a:	4638      	mov	r0, r7
   2437c:	f01d fa3f 	bl	417fe <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   24380:	6823      	ldr	r3, [r4, #0]
   24382:	b95b      	cbnz	r3, 2439c <process_event+0x26c>
   24384:	4640      	mov	r0, r8
   24386:	4921      	ldr	r1, [pc, #132]	; (2440c <process_event+0x2dc>)
   24388:	f240 1363 	movw	r3, #355	; 0x163
   2438c:	463a      	mov	r2, r7
   2438e:	f01d f819 	bl	413c4 <printk>
   24392:	f240 1163 	movw	r1, #355	; 0x163
   24396:	4638      	mov	r0, r7
   24398:	f01d fa31 	bl	417fe <assert_post_action>
			transit = mgr->transitions->reset;
   2439c:	6923      	ldr	r3, [r4, #16]
   2439e:	689b      	ldr	r3, [r3, #8]
   243a0:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   243a2:	b95b      	cbnz	r3, 243bc <process_event+0x28c>
   243a4:	4640      	mov	r0, r8
   243a6:	491a      	ldr	r1, [pc, #104]	; (24410 <process_event+0x2e0>)
   243a8:	f44f 73b3 	mov.w	r3, #358	; 0x166
   243ac:	463a      	mov	r2, r7
   243ae:	f01d f809 	bl	413c4 <printk>
   243b2:	f44f 71b3 	mov.w	r1, #358	; 0x166
   243b6:	4638      	mov	r0, r7
   243b8:	f01d fa21 	bl	417fe <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   243bc:	8ba3      	ldrh	r3, [r4, #28]
   243be:	f023 0307 	bic.w	r3, r3, #7
   243c2:	f043 0305 	orr.w	r3, r3, #5
   243c6:	e791      	b.n	242ec <process_event+0x1bc>
			__ASSERT_NO_MSG(false);
   243c8:	2500      	movs	r5, #0
   243ca:	f240 1369 	movw	r3, #361	; 0x169
   243ce:	463a      	mov	r2, r7
   243d0:	4640      	mov	r0, r8
   243d2:	490c      	ldr	r1, [pc, #48]	; (24404 <process_event+0x2d4>)
   243d4:	f01c fff6 	bl	413c4 <printk>
   243d8:	f240 1169 	movw	r1, #361	; 0x169
   243dc:	4638      	mov	r0, r7
   243de:	f01d fa0e 	bl	417fe <assert_post_action>
		onoff_transition_fn transit = NULL;
   243e2:	9500      	str	r5, [sp, #0]
   243e4:	e784      	b.n	242f0 <process_event+0x1c0>
   243e6:	9000      	str	r0, [sp, #0]
   243e8:	e6f1      	b.n	241ce <process_event+0x9e>
   243ea:	4605      	mov	r5, r0
   243ec:	e73b      	b.n	24266 <process_event+0x136>
   243ee:	bf00      	nop
   243f0:	000488fa 	.word	0x000488fa
   243f4:	0004894d 	.word	0x0004894d
   243f8:	00048156 	.word	0x00048156
   243fc:	00048964 	.word	0x00048964
   24400:	00048b49 	.word	0x00048b49
   24404:	0004ef58 	.word	0x0004ef58
   24408:	00048b6b 	.word	0x00048b6b
   2440c:	00048b76 	.word	0x00048b76
   24410:	00048b99 	.word	0x00048b99
   24414:	00048bb0 	.word	0x00048bb0
   24418:	00048bc6 	.word	0x00048bc6
   2441c:	00048bd5 	.word	0x00048bd5
				   && !sys_slist_is_empty(&mgr->monitors);
   24420:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   24424:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   24428:	f104 0a14 	add.w	sl, r4, #20
   2442c:	4650      	mov	r0, sl
			mgr->flags = flags;
   2442e:	83a3      	strh	r3, [r4, #28]
   24430:	f019 fd90 	bl	3df54 <z_spin_unlock_valid>
   24434:	b968      	cbnz	r0, 24452 <process_event+0x322>
   24436:	2384      	movs	r3, #132	; 0x84
   24438:	4640      	mov	r0, r8
   2443a:	4a3a      	ldr	r2, [pc, #232]	; (24524 <process_event+0x3f4>)
   2443c:	493a      	ldr	r1, [pc, #232]	; (24528 <process_event+0x3f8>)
   2443e:	f01c ffc1 	bl	413c4 <printk>
   24442:	4651      	mov	r1, sl
   24444:	4839      	ldr	r0, [pc, #228]	; (2452c <process_event+0x3fc>)
   24446:	f01c ffbd 	bl	413c4 <printk>
   2444a:	2184      	movs	r1, #132	; 0x84
   2444c:	4835      	ldr	r0, [pc, #212]	; (24524 <process_event+0x3f4>)
   2444e:	f01d f9d6 	bl	417fe <assert_post_action>
   24452:	9b01      	ldr	r3, [sp, #4]
   24454:	f383 8811 	msr	BASEPRI, r3
   24458:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   2445c:	f1b9 0f00 	cmp.w	r9, #0
   24460:	d138      	bne.n	244d4 <process_event+0x3a4>
	while (!sys_slist_is_empty(list)) {
   24462:	2d00      	cmp	r5, #0
   24464:	d14c      	bne.n	24500 <process_event+0x3d0>
			if (transit != NULL) {
   24466:	9b00      	ldr	r3, [sp, #0]
   24468:	b113      	cbz	r3, 24470 <process_event+0x340>
				transit(mgr, transition_complete);
   2446a:	4620      	mov	r0, r4
   2446c:	4930      	ldr	r1, [pc, #192]	; (24530 <process_event+0x400>)
   2446e:	4798      	blx	r3
	__asm__ volatile(
   24470:	f04f 0320 	mov.w	r3, #32
   24474:	f3ef 8b11 	mrs	fp, BASEPRI
   24478:	f383 8811 	msr	BASEPRI, r3
   2447c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24480:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   24482:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24486:	f019 fd57 	bl	3df38 <z_spin_lock_valid>
   2448a:	b968      	cbnz	r0, 244a8 <process_event+0x378>
   2448c:	235c      	movs	r3, #92	; 0x5c
   2448e:	4640      	mov	r0, r8
   24490:	4a24      	ldr	r2, [pc, #144]	; (24524 <process_event+0x3f4>)
   24492:	4928      	ldr	r1, [pc, #160]	; (24534 <process_event+0x404>)
   24494:	f01c ff96 	bl	413c4 <printk>
   24498:	4651      	mov	r1, sl
   2449a:	4827      	ldr	r0, [pc, #156]	; (24538 <process_event+0x408>)
   2449c:	f01c ff92 	bl	413c4 <printk>
   244a0:	215c      	movs	r1, #92	; 0x5c
   244a2:	4820      	ldr	r0, [pc, #128]	; (24524 <process_event+0x3f4>)
   244a4:	f01d f9ab 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   244a8:	4650      	mov	r0, sl
   244aa:	f019 fd63 	bl	3df74 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   244ae:	8ba3      	ldrh	r3, [r4, #28]
   244b0:	f023 0308 	bic.w	r3, r3, #8
   244b4:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   244b6:	8ba3      	ldrh	r3, [r4, #28]
   244b8:	06da      	lsls	r2, r3, #27
   244ba:	d52a      	bpl.n	24512 <process_event+0x3e2>
			evt = EVT_COMPLETE;
   244bc:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   244be:	f023 0310 	bic.w	r3, r3, #16
   244c2:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   244c4:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   244c8:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   244cc:	2900      	cmp	r1, #0
   244ce:	f47f ae65 	bne.w	2419c <process_event+0x6c>
out:
   244d2:	e641      	b.n	24158 <process_event+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   244d4:	68a1      	ldr	r1, [r4, #8]
   244d6:	2900      	cmp	r1, #0
   244d8:	d0c3      	beq.n	24462 <process_event+0x332>
	return node->next;
   244da:	680b      	ldr	r3, [r1, #0]
   244dc:	2b00      	cmp	r3, #0
   244de:	bf38      	it	cc
   244e0:	2300      	movcc	r3, #0
   244e2:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   244e4:	684b      	ldr	r3, [r1, #4]
   244e6:	ee18 2a10 	vmov	r2, s16
   244ea:	461e      	mov	r6, r3
   244ec:	4620      	mov	r0, r4
   244ee:	465b      	mov	r3, fp
   244f0:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   244f2:	f1b9 0f00 	cmp.w	r9, #0
   244f6:	d0b4      	beq.n	24462 <process_event+0x332>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   244f8:	4649      	mov	r1, r9
   244fa:	f8d9 3000 	ldr.w	r3, [r9]
   244fe:	e7ed      	b.n	244dc <process_event+0x3ac>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24500:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   24502:	465b      	mov	r3, fp
   24504:	ee18 2a10 	vmov	r2, s16
   24508:	4620      	mov	r0, r4
   2450a:	682d      	ldr	r5, [r5, #0]
   2450c:	f01c ff90 	bl	41430 <notify_one>
   24510:	e7a7      	b.n	24462 <process_event+0x332>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   24512:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   24516:	bf1e      	ittt	ne
   24518:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   2451c:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   2451e:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   24520:	e7d0      	b.n	244c4 <process_event+0x394>
   24522:	bf00      	nop
   24524:	000488fa 	.word	0x000488fa
   24528:	0004894d 	.word	0x0004894d
   2452c:	00048964 	.word	0x00048964
   24530:	0002453d 	.word	0x0002453d
   24534:	00048920 	.word	0x00048920
   24538:	00048935 	.word	0x00048935

0002453c <transition_complete>:
{
   2453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2453e:	4604      	mov	r4, r0
   24540:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   24542:	f100 0614 	add.w	r6, r0, #20
   24546:	f04f 0320 	mov.w	r3, #32
   2454a:	f3ef 8711 	mrs	r7, BASEPRI
   2454e:	f383 8811 	msr	BASEPRI, r3
   24552:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24556:	4630      	mov	r0, r6
   24558:	f019 fcee 	bl	3df38 <z_spin_lock_valid>
   2455c:	b968      	cbnz	r0, 2457a <transition_complete+0x3e>
   2455e:	235c      	movs	r3, #92	; 0x5c
   24560:	4a0b      	ldr	r2, [pc, #44]	; (24590 <transition_complete+0x54>)
   24562:	490c      	ldr	r1, [pc, #48]	; (24594 <transition_complete+0x58>)
   24564:	480c      	ldr	r0, [pc, #48]	; (24598 <transition_complete+0x5c>)
   24566:	f01c ff2d 	bl	413c4 <printk>
   2456a:	4631      	mov	r1, r6
   2456c:	480b      	ldr	r0, [pc, #44]	; (2459c <transition_complete+0x60>)
   2456e:	f01c ff29 	bl	413c4 <printk>
   24572:	215c      	movs	r1, #92	; 0x5c
   24574:	4806      	ldr	r0, [pc, #24]	; (24590 <transition_complete+0x54>)
   24576:	f01d f942 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   2457a:	4630      	mov	r0, r6
   2457c:	f019 fcfa 	bl	3df74 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   24580:	463a      	mov	r2, r7
   24582:	4620      	mov	r0, r4
	mgr->last_res = res;
   24584:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   24586:	2101      	movs	r1, #1
}
   24588:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   2458c:	f7ff bdd0 	b.w	24130 <process_event>
   24590:	000488fa 	.word	0x000488fa
   24594:	00048920 	.word	0x00048920
   24598:	00048156 	.word	0x00048156
   2459c:	00048935 	.word	0x00048935

000245a0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   245a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   245a4:	4604      	mov	r4, r0
   245a6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   245a8:	f01c ff58 	bl	4145c <validate_args>

	if (rv < 0) {
   245ac:	1e05      	subs	r5, r0, #0
   245ae:	db5e      	blt.n	2466e <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   245b0:	f104 0914 	add.w	r9, r4, #20
   245b4:	f04f 0320 	mov.w	r3, #32
   245b8:	f3ef 8a11 	mrs	sl, BASEPRI
   245bc:	f383 8811 	msr	BASEPRI, r3
   245c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245c4:	4648      	mov	r0, r9
   245c6:	f019 fcb7 	bl	3df38 <z_spin_lock_valid>
   245ca:	b968      	cbnz	r0, 245e8 <onoff_request+0x48>
   245cc:	235c      	movs	r3, #92	; 0x5c
   245ce:	4a38      	ldr	r2, [pc, #224]	; (246b0 <onoff_request+0x110>)
   245d0:	4938      	ldr	r1, [pc, #224]	; (246b4 <onoff_request+0x114>)
   245d2:	4839      	ldr	r0, [pc, #228]	; (246b8 <onoff_request+0x118>)
   245d4:	f01c fef6 	bl	413c4 <printk>
   245d8:	4649      	mov	r1, r9
   245da:	4838      	ldr	r0, [pc, #224]	; (246bc <onoff_request+0x11c>)
   245dc:	f01c fef2 	bl	413c4 <printk>
   245e0:	215c      	movs	r1, #92	; 0x5c
   245e2:	4833      	ldr	r0, [pc, #204]	; (246b0 <onoff_request+0x110>)
   245e4:	f01d f90b 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   245e8:	4648      	mov	r0, r9
   245ea:	f019 fcc3 	bl	3df74 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   245ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   245f2:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   245f4:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   245f6:	428b      	cmp	r3, r1
   245f8:	f002 0607 	and.w	r6, r2, #7
   245fc:	d050      	beq.n	246a0 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   245fe:	2e02      	cmp	r6, #2
   24600:	d124      	bne.n	2464c <onoff_request+0xac>
	rv = state;
   24602:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   24604:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   24608:	3301      	adds	r3, #1
   2460a:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2460c:	4648      	mov	r0, r9
   2460e:	f019 fca1 	bl	3df54 <z_spin_unlock_valid>
   24612:	b968      	cbnz	r0, 24630 <onoff_request+0x90>
   24614:	2384      	movs	r3, #132	; 0x84
   24616:	4a26      	ldr	r2, [pc, #152]	; (246b0 <onoff_request+0x110>)
   24618:	4929      	ldr	r1, [pc, #164]	; (246c0 <onoff_request+0x120>)
   2461a:	4827      	ldr	r0, [pc, #156]	; (246b8 <onoff_request+0x118>)
   2461c:	f01c fed2 	bl	413c4 <printk>
   24620:	4649      	mov	r1, r9
   24622:	4828      	ldr	r0, [pc, #160]	; (246c4 <onoff_request+0x124>)
   24624:	f01c fece 	bl	413c4 <printk>
   24628:	2184      	movs	r1, #132	; 0x84
   2462a:	4821      	ldr	r0, [pc, #132]	; (246b0 <onoff_request+0x110>)
   2462c:	f01d f8e7 	bl	417fe <assert_post_action>
	__asm__ volatile(
   24630:	f38a 8811 	msr	BASEPRI, sl
   24634:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   24638:	f1b8 0f00 	cmp.w	r8, #0
   2463c:	d017      	beq.n	2466e <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   2463e:	2300      	movs	r3, #0
   24640:	4632      	mov	r2, r6
   24642:	4639      	mov	r1, r7
   24644:	4620      	mov	r0, r4
   24646:	f01c fef3 	bl	41430 <notify_one>
   2464a:	e010      	b.n	2466e <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   2464c:	0793      	lsls	r3, r2, #30
   2464e:	d001      	beq.n	24654 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   24650:	2e06      	cmp	r6, #6
   24652:	d10f      	bne.n	24674 <onoff_request+0xd4>
	parent->next = child;
   24654:	2300      	movs	r3, #0
   24656:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   24658:	6863      	ldr	r3, [r4, #4]
   2465a:	b9f3      	cbnz	r3, 2469a <onoff_request+0xfa>
	list->head = node;
   2465c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   24660:	4635      	mov	r5, r6
   24662:	b9fe      	cbnz	r6, 246a4 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   24664:	4652      	mov	r2, sl
   24666:	2102      	movs	r1, #2
   24668:	4620      	mov	r0, r4
   2466a:	f7ff fd61 	bl	24130 <process_event>
		}
	}

	return rv;
}
   2466e:	4628      	mov	r0, r5
   24670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   24674:	2e05      	cmp	r6, #5
   24676:	d018      	beq.n	246aa <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   24678:	2e01      	cmp	r6, #1
   2467a:	d00b      	beq.n	24694 <onoff_request+0xf4>
   2467c:	4912      	ldr	r1, [pc, #72]	; (246c8 <onoff_request+0x128>)
   2467e:	480e      	ldr	r0, [pc, #56]	; (246b8 <onoff_request+0x118>)
   24680:	f240 13c5 	movw	r3, #453	; 0x1c5
   24684:	4a11      	ldr	r2, [pc, #68]	; (246cc <onoff_request+0x12c>)
   24686:	f01c fe9d 	bl	413c4 <printk>
   2468a:	f240 11c5 	movw	r1, #453	; 0x1c5
   2468e:	480f      	ldr	r0, [pc, #60]	; (246cc <onoff_request+0x12c>)
   24690:	f01d f8b5 	bl	417fe <assert_post_action>
		rv = -EIO;
   24694:	f06f 0504 	mvn.w	r5, #4
   24698:	e004      	b.n	246a4 <onoff_request+0x104>
	parent->next = child;
   2469a:	601f      	str	r7, [r3, #0]
	list->tail = node;
   2469c:	6067      	str	r7, [r4, #4]
}
   2469e:	e7df      	b.n	24660 <onoff_request+0xc0>
		rv = -EAGAIN;
   246a0:	f06f 050a 	mvn.w	r5, #10
   246a4:	f04f 0800 	mov.w	r8, #0
   246a8:	e7b0      	b.n	2460c <onoff_request+0x6c>
		rv = -ENOTSUP;
   246aa:	f06f 0585 	mvn.w	r5, #133	; 0x85
   246ae:	e7f9      	b.n	246a4 <onoff_request+0x104>
   246b0:	000488fa 	.word	0x000488fa
   246b4:	00048920 	.word	0x00048920
   246b8:	00048156 	.word	0x00048156
   246bc:	00048935 	.word	0x00048935
   246c0:	0004894d 	.word	0x0004894d
   246c4:	00048964 	.word	0x00048964
   246c8:	00048bd5 	.word	0x00048bd5
   246cc:	00048b49 	.word	0x00048b49

000246d0 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   246d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
   246d4:	f240 746c 	movw	r4, #1900	; 0x76c
   246d8:	2500      	movs	r5, #0
	unsigned int m = tm->tm_mon + 1;
   246da:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   246dc:	68c2      	ldr	r2, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   246de:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   246e2:	1e53      	subs	r3, r2, #1
   246e4:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   246e6:	6943      	ldr	r3, [r0, #20]
{
   246e8:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   246ea:	18e4      	adds	r4, r4, r3
   246ec:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   246f0:	f1b9 0f02 	cmp.w	r9, #2
   246f4:	bf8c      	ite	hi
   246f6:	2300      	movhi	r3, #0
   246f8:	2301      	movls	r3, #1
   246fa:	1ae4      	subs	r4, r4, r3
   246fc:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   24700:	2c00      	cmp	r4, #0
   24702:	f175 0300 	sbcs.w	r3, r5, #0
   24706:	da54      	bge.n	247b2 <timeutil_timegm64+0xe2>
   24708:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   2470c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   24710:	2300      	movs	r3, #0
   24712:	1820      	adds	r0, r4, r0
   24714:	f145 31ff 	adc.w	r1, r5, #4294967295
   24718:	f7f8 fb80 	bl	1ce1c <__aeabi_ldivmod>
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2471c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   24720:	4a27      	ldr	r2, [pc, #156]	; (247c0 <timeutil_timegm64+0xf0>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   24722:	4603      	mov	r3, r0
	unsigned int yoe = y - era * 400;
   24724:	fb02 4200 	mla	r2, r2, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   24728:	e9d8 0400 	ldrd	r0, r4, [r8]
   2472c:	f8d8 8008 	ldr.w	r8, [r8, #8]
   24730:	17e5      	asrs	r5, r4, #31
   24732:	fbcc 4508 	smlal	r4, r5, ip, r8
   24736:	fba4 ab0c 	umull	sl, fp, r4, ip
   2473a:	fb0c bb05 	mla	fp, ip, r5, fp
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2473e:	f1b9 0f02 	cmp.w	r9, #2
   24742:	bf8c      	ite	hi
   24744:	f06f 0e02 	mvnhi.w	lr, #2
   24748:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2474c:	eb1a 0a00 	adds.w	sl, sl, r0
   24750:	eb4b 7be0 	adc.w	fp, fp, r0, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24754:	f240 106d 	movw	r0, #365	; 0x16d
   24758:	0894      	lsrs	r4, r2, #2
   2475a:	fb00 4002 	mla	r0, r0, r2, r4
   2475e:	9c01      	ldr	r4, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   24760:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24762:	4420      	add	r0, r4
   24764:	2464      	movs	r4, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   24766:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   2476a:	fbb2 f4f4 	udiv	r4, r2, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2476e:	2205      	movs	r2, #5
   24770:	fb0e fe09 	mul.w	lr, lr, r9
   24774:	f10e 0e02 	add.w	lr, lr, #2
   24778:	fbbe fef2 	udiv	lr, lr, r2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   2477c:	1b04      	subs	r4, r0, r4
	return era * 146097 + (time_t)doe - 719468;
   2477e:	4811      	ldr	r0, [pc, #68]	; (247c4 <timeutil_timegm64+0xf4>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24780:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   24782:	fba3 2300 	umull	r2, r3, r3, r0
   24786:	fb00 3301 	mla	r3, r0, r1, r3
   2478a:	490f      	ldr	r1, [pc, #60]	; (247c8 <timeutil_timegm64+0xf8>)
   2478c:	1856      	adds	r6, r2, r1
	time += 86400LL * ndays;
   2478e:	490f      	ldr	r1, [pc, #60]	; (247cc <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   24790:	f143 37ff 	adc.w	r7, r3, #4294967295
   24794:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   24798:	fba6 2301 	umull	r2, r3, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   2479c:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   247a0:	fb01 3307 	mla	r3, r1, r7, r3

	return time;
}
   247a4:	eb12 000a 	adds.w	r0, r2, sl
   247a8:	eb43 010b 	adc.w	r1, r3, fp
   247ac:	b003      	add	sp, #12
   247ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   247b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   247b6:	2300      	movs	r3, #0
   247b8:	4620      	mov	r0, r4
   247ba:	4629      	mov	r1, r5
   247bc:	e7ac      	b.n	24718 <timeutil_timegm64+0x48>
   247be:	bf00      	nop
   247c0:	fffffe70 	.word	0xfffffe70
   247c4:	00023ab1 	.word	0x00023ab1
   247c8:	fff50594 	.word	0xfff50594
   247cc:	00015180 	.word	0x00015180

000247d0 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   247d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   247d4:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
   247d6:	4e17      	ldr	r6, [pc, #92]	; (24834 <z_work_q_main+0x64>)
   247d8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 2483c <z_work_q_main+0x6c>
   247dc:	f8df 9060 	ldr.w	r9, [pc, #96]	; 24840 <z_work_q_main+0x70>
	return z_impl_k_queue_get(queue, timeout);
   247e0:	f04f 32ff 	mov.w	r2, #4294967295
   247e4:	f04f 33ff 	mov.w	r3, #4294967295
   247e8:	4628      	mov	r0, r5
   247ea:	f017 ffc1 	bl	3c770 <z_impl_k_queue_get>
		if (work == NULL) {
   247ee:	4604      	mov	r4, r0
   247f0:	2800      	cmp	r0, #0
   247f2:	d0f5      	beq.n	247e0 <z_work_q_main+0x10>
		handler = work->handler;
   247f4:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
   247f6:	b967      	cbnz	r7, 24812 <z_work_q_main+0x42>
   247f8:	4641      	mov	r1, r8
   247fa:	231c      	movs	r3, #28
   247fc:	4632      	mov	r2, r6
   247fe:	4648      	mov	r0, r9
   24800:	f01c fde0 	bl	413c4 <printk>
   24804:	480c      	ldr	r0, [pc, #48]	; (24838 <z_work_q_main+0x68>)
   24806:	f01c fddd 	bl	413c4 <printk>
   2480a:	211c      	movs	r1, #28
   2480c:	4630      	mov	r0, r6
   2480e:	f01c fff6 	bl	417fe <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24812:	f104 0308 	add.w	r3, r4, #8
   24816:	e8d3 2fef 	ldaex	r2, [r3]
   2481a:	f022 0101 	bic.w	r1, r2, #1
   2481e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   24822:	2800      	cmp	r0, #0
   24824:	d1f7      	bne.n	24816 <z_work_q_main+0x46>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   24826:	07d3      	lsls	r3, r2, #31
   24828:	d501      	bpl.n	2482e <z_work_q_main+0x5e>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2482a:	4620      	mov	r0, r4
   2482c:	47b8      	blx	r7
	z_impl_k_yield();
   2482e:	f018 ffdf 	bl	3d7f0 <z_impl_k_yield>
   24832:	e7d5      	b.n	247e0 <z_work_q_main+0x10>
   24834:	00048beb 	.word	0x00048beb
   24838:	00048c25 	.word	0x00048c25
   2483c:	00048c0e 	.word	0x00048c0e
   24840:	00048156 	.word	0x00048156

00024844 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   24844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   24846:	460e      	mov	r6, r1
   24848:	2900      	cmp	r1, #0
   2484a:	f000 8083 	beq.w	24954 <sys_heap_free+0x110>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   2484e:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24850:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   24852:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24854:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   24856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2485a:	bf2c      	ite	cs
   2485c:	2408      	movcs	r4, #8
   2485e:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   24860:	1b0c      	subs	r4, r1, r4
   24862:	1b64      	subs	r4, r4, r5
   24864:	bf48      	it	mi
   24866:	3407      	addmi	r4, #7
   24868:	10e4      	asrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   2486a:	4621      	mov	r1, r4
   2486c:	f01c fe36 	bl	414dc <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   24870:	07c3      	lsls	r3, r0, #31
   24872:	d40d      	bmi.n	24890 <sys_heap_free+0x4c>
   24874:	2399      	movs	r3, #153	; 0x99
   24876:	4a38      	ldr	r2, [pc, #224]	; (24958 <sys_heap_free+0x114>)
   24878:	4938      	ldr	r1, [pc, #224]	; (2495c <sys_heap_free+0x118>)
   2487a:	4839      	ldr	r0, [pc, #228]	; (24960 <sys_heap_free+0x11c>)
   2487c:	f01c fda2 	bl	413c4 <printk>
   24880:	4631      	mov	r1, r6
   24882:	4838      	ldr	r0, [pc, #224]	; (24964 <sys_heap_free+0x120>)
   24884:	f01c fd9e 	bl	413c4 <printk>
   24888:	2199      	movs	r1, #153	; 0x99
   2488a:	4833      	ldr	r0, [pc, #204]	; (24958 <sys_heap_free+0x114>)
   2488c:	f01c ffb7 	bl	417fe <assert_post_action>
	return c + chunk_size(h, c);
   24890:	4621      	mov	r1, r4
   24892:	4628      	mov	r0, r5
   24894:	f01c fe38 	bl	41508 <chunk_size>
   24898:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   2489a:	2200      	movs	r2, #0
   2489c:	4639      	mov	r1, r7
   2489e:	4628      	mov	r0, r5
   248a0:	f01c fe1c 	bl	414dc <chunk_field>
   248a4:	1a38      	subs	r0, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   248a6:	4284      	cmp	r4, r0
   248a8:	d00d      	beq.n	248c6 <sys_heap_free+0x82>
   248aa:	23a1      	movs	r3, #161	; 0xa1
   248ac:	4a2a      	ldr	r2, [pc, #168]	; (24958 <sys_heap_free+0x114>)
   248ae:	492e      	ldr	r1, [pc, #184]	; (24968 <sys_heap_free+0x124>)
   248b0:	482b      	ldr	r0, [pc, #172]	; (24960 <sys_heap_free+0x11c>)
   248b2:	f01c fd87 	bl	413c4 <printk>
   248b6:	4631      	mov	r1, r6
   248b8:	482c      	ldr	r0, [pc, #176]	; (2496c <sys_heap_free+0x128>)
   248ba:	f01c fd83 	bl	413c4 <printk>
   248be:	21a1      	movs	r1, #161	; 0xa1
   248c0:	4825      	ldr	r0, [pc, #148]	; (24958 <sys_heap_free+0x114>)
   248c2:	f01c ff9c 	bl	417fe <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   248c6:	2200      	movs	r2, #0
   248c8:	4621      	mov	r1, r4
   248ca:	4628      	mov	r0, r5
   248cc:	f01c fe22 	bl	41514 <set_chunk_used>
	return c + chunk_size(h, c);
   248d0:	4621      	mov	r1, r4
   248d2:	f01c fe19 	bl	41508 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   248d6:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   248d8:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   248da:	4628      	mov	r0, r5
   248dc:	9101      	str	r1, [sp, #4]
   248de:	f01c fdfd 	bl	414dc <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   248e2:	f010 0f01 	tst.w	r0, #1
   248e6:	9901      	ldr	r1, [sp, #4]
   248e8:	d10b      	bne.n	24902 <sys_heap_free+0xbe>
		free_list_remove(h, right_chunk(h, c));
   248ea:	4628      	mov	r0, r5
   248ec:	f01c feb9 	bl	41662 <free_list_remove>
	return c + chunk_size(h, c);
   248f0:	4621      	mov	r1, r4
   248f2:	4628      	mov	r0, r5
   248f4:	f01c fe08 	bl	41508 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   248f8:	4621      	mov	r1, r4
   248fa:	1822      	adds	r2, r4, r0
   248fc:	4628      	mov	r0, r5
   248fe:	f01c fe3b 	bl	41578 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   24902:	2200      	movs	r2, #0
   24904:	4621      	mov	r1, r4
   24906:	4628      	mov	r0, r5
   24908:	f01c fde8 	bl	414dc <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   2490c:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   2490e:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24910:	4628      	mov	r0, r5
   24912:	9101      	str	r1, [sp, #4]
   24914:	f01c fde2 	bl	414dc <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   24918:	f010 0601 	ands.w	r6, r0, #1
   2491c:	9901      	ldr	r1, [sp, #4]
   2491e:	d112      	bne.n	24946 <sys_heap_free+0x102>
		free_list_remove(h, left_chunk(h, c));
   24920:	4628      	mov	r0, r5
   24922:	f01c fe9e 	bl	41662 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   24926:	4621      	mov	r1, r4
   24928:	4632      	mov	r2, r6
   2492a:	4628      	mov	r0, r5
   2492c:	f01c fdd6 	bl	414dc <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   24930:	4622      	mov	r2, r4
   24932:	1a21      	subs	r1, r4, r0
   24934:	4628      	mov	r0, r5
   24936:	f01c fe1f 	bl	41578 <merge_chunks>
   2493a:	4621      	mov	r1, r4
   2493c:	4632      	mov	r2, r6
   2493e:	4628      	mov	r0, r5
   24940:	f01c fdcc 	bl	414dc <chunk_field>
   24944:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   24946:	4621      	mov	r1, r4
   24948:	4628      	mov	r0, r5
	free_chunk(h, c);
}
   2494a:	b003      	add	sp, #12
   2494c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	free_list_add(h, c);
   24950:	f01c bee1 	b.w	41716 <free_list_add>
}
   24954:	b003      	add	sp, #12
   24956:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24958:	00048c40 	.word	0x00048c40
   2495c:	00048c61 	.word	0x00048c61
   24960:	00048156 	.word	0x00048156
   24964:	00048c72 	.word	0x00048c72
   24968:	00048caa 	.word	0x00048caa
   2496c:	00048cd0 	.word	0x00048cd0

00024970 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   24970:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   24974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24976:	4607      	mov	r7, r0
   24978:	460d      	mov	r5, r1
   2497a:	4616      	mov	r6, r2
   2497c:	d212      	bcs.n	249a4 <sys_heap_init+0x34>
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   2497e:	2a04      	cmp	r2, #4
   24980:	d80e      	bhi.n	249a0 <sys_heap_init+0x30>
   24982:	4943      	ldr	r1, [pc, #268]	; (24a90 <sys_heap_init+0x120>)
   24984:	f44f 7397 	mov.w	r3, #302	; 0x12e
   24988:	4a42      	ldr	r2, [pc, #264]	; (24a94 <sys_heap_init+0x124>)
   2498a:	4843      	ldr	r0, [pc, #268]	; (24a98 <sys_heap_init+0x128>)
   2498c:	f01c fd1a 	bl	413c4 <printk>
   24990:	4842      	ldr	r0, [pc, #264]	; (24a9c <sys_heap_init+0x12c>)
   24992:	f01c fd17 	bl	413c4 <printk>
   24996:	f44f 7197 	mov.w	r1, #302	; 0x12e
   2499a:	483e      	ldr	r0, [pc, #248]	; (24a94 <sys_heap_init+0x124>)
   2499c:	f01c ff2f 	bl	417fe <assert_post_action>
   249a0:	2204      	movs	r2, #4
   249a2:	e000      	b.n	249a6 <sys_heap_init+0x36>
   249a4:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   249a6:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   249a8:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   249aa:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   249ac:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   249b0:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   249b4:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   249b6:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   249b8:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   249bc:	d80e      	bhi.n	249dc <sys_heap_init+0x6c>
   249be:	4938      	ldr	r1, [pc, #224]	; (24aa0 <sys_heap_init+0x130>)
   249c0:	f240 1337 	movw	r3, #311	; 0x137
   249c4:	4a33      	ldr	r2, [pc, #204]	; (24a94 <sys_heap_init+0x124>)
   249c6:	4834      	ldr	r0, [pc, #208]	; (24a98 <sys_heap_init+0x128>)
   249c8:	f01c fcfc 	bl	413c4 <printk>
   249cc:	4833      	ldr	r0, [pc, #204]	; (24a9c <sys_heap_init+0x12c>)
   249ce:	f01c fcf9 	bl	413c4 <printk>
   249d2:	f240 1137 	movw	r1, #311	; 0x137
   249d6:	482f      	ldr	r0, [pc, #188]	; (24a94 <sys_heap_init+0x124>)
   249d8:	f01c ff11 	bl	417fe <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   249dc:	2200      	movs	r2, #0
   249de:	2300      	movs	r3, #0
	heap->heap = h;
   249e0:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
   249e2:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   249e6:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   249e8:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   249ea:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   249ec:	4620      	mov	r0, r4
	h->len = buf_sz;
   249ee:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   249f0:	f01c fdb6 	bl	41560 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   249f4:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   249f6:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   249f8:	1c47      	adds	r7, r0, #1
   249fa:	4620      	mov	r0, r4
   249fc:	f01c fda6 	bl	4154c <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   24a00:	351b      	adds	r5, #27
   24a02:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
   24a04:	4428      	add	r0, r5
   24a06:	42b0      	cmp	r0, r6
   24a08:	d30e      	bcc.n	24a28 <sys_heap_init+0xb8>
   24a0a:	4926      	ldr	r1, [pc, #152]	; (24aa4 <sys_heap_init+0x134>)
   24a0c:	f240 1343 	movw	r3, #323	; 0x143
   24a10:	4a20      	ldr	r2, [pc, #128]	; (24a94 <sys_heap_init+0x124>)
   24a12:	4821      	ldr	r0, [pc, #132]	; (24a98 <sys_heap_init+0x128>)
   24a14:	f01c fcd6 	bl	413c4 <printk>
   24a18:	4820      	ldr	r0, [pc, #128]	; (24a9c <sys_heap_init+0x12c>)
   24a1a:	f01c fcd3 	bl	413c4 <printk>
   24a1e:	f240 1143 	movw	r1, #323	; 0x143
   24a22:	481c      	ldr	r0, [pc, #112]	; (24a94 <sys_heap_init+0x124>)
   24a24:	f01c feeb 	bl	417fe <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   24a28:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   24a2a:	4619      	mov	r1, r3
   24a2c:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   24a30:	42bb      	cmp	r3, r7
   24a32:	db29      	blt.n	24a88 <sys_heap_init+0x118>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   24a34:	462a      	mov	r2, r5
   24a36:	4620      	mov	r0, r4
   24a38:	2100      	movs	r1, #0
   24a3a:	f01c fd83 	bl	41544 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   24a3e:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   24a40:	4620      	mov	r0, r4
   24a42:	2201      	movs	r2, #1
   24a44:	2100      	movs	r1, #0
   24a46:	f01c fd65 	bl	41514 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   24a4a:	463a      	mov	r2, r7
   24a4c:	4629      	mov	r1, r5
   24a4e:	f01c fd79 	bl	41544 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   24a52:	462b      	mov	r3, r5
   24a54:	4629      	mov	r1, r5
   24a56:	4620      	mov	r0, r4
   24a58:	2200      	movs	r2, #0
   24a5a:	f01c fd4a 	bl	414f2 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   24a5e:	4631      	mov	r1, r6
   24a60:	4620      	mov	r0, r4
   24a62:	2200      	movs	r2, #0
   24a64:	f01c fd6e 	bl	41544 <set_chunk_size>
   24a68:	463b      	mov	r3, r7
   24a6a:	4631      	mov	r1, r6
   24a6c:	4620      	mov	r0, r4
   24a6e:	2200      	movs	r2, #0
   24a70:	f01c fd3f 	bl	414f2 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   24a74:	4631      	mov	r1, r6
   24a76:	4620      	mov	r0, r4
   24a78:	2201      	movs	r2, #1
   24a7a:	f01c fd4b 	bl	41514 <set_chunk_used>

	free_list_add(h, chunk0_size);
   24a7e:	4629      	mov	r1, r5
}
   24a80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   24a84:	f01c be47 	b.w	41716 <free_list_add>
		h->buckets[i].next = 0;
   24a88:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   24a8c:	3301      	adds	r3, #1
   24a8e:	e7cf      	b.n	24a30 <sys_heap_init+0xc0>
   24a90:	00048d0c 	.word	0x00048d0c
   24a94:	00048c40 	.word	0x00048c40
   24a98:	00048156 	.word	0x00048156
   24a9c:	00048d2d 	.word	0x00048d2d
   24aa0:	00048d46 	.word	0x00048d46
   24aa4:	00048d6e 	.word	0x00048d6e

00024aa8 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   24aa8:	f04f 0220 	mov.w	r2, #32
   24aac:	f3ef 8311 	mrs	r3, BASEPRI
   24ab0:	f382 8811 	msr	BASEPRI, r2
   24ab4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   24ab8:	2101      	movs	r1, #1
   24aba:	4a04      	ldr	r2, [pc, #16]	; (24acc <nordicsemi_nrf91_init+0x24>)
   24abc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   24ac0:	f383 8811 	msr	BASEPRI, r3
   24ac4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   24ac8:	2000      	movs	r0, #0
   24aca:	4770      	bx	lr
   24acc:	40039000 	.word	0x40039000

00024ad0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   24ad0:	b120      	cbz	r0, 24adc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   24ad2:	4b03      	ldr	r3, [pc, #12]	; (24ae0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   24ad4:	0180      	lsls	r0, r0, #6
   24ad6:	f043 0301 	orr.w	r3, r3, #1
   24ada:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   24adc:	4770      	bx	lr
   24ade:	bf00      	nop
   24ae0:	000465b0 	.word	0x000465b0

00024ae4 <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
   24ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
   24ae8:	4b12      	ldr	r3, [pc, #72]	; (24b34 <log_generic+0x50>)
{
   24aea:	b085      	sub	sp, #20
		uint32_t timestamp = timestamp_func();
   24aec:	681b      	ldr	r3, [r3, #0]
{
   24aee:	4680      	mov	r8, r0
   24af0:	4689      	mov	r9, r1
   24af2:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
   24af4:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   24af6:	2600      	movs	r6, #0
		uint32_t timestamp = timestamp_func();
   24af8:	4682      	mov	sl, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   24afa:	4c0f      	ldr	r4, [pc, #60]	; (24b38 <log_generic+0x54>)
   24afc:	4d0f      	ldr	r5, [pc, #60]	; (24b3c <log_generic+0x58>)
   24afe:	1b2d      	subs	r5, r5, r4
   24b00:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   24b02:	42b5      	cmp	r5, r6
   24b04:	dc02      	bgt.n	24b0c <log_generic+0x28>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
   24b06:	b005      	add	sp, #20
   24b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend)) {
   24b0c:	4620      	mov	r0, r4
   24b0e:	f01c fe80 	bl	41812 <log_backend_is_active>
   24b12:	b160      	cbz	r0, 24b2e <log_generic+0x4a>
	if (backend->api->put_sync_string) {
   24b14:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
   24b16:	9703      	str	r7, [sp, #12]
   24b18:	f8d3 b004 	ldr.w	fp, [r3, #4]
   24b1c:	f1bb 0f00 	cmp.w	fp, #0
   24b20:	d005      	beq.n	24b2e <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
   24b22:	464b      	mov	r3, r9
   24b24:	4652      	mov	r2, sl
   24b26:	4641      	mov	r1, r8
   24b28:	4620      	mov	r0, r4
   24b2a:	9700      	str	r7, [sp, #0]
   24b2c:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   24b2e:	3601      	adds	r6, #1
   24b30:	3410      	adds	r4, #16
   24b32:	e7e6      	b.n	24b02 <log_generic+0x1e>
   24b34:	20020648 	.word	0x20020648
   24b38:	00046514 	.word	0x00046514
   24b3c:	00046524 	.word	0x00046524

00024b40 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   24b40:	4b03      	ldr	r3, [pc, #12]	; (24b50 <log_core_init+0x10>)
   24b42:	4a04      	ldr	r2, [pc, #16]	; (24b54 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   24b44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   24b48:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   24b4a:	f000 ba39 	b.w	24fc0 <log_output_timestamp_freq_set>
   24b4e:	bf00      	nop
   24b50:	20020648 	.word	0x20020648
   24b54:	00041819 	.word	0x00041819

00024b58 <log_source_name_get>:
   24b58:	4a04      	ldr	r2, [pc, #16]	; (24b6c <log_source_name_get+0x14>)
   24b5a:	4b05      	ldr	r3, [pc, #20]	; (24b70 <log_source_name_get+0x18>)
   24b5c:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   24b5e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   24b62:	bf34      	ite	cc
   24b64:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   24b68:	2000      	movcs	r0, #0
}
   24b6a:	4770      	bx	lr
   24b6c:	000463bc 	.word	0x000463bc
   24b70:	00046514 	.word	0x00046514

00024b74 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   24b74:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   24b76:	4c10      	ldr	r4, [pc, #64]	; (24bb8 <log_backend_enable+0x44>)
{
   24b78:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   24b7a:	1b04      	subs	r4, r0, r4
   24b7c:	1124      	asrs	r4, r4, #4
   24b7e:	3401      	adds	r4, #1
{
   24b80:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   24b82:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   24b84:	b948      	cbnz	r0, 24b9a <log_backend_enable+0x26>
   24b86:	490d      	ldr	r1, [pc, #52]	; (24bbc <log_backend_enable+0x48>)
   24b88:	480d      	ldr	r0, [pc, #52]	; (24bc0 <log_backend_enable+0x4c>)
   24b8a:	23c0      	movs	r3, #192	; 0xc0
   24b8c:	4a0d      	ldr	r2, [pc, #52]	; (24bc4 <log_backend_enable+0x50>)
   24b8e:	f01c fc19 	bl	413c4 <printk>
   24b92:	21c0      	movs	r1, #192	; 0xc0
   24b94:	480b      	ldr	r0, [pc, #44]	; (24bc4 <log_backend_enable+0x50>)
   24b96:	f01c fe32 	bl	417fe <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   24b9a:	2201      	movs	r2, #1
	backend->cb->id = id;
   24b9c:	686b      	ldr	r3, [r5, #4]
   24b9e:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   24ba0:	4c09      	ldr	r4, [pc, #36]	; (24bc8 <log_backend_enable+0x54>)
	backend->cb->active = true;
   24ba2:	715a      	strb	r2, [r3, #5]
   24ba4:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   24ba6:	601e      	str	r6, [r3, #0]
   24ba8:	b912      	cbnz	r2, 24bb0 <log_backend_enable+0x3c>
	z_impl_k_sem_give(sem);
   24baa:	4808      	ldr	r0, [pc, #32]	; (24bcc <log_backend_enable+0x58>)
   24bac:	f018 ffa4 	bl	3daf8 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   24bb0:	2301      	movs	r3, #1
   24bb2:	7023      	strb	r3, [r4, #0]
}
   24bb4:	bd70      	pop	{r4, r5, r6, pc}
   24bb6:	bf00      	nop
   24bb8:	00046514 	.word	0x00046514
   24bbc:	0004813f 	.word	0x0004813f
   24bc0:	00048156 	.word	0x00048156
   24bc4:	00048de0 	.word	0x00048de0
   24bc8:	2002b0d9 	.word	0x2002b0d9
   24bcc:	20020c60 	.word	0x20020c60

00024bd0 <log_init>:
{
   24bd0:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   24bd2:	4b14      	ldr	r3, [pc, #80]	; (24c24 <log_init+0x54>)
   24bd4:	4c14      	ldr	r4, [pc, #80]	; (24c28 <log_init+0x58>)
   24bd6:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   24bd8:	2b9f      	cmp	r3, #159	; 0x9f
   24bda:	ea4f 1623 	mov.w	r6, r3, asr #4
   24bde:	d906      	bls.n	24bee <log_init+0x1e>
   24be0:	f240 210b 	movw	r1, #523	; 0x20b
   24be4:	4b11      	ldr	r3, [pc, #68]	; (24c2c <log_init+0x5c>)
   24be6:	4a12      	ldr	r2, [pc, #72]	; (24c30 <log_init+0x60>)
   24be8:	4812      	ldr	r0, [pc, #72]	; (24c34 <log_init+0x64>)
   24bea:	f01a f9e9 	bl	3efc0 <__assert_func>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24bee:	4b12      	ldr	r3, [pc, #72]	; (24c38 <log_init+0x68>)
   24bf0:	e8d3 5fef 	ldaex	r5, [r3]
   24bf4:	1c6a      	adds	r2, r5, #1
   24bf6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24bfa:	2900      	cmp	r1, #0
   24bfc:	d1f8      	bne.n	24bf0 <log_init+0x20>
	if (atomic_inc(&initialized) != 0) {
   24bfe:	b90d      	cbnz	r5, 24c04 <log_init+0x34>
	for (i = 0; i < log_backend_count_get(); i++) {
   24c00:	42b5      	cmp	r5, r6
   24c02:	d100      	bne.n	24c06 <log_init+0x36>
}
   24c04:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   24c06:	7b23      	ldrb	r3, [r4, #12]
   24c08:	b143      	cbz	r3, 24c1c <log_init+0x4c>
			if (backend->api->init != NULL) {
   24c0a:	6823      	ldr	r3, [r4, #0]
   24c0c:	695b      	ldr	r3, [r3, #20]
   24c0e:	b103      	cbz	r3, 24c12 <log_init+0x42>
				backend->api->init();
   24c10:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   24c12:	2204      	movs	r2, #4
   24c14:	2100      	movs	r1, #0
   24c16:	4620      	mov	r0, r4
   24c18:	f7ff ffac 	bl	24b74 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   24c1c:	3501      	adds	r5, #1
   24c1e:	3410      	adds	r4, #16
   24c20:	e7ee      	b.n	24c00 <log_init+0x30>
   24c22:	bf00      	nop
   24c24:	00046524 	.word	0x00046524
   24c28:	00046514 	.word	0x00046514
   24c2c:	00048e11 	.word	0x00048e11
   24c30:	00048e48 	.word	0x00048e48
   24c34:	00048d9b 	.word	0x00048d9b
   24c38:	200246b4 	.word	0x200246b4

00024c3c <z_impl_log_panic>:
{
   24c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   24c3e:	4f0c      	ldr	r7, [pc, #48]	; (24c70 <z_impl_log_panic+0x34>)
   24c40:	783d      	ldrb	r5, [r7, #0]
   24c42:	b94d      	cbnz	r5, 24c58 <z_impl_log_panic+0x1c>
	log_init();
   24c44:	f7ff ffc4 	bl	24bd0 <log_init>
   24c48:	4c0a      	ldr	r4, [pc, #40]	; (24c74 <z_impl_log_panic+0x38>)
   24c4a:	4e0b      	ldr	r6, [pc, #44]	; (24c78 <z_impl_log_panic+0x3c>)
   24c4c:	1b36      	subs	r6, r6, r4
   24c4e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   24c50:	42b5      	cmp	r5, r6
   24c52:	db02      	blt.n	24c5a <z_impl_log_panic+0x1e>
	panic_mode = true;
   24c54:	2301      	movs	r3, #1
   24c56:	703b      	strb	r3, [r7, #0]
}
   24c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   24c5a:	4620      	mov	r0, r4
   24c5c:	f01c fdd9 	bl	41812 <log_backend_is_active>
   24c60:	b118      	cbz	r0, 24c6a <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   24c62:	6823      	ldr	r3, [r4, #0]
   24c64:	4620      	mov	r0, r4
   24c66:	691b      	ldr	r3, [r3, #16]
   24c68:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   24c6a:	3501      	adds	r5, #1
   24c6c:	3410      	adds	r4, #16
   24c6e:	e7ef      	b.n	24c50 <z_impl_log_panic+0x14>
   24c70:	2002b0da 	.word	0x2002b0da
   24c74:	00046514 	.word	0x00046514
   24c78:	00046524 	.word	0x00046524

00024c7c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   24c7c:	b40e      	push	{r1, r2, r3}
   24c7e:	b503      	push	{r0, r1, lr}
   24c80:	ab03      	add	r3, sp, #12
   24c82:	f853 2b04 	ldr.w	r2, [r3], #4
   24c86:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   24c88:	4804      	ldr	r0, [pc, #16]	; (24c9c <print_formatted+0x20>)
	va_start(args, fmt);
   24c8a:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   24c8c:	f7ff f900 	bl	23e90 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   24c90:	2000      	movs	r0, #0
   24c92:	b002      	add	sp, #8
   24c94:	f85d eb04 	ldr.w	lr, [sp], #4
   24c98:	b003      	add	sp, #12
   24c9a:	4770      	bx	lr
   24c9c:	00041849 	.word	0x00041849

00024ca0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   24ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   24ca4:	f011 0402 	ands.w	r4, r1, #2
{
   24ca8:	b085      	sub	sp, #20
   24caa:	4606      	mov	r6, r0
   24cac:	4690      	mov	r8, r2
   24cae:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   24cb2:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   24cb6:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   24cba:	d007      	beq.n	24ccc <prefix_print+0x2c>
	if (!format) {
   24cbc:	f011 0f44 	tst.w	r1, #68	; 0x44
   24cc0:	d137      	bne.n	24d32 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   24cc2:	461a      	mov	r2, r3
   24cc4:	4932      	ldr	r1, [pc, #200]	; (24d90 <prefix_print+0xf0>)
   24cc6:	f7ff ffd9 	bl	24c7c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   24cca:	4604      	mov	r4, r0
	if (color) {
   24ccc:	f1b9 0f00 	cmp.w	r9, #0
   24cd0:	d00a      	beq.n	24ce8 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   24cd2:	4b30      	ldr	r3, [pc, #192]	; (24d94 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   24cd4:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   24cd6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   24cda:	4b2f      	ldr	r3, [pc, #188]	; (24d98 <prefix_print+0xf8>)
   24cdc:	492f      	ldr	r1, [pc, #188]	; (24d9c <prefix_print+0xfc>)
   24cde:	2a00      	cmp	r2, #0
   24ce0:	bf08      	it	eq
   24ce2:	461a      	moveq	r2, r3
   24ce4:	f7ff ffca 	bl	24c7c <print_formatted>
	if (level_on) {
   24ce8:	b13d      	cbz	r5, 24cfa <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   24cea:	4b2d      	ldr	r3, [pc, #180]	; (24da0 <prefix_print+0x100>)
   24cec:	4630      	mov	r0, r6
   24cee:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   24cf2:	492c      	ldr	r1, [pc, #176]	; (24da4 <prefix_print+0x104>)
   24cf4:	f7ff ffc2 	bl	24c7c <print_formatted>
   24cf8:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   24cfa:	f1b8 0f00 	cmp.w	r8, #0
   24cfe:	d044      	beq.n	24d8a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   24d00:	2301      	movs	r3, #1
   24d02:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   24d06:	4b28      	ldr	r3, [pc, #160]	; (24da8 <prefix_print+0x108>)
   24d08:	f017 0f10 	tst.w	r7, #16
   24d0c:	4f27      	ldr	r7, [pc, #156]	; (24dac <prefix_print+0x10c>)
   24d0e:	bf18      	it	ne
   24d10:	461f      	movne	r7, r3
   24d12:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   24d16:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   24d1a:	f7ff ff1d 	bl	24b58 <log_source_name_get>
   24d1e:	4639      	mov	r1, r7
   24d20:	4602      	mov	r2, r0
   24d22:	4630      	mov	r0, r6
   24d24:	f7ff ffaa 	bl	24c7c <print_formatted>
   24d28:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   24d2a:	4420      	add	r0, r4
   24d2c:	b005      	add	sp, #20
   24d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   24d32:	4a1f      	ldr	r2, [pc, #124]	; (24db0 <prefix_print+0x110>)
   24d34:	6811      	ldr	r1, [r2, #0]
   24d36:	b331      	cbz	r1, 24d86 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   24d38:	4a1e      	ldr	r2, [pc, #120]	; (24db4 <prefix_print+0x114>)
   24d3a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   24d3e:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   24d40:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   24d44:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   24d48:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   24d4c:	fbb4 f2fe 	udiv	r2, r4, lr
   24d50:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   24d54:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   24d58:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24d5c:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   24d60:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24d64:	fb01 441b 	mls	r4, r1, fp, r4
   24d68:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   24d6c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24d70:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   24d74:	e9cd b101 	strd	fp, r1, [sp, #4]
   24d78:	fb0a e113 	mls	r1, sl, r3, lr
   24d7c:	9100      	str	r1, [sp, #0]
   24d7e:	490e      	ldr	r1, [pc, #56]	; (24db8 <prefix_print+0x118>)
   24d80:	f7ff ff7c 	bl	24c7c <print_formatted>
   24d84:	e7a1      	b.n	24cca <prefix_print+0x2a>
		length = 0;
   24d86:	4608      	mov	r0, r1
   24d88:	e79f      	b.n	24cca <prefix_print+0x2a>
	total += print_formatted(log_output,
   24d8a:	4f08      	ldr	r7, [pc, #32]	; (24dac <prefix_print+0x10c>)
   24d8c:	e7c1      	b.n	24d12 <prefix_print+0x72>
   24d8e:	bf00      	nop
   24d90:	00048e5f 	.word	0x00048e5f
   24d94:	000467cc 	.word	0x000467cc
   24d98:	00048e51 	.word	0x00048e51
   24d9c:	0004e84f 	.word	0x0004e84f
   24da0:	000467e0 	.word	0x000467e0
   24da4:	00048e84 	.word	0x00048e84
   24da8:	00048e5b 	.word	0x00048e5b
   24dac:	00048e56 	.word	0x00048e56
   24db0:	200246b8 	.word	0x200246b8
   24db4:	200246bc 	.word	0x200246bc
   24db8:	00048e68 	.word	0x00048e68

00024dbc <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   24dbc:	b538      	push	{r3, r4, r5, lr}
   24dbe:	460c      	mov	r4, r1
	if (color) {
   24dc0:	07e1      	lsls	r1, r4, #31
{
   24dc2:	4605      	mov	r5, r0
	if (color) {
   24dc4:	d503      	bpl.n	24dce <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   24dc6:	4a08      	ldr	r2, [pc, #32]	; (24de8 <postfix_print+0x2c>)
   24dc8:	4908      	ldr	r1, [pc, #32]	; (24dec <postfix_print+0x30>)
   24dca:	f7ff ff57 	bl	24c7c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   24dce:	06e2      	lsls	r2, r4, #27
   24dd0:	d408      	bmi.n	24de4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   24dd2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   24dd4:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   24dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   24dda:	bf4c      	ite	mi
   24ddc:	4904      	ldrmi	r1, [pc, #16]	; (24df0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   24dde:	4905      	ldrpl	r1, [pc, #20]	; (24df4 <postfix_print+0x38>)
   24de0:	f7ff bf4c 	b.w	24c7c <print_formatted>
}
   24de4:	bd38      	pop	{r3, r4, r5, pc}
   24de6:	bf00      	nop
   24de8:	00048e51 	.word	0x00048e51
   24dec:	0004e84f 	.word	0x0004e84f
   24df0:	00049047 	.word	0x00049047
   24df4:	0004d31b 	.word	0x0004d31b

00024df8 <hexdump_line_print>:
{
   24df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24dfc:	461d      	mov	r5, r3
   24dfe:	9b08      	ldr	r3, [sp, #32]
   24e00:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   24e02:	06da      	lsls	r2, r3, #27
{
   24e04:	4604      	mov	r4, r0
   24e06:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   24e08:	d405      	bmi.n	24e16 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   24e0a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   24e0c:	bf4c      	ite	mi
   24e0e:	492b      	ldrmi	r1, [pc, #172]	; (24ebc <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   24e10:	492b      	ldrpl	r1, [pc, #172]	; (24ec0 <hexdump_line_print+0xc8>)
   24e12:	f7ff ff33 	bl	24c7c <print_formatted>
{
   24e16:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   24e1a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 24ec8 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   24e1e:	45a8      	cmp	r8, r5
   24e20:	db2d      	blt.n	24e7e <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   24e22:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   24e24:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 24ecc <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   24e28:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 24ed0 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   24e2c:	f8df a098 	ldr.w	sl, [pc, #152]	; 24ec8 <hexdump_line_print+0xd0>
		if (i < length) {
   24e30:	42bd      	cmp	r5, r7
   24e32:	d232      	bcs.n	24e9a <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   24e34:	4649      	mov	r1, r9
   24e36:	4620      	mov	r0, r4
   24e38:	5d72      	ldrb	r2, [r6, r5]
   24e3a:	f7ff ff1f 	bl	24c7c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   24e3e:	3501      	adds	r5, #1
   24e40:	2d10      	cmp	r5, #16
   24e42:	d123      	bne.n	24e8c <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   24e44:	4620      	mov	r0, r4
   24e46:	491f      	ldr	r1, [pc, #124]	; (24ec4 <hexdump_line_print+0xcc>)
   24e48:	f7ff ff18 	bl	24c7c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   24e4c:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   24e4e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 24ec8 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   24e52:	f8df 9080 	ldr.w	r9, [pc, #128]	; 24ed4 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   24e56:	f8df a080 	ldr.w	sl, [pc, #128]	; 24ed8 <hexdump_line_print+0xe0>
		if (i < length) {
   24e5a:	42af      	cmp	r7, r5
   24e5c:	d929      	bls.n	24eb2 <hexdump_line_print+0xba>
			char c = (char)data[i];
   24e5e:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   24e60:	4651      	mov	r1, sl
   24e62:	f812 3009 	ldrb.w	r3, [r2, r9]
   24e66:	4620      	mov	r0, r4
   24e68:	f013 0f97 	tst.w	r3, #151	; 0x97
   24e6c:	bf08      	it	eq
   24e6e:	222e      	moveq	r2, #46	; 0x2e
   24e70:	f7ff ff04 	bl	24c7c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   24e74:	3501      	adds	r5, #1
   24e76:	2d10      	cmp	r5, #16
   24e78:	d114      	bne.n	24ea4 <hexdump_line_print+0xac>
}
   24e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   24e7e:	4649      	mov	r1, r9
   24e80:	4620      	mov	r0, r4
   24e82:	f7ff fefb 	bl	24c7c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   24e86:	f108 0801 	add.w	r8, r8, #1
   24e8a:	e7c8      	b.n	24e1e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   24e8c:	076a      	lsls	r2, r5, #29
   24e8e:	d1cf      	bne.n	24e30 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   24e90:	4651      	mov	r1, sl
   24e92:	4620      	mov	r0, r4
   24e94:	f7ff fef2 	bl	24c7c <print_formatted>
   24e98:	e7ca      	b.n	24e30 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   24e9a:	4641      	mov	r1, r8
   24e9c:	4620      	mov	r0, r4
   24e9e:	f7ff feed 	bl	24c7c <print_formatted>
   24ea2:	e7cc      	b.n	24e3e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   24ea4:	076b      	lsls	r3, r5, #29
   24ea6:	d1d8      	bne.n	24e5a <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   24ea8:	4641      	mov	r1, r8
   24eaa:	4620      	mov	r0, r4
   24eac:	f7ff fee6 	bl	24c7c <print_formatted>
   24eb0:	e7d3      	b.n	24e5a <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   24eb2:	4641      	mov	r1, r8
   24eb4:	4620      	mov	r0, r4
   24eb6:	f7ff fee1 	bl	24c7c <print_formatted>
   24eba:	e7db      	b.n	24e74 <hexdump_line_print+0x7c>
   24ebc:	00049047 	.word	0x00049047
   24ec0:	0004d31b 	.word	0x0004d31b
   24ec4:	00048e94 	.word	0x00048e94
   24ec8:	00048e92 	.word	0x00048e92
   24ecc:	00048e90 	.word	0x00048e90
   24ed0:	00048e8a 	.word	0x00048e8a
   24ed4:	0004f35b 	.word	0x0004f35b
   24ed8:	00048e96 	.word	0x00048e96

00024edc <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
   24edc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   24ee0:	f011 0607 	ands.w	r6, r1, #7
{
   24ee4:	4605      	mov	r5, r0
   24ee6:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   24eea:	461c      	mov	r4, r3
	if (!raw_string) {
   24eec:	d00b      	beq.n	24f06 <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   24eee:	f3c1 1389 	ubfx	r3, r1, #6, #10
   24ef2:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   24ef6:	e9cd 6100 	strd	r6, r1, [sp]
   24efa:	9302      	str	r3, [sp, #8]
   24efc:	4639      	mov	r1, r7
   24efe:	4613      	mov	r3, r2
   24f00:	2201      	movs	r2, #1
   24f02:	f7ff fecd 	bl	24ca0 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   24f06:	4643      	mov	r3, r8
   24f08:	4622      	mov	r2, r4
   24f0a:	4629      	mov	r1, r5
   24f0c:	480d      	ldr	r0, [pc, #52]	; (24f44 <log_output_string+0x68>)
   24f0e:	f7fe ffbf 	bl	23e90 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   24f12:	b98e      	cbnz	r6, 24f38 <log_output_string+0x5c>
   24f14:	3c01      	subs	r4, #1
	while (*fmt != '\0') {
   24f16:	4633      	mov	r3, r6
   24f18:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   24f1c:	2e00      	cmp	r6, #0
   24f1e:	d1fa      	bne.n	24f16 <log_output_string+0x3a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   24f20:	2b0a      	cmp	r3, #10
   24f22:	d103      	bne.n	24f2c <log_output_string+0x50>
			print_formatted(log_output, "\r");
   24f24:	4628      	mov	r0, r5
   24f26:	4908      	ldr	r1, [pc, #32]	; (24f48 <log_output_string+0x6c>)
   24f28:	f7ff fea8 	bl	24c7c <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   24f2c:	4628      	mov	r0, r5
}
   24f2e:	b004      	add	sp, #16
   24f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   24f34:	f01c bca1 	b.w	4187a <log_output_flush>
		postfix_print(log_output, flags, level);
   24f38:	4632      	mov	r2, r6
   24f3a:	4639      	mov	r1, r7
   24f3c:	4628      	mov	r0, r5
   24f3e:	f7ff ff3d 	bl	24dbc <postfix_print>
   24f42:	e7f3      	b.n	24f2c <log_output_string+0x50>
   24f44:	00041849 	.word	0x00041849
   24f48:	00048ed9 	.word	0x00048ed9

00024f4c <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
   24f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   24f50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   24f52:	4698      	mov	r8, r3
   24f54:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   24f58:	f3c1 1389 	ubfx	r3, r1, #6, #10
	uint8_t level = (uint8_t)src_level.level;
   24f5c:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   24f60:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   24f64:	e9cd 9100 	strd	r9, r1, [sp]
   24f68:	9302      	str	r3, [sp, #8]
   24f6a:	4631      	mov	r1, r6
   24f6c:	4613      	mov	r3, r2
   24f6e:	2201      	movs	r2, #1
{
   24f70:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   24f72:	f7ff fe95 	bl	24ca0 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   24f76:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   24f78:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   24f7a:	4910      	ldr	r1, [pc, #64]	; (24fbc <log_output_hexdump+0x70>)
   24f7c:	4620      	mov	r0, r4
   24f7e:	f7ff fe7d 	bl	24c7c <print_formatted>

	while (length) {
   24f82:	b955      	cbnz	r5, 24f9a <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   24f84:	4620      	mov	r0, r4
   24f86:	464a      	mov	r2, r9
   24f88:	4631      	mov	r1, r6
   24f8a:	f7ff ff17 	bl	24dbc <postfix_print>
	log_output_flush(log_output);
   24f8e:	4620      	mov	r0, r4
}
   24f90:	b004      	add	sp, #16
   24f92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   24f96:	f01c bc70 	b.w	4187a <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   24f9a:	2d10      	cmp	r5, #16
   24f9c:	46a8      	mov	r8, r5
   24f9e:	bf28      	it	cs
   24fa0:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   24fa4:	4639      	mov	r1, r7
   24fa6:	4653      	mov	r3, sl
   24fa8:	4642      	mov	r2, r8
   24faa:	4620      	mov	r0, r4
   24fac:	9600      	str	r6, [sp, #0]
   24fae:	f7ff ff23 	bl	24df8 <hexdump_line_print>
		data += part_len;
   24fb2:	4447      	add	r7, r8
		length -= part_len;
   24fb4:	eba5 0508 	sub.w	r5, r5, r8
   24fb8:	e7e3      	b.n	24f82 <log_output_hexdump+0x36>
   24fba:	bf00      	nop
   24fbc:	0004e84f 	.word	0x0004e84f

00024fc0 <log_output_timestamp_freq_set>:
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   24fc0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   24fc2:	2100      	movs	r1, #0
	timestamp_div = 1U;
   24fc4:	4a07      	ldr	r2, [pc, #28]	; (24fe4 <log_output_timestamp_freq_set+0x24>)
{
   24fc6:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   24fc8:	4c07      	ldr	r4, [pc, #28]	; (24fe8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   24fca:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   24fcc:	42a0      	cmp	r0, r4
   24fce:	d804      	bhi.n	24fda <log_output_timestamp_freq_set+0x1a>
   24fd0:	b101      	cbz	r1, 24fd4 <log_output_timestamp_freq_set+0x14>
   24fd2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   24fd4:	4b05      	ldr	r3, [pc, #20]	; (24fec <log_output_timestamp_freq_set+0x2c>)
   24fd6:	6018      	str	r0, [r3, #0]
}
   24fd8:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   24fda:	2101      	movs	r1, #1
		frequency /= 2U;
   24fdc:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   24fde:	005b      	lsls	r3, r3, #1
   24fe0:	e7f4      	b.n	24fcc <log_output_timestamp_freq_set+0xc>
   24fe2:	bf00      	nop
   24fe4:	200246bc 	.word	0x200246bc
   24fe8:	000f4240 	.word	0x000f4240
   24fec:	200246b8 	.word	0x200246b8

00024ff0 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   24ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24ff2:	460d      	mov	r5, r1
   24ff4:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
   24ff6:	4f06      	ldr	r7, [pc, #24]	; (25010 <char_out+0x20>)
   24ff8:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   24ffa:	42b4      	cmp	r4, r6
   24ffc:	d101      	bne.n	25002 <char_out+0x12>
	}

	return length;
}
   24ffe:	4628      	mov	r0, r5
   25000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   25002:	6838      	ldr	r0, [r7, #0]
   25004:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   25008:	6883      	ldr	r3, [r0, #8]
   2500a:	685b      	ldr	r3, [r3, #4]
   2500c:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   2500e:	e7f4      	b.n	24ffa <char_out+0xa>
   25010:	200246d4 	.word	0x200246d4

00025014 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   25014:	4801      	ldr	r0, [pc, #4]	; (2501c <panic+0x8>)
   25016:	f01c bc30 	b.w	4187a <log_output_flush>
   2501a:	bf00      	nop
   2501c:	0004680c 	.word	0x0004680c

00025020 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
   25020:	b508      	push	{r3, lr}
   25022:	4806      	ldr	r0, [pc, #24]	; (2503c <log_backend_uart_init+0x1c>)
   25024:	f016 fd04 	bl	3ba30 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   25028:	4b05      	ldr	r3, [pc, #20]	; (25040 <log_backend_uart_init+0x20>)
   2502a:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
   2502c:	b928      	cbnz	r0, 2503a <log_backend_uart_init+0x1a>
   2502e:	212d      	movs	r1, #45	; 0x2d
   25030:	4b04      	ldr	r3, [pc, #16]	; (25044 <log_backend_uart_init+0x24>)
   25032:	4a05      	ldr	r2, [pc, #20]	; (25048 <log_backend_uart_init+0x28>)
   25034:	4805      	ldr	r0, [pc, #20]	; (2504c <log_backend_uart_init+0x2c>)
   25036:	f019 ffc3 	bl	3efc0 <__assert_func>
}
   2503a:	bd08      	pop	{r3, pc}
   2503c:	00048efb 	.word	0x00048efb
   25040:	200246d4 	.word	0x200246d4
   25044:	00048f02 	.word	0x00048f02
   25048:	00048f59 	.word	0x00048f59
   2504c:	00048f13 	.word	0x00048f13

00025050 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
   25050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
   25052:	200f      	movs	r0, #15
   25054:	9002      	str	r0, [sp, #8]
   25056:	9807      	ldr	r0, [sp, #28]
   25058:	9001      	str	r0, [sp, #4]
   2505a:	9806      	ldr	r0, [sp, #24]
   2505c:	9000      	str	r0, [sp, #0]
   2505e:	4803      	ldr	r0, [pc, #12]	; (2506c <sync_hexdump+0x1c>)
   25060:	f7ff ff74 	bl	24f4c <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
   25064:	b005      	add	sp, #20
   25066:	f85d fb04 	ldr.w	pc, [sp], #4
   2506a:	bf00      	nop
   2506c:	0004680c 	.word	0x0004680c

00025070 <sync_string>:
{
   25070:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   25072:	200f      	movs	r0, #15
   25074:	9001      	str	r0, [sp, #4]
   25076:	9804      	ldr	r0, [sp, #16]
   25078:	9000      	str	r0, [sp, #0]
   2507a:	4803      	ldr	r0, [pc, #12]	; (25088 <sync_string+0x18>)
   2507c:	f7ff ff2e 	bl	24edc <log_output_string>
}
   25080:	b003      	add	sp, #12
   25082:	f85d fb04 	ldr.w	pc, [sp], #4
   25086:	bf00      	nop
   25088:	0004680c 	.word	0x0004680c

0002508c <fcb_append>:
	return 0;
}

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   2508c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25090:	b085      	sub	sp, #20
   25092:	4604      	mov	r4, r0
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[8];

	cnt = fcb_put_len(tmp_str, len);
   25094:	a802      	add	r0, sp, #8
{
   25096:	460d      	mov	r5, r1
   25098:	4690      	mov	r8, r2
	cnt = fcb_put_len(tmp_str, len);
   2509a:	f01c fc94 	bl	419c6 <fcb_put_len>
	if (cnt < 0) {
   2509e:	1e06      	subs	r6, r0, #0
   250a0:	db76      	blt.n	25190 <fcb_append+0x104>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   250a2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
int fcb_put_len(uint8_t *buf, uint16_t len);
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
   250a6:	b2b7      	uxth	r7, r6
   250a8:	2b01      	cmp	r3, #1
   250aa:	d906      	bls.n	250ba <fcb_append+0x2e>
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   250ac:	1e5a      	subs	r2, r3, #1
   250ae:	441d      	add	r5, r3
   250b0:	4259      	negs	r1, r3
   250b2:	4417      	add	r7, r2
   250b4:	3d01      	subs	r5, #1
   250b6:	400f      	ands	r7, r1
   250b8:	400d      	ands	r5, r1
	if (fcb->f_align <= 1U) {
   250ba:	2b01      	cmp	r3, #1
		return len;
   250bc:	bf92      	itee	ls
   250be:	2301      	movls	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   250c0:	425a      	neghi	r2, r3
   250c2:	4013      	andhi	r3, r2
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   250c4:	b22d      	sxth	r5, r5
   250c6:	441d      	add	r5, r3

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   250c8:	2f08      	cmp	r7, #8
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   250ca:	b2ad      	uxth	r5, r5
	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   250cc:	dd09      	ble.n	250e2 <fcb_append+0x56>
   250ce:	4938      	ldr	r1, [pc, #224]	; (251b0 <fcb_append+0x124>)
   250d0:	4838      	ldr	r0, [pc, #224]	; (251b4 <fcb_append+0x128>)
   250d2:	234b      	movs	r3, #75	; 0x4b
   250d4:	4a38      	ldr	r2, [pc, #224]	; (251b8 <fcb_append+0x12c>)
   250d6:	f01c f975 	bl	413c4 <printk>
   250da:	214b      	movs	r1, #75	; 0x4b
   250dc:	4836      	ldr	r0, [pc, #216]	; (251b8 <fcb_append+0x12c>)
   250de:	f01c fb8e 	bl	417fe <assert_post_action>

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   250e2:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   250e6:	f04f 32ff 	mov.w	r2, #4294967295
   250ea:	f04f 33ff 	mov.w	r3, #4294967295
   250ee:	4650      	mov	r0, sl
   250f0:	f017 f8e4 	bl	3c2bc <z_impl_k_mutex_lock>
	if (rc) {
   250f4:	4606      	mov	r6, r0
   250f6:	2800      	cmp	r0, #0
   250f8:	d156      	bne.n	251a8 <fcb_append+0x11c>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   250fa:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   250fe:	684a      	ldr	r2, [r1, #4]
   25100:	443b      	add	r3, r7
   25102:	442b      	add	r3, r5
   25104:	4293      	cmp	r3, r2
   25106:	d92b      	bls.n	25160 <fcb_append+0xd4>
	prev = NULL;
   25108:	4681      	mov	r9, r0
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   2510a:	f894 b006 	ldrb.w	fp, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   2510e:	4620      	mov	r0, r4
   25110:	f01c fdd6 	bl	41cc0 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   25114:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   25116:	f1b9 0f00 	cmp.w	r9, #0
   2511a:	bf08      	it	eq
   2511c:	4681      	moveq	r9, r0
		if (cur == fcb->f_oldest) {
   2511e:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   25120:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   25122:	d03b      	beq.n	2519c <fcb_append+0x110>
	} while (i++ < cnt);
   25124:	45b3      	cmp	fp, r6
   25126:	f106 0301 	add.w	r3, r6, #1
   2512a:	dc35      	bgt.n	25198 <fcb_append+0x10c>
		if (!sector || (sector->fs_size <
   2512c:	f1b9 0f00 	cmp.w	r9, #0
   25130:	d034      	beq.n	2519c <fcb_append+0x110>
   25132:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   25136:	f107 0308 	add.w	r3, r7, #8
   2513a:	442b      	add	r3, r5
		if (!sector || (sector->fs_size <
   2513c:	429a      	cmp	r2, r3
   2513e:	d32d      	bcc.n	2519c <fcb_append+0x110>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   25140:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   25142:	4649      	mov	r1, r9
   25144:	3201      	adds	r2, #1
   25146:	4620      	mov	r0, r4
   25148:	b292      	uxth	r2, r2
   2514a:	f01c fc66 	bl	41a1a <fcb_sector_hdr_init>
		if (rc) {
   2514e:	4606      	mov	r6, r0
   25150:	b9d8      	cbnz	r0, 2518a <fcb_append+0xfe>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   25152:	2308      	movs	r3, #8
   25154:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   25156:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   25158:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		fcb->f_active_id++;
   2515c:	3301      	adds	r3, #1
   2515e:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   25160:	4620      	mov	r0, r4
   25162:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   25166:	9700      	str	r7, [sp, #0]
   25168:	ab02      	add	r3, sp, #8
   2516a:	f01c fbfa 	bl	41962 <fcb_flash_write>
	if (rc) {
   2516e:	4606      	mov	r6, r0
   25170:	b9b8      	cbnz	r0, 251a2 <fcb_append+0x116>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   25172:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25174:	f8c8 3000 	str.w	r3, [r8]
	append_loc->fe_elem_off = active->fe_elem_off;
   25178:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2517a:	f8c8 3004 	str.w	r3, [r8, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   2517e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25180:	441f      	add	r7, r3
   25182:	f8c8 7008 	str.w	r7, [r8, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   25186:	442f      	add	r7, r5
   25188:	62a7      	str	r7, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   2518a:	4650      	mov	r0, sl
   2518c:	f017 f990 	bl	3c4b0 <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   25190:	4630      	mov	r0, r6
   25192:	b005      	add	sp, #20
   25194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   25198:	461e      	mov	r6, r3
   2519a:	e7b8      	b.n	2510e <fcb_append+0x82>
			rc = -ENOSPC;
   2519c:	f06f 061b 	mvn.w	r6, #27
   251a0:	e7f3      	b.n	2518a <fcb_append+0xfe>
		rc = -EIO;
   251a2:	f06f 0604 	mvn.w	r6, #4
   251a6:	e7f0      	b.n	2518a <fcb_append+0xfe>
		return -EINVAL;
   251a8:	f06f 0615 	mvn.w	r6, #21
   251ac:	e7f0      	b.n	25190 <fcb_append+0x104>
   251ae:	bf00      	nop
   251b0:	00048f9d 	.word	0x00048f9d
   251b4:	00048156 	.word	0x00048156
   251b8:	00048f6f 	.word	0x00048f6f

000251bc <boot_write_trailer_byte>:
	}
}

static int boot_write_trailer_byte(const struct flash_area *fa, uint32_t off,
				   uint8_t val)
{
   251bc:	b530      	push	{r4, r5, lr}
   251be:	b085      	sub	sp, #20
   251c0:	9101      	str	r1, [sp, #4]
   251c2:	4604      	mov	r4, r0
   251c4:	4615      	mov	r5, r2
	uint8_t buf[BOOT_MAX_ALIGN];
	uint8_t align;
	uint8_t erased_val;
	int rc;

	align = flash_area_align(fa);
   251c6:	f01d f823 	bl	42210 <flash_area_align>
	assert(align <= BOOT_MAX_ALIGN);
   251ca:	2808      	cmp	r0, #8
	align = flash_area_align(fa);
   251cc:	4603      	mov	r3, r0
	assert(align <= BOOT_MAX_ALIGN);
   251ce:	9901      	ldr	r1, [sp, #4]
   251d0:	d906      	bls.n	251e0 <boot_write_trailer_byte+0x24>
   251d2:	f240 112d 	movw	r1, #301	; 0x12d
   251d6:	4b0a      	ldr	r3, [pc, #40]	; (25200 <boot_write_trailer_byte+0x44>)
   251d8:	4a0a      	ldr	r2, [pc, #40]	; (25204 <boot_write_trailer_byte+0x48>)
   251da:	480b      	ldr	r0, [pc, #44]	; (25208 <boot_write_trailer_byte+0x4c>)
   251dc:	f019 fef0 	bl	3efc0 <__assert_func>
	erased_val = flash_area_erased_val(fa);
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   251e0:	f04f 32ff 	mov.w	r2, #4294967295
	buf[0] = val;

	rc = flash_area_write(fa, off, buf, align);
   251e4:	4620      	mov	r0, r4
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   251e6:	e9cd 2202 	strd	r2, r2, [sp, #8]
	rc = flash_area_write(fa, off, buf, align);
   251ea:	aa02      	add	r2, sp, #8
	buf[0] = val;
   251ec:	f88d 5008 	strb.w	r5, [sp, #8]
	rc = flash_area_write(fa, off, buf, align);
   251f0:	f01c ffbf 	bl	42172 <flash_area_write>
	if (rc != 0) {
   251f4:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   251f6:	bf18      	it	ne
   251f8:	f06f 0004 	mvnne.w	r0, #4
   251fc:	b005      	add	sp, #20
   251fe:	bd30      	pop	{r4, r5, pc}
   25200:	00048fb4 	.word	0x00048fb4
   25204:	00048ff9 	.word	0x00048ff9
   25208:	00048fcc 	.word	0x00048fcc

0002520c <boot_request_upgrade>:

	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   2520c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2520e:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   25210:	a901      	add	r1, sp, #4
   25212:	2007      	movs	r0, #7
   25214:	f000 fa1c 	bl	25650 <flash_area_open>
	if (rc) {
   25218:	4604      	mov	r4, r0
   2521a:	bb10      	cbnz	r0, 25262 <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   2521c:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   2521e:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   25220:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   25222:	4a12      	ldr	r2, [pc, #72]	; (2526c <boot_request_upgrade+0x60>)
   25224:	3910      	subs	r1, #16
   25226:	f01c ffa4 	bl	42172 <flash_area_write>
   2522a:	4604      	mov	r4, r0
	flash_area_close(fa);
   2522c:	9801      	ldr	r0, [sp, #4]
   2522e:	f01c ff82 	bl	42136 <flash_area_close>
	uint8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   25232:	b9b4      	cbnz	r4, 25262 <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   25234:	b1c5      	cbz	r5, 25268 <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   25236:	2007      	movs	r0, #7
   25238:	f01c fdf4 	bl	41e24 <boot_flag_write.constprop.0>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   2523c:	4604      	mov	r4, r0
   2523e:	b980      	cbnz	r0, 25262 <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   25240:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   25242:	2007      	movs	r0, #7
   25244:	a901      	add	r1, sp, #4
   25246:	f000 fa03 	bl	25650 <flash_area_open>
	if (rc) {
   2524a:	4604      	mov	r4, r0
   2524c:	b948      	cbnz	r0, 25262 <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   2524e:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   25250:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   25252:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   25254:	3928      	subs	r1, #40	; 0x28
   25256:	f7ff ffb1 	bl	251bc <boot_write_trailer_byte>
   2525a:	4604      	mov	r4, r0
	flash_area_close(fa);
   2525c:	9801      	ldr	r0, [sp, #4]
   2525e:	f01c ff6a 	bl	42136 <flash_area_close>
#else
	}
#endif
op_end:
	return rc;
}
   25262:	4620      	mov	r0, r4
   25264:	b003      	add	sp, #12
   25266:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   25268:	2502      	movs	r5, #2
   2526a:	e7ea      	b.n	25242 <boot_request_upgrade+0x36>
   2526c:	0004681c 	.word	0x0004681c

00025270 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   25270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   25274:	f8df 909c 	ldr.w	r9, [pc, #156]	; 25314 <z_impl_zsock_socket+0xa4>
{
   25278:	4605      	mov	r5, r0
   2527a:	460e      	mov	r6, r1
   2527c:	4617      	mov	r7, r2
   2527e:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   25280:	4c1e      	ldr	r4, [pc, #120]	; (252fc <z_impl_zsock_socket+0x8c>)
   25282:	f8df 8094 	ldr.w	r8, [pc, #148]	; 25318 <z_impl_zsock_socket+0xa8>
   25286:	454c      	cmp	r4, r9
   25288:	d90c      	bls.n	252a4 <z_impl_zsock_socket+0x34>
   2528a:	491d      	ldr	r1, [pc, #116]	; (25300 <z_impl_zsock_socket+0x90>)
   2528c:	23c0      	movs	r3, #192	; 0xc0
   2528e:	4642      	mov	r2, r8
   25290:	481c      	ldr	r0, [pc, #112]	; (25304 <z_impl_zsock_socket+0x94>)
   25292:	f01c f897 	bl	413c4 <printk>
   25296:	481c      	ldr	r0, [pc, #112]	; (25308 <z_impl_zsock_socket+0x98>)
   25298:	f01c f894 	bl	413c4 <printk>
   2529c:	21c0      	movs	r1, #192	; 0xc0
   2529e:	4640      	mov	r0, r8
   252a0:	f01c faad 	bl	417fe <assert_post_action>
   252a4:	4554      	cmp	r4, sl
   252a6:	d307      	bcc.n	252b8 <z_impl_zsock_socket+0x48>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   252a8:	f01d f9e3 	bl	42672 <__errno>
   252ac:	236a      	movs	r3, #106	; 0x6a
   252ae:	6003      	str	r3, [r0, #0]
	return -1;
}
   252b0:	f04f 30ff 	mov.w	r0, #4294967295
   252b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   252b8:	6823      	ldr	r3, [r4, #0]
   252ba:	42ab      	cmp	r3, r5
   252bc:	d000      	beq.n	252c0 <z_impl_zsock_socket+0x50>
   252be:	b9db      	cbnz	r3, 252f8 <z_impl_zsock_socket+0x88>
		NET_ASSERT(sock_family->is_supported);
   252c0:	6863      	ldr	r3, [r4, #4]
   252c2:	b963      	cbnz	r3, 252de <z_impl_zsock_socket+0x6e>
   252c4:	4911      	ldr	r1, [pc, #68]	; (2530c <z_impl_zsock_socket+0x9c>)
   252c6:	23c6      	movs	r3, #198	; 0xc6
   252c8:	4642      	mov	r2, r8
   252ca:	480e      	ldr	r0, [pc, #56]	; (25304 <z_impl_zsock_socket+0x94>)
   252cc:	f01c f87a 	bl	413c4 <printk>
   252d0:	480f      	ldr	r0, [pc, #60]	; (25310 <z_impl_zsock_socket+0xa0>)
   252d2:	f01c f877 	bl	413c4 <printk>
   252d6:	21c6      	movs	r1, #198	; 0xc6
   252d8:	4640      	mov	r0, r8
   252da:	f01c fa90 	bl	417fe <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   252de:	463a      	mov	r2, r7
   252e0:	4631      	mov	r1, r6
   252e2:	4628      	mov	r0, r5
   252e4:	6863      	ldr	r3, [r4, #4]
   252e6:	4798      	blx	r3
   252e8:	b130      	cbz	r0, 252f8 <z_impl_zsock_socket+0x88>
		return sock_family->handler(family, type, proto);
   252ea:	463a      	mov	r2, r7
   252ec:	4631      	mov	r1, r6
   252ee:	4628      	mov	r0, r5
   252f0:	68a3      	ldr	r3, [r4, #8]
}
   252f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   252f6:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   252f8:	340c      	adds	r4, #12
   252fa:	e7c4      	b.n	25286 <z_impl_zsock_socket+0x16>
   252fc:	0004639c 	.word	0x0004639c
   25300:	00049097 	.word	0x00049097
   25304:	00048156 	.word	0x00048156
   25308:	000490c4 	.word	0x000490c4
   2530c:	0004907d 	.word	0x0004907d
   25310:	00049046 	.word	0x00049046
   25314:	000463a8 	.word	0x000463a8
   25318:	00049049 	.word	0x00049049

0002531c <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   2531c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   25320:	1e14      	subs	r4, r2, #0
{
   25322:	b09b      	sub	sp, #108	; 0x6c
   25324:	4606      	mov	r6, r0
   25326:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
   25328:	db30      	blt.n	2538c <z_impl_zsock_poll+0x70>
			return (t * to_hz + off) / from_hz;
   2532a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2532e:	f240 30e7 	movw	r0, #999	; 0x3e7
   25332:	2100      	movs	r1, #0
   25334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25338:	2300      	movs	r3, #0
   2533a:	fbc5 0104 	smlal	r0, r1, r5, r4
   2533e:	f7f7 fdbd 	bl	1cebc <__aeabi_uldivmod>
   25342:	4682      	mov	sl, r0
   25344:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   25346:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   25348:	4650      	mov	r0, sl
   2534a:	4659      	mov	r1, fp
   2534c:	f01f fbf3 	bl	44b36 <z_timeout_end_calc>

	pev = poll_events;
   25350:	ab0b      	add	r3, sp, #44	; 0x2c
   25352:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
   25354:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
   25356:	4633      	mov	r3, r6
	bool offload = false;
   25358:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
   2535a:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
   2535e:	f8dd 900c 	ldr.w	r9, [sp, #12]
   25362:	f1b9 0f00 	cmp.w	r9, #0
   25366:	d118      	bne.n	2539a <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   25368:	f1b8 0f00 	cmp.w	r8, #0
   2536c:	d049      	beq.n	25402 <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   2536e:	9b03      	ldr	r3, [sp, #12]
   25370:	9401      	str	r4, [sp, #4]
   25372:	9300      	str	r3, [sp, #0]
   25374:	f44f 7282 	mov.w	r2, #260	; 0x104
   25378:	4633      	mov	r3, r6
   2537a:	4629      	mov	r1, r5
   2537c:	4638      	mov	r0, r7
   2537e:	f01c fdf7 	bl	41f70 <z_fdtable_call_ioctl>
   25382:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   25384:	4620      	mov	r0, r4
   25386:	b01b      	add	sp, #108	; 0x6c
   25388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   2538c:	f04f 3aff 	mov.w	sl, #4294967295
   25390:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   25394:	f04f 34ff 	mov.w	r4, #4294967295
   25398:	e7d5      	b.n	25346 <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   2539a:	6818      	ldr	r0, [r3, #0]
   2539c:	2800      	cmp	r0, #0
   2539e:	db2c      	blt.n	253fa <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
   253a0:	a90a      	add	r1, sp, #40	; 0x28
   253a2:	9306      	str	r3, [sp, #24]
   253a4:	f7fe fc78 	bl	23c98 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   253a8:	9b06      	ldr	r3, [sp, #24]
   253aa:	4601      	mov	r1, r0
   253ac:	b328      	cbz	r0, 253fa <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
   253ae:	aa1a      	add	r2, sp, #104	; 0x68
   253b0:	9201      	str	r2, [sp, #4]
   253b2:	aa09      	add	r2, sp, #36	; 0x24
   253b4:	9200      	str	r2, [sp, #0]
   253b6:	9006      	str	r0, [sp, #24]
   253b8:	f44f 7281 	mov.w	r2, #258	; 0x102
   253bc:	980a      	ldr	r0, [sp, #40]	; 0x28
   253be:	9307      	str	r3, [sp, #28]
   253c0:	f01c fdd6 	bl	41f70 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   253c4:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   253c8:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   253ca:	9b07      	ldr	r3, [sp, #28]
   253cc:	d011      	beq.n	253f2 <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
   253ce:	f110 0f12 	cmn.w	r0, #18
   253d2:	9906      	ldr	r1, [sp, #24]
   253d4:	d105      	bne.n	253e2 <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   253d6:	b90f      	cbnz	r7, 253dc <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
   253d8:	460d      	mov	r5, r1
   253da:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
   253dc:	f04f 0801 	mov.w	r8, #1
   253e0:	e00b      	b.n	253fa <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
   253e2:	b150      	cbz	r0, 253fa <z_impl_zsock_poll+0xde>
   253e4:	9203      	str	r2, [sp, #12]
				errno = -result;
   253e6:	f01d f944 	bl	42672 <__errno>
   253ea:	9a03      	ldr	r2, [sp, #12]
   253ec:	4252      	negs	r2, r2
   253ee:	6002      	str	r2, [r0, #0]
				return -1;
   253f0:	e03e      	b.n	25470 <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
   253f2:	f04f 0a00 	mov.w	sl, #0
   253f6:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   253fa:	3308      	adds	r3, #8
   253fc:	f109 39ff 	add.w	r9, r9, #4294967295
   25400:	e7af      	b.n	25362 <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   25402:	ea5a 030b 	orrs.w	r3, sl, fp
   25406:	d016      	beq.n	25436 <z_impl_zsock_poll+0x11a>
   25408:	f1bb 3fff 	cmp.w	fp, #4294967295
   2540c:	bf08      	it	eq
   2540e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   25412:	d010      	beq.n	25436 <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
   25414:	f019 f9fa 	bl	3e80c <z_tick_get>
   25418:	9b04      	ldr	r3, [sp, #16]
   2541a:	ebb3 0a00 	subs.w	sl, r3, r0
   2541e:	9b05      	ldr	r3, [sp, #20]
   25420:	eb63 0b01 	sbc.w	fp, r3, r1
   25424:	f1ba 0f00 	cmp.w	sl, #0
   25428:	f17b 0300 	sbcs.w	r3, fp, #0
   2542c:	bfbc      	itt	lt
   2542e:	f04f 0a00 	movlt.w	sl, #0
   25432:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   25436:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   2543a:	9909      	ldr	r1, [sp, #36]	; 0x24
   2543c:	ac0b      	add	r4, sp, #44	; 0x2c
   2543e:	4b34      	ldr	r3, [pc, #208]	; (25510 <z_impl_zsock_poll+0x1f4>)
   25440:	1b09      	subs	r1, r1, r4
   25442:	1089      	asrs	r1, r1, #2
   25444:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   25446:	465b      	mov	r3, fp
   25448:	4652      	mov	r2, sl
   2544a:	4620      	mov	r0, r4
   2544c:	f019 fc24 	bl	3ec98 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   25450:	f100 030b 	add.w	r3, r0, #11
   25454:	2b0b      	cmp	r3, #11
   25456:	4607      	mov	r7, r0
   25458:	d806      	bhi.n	25468 <z_impl_zsock_poll+0x14c>
   2545a:	f640 0581 	movw	r5, #2177	; 0x881
   2545e:	40dd      	lsrs	r5, r3
   25460:	43ed      	mvns	r5, r5
   25462:	f015 0501 	ands.w	r5, r5, #1
   25466:	d006      	beq.n	25476 <z_impl_zsock_poll+0x15a>
			errno = -ret;
   25468:	f01d f903 	bl	42672 <__errno>
   2546c:	427f      	negs	r7, r7
   2546e:	6007      	str	r7, [r0, #0]
			return -1;
   25470:	f04f 34ff 	mov.w	r4, #4294967295
   25474:	e786      	b.n	25384 <z_impl_zsock_poll+0x68>
		pev = poll_events;
   25476:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   25478:	46b0      	mov	r8, r6
		ret = 0;
   2547a:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   2547c:	9f03      	ldr	r7, [sp, #12]
   2547e:	b9ef      	cbnz	r7, 254bc <z_impl_zsock_poll+0x1a0>
		if (retry) {
   25480:	2d00      	cmp	r5, #0
   25482:	f43f af7f 	beq.w	25384 <z_impl_zsock_poll+0x68>
			if (ret > 0) {
   25486:	2c00      	cmp	r4, #0
   25488:	f73f af7c 	bgt.w	25384 <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2548c:	ea5a 030b 	orrs.w	r3, sl, fp
   25490:	f43f af78 	beq.w	25384 <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25494:	f1bb 3fff 	cmp.w	fp, #4294967295
   25498:	bf08      	it	eq
   2549a:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   2549e:	d0cc      	beq.n	2543a <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
   254a0:	f019 f9b4 	bl	3e80c <z_tick_get>
   254a4:	9b04      	ldr	r3, [sp, #16]
   254a6:	ebb3 0a00 	subs.w	sl, r3, r0
   254aa:	9b05      	ldr	r3, [sp, #20]
   254ac:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   254b0:	f1ba 0f01 	cmp.w	sl, #1
   254b4:	f17b 0300 	sbcs.w	r3, fp, #0
   254b8:	dabf      	bge.n	2543a <z_impl_zsock_poll+0x11e>
   254ba:	e763      	b.n	25384 <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
   254bc:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
   254c0:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
   254c4:	2800      	cmp	r0, #0
   254c6:	db1c      	blt.n	25502 <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
   254c8:	a90a      	add	r1, sp, #40	; 0x28
   254ca:	f7fe fbe5 	bl	23c98 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   254ce:	4601      	mov	r1, r0
   254d0:	b920      	cbnz	r0, 254dc <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
   254d2:	2220      	movs	r2, #32
   254d4:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
   254d8:	3401      	adds	r4, #1
   254da:	e012      	b.n	25502 <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
   254dc:	ab09      	add	r3, sp, #36	; 0x24
   254de:	f240 1203 	movw	r2, #259	; 0x103
   254e2:	9300      	str	r3, [sp, #0]
   254e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   254e6:	4643      	mov	r3, r8
   254e8:	f01c fd42 	bl	41f70 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   254ec:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   254f0:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   254f2:	d00a      	beq.n	2550a <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
   254f4:	2800      	cmp	r0, #0
   254f6:	f47f af75 	bne.w	253e4 <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
   254fa:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   254fe:	2a00      	cmp	r2, #0
   25500:	d1ea      	bne.n	254d8 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   25502:	f108 0808 	add.w	r8, r8, #8
   25506:	3f01      	subs	r7, #1
   25508:	e7b9      	b.n	2547e <z_impl_zsock_poll+0x162>
				retry = true;
   2550a:	2501      	movs	r5, #1
   2550c:	e7f9      	b.n	25502 <z_impl_zsock_poll+0x1e6>
   2550e:	bf00      	nop
   25510:	cccccccd 	.word	0xcccccccd

00025514 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   25514:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   25516:	4605      	mov	r5, r0
   25518:	b948      	cbnz	r0, 2552e <socket_offload_dns_register+0x1a>
   2551a:	490c      	ldr	r1, [pc, #48]	; (2554c <socket_offload_dns_register+0x38>)
   2551c:	480c      	ldr	r0, [pc, #48]	; (25550 <socket_offload_dns_register+0x3c>)
   2551e:	2313      	movs	r3, #19
   25520:	4a0c      	ldr	r2, [pc, #48]	; (25554 <socket_offload_dns_register+0x40>)
   25522:	f01b ff4f 	bl	413c4 <printk>
   25526:	2113      	movs	r1, #19
   25528:	480a      	ldr	r0, [pc, #40]	; (25554 <socket_offload_dns_register+0x40>)
   2552a:	f01c f968 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   2552e:	4c0a      	ldr	r4, [pc, #40]	; (25558 <socket_offload_dns_register+0x44>)
   25530:	6822      	ldr	r2, [r4, #0]
   25532:	b14a      	cbz	r2, 25548 <socket_offload_dns_register+0x34>
   25534:	4909      	ldr	r1, [pc, #36]	; (2555c <socket_offload_dns_register+0x48>)
   25536:	4806      	ldr	r0, [pc, #24]	; (25550 <socket_offload_dns_register+0x3c>)
   25538:	2314      	movs	r3, #20
   2553a:	4a06      	ldr	r2, [pc, #24]	; (25554 <socket_offload_dns_register+0x40>)
   2553c:	f01b ff42 	bl	413c4 <printk>
   25540:	2114      	movs	r1, #20
   25542:	4804      	ldr	r0, [pc, #16]	; (25554 <socket_offload_dns_register+0x40>)
   25544:	f01c f95b 	bl	417fe <assert_post_action>

	dns_offload = ops;
   25548:	6025      	str	r5, [r4, #0]
}
   2554a:	bd38      	pop	{r3, r4, r5, pc}
   2554c:	0004ecd8 	.word	0x0004ecd8
   25550:	00048156 	.word	0x00048156
   25554:	000490e3 	.word	0x000490e3
   25558:	200246d8 	.word	0x200246d8
   2555c:	0004911e 	.word	0x0004911e

00025560 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   25560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   25564:	4c13      	ldr	r4, [pc, #76]	; (255b4 <socket_offload_getaddrinfo+0x54>)
{
   25566:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   25568:	6823      	ldr	r3, [r4, #0]
{
   2556a:	4605      	mov	r5, r0
   2556c:	460e      	mov	r6, r1
   2556e:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   25570:	b94b      	cbnz	r3, 25586 <socket_offload_getaddrinfo+0x26>
   25572:	4911      	ldr	r1, [pc, #68]	; (255b8 <socket_offload_getaddrinfo+0x58>)
   25574:	4811      	ldr	r0, [pc, #68]	; (255bc <socket_offload_getaddrinfo+0x5c>)
   25576:	231d      	movs	r3, #29
   25578:	4a11      	ldr	r2, [pc, #68]	; (255c0 <socket_offload_getaddrinfo+0x60>)
   2557a:	f01b ff23 	bl	413c4 <printk>
   2557e:	211d      	movs	r1, #29
   25580:	480f      	ldr	r0, [pc, #60]	; (255c0 <socket_offload_getaddrinfo+0x60>)
   25582:	f01c f93c 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   25586:	6823      	ldr	r3, [r4, #0]
   25588:	681b      	ldr	r3, [r3, #0]
   2558a:	b94b      	cbnz	r3, 255a0 <socket_offload_getaddrinfo+0x40>
   2558c:	490d      	ldr	r1, [pc, #52]	; (255c4 <socket_offload_getaddrinfo+0x64>)
   2558e:	480b      	ldr	r0, [pc, #44]	; (255bc <socket_offload_getaddrinfo+0x5c>)
   25590:	231e      	movs	r3, #30
   25592:	4a0b      	ldr	r2, [pc, #44]	; (255c0 <socket_offload_getaddrinfo+0x60>)
   25594:	f01b ff16 	bl	413c4 <printk>
   25598:	211e      	movs	r1, #30
   2559a:	4809      	ldr	r0, [pc, #36]	; (255c0 <socket_offload_getaddrinfo+0x60>)
   2559c:	f01c f92f 	bl	417fe <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   255a0:	6823      	ldr	r3, [r4, #0]
   255a2:	463a      	mov	r2, r7
   255a4:	681c      	ldr	r4, [r3, #0]
   255a6:	4631      	mov	r1, r6
   255a8:	4643      	mov	r3, r8
   255aa:	4628      	mov	r0, r5
   255ac:	46a4      	mov	ip, r4
}
   255ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   255b2:	4760      	bx	ip
   255b4:	200246d8 	.word	0x200246d8
   255b8:	00049139 	.word	0x00049139
   255bc:	00048156 	.word	0x00048156
   255c0:	000490e3 	.word	0x000490e3
   255c4:	00049145 	.word	0x00049145

000255c8 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   255c8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   255ca:	4c10      	ldr	r4, [pc, #64]	; (2560c <socket_offload_freeaddrinfo+0x44>)
{
   255cc:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   255ce:	6823      	ldr	r3, [r4, #0]
   255d0:	b94b      	cbnz	r3, 255e6 <socket_offload_freeaddrinfo+0x1e>
   255d2:	490f      	ldr	r1, [pc, #60]	; (25610 <socket_offload_freeaddrinfo+0x48>)
   255d4:	480f      	ldr	r0, [pc, #60]	; (25614 <socket_offload_freeaddrinfo+0x4c>)
   255d6:	2325      	movs	r3, #37	; 0x25
   255d8:	4a0f      	ldr	r2, [pc, #60]	; (25618 <socket_offload_freeaddrinfo+0x50>)
   255da:	f01b fef3 	bl	413c4 <printk>
   255de:	2125      	movs	r1, #37	; 0x25
   255e0:	480d      	ldr	r0, [pc, #52]	; (25618 <socket_offload_freeaddrinfo+0x50>)
   255e2:	f01c f90c 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   255e6:	6823      	ldr	r3, [r4, #0]
   255e8:	685b      	ldr	r3, [r3, #4]
   255ea:	b94b      	cbnz	r3, 25600 <socket_offload_freeaddrinfo+0x38>
   255ec:	490b      	ldr	r1, [pc, #44]	; (2561c <socket_offload_freeaddrinfo+0x54>)
   255ee:	4809      	ldr	r0, [pc, #36]	; (25614 <socket_offload_freeaddrinfo+0x4c>)
   255f0:	2326      	movs	r3, #38	; 0x26
   255f2:	4a09      	ldr	r2, [pc, #36]	; (25618 <socket_offload_freeaddrinfo+0x50>)
   255f4:	f01b fee6 	bl	413c4 <printk>
   255f8:	2126      	movs	r1, #38	; 0x26
   255fa:	4807      	ldr	r0, [pc, #28]	; (25618 <socket_offload_freeaddrinfo+0x50>)
   255fc:	f01c f8ff 	bl	417fe <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   25600:	6823      	ldr	r3, [r4, #0]
   25602:	4628      	mov	r0, r5
}
   25604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   25608:	685b      	ldr	r3, [r3, #4]
   2560a:	4718      	bx	r3
   2560c:	200246d8 	.word	0x200246d8
   25610:	00049139 	.word	0x00049139
   25614:	00048156 	.word	0x00048156
   25618:	000490e3 	.word	0x000490e3
   2561c:	0004915e 	.word	0x0004915e

00025620 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   25620:	4b09      	ldr	r3, [pc, #36]	; (25648 <get_flash_area_from_id+0x28>)
{
   25622:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   25624:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   25626:	4b09      	ldr	r3, [pc, #36]	; (2564c <get_flash_area_from_id+0x2c>)
   25628:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   2562a:	2300      	movs	r3, #0
   2562c:	429d      	cmp	r5, r3
   2562e:	dc02      	bgt.n	25636 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   25630:	2100      	movs	r1, #0
}
   25632:	4608      	mov	r0, r1
   25634:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   25636:	011a      	lsls	r2, r3, #4
   25638:	5ca2      	ldrb	r2, [r4, r2]
   2563a:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   2563e:	4282      	cmp	r2, r0
   25640:	d0f7      	beq.n	25632 <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   25642:	3301      	adds	r3, #1
   25644:	e7f2      	b.n	2562c <get_flash_area_from_id+0xc>
   25646:	bf00      	nop
   25648:	000468bc 	.word	0x000468bc
   2564c:	2002064c 	.word	0x2002064c

00025650 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   25650:	4b08      	ldr	r3, [pc, #32]	; (25674 <flash_area_open+0x24>)
{
   25652:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   25654:	681b      	ldr	r3, [r3, #0]
{
   25656:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   25658:	b12b      	cbz	r3, 25666 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   2565a:	f7ff ffe1 	bl	25620 <get_flash_area_from_id>
	if (area == NULL) {
   2565e:	b128      	cbz	r0, 2566c <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   25660:	6020      	str	r0, [r4, #0]
	return 0;
   25662:	2000      	movs	r0, #0
}
   25664:	bd10      	pop	{r4, pc}
		return -EACCES;
   25666:	f06f 000c 	mvn.w	r0, #12
   2566a:	e7fb      	b.n	25664 <flash_area_open+0x14>
		return -ENOENT;
   2566c:	f06f 0001 	mvn.w	r0, #1
   25670:	e7f8      	b.n	25664 <flash_area_open+0x14>
   25672:	bf00      	nop
   25674:	2002064c 	.word	0x2002064c

00025678 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   25678:	b530      	push	{r4, r5, lr}
   2567a:	b089      	sub	sp, #36	; 0x24
   2567c:	460c      	mov	r4, r1
   2567e:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   25680:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   25682:	f7ff ffcd 	bl	25620 <get_flash_area_from_id>
	if (fa == NULL) {
   25686:	b1b8      	cbz	r0, 256b8 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   25688:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
   2568a:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
   2568c:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   2568e:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   25690:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   25692:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   25696:	2300      	movs	r3, #0
	cb_data->status = 0;
   25698:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   2569c:	9305      	str	r3, [sp, #20]
   2569e:	f016 f9c7 	bl	3ba30 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   256a2:	b160      	cbz	r0, 256be <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   256a4:	4907      	ldr	r1, [pc, #28]	; (256c4 <flash_area_get_sectors+0x4c>)
   256a6:	aa01      	add	r2, sp, #4
   256a8:	f01d ff24 	bl	434f4 <flash_page_foreach>
	if (cb_data->status == 0) {
   256ac:	9807      	ldr	r0, [sp, #28]
   256ae:	b908      	cbnz	r0, 256b4 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   256b0:	9b05      	ldr	r3, [sp, #20]
   256b2:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   256b4:	b009      	add	sp, #36	; 0x24
   256b6:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   256b8:	f06f 0015 	mvn.w	r0, #21
   256bc:	e7fa      	b.n	256b4 <flash_area_get_sectors+0x3c>
		return -ENODEV;
   256be:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   256c2:	e7f7      	b.n	256b4 <flash_area_get_sectors+0x3c>
   256c4:	000420fb 	.word	0x000420fb

000256c8 <stream_flash_erase_page>:
#include <storage/stream_flash.h>

#ifdef CONFIG_STREAM_FLASH_ERASE

int stream_flash_erase_page(struct stream_flash_ctx *ctx, off_t off)
{
   256c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   256ca:	4606      	mov	r6, r0
	int rc;
	struct flash_pages_info page;

	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   256cc:	68c0      	ldr	r0, [r0, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   256ce:	aa01      	add	r2, sp, #4
   256d0:	f01d ff0c 	bl	434ec <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   256d4:	4604      	mov	r4, r0
   256d6:	b168      	cbz	r0, 256f4 <stream_flash_erase_page+0x2c>
		LOG_ERR("Error %d while getting page info", rc);
   256d8:	4622      	mov	r2, r4
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   256da:	4819      	ldr	r0, [pc, #100]	; (25740 <stream_flash_erase_page+0x78>)
   256dc:	4b19      	ldr	r3, [pc, #100]	; (25744 <stream_flash_erase_page+0x7c>)
   256de:	491a      	ldr	r1, [pc, #104]	; (25748 <stream_flash_erase_page+0x80>)
   256e0:	1ac0      	subs	r0, r0, r3
   256e2:	08c0      	lsrs	r0, r0, #3
   256e4:	0180      	lsls	r0, r0, #6
   256e6:	f040 0001 	orr.w	r0, r0, #1
	flash_write_protection_set(ctx->fdev, false);
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
	flash_write_protection_set(ctx->fdev, true);

	if (rc != 0) {
		LOG_ERR("Error %d while erasing page", rc);
   256ea:	f01c f899 	bl	41820 <log_string_sync>
	}

	return rc;
}
   256ee:	4620      	mov	r0, r4
   256f0:	b004      	add	sp, #16
   256f2:	bd70      	pop	{r4, r5, r6, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   256f4:	9a01      	ldr	r2, [sp, #4]
   256f6:	6a33      	ldr	r3, [r6, #32]
   256f8:	4293      	cmp	r3, r2
   256fa:	d0f8      	beq.n	256ee <stream_flash_erase_page+0x26>
   256fc:	4b11      	ldr	r3, [pc, #68]	; (25744 <stream_flash_erase_page+0x7c>)
   256fe:	4d10      	ldr	r5, [pc, #64]	; (25740 <stream_flash_erase_page+0x78>)
	ctx->last_erased_page_start_offset = page.start_offset;
   25700:	6232      	str	r2, [r6, #32]
   25702:	1aed      	subs	r5, r5, r3
   25704:	08ed      	lsrs	r5, r5, #3
	LOG_INF("Erasing page at offset 0x%08lx", (long)page.start_offset);
   25706:	01ad      	lsls	r5, r5, #6
   25708:	f045 0003 	orr.w	r0, r5, #3
   2570c:	490f      	ldr	r1, [pc, #60]	; (2574c <stream_flash_erase_page+0x84>)
   2570e:	f01c f887 	bl	41820 <log_string_sync>
	flash_write_protection_set(ctx->fdev, false);
   25712:	4621      	mov	r1, r4
   25714:	68f0      	ldr	r0, [r6, #12]
   25716:	f01c fd87 	bl	42228 <flash_write_protection_set>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   2571a:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
   2571e:	68f0      	ldr	r0, [r6, #12]
				     size_t size)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->erase(dev, offset, size);
   25720:	6883      	ldr	r3, [r0, #8]
   25722:	689b      	ldr	r3, [r3, #8]
   25724:	4798      	blx	r3
   25726:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   25728:	2101      	movs	r1, #1
   2572a:	68f0      	ldr	r0, [r6, #12]
   2572c:	f01c fd7c 	bl	42228 <flash_write_protection_set>
	if (rc != 0) {
   25730:	2c00      	cmp	r4, #0
   25732:	d0dc      	beq.n	256ee <stream_flash_erase_page+0x26>
		LOG_ERR("Error %d while erasing page", rc);
   25734:	4622      	mov	r2, r4
   25736:	4906      	ldr	r1, [pc, #24]	; (25750 <stream_flash_erase_page+0x88>)
   25738:	f045 0001 	orr.w	r0, r5, #1
   2573c:	e7d5      	b.n	256ea <stream_flash_erase_page+0x22>
   2573e:	bf00      	nop
   25740:	000463bc 	.word	0x000463bc
   25744:	000463bc 	.word	0x000463bc
   25748:	0004918b 	.word	0x0004918b
   2574c:	000491ac 	.word	0x000491ac
   25750:	000491cb 	.word	0x000491cb

00025754 <flash_sync>:

#endif /* CONFIG_STREAM_FLASH_ERASE */

static int flash_sync(struct stream_flash_ctx *ctx)
{
   25754:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	size_t write_addr = ctx->offset + ctx->bytes_written;


	if (IS_ENABLED(CONFIG_STREAM_FLASH_ERASE)) {
		if (ctx->buf_bytes == 0) {
   25756:	6884      	ldr	r4, [r0, #8]
{
   25758:	4605      	mov	r5, r0
		if (ctx->buf_bytes == 0) {
   2575a:	b1a4      	cbz	r4, 25786 <flash_sync+0x32>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   2575c:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
			return 0;
		}

		rc = stream_flash_erase_page(ctx,
					     write_addr + ctx->buf_bytes - 1);
   25760:	3c01      	subs	r4, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   25762:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   25764:	19a1      	adds	r1, r4, r6
   25766:	f7ff ffaf 	bl	256c8 <stream_flash_erase_page>
		if (rc < 0) {
   2576a:	1e04      	subs	r4, r0, #0
   2576c:	da0d      	bge.n	2578a <flash_sync+0x36>
   2576e:	4b30      	ldr	r3, [pc, #192]	; (25830 <flash_sync+0xdc>)
   25770:	4830      	ldr	r0, [pc, #192]	; (25834 <flash_sync+0xe0>)
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   25772:	4622      	mov	r2, r4
   25774:	1ac0      	subs	r0, r0, r3
   25776:	4633      	mov	r3, r6
   25778:	08c0      	lsrs	r0, r0, #3
   2577a:	492f      	ldr	r1, [pc, #188]	; (25838 <flash_sync+0xe4>)
   2577c:	0180      	lsls	r0, r0, #6
	flash_write_protection_set(ctx->fdev, false);
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, ctx->buf_bytes);
	flash_write_protection_set(ctx->fdev, true);

	if (rc != 0) {
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   2577e:	f040 0001 	orr.w	r0, r0, #1
   25782:	f01c f84d 	bl	41820 <log_string_sync>

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
   25786:	4620      	mov	r0, r4
   25788:	bd70      	pop	{r4, r5, r6, pc}
	flash_write_protection_set(ctx->fdev, false);
   2578a:	2100      	movs	r1, #0
   2578c:	68e8      	ldr	r0, [r5, #12]
   2578e:	f01c fd4b 	bl	42228 <flash_write_protection_set>
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, ctx->buf_bytes);
   25792:	68e8      	ldr	r0, [r5, #12]
   25794:	682a      	ldr	r2, [r5, #0]
   25796:	68ab      	ldr	r3, [r5, #8]
	return api->write(dev, offset, data, len);
   25798:	6881      	ldr	r1, [r0, #8]
   2579a:	684c      	ldr	r4, [r1, #4]
   2579c:	4631      	mov	r1, r6
   2579e:	47a0      	blx	r4
   257a0:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   257a2:	2101      	movs	r1, #1
   257a4:	68e8      	ldr	r0, [r5, #12]
   257a6:	f01c fd3f 	bl	42228 <flash_write_protection_set>
	if (rc != 0) {
   257aa:	b144      	cbz	r4, 257be <flash_sync+0x6a>
   257ac:	4b20      	ldr	r3, [pc, #128]	; (25830 <flash_sync+0xdc>)
   257ae:	4821      	ldr	r0, [pc, #132]	; (25834 <flash_sync+0xe0>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   257b0:	4622      	mov	r2, r4
   257b2:	1ac0      	subs	r0, r0, r3
   257b4:	08c0      	lsrs	r0, r0, #3
   257b6:	4633      	mov	r3, r6
   257b8:	4920      	ldr	r1, [pc, #128]	; (2583c <flash_sync+0xe8>)
   257ba:	0180      	lsls	r0, r0, #6
   257bc:	e7df      	b.n	2577e <flash_sync+0x2a>
	if (ctx->callback) {
   257be:	69eb      	ldr	r3, [r5, #28]
   257c0:	b953      	cbnz	r3, 257d8 <flash_sync+0x84>
	ctx->bytes_written += ctx->buf_bytes;
   257c2:	692b      	ldr	r3, [r5, #16]
   257c4:	68aa      	ldr	r2, [r5, #8]
   257c6:	4413      	add	r3, r2
   257c8:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
   257ca:	2300      	movs	r3, #0
   257cc:	60ab      	str	r3, [r5, #8]
	return rc;
   257ce:	e7da      	b.n	25786 <flash_sync+0x32>
			ctx->buf[i] = ~ctx->buf[i];
   257d0:	5d13      	ldrb	r3, [r2, r4]
   257d2:	43db      	mvns	r3, r3
   257d4:	5513      	strb	r3, [r2, r4]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   257d6:	3401      	adds	r4, #1
   257d8:	68ab      	ldr	r3, [r5, #8]
   257da:	682a      	ldr	r2, [r5, #0]
   257dc:	429c      	cmp	r4, r3
   257de:	d3f7      	bcc.n	257d0 <flash_sync+0x7c>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   257e0:	68e8      	ldr	r0, [r5, #12]
	return api->read(dev, offset, data, len);
   257e2:	6881      	ldr	r1, [r0, #8]
   257e4:	680c      	ldr	r4, [r1, #0]
   257e6:	4631      	mov	r1, r6
   257e8:	47a0      	blx	r4
		if (rc != 0) {
   257ea:	4604      	mov	r4, r0
   257ec:	b158      	cbz	r0, 25806 <flash_sync+0xb2>
   257ee:	4b10      	ldr	r3, [pc, #64]	; (25830 <flash_sync+0xdc>)
   257f0:	4810      	ldr	r0, [pc, #64]	; (25834 <flash_sync+0xe0>)
			LOG_ERR("flash read failed: %d", rc);
   257f2:	4622      	mov	r2, r4
   257f4:	1ac0      	subs	r0, r0, r3
   257f6:	08c0      	lsrs	r0, r0, #3
   257f8:	0180      	lsls	r0, r0, #6
   257fa:	4911      	ldr	r1, [pc, #68]	; (25840 <flash_sync+0xec>)
   257fc:	f040 0001 	orr.w	r0, r0, #1
   25800:	f01c f80e 	bl	41820 <log_string_sync>
			return rc;
   25804:	e7bf      	b.n	25786 <flash_sync+0x32>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   25806:	4632      	mov	r2, r6
   25808:	69eb      	ldr	r3, [r5, #28]
   2580a:	68a9      	ldr	r1, [r5, #8]
   2580c:	6828      	ldr	r0, [r5, #0]
   2580e:	4798      	blx	r3
		if (rc != 0) {
   25810:	4604      	mov	r4, r0
   25812:	2800      	cmp	r0, #0
   25814:	d0d5      	beq.n	257c2 <flash_sync+0x6e>
   25816:	4b06      	ldr	r3, [pc, #24]	; (25830 <flash_sync+0xdc>)
   25818:	4806      	ldr	r0, [pc, #24]	; (25834 <flash_sync+0xe0>)
			LOG_ERR("callback failed: %d", rc);
   2581a:	4622      	mov	r2, r4
   2581c:	1ac0      	subs	r0, r0, r3
   2581e:	08c0      	lsrs	r0, r0, #3
   25820:	0180      	lsls	r0, r0, #6
   25822:	4908      	ldr	r1, [pc, #32]	; (25844 <flash_sync+0xf0>)
   25824:	f040 0001 	orr.w	r0, r0, #1
   25828:	f01b fffa 	bl	41820 <log_string_sync>
   2582c:	e7c9      	b.n	257c2 <flash_sync+0x6e>
   2582e:	bf00      	nop
   25830:	000463bc 	.word	0x000463bc
   25834:	000463bc 	.word	0x000463bc
   25838:	000491e7 	.word	0x000491e7
   2583c:	00049215 	.word	0x00049215
   25840:	00049239 	.word	0x00049239
   25844:	0004924f 	.word	0x0004924f

00025848 <stream_flash_init>:
}

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   25848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2584c:	460e      	mov	r6, r1
   2584e:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
   25852:	4692      	mov	sl, r2
   25854:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   25856:	4604      	mov	r4, r0
   25858:	b1b8      	cbz	r0, 2588a <stream_flash_init+0x42>
   2585a:	b1b1      	cbz	r1, 2588a <stream_flash_init+0x42>
   2585c:	b1aa      	cbz	r2, 2588a <stream_flash_init+0x42>
		return -EFAULT;
	}

	size_t layout_size = 0;
   2585e:	2300      	movs	r3, #0
	size_t total_size = 0;
	const struct flash_pages_layout *layout;
	const struct flash_driver_api *api = fdev->api;

	if (buf_len % flash_get_write_block_size(fdev)) {
   25860:	4608      	mov	r0, r1
	const struct flash_driver_api *api = fdev->api;
   25862:	f8d1 b008 	ldr.w	fp, [r1, #8]
	size_t layout_size = 0;
   25866:	9300      	str	r3, [sp, #0]
	if (buf_len % flash_get_write_block_size(fdev)) {
   25868:	f01c fce1 	bl	4222e <flash_get_write_block_size>
   2586c:	fbb7 f5f0 	udiv	r5, r7, r0
   25870:	fb05 7510 	mls	r5, r5, r0, r7
   25874:	b165      	cbz	r5, 25890 <stream_flash_init+0x48>
   25876:	482e      	ldr	r0, [pc, #184]	; (25930 <stream_flash_init+0xe8>)
   25878:	4b2e      	ldr	r3, [pc, #184]	; (25934 <stream_flash_init+0xec>)
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   2587a:	492f      	ldr	r1, [pc, #188]	; (25938 <stream_flash_init+0xf0>)
   2587c:	1ac0      	subs	r0, r0, r3
   2587e:	08c0      	lsrs	r0, r0, #3
   25880:	0180      	lsls	r0, r0, #6

	}

	if ((offset + size) > total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
   25882:	f040 0001 	orr.w	r0, r0, #1
   25886:	f01b ffcb 	bl	41820 <log_string_sync>
		return -EFAULT;
   2588a:	f06f 000d 	mvn.w	r0, #13
   2588e:	e04b      	b.n	25928 <stream_flash_init+0xe0>
	api->page_layout(fdev, &layout, &layout_size);
   25890:	f8db 3014 	ldr.w	r3, [fp, #20]
   25894:	466a      	mov	r2, sp
   25896:	4630      	mov	r0, r6
   25898:	a901      	add	r1, sp, #4
   2589a:	4798      	blx	r3
	for (int i = 0; i < layout_size; i++) {
   2589c:	e9dd bc00 	ldrd	fp, ip, [sp]
   258a0:	4628      	mov	r0, r5
   258a2:	4663      	mov	r3, ip
   258a4:	462a      	mov	r2, r5
   258a6:	4593      	cmp	fp, r2
   258a8:	d10c      	bne.n	258c4 <stream_flash_init+0x7c>
   258aa:	b100      	cbz	r0, 258ae <stream_flash_init+0x66>
   258ac:	9301      	str	r3, [sp, #4]
	if ((offset + size) > total_size ||
   258ae:	eb08 0309 	add.w	r3, r8, r9
   258b2:	42ab      	cmp	r3, r5
   258b4:	d91b      	bls.n	258ee <stream_flash_init+0xa6>
   258b6:	481e      	ldr	r0, [pc, #120]	; (25930 <stream_flash_init+0xe8>)
   258b8:	4b1e      	ldr	r3, [pc, #120]	; (25934 <stream_flash_init+0xec>)
		LOG_ERR("Incorrect parameter");
   258ba:	4920      	ldr	r1, [pc, #128]	; (2593c <stream_flash_init+0xf4>)
   258bc:	1ac0      	subs	r0, r0, r3
   258be:	08c0      	lsrs	r0, r0, #3
   258c0:	0180      	lsls	r0, r0, #6
   258c2:	e7de      	b.n	25882 <stream_flash_init+0x3a>
		total_size += layout->pages_count * layout->pages_size;
   258c4:	f8d3 e004 	ldr.w	lr, [r3, #4]
   258c8:	f85c 1032 	ldr.w	r1, [ip, r2, lsl #3]
		if (buf_len > layout->pages_size) {
   258cc:	45be      	cmp	lr, r7
		total_size += layout->pages_count * layout->pages_size;
   258ce:	fb01 550e 	mla	r5, r1, lr, r5
		if (buf_len > layout->pages_size) {
   258d2:	d208      	bcs.n	258e6 <stream_flash_init+0x9e>
   258d4:	b100      	cbz	r0, 258d8 <stream_flash_init+0x90>
   258d6:	9301      	str	r3, [sp, #4]
   258d8:	4815      	ldr	r0, [pc, #84]	; (25930 <stream_flash_init+0xe8>)
   258da:	4b16      	ldr	r3, [pc, #88]	; (25934 <stream_flash_init+0xec>)
			LOG_ERR("Buffer size is bigger than page");
   258dc:	4918      	ldr	r1, [pc, #96]	; (25940 <stream_flash_init+0xf8>)
   258de:	1ac0      	subs	r0, r0, r3
   258e0:	08c0      	lsrs	r0, r0, #3
   258e2:	0180      	lsls	r0, r0, #6
   258e4:	e7cd      	b.n	25882 <stream_flash_init+0x3a>
	for (int i = 0; i < layout_size; i++) {
   258e6:	2001      	movs	r0, #1
		layout++;
   258e8:	3308      	adds	r3, #8
	for (int i = 0; i < layout_size; i++) {
   258ea:	3201      	adds	r2, #1
   258ec:	e7db      	b.n	258a6 <stream_flash_init+0x5e>
	    offset % flash_get_write_block_size(fdev)) {
   258ee:	4630      	mov	r0, r6
   258f0:	f01c fc9d 	bl	4222e <flash_get_write_block_size>
   258f4:	fbb8 f3f0 	udiv	r3, r8, r0
   258f8:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > total_size ||
   258fc:	2800      	cmp	r0, #0
   258fe:	d1da      	bne.n	258b6 <stream_flash_init+0x6e>
		return -EFAULT;
	}

	ctx->fdev = fdev;
	ctx->buf = buf;
	ctx->buf_len = buf_len;
   25900:	e9c4 a700 	strd	sl, r7, [r4]
	ctx->fdev = fdev;
   25904:	60e6      	str	r6, [r4, #12]
	ctx->bytes_written = 0;
   25906:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   25908:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   2590a:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? total_size - offset : size);
   2590e:	f1b9 0f00 	cmp.w	r9, #0
   25912:	d101      	bne.n	25918 <stream_flash_init+0xd0>
   25914:	eba5 0908 	sub.w	r9, r5, r8
	ctx->callback = cb;
   25918:	9b0e      	ldr	r3, [sp, #56]	; 0x38

#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
   2591a:	2000      	movs	r0, #0
	ctx->callback = cb;
   2591c:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   2591e:	f04f 33ff 	mov.w	r3, #4294967295
	ctx->available = (size == 0 ? total_size - offset : size);
   25922:	f8c4 9018 	str.w	r9, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   25926:	6223      	str	r3, [r4, #32]
}
   25928:	b003      	add	sp, #12
   2592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2592e:	bf00      	nop
   25930:	000463bc 	.word	0x000463bc
   25934:	000463bc 	.word	0x000463bc
   25938:	00049263 	.word	0x00049263
   2593c:	000492ba 	.word	0x000492ba
   25940:	0004929a 	.word	0x0004929a

00025944 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   25944:	4b10      	ldr	r3, [pc, #64]	; (25988 <settings_save_one+0x44>)
{
   25946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   2594a:	681c      	ldr	r4, [r3, #0]
{
   2594c:	4605      	mov	r5, r0
   2594e:	460e      	mov	r6, r1
   25950:	4617      	mov	r7, r2
	if (!cs) {
   25952:	b1ac      	cbz	r4, 25980 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   25954:	f04f 32ff 	mov.w	r2, #4294967295
   25958:	f04f 33ff 	mov.w	r3, #4294967295
   2595c:	480b      	ldr	r0, [pc, #44]	; (2598c <settings_save_one+0x48>)
   2595e:	f016 fcad 	bl	3c2bc <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   25962:	6863      	ldr	r3, [r4, #4]
   25964:	4632      	mov	r2, r6
   25966:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2596a:	4629      	mov	r1, r5
   2596c:	463b      	mov	r3, r7
   2596e:	4620      	mov	r0, r4
   25970:	47c0      	blx	r8
   25972:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   25974:	4805      	ldr	r0, [pc, #20]	; (2598c <settings_save_one+0x48>)
   25976:	f016 fd9b 	bl	3c4b0 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   2597a:	4620      	mov	r0, r4
   2597c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   25980:	f06f 0401 	mvn.w	r4, #1
   25984:	e7f9      	b.n	2597a <settings_save_one+0x36>
   25986:	bf00      	nop
   25988:	200246e4 	.word	0x200246e4
   2598c:	20020b80 	.word	0x20020b80

00025990 <settings_src_register>:
	parent->next = child;
   25990:	2300      	movs	r3, #0
   25992:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   25994:	4b04      	ldr	r3, [pc, #16]	; (259a8 <settings_src_register+0x18>)
   25996:	685a      	ldr	r2, [r3, #4]
   25998:	b912      	cbnz	r2, 259a0 <settings_src_register+0x10>
	list->head = node;
   2599a:	e9c3 0000 	strd	r0, r0, [r3]
}
   2599e:	4770      	bx	lr
	parent->next = child;
   259a0:	6010      	str	r0, [r2, #0]
	list->tail = node;
   259a2:	6058      	str	r0, [r3, #4]
}
   259a4:	4770      	bx	lr
   259a6:	bf00      	nop
   259a8:	200246dc 	.word	0x200246dc

000259ac <settings_dst_register>:
	settings_save_dst = cs;
   259ac:	4b01      	ldr	r3, [pc, #4]	; (259b4 <settings_dst_register+0x8>)
   259ae:	6018      	str	r0, [r3, #0]
}
   259b0:	4770      	bx	lr
   259b2:	bf00      	nop
   259b4:	200246e4 	.word	0x200246e4

000259b8 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   259b8:	2300      	movs	r3, #0
{
   259ba:	b530      	push	{r4, r5, lr}
   259bc:	b085      	sub	sp, #20
   259be:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   259c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   259c4:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   259c6:	f04f 33ff 	mov.w	r3, #4294967295
   259ca:	f04f 32ff 	mov.w	r2, #4294967295
   259ce:	480d      	ldr	r0, [pc, #52]	; (25a04 <settings_load_subtree+0x4c>)
   259d0:	f016 fc74 	bl	3c2bc <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   259d4:	4b0c      	ldr	r3, [pc, #48]	; (25a08 <settings_load_subtree+0x50>)
   259d6:	681c      	ldr	r4, [r3, #0]
   259d8:	2c00      	cmp	r4, #0
   259da:	bf38      	it	cc
   259dc:	2400      	movcc	r4, #0
   259de:	b13c      	cbz	r4, 259f0 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   259e0:	6863      	ldr	r3, [r4, #4]
   259e2:	4620      	mov	r0, r4
   259e4:	681b      	ldr	r3, [r3, #0]
   259e6:	a901      	add	r1, sp, #4
   259e8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   259ea:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   259ec:	2c00      	cmp	r4, #0
   259ee:	d1f6      	bne.n	259de <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   259f0:	4628      	mov	r0, r5
   259f2:	f000 f8c7 	bl	25b84 <settings_commit_subtree>
   259f6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   259f8:	4802      	ldr	r0, [pc, #8]	; (25a04 <settings_load_subtree+0x4c>)
   259fa:	f016 fd59 	bl	3c4b0 <z_impl_k_mutex_unlock>
}
   259fe:	4620      	mov	r0, r4
   25a00:	b005      	add	sp, #20
   25a02:	bd30      	pop	{r4, r5, pc}
   25a04:	20020b80 	.word	0x20020b80
   25a08:	200246dc 	.word	0x200246dc

00025a0c <settings_store_init>:
	list->head = NULL;
   25a0c:	2200      	movs	r2, #0
   25a0e:	4b02      	ldr	r3, [pc, #8]	; (25a18 <settings_store_init+0xc>)
	list->tail = NULL;
   25a10:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   25a14:	4770      	bx	lr
   25a16:	bf00      	nop
   25a18:	200246dc 	.word	0x200246dc

00025a1c <settings_init>:
	list->head = NULL;
   25a1c:	2200      	movs	r2, #0
   25a1e:	4b02      	ldr	r3, [pc, #8]	; (25a28 <settings_init+0xc>)
	list->tail = NULL;
   25a20:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   25a24:	f7ff bff2 	b.w	25a0c <settings_store_init>
   25a28:	200246e8 	.word	0x200246e8

00025a2c <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   25a2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25a30:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   25a32:	460e      	mov	r6, r1
   25a34:	b109      	cbz	r1, 25a3a <settings_parse_and_lookup+0xe>
		*next = NULL;
   25a36:	2300      	movs	r3, #0
   25a38:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25a3a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 25aec <settings_parse_and_lookup+0xc0>
   25a3e:	2500      	movs	r5, #0
   25a40:	46c2      	mov	sl, r8
   25a42:	4c25      	ldr	r4, [pc, #148]	; (25ad8 <settings_parse_and_lookup+0xac>)
   25a44:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 25af0 <settings_parse_and_lookup+0xc4>
   25a48:	4544      	cmp	r4, r8
   25a4a:	d90c      	bls.n	25a66 <settings_parse_and_lookup+0x3a>
   25a4c:	4923      	ldr	r1, [pc, #140]	; (25adc <settings_parse_and_lookup+0xb0>)
   25a4e:	2394      	movs	r3, #148	; 0x94
   25a50:	464a      	mov	r2, r9
   25a52:	4823      	ldr	r0, [pc, #140]	; (25ae0 <settings_parse_and_lookup+0xb4>)
   25a54:	f01b fcb6 	bl	413c4 <printk>
   25a58:	4822      	ldr	r0, [pc, #136]	; (25ae4 <settings_parse_and_lookup+0xb8>)
   25a5a:	f01b fcb3 	bl	413c4 <printk>
   25a5e:	2194      	movs	r1, #148	; 0x94
   25a60:	4648      	mov	r0, r9
   25a62:	f01b fecc 	bl	417fe <assert_post_action>
   25a66:	4554      	cmp	r4, sl
   25a68:	d308      	bcc.n	25a7c <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   25a6a:	4b1f      	ldr	r3, [pc, #124]	; (25ae8 <settings_parse_and_lookup+0xbc>)
   25a6c:	681c      	ldr	r4, [r3, #0]
   25a6e:	b10c      	cbz	r4, 25a74 <settings_parse_and_lookup+0x48>
   25a70:	3c14      	subs	r4, #20
   25a72:	b9c4      	cbnz	r4, 25aa6 <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   25a74:	4628      	mov	r0, r5
   25a76:	b002      	add	sp, #8
   25a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   25a7c:	4638      	mov	r0, r7
   25a7e:	6821      	ldr	r1, [r4, #0]
   25a80:	aa01      	add	r2, sp, #4
   25a82:	f01c fc46 	bl	42312 <settings_name_steq>
   25a86:	b160      	cbz	r0, 25aa2 <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
   25a88:	b925      	cbnz	r5, 25a94 <settings_parse_and_lookup+0x68>
			if (next) {
   25a8a:	b10e      	cbz	r6, 25a90 <settings_parse_and_lookup+0x64>
				*next = tmpnext;
   25a8c:	9b01      	ldr	r3, [sp, #4]
   25a8e:	6033      	str	r3, [r6, #0]
   25a90:	4625      	mov	r5, r4
   25a92:	e006      	b.n	25aa2 <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   25a94:	2200      	movs	r2, #0
   25a96:	6829      	ldr	r1, [r5, #0]
   25a98:	6820      	ldr	r0, [r4, #0]
   25a9a:	f01c fc3a 	bl	42312 <settings_name_steq>
   25a9e:	2800      	cmp	r0, #0
   25aa0:	d1f3      	bne.n	25a8a <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25aa2:	3414      	adds	r4, #20
   25aa4:	e7d0      	b.n	25a48 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   25aa6:	4638      	mov	r0, r7
   25aa8:	6821      	ldr	r1, [r4, #0]
   25aaa:	aa01      	add	r2, sp, #4
   25aac:	f01c fc31 	bl	42312 <settings_name_steq>
   25ab0:	b160      	cbz	r0, 25acc <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
   25ab2:	b925      	cbnz	r5, 25abe <settings_parse_and_lookup+0x92>
			if (next) {
   25ab4:	b10e      	cbz	r6, 25aba <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
   25ab6:	9b01      	ldr	r3, [sp, #4]
   25ab8:	6033      	str	r3, [r6, #0]
   25aba:	4625      	mov	r5, r4
   25abc:	e006      	b.n	25acc <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   25abe:	2200      	movs	r2, #0
   25ac0:	6829      	ldr	r1, [r5, #0]
   25ac2:	6820      	ldr	r0, [r4, #0]
   25ac4:	f01c fc25 	bl	42312 <settings_name_steq>
   25ac8:	2800      	cmp	r0, #0
   25aca:	d1f3      	bne.n	25ab4 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25acc:	f114 0f14 	cmn.w	r4, #20
   25ad0:	d0d0      	beq.n	25a74 <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25ad2:	6964      	ldr	r4, [r4, #20]
   25ad4:	e7cb      	b.n	25a6e <settings_parse_and_lookup+0x42>
   25ad6:	bf00      	nop
   25ad8:	000463a8 	.word	0x000463a8
   25adc:	0004930d 	.word	0x0004930d
   25ae0:	00048156 	.word	0x00048156
   25ae4:	000490c4 	.word	0x000490c4
   25ae8:	200246e8 	.word	0x200246e8
   25aec:	000463bc 	.word	0x000463bc
   25af0:	000492db 	.word	0x000492db

00025af4 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   25af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25af8:	b086      	sub	sp, #24
   25afa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   25afc:	4605      	mov	r5, r0
   25afe:	460c      	mov	r4, r1
   25b00:	4616      	mov	r6, r2
	int rc;
	const char *name_key = name;
   25b02:	9005      	str	r0, [sp, #20]

	if (load_arg && load_arg->subtree &&
   25b04:	b1bf      	cbz	r7, 25b36 <settings_call_set_handler+0x42>
   25b06:	6839      	ldr	r1, [r7, #0]
   25b08:	b181      	cbz	r1, 25b2c <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   25b0a:	aa05      	add	r2, sp, #20
   25b0c:	9303      	str	r3, [sp, #12]
   25b0e:	f01c fc00 	bl	42312 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   25b12:	9b03      	ldr	r3, [sp, #12]
   25b14:	b950      	cbnz	r0, 25b2c <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   25b16:	2000      	movs	r0, #0
   25b18:	e005      	b.n	25b26 <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   25b1a:	68ba      	ldr	r2, [r7, #8]
   25b1c:	4621      	mov	r1, r4
   25b1e:	9200      	str	r2, [sp, #0]
   25b20:	9805      	ldr	r0, [sp, #20]
   25b22:	4632      	mov	r2, r6
   25b24:	47c0      	blx	r8
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   25b26:	b006      	add	sp, #24
   25b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (load_arg && load_arg->cb) {
   25b2c:	f8d7 8004 	ldr.w	r8, [r7, #4]
   25b30:	f1b8 0f00 	cmp.w	r8, #0
   25b34:	d1f1      	bne.n	25b1a <settings_call_set_handler+0x26>
		ch = settings_parse_and_lookup(name, &name_key);
   25b36:	4628      	mov	r0, r5
   25b38:	a905      	add	r1, sp, #20
   25b3a:	9303      	str	r3, [sp, #12]
   25b3c:	f7ff ff76 	bl	25a2c <settings_parse_and_lookup>
		if (!ch) {
   25b40:	2800      	cmp	r0, #0
   25b42:	d0e8      	beq.n	25b16 <settings_call_set_handler+0x22>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   25b44:	4632      	mov	r2, r6
   25b46:	6887      	ldr	r7, [r0, #8]
   25b48:	4621      	mov	r1, r4
   25b4a:	9b03      	ldr	r3, [sp, #12]
   25b4c:	9805      	ldr	r0, [sp, #20]
   25b4e:	47b8      	blx	r7
		if (rc != 0) {
   25b50:	4606      	mov	r6, r0
   25b52:	2800      	cmp	r0, #0
   25b54:	d0df      	beq.n	25b16 <settings_call_set_handler+0x22>
   25b56:	4b08      	ldr	r3, [pc, #32]	; (25b78 <settings_call_set_handler+0x84>)
   25b58:	4c08      	ldr	r4, [pc, #32]	; (25b7c <settings_call_set_handler+0x88>)
			LOG_ERR("set-value failure. key: %s error(%d)",
   25b5a:	4628      	mov	r0, r5
   25b5c:	1ae4      	subs	r4, r4, r3
   25b5e:	f01b fe72 	bl	41846 <log_strdup>
   25b62:	08e4      	lsrs	r4, r4, #3
   25b64:	01a4      	lsls	r4, r4, #6
   25b66:	f044 0401 	orr.w	r4, r4, #1
   25b6a:	4602      	mov	r2, r0
   25b6c:	4633      	mov	r3, r6
   25b6e:	4620      	mov	r0, r4
   25b70:	4903      	ldr	r1, [pc, #12]	; (25b80 <settings_call_set_handler+0x8c>)
   25b72:	f01b fe55 	bl	41820 <log_string_sync>
   25b76:	e7ce      	b.n	25b16 <settings_call_set_handler+0x22>
   25b78:	000463bc 	.word	0x000463bc
   25b7c:	000464e4 	.word	0x000464e4
   25b80:	00049335 	.word	0x00049335

00025b84 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   25b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25b88:	4f23      	ldr	r7, [pc, #140]	; (25c18 <settings_commit_subtree+0x94>)
{
   25b8a:	4606      	mov	r6, r0
	rc = 0;
   25b8c:	2500      	movs	r5, #0
   25b8e:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25b90:	4c22      	ldr	r4, [pc, #136]	; (25c1c <settings_commit_subtree+0x98>)
   25b92:	f8df 809c 	ldr.w	r8, [pc, #156]	; 25c30 <settings_commit_subtree+0xac>
   25b96:	42bc      	cmp	r4, r7
   25b98:	d90c      	bls.n	25bb4 <settings_commit_subtree+0x30>
   25b9a:	4921      	ldr	r1, [pc, #132]	; (25c20 <settings_commit_subtree+0x9c>)
   25b9c:	23f4      	movs	r3, #244	; 0xf4
   25b9e:	4642      	mov	r2, r8
   25ba0:	4820      	ldr	r0, [pc, #128]	; (25c24 <settings_commit_subtree+0xa0>)
   25ba2:	f01b fc0f 	bl	413c4 <printk>
   25ba6:	4820      	ldr	r0, [pc, #128]	; (25c28 <settings_commit_subtree+0xa4>)
   25ba8:	f01b fc0c 	bl	413c4 <printk>
   25bac:	21f4      	movs	r1, #244	; 0xf4
   25bae:	4640      	mov	r0, r8
   25bb0:	f01b fe25 	bl	417fe <assert_post_action>
   25bb4:	454c      	cmp	r4, r9
   25bb6:	d307      	bcc.n	25bc8 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   25bb8:	4b1c      	ldr	r3, [pc, #112]	; (25c2c <settings_commit_subtree+0xa8>)
   25bba:	681c      	ldr	r4, [r3, #0]
   25bbc:	b10c      	cbz	r4, 25bc2 <settings_commit_subtree+0x3e>
   25bbe:	3c14      	subs	r4, #20
   25bc0:	b9a4      	cbnz	r4, 25bec <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   25bc2:	4628      	mov	r0, r5
   25bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25bc8:	b91e      	cbnz	r6, 25bd2 <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   25bca:	68e3      	ldr	r3, [r4, #12]
   25bcc:	b94b      	cbnz	r3, 25be2 <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25bce:	3414      	adds	r4, #20
   25bd0:	e7e1      	b.n	25b96 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25bd2:	2200      	movs	r2, #0
   25bd4:	4631      	mov	r1, r6
   25bd6:	6820      	ldr	r0, [r4, #0]
   25bd8:	f01c fb9b 	bl	42312 <settings_name_steq>
   25bdc:	2800      	cmp	r0, #0
   25bde:	d1f4      	bne.n	25bca <settings_commit_subtree+0x46>
   25be0:	e7f5      	b.n	25bce <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   25be2:	4798      	blx	r3
				rc = rc2;
   25be4:	2d00      	cmp	r5, #0
   25be6:	bf08      	it	eq
   25be8:	4605      	moveq	r5, r0
   25bea:	e7f0      	b.n	25bce <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25bec:	b936      	cbnz	r6, 25bfc <settings_commit_subtree+0x78>
		if (ch->h_commit) {
   25bee:	68e3      	ldr	r3, [r4, #12]
   25bf0:	b963      	cbnz	r3, 25c0c <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25bf2:	f114 0f14 	cmn.w	r4, #20
   25bf6:	d0e4      	beq.n	25bc2 <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25bf8:	6964      	ldr	r4, [r4, #20]
   25bfa:	e7df      	b.n	25bbc <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25bfc:	2200      	movs	r2, #0
   25bfe:	4631      	mov	r1, r6
   25c00:	6820      	ldr	r0, [r4, #0]
   25c02:	f01c fb86 	bl	42312 <settings_name_steq>
   25c06:	2800      	cmp	r0, #0
   25c08:	d1f1      	bne.n	25bee <settings_commit_subtree+0x6a>
   25c0a:	e7f2      	b.n	25bf2 <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   25c0c:	4798      	blx	r3
				rc = rc2;
   25c0e:	2d00      	cmp	r5, #0
   25c10:	bf08      	it	eq
   25c12:	4605      	moveq	r5, r0
   25c14:	e7ed      	b.n	25bf2 <settings_commit_subtree+0x6e>
   25c16:	bf00      	nop
   25c18:	000463bc 	.word	0x000463bc
   25c1c:	000463a8 	.word	0x000463a8
   25c20:	0004930d 	.word	0x0004930d
   25c24:	00048156 	.word	0x00048156
   25c28:	000490c4 	.word	0x000490c4
   25c2c:	200246e8 	.word	0x200246e8
   25c30:	000492db 	.word	0x000492db

00025c34 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   25c34:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   25c36:	4c06      	ldr	r4, [pc, #24]	; (25c50 <settings_subsys_init+0x1c>)
   25c38:	7823      	ldrb	r3, [r4, #0]
   25c3a:	b93b      	cbnz	r3, 25c4c <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   25c3c:	f7ff feee 	bl	25a1c <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   25c40:	f000 faa0 	bl	26184 <settings_backend_init>

	if (!err) {
   25c44:	b908      	cbnz	r0, 25c4a <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   25c46:	2301      	movs	r3, #1
   25c48:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   25c4a:	bd10      	pop	{r4, pc}
		return 0;
   25c4c:	2000      	movs	r0, #0
   25c4e:	e7fc      	b.n	25c4a <settings_subsys_init+0x16>
   25c50:	2002b0dc 	.word	0x2002b0dc

00025c54 <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   25c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c58:	b08b      	sub	sp, #44	; 0x2c
   25c5a:	9301      	str	r3, [sp, #4]
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
   25c5c:	4b2a      	ldr	r3, [pc, #168]	; (25d08 <settings_line_raw_read_until+0xb4>)
{
   25c5e:	4606      	mov	r6, r0
   25c60:	4688      	mov	r8, r1
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
   25c62:	4615      	mov	r5, r2
	uint8_t rbs = settings_io_cb.rwbs;
   25c64:	f893 a00c 	ldrb.w	sl, [r3, #12]
	if (len_req == 0) {
   25c68:	2a00      	cmp	r2, #0
   25c6a:	d046      	beq.n	25cfa <settings_line_raw_read_until+0xa6>
   25c6c:	4617      	mov	r7, r2
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25c6e:	9302      	str	r3, [sp, #8]
		off = seek / rbs * rbs;
   25c70:	fb96 fbfa 	sdiv	fp, r6, sl
		read_size = sizeof(temp_buf);
   25c74:	2310      	movs	r3, #16
		off = seek / rbs * rbs;
   25c76:	fb0a fb0b 	mul.w	fp, sl, fp
		read_size = sizeof(temp_buf);
   25c7a:	9305      	str	r3, [sp, #20]
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25c7c:	9b02      	ldr	r3, [sp, #8]
   25c7e:	4659      	mov	r1, fp
   25c80:	681c      	ldr	r4, [r3, #0]
   25c82:	9815      	ldr	r0, [sp, #84]	; 0x54
   25c84:	ab05      	add	r3, sp, #20
   25c86:	aa06      	add	r2, sp, #24
   25c88:	47a0      	blx	r4
		if (rc) {
   25c8a:	4604      	mov	r4, r0
   25c8c:	2800      	cmp	r0, #0
   25c8e:	d137      	bne.n	25d00 <settings_line_raw_read_until+0xac>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   25c90:	9a05      	ldr	r2, [sp, #20]
   25c92:	eba6 0b0b 	sub.w	fp, r6, fp
   25c96:	eba2 020b 	sub.w	r2, r2, fp
		len = MIN(rem_size, len);
   25c9a:	42ba      	cmp	r2, r7
   25c9c:	bf28      	it	cs
   25c9e:	463a      	movcs	r2, r7
   25ca0:	ab06      	add	r3, sp, #24
   25ca2:	449b      	add	fp, r3

		if (until_char != NULL) {
   25ca4:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   25ca6:	4691      	mov	r9, r2
		if (until_char != NULL) {
   25ca8:	b31b      	cbz	r3, 25cf2 <settings_line_raw_read_until+0x9e>
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   25caa:	4658      	mov	r0, fp
   25cac:	7819      	ldrb	r1, [r3, #0]
   25cae:	f01e fffe 	bl	44cae <memchr>
			if (pend != NULL) {
   25cb2:	b300      	cbz	r0, 25cf6 <settings_line_raw_read_until+0xa2>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   25cb4:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   25cb6:	eba0 090b 	sub.w	r9, r0, fp
   25cba:	4659      	mov	r1, fp
   25cbc:	464a      	mov	r2, r9
   25cbe:	4640      	mov	r0, r8
   25cc0:	9303      	str	r3, [sp, #12]
   25cc2:	f01f f810 	bl	44ce6 <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   25cc6:	9905      	ldr	r1, [sp, #20]
   25cc8:	9b03      	ldr	r3, [sp, #12]
   25cca:	290f      	cmp	r1, #15
		rem_size -= len;
   25ccc:	eba7 0709 	sub.w	r7, r7, r9
		if (exp_size > read_size || rc) {
   25cd0:	d904      	bls.n	25cdc <settings_line_raw_read_until+0x88>
   25cd2:	b91b      	cbnz	r3, 25cdc <settings_line_raw_read_until+0x88>
			break;
		}

		out += len;
   25cd4:	44c8      	add	r8, r9
		seek += len;
   25cd6:	444e      	add	r6, r9
	while (rem_size) {
   25cd8:	2f00      	cmp	r7, #0
   25cda:	d1c9      	bne.n	25c70 <settings_line_raw_read_until+0x1c>
	}

	*len_read = len_req - rem_size;
   25cdc:	9a01      	ldr	r2, [sp, #4]
   25cde:	1bed      	subs	r5, r5, r7
   25ce0:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   25ce2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   25ce4:	b10a      	cbz	r2, 25cea <settings_line_raw_read_until+0x96>
		return (rc) ? 0 : 1;
   25ce6:	f083 0401 	eor.w	r4, r3, #1
	}

	return 0;
}
   25cea:	4620      	mov	r0, r4
   25cec:	b00b      	add	sp, #44	; 0x2c
   25cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25cf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25cf4:	e7e1      	b.n	25cba <settings_line_raw_read_until+0x66>
   25cf6:	4623      	mov	r3, r4
   25cf8:	e7df      	b.n	25cba <settings_line_raw_read_until+0x66>
		return -EINVAL;
   25cfa:	f06f 0415 	mvn.w	r4, #21
   25cfe:	e7f4      	b.n	25cea <settings_line_raw_read_until+0x96>
			return -EIO;
   25d00:	f06f 0404 	mvn.w	r4, #4
   25d04:	e7f1      	b.n	25cea <settings_line_raw_read_until+0x96>
   25d06:	bf00      	nop
   25d08:	200246f0 	.word	0x200246f0

00025d0c <settings_line_write>:
{
   25d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
   25d10:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 25dd0 <settings_line_write+0xc4>
{
   25d14:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
   25d16:	f89a 800c 	ldrb.w	r8, [sl, #12]
{
   25d1a:	4681      	mov	r9, r0
   25d1c:	468b      	mov	fp, r1
   25d1e:	4617      	mov	r7, r2
   25d20:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   25d22:	f7f7 fa9b 	bl	1d25c <strlen>
	w_size = rem - rem % wbs;
   25d26:	fbb0 f4f8 	udiv	r4, r0, r8
   25d2a:	fb08 0414 	mls	r4, r8, r4, r0
   25d2e:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   25d30:	462b      	mov	r3, r5
   25d32:	f8da 6004 	ldr.w	r6, [sl, #4]
   25d36:	464a      	mov	r2, r9
   25d38:	9901      	ldr	r1, [sp, #4]
   25d3a:	9810      	ldr	r0, [sp, #64]	; 0x40
   25d3c:	47b0      	blx	r6
	w_loc += w_size;
   25d3e:	9b01      	ldr	r3, [sp, #4]
   25d40:	442b      	add	r3, r5
   25d42:	461e      	mov	r6, r3
	if (rem) {
   25d44:	b134      	cbz	r4, 25d54 <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   25d46:	2310      	movs	r3, #16
   25d48:	4622      	mov	r2, r4
   25d4a:	eb09 0105 	add.w	r1, r9, r5
   25d4e:	a802      	add	r0, sp, #8
   25d50:	f01e ffd6 	bl	44d00 <__memcpy_chk>
	w_buf[rem] = '=';
   25d54:	223d      	movs	r2, #61	; 0x3d
   25d56:	ab06      	add	r3, sp, #24
   25d58:	4423      	add	r3, r4
   25d5a:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   25d5e:	f104 0901 	add.w	r9, r4, #1
		while (w_size < sizeof(w_buf)) {
   25d62:	f1b9 0f0f 	cmp.w	r9, #15
   25d66:	d90b      	bls.n	25d80 <settings_line_write+0x74>
   25d68:	2400      	movs	r4, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   25d6a:	464b      	mov	r3, r9
   25d6c:	4631      	mov	r1, r6
   25d6e:	f8da 5004 	ldr.w	r5, [sl, #4]
   25d72:	9810      	ldr	r0, [sp, #64]	; 0x40
   25d74:	aa02      	add	r2, sp, #8
   25d76:	47a8      	blx	r5
		if (rc) {
   25d78:	bb20      	cbnz	r0, 25dc4 <settings_line_write+0xb8>
		if (done) {
   25d7a:	bb2c      	cbnz	r4, 25dc8 <settings_line_write+0xbc>
		w_loc += w_size;
   25d7c:	444e      	add	r6, r9
		w_size = 0;
   25d7e:	46a1      	mov	r9, r4
				if (rem) {
   25d80:	b17f      	cbz	r7, 25da2 <settings_line_write+0x96>
					add = MIN(rem, sizeof(w_buf) - w_size);
   25d82:	f1c9 0410 	rsb	r4, r9, #16
   25d86:	42bc      	cmp	r4, r7
   25d88:	bf28      	it	cs
   25d8a:	463c      	movcs	r4, r7
   25d8c:	ab02      	add	r3, sp, #8
   25d8e:	4659      	mov	r1, fp
   25d90:	eb03 0009 	add.w	r0, r3, r9
   25d94:	4622      	mov	r2, r4
   25d96:	f01e ffa6 	bl	44ce6 <memcpy>
					value += add;
   25d9a:	44a3      	add	fp, r4
					rem -= add;
   25d9c:	1b3f      	subs	r7, r7, r4
					w_size += add;
   25d9e:	44a1      	add	r9, r4
   25da0:	e7df      	b.n	25d62 <settings_line_write+0x56>
					add = (w_size) % wbs;
   25da2:	fbb9 f4f8 	udiv	r4, r9, r8
   25da6:	fb08 9414 	mls	r4, r8, r4, r9
					if (add) {
   25daa:	b14c      	cbz	r4, 25dc0 <settings_line_write+0xb4>
						add = wbs - add;
   25dac:	eba8 0404 	sub.w	r4, r8, r4
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   25db0:	ab02      	add	r3, sp, #8
   25db2:	eb03 0009 	add.w	r0, r3, r9
   25db6:	4622      	mov	r2, r4
   25db8:	4639      	mov	r1, r7
   25dba:	f01e ffb4 	bl	44d26 <memset>
						w_size += add;
   25dbe:	44a1      	add	r9, r4
					done = true;
   25dc0:	2401      	movs	r4, #1
   25dc2:	e7d2      	b.n	25d6a <settings_line_write+0x5e>
			return -EIO;
   25dc4:	f06f 0004 	mvn.w	r0, #4
}
   25dc8:	b007      	add	sp, #28
   25dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25dce:	bf00      	nop
   25dd0:	200246f0 	.word	0x200246f0

00025dd4 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25dd4:	4b03      	ldr	r3, [pc, #12]	; (25de4 <settings_line_val_get_len+0x10>)
{
   25dd6:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25dd8:	689b      	ldr	r3, [r3, #8]
{
   25dda:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25ddc:	4608      	mov	r0, r1
   25dde:	4798      	blx	r3
		return 0;
	}
#else
	return len - val_off;
#endif
}
   25de0:	1b00      	subs	r0, r0, r4
   25de2:	bd10      	pop	{r4, pc}
   25de4:	200246f0 	.word	0x200246f0

00025de8 <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   25de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25dec:	4680      	mov	r8, r0
   25dee:	468a      	mov	sl, r1
   25df0:	4691      	mov	r9, r2
   25df2:	461d      	mov	r5, r3
	int rc = -EINVAL;
   25df4:	f06f 0015 	mvn.w	r0, #21
{
   25df8:	b086      	sub	sp, #24
   25dfa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   25dfc:	4f0f      	ldr	r7, [pc, #60]	; (25e3c <settings_line_entry_copy+0x54>)
	while (len) {
   25dfe:	b916      	cbnz	r6, 25e06 <settings_line_entry_copy+0x1e>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   25e00:	b006      	add	sp, #24
   25e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   25e06:	2e10      	cmp	r6, #16
   25e08:	4633      	mov	r3, r6
   25e0a:	bf28      	it	cs
   25e0c:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   25e0e:	4629      	mov	r1, r5
		chunk_size = MIN(len, sizeof(buf));
   25e10:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   25e12:	4648      	mov	r0, r9
   25e14:	683c      	ldr	r4, [r7, #0]
   25e16:	ab01      	add	r3, sp, #4
   25e18:	aa02      	add	r2, sp, #8
   25e1a:	47a0      	blx	r4
		if (rc) {
   25e1c:	2800      	cmp	r0, #0
   25e1e:	d1ef      	bne.n	25e00 <settings_line_entry_copy+0x18>
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, chunk_size);
   25e20:	4651      	mov	r1, sl
   25e22:	4640      	mov	r0, r8
   25e24:	9b01      	ldr	r3, [sp, #4]
   25e26:	687c      	ldr	r4, [r7, #4]
   25e28:	aa02      	add	r2, sp, #8
   25e2a:	47a0      	blx	r4
		if (rc) {
   25e2c:	2800      	cmp	r0, #0
   25e2e:	d1e7      	bne.n	25e00 <settings_line_entry_copy+0x18>
		src_off += chunk_size;
   25e30:	9b01      	ldr	r3, [sp, #4]
   25e32:	441d      	add	r5, r3
		dst_off += chunk_size;
   25e34:	449a      	add	sl, r3
		len -= chunk_size;
   25e36:	1af6      	subs	r6, r6, r3
   25e38:	e7e1      	b.n	25dfe <settings_line_entry_copy+0x16>
   25e3a:	bf00      	nop
   25e3c:	200246f0 	.word	0x200246f0

00025e40 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
   25e40:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   25e42:	4c03      	ldr	r4, [pc, #12]	; (25e50 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   25e44:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   25e48:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   25e4a:	7323      	strb	r3, [r4, #12]
}
   25e4c:	bd10      	pop	{r4, pc}
   25e4e:	bf00      	nop
   25e50:	200246f0 	.word	0x200246f0

00025e54 <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   25e54:	b530      	push	{r4, r5, lr}
   25e56:	4604      	mov	r4, r0
   25e58:	b085      	sub	sp, #20
   25e5a:	4610      	mov	r0, r2
   25e5c:	461d      	mov	r5, r3
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
   25e5e:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   25e62:	f7ff ffb7 	bl	25dd4 <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   25e66:	4a04      	ldr	r2, [pc, #16]	; (25e78 <settings_line_load_cb+0x24>)
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   25e68:	4601      	mov	r1, r0
	return settings_call_set_handler(name, len, settings_line_read_cb,
   25e6a:	9500      	str	r5, [sp, #0]
   25e6c:	4620      	mov	r0, r4
   25e6e:	ab02      	add	r3, sp, #8
   25e70:	f7ff fe40 	bl	25af4 <settings_call_set_handler>
					 &value_ctx, arg);
}
   25e74:	b005      	add	sp, #20
   25e76:	bd30      	pop	{r4, r5, pc}
   25e78:	00042373 	.word	0x00042373

00025e7c <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   25e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e80:	4607      	mov	r7, r0
   25e82:	b0b3      	sub	sp, #204	; 0xcc
   25e84:	4688      	mov	r8, r1
   25e86:	4691      	mov	r9, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   25e88:	2100      	movs	r1, #0
   25e8a:	2210      	movs	r2, #16
   25e8c:	a802      	add	r0, sp, #8
{
   25e8e:	469a      	mov	sl, r3
	struct fcb_entry_ctx entry_ctx = {
   25e90:	f01e ff49 	bl	44d26 <memset>
   25e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   25e96:	4c2c      	ldr	r4, [pc, #176]	; (25f48 <settings_fcb_load_priv+0xcc>)
   25e98:	9306      	str	r3, [sp, #24]
   25e9a:	4b2c      	ldr	r3, [pc, #176]	; (25f4c <settings_fcb_load_priv+0xd0>)
   25e9c:	1ae4      	subs	r4, r4, r3
   25e9e:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("failed to load line");
   25ea0:	01a4      	lsls	r4, r4, #6
   25ea2:	f044 0401 	orr.w	r4, r4, #1
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   25ea6:	f107 0b08 	add.w	fp, r7, #8
   25eaa:	4658      	mov	r0, fp
   25eac:	a902      	add	r1, sp, #8
   25eae:	f01b ff51 	bl	41d54 <fcb_getnext>
   25eb2:	b118      	cbz	r0, 25ebc <settings_fcb_load_priv+0x40>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   25eb4:	2000      	movs	r0, #0
   25eb6:	b033      	add	sp, #204	; 0xcc
   25eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   25ebc:	466a      	mov	r2, sp
   25ebe:	214a      	movs	r1, #74	; 0x4a
   25ec0:	ab02      	add	r3, sp, #8
   25ec2:	a80c      	add	r0, sp, #48	; 0x30
   25ec4:	f01c fa64 	bl	42390 <settings_line_name_read>
		if (rc) {
   25ec8:	b128      	cbz	r0, 25ed6 <settings_fcb_load_priv+0x5a>
			LOG_ERR("Failed to load line name: %d", rc);
   25eca:	4602      	mov	r2, r0
   25ecc:	4920      	ldr	r1, [pc, #128]	; (25f50 <settings_fcb_load_priv+0xd4>)
   25ece:	4620      	mov	r0, r4
   25ed0:	f01b fca6 	bl	41820 <log_string_sync>
			continue;
   25ed4:	e7e7      	b.n	25ea6 <settings_fcb_load_priv+0x2a>
		name[name_len] = '\0';
   25ed6:	9b00      	ldr	r3, [sp, #0]
   25ed8:	aa32      	add	r2, sp, #200	; 0xc8
   25eda:	441a      	add	r2, r3
   25edc:	f802 0c98 	strb.w	r0, [r2, #-152]
		if (filter_duplicates &&
   25ee0:	f1ba 0f00 	cmp.w	sl, #0
   25ee4:	d010      	beq.n	25f08 <settings_fcb_load_priv+0x8c>
	if (off >= entry_ctx->loc.fe_data_len) {
   25ee6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   25eea:	3301      	adds	r3, #1
   25eec:	4293      	cmp	r3, r2
   25eee:	dada      	bge.n	25ea6 <settings_fcb_load_priv+0x2a>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   25ef0:	ad07      	add	r5, sp, #28
   25ef2:	ae02      	add	r6, sp, #8
   25ef4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   25ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   25ef8:	6833      	ldr	r3, [r6, #0]
   25efa:	602b      	str	r3, [r5, #0]
			LOG_ERR("failed to load line");
   25efc:	4d15      	ldr	r5, [pc, #84]	; (25f54 <settings_fcb_load_priv+0xd8>)
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   25efe:	4658      	mov	r0, fp
   25f00:	a907      	add	r1, sp, #28
   25f02:	f01b ff27 	bl	41d54 <fcb_getnext>
   25f06:	b130      	cbz	r0, 25f16 <settings_fcb_load_priv+0x9a>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   25f08:	9a00      	ldr	r2, [sp, #0]
   25f0a:	464b      	mov	r3, r9
   25f0c:	3201      	adds	r2, #1
   25f0e:	a902      	add	r1, sp, #8
   25f10:	a80c      	add	r0, sp, #48	; 0x30
   25f12:	47c0      	blx	r8
   25f14:	e7c7      	b.n	25ea6 <settings_fcb_load_priv+0x2a>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   25f16:	214a      	movs	r1, #74	; 0x4a
   25f18:	ab07      	add	r3, sp, #28
   25f1a:	aa01      	add	r2, sp, #4
   25f1c:	a81f      	add	r0, sp, #124	; 0x7c
   25f1e:	f01c fa37 	bl	42390 <settings_line_name_read>
   25f22:	b120      	cbz	r0, 25f2e <settings_fcb_load_priv+0xb2>
			LOG_ERR("failed to load line");
   25f24:	4629      	mov	r1, r5
   25f26:	4620      	mov	r0, r4
   25f28:	f01b fc7a 	bl	41820 <log_string_sync>
			continue;
   25f2c:	e7e7      	b.n	25efe <settings_fcb_load_priv+0x82>
		name2[name2_len] = '\0';
   25f2e:	9b01      	ldr	r3, [sp, #4]
   25f30:	aa32      	add	r2, sp, #200	; 0xc8
   25f32:	4413      	add	r3, r2
   25f34:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   25f38:	a91f      	add	r1, sp, #124	; 0x7c
   25f3a:	a80c      	add	r0, sp, #48	; 0x30
   25f3c:	f7f7 f984 	bl	1d248 <strcmp>
   25f40:	2800      	cmp	r0, #0
   25f42:	d1dc      	bne.n	25efe <settings_fcb_load_priv+0x82>
   25f44:	e7af      	b.n	25ea6 <settings_fcb_load_priv+0x2a>
   25f46:	bf00      	nop
   25f48:	000464e4 	.word	0x000464e4
   25f4c:	000463bc 	.word	0x000463bc
   25f50:	00049363 	.word	0x00049363
   25f54:	00049380 	.word	0x00049380

00025f58 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   25f58:	460a      	mov	r2, r1
	return settings_fcb_load_priv(
   25f5a:	2301      	movs	r3, #1
   25f5c:	4901      	ldr	r1, [pc, #4]	; (25f64 <settings_fcb_load+0xc>)
   25f5e:	f7ff bf8d 	b.w	25e7c <settings_fcb_load_priv>
   25f62:	bf00      	nop
   25f64:	00025e55 	.word	0x00025e55

00025f68 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   25f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f6c:	4605      	mov	r5, r0
   25f6e:	4688      	mov	r8, r1
   25f70:	4692      	mov	sl, r2
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   25f72:	4699      	mov	r9, r3
{
   25f74:	b0c1      	sub	sp, #260	; 0x104
	if (val_len > 0 && value == NULL) {
   25f76:	b103      	cbz	r3, 25f7a <settings_fcb_save+0x12>
   25f78:	b18a      	cbz	r2, 25f9e <settings_fcb_save+0x36>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   25f7a:	2400      	movs	r4, #0
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   25f7c:	4628      	mov	r0, r5
   25f7e:	4623      	mov	r3, r4
   25f80:	495f      	ldr	r1, [pc, #380]	; (26100 <settings_fcb_save+0x198>)
   25f82:	aa07      	add	r2, sp, #28
	cdca.val = (char *)value;
   25f84:	e9cd 8a07 	strd	r8, sl, [sp, #28]
	cdca.val_len = val_len;
   25f88:	e9cd 9409 	strd	r9, r4, [sp, #36]	; 0x24
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   25f8c:	f7ff ff76 	bl	25e7c <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   25f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25f92:	2b01      	cmp	r3, #1
   25f94:	f000 80b0 	beq.w	260f8 <settings_fcb_save+0x190>
	if (!name) {
   25f98:	f1b8 0f00 	cmp.w	r8, #0
   25f9c:	d102      	bne.n	25fa4 <settings_fcb_save+0x3c>
		return -EINVAL;
   25f9e:	f06f 0415 	mvn.w	r4, #21
   25fa2:	e0a9      	b.n	260f8 <settings_fcb_save+0x190>
	len = settings_line_len_calc(name, val_len);
   25fa4:	4649      	mov	r1, r9
   25fa6:	4640      	mov	r0, r8
   25fa8:	f01c f9d3 	bl	42352 <settings_line_len_calc>
   25fac:	4e55      	ldr	r6, [pc, #340]	; (26104 <settings_fcb_save+0x19c>)
   25fae:	4b56      	ldr	r3, [pc, #344]	; (26108 <settings_fcb_save+0x1a0>)
   25fb0:	9003      	str	r0, [sp, #12]
   25fb2:	1af6      	subs	r6, r6, r3
   25fb4:	08f6      	lsrs	r6, r6, #3
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   25fb6:	01b6      	lsls	r6, r6, #6
   25fb8:	f046 0601 	orr.w	r6, r6, #1
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   25fbc:	7b6b      	ldrb	r3, [r5, #13]
   25fbe:	429c      	cmp	r4, r3
   25fc0:	daed      	bge.n	25f9e <settings_fcb_save+0x36>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   25fc2:	f105 0708 	add.w	r7, r5, #8
   25fc6:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   25fca:	465a      	mov	r2, fp
   25fcc:	4638      	mov	r0, r7
   25fce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   25fd2:	f7ff f85b 	bl	2508c <fcb_append>
		if (rc != -ENOSPC) {
   25fd6:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   25fda:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   25fdc:	d176      	bne.n	260cc <settings_fcb_save+0x164>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
   25fde:	7b6b      	ldrb	r3, [r5, #13]
   25fe0:	3b01      	subs	r3, #1
   25fe2:	42a3      	cmp	r3, r4
   25fe4:	dd1b      	ble.n	2601e <settings_fcb_save+0xb6>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   25fe6:	4638      	mov	r0, r7
   25fe8:	f01b fc54 	bl	41894 <fcb_append_to_scratch>
	if (rc) {
   25fec:	4683      	mov	fp, r0
   25fee:	b9b0      	cbnz	r0, 2601e <settings_fcb_save+0xb6>
	rbs = flash_area_align(cf->cf_fcb.fap);
   25ff0:	6c28      	ldr	r0, [r5, #64]	; 0x40
   25ff2:	f01c f90d 	bl	42210 <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   25ff6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   25ff8:	e9cd bb10 	strd	fp, fp, [sp, #64]	; 0x40
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   25ffc:	f8df b110 	ldr.w	fp, [pc, #272]	; 26110 <settings_fcb_save+0x1a8>
	loc1.fap = cf->cf_fcb.fap;
   26000:	9314      	str	r3, [sp, #80]	; 0x50
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   26002:	4638      	mov	r0, r7
   26004:	a910      	add	r1, sp, #64	; 0x40
   26006:	f01b fea5 	bl	41d54 <fcb_getnext>
   2600a:	b150      	cbz	r0, 26022 <settings_fcb_save+0xba>
	rc = fcb_rotate(&cf->cf_fcb);
   2600c:	4638      	mov	r0, r7
   2600e:	f01b febc 	bl	41d8a <fcb_rotate>
	if (rc != 0) {
   26012:	4602      	mov	r2, r0
   26014:	b118      	cbz	r0, 2601e <settings_fcb_save+0xb6>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   26016:	4630      	mov	r0, r6
   26018:	493c      	ldr	r1, [pc, #240]	; (2610c <settings_fcb_save+0x1a4>)
   2601a:	f01b fc01 	bl	41820 <log_string_sync>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   2601e:	3401      	adds	r4, #1
   26020:	e7cc      	b.n	25fbc <settings_fcb_save+0x54>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   26022:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26024:	9a10      	ldr	r2, [sp, #64]	; 0x40
   26026:	429a      	cmp	r2, r3
   26028:	d1f0      	bne.n	2600c <settings_fcb_save+0xa4>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   2602a:	2149      	movs	r1, #73	; 0x49
   2602c:	ab10      	add	r3, sp, #64	; 0x40
   2602e:	aa05      	add	r2, sp, #20
   26030:	a81a      	add	r0, sp, #104	; 0x68
   26032:	f01c f9ad 	bl	42390 <settings_line_name_read>
		if (rc) {
   26036:	2800      	cmp	r0, #0
   26038:	d1e3      	bne.n	26002 <settings_fcb_save+0x9a>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   2603a:	9b05      	ldr	r3, [sp, #20]
   2603c:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   26040:	3301      	adds	r3, #1
   26042:	4293      	cmp	r3, r2
   26044:	d0dd      	beq.n	26002 <settings_fcb_save+0x9a>
		loc2 = loc1;
   26046:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
   2604a:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
   2604e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   26052:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   26056:	f8de 3000 	ldr.w	r3, [lr]
   2605a:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   2605e:	4638      	mov	r0, r7
   26060:	a915      	add	r1, sp, #84	; 0x54
   26062:	f01b fe77 	bl	41d54 <fcb_getnext>
   26066:	b1f0      	cbz	r0, 260a6 <settings_fcb_save+0x13e>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   26068:	4638      	mov	r0, r7
   2606a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
   2606e:	aa15      	add	r2, sp, #84	; 0x54
   26070:	f7ff f80c 	bl	2508c <fcb_append>
		if (rc) {
   26074:	2800      	cmp	r0, #0
   26076:	d1c4      	bne.n	26002 <settings_fcb_save+0x9a>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   26078:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
   2607c:	4601      	mov	r1, r0
   2607e:	9300      	str	r3, [sp, #0]
   26080:	aa10      	add	r2, sp, #64	; 0x40
   26082:	4603      	mov	r3, r0
   26084:	a815      	add	r0, sp, #84	; 0x54
   26086:	f7ff feaf 	bl	25de8 <settings_line_entry_copy>
		if (rc) {
   2608a:	2800      	cmp	r0, #0
   2608c:	d1b9      	bne.n	26002 <settings_fcb_save+0x9a>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   2608e:	4638      	mov	r0, r7
   26090:	a915      	add	r1, sp, #84	; 0x54
   26092:	f01b fc1b 	bl	418cc <fcb_append_finish>
		if (rc != 0) {
   26096:	4602      	mov	r2, r0
   26098:	2800      	cmp	r0, #0
   2609a:	d0b2      	beq.n	26002 <settings_fcb_save+0x9a>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   2609c:	4659      	mov	r1, fp
   2609e:	4630      	mov	r0, r6
   260a0:	f01b fbbe 	bl	41820 <log_string_sync>
   260a4:	e7ad      	b.n	26002 <settings_fcb_save+0x9a>
			rc = settings_line_name_read(name2, sizeof(name2),
   260a6:	2149      	movs	r1, #73	; 0x49
   260a8:	ab15      	add	r3, sp, #84	; 0x54
   260aa:	aa06      	add	r2, sp, #24
   260ac:	a82d      	add	r0, sp, #180	; 0xb4
   260ae:	f01c f96f 	bl	42390 <settings_line_name_read>
			if (rc) {
   260b2:	2800      	cmp	r0, #0
   260b4:	d1d3      	bne.n	2605e <settings_fcb_save+0xf6>
			if ((val1_off == val2_off) &&
   260b6:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   260ba:	429a      	cmp	r2, r3
   260bc:	d1cf      	bne.n	2605e <settings_fcb_save+0xf6>
			    !memcmp(name1, name2, val1_off)) {
   260be:	a92d      	add	r1, sp, #180	; 0xb4
   260c0:	a81a      	add	r0, sp, #104	; 0x68
   260c2:	f01e fe02 	bl	44cca <memcmp>
			if ((val1_off == val2_off) &&
   260c6:	2800      	cmp	r0, #0
   260c8:	d1c9      	bne.n	2605e <settings_fcb_save+0xf6>
   260ca:	e79a      	b.n	26002 <settings_fcb_save+0x9a>
	if (rc) {
   260cc:	2800      	cmp	r0, #0
   260ce:	f47f af66 	bne.w	25f9e <settings_fcb_save+0x36>
	loc.fap = cf->cf_fcb.fap;
   260d2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   260d4:	4651      	mov	r1, sl
	loc.fap = cf->cf_fcb.fap;
   260d6:	920f      	str	r2, [sp, #60]	; 0x3c
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   260d8:	4640      	mov	r0, r8
   260da:	464a      	mov	r2, r9
   260dc:	f8cd b000 	str.w	fp, [sp]
   260e0:	f7ff fe14 	bl	25d0c <settings_line_write>
	if (rc != -EIO) {
   260e4:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   260e6:	4604      	mov	r4, r0
	if (rc != -EIO) {
   260e8:	d006      	beq.n	260f8 <settings_fcb_save+0x190>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   260ea:	4659      	mov	r1, fp
   260ec:	4638      	mov	r0, r7
   260ee:	f01b fbed 	bl	418cc <fcb_append_finish>
			rc = i;
   260f2:	2c00      	cmp	r4, #0
   260f4:	bf08      	it	eq
   260f6:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   260f8:	4620      	mov	r0, r4
   260fa:	b041      	add	sp, #260	; 0x104
   260fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26100:	000423b1 	.word	0x000423b1
   26104:	000464e4 	.word	0x000464e4
   26108:	000463bc 	.word	0x000463bc
   2610c:	000493b5 	.word	0x000493b5
   26110:	00049394 	.word	0x00049394

00026114 <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   26114:	2301      	movs	r3, #1
{
   26116:	b570      	push	{r4, r5, r6, lr}
   26118:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   2611a:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   2611c:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(FLASH_AREA_ID(storage), &cf->cf_fcb);
   2611e:	f100 0608 	add.w	r6, r0, #8
   26122:	4631      	mov	r1, r6
   26124:	2008      	movs	r0, #8
   26126:	f01b fcab 	bl	41a80 <fcb_init>
		if (rc) {
   2612a:	4605      	mov	r5, r0
   2612c:	b9b0      	cbnz	r0, 2615c <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   2612e:	4630      	mov	r0, r6
   26130:	f01b fc37 	bl	419a2 <fcb_free_sector_cnt>
   26134:	2800      	cmp	r0, #0
   26136:	dc0a      	bgt.n	2614e <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   26138:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   2613a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2613c:	e9d3 1200 	ldrd	r1, r2, [r3]
   26140:	f01c f840 	bl	421c4 <flash_area_erase>
			if (rc) {
   26144:	2800      	cmp	r0, #0
   26146:	d0ec      	beq.n	26122 <settings_fcb_src+0xe>
				return -EIO;
   26148:	f06f 0504 	mvn.w	r5, #4
   2614c:	e004      	b.n	26158 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2614e:	4b05      	ldr	r3, [pc, #20]	; (26164 <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   26150:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   26152:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   26154:	f7ff fc1c 	bl	25990 <settings_src_register>
}
   26158:	4628      	mov	r0, r5
   2615a:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   2615c:	f06f 0515 	mvn.w	r5, #21
   26160:	e7fa      	b.n	26158 <settings_fcb_src+0x44>
   26162:	bf00      	nop
   26164:	000468c0 	.word	0x000468c0

00026168 <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   26168:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   2616c:	4a02      	ldr	r2, [pc, #8]	; (26178 <settings_mount_fcb_backend+0x10>)
   2616e:	4903      	ldr	r1, [pc, #12]	; (2617c <settings_mount_fcb_backend+0x14>)
   26170:	4803      	ldr	r0, [pc, #12]	; (26180 <settings_mount_fcb_backend+0x18>)
   26172:	f7ff be65 	b.w	25e40 <settings_line_io_init>
   26176:	bf00      	nop
   26178:	0004242f 	.word	0x0004242f
   2617c:	00042433 	.word	0x00042433
   26180:	00042447 	.word	0x00042447

00026184 <settings_backend_init>:
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
   26184:	2309      	movs	r3, #9
{
   26186:	b537      	push	{r0, r1, r2, r4, r5, lr}
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   26188:	2008      	movs	r0, #8
   2618a:	4669      	mov	r1, sp
   2618c:	4a21      	ldr	r2, [pc, #132]	; (26214 <settings_backend_init+0x90>)
	uint32_t cnt = sizeof(settings_fcb_area) /
   2618e:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   26190:	f7ff fa72 	bl	25678 <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   26194:	f110 0f13 	cmn.w	r0, #19
   26198:	d03a      	beq.n	26210 <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   2619a:	b138      	cbz	r0, 261ac <settings_backend_init+0x28>
   2619c:	300c      	adds	r0, #12
   2619e:	d005      	beq.n	261ac <settings_backend_init+0x28>
		k_panic();
   261a0:	4040      	eors	r0, r0
   261a2:	f380 8811 	msr	BASEPRI, r0
   261a6:	f04f 0004 	mov.w	r0, #4
   261aa:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   261ac:	4d1a      	ldr	r5, [pc, #104]	; (26218 <settings_backend_init+0x94>)
   261ae:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   261b0:	4628      	mov	r0, r5
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   261b2:	736b      	strb	r3, [r5, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   261b4:	f7ff ffae 	bl	26114 <settings_fcb_src>

	if (rc != 0) {
   261b8:	b308      	cbz	r0, 261fe <settings_backend_init+0x7a>
		rc = flash_area_open(FLASH_AREA_ID(storage), &fap);
   261ba:	a901      	add	r1, sp, #4
   261bc:	2008      	movs	r0, #8
   261be:	f7ff fa47 	bl	25650 <flash_area_open>

		if (rc == 0) {
   261c2:	4601      	mov	r1, r0
   261c4:	b160      	cbz	r0, 261e0 <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   261c6:	4040      	eors	r0, r0
   261c8:	f380 8811 	msr	BASEPRI, r0
   261cc:	f04f 0004 	mov.w	r0, #4
   261d0:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   261d2:	4040      	eors	r0, r0
   261d4:	f380 8811 	msr	BASEPRI, r0
   261d8:	f04f 0004 	mov.w	r0, #4
   261dc:	df02      	svc	2
   261de:	e00e      	b.n	261fe <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   261e0:	9801      	ldr	r0, [sp, #4]
   261e2:	6882      	ldr	r2, [r0, #8]
   261e4:	f01b ffee 	bl	421c4 <flash_area_erase>
   261e8:	4604      	mov	r4, r0
			flash_area_close(fap);
   261ea:	9801      	ldr	r0, [sp, #4]
   261ec:	f01b ffa3 	bl	42136 <flash_area_close>
		if (rc != 0) {
   261f0:	2c00      	cmp	r4, #0
   261f2:	d1e8      	bne.n	261c6 <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
   261f4:	4628      	mov	r0, r5
   261f6:	f7ff ff8d 	bl	26114 <settings_fcb_src>
	if (rc != 0) {
   261fa:	2800      	cmp	r0, #0
   261fc:	d1e9      	bne.n	261d2 <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   261fe:	4b07      	ldr	r3, [pc, #28]	; (2621c <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   26200:	4805      	ldr	r0, [pc, #20]	; (26218 <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   26202:	606b      	str	r3, [r5, #4]
	settings_dst_register(&cf->cf_store);
   26204:	f7ff fbd2 	bl	259ac <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   26208:	4803      	ldr	r0, [pc, #12]	; (26218 <settings_backend_init+0x94>)
   2620a:	f7ff ffad 	bl	26168 <settings_mount_fcb_backend>

	return rc;
   2620e:	2000      	movs	r0, #0
}
   26210:	b003      	add	sp, #12
   26212:	bd30      	pop	{r4, r5, pc}
   26214:	20024700 	.word	0x20024700
   26218:	20020650 	.word	0x20020650
   2621c:	000468c0 	.word	0x000468c0

00026220 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   26220:	b507      	push	{r0, r1, r2, lr}
   26222:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   26224:	f04f 0220 	mov.w	r2, #32
   26228:	f3ef 8311 	mrs	r3, BASEPRI
   2622c:	f382 8811 	msr	BASEPRI, r2
   26230:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   26234:	f01c f9b1 	bl	4259a <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   26238:	9801      	ldr	r0, [sp, #4]
   2623a:	f001 f8fb 	bl	27434 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2623e:	4803      	ldr	r0, [pc, #12]	; (2624c <sys_reboot+0x2c>)
   26240:	f01b f8c0 	bl	413c4 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   26244:	f000 fe3c 	bl	26ec0 <arch_cpu_idle>
   26248:	e7fc      	b.n	26244 <sys_reboot+0x24>
   2624a:	bf00      	nop
   2624c:	000493d5 	.word	0x000493d5

00026250 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   26250:	4b0a      	ldr	r3, [pc, #40]	; (2627c <console_out+0x2c>)
{
   26252:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   26254:	b2c6      	uxtb	r6, r0
{
   26256:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   26258:	681b      	ldr	r3, [r3, #0]
   2625a:	4630      	mov	r0, r6
   2625c:	4798      	blx	r3

	if (handled_by_debug_server) {
   2625e:	2801      	cmp	r0, #1
   26260:	d00a      	beq.n	26278 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   26262:	2c0a      	cmp	r4, #10
   26264:	4d06      	ldr	r5, [pc, #24]	; (26280 <console_out+0x30>)
   26266:	d103      	bne.n	26270 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
   26268:	210d      	movs	r1, #13
   2626a:	6828      	ldr	r0, [r5, #0]
   2626c:	f01c f903 	bl	42476 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   26270:	4631      	mov	r1, r6
   26272:	6828      	ldr	r0, [r5, #0]
   26274:	f01c f8ff 	bl	42476 <uart_poll_out>

	return c;
}
   26278:	4620      	mov	r0, r4
   2627a:	bd70      	pop	{r4, r5, r6, pc}
   2627c:	20020694 	.word	0x20020694
   26280:	20024748 	.word	0x20024748

00026284 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   26284:	b508      	push	{r3, lr}
   26286:	4806      	ldr	r0, [pc, #24]	; (262a0 <uart_console_init+0x1c>)
   26288:	f015 fbd2 	bl	3ba30 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   2628c:	4b05      	ldr	r3, [pc, #20]	; (262a4 <uart_console_init+0x20>)
   2628e:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   26290:	4805      	ldr	r0, [pc, #20]	; (262a8 <uart_console_init+0x24>)
   26292:	f001 fb27 	bl	278e4 <__stdout_hook_install>
	__printk_hook_install(console_out);
   26296:	4804      	ldr	r0, [pc, #16]	; (262a8 <uart_console_init+0x24>)
   26298:	f7fd fdf4 	bl	23e84 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   2629c:	2000      	movs	r0, #0
   2629e:	bd08      	pop	{r3, pc}
   262a0:	00048efb 	.word	0x00048efb
   262a4:	20024748 	.word	0x20024748
   262a8:	00026251 	.word	0x00026251

000262ac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   262ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   262b0:	4c0e      	ldr	r4, [pc, #56]	; (262ec <onoff_start+0x40>)
{
   262b2:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   262b4:	1b05      	subs	r5, r0, r4
   262b6:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   262ba:	250c      	movs	r5, #12
   262bc:	435d      	muls	r5, r3
   262be:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   262c2:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   262c4:	4420      	add	r0, r4
   262c6:	2140      	movs	r1, #64	; 0x40
   262c8:	f01c f8da 	bl	42480 <set_starting_state>
	if (err < 0) {
   262cc:	1e01      	subs	r1, r0, #0
   262ce:	db08      	blt.n	262e2 <onoff_start+0x36>
	subdata->cb = data->cb;
   262d0:	4b07      	ldr	r3, [pc, #28]	; (262f0 <onoff_start+0x44>)
   262d2:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
   262d4:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   262d8:	4b06      	ldr	r3, [pc, #24]	; (262f4 <onoff_start+0x48>)
   262da:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   262dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   262e0:	4718      	bx	r3
		notify(mgr, err);
   262e2:	4638      	mov	r0, r7
   262e4:	4633      	mov	r3, r6
}
   262e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   262ea:	4718      	bx	r3
   262ec:	2002475c 	.word	0x2002475c
   262f0:	000424e3 	.word	0x000424e3
   262f4:	000468e4 	.word	0x000468e4

000262f8 <get_status>:
{
   262f8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   262fa:	b2cc      	uxtb	r4, r1
   262fc:	2c01      	cmp	r4, #1
{
   262fe:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   26300:	d909      	bls.n	26316 <get_status+0x1e>
   26302:	4909      	ldr	r1, [pc, #36]	; (26328 <get_status+0x30>)
   26304:	4809      	ldr	r0, [pc, #36]	; (2632c <get_status+0x34>)
   26306:	237d      	movs	r3, #125	; 0x7d
   26308:	4a09      	ldr	r2, [pc, #36]	; (26330 <get_status+0x38>)
   2630a:	f01b f85b 	bl	413c4 <printk>
   2630e:	217d      	movs	r1, #125	; 0x7d
   26310:	4807      	ldr	r0, [pc, #28]	; (26330 <get_status+0x38>)
   26312:	f01b fa74 	bl	417fe <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   26316:	210c      	movs	r1, #12
   26318:	68eb      	ldr	r3, [r5, #12]
   2631a:	fb04 3401 	mla	r4, r4, r1, r3
   2631e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   26320:	f000 0007 	and.w	r0, r0, #7
   26324:	bd38      	pop	{r3, r4, r5, pc}
   26326:	bf00      	nop
   26328:	0004943b 	.word	0x0004943b
   2632c:	00048156 	.word	0x00048156
   26330:	000493fe 	.word	0x000493fe

00026334 <stop>:
{
   26334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26336:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   26338:	2c01      	cmp	r4, #1
{
   2633a:	4605      	mov	r5, r0
   2633c:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2633e:	68c7      	ldr	r7, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   26340:	d90b      	bls.n	2635a <stop+0x26>
   26342:	4919      	ldr	r1, [pc, #100]	; (263a8 <stop+0x74>)
   26344:	4819      	ldr	r0, [pc, #100]	; (263ac <stop+0x78>)
   26346:	f240 1345 	movw	r3, #325	; 0x145
   2634a:	4a19      	ldr	r2, [pc, #100]	; (263b0 <stop+0x7c>)
   2634c:	f01b f83a 	bl	413c4 <printk>
   26350:	f240 1145 	movw	r1, #325	; 0x145
   26354:	4816      	ldr	r0, [pc, #88]	; (263b0 <stop+0x7c>)
   26356:	f01b fa52 	bl	417fe <assert_post_action>
   2635a:	f04f 0320 	mov.w	r3, #32
   2635e:	f3ef 8211 	mrs	r2, BASEPRI
   26362:	f383 8811 	msr	BASEPRI, r3
   26366:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2636a:	230c      	movs	r3, #12
   2636c:	fb03 7104 	mla	r1, r3, r4, r7
   26370:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   26372:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   26376:	d001      	beq.n	2637c <stop+0x48>
   26378:	428e      	cmp	r6, r1
   2637a:	d111      	bne.n	263a0 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2637c:	2101      	movs	r1, #1
	int err = 0;
   2637e:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   26380:	fb03 7304 	mla	r3, r3, r4, r7
   26384:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
   26386:	f382 8811 	msr	BASEPRI, r2
   2638a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2638e:	b930      	cbnz	r0, 2639e <stop+0x6a>
	get_sub_config(dev, type)->stop();
   26390:	230c      	movs	r3, #12
   26392:	6869      	ldr	r1, [r5, #4]
   26394:	fb03 1404 	mla	r4, r3, r4, r1
   26398:	6863      	ldr	r3, [r4, #4]
   2639a:	4798      	blx	r3
	return 0;
   2639c:	2000      	movs	r0, #0
}
   2639e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   263a0:	f04f 30ff 	mov.w	r0, #4294967295
   263a4:	e7ef      	b.n	26386 <stop+0x52>
   263a6:	bf00      	nop
   263a8:	0004943b 	.word	0x0004943b
   263ac:	00048156 	.word	0x00048156
   263b0:	000493fe 	.word	0x000493fe

000263b4 <onoff_stop>:
{
   263b4:	b570      	push	{r4, r5, r6, lr}
   263b6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   263b8:	4906      	ldr	r1, [pc, #24]	; (263d4 <onoff_stop+0x20>)
{
   263ba:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   263bc:	1a41      	subs	r1, r0, r1
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   263be:	1149      	asrs	r1, r1, #5
   263c0:	2240      	movs	r2, #64	; 0x40
   263c2:	4805      	ldr	r0, [pc, #20]	; (263d8 <onoff_stop+0x24>)
   263c4:	f7ff ffb6 	bl	26334 <stop>
	notify(mgr, res);
   263c8:	462b      	mov	r3, r5
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   263ca:	4601      	mov	r1, r0
	notify(mgr, res);
   263cc:	4620      	mov	r0, r4
}
   263ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   263d2:	4718      	bx	r3
   263d4:	2002475c 	.word	0x2002475c
   263d8:	200209e0 	.word	0x200209e0

000263dc <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   263dc:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   263de:	2200      	movs	r2, #0
   263e0:	2101      	movs	r1, #1
{
   263e2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   263e4:	2005      	movs	r0, #5
   263e6:	f000 fbdb 	bl	26ba0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   263ea:	2005      	movs	r0, #5
   263ec:	f000 fbba 	bl	26b64 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
   263f0:	480f      	ldr	r0, [pc, #60]	; (26430 <clk_init+0x54>)
   263f2:	f015 f82d 	bl	3b450 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   263f6:	4b0f      	ldr	r3, [pc, #60]	; (26434 <clk_init+0x58>)
   263f8:	4298      	cmp	r0, r3
   263fa:	d115      	bne.n	26428 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   263fc:	f015 f84c 	bl	3b498 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   26400:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   26402:	490d      	ldr	r1, [pc, #52]	; (26438 <clk_init+0x5c>)
   26404:	4630      	mov	r0, r6
   26406:	f01b f838 	bl	4147a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2640a:	2800      	cmp	r0, #0
   2640c:	db0b      	blt.n	26426 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2640e:	2501      	movs	r5, #1
   26410:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   26412:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   26414:	4908      	ldr	r1, [pc, #32]	; (26438 <clk_init+0x5c>)
   26416:	f104 0020 	add.w	r0, r4, #32
   2641a:	f01b f82e 	bl	4147a <onoff_manager_init>
		if (err < 0) {
   2641e:	2800      	cmp	r0, #0
   26420:	db01      	blt.n	26426 <clk_init+0x4a>
	}

	return 0;
   26422:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   26424:	6565      	str	r5, [r4, #84]	; 0x54
}
   26426:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   26428:	f06f 0004 	mvn.w	r0, #4
   2642c:	e7fb      	b.n	26426 <clk_init+0x4a>
   2642e:	bf00      	nop
   26430:	00026479 	.word	0x00026479
   26434:	0bad0000 	.word	0x0bad0000
   26438:	000468fc 	.word	0x000468fc

0002643c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   2643c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   2643e:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   26440:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   26442:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   26444:	434b      	muls	r3, r1
   26446:	480a      	ldr	r0, [pc, #40]	; (26470 <clkstarted_handle.constprop.0+0x34>)
   26448:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   2644a:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   2644c:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   26450:	4418      	add	r0, r3
	sub_data->cb = NULL;
   26452:	6426      	str	r6, [r4, #64]	; 0x40
	void *user_data = sub_data->user_data;
   26454:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   26456:	f01c f831 	bl	424bc <set_on_state>
	if (callback) {
   2645a:	b135      	cbz	r5, 2646a <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2645c:	462b      	mov	r3, r5
   2645e:	9a01      	ldr	r2, [sp, #4]
   26460:	4804      	ldr	r0, [pc, #16]	; (26474 <clkstarted_handle.constprop.0+0x38>)
}
   26462:	b002      	add	sp, #8
   26464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   26468:	4718      	bx	r3
}
   2646a:	b002      	add	sp, #8
   2646c:	bd70      	pop	{r4, r5, r6, pc}
   2646e:	bf00      	nop
   26470:	2002475c 	.word	0x2002475c
   26474:	200209e0 	.word	0x200209e0

00026478 <clock_event_handler>:
	switch (event) {
   26478:	2801      	cmp	r0, #1
{
   2647a:	b508      	push	{r3, lr}
	switch (event) {
   2647c:	d006      	beq.n	2648c <clock_event_handler+0x14>
   2647e:	2803      	cmp	r0, #3
   26480:	d008      	beq.n	26494 <clock_event_handler+0x1c>
   26482:	b9a8      	cbnz	r0, 264b0 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   26484:	4b10      	ldr	r3, [pc, #64]	; (264c8 <clock_event_handler+0x50>)
   26486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   26488:	075b      	lsls	r3, r3, #29
   2648a:	d11b      	bne.n	264c4 <clock_event_handler+0x4c>
}
   2648c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   26490:	f7ff bfd4 	b.w	2643c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   26494:	490d      	ldr	r1, [pc, #52]	; (264cc <clock_event_handler+0x54>)
   26496:	f240 2356 	movw	r3, #598	; 0x256
   2649a:	4a0d      	ldr	r2, [pc, #52]	; (264d0 <clock_event_handler+0x58>)
   2649c:	480d      	ldr	r0, [pc, #52]	; (264d4 <clock_event_handler+0x5c>)
   2649e:	f01a ff91 	bl	413c4 <printk>
   264a2:	f240 2156 	movw	r1, #598	; 0x256
}
   264a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   264aa:	4809      	ldr	r0, [pc, #36]	; (264d0 <clock_event_handler+0x58>)
   264ac:	f01b b9a7 	b.w	417fe <assert_post_action>
   264b0:	4906      	ldr	r1, [pc, #24]	; (264cc <clock_event_handler+0x54>)
   264b2:	f240 235a 	movw	r3, #602	; 0x25a
   264b6:	4a06      	ldr	r2, [pc, #24]	; (264d0 <clock_event_handler+0x58>)
   264b8:	4806      	ldr	r0, [pc, #24]	; (264d4 <clock_event_handler+0x5c>)
   264ba:	f01a ff83 	bl	413c4 <printk>
   264be:	f240 215a 	movw	r1, #602	; 0x25a
   264c2:	e7f0      	b.n	264a6 <clock_event_handler+0x2e>
}
   264c4:	bd08      	pop	{r3, pc}
   264c6:	bf00      	nop
   264c8:	2002475c 	.word	0x2002475c
   264cc:	0004ef58 	.word	0x0004ef58
   264d0:	000493fe 	.word	0x000493fe
   264d4:	00048156 	.word	0x00048156

000264d8 <generic_hfclk_start>:
{
   264d8:	b508      	push	{r3, lr}
	__asm__ volatile(
   264da:	f04f 0320 	mov.w	r3, #32
   264de:	f3ef 8111 	mrs	r1, BASEPRI
   264e2:	f383 8811 	msr	BASEPRI, r3
   264e6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   264ea:	4a11      	ldr	r2, [pc, #68]	; (26530 <generic_hfclk_start+0x58>)
   264ec:	6813      	ldr	r3, [r2, #0]
   264ee:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   264f2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   264f6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   264f8:	d00b      	beq.n	26512 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   264fa:	4a0e      	ldr	r2, [pc, #56]	; (26534 <generic_hfclk_start+0x5c>)
   264fc:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   26500:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   26504:	f013 0301 	ands.w	r3, r3, #1
   26508:	d003      	beq.n	26512 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   2650a:	480b      	ldr	r0, [pc, #44]	; (26538 <generic_hfclk_start+0x60>)
   2650c:	f01b ffd6 	bl	424bc <set_on_state>
			already_started = true;
   26510:	2301      	movs	r3, #1
	__asm__ volatile(
   26512:	f381 8811 	msr	BASEPRI, r1
   26516:	f3bf 8f6f 	isb	sy
	if (already_started) {
   2651a:	b123      	cbz	r3, 26526 <generic_hfclk_start+0x4e>
}
   2651c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   26520:	2000      	movs	r0, #0
   26522:	f7ff bf8b 	b.w	2643c <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   26526:	2001      	movs	r0, #1
}
   26528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2652c:	f014 bfd4 	b.w	3b4d8 <nrfx_clock_start>
   26530:	200247b4 	.word	0x200247b4
   26534:	40005000 	.word	0x40005000
   26538:	200247a4 	.word	0x200247a4

0002653c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2653c:	4b07      	ldr	r3, [pc, #28]	; (2655c <generic_hfclk_stop+0x20>)
   2653e:	e8d3 2fef 	ldaex	r2, [r3]
   26542:	f022 0102 	bic.w	r1, r2, #2
   26546:	e8c3 1fe0 	stlex	r0, r1, [r3]
   2654a:	2800      	cmp	r0, #0
   2654c:	d1f7      	bne.n	2653e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   2654e:	07d3      	lsls	r3, r2, #31
   26550:	d402      	bmi.n	26558 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   26552:	2001      	movs	r0, #1
   26554:	f015 b816 	b.w	3b584 <nrfx_clock_stop>
}
   26558:	4770      	bx	lr
   2655a:	bf00      	nop
   2655c:	200247b4 	.word	0x200247b4

00026560 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   26560:	2300      	movs	r3, #0
   26562:	2201      	movs	r2, #1
{
   26564:	b510      	push	{r4, lr}
   26566:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   26568:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
   2656c:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2656e:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
   26570:	4b0a      	ldr	r3, [pc, #40]	; (2659c <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   26572:	e9cd 2208 	strd	r2, r2, [sp, #32]
   26576:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
   26578:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2657a:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
   2657e:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
   26582:	f01b ffc0 	bl	42506 <api_start>
	if (err < 0) {
   26586:	2800      	cmp	r0, #0
   26588:	db05      	blt.n	26596 <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
   2658a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2658e:	2300      	movs	r3, #0
   26590:	4620      	mov	r0, r4
   26592:	f017 faf5 	bl	3db80 <z_impl_k_sem_take>
}
   26596:	b00a      	add	sp, #40	; 0x28
   26598:	bd10      	pop	{r4, pc}
   2659a:	bf00      	nop
   2659c:	000424f5 	.word	0x000424f5

000265a0 <z_nrf_clock_control_lf_on>:
{
   265a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   265a4:	2201      	movs	r2, #1
   265a6:	4606      	mov	r6, r0
   265a8:	4945      	ldr	r1, [pc, #276]	; (266c0 <z_nrf_clock_control_lf_on+0x120>)
   265aa:	e8d1 3fef 	ldaex	r3, [r1]
   265ae:	e8c1 2fe0 	stlex	r0, r2, [r1]
   265b2:	2800      	cmp	r0, #0
   265b4:	d1f9      	bne.n	265aa <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   265b6:	b9a3      	cbnz	r3, 265e2 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   265b8:	4942      	ldr	r1, [pc, #264]	; (266c4 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   265ba:	4843      	ldr	r0, [pc, #268]	; (266c8 <z_nrf_clock_control_lf_on+0x128>)
   265bc:	604b      	str	r3, [r1, #4]
   265be:	60cb      	str	r3, [r1, #12]
   265c0:	608a      	str	r2, [r1, #8]
   265c2:	f7fd ffed 	bl	245a0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   265c6:	2800      	cmp	r0, #0
   265c8:	da0b      	bge.n	265e2 <z_nrf_clock_control_lf_on+0x42>
   265ca:	4940      	ldr	r1, [pc, #256]	; (266cc <z_nrf_clock_control_lf_on+0x12c>)
   265cc:	4840      	ldr	r0, [pc, #256]	; (266d0 <z_nrf_clock_control_lf_on+0x130>)
   265ce:	f240 2321 	movw	r3, #545	; 0x221
   265d2:	4a40      	ldr	r2, [pc, #256]	; (266d4 <z_nrf_clock_control_lf_on+0x134>)
   265d4:	f01a fef6 	bl	413c4 <printk>
   265d8:	f240 2121 	movw	r1, #545	; 0x221
   265dc:	483d      	ldr	r0, [pc, #244]	; (266d4 <z_nrf_clock_control_lf_on+0x134>)
   265de:	f01b f90e 	bl	417fe <assert_post_action>
	switch (start_mode) {
   265e2:	b38e      	cbz	r6, 26648 <z_nrf_clock_control_lf_on+0xa8>
   265e4:	1e73      	subs	r3, r6, #1
   265e6:	2b01      	cmp	r3, #1
   265e8:	d855      	bhi.n	26696 <z_nrf_clock_control_lf_on+0xf6>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   265ea:	2e01      	cmp	r6, #1
   265ec:	d106      	bne.n	265fc <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   265ee:	4b3a      	ldr	r3, [pc, #232]	; (266d8 <z_nrf_clock_control_lf_on+0x138>)
   265f0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   265f4:	f003 0303 	and.w	r3, r3, #3
   265f8:	2b02      	cmp	r3, #2
   265fa:	d025      	beq.n	26648 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   265fc:	f01e fa24 	bl	44a48 <k_is_in_isr>
   26600:	4604      	mov	r4, r0
   26602:	b918      	cbnz	r0, 2660c <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
   26604:	4b35      	ldr	r3, [pc, #212]	; (266dc <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
   26606:	781b      	ldrb	r3, [r3, #0]
   26608:	2b00      	cmp	r3, #0
   2660a:	d152      	bne.n	266b2 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   2660c:	f04f 0320 	mov.w	r3, #32
   26610:	f3ef 8711 	mrs	r7, BASEPRI
   26614:	f383 8811 	msr	BASEPRI, r3
   26618:	f3bf 8f6f 	isb	sy
   2661c:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2661e:	4d2e      	ldr	r5, [pc, #184]	; (266d8 <z_nrf_clock_control_lf_on+0x138>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   26620:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 266ec <z_nrf_clock_control_lf_on+0x14c>
   26624:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   26626:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2662a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   2662e:	03d2      	lsls	r2, r2, #15
   26630:	d50c      	bpl.n	2664c <z_nrf_clock_control_lf_on+0xac>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   26632:	f003 0303 	and.w	r3, r3, #3
   26636:	2b02      	cmp	r3, #2
   26638:	d001      	beq.n	2663e <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2663a:	2e01      	cmp	r6, #1
   2663c:	d106      	bne.n	2664c <z_nrf_clock_control_lf_on+0xac>
	if (isr_mode) {
   2663e:	b334      	cbz	r4, 2668e <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
   26640:	f387 8811 	msr	BASEPRI, r7
   26644:	f3bf 8f6f 	isb	sy
}
   26648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   2664c:	b1d4      	cbz	r4, 26684 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2664e:	4638      	mov	r0, r7
   26650:	f000 fc44 	bl	26edc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   26654:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   26658:	b2db      	uxtb	r3, r3
   2665a:	2b01      	cmp	r3, #1
   2665c:	d1e3      	bne.n	26626 <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2665e:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   26662:	2a00      	cmp	r2, #0
   26664:	d0df      	beq.n	26626 <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26666:	2200      	movs	r2, #0
   26668:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2666c:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   26670:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26672:	2120      	movs	r1, #32
   26674:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   26678:	4a19      	ldr	r2, [pc, #100]	; (266e0 <z_nrf_clock_control_lf_on+0x140>)
   2667a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2667e:	4a19      	ldr	r2, [pc, #100]	; (266e4 <z_nrf_clock_control_lf_on+0x144>)
   26680:	6013      	str	r3, [r2, #0]
}
   26682:	e7d0      	b.n	26626 <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   26684:	2100      	movs	r1, #0
   26686:	2021      	movs	r0, #33	; 0x21
   26688:	f017 f9fa 	bl	3da80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2668c:	e7e2      	b.n	26654 <z_nrf_clock_control_lf_on+0xb4>
    p_reg->INTENSET = mask;
   2668e:	2302      	movs	r3, #2
   26690:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   26694:	e7d8      	b.n	26648 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   26696:	f240 2333 	movw	r3, #563	; 0x233
   2669a:	4913      	ldr	r1, [pc, #76]	; (266e8 <z_nrf_clock_control_lf_on+0x148>)
   2669c:	480c      	ldr	r0, [pc, #48]	; (266d0 <z_nrf_clock_control_lf_on+0x130>)
   2669e:	4a0d      	ldr	r2, [pc, #52]	; (266d4 <z_nrf_clock_control_lf_on+0x134>)
   266a0:	f01a fe90 	bl	413c4 <printk>
}
   266a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   266a8:	f240 2133 	movw	r1, #563	; 0x233
   266ac:	4809      	ldr	r0, [pc, #36]	; (266d4 <z_nrf_clock_control_lf_on+0x134>)
   266ae:	f01b b8a6 	b.w	417fe <assert_post_action>
    p_reg->INTENCLR = mask;
   266b2:	2202      	movs	r2, #2
   266b4:	4b08      	ldr	r3, [pc, #32]	; (266d8 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
   266b6:	4607      	mov	r7, r0
   266b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   266bc:	e7af      	b.n	2661e <z_nrf_clock_control_lf_on+0x7e>
   266be:	bf00      	nop
   266c0:	200247b8 	.word	0x200247b8
   266c4:	2002474c 	.word	0x2002474c
   266c8:	2002477c 	.word	0x2002477c
   266cc:	0004945f 	.word	0x0004945f
   266d0:	00048156 	.word	0x00048156
   266d4:	000493fe 	.word	0x000493fe
   266d8:	40005000 	.word	0x40005000
   266dc:	2002d6bd 	.word	0x2002d6bd
   266e0:	e000e100 	.word	0xe000e100
   266e4:	40005008 	.word	0x40005008
   266e8:	0004ef58 	.word	0x0004ef58
   266ec:	40005104 	.word	0x40005104

000266f0 <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(const struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
   266f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   266f2:	7b0b      	ldrb	r3, [r1, #12]
{
   266f4:	4604      	mov	r4, r0
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   266f6:	2b02      	cmp	r3, #2
{
   266f8:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   266fa:	d128      	bne.n	2674e <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
   266fc:	680b      	ldr	r3, [r1, #0]
   266fe:	bb1b      	cbnz	r3, 26748 <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   26700:	68c2      	ldr	r2, [r0, #12]
	return dev->data;
   26702:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   26704:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   26708:	b9d9      	cbnz	r1, 26742 <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   2670a:	4914      	ldr	r1, [pc, #80]	; (2675c <wdt_nrf_install_timeout+0x6c>)
   2670c:	1e58      	subs	r0, r3, #1
   2670e:	4288      	cmp	r0, r1
   26710:	d81a      	bhi.n	26748 <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
   26712:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   26714:	6860      	ldr	r0, [r4, #4]
   26716:	f10d 0107 	add.w	r1, sp, #7
   2671a:	f015 f8cb 	bl	3b8b4 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
   2671e:	4b10      	ldr	r3, [pc, #64]	; (26760 <wdt_nrf_install_timeout+0x70>)
   26720:	4298      	cmp	r0, r3
   26722:	d017      	beq.n	26754 <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
   26724:	68ab      	ldr	r3, [r5, #8]
   26726:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2672a:	b113      	cbz	r3, 26732 <wdt_nrf_install_timeout+0x42>
   2672c:	68e2      	ldr	r2, [r4, #12]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   2672e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
   26732:	68e2      	ldr	r2, [r4, #12]
   26734:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   26738:	3301      	adds	r3, #1
   2673a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
   2673e:	b003      	add	sp, #12
   26740:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   26742:	6a12      	ldr	r2, [r2, #32]
   26744:	429a      	cmp	r2, r3
   26746:	d0e5      	beq.n	26714 <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
   26748:	f06f 0015 	mvn.w	r0, #21
   2674c:	e7f7      	b.n	2673e <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
   2674e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26752:	e7f4      	b.n	2673e <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
   26754:	f06f 000b 	mvn.w	r0, #11
   26758:	e7f1      	b.n	2673e <wdt_nrf_install_timeout+0x4e>
   2675a:	bf00      	nop
   2675c:	07cffffe 	.word	0x07cffffe
   26760:	0bad0002 	.word	0x0bad0002

00026764 <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   26764:	b510      	push	{r4, lr}
   26766:	4604      	mov	r4, r0
   26768:	2200      	movs	r2, #0
   2676a:	2101      	movs	r1, #1
   2676c:	2018      	movs	r0, #24
   2676e:	f000 fa17 	bl	26ba0 <z_arm_irq_priority_set>
   26772:	6860      	ldr	r0, [r4, #4]
   26774:	4a05      	ldr	r2, [pc, #20]	; (2678c <wdt_0_init+0x28>)
   26776:	f100 0108 	add.w	r1, r0, #8
   2677a:	f015 f80f 	bl	3b79c <nrfx_wdt_init>
   2677e:	4b04      	ldr	r3, [pc, #16]	; (26790 <wdt_0_init+0x2c>)
   26780:	4298      	cmp	r0, r3
   26782:	bf14      	ite	ne
   26784:	f06f 000f 	mvnne.w	r0, #15
   26788:	2000      	moveq	r0, #0
   2678a:	bd10      	pop	{r4, pc}
   2678c:	00026795 	.word	0x00026795
   26790:	0bad0000 	.word	0x0bad0000

00026794 <wdt_0_event_handler>:
   26794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   26796:	2400      	movs	r4, #0
   26798:	4d0a      	ldr	r5, [pc, #40]	; (267c4 <wdt_0_event_handler+0x30>)
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   2679a:	4e0b      	ldr	r6, [pc, #44]	; (267c8 <wdt_0_event_handler+0x34>)
				get_dev_data(dev)->m_callbacks[i](dev, i);
   2679c:	4f0b      	ldr	r7, [pc, #44]	; (267cc <wdt_0_event_handler+0x38>)
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   2679e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   267a2:	429c      	cmp	r4, r3
   267a4:	db00      	blt.n	267a8 <wdt_0_event_handler+0x14>
WDT_NRFX_WDT_DEVICE(0);
   267a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   267a8:	f8d6 3404 	ldr.w	r3, [r6, #1028]	; 0x404
   267ac:	40e3      	lsrs	r3, r4
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   267ae:	07db      	lsls	r3, r3, #31
   267b0:	d505      	bpl.n	267be <wdt_0_event_handler+0x2a>
			if (get_dev_data(dev)->m_callbacks[i]) {
   267b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   267b6:	b113      	cbz	r3, 267be <wdt_0_event_handler+0x2a>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   267b8:	4621      	mov	r1, r4
   267ba:	4638      	mov	r0, r7
   267bc:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   267be:	3401      	adds	r4, #1
   267c0:	e7ed      	b.n	2679e <wdt_0_event_handler+0xa>
   267c2:	bf00      	nop
   267c4:	200247bc 	.word	0x200247bc
   267c8:	40018000 	.word	0x40018000
   267cc:	200209f0 	.word	0x200209f0

000267d0 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   267d0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   267d2:	4c06      	ldr	r4, [pc, #24]	; (267ec <z_clock_isr+0x1c>)
   267d4:	4906      	ldr	r1, [pc, #24]	; (267f0 <z_clock_isr+0x20>)
   267d6:	4622      	mov	r2, r4
   267d8:	4806      	ldr	r0, [pc, #24]	; (267f4 <z_clock_isr+0x24>)
   267da:	2317      	movs	r3, #23
   267dc:	f01a fdf2 	bl	413c4 <printk>
   267e0:	4620      	mov	r0, r4
}
   267e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   267e6:	2117      	movs	r1, #23
   267e8:	f01b b809 	b.w	417fe <assert_post_action>
   267ec:	00049491 	.word	0x00049491
   267f0:	0004ef58 	.word	0x0004ef58
   267f4:	00048156 	.word	0x00048156

000267f8 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   267f8:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   267fa:	4b08      	ldr	r3, [pc, #32]	; (2681c <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   267fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26800:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   26804:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   26808:	4290      	cmp	r0, r2
   2680a:	d100      	bne.n	2680e <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   2680c:	4770      	bx	lr
   2680e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   26812:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   26814:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26818:	e7f2      	b.n	26800 <handle_next_cycle_case+0x8>
   2681a:	bf00      	nop
   2681c:	40015000 	.word	0x40015000

00026820 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   26820:	2200      	movs	r2, #0
   26822:	4b07      	ldr	r3, [pc, #28]	; (26840 <rtc_nrf_isr+0x20>)
   26824:	601a      	str	r2, [r3, #0]
   26826:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   26828:	4a06      	ldr	r2, [pc, #24]	; (26844 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   2682a:	4b07      	ldr	r3, [pc, #28]	; (26848 <rtc_nrf_isr+0x28>)
   2682c:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   26830:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   26832:	1ac0      	subs	r0, r0, r3
   26834:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   26838:	4403      	add	r3, r0
   2683a:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   2683c:	f017 bf1c 	b.w	3e678 <z_clock_announce>
   26840:	40015140 	.word	0x40015140
   26844:	200247e4 	.word	0x200247e4
   26848:	40015000 	.word	0x40015000

0002684c <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   2684c:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   2684e:	2400      	movs	r4, #0
   26850:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   26854:	4d0e      	ldr	r5, [pc, #56]	; (26890 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   26856:	4b0f      	ldr	r3, [pc, #60]	; (26894 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   26858:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2685c:	601c      	str	r4, [r3, #0]
   2685e:	681b      	ldr	r3, [r3, #0]
   26860:	4b0d      	ldr	r3, [pc, #52]	; (26898 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
   26862:	2101      	movs	r1, #1
   26864:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   26868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2686c:	4622      	mov	r2, r4
   2686e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   26872:	2015      	movs	r0, #21
   26874:	f000 f994 	bl	26ba0 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
   26878:	2015      	movs	r0, #21
   2687a:	f000 f973 	bl	26b64 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2687e:	2301      	movs	r3, #1
   26880:	4a06      	ldr	r2, [pc, #24]	; (2689c <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   26882:	2002      	movs	r0, #2
   26884:	6013      	str	r3, [r2, #0]
   26886:	602b      	str	r3, [r5, #0]
   26888:	f7ff fe8a 	bl	265a0 <z_nrf_clock_control_lf_on>

	return 0;
}
   2688c:	4620      	mov	r0, r4
   2688e:	bd38      	pop	{r3, r4, r5, pc}
   26890:	40015000 	.word	0x40015000
   26894:	40015140 	.word	0x40015140
   26898:	e000e100 	.word	0xe000e100
   2689c:	40015008 	.word	0x40015008

000268a0 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   268a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   268a2:	4b2d      	ldr	r3, [pc, #180]	; (26958 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   268a4:	4c2d      	ldr	r4, [pc, #180]	; (2695c <z_clock_set_timeout+0xbc>)
   268a6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
   268aa:	4b2d      	ldr	r3, [pc, #180]	; (26960 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   268ac:	f1b0 3fff 	cmp.w	r0, #4294967295
   268b0:	bf08      	it	eq
   268b2:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
   268b4:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   268b6:	1a52      	subs	r2, r2, r1
   268b8:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   268bc:	0212      	lsls	r2, r2, #8
   268be:	d438      	bmi.n	26932 <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
   268c0:	3801      	subs	r0, #1
   268c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   268c6:	42a0      	cmp	r0, r4
   268c8:	bfa8      	it	ge
   268ca:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   268cc:	3301      	adds	r3, #1
   268ce:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   268d0:	42a0      	cmp	r0, r4
   268d2:	bf94      	ite	ls
   268d4:	180c      	addls	r4, r1, r0
   268d6:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   268d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   268dc:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
   268de:	4a1e      	ldr	r2, [pc, #120]	; (26958 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   268e0:	4d20      	ldr	r5, [pc, #128]	; (26964 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
   268e2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
   268e6:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
   268ea:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   268ee:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
   268f0:	1a5b      	subs	r3, r3, r1
   268f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   268f6:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
   268f8:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   268fa:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   268fe:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   26902:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   26906:	d104      	bne.n	26912 <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
   26908:	200f      	movs	r0, #15
   2690a:	f01e f8a3 	bl	44a54 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2690e:	602e      	str	r6, [r5, #0]
   26910:	682b      	ldr	r3, [r5, #0]
   26912:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   26916:	4b14      	ldr	r3, [pc, #80]	; (26968 <z_clock_set_timeout+0xc8>)
   26918:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   2691c:	4b0e      	ldr	r3, [pc, #56]	; (26958 <z_clock_set_timeout+0xb8>)
   2691e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   26922:	1a22      	subs	r2, r4, r0
   26924:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   26928:	2a01      	cmp	r2, #1
   2692a:	d104      	bne.n	26936 <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
   2692c:	f7ff ff64 	bl	267f8 <handle_next_cycle_case>
   26930:	e00b      	b.n	2694a <z_clock_set_timeout+0xaa>
		ticks = 0;
   26932:	2000      	movs	r0, #0
   26934:	e7ca      	b.n	268cc <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   26936:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   2693a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   2693e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   26942:	1a24      	subs	r4, r4, r0
   26944:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   26946:	0223      	lsls	r3, r4, #8
   26948:	d4f0      	bmi.n	2692c <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
   2694a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2694e:	4b02      	ldr	r3, [pc, #8]	; (26958 <z_clock_set_timeout+0xb8>)
   26950:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   26954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26956:	bf00      	nop
   26958:	40015000 	.word	0x40015000
   2695c:	007fffff 	.word	0x007fffff
   26960:	200247e4 	.word	0x200247e4
   26964:	40015140 	.word	0x40015140
   26968:	e000e100 	.word	0xe000e100

0002696c <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
   2696c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2696e:	f04f 0320 	mov.w	r3, #32
   26972:	f3ef 8511 	mrs	r5, BASEPRI
   26976:	f383 8811 	msr	BASEPRI, r3
   2697a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2697e:	481a      	ldr	r0, [pc, #104]	; (269e8 <z_clock_elapsed+0x7c>)
   26980:	f017 fada 	bl	3df38 <z_spin_lock_valid>
   26984:	b968      	cbnz	r0, 269a2 <z_clock_elapsed+0x36>
   26986:	235c      	movs	r3, #92	; 0x5c
   26988:	4a18      	ldr	r2, [pc, #96]	; (269ec <z_clock_elapsed+0x80>)
   2698a:	4919      	ldr	r1, [pc, #100]	; (269f0 <z_clock_elapsed+0x84>)
   2698c:	4819      	ldr	r0, [pc, #100]	; (269f4 <z_clock_elapsed+0x88>)
   2698e:	f01a fd19 	bl	413c4 <printk>
   26992:	4915      	ldr	r1, [pc, #84]	; (269e8 <z_clock_elapsed+0x7c>)
   26994:	4818      	ldr	r0, [pc, #96]	; (269f8 <z_clock_elapsed+0x8c>)
   26996:	f01a fd15 	bl	413c4 <printk>
   2699a:	215c      	movs	r1, #92	; 0x5c
   2699c:	4813      	ldr	r0, [pc, #76]	; (269ec <z_clock_elapsed+0x80>)
   2699e:	f01a ff2e 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   269a2:	4811      	ldr	r0, [pc, #68]	; (269e8 <z_clock_elapsed+0x7c>)
   269a4:	f017 fae6 	bl	3df74 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   269a8:	4b14      	ldr	r3, [pc, #80]	; (269fc <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269aa:	480f      	ldr	r0, [pc, #60]	; (269e8 <z_clock_elapsed+0x7c>)
   269ac:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   269b0:	4b13      	ldr	r3, [pc, #76]	; (26a00 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   269b2:	681b      	ldr	r3, [r3, #0]
   269b4:	1ae4      	subs	r4, r4, r3
   269b6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   269ba:	f017 facb 	bl	3df54 <z_spin_unlock_valid>
   269be:	b968      	cbnz	r0, 269dc <z_clock_elapsed+0x70>
   269c0:	2384      	movs	r3, #132	; 0x84
   269c2:	4a0a      	ldr	r2, [pc, #40]	; (269ec <z_clock_elapsed+0x80>)
   269c4:	490f      	ldr	r1, [pc, #60]	; (26a04 <z_clock_elapsed+0x98>)
   269c6:	480b      	ldr	r0, [pc, #44]	; (269f4 <z_clock_elapsed+0x88>)
   269c8:	f01a fcfc 	bl	413c4 <printk>
   269cc:	4906      	ldr	r1, [pc, #24]	; (269e8 <z_clock_elapsed+0x7c>)
   269ce:	480e      	ldr	r0, [pc, #56]	; (26a08 <z_clock_elapsed+0x9c>)
   269d0:	f01a fcf8 	bl	413c4 <printk>
   269d4:	2184      	movs	r1, #132	; 0x84
   269d6:	4805      	ldr	r0, [pc, #20]	; (269ec <z_clock_elapsed+0x80>)
   269d8:	f01a ff11 	bl	417fe <assert_post_action>
	__asm__ volatile(
   269dc:	f385 8811 	msr	BASEPRI, r5
   269e0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   269e4:	4620      	mov	r0, r4
   269e6:	bd38      	pop	{r3, r4, r5, pc}
   269e8:	200247e8 	.word	0x200247e8
   269ec:	000488fa 	.word	0x000488fa
   269f0:	00048920 	.word	0x00048920
   269f4:	00048156 	.word	0x00048156
   269f8:	00048935 	.word	0x00048935
   269fc:	40015000 	.word	0x40015000
   26a00:	200247e4 	.word	0x200247e4
   26a04:	0004894d 	.word	0x0004894d
   26a08:	00048964 	.word	0x00048964

00026a0c <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
   26a0c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26a0e:	f04f 0320 	mov.w	r3, #32
   26a12:	f3ef 8511 	mrs	r5, BASEPRI
   26a16:	f383 8811 	msr	BASEPRI, r3
   26a1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26a1e:	481b      	ldr	r0, [pc, #108]	; (26a8c <z_timer_cycle_get_32+0x80>)
   26a20:	f017 fa8a 	bl	3df38 <z_spin_lock_valid>
   26a24:	b968      	cbnz	r0, 26a42 <z_timer_cycle_get_32+0x36>
   26a26:	235c      	movs	r3, #92	; 0x5c
   26a28:	4a19      	ldr	r2, [pc, #100]	; (26a90 <z_timer_cycle_get_32+0x84>)
   26a2a:	491a      	ldr	r1, [pc, #104]	; (26a94 <z_timer_cycle_get_32+0x88>)
   26a2c:	481a      	ldr	r0, [pc, #104]	; (26a98 <z_timer_cycle_get_32+0x8c>)
   26a2e:	f01a fcc9 	bl	413c4 <printk>
   26a32:	4916      	ldr	r1, [pc, #88]	; (26a8c <z_timer_cycle_get_32+0x80>)
   26a34:	4819      	ldr	r0, [pc, #100]	; (26a9c <z_timer_cycle_get_32+0x90>)
   26a36:	f01a fcc5 	bl	413c4 <printk>
   26a3a:	215c      	movs	r1, #92	; 0x5c
   26a3c:	4814      	ldr	r0, [pc, #80]	; (26a90 <z_timer_cycle_get_32+0x84>)
   26a3e:	f01a fede 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   26a42:	4812      	ldr	r0, [pc, #72]	; (26a8c <z_timer_cycle_get_32+0x80>)
   26a44:	f017 fa96 	bl	3df74 <z_spin_lock_set_owner>
   26a48:	4b15      	ldr	r3, [pc, #84]	; (26aa0 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a4a:	4810      	ldr	r0, [pc, #64]	; (26a8c <z_timer_cycle_get_32+0x80>)
   26a4c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   26a50:	4b14      	ldr	r3, [pc, #80]	; (26aa4 <z_timer_cycle_get_32+0x98>)
   26a52:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   26a54:	1ae4      	subs	r4, r4, r3
   26a56:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   26a5a:	441c      	add	r4, r3
   26a5c:	f017 fa7a 	bl	3df54 <z_spin_unlock_valid>
   26a60:	b968      	cbnz	r0, 26a7e <z_timer_cycle_get_32+0x72>
   26a62:	2384      	movs	r3, #132	; 0x84
   26a64:	4a0a      	ldr	r2, [pc, #40]	; (26a90 <z_timer_cycle_get_32+0x84>)
   26a66:	4910      	ldr	r1, [pc, #64]	; (26aa8 <z_timer_cycle_get_32+0x9c>)
   26a68:	480b      	ldr	r0, [pc, #44]	; (26a98 <z_timer_cycle_get_32+0x8c>)
   26a6a:	f01a fcab 	bl	413c4 <printk>
   26a6e:	4907      	ldr	r1, [pc, #28]	; (26a8c <z_timer_cycle_get_32+0x80>)
   26a70:	480e      	ldr	r0, [pc, #56]	; (26aac <z_timer_cycle_get_32+0xa0>)
   26a72:	f01a fca7 	bl	413c4 <printk>
   26a76:	2184      	movs	r1, #132	; 0x84
   26a78:	4805      	ldr	r0, [pc, #20]	; (26a90 <z_timer_cycle_get_32+0x84>)
   26a7a:	f01a fec0 	bl	417fe <assert_post_action>
	__asm__ volatile(
   26a7e:	f385 8811 	msr	BASEPRI, r5
   26a82:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   26a86:	4620      	mov	r0, r4
   26a88:	bd38      	pop	{r3, r4, r5, pc}
   26a8a:	bf00      	nop
   26a8c:	200247e8 	.word	0x200247e8
   26a90:	000488fa 	.word	0x000488fa
   26a94:	00048920 	.word	0x00048920
   26a98:	00048156 	.word	0x00048156
   26a9c:	00048935 	.word	0x00048935
   26aa0:	40015000 	.word	0x40015000
   26aa4:	200247e4 	.word	0x200247e4
   26aa8:	0004894d 	.word	0x0004894d
   26aac:	00048964 	.word	0x00048964

00026ab0 <gps_agps_request>:
}

#endif /* CONFIG_AGPS_SRC_SUPL */

int gps_agps_request(struct gps_agps_request request, int socket)
{
   26ab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   26ab2:	ab01      	add	r3, sp, #4
   26ab4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		LOG_ERR("SUPL request failed, error: %d", err);
		return err;
	}

#elif defined(CONFIG_AGPS_SRC_NRF_CLOUD)
	err = nrf_cloud_agps_request(request);
   26ab8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   26abc:	f008 f9ae 	bl	2ee1c <nrf_cloud_agps_request>
	if (err) {
   26ac0:	4604      	mov	r4, r0
   26ac2:	b150      	cbz	r0, 26ada <gps_agps_request+0x2a>
   26ac4:	4806      	ldr	r0, [pc, #24]	; (26ae0 <gps_agps_request+0x30>)
   26ac6:	4b07      	ldr	r3, [pc, #28]	; (26ae4 <gps_agps_request+0x34>)
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
   26ac8:	4622      	mov	r2, r4
   26aca:	1a1b      	subs	r3, r3, r0
   26acc:	08db      	lsrs	r3, r3, #3
   26ace:	019b      	lsls	r3, r3, #6
   26ad0:	4905      	ldr	r1, [pc, #20]	; (26ae8 <gps_agps_request+0x38>)
   26ad2:	f043 0001 	orr.w	r0, r3, #1
   26ad6:	f01a fea3 	bl	41820 <log_string_sync>
		return err;
	}
#endif /* CONFIG_AGPS_SRC_SUPL */

	return 0;
}
   26ada:	4620      	mov	r0, r4
   26adc:	b004      	add	sp, #16
   26ade:	bd10      	pop	{r4, pc}
   26ae0:	000463bc 	.word	0x000463bc
   26ae4:	000463c4 	.word	0x000463c4
   26ae8:	000494cd 	.word	0x000494cd

00026aec <gps_process_agps_data>:
{
	int err = 0;

#if defined(CONFIG_AGPS_SRC_NRF_CLOUD) && defined(CONFIG_NRF_CLOUD_AGPS)

	err = nrf_cloud_agps_process(buf, len, NULL);
   26aec:	2200      	movs	r2, #0
{
   26aee:	b510      	push	{r4, lr}
	err = nrf_cloud_agps_process(buf, len, NULL);
   26af0:	f008 fa8a 	bl	2f008 <nrf_cloud_agps_process>
	if (err) {
   26af4:	4604      	mov	r4, r0
   26af6:	4b0a      	ldr	r3, [pc, #40]	; (26b20 <gps_process_agps_data+0x34>)
   26af8:	4a0a      	ldr	r2, [pc, #40]	; (26b24 <gps_process_agps_data+0x38>)
   26afa:	1a9b      	subs	r3, r3, r2
   26afc:	08db      	lsrs	r3, r3, #3
   26afe:	0198      	lsls	r0, r3, #6
   26b00:	b13c      	cbz	r4, 26b12 <gps_process_agps_data+0x26>
		LOG_ERR("A-GPS failed, error: %d", err);
   26b02:	4622      	mov	r2, r4
   26b04:	4908      	ldr	r1, [pc, #32]	; (26b28 <gps_process_agps_data+0x3c>)
   26b06:	f040 0001 	orr.w	r0, r0, #1
   26b0a:	f01a fe89 	bl	41820 <log_string_sync>
		LOG_INF("A-GPS data successfully processed");
	}
#endif /* CONFIG_AGPS_SRC_NRF_CLOUD && CONFIG_NRF_CLOUD_AGPS */

	return err;
}
   26b0e:	4620      	mov	r0, r4
   26b10:	bd10      	pop	{r4, pc}
		LOG_INF("A-GPS data successfully processed");
   26b12:	4906      	ldr	r1, [pc, #24]	; (26b2c <gps_process_agps_data+0x40>)
   26b14:	f040 0003 	orr.w	r0, r0, #3
   26b18:	f01a fe82 	bl	41820 <log_string_sync>
	return err;
   26b1c:	e7f7      	b.n	26b0e <gps_process_agps_data+0x22>
   26b1e:	bf00      	nop
   26b20:	000463c4 	.word	0x000463c4
   26b24:	000463bc 	.word	0x000463bc
   26b28:	000494f7 	.word	0x000494f7
   26b2c:	0004950f 	.word	0x0004950f

00026b30 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   26b30:	4a09      	ldr	r2, [pc, #36]	; (26b58 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   26b32:	490a      	ldr	r1, [pc, #40]	; (26b5c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   26b34:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   26b36:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   26b38:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   26b3a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   26b3c:	4908      	ldr	r1, [pc, #32]	; (26b60 <arch_swap+0x30>)
   26b3e:	684b      	ldr	r3, [r1, #4]
   26b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   26b44:	604b      	str	r3, [r1, #4]
   26b46:	2300      	movs	r3, #0
   26b48:	f383 8811 	msr	BASEPRI, r3
   26b4c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   26b50:	6893      	ldr	r3, [r2, #8]
}
   26b52:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   26b54:	4770      	bx	lr
   26b56:	bf00      	nop
   26b58:	20025d48 	.word	0x20025d48
   26b5c:	00047284 	.word	0x00047284
   26b60:	e000ed00 	.word	0xe000ed00

00026b64 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   26b64:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   26b66:	2b00      	cmp	r3, #0
   26b68:	db08      	blt.n	26b7c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26b6a:	2201      	movs	r2, #1
   26b6c:	f000 001f 	and.w	r0, r0, #31
   26b70:	fa02 f000 	lsl.w	r0, r2, r0
   26b74:	4a02      	ldr	r2, [pc, #8]	; (26b80 <arch_irq_enable+0x1c>)
   26b76:	095b      	lsrs	r3, r3, #5
   26b78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   26b7c:	4770      	bx	lr
   26b7e:	bf00      	nop
   26b80:	e000e100 	.word	0xe000e100

00026b84 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   26b84:	4b05      	ldr	r3, [pc, #20]	; (26b9c <arch_irq_is_enabled+0x18>)
   26b86:	0942      	lsrs	r2, r0, #5
   26b88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   26b8c:	2301      	movs	r3, #1
   26b8e:	f000 001f 	and.w	r0, r0, #31
   26b92:	fa03 f000 	lsl.w	r0, r3, r0
}
   26b96:	4010      	ands	r0, r2
   26b98:	4770      	bx	lr
   26b9a:	bf00      	nop
   26b9c:	e000e100 	.word	0xe000e100

00026ba0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   26ba0:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   26ba2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   26ba4:	2c07      	cmp	r4, #7
{
   26ba6:	4605      	mov	r5, r0
   26ba8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   26baa:	d90e      	bls.n	26bca <z_arm_irq_priority_set+0x2a>
   26bac:	235b      	movs	r3, #91	; 0x5b
   26bae:	4a10      	ldr	r2, [pc, #64]	; (26bf0 <z_arm_irq_priority_set+0x50>)
   26bb0:	4910      	ldr	r1, [pc, #64]	; (26bf4 <z_arm_irq_priority_set+0x54>)
   26bb2:	4811      	ldr	r0, [pc, #68]	; (26bf8 <z_arm_irq_priority_set+0x58>)
   26bb4:	f01a fc06 	bl	413c4 <printk>
   26bb8:	4631      	mov	r1, r6
   26bba:	4810      	ldr	r0, [pc, #64]	; (26bfc <z_arm_irq_priority_set+0x5c>)
   26bbc:	2207      	movs	r2, #7
   26bbe:	f01a fc01 	bl	413c4 <printk>
   26bc2:	215b      	movs	r1, #91	; 0x5b
   26bc4:	480a      	ldr	r0, [pc, #40]	; (26bf0 <z_arm_irq_priority_set+0x50>)
   26bc6:	f01a fe1a 	bl	417fe <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   26bca:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   26bcc:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26bce:	bfac      	ite	ge
   26bd0:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26bd4:	4b0a      	ldrlt	r3, [pc, #40]	; (26c00 <z_arm_irq_priority_set+0x60>)
   26bd6:	ea4f 1444 	mov.w	r4, r4, lsl #5
   26bda:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26bdc:	bfab      	itete	ge
   26bde:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26be2:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26be6:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26bea:	555c      	strblt	r4, [r3, r5]
}
   26bec:	bd70      	pop	{r4, r5, r6, pc}
   26bee:	bf00      	nop
   26bf0:	00049531 	.word	0x00049531
   26bf4:	00049567 	.word	0x00049567
   26bf8:	00048156 	.word	0x00048156
   26bfc:	00049582 	.word	0x00049582
   26c00:	e000ed14 	.word	0xe000ed14

00026c04 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   26c04:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   26c06:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   26c08:	4b04      	ldr	r3, [pc, #16]	; (26c1c <_arch_isr_direct_pm+0x18>)
   26c0a:	6a18      	ldr	r0, [r3, #32]
   26c0c:	b118      	cbz	r0, 26c16 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   26c0e:	2200      	movs	r2, #0
   26c10:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   26c12:	f01d fe74 	bl	448fe <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   26c16:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   26c18:	bd08      	pop	{r3, pc}
   26c1a:	bf00      	nop
   26c1c:	20025d48 	.word	0x20025d48

00026c20 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   26c20:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   26c24:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   26c26:	490c      	ldr	r1, [pc, #48]	; (26c58 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   26c28:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   26c2c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   26c2e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   26c32:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   26c36:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   26c38:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   26c3c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   26c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   26c44:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   26c48:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   26c4a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   26c4c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   26c4e:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   26c50:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   26c54:	4770      	bx	lr
   26c56:	bf00      	nop
   26c58:	000414c9 	.word	0x000414c9

00026c5c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   26c5c:	b508      	push	{r3, lr}
   26c5e:	4604      	mov	r4, r0
   26c60:	460e      	mov	r6, r1
   26c62:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   26c64:	2300      	movs	r3, #0
   26c66:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   26c6a:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   26c6e:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   26c72:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   26c76:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   26c7a:	f000 fc25 	bl	274c8 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   26c7e:	4b09      	ldr	r3, [pc, #36]	; (26ca4 <arch_switch_to_main_thread+0x48>)
   26c80:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   26c82:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   26c84:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   26c88:	4628      	mov	r0, r5
   26c8a:	f386 8809 	msr	PSP, r6
   26c8e:	2100      	movs	r1, #0
   26c90:	b663      	cpsie	if
   26c92:	f381 8811 	msr	BASEPRI, r1
   26c96:	f3bf 8f6f 	isb	sy
   26c9a:	2200      	movs	r2, #0
   26c9c:	2300      	movs	r3, #0
   26c9e:	f01a fc13 	bl	414c8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   26ca2:	bf00      	nop
   26ca4:	20025d48 	.word	0x20025d48

00026ca8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   26ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26cac:	4606      	mov	r6, r0

	if (esf != NULL) {
   26cae:	460d      	mov	r5, r1
{
   26cb0:	b087      	sub	sp, #28
	if (esf != NULL) {
   26cb2:	2900      	cmp	r1, #0
   26cb4:	d051      	beq.n	26d5a <z_arm_fatal_error+0xb2>
   26cb6:	4b2c      	ldr	r3, [pc, #176]	; (26d68 <z_arm_fatal_error+0xc0>)
   26cb8:	4c2c      	ldr	r4, [pc, #176]	; (26d6c <z_arm_fatal_error+0xc4>)
   26cba:	46a8      	mov	r8, r5
   26cbc:	1ae4      	subs	r4, r4, r3
   26cbe:	08e4      	lsrs	r4, r4, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   26cc0:	688b      	ldr	r3, [r1, #8]
   26cc2:	01a4      	lsls	r4, r4, #6
   26cc4:	f044 0401 	orr.w	r4, r4, #1
   26cc8:	9300      	str	r3, [sp, #0]
   26cca:	e9d1 2300 	ldrd	r2, r3, [r1]
   26cce:	4620      	mov	r0, r4
   26cd0:	4927      	ldr	r1, [pc, #156]	; (26d70 <z_arm_fatal_error+0xc8>)
   26cd2:	f01a fda5 	bl	41820 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   26cd6:	696b      	ldr	r3, [r5, #20]
   26cd8:	4620      	mov	r0, r4
   26cda:	9300      	str	r3, [sp, #0]
   26cdc:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   26ce0:	4924      	ldr	r1, [pc, #144]	; (26d74 <z_arm_fatal_error+0xcc>)
   26ce2:	f01a fd9d 	bl	41820 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   26ce6:	4620      	mov	r0, r4
   26ce8:	69ea      	ldr	r2, [r5, #28]
   26cea:	4923      	ldr	r1, [pc, #140]	; (26d78 <z_arm_fatal_error+0xd0>)
   26cec:	f01a fd98 	bl	41820 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   26cf0:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   26cf2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 26d84 <z_arm_fatal_error+0xdc>
   26cf6:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   26cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   26cfe:	ed98 7a08 	vldr	s14, [r8, #32]
   26d02:	edcd 7a05 	vstr	s15, [sp, #20]
   26d06:	1cfb      	adds	r3, r7, #3
   26d08:	9304      	str	r3, [sp, #16]
   26d0a:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   26d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   26d12:	edcd 7a03 	vstr	s15, [sp, #12]
   26d16:	1cbb      	adds	r3, r7, #2
   26d18:	9302      	str	r3, [sp, #8]
   26d1a:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   26d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   26d22:	edcd 7a01 	vstr	s15, [sp, #4]
   26d26:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   26d2a:	1c7b      	adds	r3, r7, #1
   26d2c:	463a      	mov	r2, r7
   26d2e:	9300      	str	r3, [sp, #0]
   26d30:	4649      	mov	r1, r9
   26d32:	ee17 3a90 	vmov	r3, s15
   26d36:	4620      	mov	r0, r4
	for (int i = 0; i < 16; i += 4) {
   26d38:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   26d3a:	f01a fd71 	bl	41820 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   26d3e:	2f10      	cmp	r7, #16
   26d40:	f108 0810 	add.w	r8, r8, #16
   26d44:	d1d7      	bne.n	26cf6 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   26d46:	4620      	mov	r0, r4
   26d48:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   26d4a:	490c      	ldr	r1, [pc, #48]	; (26d7c <z_arm_fatal_error+0xd4>)
   26d4c:	f01a fd68 	bl	41820 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   26d50:	4620      	mov	r0, r4
   26d52:	69aa      	ldr	r2, [r5, #24]
   26d54:	490a      	ldr	r1, [pc, #40]	; (26d80 <z_arm_fatal_error+0xd8>)
   26d56:	f01a fd63 	bl	41820 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   26d5a:	4629      	mov	r1, r5
   26d5c:	4630      	mov	r0, r6
}
   26d5e:	b007      	add	sp, #28
   26d60:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_fatal_error(reason, esf);
   26d64:	f014 be92 	b.w	3ba8c <z_fatal_error>
   26d68:	000463bc 	.word	0x000463bc
   26d6c:	000464cc 	.word	0x000464cc
   26d70:	000495b7 	.word	0x000495b7
   26d74:	000495e6 	.word	0x000495e6
   26d78:	00049615 	.word	0x00049615
   26d7c:	00049667 	.word	0x00049667
   26d80:	00049676 	.word	0x00049676
   26d84:	00049624 	.word	0x00049624

00026d88 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   26d88:	4a14      	ldr	r2, [pc, #80]	; (26ddc <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   26d8a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   26d8c:	4b14      	ldr	r3, [pc, #80]	; (26de0 <z_arm_prep_c+0x58>)
   26d8e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   26d92:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   26d94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   26d98:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   26d9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   26da0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   26da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   26da8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   26dac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   26db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   26db4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   26db8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   26dbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   26dc0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   26dc4:	2300      	movs	r3, #0
   26dc6:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   26dca:	f014 fef3 	bl	3bbb4 <z_bss_zero>
	z_data_copy();
   26dce:	f014 fefb 	bl	3bbc8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   26dd2:	f000 fb41 	bl	27458 <z_arm_interrupt_init>
	z_cstart();
   26dd6:	f014 ff35 	bl	3bc44 <z_cstart>
   26dda:	bf00      	nop
   26ddc:	0001c200 	.word	0x0001c200
   26de0:	e000ed00 	.word	0xe000ed00

00026de4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   26de4:	4929      	ldr	r1, [pc, #164]	; (26e8c <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26de6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   26de8:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   26dec:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   26dee:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   26df2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   26df6:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   26dfa:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   26dfe:	d004      	beq.n	26e0a <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   26e00:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   26e04:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   26e08:	e007      	b.n	26e1a <out_fp_endif>

00026e0a <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   26e0a:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   26e0e:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   26e12:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   26e16:	f050 0004 	orrs.w	r0, r0, #4

00026e1a <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   26e1a:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   26e1e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   26e20:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   26e24:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   26e28:	4f19      	ldr	r7, [pc, #100]	; (26e90 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   26e2a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   26e2e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   26e30:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   26e32:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   26e34:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   26e36:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   26e38:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   26e3a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   26e3e:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   26e42:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   26e46:	d105      	bne.n	26e54 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   26e48:	2300      	movs	r3, #0
    vmsr fpscr, r3
   26e4a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   26e4e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   26e52:	e005      	b.n	26e60 <in_fp_endif>

00026e54 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   26e54:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   26e58:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   26e5c:	ec90 8a10 	vldmia	r0, {s16-s31}

00026e60 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   26e60:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   26e64:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   26e68:	f383 8814 	msr	CONTROL, r3
    isb
   26e6c:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   26e70:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   26e74:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   26e78:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   26e7c:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   26e80:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   26e82:	f01b fba7 	bl	425d4 <configure_builtin_stack_guard>
    pop {r2, lr}
   26e86:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   26e8a:	4770      	bx	lr
    ldr r1, =_kernel
   26e8c:	20025d48 	.word	0x20025d48
    ldr v4, =_SCS_ICSR
   26e90:	e000ed04 	.word	0xe000ed04

00026e94 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   26e94:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   26e98:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   26e9a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   26e9e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   26ea2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   26ea4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   26ea8:	2902      	cmp	r1, #2
    beq _oops
   26eaa:	d0ff      	beq.n	26eac <_oops>

00026eac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   26eac:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   26eae:	f01b fb95 	bl	425dc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   26eb2:	bd01      	pop	{r0, pc}

00026eb4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   26eb4:	4901      	ldr	r1, [pc, #4]	; (26ebc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   26eb6:	2210      	movs	r2, #16
	str	r2, [r1]
   26eb8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   26eba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   26ebc:	e000ed10 	.word	0xe000ed10

00026ec0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   26ec0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   26ec2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   26ec4:	f380 8811 	msr	BASEPRI, r0
	isb
   26ec8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   26ecc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   26ed0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   26ed2:	b662      	cpsie	i
	isb
   26ed4:	f3bf 8f6f 	isb	sy

	bx	lr
   26ed8:	4770      	bx	lr
   26eda:	bf00      	nop

00026edc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   26edc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   26ede:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   26ee0:	f381 8811 	msr	BASEPRI, r1

	wfe
   26ee4:	bf20      	wfe

	msr	BASEPRI, r0
   26ee6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   26eea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   26eec:	4770      	bx	lr
   26eee:	bf00      	nop

00026ef0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   26ef0:	bf30      	wfi
    b z_SysNmiOnReset
   26ef2:	f7ff bffd 	b.w	26ef0 <z_SysNmiOnReset>
   26ef6:	bf00      	nop

00026ef8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   26ef8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   26efa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   26efc:	4a0b      	ldr	r2, [pc, #44]	; (26f2c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   26efe:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   26f00:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   26f02:	bf1e      	ittt	ne
	movne	r1, #0
   26f04:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   26f06:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   26f08:	f01d fcf9 	blne	448fe <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   26f0c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   26f0e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   26f12:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   26f16:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   26f1a:	4905      	ldr	r1, [pc, #20]	; (26f30 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   26f1c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   26f1e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   26f20:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   26f22:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   26f26:	4903      	ldr	r1, [pc, #12]	; (26f34 <_isr_wrapper+0x3c>)
	bx r1
   26f28:	4708      	bx	r1
   26f2a:	0000      	.short	0x0000
	ldr r2, =_kernel
   26f2c:	20025d48 	.word	0x20025d48
	ldr r1, =_sw_isr_table
   26f30:	00046194 	.word	0x00046194
	ldr r1, =z_arm_int_exit
   26f34:	00026f7d 	.word	0x00026f7d

00026f38 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   26f38:	f01a fc69 	bl	4180e <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   26f3c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   26f3e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   26f42:	4808      	ldr	r0, [pc, #32]	; (26f64 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   26f44:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   26f48:	1840      	adds	r0, r0, r1
    msr PSP, r0
   26f4a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   26f4e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   26f52:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   26f54:	4308      	orrs	r0, r1
    msr CONTROL, r0
   26f56:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   26f5a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   26f5e:	f7ff ff13 	bl	26d88 <z_arm_prep_c>
   26f62:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   26f64:	20032178 	.word	0x20032178

00026f68 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   26f68:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   26f6c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   26f70:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   26f72:	4672      	mov	r2, lr
	bl z_arm_fault
   26f74:	f000 f964 	bl	27240 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   26f78:	bd01      	pop	{r0, pc}
   26f7a:	bf00      	nop

00026f7c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   26f7c:	4b04      	ldr	r3, [pc, #16]	; (26f90 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   26f7e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   26f80:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   26f82:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   26f84:	d003      	beq.n	26f8e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   26f86:	4903      	ldr	r1, [pc, #12]	; (26f94 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   26f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   26f8c:	600a      	str	r2, [r1, #0]

00026f8e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   26f8e:	4770      	bx	lr
	ldr r3, =_kernel
   26f90:	20025d48 	.word	0x20025d48
	ldr r1, =_SCS_ICSR
   26f94:	e000ed04 	.word	0xe000ed04

00026f98 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   26f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26f9c:	4b30      	ldr	r3, [pc, #192]	; (27060 <mem_manage_fault.isra.0+0xc8>)
   26f9e:	4c31      	ldr	r4, [pc, #196]	; (27064 <mem_manage_fault.isra.0+0xcc>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   26fa0:	4d31      	ldr	r5, [pc, #196]	; (27068 <mem_manage_fault.isra.0+0xd0>)
   26fa2:	1ae4      	subs	r4, r4, r3
   26fa4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   26fa6:	01a4      	lsls	r4, r4, #6
   26fa8:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   26fac:	4607      	mov	r7, r0
   26fae:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   26fb0:	4640      	mov	r0, r8
   26fb2:	492e      	ldr	r1, [pc, #184]	; (2706c <mem_manage_fault.isra.0+0xd4>)
   26fb4:	f01a fc34 	bl	41820 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   26fb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   26fba:	06d1      	lsls	r1, r2, #27
   26fbc:	d503      	bpl.n	26fc6 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   26fbe:	4640      	mov	r0, r8
   26fc0:	492b      	ldr	r1, [pc, #172]	; (27070 <mem_manage_fault.isra.0+0xd8>)
   26fc2:	f01a fc2d 	bl	41820 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   26fc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26fc8:	071a      	lsls	r2, r3, #28
   26fca:	d504      	bpl.n	26fd6 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   26fcc:	4929      	ldr	r1, [pc, #164]	; (27074 <mem_manage_fault.isra.0+0xdc>)
   26fce:	f044 0001 	orr.w	r0, r4, #1
   26fd2:	f01a fc25 	bl	41820 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   26fd6:	4d24      	ldr	r5, [pc, #144]	; (27068 <mem_manage_fault.isra.0+0xd0>)
   26fd8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26fda:	079b      	lsls	r3, r3, #30
   26fdc:	d512      	bpl.n	27004 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   26fde:	f044 0801 	orr.w	r8, r4, #1
   26fe2:	4640      	mov	r0, r8
   26fe4:	4924      	ldr	r1, [pc, #144]	; (27078 <mem_manage_fault.isra.0+0xe0>)
   26fe6:	f01a fc1b 	bl	41820 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   26fea:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   26fec:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26fee:	0618      	lsls	r0, r3, #24
   26ff0:	d508      	bpl.n	27004 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   26ff2:	4640      	mov	r0, r8
   26ff4:	4921      	ldr	r1, [pc, #132]	; (2707c <mem_manage_fault.isra.0+0xe4>)
   26ff6:	f01a fc13 	bl	41820 <log_string_sync>
			if (from_hard_fault) {
   26ffa:	b11f      	cbz	r7, 27004 <mem_manage_fault.isra.0+0x6c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   26ffc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   27002:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   27004:	4d18      	ldr	r5, [pc, #96]	; (27068 <mem_manage_fault.isra.0+0xd0>)
   27006:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   27008:	07d1      	lsls	r1, r2, #31
   2700a:	d504      	bpl.n	27016 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   2700c:	491c      	ldr	r1, [pc, #112]	; (27080 <mem_manage_fault.isra.0+0xe8>)
   2700e:	f044 0001 	orr.w	r0, r4, #1
   27012:	f01a fc05 	bl	41820 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   27016:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27018:	069a      	lsls	r2, r3, #26
   2701a:	d504      	bpl.n	27026 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   2701c:	4919      	ldr	r1, [pc, #100]	; (27084 <mem_manage_fault.isra.0+0xec>)
   2701e:	f044 0001 	orr.w	r0, r4, #1
   27022:	f01a fbfd 	bl	41820 <log_string_sync>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   27026:	4b10      	ldr	r3, [pc, #64]	; (27068 <mem_manage_fault.isra.0+0xd0>)
   27028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2702a:	06db      	lsls	r3, r3, #27
   2702c:	d50e      	bpl.n	2704c <mem_manage_fault.isra.0+0xb4>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(0,
   2702e:	4916      	ldr	r1, [pc, #88]	; (27088 <mem_manage_fault.isra.0+0xf0>)
   27030:	f44f 739f 	mov.w	r3, #318	; 0x13e
   27034:	4a15      	ldr	r2, [pc, #84]	; (2708c <mem_manage_fault.isra.0+0xf4>)
   27036:	4816      	ldr	r0, [pc, #88]	; (27090 <mem_manage_fault.isra.0+0xf8>)
   27038:	f01a f9c4 	bl	413c4 <printk>
   2703c:	4815      	ldr	r0, [pc, #84]	; (27094 <mem_manage_fault.isra.0+0xfc>)
   2703e:	f01a f9c1 	bl	413c4 <printk>
   27042:	f44f 719f 	mov.w	r1, #318	; 0x13e
   27046:	4811      	ldr	r0, [pc, #68]	; (2708c <mem_manage_fault.isra.0+0xf4>)
   27048:	f01a fbd9 	bl	417fe <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   2704c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2704e:	4a06      	ldr	r2, [pc, #24]	; (27068 <mem_manage_fault.isra.0+0xd0>)
   27050:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27052:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   27056:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   27058:	7030      	strb	r0, [r6, #0]

	return reason;
}
   2705a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2705e:	bf00      	nop
   27060:	000463bc 	.word	0x000463bc
   27064:	000464cc 	.word	0x000464cc
   27068:	e000ed00 	.word	0xe000ed00
   2706c:	000496a4 	.word	0x000496a4
   27070:	000496ba 	.word	0x000496ba
   27074:	000496ed 	.word	0x000496ed
   27078:	00049700 	.word	0x00049700
   2707c:	00049718 	.word	0x00049718
   27080:	0004972e 	.word	0x0004972e
   27084:	0004974d 	.word	0x0004974d
   27088:	0004ef58 	.word	0x0004ef58
   2708c:	0004977c 	.word	0x0004977c
   27090:	00048156 	.word	0x00048156
   27094:	000497b6 	.word	0x000497b6

00027098 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   27098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2709c:	4b29      	ldr	r3, [pc, #164]	; (27144 <bus_fault.isra.0+0xac>)
   2709e:	4c2a      	ldr	r4, [pc, #168]	; (27148 <bus_fault.isra.0+0xb0>)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   270a0:	4d2a      	ldr	r5, [pc, #168]	; (2714c <bus_fault.isra.0+0xb4>)
   270a2:	1ae4      	subs	r4, r4, r3
   270a4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   270a6:	01a4      	lsls	r4, r4, #6
   270a8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   270ac:	4607      	mov	r7, r0
   270ae:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   270b0:	4640      	mov	r0, r8
   270b2:	4927      	ldr	r1, [pc, #156]	; (27150 <bus_fault.isra.0+0xb8>)
   270b4:	f01a fbb4 	bl	41820 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   270b8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   270ba:	04d1      	lsls	r1, r2, #19
   270bc:	d503      	bpl.n	270c6 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   270be:	4640      	mov	r0, r8
   270c0:	4924      	ldr	r1, [pc, #144]	; (27154 <bus_fault.isra.0+0xbc>)
   270c2:	f01a fbad 	bl	41820 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   270c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   270c8:	051a      	lsls	r2, r3, #20
   270ca:	d504      	bpl.n	270d6 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   270cc:	4922      	ldr	r1, [pc, #136]	; (27158 <bus_fault.isra.0+0xc0>)
   270ce:	f044 0001 	orr.w	r0, r4, #1
   270d2:	f01a fba5 	bl	41820 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   270d6:	4d1d      	ldr	r5, [pc, #116]	; (2714c <bus_fault.isra.0+0xb4>)
   270d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   270da:	059b      	lsls	r3, r3, #22
   270dc:	d512      	bpl.n	27104 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   270de:	f044 0801 	orr.w	r8, r4, #1
   270e2:	4640      	mov	r0, r8
   270e4:	491d      	ldr	r1, [pc, #116]	; (2715c <bus_fault.isra.0+0xc4>)
   270e6:	f01a fb9b 	bl	41820 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   270ea:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   270ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
   270ee:	0418      	lsls	r0, r3, #16
   270f0:	d508      	bpl.n	27104 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   270f2:	4640      	mov	r0, r8
   270f4:	491a      	ldr	r1, [pc, #104]	; (27160 <bus_fault.isra.0+0xc8>)
   270f6:	f01a fb93 	bl	41820 <log_string_sync>
			if (from_hard_fault) {
   270fa:	b11f      	cbz	r7, 27104 <bus_fault.isra.0+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   270fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   270fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   27102:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   27104:	4d11      	ldr	r5, [pc, #68]	; (2714c <bus_fault.isra.0+0xb4>)
   27106:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27108:	0559      	lsls	r1, r3, #21
   2710a:	d504      	bpl.n	27116 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   2710c:	4915      	ldr	r1, [pc, #84]	; (27164 <bus_fault.isra.0+0xcc>)
   2710e:	f044 0001 	orr.w	r0, r4, #1
   27112:	f01a fb85 	bl	41820 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   27116:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27118:	05da      	lsls	r2, r3, #23
   2711a:	d50d      	bpl.n	27138 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   2711c:	4912      	ldr	r1, [pc, #72]	; (27168 <bus_fault.isra.0+0xd0>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   2711e:	f044 0001 	orr.w	r0, r4, #1
   27122:	f01a fb7d 	bl	41820 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   27126:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   27128:	4a08      	ldr	r2, [pc, #32]	; (2714c <bus_fault.isra.0+0xb4>)
   2712a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2712c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   27130:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   27132:	7030      	strb	r0, [r6, #0]

	return reason;
}
   27134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   27138:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2713a:	049b      	lsls	r3, r3, #18
   2713c:	d5f3      	bpl.n	27126 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   2713e:	490b      	ldr	r1, [pc, #44]	; (2716c <bus_fault.isra.0+0xd4>)
   27140:	e7ed      	b.n	2711e <bus_fault.isra.0+0x86>
   27142:	bf00      	nop
   27144:	000463bc 	.word	0x000463bc
   27148:	000464cc 	.word	0x000464cc
   2714c:	e000ed00 	.word	0xe000ed00
   27150:	000497f0 	.word	0x000497f0
   27154:	00049806 	.word	0x00049806
   27158:	000496ed 	.word	0x000496ed
   2715c:	00049817 	.word	0x00049817
   27160:	00049830 	.word	0x00049830
   27164:	00049845 	.word	0x00049845
   27168:	00049860 	.word	0x00049860
   2716c:	0004974d 	.word	0x0004974d

00027170 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   27170:	b570      	push	{r4, r5, r6, lr}
   27172:	4b28      	ldr	r3, [pc, #160]	; (27214 <usage_fault.isra.0+0xa4>)
   27174:	4c28      	ldr	r4, [pc, #160]	; (27218 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   27176:	4d29      	ldr	r5, [pc, #164]	; (2721c <usage_fault.isra.0+0xac>)
   27178:	1ae4      	subs	r4, r4, r3
   2717a:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   2717c:	01a4      	lsls	r4, r4, #6
   2717e:	f044 0601 	orr.w	r6, r4, #1
   27182:	4630      	mov	r0, r6
   27184:	4926      	ldr	r1, [pc, #152]	; (27220 <usage_fault.isra.0+0xb0>)
   27186:	f01a fb4b 	bl	41820 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2718a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2718c:	0193      	lsls	r3, r2, #6
   2718e:	d503      	bpl.n	27198 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   27190:	4630      	mov	r0, r6
   27192:	4924      	ldr	r1, [pc, #144]	; (27224 <usage_fault.isra.0+0xb4>)
   27194:	f01a fb44 	bl	41820 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   27198:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2719a:	01dd      	lsls	r5, r3, #7
   2719c:	d504      	bpl.n	271a8 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   2719e:	4922      	ldr	r1, [pc, #136]	; (27228 <usage_fault.isra.0+0xb8>)
   271a0:	f044 0001 	orr.w	r0, r4, #1
   271a4:	f01a fb3c 	bl	41820 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   271a8:	4d1c      	ldr	r5, [pc, #112]	; (2721c <usage_fault.isra.0+0xac>)
   271aa:	6aae      	ldr	r6, [r5, #40]	; 0x28
   271ac:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   271b0:	d005      	beq.n	271be <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   271b2:	491e      	ldr	r1, [pc, #120]	; (2722c <usage_fault.isra.0+0xbc>)
   271b4:	f044 0001 	orr.w	r0, r4, #1
   271b8:	f01a fb32 	bl	41820 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   271bc:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   271be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   271c0:	0318      	lsls	r0, r3, #12
   271c2:	d504      	bpl.n	271ce <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   271c4:	491a      	ldr	r1, [pc, #104]	; (27230 <usage_fault.isra.0+0xc0>)
   271c6:	f044 0001 	orr.w	r0, r4, #1
   271ca:	f01a fb29 	bl	41820 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   271ce:	4d13      	ldr	r5, [pc, #76]	; (2721c <usage_fault.isra.0+0xac>)
   271d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   271d2:	0351      	lsls	r1, r2, #13
   271d4:	d504      	bpl.n	271e0 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   271d6:	4917      	ldr	r1, [pc, #92]	; (27234 <usage_fault.isra.0+0xc4>)
   271d8:	f044 0001 	orr.w	r0, r4, #1
   271dc:	f01a fb20 	bl	41820 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   271e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   271e2:	039a      	lsls	r2, r3, #14
   271e4:	d504      	bpl.n	271f0 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   271e6:	4914      	ldr	r1, [pc, #80]	; (27238 <usage_fault.isra.0+0xc8>)
   271e8:	f044 0001 	orr.w	r0, r4, #1
   271ec:	f01a fb18 	bl	41820 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   271f0:	4d0a      	ldr	r5, [pc, #40]	; (2721c <usage_fault.isra.0+0xac>)
   271f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   271f4:	03db      	lsls	r3, r3, #15
   271f6:	d504      	bpl.n	27202 <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   271f8:	4910      	ldr	r1, [pc, #64]	; (2723c <usage_fault.isra.0+0xcc>)
   271fa:	f044 0001 	orr.w	r0, r4, #1
   271fe:	f01a fb0f 	bl	41820 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   27202:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   27204:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   27206:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   2720a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   2720e:	62ab      	str	r3, [r5, #40]	; 0x28
}
   27210:	bd70      	pop	{r4, r5, r6, pc}
   27212:	bf00      	nop
   27214:	000463bc 	.word	0x000463bc
   27218:	000464cc 	.word	0x000464cc
   2721c:	e000ed00 	.word	0xe000ed00
   27220:	00049878 	.word	0x00049878
   27224:	00049890 	.word	0x00049890
   27228:	000498a3 	.word	0x000498a3
   2722c:	000498bd 	.word	0x000498bd
   27230:	000498e7 	.word	0x000498e7
   27234:	00049905 	.word	0x00049905
   27238:	0004992a 	.word	0x0004992a
   2723c:	00049944 	.word	0x00049944

00027240 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   27240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27244:	4b63      	ldr	r3, [pc, #396]	; (273d4 <z_arm_fault+0x194>)
{
   27246:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27248:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   2724c:	460e      	mov	r6, r1
   2724e:	4614      	mov	r4, r2
   27250:	2700      	movs	r7, #0
   27252:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27254:	f3c8 0508 	ubfx	r5, r8, #0, #9
   27258:	f387 8811 	msr	BASEPRI, r7
   2725c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   27260:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   27264:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   27268:	d117      	bne.n	2729a <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   2726a:	07d0      	lsls	r0, r2, #31
   2726c:	d415      	bmi.n	2729a <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   2726e:	0651      	lsls	r1, r2, #25
   27270:	d404      	bmi.n	2727c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   27272:	0722      	lsls	r2, r4, #28
   27274:	d40f      	bmi.n	27296 <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)msp;
   27276:	464e      	mov	r6, r9
			*nested_exc = true;
   27278:	2701      	movs	r7, #1
   2727a:	e00d      	b.n	27298 <z_arm_fault+0x58>
   2727c:	4856      	ldr	r0, [pc, #344]	; (273d8 <z_arm_fault+0x198>)
   2727e:	4b57      	ldr	r3, [pc, #348]	; (273dc <z_arm_fault+0x19c>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   27280:	4957      	ldr	r1, [pc, #348]	; (273e0 <z_arm_fault+0x1a0>)
   27282:	1a1b      	subs	r3, r3, r0
   27284:	08db      	lsrs	r3, r3, #3
   27286:	019b      	lsls	r3, r3, #6
   27288:	f043 0001 	orr.w	r0, r3, #1
   2728c:	f01a fac8 	bl	41820 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   27290:	f014 0704 	ands.w	r7, r4, #4
   27294:	d01e      	beq.n	272d4 <z_arm_fault+0x94>
	*nested_exc = false;
   27296:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   27298:	b97e      	cbnz	r6, 272ba <z_arm_fault+0x7a>
   2729a:	f240 33bb 	movw	r3, #955	; 0x3bb
   2729e:	4a51      	ldr	r2, [pc, #324]	; (273e4 <z_arm_fault+0x1a4>)
   272a0:	4951      	ldr	r1, [pc, #324]	; (273e8 <z_arm_fault+0x1a8>)
   272a2:	4852      	ldr	r0, [pc, #328]	; (273ec <z_arm_fault+0x1ac>)
   272a4:	f01a f88e 	bl	413c4 <printk>
   272a8:	4851      	ldr	r0, [pc, #324]	; (273f0 <z_arm_fault+0x1b0>)
   272aa:	f01a f88b 	bl	413c4 <printk>
   272ae:	f240 31bb 	movw	r1, #955	; 0x3bb
   272b2:	484c      	ldr	r0, [pc, #304]	; (273e4 <z_arm_fault+0x1a4>)
   272b4:	f01a faa3 	bl	417fe <assert_post_action>
   272b8:	2600      	movs	r6, #0
	*recoverable = false;
   272ba:	2300      	movs	r3, #0
   272bc:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   272c0:	1eeb      	subs	r3, r5, #3
   272c2:	2b09      	cmp	r3, #9
   272c4:	d86c      	bhi.n	273a0 <z_arm_fault+0x160>
   272c6:	e8df f003 	tbb	[pc, r3]
   272ca:	5a07      	.short	0x5a07
   272cc:	6b6b3e5e 	.word	0x6b6b3e5e
   272d0:	626b6b6b 	.word	0x626b6b6b
			ptr_esf = (z_arch_esf_t *)msp;
   272d4:	464e      	mov	r6, r9
	if (!alternative_state_exc) {
   272d6:	e7df      	b.n	27298 <z_arm_fault+0x58>
	*recoverable = false;
   272d8:	f04f 0800 	mov.w	r8, #0
   272dc:	4b3e      	ldr	r3, [pc, #248]	; (273d8 <z_arm_fault+0x198>)
   272de:	4d3f      	ldr	r5, [pc, #252]	; (273dc <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   272e0:	4944      	ldr	r1, [pc, #272]	; (273f4 <z_arm_fault+0x1b4>)
   272e2:	1aed      	subs	r5, r5, r3
   272e4:	08ed      	lsrs	r5, r5, #3
   272e6:	01ad      	lsls	r5, r5, #6
   272e8:	f045 0501 	orr.w	r5, r5, #1
   272ec:	4628      	mov	r0, r5
   272ee:	f01a fa97 	bl	41820 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   272f2:	4b38      	ldr	r3, [pc, #224]	; (273d4 <z_arm_fault+0x194>)
	*recoverable = false;
   272f4:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   272f8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   272fa:	f014 0402 	ands.w	r4, r4, #2
   272fe:	d005      	beq.n	2730c <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   27300:	4628      	mov	r0, r5
   27302:	493d      	ldr	r1, [pc, #244]	; (273f8 <z_arm_fault+0x1b8>)
	PR_FAULT_INFO(
   27304:	f01a fa8c 	bl	41820 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   27308:	2400      	movs	r4, #0
}
   2730a:	e01f      	b.n	2734c <z_arm_fault+0x10c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2730e:	005b      	lsls	r3, r3, #1
   27310:	d51c      	bpl.n	2734c <z_arm_fault+0x10c>
		PR_EXC("  Fault escalation (see below)");
   27312:	4628      	mov	r0, r5
   27314:	4939      	ldr	r1, [pc, #228]	; (273fc <z_arm_fault+0x1bc>)
   27316:	f01a fa83 	bl	41820 <log_string_sync>
		if (SCB_MMFSR != 0) {
   2731a:	4b39      	ldr	r3, [pc, #228]	; (27400 <z_arm_fault+0x1c0>)
   2731c:	781b      	ldrb	r3, [r3, #0]
   2731e:	b12b      	cbz	r3, 2732c <z_arm_fault+0xec>
			reason = mem_manage_fault(esf, 1, recoverable);
   27320:	2001      	movs	r0, #1
   27322:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   27326:	f7ff fe37 	bl	26f98 <mem_manage_fault.isra.0>
   2732a:	e00e      	b.n	2734a <z_arm_fault+0x10a>
		} else if (SCB_BFSR != 0) {
   2732c:	4b35      	ldr	r3, [pc, #212]	; (27404 <z_arm_fault+0x1c4>)
   2732e:	781b      	ldrb	r3, [r3, #0]
   27330:	b12b      	cbz	r3, 2733e <z_arm_fault+0xfe>
			reason = bus_fault(esf, 1, recoverable);
   27332:	2001      	movs	r0, #1
   27334:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   27338:	f7ff feae 	bl	27098 <bus_fault.isra.0>
   2733c:	e005      	b.n	2734a <z_arm_fault+0x10a>
		} else if (SCB_UFSR != 0) {
   2733e:	4b32      	ldr	r3, [pc, #200]	; (27408 <z_arm_fault+0x1c8>)
   27340:	881b      	ldrh	r3, [r3, #0]
   27342:	b29b      	uxth	r3, r3
   27344:	b113      	cbz	r3, 2734c <z_arm_fault+0x10c>
			reason = usage_fault(esf);
   27346:	f7ff ff13 	bl	27170 <usage_fault.isra.0>
   2734a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2734c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27350:	b993      	cbnz	r3, 27378 <z_arm_fault+0x138>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   27352:	2268      	movs	r2, #104	; 0x68
   27354:	4631      	mov	r1, r6
   27356:	a802      	add	r0, sp, #8
   27358:	f01d fcc5 	bl	44ce6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2735c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2735e:	b39f      	cbz	r7, 273c8 <z_arm_fault+0x188>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   27360:	f3c3 0208 	ubfx	r2, r3, #0, #9
   27364:	b922      	cbnz	r2, 27370 <z_arm_fault+0x130>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   27366:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2736a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2736e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   27370:	4620      	mov	r0, r4
   27372:	a902      	add	r1, sp, #8
   27374:	f7ff fc98 	bl	26ca8 <z_arm_fatal_error>
}
   27378:	b01d      	add	sp, #116	; 0x74
   2737a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2737e:	2000      	movs	r0, #0
   27380:	f10d 0107 	add.w	r1, sp, #7
   27384:	e7cf      	b.n	27326 <z_arm_fault+0xe6>
		reason = bus_fault(esf, 0, recoverable);
   27386:	2000      	movs	r0, #0
   27388:	f10d 0107 	add.w	r1, sp, #7
   2738c:	e7d4      	b.n	27338 <z_arm_fault+0xf8>
   2738e:	4813      	ldr	r0, [pc, #76]	; (273dc <z_arm_fault+0x19c>)
   27390:	4b11      	ldr	r3, [pc, #68]	; (273d8 <z_arm_fault+0x198>)
	PR_FAULT_INFO(
   27392:	491e      	ldr	r1, [pc, #120]	; (2740c <z_arm_fault+0x1cc>)
   27394:	1ac0      	subs	r0, r0, r3
   27396:	08c0      	lsrs	r0, r0, #3
   27398:	0180      	lsls	r0, r0, #6
   2739a:	f040 0001 	orr.w	r0, r0, #1
   2739e:	e7b1      	b.n	27304 <z_arm_fault+0xc4>
   273a0:	4b0d      	ldr	r3, [pc, #52]	; (273d8 <z_arm_fault+0x198>)
   273a2:	480e      	ldr	r0, [pc, #56]	; (273dc <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** %s %d) *****",
   273a4:	491a      	ldr	r1, [pc, #104]	; (27410 <z_arm_fault+0x1d0>)
   273a6:	1ac0      	subs	r0, r0, r3
   273a8:	08c0      	lsrs	r0, r0, #3
   273aa:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   273ae:	ea4f 1080 	mov.w	r0, r0, lsl #6
   273b2:	4a18      	ldr	r2, [pc, #96]	; (27414 <z_arm_fault+0x1d4>)
   273b4:	f1a5 0310 	sub.w	r3, r5, #16
   273b8:	bf08      	it	eq
   273ba:	460a      	moveq	r2, r1
   273bc:	f040 0001 	orr.w	r0, r0, #1
   273c0:	4915      	ldr	r1, [pc, #84]	; (27418 <z_arm_fault+0x1d8>)
   273c2:	f01a fa2d 	bl	41820 <log_string_sync>
   273c6:	e79f      	b.n	27308 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   273c8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   273cc:	f023 0301 	bic.w	r3, r3, #1
   273d0:	e7cd      	b.n	2736e <z_arm_fault+0x12e>
   273d2:	bf00      	nop
   273d4:	e000ed00 	.word	0xe000ed00
   273d8:	000463bc 	.word	0x000463bc
   273dc:	000464cc 	.word	0x000464cc
   273e0:	0004999d 	.word	0x0004999d
   273e4:	0004977c 	.word	0x0004977c
   273e8:	000499c0 	.word	0x000499c0
   273ec:	00048156 	.word	0x00048156
   273f0:	000499d3 	.word	0x000499d3
   273f4:	00049a11 	.word	0x00049a11
   273f8:	00049a28 	.word	0x00049a28
   273fc:	00049a49 	.word	0x00049a49
   27400:	e000ed28 	.word	0xe000ed28
   27404:	e000ed29 	.word	0xe000ed29
   27408:	e000ed2a 	.word	0xe000ed2a
   2740c:	00049a68 	.word	0x00049a68
   27410:	0004996f 	.word	0x0004996f
   27414:	00049984 	.word	0x00049984
   27418:	00049a9e 	.word	0x00049a9e

0002741c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2741c:	4b04      	ldr	r3, [pc, #16]	; (27430 <z_arm_fault_init+0x14>)
   2741e:	695a      	ldr	r2, [r3, #20]
   27420:	f042 0210 	orr.w	r2, r2, #16
   27424:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   27426:	695a      	ldr	r2, [r3, #20]
   27428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   2742c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2742e:	4770      	bx	lr
   27430:	e000ed00 	.word	0xe000ed00

00027434 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   27434:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27438:	4905      	ldr	r1, [pc, #20]	; (27450 <sys_arch_reboot+0x1c>)
   2743a:	4b06      	ldr	r3, [pc, #24]	; (27454 <sys_arch_reboot+0x20>)
   2743c:	68ca      	ldr	r2, [r1, #12]
   2743e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   27442:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   27444:	60cb      	str	r3, [r1, #12]
   27446:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2744a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2744c:	e7fd      	b.n	2744a <sys_arch_reboot+0x16>
   2744e:	bf00      	nop
   27450:	e000ed00 	.word	0xe000ed00
   27454:	05fa0004 	.word	0x05fa0004

00027458 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   27458:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2745a:	2120      	movs	r1, #32
   2745c:	4803      	ldr	r0, [pc, #12]	; (2746c <z_arm_interrupt_init+0x14>)
   2745e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   27460:	3301      	adds	r3, #1
   27462:	2b41      	cmp	r3, #65	; 0x41
   27464:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   27468:	d1f9      	bne.n	2745e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2746a:	4770      	bx	lr
   2746c:	e000e100 	.word	0xe000e100

00027470 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   27470:	b510      	push	{r4, lr}
   27472:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   27474:	f015 fef8 	bl	3d268 <z_thread_single_abort>

	if (_current == thread) {
   27478:	4b11      	ldr	r3, [pc, #68]	; (274c0 <z_impl_k_thread_abort+0x50>)
   2747a:	689b      	ldr	r3, [r3, #8]
   2747c:	42a3      	cmp	r3, r4
   2747e:	d107      	bne.n	27490 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   27480:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   27484:	b183      	cbz	r3, 274a8 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   27486:	4a0f      	ldr	r2, [pc, #60]	; (274c4 <z_impl_k_thread_abort+0x54>)
   27488:	6853      	ldr	r3, [r2, #4]
   2748a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2748e:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   27490:	f04f 0320 	mov.w	r3, #32
   27494:	f3ef 8011 	mrs	r0, BASEPRI
   27498:	f383 8811 	msr	BASEPRI, r3
   2749c:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   274a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   274a4:	f01d ba81 	b.w	449aa <z_reschedule_irqlock>
   274a8:	f04f 0320 	mov.w	r3, #32
   274ac:	f3ef 8011 	mrs	r0, BASEPRI
   274b0:	f383 8811 	msr	BASEPRI, r3
   274b4:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   274b8:	f7ff fb3a 	bl	26b30 <arch_swap>
	return ret;
   274bc:	e7e8      	b.n	27490 <z_impl_k_thread_abort+0x20>
   274be:	bf00      	nop
   274c0:	20025d48 	.word	0x20025d48
   274c4:	e000ed00 	.word	0xe000ed00

000274c8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   274c8:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   274ca:	4b0e      	ldr	r3, [pc, #56]	; (27504 <z_arm_configure_static_mpu_regions+0x3c>)
{
   274cc:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   274ce:	9302      	str	r3, [sp, #8]
   274d0:	4b0d      	ldr	r3, [pc, #52]	; (27508 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   274d2:	4c0e      	ldr	r4, [pc, #56]	; (2750c <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   274d4:	9303      	str	r3, [sp, #12]
   274d6:	4b0e      	ldr	r3, [pc, #56]	; (27510 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   274d8:	4a0e      	ldr	r2, [pc, #56]	; (27514 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   274da:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   274dc:	ab02      	add	r3, sp, #8
   274de:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   274e0:	a801      	add	r0, sp, #4
   274e2:	4623      	mov	r3, r4
   274e4:	2101      	movs	r1, #1
   274e6:	f000 f967 	bl	277b8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   274ea:	2300      	movs	r3, #0
   274ec:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   274ee:	4b0a      	ldr	r3, [pc, #40]	; (27518 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   274f0:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   274f2:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   274f4:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   274f6:	9305      	str	r3, [sp, #20]
   274f8:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   274fa:	f000 f983 	bl	27804 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   274fe:	b008      	add	sp, #32
   27500:	bd10      	pop	{r4, pc}
   27502:	bf00      	nop
   27504:	20020000 	.word	0x20020000
   27508:	00000000 	.word	0x00000000
   2750c:	20040000 	.word	0x20040000
   27510:	00010006 	.word	0x00010006
   27514:	20020000 	.word	0x20020000
   27518:	20020cc8 	.word	0x20020cc8

0002751c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   2751c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   2751e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   27520:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   27522:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   27526:	f004 031f 	and.w	r3, r4, #31
   2752a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   2752c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   2752e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   27530:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   27534:	4904      	ldr	r1, [pc, #16]	; (27548 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   27536:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   2753a:	f043 0301 	orr.w	r3, r3, #1
   2753e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   27540:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   27542:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   27544:	bd10      	pop	{r4, pc}
   27546:	bf00      	nop
   27548:	e000ed90 	.word	0xe000ed90

0002754c <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   2754c:	280f      	cmp	r0, #15
{
   2754e:	b510      	push	{r4, lr}
   27550:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   27552:	d90e      	bls.n	27572 <region_allocate_and_init+0x26>
   27554:	4808      	ldr	r0, [pc, #32]	; (27578 <region_allocate_and_init+0x2c>)
   27556:	4b09      	ldr	r3, [pc, #36]	; (2757c <region_allocate_and_init+0x30>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   27558:	4622      	mov	r2, r4
   2755a:	1a1b      	subs	r3, r3, r0
   2755c:	08db      	lsrs	r3, r3, #3
   2755e:	019b      	lsls	r3, r3, #6
   27560:	4907      	ldr	r1, [pc, #28]	; (27580 <region_allocate_and_init+0x34>)
   27562:	f043 0001 	orr.w	r0, r3, #1
   27566:	f01a f95b 	bl	41820 <log_string_sync>
		return -EINVAL;
   2756a:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   2756e:	4620      	mov	r0, r4
   27570:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   27572:	f7ff ffd3 	bl	2751c <region_init>
	return index;
   27576:	e7fa      	b.n	2756e <region_allocate_and_init+0x22>
   27578:	000463bc 	.word	0x000463bc
   2757c:	0004648c 	.word	0x0004648c
   27580:	00049ab5 	.word	0x00049ab5

00027584 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   27584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27588:	4680      	mov	r8, r0
   2758a:	4689      	mov	r9, r1
   2758c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2758e:	2700      	movs	r7, #0
	MPU->RNR = index;
   27590:	4d50      	ldr	r5, [pc, #320]	; (276d4 <mpu_configure_regions_and_partition.constprop.0+0x150>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   27592:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   27594:	454f      	cmp	r7, r9
   27596:	da33      	bge.n	27600 <mpu_configure_regions_and_partition.constprop.0+0x7c>
		if (regions[i]->size == 0U) {
   27598:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   2759c:	f8d3 a004 	ldr.w	sl, [r3, #4]
   275a0:	f1ba 0f00 	cmp.w	sl, #0
   275a4:	d04c      	beq.n	27640 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   275a6:	f1ba 0f1f 	cmp.w	sl, #31
   275aa:	d91c      	bls.n	275e6 <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   275ac:	f01a 0f1f 	tst.w	sl, #31
   275b0:	d119      	bne.n	275e6 <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   275b2:	f8d3 b000 	ldr.w	fp, [r3]
		&&
   275b6:	f01b 0f1f 	tst.w	fp, #31
   275ba:	d114      	bne.n	275e6 <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   275bc:	4658      	mov	r0, fp
   275be:	f01b f831 	bl	42624 <arm_cmse_mpu_region_get>
   275c2:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   275c4:	eb0a 000b 	add.w	r0, sl, fp
   275c8:	3801      	subs	r0, #1
   275ca:	f01b f82b 	bl	42624 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   275ce:	4286      	cmp	r6, r0
   275d0:	d01a      	beq.n	27608 <mpu_configure_regions_and_partition.constprop.0+0x84>
	return -EINVAL;
   275d2:	f06f 0615 	mvn.w	r6, #21
   275d6:	4840      	ldr	r0, [pc, #256]	; (276d8 <mpu_configure_regions_and_partition.constprop.0+0x154>)
   275d8:	4b40      	ldr	r3, [pc, #256]	; (276dc <mpu_configure_regions_and_partition.constprop.0+0x158>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   275da:	4632      	mov	r2, r6
   275dc:	1ac0      	subs	r0, r0, r3
   275de:	08c0      	lsrs	r0, r0, #3
   275e0:	493f      	ldr	r1, [pc, #252]	; (276e0 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
   275e2:	0180      	lsls	r0, r0, #6
   275e4:	e006      	b.n	275f4 <mpu_configure_regions_and_partition.constprop.0+0x70>
			LOG_ERR("Partition %u: sanity check failed.", i);
   275e6:	463a      	mov	r2, r7
   275e8:	483b      	ldr	r0, [pc, #236]	; (276d8 <mpu_configure_regions_and_partition.constprop.0+0x154>)
   275ea:	4b3c      	ldr	r3, [pc, #240]	; (276dc <mpu_configure_regions_and_partition.constprop.0+0x158>)
   275ec:	493d      	ldr	r1, [pc, #244]	; (276e4 <mpu_configure_regions_and_partition.constprop.0+0x160>)
   275ee:	1ac0      	subs	r0, r0, r3
   275f0:	08c0      	lsrs	r0, r0, #3
   275f2:	0180      	lsls	r0, r0, #6
			LOG_ERR("Invalid underlying region index %u",
   275f4:	f040 0001 	orr.w	r0, r0, #1
   275f8:	f01a f912 	bl	41820 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   275fc:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   27600:	4620      	mov	r0, r4
   27602:	b005      	add	sp, #20
   27604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   27608:	f116 0f16 	cmn.w	r6, #22
   2760c:	d0e3      	beq.n	275d6 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   2760e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   27610:	42b3      	cmp	r3, r6
   27612:	dbe0      	blt.n	275d6 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   27614:	60ae      	str	r6, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   27616:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   27618:	60ae      	str	r6, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   2761a:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   2761c:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   27620:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   27624:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   27628:	e9d1 3200 	ldrd	r3, r2, [r1]
   2762c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   2762e:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   27630:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   27634:	d116      	bne.n	27664 <mpu_configure_regions_and_partition.constprop.0+0xe0>
   27636:	45d3      	cmp	fp, sl
   27638:	d104      	bne.n	27644 <mpu_configure_regions_and_partition.constprop.0+0xc0>
			mpu_configure_region(u_reg_index, regions[i]);
   2763a:	b2f0      	uxtb	r0, r6
   2763c:	f01a ffd9 	bl	425f2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   27640:	3701      	adds	r7, #1
   27642:	e7a7      	b.n	27594 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   27644:	60ae      	str	r6, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   27646:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   27648:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2764c:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   27650:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   27652:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   27654:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   27656:	f01a ffcc 	bl	425f2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   2765a:	f110 0f16 	cmn.w	r0, #22
   2765e:	d0cd      	beq.n	275fc <mpu_configure_regions_and_partition.constprop.0+0x78>
			reg_index++;
   27660:	1c44      	adds	r4, r0, #1
   27662:	e7ed      	b.n	27640 <mpu_configure_regions_and_partition.constprop.0+0xbc>
	MPU->RNR = index;
   27664:	60ae      	str	r6, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   27666:	692a      	ldr	r2, [r5, #16]
   27668:	3b01      	subs	r3, #1
   2766a:	f023 031f 	bic.w	r3, r3, #31
   2766e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   27672:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   27674:	45d3      	cmp	fp, sl
   27676:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   27678:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   2767a:	d0ec      	beq.n	27656 <mpu_configure_regions_and_partition.constprop.0+0xd2>
				mpu_configure_region(reg_index, regions[i]);
   2767c:	f01a ffb9 	bl	425f2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   27680:	f110 0f16 	cmn.w	r0, #22
   27684:	d0ba      	beq.n	275fc <mpu_configure_regions_and_partition.constprop.0+0x78>
	MPU->RNR = index;
   27686:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   27688:	68ea      	ldr	r2, [r5, #12]
   2768a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   2768e:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   27692:	f362 0304 	bfi	r3, r2, #0, #5
   27696:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   2769a:	692b      	ldr	r3, [r5, #16]
   2769c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   276a0:	085b      	lsrs	r3, r3, #1
   276a2:	f363 1247 	bfi	r2, r3, #5, #3
   276a6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   276aa:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   276ae:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   276b0:	e9d2 3200 	ldrd	r3, r2, [r2]
   276b4:	4413      	add	r3, r2
   276b6:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   276b8:	f023 031f 	bic.w	r3, r3, #31
   276bc:	445b      	add	r3, fp
   276be:	eba3 030a 	sub.w	r3, r3, sl
   276c2:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   276c6:	4669      	mov	r1, sp
   276c8:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   276ca:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   276cc:	f7ff ff3e 	bl	2754c <region_allocate_and_init>
   276d0:	e7c3      	b.n	2765a <mpu_configure_regions_and_partition.constprop.0+0xd6>
   276d2:	bf00      	nop
   276d4:	e000ed90 	.word	0xe000ed90
   276d8:	0004648c 	.word	0x0004648c
   276dc:	000463bc 	.word	0x000463bc
   276e0:	00049afe 	.word	0x00049afe
   276e4:	00049adb 	.word	0x00049adb

000276e8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   276e8:	2205      	movs	r2, #5
   276ea:	4b03      	ldr	r3, [pc, #12]	; (276f8 <arm_core_mpu_enable+0x10>)
   276ec:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   276ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   276f2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   276f6:	4770      	bx	lr
   276f8:	e000ed90 	.word	0xe000ed90

000276fc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   276fc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   27700:	2200      	movs	r2, #0
   27702:	4b01      	ldr	r3, [pc, #4]	; (27708 <arm_core_mpu_disable+0xc>)
   27704:	605a      	str	r2, [r3, #4]
}
   27706:	4770      	bx	lr
   27708:	e000ed90 	.word	0xe000ed90

0002770c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   2770c:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2770e:	4e20      	ldr	r6, [pc, #128]	; (27790 <arm_mpu_init+0x84>)
   27710:	6835      	ldr	r5, [r6, #0]
   27712:	2d10      	cmp	r5, #16
   27714:	d913      	bls.n	2773e <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   27716:	f44f 739d 	mov.w	r3, #314	; 0x13a
   2771a:	4a1e      	ldr	r2, [pc, #120]	; (27794 <arm_mpu_init+0x88>)
   2771c:	491e      	ldr	r1, [pc, #120]	; (27798 <arm_mpu_init+0x8c>)
   2771e:	481f      	ldr	r0, [pc, #124]	; (2779c <arm_mpu_init+0x90>)
   27720:	f019 fe50 	bl	413c4 <printk>
   27724:	2210      	movs	r2, #16
   27726:	4629      	mov	r1, r5
   27728:	481d      	ldr	r0, [pc, #116]	; (277a0 <arm_mpu_init+0x94>)
   2772a:	f019 fe4b 	bl	413c4 <printk>
   2772e:	4819      	ldr	r0, [pc, #100]	; (27794 <arm_mpu_init+0x88>)
   27730:	f44f 719d 	mov.w	r1, #314	; 0x13a
   27734:	f01a f863 	bl	417fe <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   27738:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   2773c:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   2773e:	f7ff ffdd 	bl	276fc <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   27742:	2000      	movs	r0, #0
	MPU->MAIR0 =
   27744:	4c17      	ldr	r4, [pc, #92]	; (277a4 <arm_mpu_init+0x98>)
   27746:	4a18      	ldr	r2, [pc, #96]	; (277a8 <arm_mpu_init+0x9c>)
   27748:	6322      	str	r2, [r4, #48]	; 0x30
   2774a:	4285      	cmp	r5, r0
   2774c:	d119      	bne.n	27782 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   2774e:	4b17      	ldr	r3, [pc, #92]	; (277ac <arm_mpu_init+0xa0>)
   27750:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
   27752:	f7ff ffc9 	bl	276e8 <arm_core_mpu_enable>
	__ASSERT(
   27756:	6823      	ldr	r3, [r4, #0]
   27758:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2775c:	2b10      	cmp	r3, #16
   2775e:	d00e      	beq.n	2777e <arm_mpu_init+0x72>
   27760:	4913      	ldr	r1, [pc, #76]	; (277b0 <arm_mpu_init+0xa4>)
   27762:	f44f 73b0 	mov.w	r3, #352	; 0x160
   27766:	4a0b      	ldr	r2, [pc, #44]	; (27794 <arm_mpu_init+0x88>)
   27768:	480c      	ldr	r0, [pc, #48]	; (2779c <arm_mpu_init+0x90>)
   2776a:	f019 fe2b 	bl	413c4 <printk>
   2776e:	4811      	ldr	r0, [pc, #68]	; (277b4 <arm_mpu_init+0xa8>)
   27770:	f019 fe28 	bl	413c4 <printk>
   27774:	f44f 71b0 	mov.w	r1, #352	; 0x160
   27778:	4806      	ldr	r0, [pc, #24]	; (27794 <arm_mpu_init+0x88>)
   2777a:	f01a f840 	bl	417fe <assert_post_action>
	return 0;
   2777e:	2000      	movs	r0, #0
   27780:	e7dc      	b.n	2773c <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   27782:	6871      	ldr	r1, [r6, #4]
   27784:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   27788:	f7ff fec8 	bl	2751c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2778c:	3001      	adds	r0, #1
   2778e:	e7dc      	b.n	2774a <arm_mpu_init+0x3e>
   27790:	0004692c 	.word	0x0004692c
   27794:	00049b21 	.word	0x00049b21
   27798:	0004ef58 	.word	0x0004ef58
   2779c:	00048156 	.word	0x00048156
   277a0:	00049b61 	.word	0x00049b61
   277a4:	e000ed90 	.word	0xe000ed90
   277a8:	0044ffaa 	.word	0x0044ffaa
   277ac:	2002b0dd 	.word	0x2002b0dd
   277b0:	00049b95 	.word	0x00049b95
   277b4:	00049be6 	.word	0x00049be6

000277b8 <arm_core_mpu_configure_static_mpu_regions>:
{
   277b8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   277ba:	4d0d      	ldr	r5, [pc, #52]	; (277f0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   277bc:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   277be:	782a      	ldrb	r2, [r5, #0]
   277c0:	f7ff fee0 	bl	27584 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   277c4:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   277c6:	3016      	adds	r0, #22
   277c8:	d111      	bne.n	277ee <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   277ca:	f240 1303 	movw	r3, #259	; 0x103
   277ce:	4a09      	ldr	r2, [pc, #36]	; (277f4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   277d0:	4909      	ldr	r1, [pc, #36]	; (277f8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   277d2:	480a      	ldr	r0, [pc, #40]	; (277fc <arm_core_mpu_configure_static_mpu_regions+0x44>)
   277d4:	f019 fdf6 	bl	413c4 <printk>
   277d8:	4621      	mov	r1, r4
   277da:	4809      	ldr	r0, [pc, #36]	; (27800 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   277dc:	f019 fdf2 	bl	413c4 <printk>
}
   277e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   277e4:	f240 1103 	movw	r1, #259	; 0x103
   277e8:	4802      	ldr	r0, [pc, #8]	; (277f4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   277ea:	f01a b808 	b.w	417fe <assert_post_action>
}
   277ee:	bd38      	pop	{r3, r4, r5, pc}
   277f0:	2002b0dd 	.word	0x2002b0dd
   277f4:	00049b21 	.word	0x00049b21
   277f8:	0004ef58 	.word	0x0004ef58
   277fc:	00048156 	.word	0x00048156
   27800:	00049c07 	.word	0x00049c07

00027804 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   27804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27808:	4e2f      	ldr	r6, [pc, #188]	; (278c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   2780a:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   2780c:	4605      	mov	r5, r0
   2780e:	f04f 0800 	mov.w	r8, #0
   27812:	46b3      	mov	fp, r6
	MPU->RNR = index;
   27814:	4f2d      	ldr	r7, [pc, #180]	; (278cc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   27816:	45c8      	cmp	r8, r9
   27818:	db02      	blt.n	27820 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
   2781a:	b003      	add	sp, #12
   2781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   27820:	f8d5 a004 	ldr.w	sl, [r5, #4]
   27824:	f1ba 0f00 	cmp.w	sl, #0
   27828:	d049      	beq.n	278be <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   2782a:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2782c:	4608      	mov	r0, r1
   2782e:	9101      	str	r1, [sp, #4]
   27830:	f01a fef8 	bl	42624 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   27834:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   27836:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   27838:	eb0a 0001 	add.w	r0, sl, r1
   2783c:	3801      	subs	r0, #1
   2783e:	f01a fef1 	bl	42624 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   27842:	4284      	cmp	r4, r0
   27844:	f04f 0214 	mov.w	r2, #20
   27848:	4b21      	ldr	r3, [pc, #132]	; (278d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   2784a:	d018      	beq.n	2787e <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   2784c:	f06f 0315 	mvn.w	r3, #21
   27850:	fb02 f808 	mul.w	r8, r2, r8
   27854:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   27858:	f240 1313 	movw	r3, #275	; 0x113
   2785c:	4a1d      	ldr	r2, [pc, #116]	; (278d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   2785e:	491e      	ldr	r1, [pc, #120]	; (278d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   27860:	481e      	ldr	r0, [pc, #120]	; (278dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   27862:	f019 fdaf 	bl	413c4 <printk>
   27866:	4649      	mov	r1, r9
   27868:	481d      	ldr	r0, [pc, #116]	; (278e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   2786a:	f019 fdab 	bl	413c4 <printk>
   2786e:	f240 1113 	movw	r1, #275	; 0x113
   27872:	4818      	ldr	r0, [pc, #96]	; (278d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
   27874:	b003      	add	sp, #12
   27876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   2787a:	f019 bfc0 	b.w	417fe <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   2787e:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   27882:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   27884:	d0e8      	beq.n	27858 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   27886:	7819      	ldrb	r1, [r3, #0]
   27888:	42a1      	cmp	r1, r4
   2788a:	dde5      	ble.n	27858 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   2788c:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   27890:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   27892:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   27894:	68fc      	ldr	r4, [r7, #12]
   27896:	f100 0108 	add.w	r1, r0, #8
   2789a:	7b00      	ldrb	r0, [r0, #12]
   2789c:	f364 0004 	bfi	r0, r4, #0, #5
   278a0:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   278a2:	6938      	ldr	r0, [r7, #16]
   278a4:	790c      	ldrb	r4, [r1, #4]
   278a6:	0840      	lsrs	r0, r0, #1
   278a8:	f360 1447 	bfi	r4, r0, #5, #3
   278ac:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   278ae:	68f9      	ldr	r1, [r7, #12]
   278b0:	f021 011f 	bic.w	r1, r1, #31
   278b4:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   278b6:	6939      	ldr	r1, [r7, #16]
   278b8:	f021 011f 	bic.w	r1, r1, #31
   278bc:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   278be:	f108 0801 	add.w	r8, r8, #1
   278c2:	3614      	adds	r6, #20
   278c4:	350c      	adds	r5, #12
   278c6:	e7a6      	b.n	27816 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   278c8:	200247ec 	.word	0x200247ec
   278cc:	e000ed90 	.word	0xe000ed90
   278d0:	2002b0dd 	.word	0x2002b0dd
   278d4:	00049b21 	.word	0x00049b21
   278d8:	0004ef58 	.word	0x0004ef58
   278dc:	00048156 	.word	0x00048156
   278e0:	00049c33 	.word	0x00049c33

000278e4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   278e4:	4b01      	ldr	r3, [pc, #4]	; (278ec <__stdout_hook_install+0x8>)
   278e6:	6018      	str	r0, [r3, #0]
}
   278e8:	4770      	bx	lr
   278ea:	bf00      	nop
   278ec:	2002069c 	.word	0x2002069c

000278f0 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   278f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278f2:	4606      	mov	r6, r0
   278f4:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   278f6:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   278f8:	4f06      	ldr	r7, [pc, #24]	; (27914 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   278fa:	42ac      	cmp	r4, r5
   278fc:	da08      	bge.n	27910 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   278fe:	683b      	ldr	r3, [r7, #0]
   27900:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   27902:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   27904:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   27906:	f104 0401 	add.w	r4, r4, #1
   2790a:	d001      	beq.n	27910 <z_impl_zephyr_read_stdin+0x20>
   2790c:	280d      	cmp	r0, #13
   2790e:	d1f4      	bne.n	278fa <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   27910:	4620      	mov	r0, r4
   27912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27914:	20020698 	.word	0x20020698

00027918 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   27918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2791a:	460d      	mov	r5, r1
   2791c:	4f09      	ldr	r7, [pc, #36]	; (27944 <z_impl_zephyr_write_stdout+0x2c>)
   2791e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   27920:	f1c0 0401 	rsb	r4, r0, #1
   27924:	19a3      	adds	r3, r4, r6
   27926:	429d      	cmp	r5, r3
   27928:	dc01      	bgt.n	2792e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   2792a:	4628      	mov	r0, r5
   2792c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   2792e:	7873      	ldrb	r3, [r6, #1]
   27930:	2b0a      	cmp	r3, #10
   27932:	d102      	bne.n	2793a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   27934:	200d      	movs	r0, #13
   27936:	683b      	ldr	r3, [r7, #0]
   27938:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   2793a:	683b      	ldr	r3, [r7, #0]
   2793c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   27940:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   27942:	e7ef      	b.n	27924 <z_impl_zephyr_write_stdout+0xc>
   27944:	2002069c 	.word	0x2002069c

00027948 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   27948:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   2794a:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2794c:	4801      	ldr	r0, [pc, #4]	; (27954 <_exit+0xc>)
   2794e:	f7ff ffe3 	bl	27918 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   27952:	e7fe      	b.n	27952 <_exit+0xa>
   27954:	00049c62 	.word	0x00049c62

00027958 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   27958:	b510      	push	{r4, lr}
   2795a:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   2795c:	f04f 32ff 	mov.w	r2, #4294967295
   27960:	f04f 33ff 	mov.w	r3, #4294967295
   27964:	480a      	ldr	r0, [pc, #40]	; (27990 <_sbrk+0x38>)
   27966:	f019 fda0 	bl	414aa <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   2796a:	490a      	ldr	r1, [pc, #40]	; (27994 <_sbrk+0x3c>)
   2796c:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   2796e:	18e0      	adds	r0, r4, r3
   27970:	4c09      	ldr	r4, [pc, #36]	; (27998 <_sbrk+0x40>)
   27972:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   27976:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   2797a:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   2797c:	bf2e      	itee	cs
   2797e:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   27982:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   27984:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   27986:	4802      	ldr	r0, [pc, #8]	; (27990 <_sbrk+0x38>)
   27988:	f019 fd8a 	bl	414a0 <sys_sem_give>

	return ret;
}
   2798c:	4620      	mov	r0, r4
   2798e:	bd10      	pop	{r4, pc}
   27990:	20020c48 	.word	0x20020c48
   27994:	20024800 	.word	0x20024800
   27998:	200332c0 	.word	0x200332c0

0002799c <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2799c:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   2799e:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   279a0:	4804      	ldr	r0, [pc, #16]	; (279b4 <__chk_fail+0x18>)
   279a2:	f7ff ffb9 	bl	27918 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   279a6:	4040      	eors	r0, r0
   279a8:	f380 8811 	msr	BASEPRI, r0
   279ac:	f04f 0003 	mov.w	r0, #3
   279b0:	df02      	svc	2
	CODE_UNREACHABLE;
   279b2:	bf00      	nop
   279b4:	00049c68 	.word	0x00049c68

000279b8 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   279b8:	b538      	push	{r3, r4, r5, lr}
   279ba:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   279bc:	4604      	mov	r4, r0
   279be:	b970      	cbnz	r0, 279de <net_if_flag_is_set+0x26>
   279c0:	490b      	ldr	r1, [pc, #44]	; (279f0 <net_if_flag_is_set+0x38>)
   279c2:	f240 2312 	movw	r3, #530	; 0x212
   279c6:	4a0b      	ldr	r2, [pc, #44]	; (279f4 <net_if_flag_is_set+0x3c>)
   279c8:	480b      	ldr	r0, [pc, #44]	; (279f8 <net_if_flag_is_set+0x40>)
   279ca:	f019 fcfb 	bl	413c4 <printk>
   279ce:	480b      	ldr	r0, [pc, #44]	; (279fc <net_if_flag_is_set+0x44>)
   279d0:	f019 fcf8 	bl	413c4 <printk>
   279d4:	f240 2112 	movw	r1, #530	; 0x212
   279d8:	4806      	ldr	r0, [pc, #24]	; (279f4 <net_if_flag_is_set+0x3c>)
   279da:	f019 ff10 	bl	417fe <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   279de:	6823      	ldr	r3, [r4, #0]
   279e0:	330c      	adds	r3, #12
   279e2:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   279e6:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   279e8:	f000 0001 	and.w	r0, r0, #1
   279ec:	bd38      	pop	{r3, r4, r5, pc}
   279ee:	bf00      	nop
   279f0:	00049cc5 	.word	0x00049cc5
   279f4:	00049c9d 	.word	0x00049c9d
   279f8:	00048156 	.word	0x00048156
   279fc:	00049046 	.word	0x00049046

00027a00 <net_if_flag_set.constprop.0>:
static inline void net_if_flag_set(struct net_if *iface,
   27a00:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   27a02:	4604      	mov	r4, r0
   27a04:	b970      	cbnz	r0, 27a24 <net_if_flag_set.constprop.0+0x24>
   27a06:	490d      	ldr	r1, [pc, #52]	; (27a3c <net_if_flag_set.constprop.0+0x3c>)
   27a08:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
   27a0c:	4a0c      	ldr	r2, [pc, #48]	; (27a40 <net_if_flag_set.constprop.0+0x40>)
   27a0e:	480d      	ldr	r0, [pc, #52]	; (27a44 <net_if_flag_set.constprop.0+0x44>)
   27a10:	f019 fcd8 	bl	413c4 <printk>
   27a14:	480c      	ldr	r0, [pc, #48]	; (27a48 <net_if_flag_set.constprop.0+0x48>)
   27a16:	f019 fcd5 	bl	413c4 <printk>
   27a1a:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   27a1e:	4808      	ldr	r0, [pc, #32]	; (27a40 <net_if_flag_set.constprop.0+0x40>)
   27a20:	f019 feed 	bl	417fe <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27a24:	6823      	ldr	r3, [r4, #0]
   27a26:	330c      	adds	r3, #12
   27a28:	e8d3 2fef 	ldaex	r2, [r3]
   27a2c:	f042 0201 	orr.w	r2, r2, #1
   27a30:	e8c3 2fe1 	stlex	r1, r2, [r3]
   27a34:	2900      	cmp	r1, #0
   27a36:	d1f7      	bne.n	27a28 <net_if_flag_set.constprop.0+0x28>
}
   27a38:	bd10      	pop	{r4, pc}
   27a3a:	bf00      	nop
   27a3c:	00049cc5 	.word	0x00049cc5
   27a40:	00049c9d 	.word	0x00049c9d
   27a44:	00048156 	.word	0x00048156
   27a48:	00049046 	.word	0x00049046

00027a4c <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   27a4c:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   27a4e:	2100      	movs	r1, #0
{
   27a50:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   27a52:	f7ff ffb1 	bl	279b8 <net_if_flag_is_set>
   27a56:	b928      	cbnz	r0, 27a64 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   27a58:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   27a5a:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   27a5c:	7e9b      	ldrb	r3, [r3, #26]
   27a5e:	b11b      	cbz	r3, 27a68 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   27a60:	f7ff ffce 	bl	27a00 <net_if_flag_set.constprop.0>
		return 0;
   27a64:	2000      	movs	r0, #0
   27a66:	e023      	b.n	27ab0 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   27a68:	f01a fe0c 	bl	42684 <net_if_l2>
   27a6c:	b9c0      	cbnz	r0, 27aa0 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   27a6e:	682b      	ldr	r3, [r5, #0]
   27a70:	691b      	ldr	r3, [r3, #16]
   27a72:	b973      	cbnz	r3, 27a92 <net_if_up+0x46>
   27a74:	490f      	ldr	r1, [pc, #60]	; (27ab4 <net_if_up+0x68>)
   27a76:	f640 53fd 	movw	r3, #3581	; 0xdfd
   27a7a:	4a0f      	ldr	r2, [pc, #60]	; (27ab8 <net_if_up+0x6c>)
   27a7c:	480f      	ldr	r0, [pc, #60]	; (27abc <net_if_up+0x70>)
   27a7e:	f019 fca1 	bl	413c4 <printk>
   27a82:	480f      	ldr	r0, [pc, #60]	; (27ac0 <net_if_up+0x74>)
   27a84:	f019 fc9e 	bl	413c4 <printk>
   27a88:	f640 51fd 	movw	r1, #3581	; 0xdfd
   27a8c:	480a      	ldr	r0, [pc, #40]	; (27ab8 <net_if_up+0x6c>)
   27a8e:	f019 feb6 	bl	417fe <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   27a92:	4628      	mov	r0, r5
   27a94:	f7ff ffb4 	bl	27a00 <net_if_flag_set.constprop.0>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   27a98:	4628      	mov	r0, r5
   27a9a:	f01a fdf8 	bl	4268e <l2_flags_get>
   27a9e:	e7e1      	b.n	27a64 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   27aa0:	6883      	ldr	r3, [r0, #8]
   27aa2:	2b00      	cmp	r3, #0
   27aa4:	d0e3      	beq.n	27a6e <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   27aa6:	2101      	movs	r1, #1
   27aa8:	4628      	mov	r0, r5
   27aaa:	4798      	blx	r3
	if (status < 0) {
   27aac:	2800      	cmp	r0, #0
   27aae:	dade      	bge.n	27a6e <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   27ab0:	bd38      	pop	{r3, r4, r5, pc}
   27ab2:	bf00      	nop
   27ab4:	00049d0f 	.word	0x00049d0f
   27ab8:	00049ccb 	.word	0x00049ccb
   27abc:	00048156 	.word	0x00048156
   27ac0:	00049046 	.word	0x00049046

00027ac4 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   27ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   27ac8:	4e12      	ldr	r6, [pc, #72]	; (27b14 <net_if_init+0x50>)
   27aca:	4c13      	ldr	r4, [pc, #76]	; (27b18 <net_if_init+0x54>)
   27acc:	46b0      	mov	r8, r6
   27ace:	4f13      	ldr	r7, [pc, #76]	; (27b1c <net_if_init+0x58>)
   27ad0:	42b4      	cmp	r4, r6
   27ad2:	4625      	mov	r5, r4
   27ad4:	d90e      	bls.n	27af4 <net_if_init+0x30>
   27ad6:	4912      	ldr	r1, [pc, #72]	; (27b20 <net_if_init+0x5c>)
   27ad8:	f640 63dc 	movw	r3, #3804	; 0xedc
   27adc:	463a      	mov	r2, r7
   27ade:	4811      	ldr	r0, [pc, #68]	; (27b24 <net_if_init+0x60>)
   27ae0:	f019 fc70 	bl	413c4 <printk>
   27ae4:	4810      	ldr	r0, [pc, #64]	; (27b28 <net_if_init+0x64>)
   27ae6:	f019 fc6d 	bl	413c4 <printk>
   27aea:	f640 61dc 	movw	r1, #3804	; 0xedc
   27aee:	4638      	mov	r0, r7
   27af0:	f019 fe85 	bl	417fe <assert_post_action>
   27af4:	4544      	cmp	r4, r8
   27af6:	d301      	bcc.n	27afc <net_if_init+0x38>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   27af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return iface->if_dev->dev;
   27afc:	682b      	ldr	r3, [r5, #0]
   27afe:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   27b00:	681b      	ldr	r3, [r3, #0]
   27b02:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   27b04:	2b00      	cmp	r3, #0
   27b06:	d0e3      	beq.n	27ad0 <net_if_init+0xc>
   27b08:	681b      	ldr	r3, [r3, #0]
   27b0a:	2b00      	cmp	r3, #0
   27b0c:	d0e0      	beq.n	27ad0 <net_if_init+0xc>
	api->init(iface);
   27b0e:	4628      	mov	r0, r5
   27b10:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   27b12:	e7dd      	b.n	27ad0 <net_if_init+0xc>
   27b14:	20020cac 	.word	0x20020cac
   27b18:	20020ca8 	.word	0x20020ca8
   27b1c:	00049ccb 	.word	0x00049ccb
   27b20:	00049cf5 	.word	0x00049cf5
   27b24:	00048156 	.word	0x00048156
   27b28:	000490c4 	.word	0x000490c4

00027b2c <net_if_post_init>:

void net_if_post_init(void)
{
   27b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   27b2e:	4d11      	ldr	r5, [pc, #68]	; (27b74 <net_if_post_init+0x48>)
   27b30:	4c11      	ldr	r4, [pc, #68]	; (27b78 <net_if_post_init+0x4c>)
   27b32:	462f      	mov	r7, r5
   27b34:	4e11      	ldr	r6, [pc, #68]	; (27b7c <net_if_post_init+0x50>)
   27b36:	42ac      	cmp	r4, r5
   27b38:	d90e      	bls.n	27b58 <net_if_post_init+0x2c>
   27b3a:	4911      	ldr	r1, [pc, #68]	; (27b80 <net_if_post_init+0x54>)
   27b3c:	f640 730b 	movw	r3, #3851	; 0xf0b
   27b40:	4632      	mov	r2, r6
   27b42:	4810      	ldr	r0, [pc, #64]	; (27b84 <net_if_post_init+0x58>)
   27b44:	f019 fc3e 	bl	413c4 <printk>
   27b48:	480f      	ldr	r0, [pc, #60]	; (27b88 <net_if_post_init+0x5c>)
   27b4a:	f019 fc3b 	bl	413c4 <printk>
   27b4e:	f640 710b 	movw	r1, #3851	; 0xf0b
   27b52:	4630      	mov	r0, r6
   27b54:	f019 fe53 	bl	417fe <assert_post_action>
   27b58:	42bc      	cmp	r4, r7
   27b5a:	d300      	bcc.n	27b5e <net_if_post_init+0x32>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   27b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   27b5e:	2103      	movs	r1, #3
   27b60:	4620      	mov	r0, r4
   27b62:	f7ff ff29 	bl	279b8 <net_if_flag_is_set>
   27b66:	b910      	cbnz	r0, 27b6e <net_if_post_init+0x42>
			net_if_up(iface);
   27b68:	4620      	mov	r0, r4
   27b6a:	f7ff ff6f 	bl	27a4c <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   27b6e:	3404      	adds	r4, #4
   27b70:	e7e1      	b.n	27b36 <net_if_post_init+0xa>
   27b72:	bf00      	nop
   27b74:	20020cac 	.word	0x20020cac
   27b78:	20020ca8 	.word	0x20020ca8
   27b7c:	00049ccb 	.word	0x00049ccb
   27b80:	00049cf5 	.word	0x00049cf5
   27b84:	00048156 	.word	0x00048156
   27b88:	000490c4 	.word	0x000490c4

00027b8c <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   27b8c:	2300      	movs	r3, #0
{
   27b8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   27b92:	2802      	cmp	r0, #2
{
   27b94:	b089      	sub	sp, #36	; 0x24
   27b96:	4607      	mov	r7, r0
   27b98:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   27b9a:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   27b9e:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   27ba0:	d13e      	bne.n	27c20 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   27ba2:	a806      	add	r0, sp, #24
   27ba4:	9105      	str	r1, [sp, #20]
   27ba6:	4601      	mov	r1, r0
{
   27ba8:	461a      	mov	r2, r3
   27baa:	e006      	b.n	27bba <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   27bac:	780c      	ldrb	r4, [r1, #0]
   27bae:	3201      	adds	r2, #1
   27bb0:	3401      	adds	r4, #1
   27bb2:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   27bb4:	b2d4      	uxtb	r4, r2
   27bb6:	2c07      	cmp	r4, #7
   27bb8:	d804      	bhi.n	27bc4 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   27bba:	9c04      	ldr	r4, [sp, #16]
   27bbc:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   27bc0:	2c00      	cmp	r4, #0
   27bc2:	d0f3      	beq.n	27bac <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   27bc4:	3301      	adds	r3, #1
   27bc6:	2b08      	cmp	r3, #8
   27bc8:	f101 0101 	add.w	r1, r1, #1
   27bcc:	d1ec      	bne.n	27ba8 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   27bce:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   27bd2:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   27bd6:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   27bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
   27bdc:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   27bde:	bf88      	it	hi
   27be0:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   27be4:	f103 0301 	add.w	r3, r3, #1
   27be8:	b2db      	uxtb	r3, r3
				pos = i;
   27bea:	bf88      	it	hi
   27bec:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   27bee:	2b08      	cmp	r3, #8
   27bf0:	d1f2      	bne.n	27bd8 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   27bf2:	469b      	mov	fp, r3
   27bf4:	f1b9 0f01 	cmp.w	r9, #1
   27bf8:	f04f 033a 	mov.w	r3, #58	; 0x3a
   27bfc:	bf08      	it	eq
   27bfe:	f04f 38ff 	moveq.w	r8, #4294967295
   27c02:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   27c04:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   27c06:	4634      	mov	r4, r6
   27c08:	460d      	mov	r5, r1
   27c0a:	455d      	cmp	r5, fp
   27c0c:	db17      	blt.n	27c3e <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   27c0e:	42b4      	cmp	r4, r6
   27c10:	d008      	beq.n	27c24 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   27c12:	2300      	movs	r3, #0
   27c14:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   27c16:	bf0c      	ite	eq
   27c18:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   27c1c:	7023      	strbne	r3, [r4, #0]
   27c1e:	e002      	b.n	27c26 <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   27c20:	2801      	cmp	r0, #1
   27c22:	d004      	beq.n	27c2e <z_impl_net_addr_ntop+0xa2>
		return NULL;
   27c24:	2600      	movs	r6, #0
	}

	return dst;
}
   27c26:	4630      	mov	r0, r6
   27c28:	b009      	add	sp, #36	; 0x24
   27c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   27c2e:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   27c30:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   27c34:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   27c38:	4681      	mov	r9, r0
		delim = '.';
   27c3a:	9303      	str	r3, [sp, #12]
   27c3c:	e7e2      	b.n	27c04 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   27c3e:	f1bb 0f04 	cmp.w	fp, #4
   27c42:	d13b      	bne.n	27cbc <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   27c44:	9b04      	ldr	r3, [sp, #16]
   27c46:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   27c48:	b94a      	cbnz	r2, 27c5e <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   27c4a:	2330      	movs	r3, #48	; 0x30
   27c4c:	4620      	mov	r0, r4
   27c4e:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   27c52:	9b03      	ldr	r3, [sp, #12]
   27c54:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   27c56:	3501      	adds	r5, #1
   27c58:	4604      	mov	r4, r0
   27c5a:	b2ed      	uxtb	r5, r5
   27c5c:	e7d5      	b.n	27c0a <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   27c5e:	f04f 0e09 	mov.w	lr, #9
   27c62:	f04f 0a00 	mov.w	sl, #0
   27c66:	e9cd 2401 	strd	r2, r4, [sp, #4]
   27c6a:	483a      	ldr	r0, [pc, #232]	; (27d54 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   27c6c:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   27c70:	45f2      	cmp	sl, lr
		value = value % divisor;
   27c72:	fbbc f2f0 	udiv	r2, ip, r0
   27c76:	fb00 c212 	mls	r2, r0, r2, ip
   27c7a:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   27c7c:	dc01      	bgt.n	27c82 <z_impl_net_addr_ntop+0xf6>
   27c7e:	4584      	cmp	ip, r0
   27c80:	d308      	bcc.n	27c94 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   27c82:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   27c86:	46f2      	mov	sl, lr
   27c88:	9b02      	ldr	r3, [sp, #8]
   27c8a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   27c8e:	f803 cb01 	strb.w	ip, [r3], #1
   27c92:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   27c94:	220a      	movs	r2, #10
   27c96:	f10e 3eff 	add.w	lr, lr, #4294967295
   27c9a:	f1be 3fff 	cmp.w	lr, #4294967295
   27c9e:	fbb0 f0f2 	udiv	r0, r0, r2
   27ca2:	d1e3      	bne.n	27c6c <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   27ca4:	f04f 0200 	mov.w	r2, #0
   27ca8:	9b02      	ldr	r3, [sp, #8]
   27caa:	701a      	strb	r2, [r3, #0]
	return buf - start;
   27cac:	1b1b      	subs	r3, r3, r4
			ptr += l;
   27cae:	b2da      	uxtb	r2, r3
   27cb0:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   27cb4:	1c58      	adds	r0, r3, #1
   27cb6:	9b03      	ldr	r3, [sp, #12]
   27cb8:	54a3      	strb	r3, [r4, r2]
			continue;
   27cba:	e7cc      	b.n	27c56 <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   27cbc:	45a8      	cmp	r8, r5
   27cbe:	d110      	bne.n	27ce2 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   27cc0:	b911      	cbnz	r1, 27cc8 <z_impl_net_addr_ntop+0x13c>
   27cc2:	f1b8 0f00 	cmp.w	r8, #0
   27cc6:	d102      	bne.n	27cce <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   27cc8:	233a      	movs	r3, #58	; 0x3a
   27cca:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   27cce:	233a      	movs	r3, #58	; 0x3a
   27cd0:	4620      	mov	r0, r4
   27cd2:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   27cd6:	f109 33ff 	add.w	r3, r9, #4294967295
   27cda:	441d      	add	r5, r3
			needcolon = false;
   27cdc:	2100      	movs	r1, #0
			i += longest - 1U;
   27cde:	b2ed      	uxtb	r5, r5
			continue;
   27ce0:	e7b9      	b.n	27c56 <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   27ce2:	b111      	cbz	r1, 27cea <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   27ce4:	233a      	movs	r3, #58	; 0x3a
   27ce6:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   27cea:	9b05      	ldr	r3, [sp, #20]
   27cec:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   27cf0:	0219      	lsls	r1, r3, #8
   27cf2:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   27cf6:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   27cfa:	b20a      	sxth	r2, r1
		bh = value >> 8;
   27cfc:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   27d00:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   27d04:	d016      	beq.n	27d34 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   27d06:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   27d08:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   27d0a:	d90b      	bls.n	27d24 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   27d0c:	2300      	movs	r3, #0
   27d0e:	2261      	movs	r2, #97	; 0x61
   27d10:	4620      	mov	r0, r4
   27d12:	f01a fcc9 	bl	426a8 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   27d16:	2301      	movs	r3, #1
   27d18:	2261      	movs	r2, #97	; 0x61
   27d1a:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   27d1c:	f01a fcc4 	bl	426a8 <net_byte_to_hex>
		needcolon = true;
   27d20:	2101      	movs	r1, #1
   27d22:	e798      	b.n	27c56 <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   27d24:	b25b      	sxtb	r3, r3
   27d26:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   27d28:	bf94      	ite	ls
   27d2a:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   27d2c:	3357      	addhi	r3, #87	; 0x57
   27d2e:	1c60      	adds	r0, r4, #1
   27d30:	7023      	strb	r3, [r4, #0]
   27d32:	e7f0      	b.n	27d16 <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   27d34:	f1ba 0f0f 	cmp.w	sl, #15
   27d38:	d903      	bls.n	27d42 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   27d3a:	2261      	movs	r2, #97	; 0x61
   27d3c:	4651      	mov	r1, sl
   27d3e:	4620      	mov	r0, r4
   27d40:	e7ec      	b.n	27d1c <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   27d42:	b253      	sxtb	r3, r2
   27d44:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   27d48:	bf94      	ite	ls
   27d4a:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   27d4c:	3357      	addhi	r3, #87	; 0x57
   27d4e:	1c60      	adds	r0, r4, #1
   27d50:	7023      	strb	r3, [r4, #0]
   27d52:	e7e5      	b.n	27d20 <z_impl_net_addr_ntop+0x194>
   27d54:	3b9aca00 	.word	0x3b9aca00

00027d58 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   27d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   27d5c:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   27d5e:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   27d62:	4b3b      	ldr	r3, [pc, #236]	; (27e50 <connect_request_encode+0xf8>)
   27d64:	4a3b      	ldr	r2, [pc, #236]	; (27e54 <connect_request_encode+0xfc>)
{
   27d66:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   27d68:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   27d6c:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   27d6e:	2804      	cmp	r0, #4
   27d70:	bf0c      	ite	eq
   27d72:	4610      	moveq	r0, r2
   27d74:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   27d76:	600d      	str	r5, [r1, #0]
{
   27d78:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   27d7a:	f01a fd7c 	bl	42876 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   27d7e:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   27d82:	4603      	mov	r3, r0
   27d84:	b938      	cbnz	r0, 27d96 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   27d86:	e9d8 2000 	ldrd	r2, r0, [r8]
   27d8a:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   27d8c:	f897 107a 	ldrb.w	r1, [r7, #122]	; 0x7a
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   27d90:	d104      	bne.n	27d9c <connect_request_encode+0x44>
		return -ENOMEM;
   27d92:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   27d96:	4618      	mov	r0, r3
   27d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   27d9c:	1c50      	adds	r0, r2, #1
   27d9e:	f8c8 0000 	str.w	r0, [r8]
   27da2:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   27da4:	e9d8 6200 	ldrd	r6, r2, [r8]
   27da8:	4296      	cmp	r6, r2
   27daa:	d0f2      	beq.n	27d92 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   27dac:	1c72      	adds	r2, r6, #1
   27dae:	f8c8 2000 	str.w	r2, [r8]
   27db2:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   27db4:	4641      	mov	r1, r8
   27db6:	f8b7 0078 	ldrh.w	r0, [r7, #120]	; 0x78
   27dba:	f01a fd4a 	bl	42852 <pack_uint16>
	if (err_code != 0) {
   27dbe:	4603      	mov	r3, r0
   27dc0:	2800      	cmp	r0, #0
   27dc2:	d1e8      	bne.n	27d96 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   27dc4:	f107 0048 	add.w	r0, r7, #72	; 0x48
   27dc8:	f01a fd55 	bl	42876 <pack_utf8_str>
	if (err_code != 0) {
   27dcc:	4603      	mov	r3, r0
   27dce:	2800      	cmp	r0, #0
   27dd0:	d1e1      	bne.n	27d96 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   27dd2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
	uint8_t connect_flags = client->clean_session << 1;
   27dd4:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   27dd6:	b1d8      	cbz	r0, 27e10 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   27dd8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   27ddc:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   27de0:	f003 0301 	and.w	r3, r3, #1
   27de4:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   27de8:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   27dea:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   27dec:	00db      	lsls	r3, r3, #3
   27dee:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   27df2:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   27df4:	f01a fd3f 	bl	42876 <pack_utf8_str>
		if (err_code != 0) {
   27df8:	4603      	mov	r3, r0
   27dfa:	2800      	cmp	r0, #0
   27dfc:	d1cb      	bne.n	27d96 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   27dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
			err_code = pack_utf8_str(client->will_message, buf);
   27e00:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   27e02:	b30b      	cbz	r3, 27e48 <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   27e04:	4618      	mov	r0, r3
   27e06:	f01a fd36 	bl	42876 <pack_utf8_str>
			if (err_code != 0) {
   27e0a:	4603      	mov	r3, r0
   27e0c:	2800      	cmp	r0, #0
   27e0e:	d1c2      	bne.n	27d96 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   27e10:	6d78      	ldr	r0, [r7, #84]	; 0x54
   27e12:	b138      	cbz	r0, 27e24 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   27e14:	4641      	mov	r1, r8
   27e16:	f01a fd2e 	bl	42876 <pack_utf8_str>
		if (err_code != 0) {
   27e1a:	4603      	mov	r3, r0
   27e1c:	2800      	cmp	r0, #0
   27e1e:	d1ba      	bne.n	27d96 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   27e20:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   27e24:	6db8      	ldr	r0, [r7, #88]	; 0x58
   27e26:	b138      	cbz	r0, 27e38 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   27e28:	4641      	mov	r1, r8
   27e2a:	f01a fd24 	bl	42876 <pack_utf8_str>
		if (err_code != 0) {
   27e2e:	4603      	mov	r3, r0
   27e30:	2800      	cmp	r0, #0
   27e32:	d1b0      	bne.n	27d96 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   27e34:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   27e38:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   27e3a:	4642      	mov	r2, r8
   27e3c:	4629      	mov	r1, r5
}
   27e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   27e42:	2010      	movs	r0, #16
   27e44:	f01a bd32 	b.w	428ac <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   27e48:	f01a fd03 	bl	42852 <pack_uint16>
   27e4c:	e7dd      	b.n	27e0a <connect_request_encode+0xb2>
   27e4e:	bf00      	nop
   27e50:	00046954 	.word	0x00046954
   27e54:	0004695c 	.word	0x0004695c

00027e58 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   27e58:	e9d0 2300 	ldrd	r2, r3, [r0]
   27e5c:	1a9b      	subs	r3, r3, r2
   27e5e:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27e60:	bf81      	itttt	hi
   27e62:	4b05      	ldrhi	r3, [pc, #20]	; (27e78 <disconnect_encode+0x20>)
   27e64:	881b      	ldrhhi	r3, [r3, #0]
   27e66:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   27e68:	6803      	ldrhi	r3, [r0, #0]
   27e6a:	bf83      	ittte	hi
   27e6c:	3302      	addhi	r3, #2
   27e6e:	6043      	strhi	r3, [r0, #4]

	return 0;
   27e70:	2000      	movhi	r0, #0
		return -ENOMEM;
   27e72:	f06f 000b 	mvnls.w	r0, #11
}
   27e76:	4770      	bx	lr
   27e78:	00049d40 	.word	0x00049d40

00027e7c <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   27e7c:	e9d0 2300 	ldrd	r2, r3, [r0]
   27e80:	1a9b      	subs	r3, r3, r2
   27e82:	2b01      	cmp	r3, #1
   27e84:	bf81      	itttt	hi
   27e86:	4b05      	ldrhi	r3, [pc, #20]	; (27e9c <ping_request_encode+0x20>)
   27e88:	881b      	ldrhhi	r3, [r3, #0]
   27e8a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   27e8c:	6803      	ldrhi	r3, [r0, #0]
   27e8e:	bf83      	ittte	hi
   27e90:	3302      	addhi	r3, #2
   27e92:	6043      	strhi	r3, [r0, #4]

	return 0;
   27e94:	2000      	movhi	r0, #0
		return -ENOMEM;
   27e96:	f06f 000b 	mvnls.w	r0, #11
}
   27e9a:	4770      	bx	lr
   27e9c:	00049d42 	.word	0x00049d42

00027ea0 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   27ea0:	2314      	movs	r3, #20
   27ea2:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   27ea6:	4353      	muls	r3, r2
   27ea8:	4a01      	ldr	r2, [pc, #4]	; (27eb0 <mqtt_transport_connect+0x10>)
   27eaa:	58d3      	ldr	r3, [r2, r3]
   27eac:	4718      	bx	r3
   27eae:	bf00      	nop
   27eb0:	00046964 	.word	0x00046964

00027eb4 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   27eb4:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   27eb6:	2514      	movs	r5, #20
   27eb8:	4c03      	ldr	r4, [pc, #12]	; (27ec8 <mqtt_transport_write+0x14>)
   27eba:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   27ebe:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   27ec2:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   27ec4:	685b      	ldr	r3, [r3, #4]
   27ec6:	4718      	bx	r3
   27ec8:	00046964 	.word	0x00046964

00027ecc <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   27ecc:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   27ece:	2414      	movs	r4, #20
   27ed0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   27ed4:	4a03      	ldr	r2, [pc, #12]	; (27ee4 <mqtt_transport_write_msg+0x18>)
   27ed6:	fb04 2303 	mla	r3, r4, r3, r2
}
   27eda:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   27ede:	689b      	ldr	r3, [r3, #8]
   27ee0:	4718      	bx	r3
   27ee2:	bf00      	nop
   27ee4:	00046964 	.word	0x00046964

00027ee8 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   27ee8:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   27eea:	2614      	movs	r6, #20
   27eec:	4d04      	ldr	r5, [pc, #16]	; (27f00 <mqtt_transport_read+0x18>)
   27eee:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   27ef2:	fb06 5404 	mla	r4, r6, r4, r5
   27ef6:	68e4      	ldr	r4, [r4, #12]
   27ef8:	46a4      	mov	ip, r4
							 shall_block);
}
   27efa:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   27efc:	4760      	bx	ip
   27efe:	bf00      	nop
   27f00:	00046964 	.word	0x00046964

00027f04 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   27f04:	2114      	movs	r1, #20
   27f06:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   27f0a:	4a02      	ldr	r2, [pc, #8]	; (27f14 <mqtt_transport_disconnect+0x10>)
   27f0c:	fb01 2303 	mla	r3, r1, r3, r2
   27f10:	691b      	ldr	r3, [r3, #16]
   27f12:	4718      	bx	r3
   27f14:	00046964 	.word	0x00046964

00027f18 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   27f18:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   27f1a:	b510      	push	{r4, lr}
   27f1c:	b142      	cbz	r2, 27f30 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   27f1e:	4b0f      	ldr	r3, [pc, #60]	; (27f5c <mqtt_mutex_unlock+0x44>)
   27f20:	6882      	ldr	r2, [r0, #8]
   27f22:	689b      	ldr	r3, [r3, #8]
   27f24:	429a      	cmp	r2, r3
   27f26:	d115      	bne.n	27f54 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   27f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   27f2c:	f014 bac0 	b.w	3c4b0 <z_impl_k_mutex_unlock>
		return -EINVAL;
   27f30:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   27f34:	2343      	movs	r3, #67	; 0x43
   27f36:	4a0a      	ldr	r2, [pc, #40]	; (27f60 <mqtt_mutex_unlock+0x48>)
   27f38:	490a      	ldr	r1, [pc, #40]	; (27f64 <mqtt_mutex_unlock+0x4c>)
   27f3a:	480b      	ldr	r0, [pc, #44]	; (27f68 <mqtt_mutex_unlock+0x50>)
   27f3c:	f019 fa42 	bl	413c4 <printk>
   27f40:	4621      	mov	r1, r4
   27f42:	480a      	ldr	r0, [pc, #40]	; (27f6c <mqtt_mutex_unlock+0x54>)
   27f44:	f019 fa3e 	bl	413c4 <printk>
}
   27f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   27f4c:	2143      	movs	r1, #67	; 0x43
   27f4e:	4804      	ldr	r0, [pc, #16]	; (27f60 <mqtt_mutex_unlock+0x48>)
   27f50:	f019 bc55 	b.w	417fe <assert_post_action>
		return -EPERM;
   27f54:	f04f 34ff 	mov.w	r4, #4294967295
   27f58:	e7ec      	b.n	27f34 <mqtt_mutex_unlock+0x1c>
   27f5a:	bf00      	nop
   27f5c:	20025d48 	.word	0x20025d48
   27f60:	00049d50 	.word	0x00049d50
   27f64:	00049d81 	.word	0x00049d81
   27f68:	00048156 	.word	0x00048156
   27f6c:	00049d8a 	.word	0x00049d8a

00027f70 <mqtt_mutex_lock>:
{
   27f70:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   27f72:	f04f 32ff 	mov.w	r2, #4294967295
   27f76:	f04f 33ff 	mov.w	r3, #4294967295
   27f7a:	f014 f99f 	bl	3c2bc <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   27f7e:	4604      	mov	r4, r0
   27f80:	b178      	cbz	r0, 27fa2 <mqtt_mutex_lock+0x32>
   27f82:	2339      	movs	r3, #57	; 0x39
   27f84:	4a07      	ldr	r2, [pc, #28]	; (27fa4 <mqtt_mutex_lock+0x34>)
   27f86:	4908      	ldr	r1, [pc, #32]	; (27fa8 <mqtt_mutex_lock+0x38>)
   27f88:	4808      	ldr	r0, [pc, #32]	; (27fac <mqtt_mutex_lock+0x3c>)
   27f8a:	f019 fa1b 	bl	413c4 <printk>
   27f8e:	4621      	mov	r1, r4
   27f90:	4807      	ldr	r0, [pc, #28]	; (27fb0 <mqtt_mutex_lock+0x40>)
   27f92:	f019 fa17 	bl	413c4 <printk>
}
   27f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   27f9a:	2139      	movs	r1, #57	; 0x39
   27f9c:	4801      	ldr	r0, [pc, #4]	; (27fa4 <mqtt_mutex_lock+0x34>)
   27f9e:	f019 bc2e 	b.w	417fe <assert_post_action>
}
   27fa2:	bd10      	pop	{r4, pc}
   27fa4:	00049d50 	.word	0x00049d50
   27fa8:	00049d81 	.word	0x00049d81
   27fac:	00048156 	.word	0x00048156
   27fb0:	00049dac 	.word	0x00049dac

00027fb4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   27fb4:	b570      	push	{r4, r5, r6, lr}
   27fb6:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   27fb8:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   27fba:	68c5      	ldr	r5, [r0, #12]
   27fbc:	b961      	cbnz	r1, 27fd8 <gpio_nrfx_manage_callback+0x24>
   27fbe:	4922      	ldr	r1, [pc, #136]	; (28048 <gpio_nrfx_manage_callback+0x94>)
   27fc0:	2324      	movs	r3, #36	; 0x24
   27fc2:	4a22      	ldr	r2, [pc, #136]	; (2804c <gpio_nrfx_manage_callback+0x98>)
   27fc4:	4822      	ldr	r0, [pc, #136]	; (28050 <gpio_nrfx_manage_callback+0x9c>)
   27fc6:	f019 f9fd 	bl	413c4 <printk>
   27fca:	4822      	ldr	r0, [pc, #136]	; (28054 <gpio_nrfx_manage_callback+0xa0>)
   27fcc:	f019 f9fa 	bl	413c4 <printk>
   27fd0:	2124      	movs	r1, #36	; 0x24
   27fd2:	481e      	ldr	r0, [pc, #120]	; (2804c <gpio_nrfx_manage_callback+0x98>)
   27fd4:	f019 fc13 	bl	417fe <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   27fd8:	6863      	ldr	r3, [r4, #4]
   27fda:	b963      	cbnz	r3, 27ff6 <gpio_nrfx_manage_callback+0x42>
   27fdc:	491e      	ldr	r1, [pc, #120]	; (28058 <gpio_nrfx_manage_callback+0xa4>)
   27fde:	2325      	movs	r3, #37	; 0x25
   27fe0:	4a1a      	ldr	r2, [pc, #104]	; (2804c <gpio_nrfx_manage_callback+0x98>)
   27fe2:	481b      	ldr	r0, [pc, #108]	; (28050 <gpio_nrfx_manage_callback+0x9c>)
   27fe4:	f019 f9ee 	bl	413c4 <printk>
   27fe8:	481c      	ldr	r0, [pc, #112]	; (2805c <gpio_nrfx_manage_callback+0xa8>)
   27fea:	f019 f9eb 	bl	413c4 <printk>
   27fee:	2125      	movs	r1, #37	; 0x25
   27ff0:	4816      	ldr	r0, [pc, #88]	; (2804c <gpio_nrfx_manage_callback+0x98>)
   27ff2:	f019 fc04 	bl	417fe <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   27ff6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   27ff8:	b15b      	cbz	r3, 28012 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27ffa:	2200      	movs	r2, #0
   27ffc:	429c      	cmp	r4, r3
   27ffe:	d113      	bne.n	28028 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   28000:	6823      	ldr	r3, [r4, #0]
   28002:	b95a      	cbnz	r2, 2801c <gpio_nrfx_manage_callback+0x68>
   28004:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   28006:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   28008:	4294      	cmp	r4, r2
   2800a:	d100      	bne.n	2800e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   2800c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   2800e:	2300      	movs	r3, #0
   28010:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   28012:	b976      	cbnz	r6, 28032 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   28014:	2000      	movs	r0, #0
				     callback, set);
}
   28016:	bd70      	pop	{r4, r5, r6, pc}
   28018:	460b      	mov	r3, r1
   2801a:	e7ef      	b.n	27ffc <gpio_nrfx_manage_callback+0x48>
   2801c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2801e:	68ab      	ldr	r3, [r5, #8]
   28020:	429c      	cmp	r4, r3
	list->tail = node;
   28022:	bf08      	it	eq
   28024:	60aa      	streq	r2, [r5, #8]
}
   28026:	e7f2      	b.n	2800e <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28028:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2802a:	461a      	mov	r2, r3
   2802c:	2900      	cmp	r1, #0
   2802e:	d1f3      	bne.n	28018 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   28030:	b13e      	cbz	r6, 28042 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   28032:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   28034:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   28036:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   28038:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2803a:	2800      	cmp	r0, #0
   2803c:	d1ea      	bne.n	28014 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   2803e:	60ac      	str	r4, [r5, #8]
}
   28040:	e7e9      	b.n	28016 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   28042:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   28046:	e7e6      	b.n	28016 <gpio_nrfx_manage_callback+0x62>
   28048:	0004a397 	.word	0x0004a397
   2804c:	00049dcc 	.word	0x00049dcc
   28050:	00048156 	.word	0x00048156
   28054:	00049df9 	.word	0x00049df9
   28058:	00049e08 	.word	0x00049e08
   2805c:	00049e1a 	.word	0x00049e1a

00028060 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   28060:	6803      	ldr	r3, [r0, #0]
{
   28062:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   28064:	095a      	lsrs	r2, r3, #5
   28066:	bf0c      	ite	eq
   28068:	f04f 32ff 	moveq.w	r2, #4294967295
   2806c:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   2806e:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   28072:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   28076:	07db      	lsls	r3, r3, #31
{
   28078:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2807a:	d40b      	bmi.n	28094 <nrf_gpio_pin_port_decode+0x34>
   2807c:	490f      	ldr	r1, [pc, #60]	; (280bc <nrf_gpio_pin_port_decode+0x5c>)
   2807e:	4810      	ldr	r0, [pc, #64]	; (280c0 <nrf_gpio_pin_port_decode+0x60>)
   28080:	f240 231a 	movw	r3, #538	; 0x21a
   28084:	4a0f      	ldr	r2, [pc, #60]	; (280c4 <nrf_gpio_pin_port_decode+0x64>)
   28086:	f019 f99d 	bl	413c4 <printk>
   2808a:	f240 211a 	movw	r1, #538	; 0x21a
   2808e:	480d      	ldr	r0, [pc, #52]	; (280c4 <nrf_gpio_pin_port_decode+0x64>)
   28090:	f019 fbb5 	bl	417fe <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   28094:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   28096:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2809a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2809c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2809e:	d00b      	beq.n	280b8 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   280a0:	4909      	ldr	r1, [pc, #36]	; (280c8 <nrf_gpio_pin_port_decode+0x68>)
   280a2:	4807      	ldr	r0, [pc, #28]	; (280c0 <nrf_gpio_pin_port_decode+0x60>)
   280a4:	f240 231f 	movw	r3, #543	; 0x21f
   280a8:	4a06      	ldr	r2, [pc, #24]	; (280c4 <nrf_gpio_pin_port_decode+0x64>)
   280aa:	f019 f98b 	bl	413c4 <printk>
   280ae:	f240 211f 	movw	r1, #543	; 0x21f
   280b2:	4804      	ldr	r0, [pc, #16]	; (280c4 <nrf_gpio_pin_port_decode+0x64>)
   280b4:	f019 fba3 	bl	417fe <assert_post_action>
}
   280b8:	4804      	ldr	r0, [pc, #16]	; (280cc <nrf_gpio_pin_port_decode+0x6c>)
   280ba:	bd10      	pop	{r4, pc}
   280bc:	00049e64 	.word	0x00049e64
   280c0:	00048156 	.word	0x00048156
   280c4:	00049e31 	.word	0x00049e31
   280c8:	0004ef58 	.word	0x0004ef58
   280cc:	40842500 	.word	0x40842500

000280d0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   280d0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   280d2:	4b09      	ldr	r3, [pc, #36]	; (280f8 <gpio_nrfx_init+0x28>)
   280d4:	781a      	ldrb	r2, [r3, #0]
   280d6:	b96a      	cbnz	r2, 280f4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   280d8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   280da:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   280dc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   280de:	2105      	movs	r1, #5
   280e0:	f7fe fd5e 	bl	26ba0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   280e4:	2031      	movs	r0, #49	; 0x31
   280e6:	f7fe fd3d 	bl	26b64 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   280ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   280ee:	4b03      	ldr	r3, [pc, #12]	; (280fc <gpio_nrfx_init+0x2c>)
   280f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   280f4:	2000      	movs	r0, #0
   280f6:	bd08      	pop	{r3, pc}
   280f8:	2002b0de 	.word	0x2002b0de
   280fc:	40031000 	.word	0x40031000

00028100 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   28100:	4b2e      	ldr	r3, [pc, #184]	; (281bc <gpio_nrfx_config+0xbc>)
{
   28102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   28104:	4c2e      	ldr	r4, [pc, #184]	; (281c0 <gpio_nrfx_config+0xc0>)
   28106:	4013      	ands	r3, r2
   28108:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2810a:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2810c:	d044      	beq.n	28198 <gpio_nrfx_config+0x98>
   2810e:	d80e      	bhi.n	2812e <gpio_nrfx_config+0x2e>
   28110:	2b06      	cmp	r3, #6
   28112:	d043      	beq.n	2819c <gpio_nrfx_config+0x9c>
   28114:	d806      	bhi.n	28124 <gpio_nrfx_config+0x24>
   28116:	2b00      	cmp	r3, #0
   28118:	d040      	beq.n	2819c <gpio_nrfx_config+0x9c>
   2811a:	2b02      	cmp	r3, #2
   2811c:	d040      	beq.n	281a0 <gpio_nrfx_config+0xa0>
   2811e:	f06f 0015 	mvn.w	r0, #21
   28122:	e037      	b.n	28194 <gpio_nrfx_config+0x94>
   28124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   28128:	d1f9      	bne.n	2811e <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   2812a:	2401      	movs	r4, #1
   2812c:	e009      	b.n	28142 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2812e:	4c25      	ldr	r4, [pc, #148]	; (281c4 <gpio_nrfx_config+0xc4>)
   28130:	42a3      	cmp	r3, r4
   28132:	d037      	beq.n	281a4 <gpio_nrfx_config+0xa4>
   28134:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   28138:	d036      	beq.n	281a8 <gpio_nrfx_config+0xa8>
   2813a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   2813e:	d1ee      	bne.n	2811e <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   28140:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   28142:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   28144:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   28148:	bf4c      	ite	mi
   2814a:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   2814c:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   28150:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   28154:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   28156:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   2815a:	d507      	bpl.n	2816c <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2815c:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2815e:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   28162:	d523      	bpl.n	281ac <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   28164:	2301      	movs	r3, #1
   28166:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   28168:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   2816c:	7a03      	ldrb	r3, [r0, #8]
   2816e:	f001 011f 	and.w	r1, r1, #31
   28172:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28176:	a801      	add	r0, sp, #4
   28178:	9101      	str	r1, [sp, #4]
   2817a:	f7ff ff71 	bl	28060 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2817e:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   28180:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   28184:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   28188:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2818c:	3280      	adds	r2, #128	; 0x80
   2818e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   28192:	2000      	movs	r0, #0
}
   28194:	b003      	add	sp, #12
   28196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   28198:	2407      	movs	r4, #7
   2819a:	e7d2      	b.n	28142 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2819c:	461c      	mov	r4, r3
   2819e:	e7d0      	b.n	28142 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   281a0:	2404      	movs	r4, #4
   281a2:	e7ce      	b.n	28142 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   281a4:	2405      	movs	r4, #5
   281a6:	e7cc      	b.n	28142 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   281a8:	2403      	movs	r4, #3
   281aa:	e7ca      	b.n	28142 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   281ac:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   281ae:	bf42      	ittt	mi
   281b0:	2301      	movmi	r3, #1
   281b2:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   281b4:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   281b8:	e7d8      	b.n	2816c <gpio_nrfx_config+0x6c>
   281ba:	bf00      	nop
   281bc:	00f00006 	.word	0x00f00006
   281c0:	00100006 	.word	0x00100006
   281c4:	00400002 	.word	0x00400002

000281c8 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   281c8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   281cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   281d0:	4606      	mov	r6, r0
   281d2:	460d      	mov	r5, r1
   281d4:	4690      	mov	r8, r2
   281d6:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   281d8:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   281da:	f001 071f 	and.w	r7, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   281de:	f040 80bc 	bne.w	2835a <gpio_nrfx_pin_interrupt_configure+0x192>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   281e2:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   281e4:	a801      	add	r0, sp, #4
   281e6:	7a1b      	ldrb	r3, [r3, #8]
   281e8:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
   281ec:	9301      	str	r3, [sp, #4]
   281ee:	f7ff ff37 	bl	28060 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   281f2:	9b01      	ldr	r3, [sp, #4]
   281f4:	3380      	adds	r3, #128	; 0x80
   281f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   281fa:	07d8      	lsls	r0, r3, #31
   281fc:	f100 80d2 	bmi.w	283a4 <gpio_nrfx_pin_interrupt_configure+0x1dc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   28200:	2101      	movs	r1, #1
   28202:	68e3      	ldr	r3, [r4, #12]
   28204:	40a9      	lsls	r1, r5
   28206:	4319      	orrs	r1, r3
   28208:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   2820a:	2101      	movs	r1, #1
   2820c:	6963      	ldr	r3, [r4, #20]
   2820e:	40a9      	lsls	r1, r5
   28210:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   28214:	bf0c      	ite	eq
   28216:	430b      	orreq	r3, r1
   28218:	438b      	bicne	r3, r1
   2821a:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   2821c:	69a3      	ldr	r3, [r4, #24]
   2821e:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   28222:	bf0c      	ite	eq
   28224:	430b      	orreq	r3, r1
   28226:	438b      	bicne	r3, r1
   28228:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   2822a:	6923      	ldr	r3, [r4, #16]
   2822c:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   28230:	bf0c      	ite	eq
   28232:	4319      	orreq	r1, r3
   28234:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   28238:	6873      	ldr	r3, [r6, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   2823a:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2823c:	7a18      	ldrb	r0, [r3, #8]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2823e:	2300      	movs	r3, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   28240:	f8d6 800c 	ldr.w	r8, [r6, #12]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   28244:	4e59      	ldr	r6, [pc, #356]	; (283ac <gpio_nrfx_pin_interrupt_configure+0x1e4>)
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   28246:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   2824a:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   2824e:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   28250:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   28254:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   28258:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   2825c:	428f      	cmp	r7, r1
   2825e:	f040 8087 	bne.w	28370 <gpio_nrfx_pin_interrupt_configure+0x1a8>
		    && (intenset & BIT(i))) {
   28262:	fa22 f103 	lsr.w	r1, r2, r3
   28266:	07c9      	lsls	r1, r1, #31
   28268:	f140 8082 	bpl.w	28370 <gpio_nrfx_pin_interrupt_configure+0x1a8>
			(void)atomic_and(mask, ~BIT(i));
   2826c:	2201      	movs	r2, #1
   2826e:	409a      	lsls	r2, r3
   28270:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28272:	494f      	ldr	r1, [pc, #316]	; (283b0 <gpio_nrfx_pin_interrupt_configure+0x1e8>)
   28274:	e8d1 4fef 	ldaex	r4, [r1]
   28278:	4004      	ands	r4, r0
   2827a:	e8c1 4fec 	stlex	ip, r4, [r1]
   2827e:	f1bc 0f00 	cmp.w	ip, #0
   28282:	d1f7      	bne.n	28274 <gpio_nrfx_pin_interrupt_configure+0xac>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   28284:	009b      	lsls	r3, r3, #2
   28286:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2828a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   2828e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   28292:	f021 0101 	bic.w	r1, r1, #1
   28296:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   2829a:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2829e:	2100      	movs	r1, #0
   282a0:	4638      	mov	r0, r7
   282a2:	f01b f89c 	bl	433de <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   282a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   282aa:	40eb      	lsrs	r3, r5
   282ac:	f013 0301 	ands.w	r3, r3, #1
   282b0:	d051      	beq.n	28356 <gpio_nrfx_pin_interrupt_configure+0x18e>
		if (data->trig_edge & BIT(pin)) {
   282b2:	f8d8 3014 	ldr.w	r3, [r8, #20]
   282b6:	40eb      	lsrs	r3, r5
   282b8:	f013 0401 	ands.w	r4, r3, #1
   282bc:	d065      	beq.n	2838a <gpio_nrfx_pin_interrupt_configure+0x1c2>
			if (data->double_edge & BIT(pin)) {
   282be:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   282c2:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   282c4:	40eb      	lsrs	r3, r5
   282c6:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   282c8:	bf48      	it	mi
   282ca:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   282cc:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   282d0:	bf5f      	itttt	pl
   282d2:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   282d6:	fa21 f505 	lsrpl.w	r5, r1, r5
   282da:	f005 0501 	andpl.w	r5, r5, #1
   282de:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   282e2:	4933      	ldr	r1, [pc, #204]	; (283b0 <gpio_nrfx_pin_interrupt_configure+0x1e8>)
   282e4:	bf58      	it	pl
   282e6:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   282e8:	fa0c f402 	lsl.w	r4, ip, r2
   282ec:	e8d1 0fef 	ldaex	r0, [r1]
   282f0:	ea40 0304 	orr.w	r3, r0, r4
   282f4:	e8c1 3fee 	stlex	lr, r3, [r1]
   282f8:	f1be 0f00 	cmp.w	lr, #0
   282fc:	d1f6      	bne.n	282ec <gpio_nrfx_pin_interrupt_configure+0x124>
		if ((prev & BIT(channel)) == 0) {
   282fe:	40d0      	lsrs	r0, r2
   28300:	f010 0301 	ands.w	r3, r0, #1
   28304:	d139      	bne.n	2837a <gpio_nrfx_pin_interrupt_configure+0x1b2>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   28306:	0091      	lsls	r1, r2, #2
   28308:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   2830c:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   28310:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   28314:	3240      	adds	r2, #64	; 0x40
   28316:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   2831a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   2831e:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   28322:	023f      	lsls	r7, r7, #8
   28324:	0092      	lsls	r2, r2, #2
   28326:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   2832a:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   2832e:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   28330:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   28334:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   28338:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2833c:	4307      	orrs	r7, r0
   2833e:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   28342:	6013      	str	r3, [r2, #0]
   28344:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   28346:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   2834a:	f042 0201 	orr.w	r2, r2, #1
   2834e:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   28352:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   28356:	4618      	mov	r0, r3
   28358:	e014      	b.n	28384 <gpio_nrfx_pin_interrupt_configure+0x1bc>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2835a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   2835e:	f47f af4f 	bne.w	28200 <gpio_nrfx_pin_interrupt_configure+0x38>
   28362:	2101      	movs	r1, #1
   28364:	fa01 f305 	lsl.w	r3, r1, r5
   28368:	68e1      	ldr	r1, [r4, #12]
   2836a:	ea21 0103 	bic.w	r1, r1, r3
   2836e:	e74b      	b.n	28208 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   28370:	3301      	adds	r3, #1
   28372:	2b08      	cmp	r3, #8
   28374:	f47f af6c 	bne.w	28250 <gpio_nrfx_pin_interrupt_configure+0x88>
   28378:	e791      	b.n	2829e <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   2837a:	3201      	adds	r2, #1
   2837c:	2a08      	cmp	r2, #8
   2837e:	d1b3      	bne.n	282e8 <gpio_nrfx_pin_interrupt_configure+0x120>
	return -ENODEV;
   28380:	f06f 0012 	mvn.w	r0, #18
}
   28384:	b003      	add	sp, #12
   28386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2838a:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2838e:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   28390:	40e9      	lsrs	r1, r5
   28392:	f001 0101 	and.w	r1, r1, #1
   28396:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2839a:	b2c9      	uxtb	r1, r1
   2839c:	f01b f81f 	bl	433de <nrf_gpio_cfg_sense_set>
	int res = 0;
   283a0:	4620      	mov	r0, r4
   283a2:	e7ef      	b.n	28384 <gpio_nrfx_pin_interrupt_configure+0x1bc>
		return -ENOTSUP;
   283a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   283a8:	e7ec      	b.n	28384 <gpio_nrfx_pin_interrupt_configure+0x1bc>
   283aa:	bf00      	nop
   283ac:	40031000 	.word	0x40031000
   283b0:	20024820 	.word	0x20024820

000283b4 <gpiote_event_handler>:
{
   283b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   283b8:	4e4b      	ldr	r6, [pc, #300]	; (284e8 <gpiote_event_handler+0x134>)
   283ba:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
   283bc:	2f00      	cmp	r7, #0
   283be:	d050      	beq.n	28462 <gpiote_event_handler+0xae>
	uint32_t bit = 1U << pin;
   283c0:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   283c4:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   283c8:	4b48      	ldr	r3, [pc, #288]	; (284ec <gpiote_event_handler+0x138>)
   283ca:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   283cc:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   283d0:	430a      	orrs	r2, r1
   283d2:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   283d6:	4a46      	ldr	r2, [pc, #280]	; (284f0 <gpiote_event_handler+0x13c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   283d8:	691b      	ldr	r3, [r3, #16]
   283da:	6914      	ldr	r4, [r2, #16]
   283dc:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   283de:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   283e2:	bb7d      	cbnz	r5, 28444 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   283e4:	6035      	str	r5, [r6, #0]
   283e6:	6833      	ldr	r3, [r6, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   283e8:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   283ea:	2501      	movs	r5, #1
   283ec:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   283ee:	4841      	ldr	r0, [pc, #260]	; (284f4 <gpiote_event_handler+0x140>)
   283f0:	4941      	ldr	r1, [pc, #260]	; (284f8 <gpiote_event_handler+0x144>)
   283f2:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   283f6:	fa05 fc03 	lsl.w	ip, r5, r3
   283fa:	ea1c 0f02 	tst.w	ip, r2
   283fe:	d00f      	beq.n	28420 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28400:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   28404:	b162      	cbz	r2, 28420 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   28406:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   2840a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2840e:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   28412:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   28416:	fa05 f202 	lsl.w	r2, r5, r2
   2841a:	4314      	orrs	r4, r2
   2841c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   28420:	3301      	adds	r3, #1
   28422:	2b08      	cmp	r3, #8
   28424:	d1e5      	bne.n	283f2 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   28426:	b9f4      	cbnz	r4, 28466 <gpiote_event_handler+0xb2>
	if (port_event) {
   28428:	b157      	cbz	r7, 28440 <gpiote_event_handler+0x8c>
	uint32_t bit = 1U << pin;
   2842a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2842c:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   2842e:	4d2f      	ldr	r5, [pc, #188]	; (284ec <gpiote_event_handler+0x138>)
   28430:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   28432:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   28436:	430a      	orrs	r2, r1
   28438:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   2843c:	2c00      	cmp	r4, #0
   2843e:	d141      	bne.n	284c4 <gpiote_event_handler+0x110>
}
   28440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   28444:	ea15 0f08 	tst.w	r5, r8
   28448:	d006      	beq.n	28458 <gpiote_event_handler+0xa4>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2844a:	2100      	movs	r1, #0
   2844c:	f009 001f 	and.w	r0, r9, #31
   28450:	f01a ffc5 	bl	433de <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   28454:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   28458:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   2845c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   28460:	e7bf      	b.n	283e2 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   28462:	463c      	mov	r4, r7
   28464:	e7c0      	b.n	283e8 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   28466:	4b21      	ldr	r3, [pc, #132]	; (284ec <gpiote_event_handler+0x138>)
   28468:	685d      	ldr	r5, [r3, #4]
   2846a:	2d00      	cmp	r5, #0
   2846c:	d0dc      	beq.n	28428 <gpiote_event_handler+0x74>
	return node->next;
   2846e:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   28470:	f8df 9090 	ldr.w	r9, [pc, #144]	; 28504 <gpiote_event_handler+0x150>
   28474:	2e00      	cmp	r6, #0
   28476:	bf38      	it	cc
   28478:	2600      	movcc	r6, #0
			__ASSERT(cb->handler, "No callback handler!");
   2847a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 28508 <gpiote_event_handler+0x154>
   2847e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 2850c <gpiote_event_handler+0x158>
		if (cb->pin_mask & pins) {
   28482:	68ab      	ldr	r3, [r5, #8]
   28484:	421c      	tst	r4, r3
   28486:	d014      	beq.n	284b2 <gpiote_event_handler+0xfe>
			__ASSERT(cb->handler, "No callback handler!");
   28488:	686b      	ldr	r3, [r5, #4]
   2848a:	b963      	cbnz	r3, 284a6 <gpiote_event_handler+0xf2>
   2848c:	4651      	mov	r1, sl
   2848e:	2345      	movs	r3, #69	; 0x45
   28490:	4642      	mov	r2, r8
   28492:	481a      	ldr	r0, [pc, #104]	; (284fc <gpiote_event_handler+0x148>)
   28494:	f018 ff96 	bl	413c4 <printk>
   28498:	4819      	ldr	r0, [pc, #100]	; (28500 <gpiote_event_handler+0x14c>)
   2849a:	f018 ff93 	bl	413c4 <printk>
   2849e:	2145      	movs	r1, #69	; 0x45
   284a0:	4640      	mov	r0, r8
   284a2:	f019 f9ac 	bl	417fe <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   284a6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   284aa:	4629      	mov	r1, r5
   284ac:	4648      	mov	r0, r9
   284ae:	4022      	ands	r2, r4
   284b0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   284b2:	2e00      	cmp	r6, #0
   284b4:	d0b8      	beq.n	28428 <gpiote_event_handler+0x74>
   284b6:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   284b8:	4635      	mov	r5, r6
   284ba:	2b00      	cmp	r3, #0
   284bc:	bf38      	it	cc
   284be:	2300      	movcc	r3, #0
   284c0:	461e      	mov	r6, r3
   284c2:	e7de      	b.n	28482 <gpiote_event_handler+0xce>
		if (level_pins & bit) {
   284c4:	4226      	tst	r6, r4
   284c6:	d00c      	beq.n	284e2 <gpiote_event_handler+0x12e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   284c8:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   284ca:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   284ce:	40f9      	lsrs	r1, r7
   284d0:	f001 0101 	and.w	r1, r1, #1
   284d4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   284d8:	b2c9      	uxtb	r1, r1
   284da:	f01a ff80 	bl	433de <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   284de:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   284e2:	3701      	adds	r7, #1
		bit <<= 1;
   284e4:	0076      	lsls	r6, r6, #1
   284e6:	e7a9      	b.n	2843c <gpiote_event_handler+0x88>
   284e8:	4003117c 	.word	0x4003117c
   284ec:	20024804 	.word	0x20024804
   284f0:	40842500 	.word	0x40842500
   284f4:	40031000 	.word	0x40031000
   284f8:	40031100 	.word	0x40031100
   284fc:	00048156 	.word	0x00048156
   28500:	00049e1a 	.word	0x00049e1a
   28504:	20020a40 	.word	0x20020a40
   28508:	00049dcc 	.word	0x00049dcc
   2850c:	00049e87 	.word	0x00049e87

00028510 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   28510:	4b02      	ldr	r3, [pc, #8]	; (2851c <flash_nrf_pages_layout+0xc>)
   28512:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   28514:	2301      	movs	r3, #1
   28516:	6013      	str	r3, [r2, #0]
}
   28518:	4770      	bx	lr
   2851a:	bf00      	nop
   2851c:	20024824 	.word	0x20024824

00028520 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   28520:	4800      	ldr	r0, [pc, #0]	; (28524 <flash_nrf_get_parameters+0x4>)
   28522:	4770      	bx	lr
   28524:	000469d4 	.word	0x000469d4

00028528 <flash_nrf_erase>:
{
   28528:	b570      	push	{r4, r5, r6, lr}
   2852a:	460d      	mov	r5, r1
   2852c:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2852e:	f01c f9e0 	bl	448f2 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   28532:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   28534:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   28536:	4628      	mov	r0, r5
   28538:	f01a ff66 	bl	43408 <is_regular_addr_valid>
   2853c:	b300      	cbz	r0, 28580 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2853e:	fbb5 f3f6 	udiv	r3, r5, r6
   28542:	fb06 5313 	mls	r3, r6, r3, r5
   28546:	b9db      	cbnz	r3, 28580 <flash_nrf_erase+0x58>
   28548:	fbb4 f3f6 	udiv	r3, r4, r6
   2854c:	fb06 4013 	mls	r0, r6, r3, r4
   28550:	b9b0      	cbnz	r0, 28580 <flash_nrf_erase+0x58>
		if (!n_pages) {
   28552:	42a6      	cmp	r6, r4
   28554:	d813      	bhi.n	2857e <flash_nrf_erase+0x56>
	return z_impl_k_sem_take(sem, timeout);
   28556:	f04f 32ff 	mov.w	r2, #4294967295
   2855a:	f04f 33ff 	mov.w	r3, #4294967295
   2855e:	480a      	ldr	r0, [pc, #40]	; (28588 <flash_nrf_erase+0x60>)
   28560:	f015 fb0e 	bl	3db80 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   28564:	f01c f9c5 	bl	448f2 <nrfx_nvmc_flash_page_size_get>
   28568:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2856a:	4628      	mov	r0, r5
   2856c:	f013 f8aa 	bl	3b6c4 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   28570:	1ba4      	subs	r4, r4, r6
   28572:	4435      	add	r5, r6
   28574:	d1f9      	bne.n	2856a <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
   28576:	4804      	ldr	r0, [pc, #16]	; (28588 <flash_nrf_erase+0x60>)
   28578:	f015 fabe 	bl	3daf8 <z_impl_k_sem_give>
	return ret;
   2857c:	4620      	mov	r0, r4
}
   2857e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28580:	f06f 0015 	mvn.w	r0, #21
   28584:	e7fb      	b.n	2857e <flash_nrf_erase+0x56>
   28586:	bf00      	nop
   28588:	2002482c 	.word	0x2002482c

0002858c <nrf_flash_init>:
{
   2858c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2858e:	2201      	movs	r2, #1
   28590:	4806      	ldr	r0, [pc, #24]	; (285ac <nrf_flash_init+0x20>)
   28592:	4611      	mov	r1, r2
   28594:	f01c fa48 	bl	44a28 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   28598:	f01c f9ae 	bl	448f8 <nrfx_nvmc_flash_page_count_get>
   2859c:	4c04      	ldr	r4, [pc, #16]	; (285b0 <nrf_flash_init+0x24>)
   2859e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   285a0:	f01c f9a7 	bl	448f2 <nrfx_nvmc_flash_page_size_get>
   285a4:	6060      	str	r0, [r4, #4]
}
   285a6:	2000      	movs	r0, #0
   285a8:	bd10      	pop	{r4, pc}
   285aa:	bf00      	nop
   285ac:	2002482c 	.word	0x2002482c
   285b0:	20024824 	.word	0x20024824

000285b4 <flash_nrf_write>:
{
   285b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   285b6:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   285b8:	4619      	mov	r1, r3
   285ba:	4630      	mov	r0, r6
{
   285bc:	4617      	mov	r7, r2
   285be:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   285c0:	f01a ff22 	bl	43408 <is_regular_addr_valid>
   285c4:	b308      	cbz	r0, 2860a <flash_nrf_write+0x56>
	return (data & 0x3) ? false : true;
   285c6:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   285ca:	f015 0503 	ands.w	r5, r5, #3
   285ce:	d11c      	bne.n	2860a <flash_nrf_write+0x56>
	if (!len) {
   285d0:	b1f4      	cbz	r4, 28610 <flash_nrf_write+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   285d2:	f04f 32ff 	mov.w	r2, #4294967295
   285d6:	f04f 33ff 	mov.w	r3, #4294967295
   285da:	480e      	ldr	r0, [pc, #56]	; (28614 <flash_nrf_write+0x60>)
   285dc:	f015 fad0 	bl	3db80 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   285e0:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   285e4:	42a5      	cmp	r5, r4
   285e6:	eb06 0005 	add.w	r0, r6, r5
   285ea:	d109      	bne.n	28600 <flash_nrf_write+0x4c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   285ec:	4a0a      	ldr	r2, [pc, #40]	; (28618 <flash_nrf_write+0x64>)
   285ee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   285f2:	07db      	lsls	r3, r3, #31
   285f4:	d5fb      	bpl.n	285ee <flash_nrf_write+0x3a>
	z_impl_k_sem_give(sem);
   285f6:	4807      	ldr	r0, [pc, #28]	; (28614 <flash_nrf_write+0x60>)
   285f8:	f015 fa7e 	bl	3daf8 <z_impl_k_sem_give>
   285fc:	2000      	movs	r0, #0
}
   285fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   28600:	5979      	ldr	r1, [r7, r5]
   28602:	f013 f891 	bl	3b728 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   28606:	3504      	adds	r5, #4
}
   28608:	e7ec      	b.n	285e4 <flash_nrf_write+0x30>
		return -EINVAL;
   2860a:	f06f 0015 	mvn.w	r0, #21
   2860e:	e7f6      	b.n	285fe <flash_nrf_write+0x4a>
		return 0;
   28610:	4620      	mov	r0, r4
   28612:	e7f4      	b.n	285fe <flash_nrf_write+0x4a>
   28614:	2002482c 	.word	0x2002482c
   28618:	40039000 	.word	0x40039000

0002861c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   2861c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2861e:	794b      	ldrb	r3, [r1, #5]
   28620:	2b01      	cmp	r3, #1
   28622:	d029      	beq.n	28678 <uarte_nrfx_configure+0x5c>
   28624:	2b03      	cmp	r3, #3
   28626:	d124      	bne.n	28672 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   28628:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2862a:	798b      	ldrb	r3, [r1, #6]
   2862c:	2b03      	cmp	r3, #3
   2862e:	d120      	bne.n	28672 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   28630:	79cc      	ldrb	r4, [r1, #7]
   28632:	b124      	cbz	r4, 2863e <uarte_nrfx_configure+0x22>
   28634:	2c01      	cmp	r4, #1
   28636:	d11c      	bne.n	28672 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   28638:	6843      	ldr	r3, [r0, #4]
   2863a:	791b      	ldrb	r3, [r3, #4]
   2863c:	b1cb      	cbz	r3, 28672 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   2863e:	790a      	ldrb	r2, [r1, #4]
   28640:	b112      	cbz	r2, 28648 <uarte_nrfx_configure+0x2c>
   28642:	2a02      	cmp	r2, #2
   28644:	d115      	bne.n	28672 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   28646:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   28648:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   2864a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   2864c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   28650:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   28652:	d065      	beq.n	28720 <uarte_nrfx_configure+0x104>
   28654:	d82d      	bhi.n	286b2 <uarte_nrfx_configure+0x96>
   28656:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   2865a:	d064      	beq.n	28726 <uarte_nrfx_configure+0x10a>
   2865c:	d816      	bhi.n	2868c <uarte_nrfx_configure+0x70>
   2865e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   28662:	d062      	beq.n	2872a <uarte_nrfx_configure+0x10e>
   28664:	d80a      	bhi.n	2867c <uarte_nrfx_configure+0x60>
   28666:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2866a:	d061      	beq.n	28730 <uarte_nrfx_configure+0x114>
   2866c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   28670:	d061      	beq.n	28736 <uarte_nrfx_configure+0x11a>
   28672:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28676:	e052      	b.n	2871e <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   28678:	2600      	movs	r6, #0
   2867a:	e7d6      	b.n	2862a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   2867c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   28680:	d05c      	beq.n	2873c <uarte_nrfx_configure+0x120>
   28682:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   28686:	d1f4      	bne.n	28672 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   28688:	4b37      	ldr	r3, [pc, #220]	; (28768 <uarte_nrfx_configure+0x14c>)
   2868a:	e03c      	b.n	28706 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   2868c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   28690:	d057      	beq.n	28742 <uarte_nrfx_configure+0x126>
   28692:	d807      	bhi.n	286a4 <uarte_nrfx_configure+0x88>
   28694:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   28698:	d055      	beq.n	28746 <uarte_nrfx_configure+0x12a>
   2869a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   2869e:	d1e8      	bne.n	28672 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   286a0:	4b32      	ldr	r3, [pc, #200]	; (2876c <uarte_nrfx_configure+0x150>)
   286a2:	e030      	b.n	28706 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   286a4:	f647 2712 	movw	r7, #31250	; 0x7a12
   286a8:	42bb      	cmp	r3, r7
   286aa:	d1e2      	bne.n	28672 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   286ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   286b0:	e029      	b.n	28706 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   286b2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   286b6:	d048      	beq.n	2874a <uarte_nrfx_configure+0x12e>
   286b8:	d813      	bhi.n	286e2 <uarte_nrfx_configure+0xc6>
   286ba:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   286be:	d047      	beq.n	28750 <uarte_nrfx_configure+0x134>
   286c0:	d809      	bhi.n	286d6 <uarte_nrfx_configure+0xba>
   286c2:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   286c6:	42bb      	cmp	r3, r7
   286c8:	d044      	beq.n	28754 <uarte_nrfx_configure+0x138>
   286ca:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   286ce:	d1d0      	bne.n	28672 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   286d0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   286d4:	e017      	b.n	28706 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   286d6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   286da:	d1ca      	bne.n	28672 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   286dc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   286e0:	e011      	b.n	28706 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   286e2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   286e6:	d038      	beq.n	2875a <uarte_nrfx_configure+0x13e>
   286e8:	d808      	bhi.n	286fc <uarte_nrfx_configure+0xe0>
   286ea:	4f21      	ldr	r7, [pc, #132]	; (28770 <uarte_nrfx_configure+0x154>)
   286ec:	42bb      	cmp	r3, r7
   286ee:	d037      	beq.n	28760 <uarte_nrfx_configure+0x144>
   286f0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   286f4:	d1bd      	bne.n	28672 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   286f6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   286fa:	e004      	b.n	28706 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   286fc:	4f1d      	ldr	r7, [pc, #116]	; (28774 <uarte_nrfx_configure+0x158>)
   286fe:	42bb      	cmp	r3, r7
   28700:	d1b7      	bne.n	28672 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   28702:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   28706:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   2870a:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   2870c:	4334      	orrs	r4, r6
   2870e:	4322      	orrs	r2, r4
   28710:	3304      	adds	r3, #4
   28712:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   28714:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   28718:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   2871c:	2000      	movs	r0, #0
}
   2871e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   28720:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   28724:	e7ef      	b.n	28706 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   28726:	4b14      	ldr	r3, [pc, #80]	; (28778 <uarte_nrfx_configure+0x15c>)
   28728:	e7ed      	b.n	28706 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2872a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2872e:	e7ea      	b.n	28706 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   28730:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   28734:	e7e7      	b.n	28706 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   28736:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2873a:	e7e4      	b.n	28706 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2873c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   28740:	e7e1      	b.n	28706 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   28742:	4b0e      	ldr	r3, [pc, #56]	; (2877c <uarte_nrfx_configure+0x160>)
   28744:	e7df      	b.n	28706 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   28746:	4b0e      	ldr	r3, [pc, #56]	; (28780 <uarte_nrfx_configure+0x164>)
   28748:	e7dd      	b.n	28706 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2874a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2874e:	e7da      	b.n	28706 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   28750:	4b0c      	ldr	r3, [pc, #48]	; (28784 <uarte_nrfx_configure+0x168>)
   28752:	e7d8      	b.n	28706 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   28754:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   28758:	e7d5      	b.n	28706 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2875a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2875e:	e7d2      	b.n	28706 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   28760:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   28764:	e7cf      	b.n	28706 <uarte_nrfx_configure+0xea>
   28766:	bf00      	nop
   28768:	0013b000 	.word	0x0013b000
   2876c:	004ea000 	.word	0x004ea000
   28770:	0003d090 	.word	0x0003d090
   28774:	000f4240 	.word	0x000f4240
   28778:	00275000 	.word	0x00275000
   2877c:	0075c000 	.word	0x0075c000
   28780:	003af000 	.word	0x003af000
   28784:	013a9000 	.word	0x013a9000

00028788 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   28788:	6803      	ldr	r3, [r0, #0]
{
   2878a:	b510      	push	{r4, lr}
    switch (port)
   2878c:	095a      	lsrs	r2, r3, #5
   2878e:	bf0c      	ite	eq
   28790:	f04f 32ff 	moveq.w	r2, #4294967295
   28794:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   28796:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2879a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2879e:	07db      	lsls	r3, r3, #31
{
   287a0:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   287a2:	d40b      	bmi.n	287bc <nrf_gpio_pin_port_decode+0x34>
   287a4:	490f      	ldr	r1, [pc, #60]	; (287e4 <nrf_gpio_pin_port_decode+0x5c>)
   287a6:	4810      	ldr	r0, [pc, #64]	; (287e8 <nrf_gpio_pin_port_decode+0x60>)
   287a8:	f240 231a 	movw	r3, #538	; 0x21a
   287ac:	4a0f      	ldr	r2, [pc, #60]	; (287ec <nrf_gpio_pin_port_decode+0x64>)
   287ae:	f018 fe09 	bl	413c4 <printk>
   287b2:	f240 211a 	movw	r1, #538	; 0x21a
   287b6:	480d      	ldr	r0, [pc, #52]	; (287ec <nrf_gpio_pin_port_decode+0x64>)
   287b8:	f019 f821 	bl	417fe <assert_post_action>
    uint32_t pin_number = *p_pin;
   287bc:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   287be:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   287c2:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   287c4:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   287c6:	d00b      	beq.n	287e0 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   287c8:	4909      	ldr	r1, [pc, #36]	; (287f0 <nrf_gpio_pin_port_decode+0x68>)
   287ca:	4807      	ldr	r0, [pc, #28]	; (287e8 <nrf_gpio_pin_port_decode+0x60>)
   287cc:	f240 231f 	movw	r3, #543	; 0x21f
   287d0:	4a06      	ldr	r2, [pc, #24]	; (287ec <nrf_gpio_pin_port_decode+0x64>)
   287d2:	f018 fdf7 	bl	413c4 <printk>
   287d6:	f240 211f 	movw	r1, #543	; 0x21f
   287da:	4804      	ldr	r0, [pc, #16]	; (287ec <nrf_gpio_pin_port_decode+0x64>)
   287dc:	f019 f80f 	bl	417fe <assert_post_action>
}
   287e0:	4804      	ldr	r0, [pc, #16]	; (287f4 <nrf_gpio_pin_port_decode+0x6c>)
   287e2:	bd10      	pop	{r4, pc}
   287e4:	00049e64 	.word	0x00049e64
   287e8:	00048156 	.word	0x00048156
   287ec:	00049e31 	.word	0x00049e31
   287f0:	0004ef58 	.word	0x0004ef58
   287f4:	40842500 	.word	0x40842500

000287f8 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   287f8:	b530      	push	{r4, r5, lr}
   287fa:	b085      	sub	sp, #20
   287fc:	466c      	mov	r4, sp
   287fe:	4605      	mov	r5, r0
   28800:	4b08      	ldr	r3, [pc, #32]	; (28824 <uarte_1_init+0x2c>)
   28802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28804:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   28808:	2200      	movs	r2, #0
   2880a:	2101      	movs	r1, #1
   2880c:	2009      	movs	r0, #9
   2880e:	f7fe f9c7 	bl	26ba0 <z_arm_irq_priority_set>
   28812:	2009      	movs	r0, #9
   28814:	f7fe f9a6 	bl	26b64 <arch_irq_enable>
   28818:	4621      	mov	r1, r4
   2881a:	4628      	mov	r0, r5
   2881c:	f01a ffaf 	bl	4377e <uarte_instance_init.constprop.0>
   28820:	b005      	add	sp, #20
   28822:	bd30      	pop	{r4, r5, pc}
   28824:	00046548 	.word	0x00046548

00028828 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   28828:	b530      	push	{r4, r5, lr}
   2882a:	b085      	sub	sp, #20
   2882c:	466c      	mov	r4, sp
   2882e:	4605      	mov	r5, r0
   28830:	4b08      	ldr	r3, [pc, #32]	; (28854 <uarte_0_init+0x2c>)
   28832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   28838:	2200      	movs	r2, #0
   2883a:	2101      	movs	r1, #1
   2883c:	2008      	movs	r0, #8
   2883e:	f7fe f9af 	bl	26ba0 <z_arm_irq_priority_set>
   28842:	2008      	movs	r0, #8
   28844:	f7fe f98e 	bl	26b64 <arch_irq_enable>
   28848:	4621      	mov	r1, r4
   2884a:	4628      	mov	r0, r5
   2884c:	f01a ff97 	bl	4377e <uarte_instance_init.constprop.0>
   28850:	b005      	add	sp, #20
   28852:	bd30      	pop	{r4, r5, pc}
   28854:	00046558 	.word	0x00046558

00028858 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   28858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2885c:	460e      	mov	r6, r1
   2885e:	4614      	mov	r4, r2
   28860:	b0a6      	sub	sp, #152	; 0x98
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   28862:	b948      	cbnz	r0, 28878 <entropy_cc3xx_rng_get_entropy+0x20>
   28864:	491c      	ldr	r1, [pc, #112]	; (288d8 <entropy_cc3xx_rng_get_entropy+0x80>)
   28866:	481d      	ldr	r0, [pc, #116]	; (288dc <entropy_cc3xx_rng_get_entropy+0x84>)
   28868:	231f      	movs	r3, #31
   2886a:	4a1d      	ldr	r2, [pc, #116]	; (288e0 <entropy_cc3xx_rng_get_entropy+0x88>)
   2886c:	f018 fdaa 	bl	413c4 <printk>
   28870:	211f      	movs	r1, #31
   28872:	481b      	ldr	r0, [pc, #108]	; (288e0 <entropy_cc3xx_rng_get_entropy+0x88>)
   28874:	f018 ffc3 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   28878:	b94e      	cbnz	r6, 2888e <entropy_cc3xx_rng_get_entropy+0x36>
   2887a:	491a      	ldr	r1, [pc, #104]	; (288e4 <entropy_cc3xx_rng_get_entropy+0x8c>)
   2887c:	4817      	ldr	r0, [pc, #92]	; (288dc <entropy_cc3xx_rng_get_entropy+0x84>)
   2887e:	2320      	movs	r3, #32
   28880:	4a17      	ldr	r2, [pc, #92]	; (288e0 <entropy_cc3xx_rng_get_entropy+0x88>)
   28882:	f018 fd9f 	bl	413c4 <printk>
   28886:	2120      	movs	r1, #32
   28888:	4815      	ldr	r0, [pc, #84]	; (288e0 <entropy_cc3xx_rng_get_entropy+0x88>)
   2888a:	f018 ffb8 	bl	417fe <assert_post_action>
{
   2888e:	2700      	movs	r7, #0
   28890:	f06f 0515 	mvn.w	r5, #21
			       */

	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	while (length > 0) {
   28894:	b91c      	cbnz	r4, 2889e <entropy_cc3xx_rng_get_entropy+0x46>
		return -EINVAL;
	}
#endif

	return res;
}
   28896:	4628      	mov	r0, r5
   28898:	b026      	add	sp, #152	; 0x98
   2889a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   2889e:	2190      	movs	r1, #144	; 0x90
   288a0:	aa01      	add	r2, sp, #4
   288a2:	a802      	add	r0, sp, #8
   288a4:	f019 fe7a 	bl	4259c <spm_request_random_number>
		if (res < 0) {
   288a8:	1e05      	subs	r5, r0, #0
   288aa:	dbf4      	blt.n	28896 <entropy_cc3xx_rng_get_entropy+0x3e>
		if (olen != sizeof(spm_buf)) {
   288ac:	9b01      	ldr	r3, [sp, #4]
   288ae:	2b90      	cmp	r3, #144	; 0x90
   288b0:	d10e      	bne.n	288d0 <entropy_cc3xx_rng_get_entropy+0x78>
		to_copy = MIN(length, sizeof(spm_buf));
   288b2:	2c90      	cmp	r4, #144	; 0x90
   288b4:	46a0      	mov	r8, r4
   288b6:	bf28      	it	cs
   288b8:	f04f 0890 	movcs.w	r8, #144	; 0x90
   288bc:	19f0      	adds	r0, r6, r7
   288be:	4642      	mov	r2, r8
   288c0:	a902      	add	r1, sp, #8
		length -= to_copy;
   288c2:	eba4 0408 	sub.w	r4, r4, r8
   288c6:	f01c fa0e 	bl	44ce6 <memcpy>
   288ca:	b2a4      	uxth	r4, r4
		offset += to_copy;
   288cc:	4447      	add	r7, r8
   288ce:	e7e1      	b.n	28894 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   288d0:	f06f 0515 	mvn.w	r5, #21
   288d4:	e7df      	b.n	28896 <entropy_cc3xx_rng_get_entropy+0x3e>
   288d6:	bf00      	nop
   288d8:	00049ee1 	.word	0x00049ee1
   288dc:	00048156 	.word	0x00048156
   288e0:	00049eb1 	.word	0x00049eb1
   288e4:	00049ef4 	.word	0x00049ef4

000288e8 <parse_string>:
{
   288e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   288ec:	680a      	ldr	r2, [r1, #0]
   288ee:	688b      	ldr	r3, [r1, #8]
{
   288f0:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   288f2:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   288f4:	18d0      	adds	r0, r2, r3
   288f6:	5cd3      	ldrb	r3, [r2, r3]
{
   288f8:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   288fa:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   288fc:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   288fe:	f040 80de 	bne.w	28abe <parse_string+0x1d6>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   28902:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   28904:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   28906:	684c      	ldr	r4, [r1, #4]
   28908:	1ab9      	subs	r1, r7, r2
   2890a:	42a1      	cmp	r1, r4
   2890c:	f080 80d7 	bcs.w	28abe <parse_string+0x1d6>
   28910:	7839      	ldrb	r1, [r7, #0]
   28912:	2922      	cmp	r1, #34	; 0x22
   28914:	d10e      	bne.n	28934 <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   28916:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   2891a:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   2891c:	f8da 2010 	ldr.w	r2, [sl, #16]
   28920:	4418      	add	r0, r3
   28922:	4790      	blx	r2
        if (output == NULL)
   28924:	4683      	mov	fp, r0
   28926:	2800      	cmp	r0, #0
   28928:	f000 80c9 	beq.w	28abe <parse_string+0x1d6>
   2892c:	4604      	mov	r4, r0
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   2892e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 28ac8 <parse_string+0x1e0>
   28932:	e00f      	b.n	28954 <parse_string+0x6c>
            if (input_end[0] == '\\')
   28934:	295c      	cmp	r1, #92	; 0x5c
   28936:	d105      	bne.n	28944 <parse_string+0x5c>
   28938:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   2893a:	1ab9      	subs	r1, r7, r2
   2893c:	428c      	cmp	r4, r1
   2893e:	f240 80be 	bls.w	28abe <parse_string+0x1d6>
                skipped_bytes++;
   28942:	3301      	adds	r3, #1
            input_end++;
   28944:	3701      	adds	r7, #1
   28946:	e7df      	b.n	28908 <parse_string+0x20>
        if (*input_pointer != '\\')
   28948:	782b      	ldrb	r3, [r5, #0]
   2894a:	2b5c      	cmp	r3, #92	; 0x5c
   2894c:	d012      	beq.n	28974 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   2894e:	3501      	adds	r5, #1
   28950:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   28954:	42bd      	cmp	r5, r7
   28956:	d3f7      	bcc.n	28948 <parse_string+0x60>
    *output_pointer = '\0';
   28958:	2300      	movs	r3, #0
   2895a:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   2895c:	2310      	movs	r3, #16
    return true;
   2895e:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   28960:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   28964:	f8da 3000 	ldr.w	r3, [sl]
   28968:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
   2896a:	3701      	adds	r7, #1
   2896c:	f8ca 7008 	str.w	r7, [sl, #8]
}
   28970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   28974:	1b7a      	subs	r2, r7, r5
   28976:	2a00      	cmp	r2, #0
   28978:	dd0d      	ble.n	28996 <parse_string+0xae>
            switch (input_pointer[1])
   2897a:	786b      	ldrb	r3, [r5, #1]
   2897c:	2b75      	cmp	r3, #117	; 0x75
   2897e:	d80a      	bhi.n	28996 <parse_string+0xae>
   28980:	2b6d      	cmp	r3, #109	; 0x6d
   28982:	d812      	bhi.n	289aa <parse_string+0xc2>
   28984:	2b62      	cmp	r3, #98	; 0x62
   28986:	d02b      	beq.n	289e0 <parse_string+0xf8>
   28988:	d826      	bhi.n	289d8 <parse_string+0xf0>
   2898a:	2b2f      	cmp	r3, #47	; 0x2f
   2898c:	d029      	beq.n	289e2 <parse_string+0xfa>
   2898e:	2b5c      	cmp	r3, #92	; 0x5c
   28990:	d027      	beq.n	289e2 <parse_string+0xfa>
   28992:	2b22      	cmp	r3, #34	; 0x22
   28994:	d025      	beq.n	289e2 <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   28996:	4658      	mov	r0, fp
   28998:	f8da 3014 	ldr.w	r3, [sl, #20]
   2899c:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   2899e:	f8da 0000 	ldr.w	r0, [sl]
   289a2:	1a28      	subs	r0, r5, r0
   289a4:	f8ca 0008 	str.w	r0, [sl, #8]
   289a8:	e08c      	b.n	28ac4 <parse_string+0x1dc>
   289aa:	3b6e      	subs	r3, #110	; 0x6e
   289ac:	2b07      	cmp	r3, #7
   289ae:	d8f2      	bhi.n	28996 <parse_string+0xae>
   289b0:	a101      	add	r1, pc, #4	; (adr r1, 289b8 <parse_string+0xd0>)
   289b2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   289b6:	bf00      	nop
   289b8:	000289ed 	.word	0x000289ed
   289bc:	00028997 	.word	0x00028997
   289c0:	00028997 	.word	0x00028997
   289c4:	00028997 	.word	0x00028997
   289c8:	000289f1 	.word	0x000289f1
   289cc:	00028997 	.word	0x00028997
   289d0:	000289f5 	.word	0x000289f5
   289d4:	000289f9 	.word	0x000289f9
            switch (input_pointer[1])
   289d8:	2b66      	cmp	r3, #102	; 0x66
   289da:	d1dc      	bne.n	28996 <parse_string+0xae>
                    *output_pointer++ = '\f';
   289dc:	230c      	movs	r3, #12
   289de:	e000      	b.n	289e2 <parse_string+0xfa>
                    *output_pointer++ = '\b';
   289e0:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   289e2:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   289e6:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   289e8:	441d      	add	r5, r3
   289ea:	e7b3      	b.n	28954 <parse_string+0x6c>
                    *output_pointer++ = '\n';
   289ec:	230a      	movs	r3, #10
   289ee:	e7f8      	b.n	289e2 <parse_string+0xfa>
                    *output_pointer++ = '\r';
   289f0:	230d      	movs	r3, #13
   289f2:	e7f6      	b.n	289e2 <parse_string+0xfa>
                    *output_pointer++ = '\t';
   289f4:	2309      	movs	r3, #9
   289f6:	e7f4      	b.n	289e2 <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   289f8:	2a05      	cmp	r2, #5
   289fa:	ddcc      	ble.n	28996 <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   289fc:	1ca8      	adds	r0, r5, #2
   289fe:	f01a ff3c 	bl	4387a <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   28a02:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   28a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   28a0a:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   28a0c:	d3c3      	bcc.n	28996 <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   28a0e:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   28a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   28a16:	d22d      	bcs.n	28a74 <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   28a18:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   28a1a:	1afb      	subs	r3, r7, r3
   28a1c:	2b05      	cmp	r3, #5
   28a1e:	ddba      	ble.n	28996 <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   28a20:	79ab      	ldrb	r3, [r5, #6]
   28a22:	2b5c      	cmp	r3, #92	; 0x5c
   28a24:	d1b7      	bne.n	28996 <parse_string+0xae>
   28a26:	79eb      	ldrb	r3, [r5, #7]
   28a28:	2b75      	cmp	r3, #117	; 0x75
   28a2a:	d1b4      	bne.n	28996 <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   28a2c:	f105 0008 	add.w	r0, r5, #8
   28a30:	f01a ff23 	bl	4387a <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   28a34:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   28a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   28a3c:	d2ab      	bcs.n	28996 <parse_string+0xae>
        sequence_length = 12; /* \uXXXX\uXXXX */
   28a3e:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   28a40:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   28a44:	f3c0 0009 	ubfx	r0, r0, #0, #10
   28a48:	4330      	orrs	r0, r6
   28a4a:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   28a4e:	20f0      	movs	r0, #240	; 0xf0
        utf8_length = 4;
   28a50:	2104      	movs	r1, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   28a52:	f101 3eff 	add.w	lr, r1, #4294967295
   28a56:	fa5f fc8e 	uxtb.w	ip, lr
   28a5a:	44a6      	add	lr, r4
   28a5c:	b2f2      	uxtb	r2, r6
   28a5e:	f1bc 0f00 	cmp.w	ip, #0
   28a62:	d120      	bne.n	28aa6 <parse_string+0x1be>
    if (utf8_length > 1)
   28a64:	2901      	cmp	r1, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   28a66:	bf14      	ite	ne
   28a68:	4302      	orrne	r2, r0
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   28a6a:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   28a6e:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   28a70:	440c      	add	r4, r1
                    if (sequence_length == 0)
   28a72:	e7b9      	b.n	289e8 <parse_string+0x100>
    if (codepoint < 0x80)
   28a74:	287f      	cmp	r0, #127	; 0x7f
   28a76:	d90a      	bls.n	28a8e <parse_string+0x1a6>
    else if (codepoint < 0x800)
   28a78:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   28a7c:	d30b      	bcc.n	28a96 <parse_string+0x1ae>
    else if (codepoint < 0x10000)
   28a7e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   28a82:	d30c      	bcc.n	28a9e <parse_string+0x1b6>
    else if (codepoint <= 0x10FFFF)
   28a84:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   28a88:	d285      	bcs.n	28996 <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   28a8a:	2306      	movs	r3, #6
   28a8c:	e7df      	b.n	28a4e <parse_string+0x166>
   28a8e:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   28a90:	2000      	movs	r0, #0
        utf8_length = 1;
   28a92:	2101      	movs	r1, #1
   28a94:	e7dd      	b.n	28a52 <parse_string+0x16a>
        sequence_length = 6; /* \uXXXX */
   28a96:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   28a98:	20c0      	movs	r0, #192	; 0xc0
        utf8_length = 2;
   28a9a:	2102      	movs	r1, #2
   28a9c:	e7d9      	b.n	28a52 <parse_string+0x16a>
        sequence_length = 6; /* \uXXXX */
   28a9e:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   28aa0:	20e0      	movs	r0, #224	; 0xe0
        utf8_length = 3;
   28aa2:	2103      	movs	r1, #3
   28aa4:	e7d5      	b.n	28a52 <parse_string+0x16a>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   28aa6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   28aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   28aae:	f10c 3cff 	add.w	ip, ip, #4294967295
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   28ab2:	f80e 2901 	strb.w	r2, [lr], #-1
        codepoint >>= 6;
   28ab6:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   28ab8:	fa5f fc8c 	uxtb.w	ip, ip
   28abc:	e7ce      	b.n	28a5c <parse_string+0x174>
    if (input_pointer != NULL)
   28abe:	2d00      	cmp	r5, #0
   28ac0:	f47f af6d 	bne.w	2899e <parse_string+0xb6>
    return false;
   28ac4:	2000      	movs	r0, #0
   28ac6:	e753      	b.n	28970 <parse_string+0x88>
   28ac8:	000ffc00 	.word	0x000ffc00

00028acc <get_object_item>:
{
   28acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28ace:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   28ad0:	b360      	cbz	r0, 28b2c <get_object_item+0x60>
   28ad2:	b359      	cbz	r1, 28b2c <get_object_item+0x60>
    current_element = object->child;
   28ad4:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   28ad6:	b9fa      	cbnz	r2, 28b18 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   28ad8:	4e17      	ldr	r6, [pc, #92]	; (28b38 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   28ada:	b33c      	cbz	r4, 28b2c <get_object_item+0x60>
   28adc:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   28ade:	b1c3      	cbz	r3, 28b12 <get_object_item+0x46>
    if (string1 == string2)
   28ae0:	42ab      	cmp	r3, r5
   28ae2:	d021      	beq.n	28b28 <get_object_item+0x5c>
   28ae4:	f105 3cff 	add.w	ip, r5, #4294967295
   28ae8:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   28aea:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   28aee:	460f      	mov	r7, r1
   28af0:	5d8a      	ldrb	r2, [r1, r6]
   28af2:	f002 0203 	and.w	r2, r2, #3
   28af6:	2a01      	cmp	r2, #1
   28af8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28afc:	bf08      	it	eq
   28afe:	f101 0720 	addeq.w	r7, r1, #32
   28b02:	5cb0      	ldrb	r0, [r6, r2]
   28b04:	f000 0003 	and.w	r0, r0, #3
   28b08:	2801      	cmp	r0, #1
   28b0a:	bf08      	it	eq
   28b0c:	3220      	addeq	r2, #32
   28b0e:	4297      	cmp	r7, r2
   28b10:	d00f      	beq.n	28b32 <get_object_item+0x66>
            current_element = current_element->next;
   28b12:	6824      	ldr	r4, [r4, #0]
   28b14:	e7e1      	b.n	28ada <get_object_item+0xe>
            current_element = current_element->next;
   28b16:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   28b18:	b144      	cbz	r4, 28b2c <get_object_item+0x60>
   28b1a:	6a21      	ldr	r1, [r4, #32]
   28b1c:	b121      	cbz	r1, 28b28 <get_object_item+0x5c>
   28b1e:	4628      	mov	r0, r5
   28b20:	f7f4 fb92 	bl	1d248 <strcmp>
   28b24:	2800      	cmp	r0, #0
   28b26:	d1f6      	bne.n	28b16 <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   28b28:	6a23      	ldr	r3, [r4, #32]
   28b2a:	b903      	cbnz	r3, 28b2e <get_object_item+0x62>
        return NULL;
   28b2c:	2400      	movs	r4, #0
}
   28b2e:	4620      	mov	r0, r4
   28b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   28b32:	2900      	cmp	r1, #0
   28b34:	d1d9      	bne.n	28aea <get_object_item+0x1e>
   28b36:	e7f7      	b.n	28b28 <get_object_item+0x5c>
   28b38:	0004f35b 	.word	0x0004f35b

00028b3c <print_string_ptr>:
{
   28b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b40:	4605      	mov	r5, r0
    if (output_buffer == NULL)
   28b42:	460f      	mov	r7, r1
{
   28b44:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   28b46:	b919      	cbnz	r1, 28b50 <print_string_ptr+0x14>
        return false;
   28b48:	2000      	movs	r0, #0
}
   28b4a:	b005      	add	sp, #20
   28b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   28b50:	4b4e      	ldr	r3, [pc, #312]	; (28c8c <print_string_ptr+0x150>)
   28b52:	881a      	ldrh	r2, [r3, #0]
   28b54:	789b      	ldrb	r3, [r3, #2]
   28b56:	f8ad 200c 	strh.w	r2, [sp, #12]
   28b5a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   28b5e:	b340      	cbz	r0, 28bb2 <print_string_ptr+0x76>
   28b60:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   28b62:	f04f 0b00 	mov.w	fp, #0
   28b66:	2001      	movs	r0, #1
   28b68:	4c49      	ldr	r4, [pc, #292]	; (28c90 <print_string_ptr+0x154>)
   28b6a:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   28b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
   28b70:	bb6b      	cbnz	r3, 28bce <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   28b72:	ebaa 0a05 	sub.w	sl, sl, r5
   28b76:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   28b78:	4638      	mov	r0, r7
   28b7a:	f10a 0103 	add.w	r1, sl, #3
   28b7e:	f01a fedf 	bl	43940 <ensure>
    if (output == NULL)
   28b82:	4606      	mov	r6, r0
   28b84:	2800      	cmp	r0, #0
   28b86:	d0df      	beq.n	28b48 <print_string_ptr+0xc>
    if (escape_characters == 0)
   28b88:	2322      	movs	r3, #34	; 0x22
   28b8a:	1c44      	adds	r4, r0, #1
   28b8c:	f10a 0901 	add.w	r9, sl, #1
   28b90:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   28b94:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   28b96:	f1bb 0f00 	cmp.w	fp, #0
   28b9a:	d12e      	bne.n	28bfa <print_string_ptr+0xbe>
   28b9c:	4652      	mov	r2, sl
   28b9e:	4629      	mov	r1, r5
   28ba0:	4620      	mov	r0, r4
   28ba2:	f01c f8a0 	bl	44ce6 <memcpy>
        output[output_length + 1] = '\"';
   28ba6:	2322      	movs	r3, #34	; 0x22
   28ba8:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   28bac:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   28bb0:	e00b      	b.n	28bca <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   28bb2:	2103      	movs	r1, #3
   28bb4:	4638      	mov	r0, r7
   28bb6:	f01a fec3 	bl	43940 <ensure>
        if (output == NULL)
   28bba:	2800      	cmp	r0, #0
   28bbc:	d0c4      	beq.n	28b48 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   28bbe:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   28bc2:	a903      	add	r1, sp, #12
   28bc4:	1ad2      	subs	r2, r2, r3
   28bc6:	f01c faa0 	bl	4510a <strncpy>
    return true;
   28bca:	2001      	movs	r0, #1
   28bcc:	e7bd      	b.n	28b4a <print_string_ptr+0xe>
        switch (*input_pointer)
   28bce:	2b22      	cmp	r3, #34	; 0x22
   28bd0:	d80b      	bhi.n	28bea <print_string_ptr+0xae>
   28bd2:	2b07      	cmp	r3, #7
   28bd4:	d90c      	bls.n	28bf0 <print_string_ptr+0xb4>
   28bd6:	f1a3 0208 	sub.w	r2, r3, #8
   28bda:	b2d2      	uxtb	r2, r2
   28bdc:	fa00 f202 	lsl.w	r2, r0, r2
   28be0:	4222      	tst	r2, r4
   28be2:	d005      	beq.n	28bf0 <print_string_ptr+0xb4>
                escape_characters++;
   28be4:	f10b 0b01 	add.w	fp, fp, #1
                break;
   28be8:	e7bf      	b.n	28b6a <print_string_ptr+0x2e>
        switch (*input_pointer)
   28bea:	2b5c      	cmp	r3, #92	; 0x5c
   28bec:	d1bd      	bne.n	28b6a <print_string_ptr+0x2e>
   28bee:	e7f9      	b.n	28be4 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   28bf0:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   28bf2:	bf98      	it	ls
   28bf4:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   28bf8:	e7b7      	b.n	28b6a <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   28bfa:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   28bfe:	f04f 0b74 	mov.w	fp, #116	; 0x74
   28c02:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   28c04:	4a23      	ldr	r2, [pc, #140]	; (28c94 <print_string_ptr+0x158>)
   28c06:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   28c08:	9901      	ldr	r1, [sp, #4]
   28c0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   28c0e:	9101      	str	r1, [sp, #4]
   28c10:	b92b      	cbnz	r3, 28c1e <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   28c12:	2222      	movs	r2, #34	; 0x22
   28c14:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   28c18:	f806 3008 	strb.w	r3, [r6, r8]
   28c1c:	e7d5      	b.n	28bca <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   28c1e:	2b1f      	cmp	r3, #31
   28c20:	d907      	bls.n	28c32 <print_string_ptr+0xf6>
   28c22:	2b22      	cmp	r3, #34	; 0x22
   28c24:	d005      	beq.n	28c32 <print_string_ptr+0xf6>
   28c26:	2b5c      	cmp	r3, #92	; 0x5c
   28c28:	d003      	beq.n	28c32 <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   28c2a:	4620      	mov	r0, r4
   28c2c:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   28c2e:	1c44      	adds	r4, r0, #1
   28c30:	e7ea      	b.n	28c08 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   28c32:	4620      	mov	r0, r4
            switch (*input_pointer)
   28c34:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   28c36:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   28c3a:	781b      	ldrb	r3, [r3, #0]
   28c3c:	2b0d      	cmp	r3, #13
   28c3e:	d80a      	bhi.n	28c56 <print_string_ptr+0x11a>
   28c40:	2b07      	cmp	r3, #7
   28c42:	d919      	bls.n	28c78 <print_string_ptr+0x13c>
   28c44:	f1a3 0108 	sub.w	r1, r3, #8
   28c48:	2905      	cmp	r1, #5
   28c4a:	d815      	bhi.n	28c78 <print_string_ptr+0x13c>
   28c4c:	e8df f001 	tbb	[pc, r1]
   28c50:	140d1109 	.word	0x140d1109
   28c54:	0f0b      	.short	0x0f0b
   28c56:	2b22      	cmp	r3, #34	; 0x22
   28c58:	d001      	beq.n	28c5e <print_string_ptr+0x122>
   28c5a:	2b5c      	cmp	r3, #92	; 0x5c
   28c5c:	d10c      	bne.n	28c78 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   28c5e:	7063      	strb	r3, [r4, #1]
                    break;
   28c60:	e7e5      	b.n	28c2e <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   28c62:	2362      	movs	r3, #98	; 0x62
   28c64:	e7fb      	b.n	28c5e <print_string_ptr+0x122>
                    *output_pointer = 'f';
   28c66:	2366      	movs	r3, #102	; 0x66
   28c68:	e7f9      	b.n	28c5e <print_string_ptr+0x122>
                    *output_pointer = 'n';
   28c6a:	236e      	movs	r3, #110	; 0x6e
   28c6c:	e7f7      	b.n	28c5e <print_string_ptr+0x122>
                    *output_pointer = 'r';
   28c6e:	2372      	movs	r3, #114	; 0x72
   28c70:	e7f5      	b.n	28c5e <print_string_ptr+0x122>
                    *output_pointer = 't';
   28c72:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   28c76:	e7da      	b.n	28c2e <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   28c78:	6839      	ldr	r1, [r7, #0]
   28c7a:	687d      	ldr	r5, [r7, #4]
   28c7c:	1a41      	subs	r1, r0, r1
   28c7e:	1a69      	subs	r1, r5, r1
   28c80:	f016 ff84 	bl	3fb8c <sniprintf>
                    output_pointer += 4;
   28c84:	4a03      	ldr	r2, [pc, #12]	; (28c94 <print_string_ptr+0x158>)
   28c86:	1d60      	adds	r0, r4, #5
                    break;
   28c88:	e7d1      	b.n	28c2e <print_string_ptr+0xf2>
   28c8a:	bf00      	nop
   28c8c:	00049f1e 	.word	0x00049f1e
   28c90:	04000037 	.word	0x04000037
   28c94:	00049f18 	.word	0x00049f18

00028c98 <print_value>:
{
   28c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28c9c:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   28c9e:	4606      	mov	r6, r0
{
   28ca0:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   28ca2:	b908      	cbnz	r0, 28ca8 <print_value+0x10>
    switch ((item->type) & 0xFF)
   28ca4:	2500      	movs	r5, #0
   28ca6:	e06f      	b.n	28d88 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   28ca8:	2900      	cmp	r1, #0
   28caa:	d0fb      	beq.n	28ca4 <print_value+0xc>
    switch ((item->type) & 0xFF)
   28cac:	7b05      	ldrb	r5, [r0, #12]
   28cae:	2d10      	cmp	r5, #16
   28cb0:	f000 80cc 	beq.w	28e4c <print_value+0x1b4>
   28cb4:	dc18      	bgt.n	28ce8 <print_value+0x50>
   28cb6:	1e6b      	subs	r3, r5, #1
   28cb8:	2b07      	cmp	r3, #7
   28cba:	d8f3      	bhi.n	28ca4 <print_value+0xc>
   28cbc:	2b07      	cmp	r3, #7
   28cbe:	d8f1      	bhi.n	28ca4 <print_value+0xc>
   28cc0:	a201      	add	r2, pc, #4	; (adr r2, 28cc8 <print_value+0x30>)
   28cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   28cc6:	bf00      	nop
   28cc8:	00028d65 	.word	0x00028d65
   28ccc:	00028d91 	.word	0x00028d91
   28cd0:	00028ca5 	.word	0x00028ca5
   28cd4:	00028d3d 	.word	0x00028d3d
   28cd8:	00028ca5 	.word	0x00028ca5
   28cdc:	00028ca5 	.word	0x00028ca5
   28ce0:	00028ca5 	.word	0x00028ca5
   28ce4:	00028d95 	.word	0x00028d95
   28ce8:	2d40      	cmp	r5, #64	; 0x40
   28cea:	f000 80dd 	beq.w	28ea8 <print_value+0x210>
   28cee:	2d80      	cmp	r5, #128	; 0x80
   28cf0:	f000 8098 	beq.w	28e24 <print_value+0x18c>
   28cf4:	2d20      	cmp	r5, #32
   28cf6:	d1d5      	bne.n	28ca4 <print_value+0xc>
            return print_array(item, output_buffer);
   28cf8:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   28cfa:	2101      	movs	r1, #1
   28cfc:	4620      	mov	r0, r4
   28cfe:	f01a fe1f 	bl	43940 <ensure>
    if (output_pointer == NULL)
   28d02:	2800      	cmp	r0, #0
   28d04:	d0ce      	beq.n	28ca4 <print_value+0xc>
    *output_pointer = '[';
   28d06:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   28d08:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   28d0a:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   28d0e:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   28d10:	68a3      	ldr	r3, [r4, #8]
   28d12:	3301      	adds	r3, #1
   28d14:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   28d16:	68e3      	ldr	r3, [r4, #12]
   28d18:	3301      	adds	r3, #1
   28d1a:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   28d1c:	2e00      	cmp	r6, #0
   28d1e:	f040 809a 	bne.w	28e56 <print_value+0x1be>
    output_pointer = ensure(output_buffer, 2);
   28d22:	2102      	movs	r1, #2
   28d24:	4620      	mov	r0, r4
   28d26:	f01a fe0b 	bl	43940 <ensure>
    if (output_pointer == NULL)
   28d2a:	2800      	cmp	r0, #0
   28d2c:	d0ba      	beq.n	28ca4 <print_value+0xc>
    *output_pointer++ = ']';
   28d2e:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   28d30:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   28d32:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   28d34:	68e3      	ldr	r3, [r4, #12]
   28d36:	3b01      	subs	r3, #1
   28d38:	60e3      	str	r3, [r4, #12]
   28d3a:	e011      	b.n	28d60 <print_value+0xc8>
            const char buff[] = "null";
   28d3c:	4ba8      	ldr	r3, [pc, #672]	; (28fe0 <print_value+0x348>)
            const char buff[] = "true";
   28d3e:	6818      	ldr	r0, [r3, #0]
   28d40:	791b      	ldrb	r3, [r3, #4]
   28d42:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   28d44:	2105      	movs	r1, #5
   28d46:	4620      	mov	r0, r4
            const char buff[] = "true";
   28d48:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   28d4c:	f01a fdf8 	bl	43940 <ensure>
            if (output == NULL)
   28d50:	4605      	mov	r5, r0
   28d52:	b1c8      	cbz	r0, 28d88 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   28d54:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   28d58:	a907      	add	r1, sp, #28
   28d5a:	1ad2      	subs	r2, r2, r3
   28d5c:	f01c f9d5 	bl	4510a <strncpy>
    return true;
   28d60:	2501      	movs	r5, #1
   28d62:	e011      	b.n	28d88 <print_value+0xf0>
            const char buff[] = "false";
   28d64:	4b9f      	ldr	r3, [pc, #636]	; (28fe4 <print_value+0x34c>)
            output = ensure(output_buffer, sizeof(buff));
   28d66:	2106      	movs	r1, #6
            const char buff[] = "false";
   28d68:	6818      	ldr	r0, [r3, #0]
   28d6a:	889b      	ldrh	r3, [r3, #4]
   28d6c:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   28d6e:	4620      	mov	r0, r4
            const char buff[] = "false";
   28d70:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   28d74:	f01a fde4 	bl	43940 <ensure>
            if (output == NULL)
   28d78:	2800      	cmp	r0, #0
   28d7a:	d093      	beq.n	28ca4 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   28d7c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   28d80:	a907      	add	r1, sp, #28
   28d82:	1ad2      	subs	r2, r2, r3
   28d84:	f01c f9c1 	bl	4510a <strncpy>
}
   28d88:	4628      	mov	r0, r5
   28d8a:	b00f      	add	sp, #60	; 0x3c
   28d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   28d90:	4b95      	ldr	r3, [pc, #596]	; (28fe8 <print_value+0x350>)
   28d92:	e7d4      	b.n	28d3e <print_value+0xa6>
    if ((d * 0) != 0)
   28d94:	2200      	movs	r2, #0
    double d = item->valuedouble;
   28d96:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   28d9a:	2300      	movs	r3, #0
   28d9c:	4640      	mov	r0, r8
   28d9e:	4649      	mov	r1, r9
   28da0:	f7f3 fd0a 	bl	1c7b8 <__aeabi_dmul>
   28da4:	2200      	movs	r2, #0
   28da6:	2300      	movs	r3, #0
   28da8:	f7f3 ff6e 	bl	1cc88 <__aeabi_dcmpeq>
   28dac:	ae07      	add	r6, sp, #28
   28dae:	b9b8      	cbnz	r0, 28de0 <print_value+0x148>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   28db0:	4630      	mov	r0, r6
   28db2:	498b      	ldr	r1, [pc, #556]	; (28fe0 <print_value+0x348>)
   28db4:	f01c f973 	bl	4509e <strcpy>
   28db8:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   28dba:	4620      	mov	r0, r4
   28dbc:	1c69      	adds	r1, r5, #1
   28dbe:	f01a fdbf 	bl	43940 <ensure>
    if (output_pointer == NULL)
   28dc2:	2800      	cmp	r0, #0
   28dc4:	f43f af6e 	beq.w	28ca4 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   28dc8:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   28dca:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   28dcc:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   28dce:	3301      	adds	r3, #1
   28dd0:	429d      	cmp	r5, r3
   28dd2:	d1fa      	bne.n	28dca <print_value+0x132>
    output_pointer[i] = '\0';
   28dd4:	2300      	movs	r3, #0
   28dd6:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   28dd8:	68a0      	ldr	r0, [r4, #8]
   28dda:	4428      	add	r0, r5
   28ddc:	60a0      	str	r0, [r4, #8]
    return true;
   28dde:	e7bf      	b.n	28d60 <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   28de0:	211a      	movs	r1, #26
   28de2:	4a82      	ldr	r2, [pc, #520]	; (28fec <print_value+0x354>)
   28de4:	4630      	mov	r0, r6
   28de6:	e9cd 8900 	strd	r8, r9, [sp]
   28dea:	f016 fecf 	bl	3fb8c <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   28dee:	4980      	ldr	r1, [pc, #512]	; (28ff0 <print_value+0x358>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   28df0:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   28df2:	aa04      	add	r2, sp, #16
   28df4:	4630      	mov	r0, r6
   28df6:	f016 fefd 	bl	3fbf4 <siscanf>
   28dfa:	2801      	cmp	r0, #1
   28dfc:	d106      	bne.n	28e0c <print_value+0x174>
   28dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   28e02:	4640      	mov	r0, r8
   28e04:	4649      	mov	r1, r9
   28e06:	f7f3 ff3f 	bl	1cc88 <__aeabi_dcmpeq>
   28e0a:	b938      	cbnz	r0, 28e1c <print_value+0x184>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   28e0c:	211a      	movs	r1, #26
   28e0e:	4630      	mov	r0, r6
   28e10:	e9cd 8900 	strd	r8, r9, [sp]
   28e14:	4a77      	ldr	r2, [pc, #476]	; (28ff4 <print_value+0x35c>)
   28e16:	f016 feb9 	bl	3fb8c <sniprintf>
   28e1a:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   28e1c:	2d19      	cmp	r5, #25
   28e1e:	f73f af41 	bgt.w	28ca4 <print_value+0xc>
   28e22:	e7ca      	b.n	28dba <print_value+0x122>
            if (item->valuestring == NULL)
   28e24:	6900      	ldr	r0, [r0, #16]
   28e26:	2800      	cmp	r0, #0
   28e28:	f43f af3c 	beq.w	28ca4 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   28e2c:	f7f4 fa16 	bl	1d25c <strlen>
   28e30:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   28e32:	4611      	mov	r1, r2
   28e34:	4620      	mov	r0, r4
   28e36:	9203      	str	r2, [sp, #12]
   28e38:	f01a fd82 	bl	43940 <ensure>
            if (output == NULL)
   28e3c:	2800      	cmp	r0, #0
   28e3e:	f43f af31 	beq.w	28ca4 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28e42:	9a03      	ldr	r2, [sp, #12]
   28e44:	6931      	ldr	r1, [r6, #16]
   28e46:	f01b ff4e 	bl	44ce6 <memcpy>
   28e4a:	e789      	b.n	28d60 <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   28e4c:	6900      	ldr	r0, [r0, #16]
   28e4e:	f7ff fe75 	bl	28b3c <print_string_ptr>
   28e52:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   28e54:	e798      	b.n	28d88 <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   28e56:	4621      	mov	r1, r4
   28e58:	4630      	mov	r0, r6
   28e5a:	f7ff ff1d 	bl	28c98 <print_value>
   28e5e:	2800      	cmp	r0, #0
   28e60:	f43f af20 	beq.w	28ca4 <print_value+0xc>
        update_offset(output_buffer);
   28e64:	4620      	mov	r0, r4
   28e66:	f01a fd42 	bl	438ee <update_offset>
        if (current_element->next)
   28e6a:	6833      	ldr	r3, [r6, #0]
   28e6c:	b1bb      	cbz	r3, 28e9e <print_value+0x206>
            length = (size_t) (output_buffer->format ? 2 : 1);
   28e6e:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   28e70:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   28e72:	2b00      	cmp	r3, #0
   28e74:	bf14      	ite	ne
   28e76:	f04f 0902 	movne.w	r9, #2
   28e7a:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   28e7e:	f109 0101 	add.w	r1, r9, #1
   28e82:	f01a fd5d 	bl	43940 <ensure>
            if (output_pointer == NULL)
   28e86:	2800      	cmp	r0, #0
   28e88:	f43f af0c 	beq.w	28ca4 <print_value+0xc>
            *output_pointer++ = ',';
   28e8c:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   28e8e:	6963      	ldr	r3, [r4, #20]
   28e90:	b93b      	cbnz	r3, 28ea2 <print_value+0x20a>
            *output_pointer++ = ',';
   28e92:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   28e94:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   28e98:	68a3      	ldr	r3, [r4, #8]
   28e9a:	444b      	add	r3, r9
   28e9c:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   28e9e:	6836      	ldr	r6, [r6, #0]
   28ea0:	e73c      	b.n	28d1c <print_value+0x84>
                *output_pointer++ = ' ';
   28ea2:	1c83      	adds	r3, r0, #2
   28ea4:	7045      	strb	r5, [r0, #1]
   28ea6:	e7f5      	b.n	28e94 <print_value+0x1fc>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   28ea8:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   28eaa:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   28eac:	2b00      	cmp	r3, #0
   28eae:	bf14      	ite	ne
   28eb0:	2702      	movne	r7, #2
   28eb2:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   28eb4:	4620      	mov	r0, r4
   28eb6:	1c79      	adds	r1, r7, #1
   28eb8:	f01a fd42 	bl	43940 <ensure>
    if (output_pointer == NULL)
   28ebc:	2800      	cmp	r0, #0
   28ebe:	f43f aef1 	beq.w	28ca4 <print_value+0xc>
    *output_pointer++ = '{';
   28ec2:	237b      	movs	r3, #123	; 0x7b
   28ec4:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   28ec6:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   28ec8:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   28eca:	3201      	adds	r2, #1
   28ecc:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   28ece:	b10b      	cbz	r3, 28ed4 <print_value+0x23c>
        *output_pointer++ = '\n';
   28ed0:	230a      	movs	r3, #10
   28ed2:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   28ed4:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   28ed6:	2609      	movs	r6, #9
    output_buffer->offset += length;
   28ed8:	443b      	add	r3, r7
        *output_pointer++ = ':';
   28eda:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   28edc:	60a3      	str	r3, [r4, #8]
    while (current_item)
   28ede:	6963      	ldr	r3, [r4, #20]
   28ee0:	b995      	cbnz	r5, 28f08 <print_value+0x270>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   28ee2:	2b00      	cmp	r3, #0
   28ee4:	d06f      	beq.n	28fc6 <print_value+0x32e>
   28ee6:	68e1      	ldr	r1, [r4, #12]
   28ee8:	3101      	adds	r1, #1
   28eea:	4620      	mov	r0, r4
   28eec:	f01a fd28 	bl	43940 <ensure>
    if (output_pointer == NULL)
   28ef0:	2800      	cmp	r0, #0
   28ef2:	f43f aed7 	beq.w	28ca4 <print_value+0xc>
    if (output_buffer->format)
   28ef6:	6963      	ldr	r3, [r4, #20]
   28ef8:	2b00      	cmp	r3, #0
   28efa:	d16e      	bne.n	28fda <print_value+0x342>
   28efc:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   28efe:	227d      	movs	r2, #125	; 0x7d
   28f00:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   28f02:	2200      	movs	r2, #0
   28f04:	705a      	strb	r2, [r3, #1]
   28f06:	e715      	b.n	28d34 <print_value+0x9c>
        if (output_buffer->format)
   28f08:	b173      	cbz	r3, 28f28 <print_value+0x290>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   28f0a:	4620      	mov	r0, r4
   28f0c:	68e1      	ldr	r1, [r4, #12]
   28f0e:	f01a fd17 	bl	43940 <ensure>
            if (output_pointer == NULL)
   28f12:	2800      	cmp	r0, #0
   28f14:	f43f aec6 	beq.w	28ca4 <print_value+0xc>
   28f18:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   28f1a:	68e1      	ldr	r1, [r4, #12]
   28f1c:	1a13      	subs	r3, r2, r0
   28f1e:	428b      	cmp	r3, r1
   28f20:	d34e      	bcc.n	28fc0 <print_value+0x328>
            output_buffer->offset += output_buffer->depth;
   28f22:	68a3      	ldr	r3, [r4, #8]
   28f24:	440b      	add	r3, r1
   28f26:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   28f28:	4621      	mov	r1, r4
   28f2a:	6a28      	ldr	r0, [r5, #32]
   28f2c:	f7ff fe06 	bl	28b3c <print_string_ptr>
   28f30:	2800      	cmp	r0, #0
   28f32:	f43f aeb7 	beq.w	28ca4 <print_value+0xc>
        update_offset(output_buffer);
   28f36:	4620      	mov	r0, r4
   28f38:	f01a fcd9 	bl	438ee <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   28f3c:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   28f3e:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   28f40:	2b00      	cmp	r3, #0
   28f42:	bf14      	ite	ne
   28f44:	f04f 0802 	movne.w	r8, #2
   28f48:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   28f4c:	4641      	mov	r1, r8
   28f4e:	f01a fcf7 	bl	43940 <ensure>
        if (output_pointer == NULL)
   28f52:	2800      	cmp	r0, #0
   28f54:	f43f aea6 	beq.w	28ca4 <print_value+0xc>
        *output_pointer++ = ':';
   28f58:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   28f5a:	6963      	ldr	r3, [r4, #20]
   28f5c:	b103      	cbz	r3, 28f60 <print_value+0x2c8>
            *output_pointer++ = '\t';
   28f5e:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   28f60:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   28f62:	4621      	mov	r1, r4
        output_buffer->offset += length;
   28f64:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   28f66:	4628      	mov	r0, r5
        output_buffer->offset += length;
   28f68:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   28f6a:	f7ff fe95 	bl	28c98 <print_value>
   28f6e:	2800      	cmp	r0, #0
   28f70:	f43f ae98 	beq.w	28ca4 <print_value+0xc>
        update_offset(output_buffer);
   28f74:	4620      	mov	r0, r4
   28f76:	f01a fcba 	bl	438ee <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   28f7a:	682b      	ldr	r3, [r5, #0]
   28f7c:	6962      	ldr	r2, [r4, #20]
   28f7e:	3b00      	subs	r3, #0
   28f80:	bf18      	it	ne
   28f82:	2301      	movne	r3, #1
   28f84:	2a00      	cmp	r2, #0
   28f86:	bf0c      	ite	eq
   28f88:	4698      	moveq	r8, r3
   28f8a:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   28f8e:	4620      	mov	r0, r4
   28f90:	f108 0101 	add.w	r1, r8, #1
   28f94:	f01a fcd4 	bl	43940 <ensure>
        if (output_pointer == NULL)
   28f98:	2800      	cmp	r0, #0
   28f9a:	f43f ae83 	beq.w	28ca4 <print_value+0xc>
        if (current_item->next)
   28f9e:	682b      	ldr	r3, [r5, #0]
   28fa0:	b113      	cbz	r3, 28fa8 <print_value+0x310>
            *output_pointer++ = ',';
   28fa2:	232c      	movs	r3, #44	; 0x2c
   28fa4:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   28fa8:	6963      	ldr	r3, [r4, #20]
   28faa:	b113      	cbz	r3, 28fb2 <print_value+0x31a>
            *output_pointer++ = '\n';
   28fac:	230a      	movs	r3, #10
   28fae:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   28fb2:	2300      	movs	r3, #0
   28fb4:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   28fb6:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   28fb8:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   28fba:	4443      	add	r3, r8
   28fbc:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   28fbe:	e78e      	b.n	28ede <print_value+0x246>
                *output_pointer++ = '\t';
   28fc0:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   28fc4:	e7a9      	b.n	28f1a <print_value+0x282>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   28fc6:	2102      	movs	r1, #2
   28fc8:	e78f      	b.n	28eea <print_value+0x252>
            *output_pointer++ = '\t';
   28fca:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   28fce:	68e2      	ldr	r2, [r4, #12]
   28fd0:	1a19      	subs	r1, r3, r0
   28fd2:	3a01      	subs	r2, #1
   28fd4:	4291      	cmp	r1, r2
   28fd6:	d3f8      	bcc.n	28fca <print_value+0x332>
   28fd8:	e791      	b.n	28efe <print_value+0x266>
   28fda:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   28fdc:	2509      	movs	r5, #9
   28fde:	e7f6      	b.n	28fce <print_value+0x336>
   28fe0:	00049f21 	.word	0x00049f21
   28fe4:	00049f38 	.word	0x00049f38
   28fe8:	00049f3e 	.word	0x00049f3e
   28fec:	00049f26 	.word	0x00049f26
   28ff0:	00049f2d 	.word	0x00049f2d
   28ff4:	00049f31 	.word	0x00049f31

00028ff8 <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   28ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   28ffa:	4605      	mov	r5, r0
   28ffc:	b180      	cbz	r0, 29020 <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   28ffe:	f7f4 f92d 	bl	1d25c <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   29002:	4b08      	ldr	r3, [pc, #32]	; (29024 <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   29004:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   29006:	4610      	mov	r0, r2
   29008:	681b      	ldr	r3, [r3, #0]
   2900a:	9201      	str	r2, [sp, #4]
   2900c:	4798      	blx	r3
    if (copy == NULL)
   2900e:	4604      	mov	r4, r0
   29010:	b118      	cbz	r0, 2901a <cJSON_strdup.isra.0.constprop.0+0x22>
   29012:	4629      	mov	r1, r5
   29014:	9a01      	ldr	r2, [sp, #4]
   29016:	f01b fe66 	bl	44ce6 <memcpy>
}
   2901a:	4620      	mov	r0, r4
   2901c:	b003      	add	sp, #12
   2901e:	bd30      	pop	{r4, r5, pc}
        return NULL;
   29020:	4604      	mov	r4, r0
   29022:	e7fa      	b.n	2901a <cJSON_strdup.isra.0.constprop.0+0x22>
   29024:	200206f0 	.word	0x200206f0

00029028 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   29028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2902a:	460d      	mov	r5, r1
   2902c:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   2902e:	4607      	mov	r7, r0
   29030:	b1f0      	cbz	r0, 29070 <add_item_to_object.constprop.0+0x48>
   29032:	b1e9      	cbz	r1, 29070 <add_item_to_object.constprop.0+0x48>
   29034:	b1e2      	cbz	r2, 29070 <add_item_to_object.constprop.0+0x48>
    if (constant_key)
   29036:	b193      	cbz	r3, 2905e <add_item_to_object.constprop.0+0x36>
        new_type = item->type | cJSON_StringIsConst;
   29038:	68d6      	ldr	r6, [r2, #12]
   2903a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   2903e:	68e3      	ldr	r3, [r4, #12]
   29040:	059b      	lsls	r3, r3, #22
   29042:	d404      	bmi.n	2904e <add_item_to_object.constprop.0+0x26>
   29044:	6a20      	ldr	r0, [r4, #32]
   29046:	b110      	cbz	r0, 2904e <add_item_to_object.constprop.0+0x26>
        hooks->deallocate(item->string);
   29048:	4b0a      	ldr	r3, [pc, #40]	; (29074 <add_item_to_object.constprop.0+0x4c>)
   2904a:	685b      	ldr	r3, [r3, #4]
   2904c:	4798      	blx	r3
    return add_item_to_array(object, item);
   2904e:	4621      	mov	r1, r4
   29050:	4638      	mov	r0, r7
    item->string = new_key;
   29052:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   29054:	60e6      	str	r6, [r4, #12]
}
   29056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   2905a:	f01a bc55 	b.w	43908 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   2905e:	4608      	mov	r0, r1
   29060:	f7ff ffca 	bl	28ff8 <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   29064:	4605      	mov	r5, r0
   29066:	b118      	cbz	r0, 29070 <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   29068:	68e6      	ldr	r6, [r4, #12]
   2906a:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   2906e:	e7e6      	b.n	2903e <add_item_to_object.constprop.0+0x16>
}
   29070:	2000      	movs	r0, #0
   29072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29074:	200206f0 	.word	0x200206f0

00029078 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   29078:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2907a:	4d24      	ldr	r5, [pc, #144]	; (2910c <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   2907c:	b08b      	sub	sp, #44	; 0x2c
   2907e:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   29080:	2224      	movs	r2, #36	; 0x24
   29082:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   29084:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   29086:	a801      	add	r0, sp, #4
   29088:	f01b fe4d 	bl	44d26 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2908c:	682b      	ldr	r3, [r5, #0]
   2908e:	f44f 7080 	mov.w	r0, #256	; 0x100
   29092:	4798      	blx	r3
    buffer->length = default_buffer_size;
   29094:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   29098:	4603      	mov	r3, r0
    buffer->format = format;
   2909a:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   2909c:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2909e:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   290a0:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   290a2:	462f      	mov	r7, r5
   290a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   290a8:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   290ac:	b17b      	cbz	r3, 290ce <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   290ae:	4620      	mov	r0, r4
   290b0:	a901      	add	r1, sp, #4
   290b2:	f7ff fdf1 	bl	28c98 <print_value>
   290b6:	b150      	cbz	r0, 290ce <print.constprop.0+0x56>
    update_offset(buffer);
   290b8:	a801      	add	r0, sp, #4
   290ba:	f01a fc18 	bl	438ee <update_offset>
    if (hooks->reallocate != NULL)
   290be:	68ae      	ldr	r6, [r5, #8]
   290c0:	9903      	ldr	r1, [sp, #12]
   290c2:	b15e      	cbz	r6, 290dc <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   290c4:	9801      	ldr	r0, [sp, #4]
   290c6:	3101      	adds	r1, #1
   290c8:	47b0      	blx	r6
        if (printed == NULL) {
   290ca:	4604      	mov	r4, r0
   290cc:	b9d0      	cbnz	r0, 29104 <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   290ce:	9c01      	ldr	r4, [sp, #4]
   290d0:	b1c4      	cbz	r4, 29104 <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   290d2:	4620      	mov	r0, r4
   290d4:	687b      	ldr	r3, [r7, #4]
   290d6:	4798      	blx	r3
    return NULL;
   290d8:	2400      	movs	r4, #0
   290da:	e013      	b.n	29104 <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   290dc:	682b      	ldr	r3, [r5, #0]
   290de:	1c48      	adds	r0, r1, #1
   290e0:	4798      	blx	r3
        if (printed == NULL)
   290e2:	4604      	mov	r4, r0
   290e4:	2800      	cmp	r0, #0
   290e6:	d0f2      	beq.n	290ce <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   290e8:	9a03      	ldr	r2, [sp, #12]
   290ea:	9b02      	ldr	r3, [sp, #8]
   290ec:	3201      	adds	r2, #1
   290ee:	429a      	cmp	r2, r3
   290f0:	bf28      	it	cs
   290f2:	461a      	movcs	r2, r3
   290f4:	9901      	ldr	r1, [sp, #4]
   290f6:	f01b fdf6 	bl	44ce6 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   290fa:	9b03      	ldr	r3, [sp, #12]
   290fc:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   290fe:	686b      	ldr	r3, [r5, #4]
   29100:	9801      	ldr	r0, [sp, #4]
   29102:	4798      	blx	r3
}
   29104:	4620      	mov	r0, r4
   29106:	b00b      	add	sp, #44	; 0x2c
   29108:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2910a:	bf00      	nop
   2910c:	200206f0 	.word	0x200206f0

00029110 <cJSON_InitHooks>:
{
   29110:	b530      	push	{r4, r5, lr}
   29112:	4b0d      	ldr	r3, [pc, #52]	; (29148 <cJSON_InitHooks+0x38>)
   29114:	4d0d      	ldr	r5, [pc, #52]	; (2914c <cJSON_InitHooks+0x3c>)
   29116:	4c0e      	ldr	r4, [pc, #56]	; (29150 <cJSON_InitHooks+0x40>)
    if (hooks == NULL)
   29118:	b920      	cbnz	r0, 29124 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   2911a:	e9c3 5400 	strd	r5, r4, [r3]
        global_hooks.reallocate = realloc;
   2911e:	4a0d      	ldr	r2, [pc, #52]	; (29154 <cJSON_InitHooks+0x44>)
   29120:	609a      	str	r2, [r3, #8]
   29122:	e00f      	b.n	29144 <cJSON_InitHooks+0x34>
    if (hooks->malloc_fn != NULL)
   29124:	6801      	ldr	r1, [r0, #0]
    if (hooks->free_fn != NULL)
   29126:	6842      	ldr	r2, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   29128:	2900      	cmp	r1, #0
   2912a:	bf08      	it	eq
   2912c:	4629      	moveq	r1, r5
        global_hooks.deallocate = hooks->free_fn;
   2912e:	2a00      	cmp	r2, #0
   29130:	bf08      	it	eq
   29132:	4622      	moveq	r2, r4
    global_hooks.reallocate = NULL;
   29134:	2000      	movs	r0, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   29136:	42a9      	cmp	r1, r5
        global_hooks.allocate = hooks->malloc_fn;
   29138:	6019      	str	r1, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   2913a:	605a      	str	r2, [r3, #4]
    global_hooks.reallocate = NULL;
   2913c:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   2913e:	d101      	bne.n	29144 <cJSON_InitHooks+0x34>
   29140:	42a2      	cmp	r2, r4
   29142:	d0ec      	beq.n	2911e <cJSON_InitHooks+0xe>
}
   29144:	bd30      	pop	{r4, r5, pc}
   29146:	bf00      	nop
   29148:	200206f0 	.word	0x200206f0
   2914c:	0003f021 	.word	0x0003f021
   29150:	0003f031 	.word	0x0003f031
   29154:	0003fb5d 	.word	0x0003fb5d

00029158 <cJSON_Delete>:
{
   29158:	b570      	push	{r4, r5, r6, lr}
   2915a:	4604      	mov	r4, r0
   2915c:	4d0f      	ldr	r5, [pc, #60]	; (2919c <cJSON_Delete+0x44>)
    while (item != NULL)
   2915e:	b904      	cbnz	r4, 29162 <cJSON_Delete+0xa>
}
   29160:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   29162:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   29164:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   29166:	05d9      	lsls	r1, r3, #23
   29168:	d403      	bmi.n	29172 <cJSON_Delete+0x1a>
   2916a:	68a0      	ldr	r0, [r4, #8]
   2916c:	b968      	cbnz	r0, 2918a <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   2916e:	6920      	ldr	r0, [r4, #16]
   29170:	b988      	cbnz	r0, 29196 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   29172:	68e3      	ldr	r3, [r4, #12]
   29174:	059b      	lsls	r3, r3, #22
   29176:	d403      	bmi.n	29180 <cJSON_Delete+0x28>
   29178:	6a20      	ldr	r0, [r4, #32]
   2917a:	b108      	cbz	r0, 29180 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   2917c:	686b      	ldr	r3, [r5, #4]
   2917e:	4798      	blx	r3
        global_hooks.deallocate(item);
   29180:	4620      	mov	r0, r4
   29182:	686b      	ldr	r3, [r5, #4]
   29184:	4798      	blx	r3
        item = next;
   29186:	4634      	mov	r4, r6
   29188:	e7e9      	b.n	2915e <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   2918a:	f7ff ffe5 	bl	29158 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   2918e:	68e3      	ldr	r3, [r4, #12]
   29190:	05da      	lsls	r2, r3, #23
   29192:	d5ec      	bpl.n	2916e <cJSON_Delete+0x16>
   29194:	e7ed      	b.n	29172 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   29196:	686b      	ldr	r3, [r5, #4]
   29198:	4798      	blx	r3
   2919a:	e7ea      	b.n	29172 <cJSON_Delete+0x1a>
   2919c:	200206f0 	.word	0x200206f0

000291a0 <cJSON_ParseWithOpts>:
{
   291a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   291a4:	4605      	mov	r5, r0
    global_error.json = NULL;
   291a6:	f04f 0800 	mov.w	r8, #0
{
   291aa:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   291ac:	4f31      	ldr	r7, [pc, #196]	; (29274 <cJSON_ParseWithOpts+0xd4>)
{
   291ae:	460e      	mov	r6, r1
   291b0:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   291b2:	2100      	movs	r1, #0
   291b4:	221c      	movs	r2, #28
   291b6:	a801      	add	r0, sp, #4
   291b8:	f01b fdb5 	bl	44d26 <memset>
    global_error.position = 0;
   291bc:	e9c7 8800 	strd	r8, r8, [r7]
    if (value == NULL)
   291c0:	2d00      	cmp	r5, #0
   291c2:	d04d      	beq.n	29260 <cJSON_ParseWithOpts+0xc0>
    buffer.length = strlen((const char*)value) + sizeof("");
   291c4:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   291c6:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   291c8:	f7f4 f848 	bl	1d25c <strlen>
    buffer.hooks = global_hooks;
   291cc:	4b2a      	ldr	r3, [pc, #168]	; (29278 <cJSON_ParseWithOpts+0xd8>)
    buffer.length = strlen((const char*)value) + sizeof("");
   291ce:	3001      	adds	r0, #1
    buffer.offset = 0;
   291d0:	e9cd 0802 	strd	r0, r8, [sp, #8]
    buffer.hooks = global_hooks;
   291d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   291d8:	ab08      	add	r3, sp, #32
   291da:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   291de:	f01a fba3 	bl	43928 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   291e2:	4604      	mov	r4, r0
   291e4:	2800      	cmp	r0, #0
   291e6:	d030      	beq.n	2924a <cJSON_ParseWithOpts+0xaa>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   291e8:	9801      	ldr	r0, [sp, #4]
   291ea:	b128      	cbz	r0, 291f8 <cJSON_ParseWithOpts+0x58>
   291ec:	9b03      	ldr	r3, [sp, #12]
   291ee:	b9e3      	cbnz	r3, 2922a <cJSON_ParseWithOpts+0x8a>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   291f0:	9b02      	ldr	r3, [sp, #8]
   291f2:	2b04      	cmp	r3, #4
   291f4:	d80f      	bhi.n	29216 <cJSON_ParseWithOpts+0x76>
    return buffer;
   291f6:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   291f8:	f01a fb64 	bl	438c4 <buffer_skip_whitespace>
   291fc:	4601      	mov	r1, r0
   291fe:	4620      	mov	r0, r4
   29200:	f7f4 fa6e 	bl	1d6e0 <parse_value>
   29204:	b1f0      	cbz	r0, 29244 <cJSON_ParseWithOpts+0xa4>
    if (require_null_terminated)
   29206:	f1b9 0f00 	cmp.w	r9, #0
   2920a:	d110      	bne.n	2922e <cJSON_ParseWithOpts+0x8e>
    if (return_parse_end)
   2920c:	bb56      	cbnz	r6, 29264 <cJSON_ParseWithOpts+0xc4>
}
   2920e:	4620      	mov	r0, r4
   29210:	b009      	add	sp, #36	; 0x24
   29212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   29216:	2203      	movs	r2, #3
   29218:	4918      	ldr	r1, [pc, #96]	; (2927c <cJSON_ParseWithOpts+0xdc>)
   2921a:	f01b ff64 	bl	450e6 <strncmp>
   2921e:	2800      	cmp	r0, #0
   29220:	d1e9      	bne.n	291f6 <cJSON_ParseWithOpts+0x56>
        buffer->offset += 3;
   29222:	9b03      	ldr	r3, [sp, #12]
   29224:	3303      	adds	r3, #3
   29226:	9303      	str	r3, [sp, #12]
   29228:	e7e5      	b.n	291f6 <cJSON_ParseWithOpts+0x56>
        return NULL;
   2922a:	4640      	mov	r0, r8
   2922c:	e7e4      	b.n	291f8 <cJSON_ParseWithOpts+0x58>
        buffer_skip_whitespace(&buffer);
   2922e:	a801      	add	r0, sp, #4
   29230:	f01a fb48 	bl	438c4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   29234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   29238:	4293      	cmp	r3, r2
   2923a:	d203      	bcs.n	29244 <cJSON_ParseWithOpts+0xa4>
   2923c:	9a01      	ldr	r2, [sp, #4]
   2923e:	5cd3      	ldrb	r3, [r2, r3]
   29240:	2b00      	cmp	r3, #0
   29242:	d0e3      	beq.n	2920c <cJSON_ParseWithOpts+0x6c>
        cJSON_Delete(item);
   29244:	4620      	mov	r0, r4
   29246:	f7ff ff87 	bl	29158 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   2924a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2924e:	429a      	cmp	r2, r3
   29250:	d30d      	bcc.n	2926e <cJSON_ParseWithOpts+0xce>
        else if (buffer.length > 0)
   29252:	b103      	cbz	r3, 29256 <cJSON_ParseWithOpts+0xb6>
            local_error.position = buffer.length - 1;
   29254:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   29256:	b10e      	cbz	r6, 2925c <cJSON_ParseWithOpts+0xbc>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   29258:	18ea      	adds	r2, r5, r3
   2925a:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   2925c:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   29260:	2400      	movs	r4, #0
   29262:	e7d4      	b.n	2920e <cJSON_ParseWithOpts+0x6e>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   29264:	9b01      	ldr	r3, [sp, #4]
   29266:	9a03      	ldr	r2, [sp, #12]
   29268:	4413      	add	r3, r2
   2926a:	6033      	str	r3, [r6, #0]
   2926c:	e7cf      	b.n	2920e <cJSON_ParseWithOpts+0x6e>
   2926e:	4613      	mov	r3, r2
   29270:	e7f1      	b.n	29256 <cJSON_ParseWithOpts+0xb6>
   29272:	bf00      	nop
   29274:	20024844 	.word	0x20024844
   29278:	200206f0 	.word	0x200206f0
   2927c:	00049f43 	.word	0x00049f43

00029280 <cJSON_CreateNull>:
{
   29280:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   29282:	4b04      	ldr	r3, [pc, #16]	; (29294 <cJSON_CreateNull+0x14>)
   29284:	6818      	ldr	r0, [r3, #0]
   29286:	f01a fb4f 	bl	43928 <cJSON_New_Item.isra.0>
    if(item)
   2928a:	b108      	cbz	r0, 29290 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   2928c:	2304      	movs	r3, #4
   2928e:	60c3      	str	r3, [r0, #12]
}
   29290:	bd08      	pop	{r3, pc}
   29292:	bf00      	nop
   29294:	200206f0 	.word	0x200206f0

00029298 <cJSON_CreateBool>:
    cJSON *item = cJSON_New_Item(&global_hooks);
   29298:	4b06      	ldr	r3, [pc, #24]	; (292b4 <cJSON_CreateBool+0x1c>)
{
   2929a:	b510      	push	{r4, lr}
   2929c:	4604      	mov	r4, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   2929e:	6818      	ldr	r0, [r3, #0]
   292a0:	f01a fb42 	bl	43928 <cJSON_New_Item.isra.0>
    if(item)
   292a4:	b120      	cbz	r0, 292b0 <cJSON_CreateBool+0x18>
        item->type = b ? cJSON_True : cJSON_False;
   292a6:	2c00      	cmp	r4, #0
   292a8:	bf14      	ite	ne
   292aa:	2302      	movne	r3, #2
   292ac:	2301      	moveq	r3, #1
   292ae:	60c3      	str	r3, [r0, #12]
}
   292b0:	bd10      	pop	{r4, pc}
   292b2:	bf00      	nop
   292b4:	200206f0 	.word	0x200206f0

000292b8 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   292b8:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   292ba:	4b0a      	ldr	r3, [pc, #40]	; (292e4 <cJSON_CreateString+0x2c>)
{
   292bc:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   292be:	6818      	ldr	r0, [r3, #0]
   292c0:	f01a fb32 	bl	43928 <cJSON_New_Item.isra.0>
    if(item)
   292c4:	4604      	mov	r4, r0
   292c6:	b158      	cbz	r0, 292e0 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   292c8:	2310      	movs	r3, #16
   292ca:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   292cc:	4628      	mov	r0, r5
   292ce:	f7ff fe93 	bl	28ff8 <cJSON_strdup.isra.0.constprop.0>
   292d2:	4605      	mov	r5, r0
   292d4:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   292d6:	b918      	cbnz	r0, 292e0 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   292d8:	4620      	mov	r0, r4
   292da:	f7ff ff3d 	bl	29158 <cJSON_Delete>
            return NULL;
   292de:	462c      	mov	r4, r5
        }
    }

    return item;
}
   292e0:	4620      	mov	r0, r4
   292e2:	bd38      	pop	{r3, r4, r5, pc}
   292e4:	200206f0 	.word	0x200206f0

000292e8 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   292e8:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   292ea:	4b04      	ldr	r3, [pc, #16]	; (292fc <cJSON_CreateArray+0x14>)
   292ec:	6818      	ldr	r0, [r3, #0]
   292ee:	f01a fb1b 	bl	43928 <cJSON_New_Item.isra.0>
    if(item)
   292f2:	b108      	cbz	r0, 292f8 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   292f4:	2320      	movs	r3, #32
   292f6:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   292f8:	bd08      	pop	{r3, pc}
   292fa:	bf00      	nop
   292fc:	200206f0 	.word	0x200206f0

00029300 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   29300:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   29302:	4b04      	ldr	r3, [pc, #16]	; (29314 <cJSON_CreateObject+0x14>)
   29304:	6818      	ldr	r0, [r3, #0]
   29306:	f01a fb0f 	bl	43928 <cJSON_New_Item.isra.0>
    if (item)
   2930a:	b108      	cbz	r0, 29310 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   2930c:	2340      	movs	r3, #64	; 0x40
   2930e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   29310:	bd08      	pop	{r3, pc}
   29312:	bf00      	nop
   29314:	200206f0 	.word	0x200206f0

00029318 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   29318:	4803      	ldr	r0, [pc, #12]	; (29328 <cJSON_Init+0x10>)
   2931a:	4b04      	ldr	r3, [pc, #16]	; (2932c <cJSON_Init+0x14>)
   2931c:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   2931e:	4b04      	ldr	r3, [pc, #16]	; (29330 <cJSON_Init+0x18>)
   29320:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   29322:	f7ff bef5 	b.w	29110 <cJSON_InitHooks>
   29326:	bf00      	nop
   29328:	2002484c 	.word	0x2002484c
   2932c:	00043aa3 	.word	0x00043aa3
   29330:	00043a9f 	.word	0x00043a9f

00029334 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   29334:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   29336:	4d1c      	ldr	r5, [pc, #112]	; (293a8 <_bsdlib_init+0x74>)
   29338:	4c1c      	ldr	r4, [pc, #112]	; (293ac <_bsdlib_init+0x78>)
   2933a:	782b      	ldrb	r3, [r5, #0]
{
   2933c:	b085      	sub	sp, #20
	if (!first_time_init) {
   2933e:	b933      	cbnz	r3, 2934e <_bsdlib_init+0x1a>
	list->tail = NULL;
   29340:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   29344:	481a      	ldr	r0, [pc, #104]	; (293b0 <_bsdlib_init+0x7c>)
   29346:	f01b fb02 	bl	4494e <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   2934a:	2301      	movs	r3, #1
   2934c:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2934e:	2200      	movs	r2, #0
   29350:	202a      	movs	r0, #42	; 0x2a
   29352:	4611      	mov	r1, r2
   29354:	f7fd fc24 	bl	26ba0 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   29358:	4a16      	ldr	r2, [pc, #88]	; (293b4 <_bsdlib_init+0x80>)
   2935a:	ab01      	add	r3, sp, #4
   2935c:	ca07      	ldmia	r2, {r0, r1, r2}
   2935e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   29362:	4618      	mov	r0, r3
   29364:	f00f fe44 	bl	38ff0 <bsd_init>
   29368:	4b13      	ldr	r3, [pc, #76]	; (293b8 <_bsdlib_init+0x84>)
   2936a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   2936c:	f04f 32ff 	mov.w	r2, #4294967295
   29370:	f04f 33ff 	mov.w	r3, #4294967295
   29374:	480e      	ldr	r0, [pc, #56]	; (293b0 <_bsdlib_init+0x7c>)
   29376:	f012 ffa1 	bl	3c2bc <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   2937a:	6820      	ldr	r0, [r4, #0]
   2937c:	b170      	cbz	r0, 2939c <_bsdlib_init+0x68>
	return node->next;
   2937e:	6804      	ldr	r4, [r0, #0]
   29380:	2c00      	cmp	r4, #0
   29382:	bf38      	it	cc
   29384:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   29386:	3004      	adds	r0, #4
   29388:	f014 fbb6 	bl	3daf8 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   2938c:	b134      	cbz	r4, 2939c <_bsdlib_init+0x68>
   2938e:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29390:	4620      	mov	r0, r4
   29392:	2b00      	cmp	r3, #0
   29394:	bf38      	it	cc
   29396:	2300      	movcc	r3, #0
   29398:	461c      	mov	r4, r3
   2939a:	e7f4      	b.n	29386 <_bsdlib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   2939c:	4804      	ldr	r0, [pc, #16]	; (293b0 <_bsdlib_init+0x7c>)
   2939e:	f013 f887 	bl	3c4b0 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   293a2:	2000      	movs	r0, #0
   293a4:	b005      	add	sp, #20
   293a6:	bd30      	pop	{r4, r5, pc}
   293a8:	2002b11f 	.word	0x2002b11f
   293ac:	20024858 	.word	0x20024858
   293b0:	20024860 	.word	0x20024860
   293b4:	00046568 	.word	0x00046568
   293b8:	20024854 	.word	0x20024854

000293bc <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   293bc:	b530      	push	{r4, r5, lr}
   293be:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   293c0:	2201      	movs	r2, #1
   293c2:	2100      	movs	r1, #0
   293c4:	a802      	add	r0, sp, #8
   293c6:	f01b fb2f 	bl	44a28 <z_impl_k_sem_init>
   293ca:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   293cc:	f04f 33ff 	mov.w	r3, #4294967295
   293d0:	f04f 32ff 	mov.w	r2, #4294967295
   293d4:	481c      	ldr	r0, [pc, #112]	; (29448 <bsdlib_shutdown_wait+0x8c>)
   293d6:	f012 ff71 	bl	3c2bc <z_impl_k_mutex_lock>
	parent->next = child;
   293da:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   293dc:	4c1b      	ldr	r4, [pc, #108]	; (2944c <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   293de:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   293e0:	6863      	ldr	r3, [r4, #4]
   293e2:	bb2b      	cbnz	r3, 29430 <bsdlib_shutdown_wait+0x74>
	list->head = node;
   293e4:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   293e8:	4817      	ldr	r0, [pc, #92]	; (29448 <bsdlib_shutdown_wait+0x8c>)
   293ea:	f013 f861 	bl	3c4b0 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   293ee:	f04f 32ff 	mov.w	r2, #4294967295
   293f2:	f04f 33ff 	mov.w	r3, #4294967295
   293f6:	a802      	add	r0, sp, #8
   293f8:	f014 fbc2 	bl	3db80 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   293fc:	f04f 32ff 	mov.w	r2, #4294967295
   29400:	f04f 33ff 	mov.w	r3, #4294967295
   29404:	4810      	ldr	r0, [pc, #64]	; (29448 <bsdlib_shutdown_wait+0x8c>)
   29406:	f012 ff59 	bl	3c2bc <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2940a:	2200      	movs	r2, #0
   2940c:	6823      	ldr	r3, [r4, #0]
   2940e:	b153      	cbz	r3, 29426 <bsdlib_shutdown_wait+0x6a>
   29410:	42ab      	cmp	r3, r5
   29412:	d116      	bne.n	29442 <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   29414:	9901      	ldr	r1, [sp, #4]
   29416:	b972      	cbnz	r2, 29436 <bsdlib_shutdown_wait+0x7a>
   29418:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2941a:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2941c:	429a      	cmp	r2, r3
   2941e:	d100      	bne.n	29422 <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   29420:	6061      	str	r1, [r4, #4]
	parent->next = child;
   29422:	2300      	movs	r3, #0
   29424:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   29426:	4808      	ldr	r0, [pc, #32]	; (29448 <bsdlib_shutdown_wait+0x8c>)
   29428:	f013 f842 	bl	3c4b0 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   2942c:	b009      	add	sp, #36	; 0x24
   2942e:	bd30      	pop	{r4, r5, pc}
   29430:	601d      	str	r5, [r3, #0]
	list->tail = node;
   29432:	6065      	str	r5, [r4, #4]
}
   29434:	e7d8      	b.n	293e8 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   29436:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   29438:	6861      	ldr	r1, [r4, #4]
   2943a:	4299      	cmp	r1, r3
	list->tail = node;
   2943c:	bf08      	it	eq
   2943e:	6062      	streq	r2, [r4, #4]
}
   29440:	e7ef      	b.n	29422 <bsdlib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29442:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29444:	681b      	ldr	r3, [r3, #0]
   29446:	e7e2      	b.n	2940e <bsdlib_shutdown_wait+0x52>
   29448:	20024860 	.word	0x20024860
   2944c:	20024858 	.word	0x20024858

00029450 <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   29450:	4b01      	ldr	r3, [pc, #4]	; (29458 <bsdlib_get_init_ret+0x8>)
   29452:	6818      	ldr	r0, [r3, #0]
   29454:	4770      	bx	lr
   29456:	bf00      	nop
   29458:	20024854 	.word	0x20024854

0002945c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   2945c:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   2945e:	4c0d      	ldr	r4, [pc, #52]	; (29494 <thread_monitor_entry_get+0x38>)
{
   29460:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   29462:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   29464:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   29466:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   29468:	4b0b      	ldr	r3, [pc, #44]	; (29498 <thread_monitor_entry_get+0x3c>)
   2946a:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   2946c:	6801      	ldr	r1, [r0, #0]
   2946e:	4291      	cmp	r1, r2
   29470:	d00e      	beq.n	29490 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   29472:	b151      	cbz	r1, 2948a <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   29474:	6841      	ldr	r1, [r0, #4]
   29476:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   29478:	42b1      	cmp	r1, r6
   2947a:	bfc4      	itt	gt
   2947c:	4604      	movgt	r4, r0
   2947e:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   29480:	3d01      	subs	r5, #1
   29482:	f100 0008 	add.w	r0, r0, #8
   29486:	d1f1      	bne.n	2946c <thread_monitor_entry_get+0x10>
   29488:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   2948a:	3b01      	subs	r3, #1
	new_entry->id = id;
   2948c:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   2948e:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   29490:	bd70      	pop	{r4, r5, r6, pc}
   29492:	bf00      	nop
   29494:	20024880 	.word	0x20024880
   29498:	20024874 	.word	0x20024874

0002949c <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   2949c:	4668      	mov	r0, sp
   2949e:	f020 0107 	bic.w	r1, r0, #7
   294a2:	468d      	mov	sp, r1
   294a4:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   294a6:	4b0f      	ldr	r3, [pc, #60]	; (294e4 <rpc_proxy_irq_handler+0x48>)
   294a8:	e8d3 2fef 	ldaex	r2, [r3]
   294ac:	3201      	adds	r2, #1
   294ae:	e8c3 2fe1 	stlex	r1, r2, [r3]
   294b2:	2900      	cmp	r1, #0
   294b4:	d1f8      	bne.n	294a8 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   294b6:	f00a f91b 	bl	336f0 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   294ba:	4b0b      	ldr	r3, [pc, #44]	; (294e8 <rpc_proxy_irq_handler+0x4c>)
   294bc:	681c      	ldr	r4, [r3, #0]
   294be:	2c00      	cmp	r4, #0
   294c0:	bf38      	it	cc
   294c2:	2400      	movcc	r4, #0
   294c4:	b12c      	cbz	r4, 294d2 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   294c6:	1d20      	adds	r0, r4, #4
   294c8:	f014 fb16 	bl	3daf8 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   294cc:	6824      	ldr	r4, [r4, #0]
   294ce:	2c00      	cmp	r4, #0
   294d0:	d1f8      	bne.n	294c4 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   294d2:	f7fd fb97 	bl	26c04 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   294d6:	f7fd fd51 	bl	26f7c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   294da:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   294de:	4685      	mov	sp, r0
   294e0:	4770      	bx	lr
   294e2:	bf00      	nop
   294e4:	20024874 	.word	0x20024874
   294e8:	20024878 	.word	0x20024878

000294ec <bsd_os_timedwait>:
{
   294ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   294f0:	460c      	mov	r4, r1
   294f2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   294f4:	f01b fb1d 	bl	44b32 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   294f8:	6823      	ldr	r3, [r4, #0]
   294fa:	4680      	mov	r8, r0
   294fc:	2b00      	cmp	r3, #0
   294fe:	468a      	mov	sl, r1
   29500:	d103      	bne.n	2950a <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   29502:	f014 f975 	bl	3d7f0 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   29506:	203c      	movs	r0, #60	; 0x3c
   29508:	e091      	b.n	2962e <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   2950a:	bfbc      	itt	lt
   2950c:	f04f 33ff 	movlt.w	r3, #4294967295
   29510:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   29512:	2201      	movs	r2, #1
   29514:	2100      	movs	r1, #0
   29516:	a802      	add	r0, sp, #8
   29518:	f01b fa86 	bl	44a28 <z_impl_k_sem_init>
   2951c:	ad01      	add	r5, sp, #4
   2951e:	f04f 0320 	mov.w	r3, #32
   29522:	f3ef 8b11 	mrs	fp, BASEPRI
   29526:	f383 8811 	msr	BASEPRI, r3
   2952a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2952e:	f014 fadd 	bl	3daec <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   29532:	f7ff ff93 	bl	2945c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   29536:	4947      	ldr	r1, [pc, #284]	; (29654 <bsd_os_timedwait+0x168>)
   29538:	6843      	ldr	r3, [r0, #4]
   2953a:	680a      	ldr	r2, [r1, #0]
   2953c:	4689      	mov	r9, r1
   2953e:	4293      	cmp	r3, r2
   29540:	f04f 0300 	mov.w	r3, #0
   29544:	d108      	bne.n	29558 <bsd_os_timedwait+0x6c>
	parent->next = child;
   29546:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   29548:	4b43      	ldr	r3, [pc, #268]	; (29658 <bsd_os_timedwait+0x16c>)
   2954a:	685a      	ldr	r2, [r3, #4]
   2954c:	2a00      	cmp	r2, #0
   2954e:	d171      	bne.n	29634 <bsd_os_timedwait+0x148>
	list->head = node;
   29550:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   29554:	2301      	movs	r3, #1
}
   29556:	e000      	b.n	2955a <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   29558:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   2955a:	f38b 8811 	msr	BASEPRI, fp
   2955e:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   29562:	2b00      	cmp	r3, #0
   29564:	d062      	beq.n	2962c <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   29566:	6823      	ldr	r3, [r4, #0]
   29568:	1c5a      	adds	r2, r3, #1
   2956a:	d066      	beq.n	2963a <bsd_os_timedwait+0x14e>
   2956c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   29570:	f240 30e7 	movw	r0, #999	; 0x3e7
   29574:	2100      	movs	r1, #0
   29576:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   2957a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2957e:	2300      	movs	r3, #0
   29580:	fbce 010c 	smlal	r0, r1, lr, ip
   29584:	f7f3 fc9a 	bl	1cebc <__aeabi_uldivmod>
   29588:	4602      	mov	r2, r0
   2958a:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2958c:	a802      	add	r0, sp, #8
   2958e:	f014 faf7 	bl	3db80 <z_impl_k_sem_take>
	__asm__ volatile(
   29592:	f04f 0320 	mov.w	r3, #32
   29596:	f3ef 8b11 	mrs	fp, BASEPRI
   2959a:	f383 8811 	msr	BASEPRI, r3
   2959e:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   295a2:	2000      	movs	r0, #0
   295a4:	4b2c      	ldr	r3, [pc, #176]	; (29658 <bsd_os_timedwait+0x16c>)
   295a6:	681a      	ldr	r2, [r3, #0]
   295a8:	b15a      	cbz	r2, 295c2 <bsd_os_timedwait+0xd6>
   295aa:	42aa      	cmp	r2, r5
   295ac:	d14f      	bne.n	2964e <bsd_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   295ae:	9d01      	ldr	r5, [sp, #4]
   295b0:	2800      	cmp	r0, #0
   295b2:	d146      	bne.n	29642 <bsd_os_timedwait+0x156>
   295b4:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   295b6:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   295b8:	4291      	cmp	r1, r2
   295ba:	d100      	bne.n	295be <bsd_os_timedwait+0xd2>
	list->tail = node;
   295bc:	605d      	str	r5, [r3, #4]
	parent->next = child;
   295be:	2300      	movs	r3, #0
   295c0:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   295c2:	f014 fa93 	bl	3daec <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   295c6:	f7ff ff49 	bl	2945c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   295ca:	f8d9 3000 	ldr.w	r3, [r9]
   295ce:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   295d0:	f38b 8811 	msr	BASEPRI, fp
   295d4:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   295d8:	6825      	ldr	r5, [r4, #0]
   295da:	1c6b      	adds	r3, r5, #1
   295dc:	d026      	beq.n	2962c <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   295de:	f01b faa8 	bl	44b32 <z_impl_k_uptime_ticks>
   295e2:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   295e6:	468e      	mov	lr, r1
   295e8:	fba8 890c 	umull	r8, r9, r8, ip
   295ec:	fba0 010c 	umull	r0, r1, r0, ip
   295f0:	fb0c 990a 	mla	r9, ip, sl, r9
   295f4:	fb0c 110e 	mla	r1, ip, lr, r1
   295f8:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   295fc:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   29600:	1952      	adds	r2, r2, r5
   29602:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   29606:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   2960a:	0bc5      	lsrs	r5, r0, #15
   2960c:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   29610:	1b56      	subs	r6, r2, r5
   29612:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   29616:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   2961a:	2e00      	cmp	r6, #0
   2961c:	f177 0300 	sbcs.w	r3, r7, #0
   29620:	bfb8      	it	lt
   29622:	2600      	movlt	r6, #0
   29624:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   29626:	2e00      	cmp	r6, #0
   29628:	f43f af6d 	beq.w	29506 <bsd_os_timedwait+0x1a>
	return 0;
   2962c:	2000      	movs	r0, #0
}
   2962e:	b009      	add	sp, #36	; 0x24
   29630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29634:	6015      	str	r5, [r2, #0]
	list->tail = node;
   29636:	605d      	str	r5, [r3, #4]
   29638:	e78c      	b.n	29554 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   2963a:	f04f 32ff 	mov.w	r2, #4294967295
   2963e:	4613      	mov	r3, r2
   29640:	e7a4      	b.n	2958c <bsd_os_timedwait+0xa0>
	parent->next = child;
   29642:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   29644:	6859      	ldr	r1, [r3, #4]
   29646:	4291      	cmp	r1, r2
	list->tail = node;
   29648:	bf08      	it	eq
   2964a:	6058      	streq	r0, [r3, #4]
}
   2964c:	e7b7      	b.n	295be <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2964e:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29650:	6812      	ldr	r2, [r2, #0]
   29652:	e7a9      	b.n	295a8 <bsd_os_timedwait+0xbc>
   29654:	20024874 	.word	0x20024874
   29658:	20024878 	.word	0x20024878

0002965c <bsd_os_errno_set>:
	switch (err_code) {
   2965c:	283c      	cmp	r0, #60	; 0x3c
{
   2965e:	b510      	push	{r4, lr}
   29660:	4604      	mov	r4, r0
	switch (err_code) {
   29662:	f300 809f 	bgt.w	297a4 <bsd_os_errno_set+0x148>
   29666:	2800      	cmp	r0, #0
   29668:	dc1e      	bgt.n	296a8 <bsd_os_errno_set+0x4c>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   2966a:	f240 134d 	movw	r3, #333	; 0x14d
   2966e:	4ab9      	ldr	r2, [pc, #740]	; (29954 <bsd_os_errno_set+0x2f8>)
   29670:	49b9      	ldr	r1, [pc, #740]	; (29958 <bsd_os_errno_set+0x2fc>)
   29672:	48ba      	ldr	r0, [pc, #744]	; (2995c <bsd_os_errno_set+0x300>)
   29674:	f017 fea6 	bl	413c4 <printk>
   29678:	4621      	mov	r1, r4
   2967a:	48b9      	ldr	r0, [pc, #740]	; (29960 <bsd_os_errno_set+0x304>)
   2967c:	f017 fea2 	bl	413c4 <printk>
   29680:	f240 114d 	movw	r1, #333	; 0x14d
   29684:	48b3      	ldr	r0, [pc, #716]	; (29954 <bsd_os_errno_set+0x2f8>)
   29686:	f018 f8ba 	bl	417fe <assert_post_action>
   2968a:	4bb6      	ldr	r3, [pc, #728]	; (29964 <bsd_os_errno_set+0x308>)
   2968c:	48b6      	ldr	r0, [pc, #728]	; (29968 <bsd_os_errno_set+0x30c>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   2968e:	4622      	mov	r2, r4
   29690:	1ac0      	subs	r0, r0, r3
   29692:	08c0      	lsrs	r0, r0, #3
   29694:	0180      	lsls	r0, r0, #6
   29696:	49b5      	ldr	r1, [pc, #724]	; (2996c <bsd_os_errno_set+0x310>)
   29698:	f040 0001 	orr.w	r0, r0, #1
   2969c:	f018 f8c0 	bl	41820 <log_string_sync>
		errno = 0xBAADBAAD;
   296a0:	f018 ffe7 	bl	42672 <__errno>
   296a4:	4bb2      	ldr	r3, [pc, #712]	; (29970 <bsd_os_errno_set+0x314>)
   296a6:	e0be      	b.n	29826 <bsd_os_errno_set+0x1ca>
   296a8:	1e43      	subs	r3, r0, #1
   296aa:	2b3b      	cmp	r3, #59	; 0x3b
   296ac:	d8dd      	bhi.n	2966a <bsd_os_errno_set+0xe>
   296ae:	a201      	add	r2, pc, #4	; (adr r2, 296b4 <bsd_os_errno_set+0x58>)
   296b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   296b4:	00029821 	.word	0x00029821
   296b8:	0002982b 	.word	0x0002982b
   296bc:	0002966b 	.word	0x0002966b
   296c0:	0002966b 	.word	0x0002966b
   296c4:	00029833 	.word	0x00029833
   296c8:	0002966b 	.word	0x0002966b
   296cc:	0002966b 	.word	0x0002966b
   296d0:	0002983b 	.word	0x0002983b
   296d4:	00029843 	.word	0x00029843
   296d8:	0002966b 	.word	0x0002966b
   296dc:	0002966b 	.word	0x0002966b
   296e0:	0002984b 	.word	0x0002984b
   296e4:	00029853 	.word	0x00029853
   296e8:	0002985b 	.word	0x0002985b
   296ec:	0002966b 	.word	0x0002966b
   296f0:	0002966b 	.word	0x0002966b
   296f4:	0002966b 	.word	0x0002966b
   296f8:	0002966b 	.word	0x0002966b
   296fc:	0002966b 	.word	0x0002966b
   29700:	0002966b 	.word	0x0002966b
   29704:	0002966b 	.word	0x0002966b
   29708:	00029863 	.word	0x00029863
   2970c:	0002966b 	.word	0x0002966b
   29710:	0002986b 	.word	0x0002986b
   29714:	0002966b 	.word	0x0002966b
   29718:	0002966b 	.word	0x0002966b
   2971c:	0002966b 	.word	0x0002966b
   29720:	0002966b 	.word	0x0002966b
   29724:	0002966b 	.word	0x0002966b
   29728:	0002966b 	.word	0x0002966b
   2972c:	0002966b 	.word	0x0002966b
   29730:	0002966b 	.word	0x0002966b
   29734:	0002966b 	.word	0x0002966b
   29738:	0002966b 	.word	0x0002966b
   2973c:	00029873 	.word	0x00029873
   29740:	0002966b 	.word	0x0002966b
   29744:	0002987b 	.word	0x0002987b
   29748:	0002966b 	.word	0x0002966b
   2974c:	0002966b 	.word	0x0002966b
   29750:	00029943 	.word	0x00029943
   29754:	00029883 	.word	0x00029883
   29758:	0002988b 	.word	0x0002988b
   2975c:	00029893 	.word	0x00029893
   29760:	0002989b 	.word	0x0002989b
   29764:	000298a3 	.word	0x000298a3
   29768:	0002966b 	.word	0x0002966b
   2976c:	000298ab 	.word	0x000298ab
   29770:	000298b3 	.word	0x000298b3
   29774:	0002966b 	.word	0x0002966b
   29778:	000298bb 	.word	0x000298bb
   2977c:	000298c3 	.word	0x000298c3
   29780:	000298cb 	.word	0x000298cb
   29784:	0002994b 	.word	0x0002994b
   29788:	000298d3 	.word	0x000298d3
   2978c:	0002966b 	.word	0x0002966b
   29790:	000298db 	.word	0x000298db
   29794:	000298e3 	.word	0x000298e3
   29798:	0002966b 	.word	0x0002966b
   2979c:	0002966b 	.word	0x0002966b
   297a0:	000298eb 	.word	0x000298eb
	switch (err_code) {
   297a4:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   297a8:	2b18      	cmp	r3, #24
   297aa:	f63f af5e 	bhi.w	2966a <bsd_os_errno_set+0xe>
   297ae:	2b18      	cmp	r3, #24
   297b0:	f63f af5b 	bhi.w	2966a <bsd_os_errno_set+0xe>
   297b4:	a201      	add	r2, pc, #4	; (adr r2, 297bc <bsd_os_errno_set+0x160>)
   297b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   297ba:	bf00      	nop
   297bc:	000298f3 	.word	0x000298f3
   297c0:	0002966b 	.word	0x0002966b
   297c4:	0002966b 	.word	0x0002966b
   297c8:	0002966b 	.word	0x0002966b
   297cc:	0002966b 	.word	0x0002966b
   297d0:	0002966b 	.word	0x0002966b
   297d4:	0002966b 	.word	0x0002966b
   297d8:	000298fb 	.word	0x000298fb
   297dc:	0002966b 	.word	0x0002966b
   297e0:	0002990b 	.word	0x0002990b
   297e4:	00029903 	.word	0x00029903
   297e8:	0002966b 	.word	0x0002966b
   297ec:	0002966b 	.word	0x0002966b
   297f0:	0002966b 	.word	0x0002966b
   297f4:	0002966b 	.word	0x0002966b
   297f8:	0002966b 	.word	0x0002966b
   297fc:	0002966b 	.word	0x0002966b
   29800:	0002966b 	.word	0x0002966b
   29804:	0002966b 	.word	0x0002966b
   29808:	0002966b 	.word	0x0002966b
   2980c:	00029913 	.word	0x00029913
   29810:	0002991b 	.word	0x0002991b
   29814:	00029925 	.word	0x00029925
   29818:	0002992f 	.word	0x0002992f
   2981c:	00029939 	.word	0x00029939
		errno = EPERM;
   29820:	f018 ff27 	bl	42672 <__errno>
   29824:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   29826:	6003      	str	r3, [r0, #0]
}
   29828:	bd10      	pop	{r4, pc}
		errno = ENOENT;
   2982a:	f018 ff22 	bl	42672 <__errno>
   2982e:	2302      	movs	r3, #2
   29830:	e7f9      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EIO;
   29832:	f018 ff1e 	bl	42672 <__errno>
   29836:	2305      	movs	r3, #5
   29838:	e7f5      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ENOEXEC;
   2983a:	f018 ff1a 	bl	42672 <__errno>
   2983e:	2308      	movs	r3, #8
   29840:	e7f1      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EBADF;
   29842:	f018 ff16 	bl	42672 <__errno>
   29846:	2309      	movs	r3, #9
   29848:	e7ed      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ENOMEM;
   2984a:	f018 ff12 	bl	42672 <__errno>
   2984e:	230c      	movs	r3, #12
   29850:	e7e9      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EACCES;
   29852:	f018 ff0e 	bl	42672 <__errno>
   29856:	230d      	movs	r3, #13
   29858:	e7e5      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EFAULT;
   2985a:	f018 ff0a 	bl	42672 <__errno>
   2985e:	230e      	movs	r3, #14
   29860:	e7e1      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EINVAL;
   29862:	f018 ff06 	bl	42672 <__errno>
   29866:	2316      	movs	r3, #22
   29868:	e7dd      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EMFILE;
   2986a:	f018 ff02 	bl	42672 <__errno>
   2986e:	2318      	movs	r3, #24
   29870:	e7d9      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EAGAIN;
   29872:	f018 fefe 	bl	42672 <__errno>
   29876:	230b      	movs	r3, #11
   29878:	e7d5      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EDOM;
   2987a:	f018 fefa 	bl	42672 <__errno>
   2987e:	2321      	movs	r3, #33	; 0x21
   29880:	e7d1      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EPROTOTYPE;
   29882:	f018 fef6 	bl	42672 <__errno>
   29886:	236b      	movs	r3, #107	; 0x6b
   29888:	e7cd      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ENOPROTOOPT;
   2988a:	f018 fef2 	bl	42672 <__errno>
   2988e:	236d      	movs	r3, #109	; 0x6d
   29890:	e7c9      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EPROTONOSUPPORT;
   29892:	f018 feee 	bl	42672 <__errno>
   29896:	237b      	movs	r3, #123	; 0x7b
   29898:	e7c5      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ESOCKTNOSUPPORT;
   2989a:	f018 feea 	bl	42672 <__errno>
   2989e:	237c      	movs	r3, #124	; 0x7c
   298a0:	e7c1      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EOPNOTSUPP;
   298a2:	f018 fee6 	bl	42672 <__errno>
   298a6:	235f      	movs	r3, #95	; 0x5f
   298a8:	e7bd      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EAFNOSUPPORT;
   298aa:	f018 fee2 	bl	42672 <__errno>
   298ae:	236a      	movs	r3, #106	; 0x6a
   298b0:	e7b9      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EADDRINUSE;
   298b2:	f018 fede 	bl	42672 <__errno>
   298b6:	2370      	movs	r3, #112	; 0x70
   298b8:	e7b5      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ENETDOWN;
   298ba:	f018 feda 	bl	42672 <__errno>
   298be:	2373      	movs	r3, #115	; 0x73
   298c0:	e7b1      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ENETUNREACH;
   298c2:	f018 fed6 	bl	42672 <__errno>
   298c6:	2372      	movs	r3, #114	; 0x72
   298c8:	e7ad      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ENETRESET;
   298ca:	f018 fed2 	bl	42672 <__errno>
   298ce:	237e      	movs	r3, #126	; 0x7e
   298d0:	e7a9      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ECONNRESET;
   298d2:	f018 fece 	bl	42672 <__errno>
   298d6:	2368      	movs	r3, #104	; 0x68
   298d8:	e7a5      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EISCONN;
   298da:	f018 feca 	bl	42672 <__errno>
   298de:	237f      	movs	r3, #127	; 0x7f
   298e0:	e7a1      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ENOTCONN;
   298e2:	f018 fec6 	bl	42672 <__errno>
   298e6:	2380      	movs	r3, #128	; 0x80
   298e8:	e79d      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ETIMEDOUT;
   298ea:	f018 fec2 	bl	42672 <__errno>
   298ee:	2374      	movs	r3, #116	; 0x74
   298f0:	e799      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ENOBUFS;
   298f2:	f018 febe 	bl	42672 <__errno>
   298f6:	2369      	movs	r3, #105	; 0x69
   298f8:	e795      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EHOSTDOWN;
   298fa:	f018 feba 	bl	42672 <__errno>
   298fe:	2375      	movs	r3, #117	; 0x75
   29900:	e791      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EINPROGRESS;
   29902:	f018 feb6 	bl	42672 <__errno>
   29906:	2377      	movs	r3, #119	; 0x77
   29908:	e78d      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EALREADY;
   2990a:	f018 feb2 	bl	42672 <__errno>
   2990e:	2378      	movs	r3, #120	; 0x78
   29910:	e789      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ECANCELED;
   29912:	f018 feae 	bl	42672 <__errno>
   29916:	238c      	movs	r3, #140	; 0x8c
   29918:	e785      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ENOKEY;
   2991a:	f018 feaa 	bl	42672 <__errno>
   2991e:	f240 73d1 	movw	r3, #2001	; 0x7d1
   29922:	e780      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EKEYEXPIRED;
   29924:	f018 fea5 	bl	42672 <__errno>
   29928:	f240 73d2 	movw	r3, #2002	; 0x7d2
   2992c:	e77b      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EKEYREVOKED;
   2992e:	f018 fea0 	bl	42672 <__errno>
   29932:	f240 73d3 	movw	r3, #2003	; 0x7d3
   29936:	e776      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EKEYREJECTED;
   29938:	f018 fe9b 	bl	42672 <__errno>
   2993c:	f240 73d4 	movw	r3, #2004	; 0x7d4
   29940:	e771      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = EMSGSIZE;
   29942:	f018 fe96 	bl	42672 <__errno>
   29946:	237a      	movs	r3, #122	; 0x7a
   29948:	e76d      	b.n	29826 <bsd_os_errno_set+0x1ca>
		errno = ECONNABORTED;
   2994a:	f018 fe92 	bl	42672 <__errno>
   2994e:	2371      	movs	r3, #113	; 0x71
   29950:	e769      	b.n	29826 <bsd_os_errno_set+0x1ca>
   29952:	bf00      	nop
   29954:	00049f47 	.word	0x00049f47
   29958:	0004ef58 	.word	0x0004ef58
   2995c:	00048156 	.word	0x00048156
   29960:	00049f6b 	.word	0x00049f6b
   29964:	000463bc 	.word	0x000463bc
   29968:	000463fc 	.word	0x000463fc
   2996c:	00049f92 	.word	0x00049f92
   29970:	baadbaad 	.word	0xbaadbaad

00029974 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   29978:	4b01      	ldr	r3, [pc, #4]	; (29980 <bsd_os_application_irq_set+0xc>)
   2997a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2997e:	4770      	bx	lr
   29980:	e000e100 	.word	0xe000e100

00029984 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   29988:	4b01      	ldr	r3, [pc, #4]	; (29990 <bsd_os_application_irq_clear+0xc>)
   2998a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2998e:	4770      	bx	lr
   29990:	e000e100 	.word	0xe000e100

00029994 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29994:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   29998:	4b01      	ldr	r3, [pc, #4]	; (299a0 <bsd_os_trace_irq_set+0xc>)
   2999a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2999e:	4770      	bx	lr
   299a0:	e000e100 	.word	0xe000e100

000299a4 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   299a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   299a8:	4b01      	ldr	r3, [pc, #4]	; (299b0 <bsd_os_trace_irq_clear+0xc>)
   299aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   299ae:	4770      	bx	lr
   299b0:	e000e100 	.word	0xe000e100

000299b4 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   299b4:	b508      	push	{r3, lr}
	list->head = NULL;
   299b6:	2300      	movs	r3, #0
   299b8:	4a07      	ldr	r2, [pc, #28]	; (299d8 <bsd_os_init+0x24>)
	list->tail = NULL;
   299ba:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   299be:	4a07      	ldr	r2, [pc, #28]	; (299dc <bsd_os_init+0x28>)
   299c0:	e8d2 1fef 	ldaex	r1, [r2]
   299c4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   299c8:	2800      	cmp	r0, #0
   299ca:	d1f9      	bne.n	299c0 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   299cc:	f01a f89b 	bl	43b06 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   299d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   299d4:	f01a b88c 	b.w	43af0 <trace_task_create>
   299d8:	20024878 	.word	0x20024878
   299dc:	20024874 	.word	0x20024874

000299e0 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   299e0:	f240 2302 	movw	r3, #514	; 0x202
   299e4:	4298      	cmp	r0, r3
   299e6:	f000 8087 	beq.w	29af8 <z_to_nrf_optname+0x118>
   299ea:	dc07      	bgt.n	299fc <z_to_nrf_optname+0x1c>
   299ec:	2801      	cmp	r0, #1
   299ee:	d040      	beq.n	29a72 <z_to_nrf_optname+0x92>
   299f0:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   299f4:	d034      	beq.n	29a60 <z_to_nrf_optname+0x80>
   299f6:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   299fa:	4770      	bx	lr
	switch (z_in_level) {
   299fc:	f240 2303 	movw	r3, #515	; 0x203
   29a00:	4298      	cmp	r0, r3
   29a02:	d1f8      	bne.n	299f6 <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   29a04:	3901      	subs	r1, #1
   29a06:	2913      	cmp	r1, #19
   29a08:	d8f5      	bhi.n	299f6 <z_to_nrf_optname+0x16>
   29a0a:	a301      	add	r3, pc, #4	; (adr r3, 29a10 <z_to_nrf_optname+0x30>)
   29a0c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   29a10:	00029b07 	.word	0x00029b07
   29a14:	00029ae1 	.word	0x00029ae1
   29a18:	00029ae5 	.word	0x00029ae5
   29a1c:	00029a83 	.word	0x00029a83
   29a20:	00029ae9 	.word	0x00029ae9
   29a24:	00029aed 	.word	0x00029aed
   29a28:	00029af1 	.word	0x00029af1
   29a2c:	000299f7 	.word	0x000299f7
   29a30:	000299f7 	.word	0x000299f7
   29a34:	000299f7 	.word	0x000299f7
   29a38:	000299f7 	.word	0x000299f7
   29a3c:	000299f7 	.word	0x000299f7
   29a40:	000299f7 	.word	0x000299f7
   29a44:	000299f7 	.word	0x000299f7
   29a48:	000299f7 	.word	0x000299f7
   29a4c:	000299f7 	.word	0x000299f7
   29a50:	000299f7 	.word	0x000299f7
   29a54:	000299f7 	.word	0x000299f7
   29a58:	000299f7 	.word	0x000299f7
   29a5c:	00029af5 	.word	0x00029af5
		switch (z_in_optname) {
   29a60:	3901      	subs	r1, #1
   29a62:	2906      	cmp	r1, #6
   29a64:	d8c7      	bhi.n	299f6 <z_to_nrf_optname+0x16>
   29a66:	e8df f001 	tbb	[pc, r1]
   29a6a:	3f3b      	.short	0x3f3b
   29a6c:	4e0c4341 	.word	0x4e0c4341
   29a70:	3d          	.byte	0x3d
   29a71:	00          	.byte	0x00
		switch (z_in_optname) {
   29a72:	2920      	cmp	r1, #32
   29a74:	dcbf      	bgt.n	299f6 <z_to_nrf_optname+0x16>
   29a76:	2913      	cmp	r1, #19
   29a78:	dc05      	bgt.n	29a86 <z_to_nrf_optname+0xa6>
   29a7a:	2902      	cmp	r1, #2
   29a7c:	d028      	beq.n	29ad0 <z_to_nrf_optname+0xf0>
   29a7e:	2904      	cmp	r1, #4
   29a80:	d1b9      	bne.n	299f6 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   29a82:	2304      	movs	r3, #4
   29a84:	e040      	b.n	29b08 <z_to_nrf_optname+0x128>
   29a86:	3914      	subs	r1, #20
   29a88:	290c      	cmp	r1, #12
   29a8a:	d8b4      	bhi.n	299f6 <z_to_nrf_optname+0x16>
   29a8c:	a301      	add	r3, pc, #4	; (adr r3, 29a94 <z_to_nrf_optname+0xb4>)
   29a8e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   29a92:	bf00      	nop
   29a94:	00029af5 	.word	0x00029af5
   29a98:	00029ac9 	.word	0x00029ac9
   29a9c:	000299f7 	.word	0x000299f7
   29aa0:	000299f7 	.word	0x000299f7
   29aa4:	000299f7 	.word	0x000299f7
   29aa8:	00029acd 	.word	0x00029acd
   29aac:	000299f7 	.word	0x000299f7
   29ab0:	000299f7 	.word	0x000299f7
   29ab4:	000299f7 	.word	0x000299f7
   29ab8:	000299f7 	.word	0x000299f7
   29abc:	00029ad5 	.word	0x00029ad5
   29ac0:	00029ad9 	.word	0x00029ad9
   29ac4:	00029add 	.word	0x00029add
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   29ac8:	2315      	movs	r3, #21
   29aca:	e01d      	b.n	29b08 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   29acc:	2319      	movs	r3, #25
   29ace:	e01b      	b.n	29b08 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   29ad0:	2328      	movs	r3, #40	; 0x28
   29ad2:	e019      	b.n	29b08 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   29ad4:	231e      	movs	r3, #30
   29ad6:	e017      	b.n	29b08 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   29ad8:	231f      	movs	r3, #31
   29ada:	e015      	b.n	29b08 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   29adc:	2320      	movs	r3, #32
   29ade:	e013      	b.n	29b08 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   29ae0:	2302      	movs	r3, #2
   29ae2:	e011      	b.n	29b08 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   29ae4:	2303      	movs	r3, #3
   29ae6:	e00f      	b.n	29b08 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   29ae8:	2305      	movs	r3, #5
   29aea:	e00d      	b.n	29b08 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   29aec:	2306      	movs	r3, #6
   29aee:	e00b      	b.n	29b08 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   29af0:	2307      	movs	r3, #7
   29af2:	e009      	b.n	29b08 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   29af4:	2314      	movs	r3, #20
   29af6:	e007      	b.n	29b08 <z_to_nrf_optname+0x128>
		switch (z_in_optname) {
   29af8:	2902      	cmp	r1, #2
   29afa:	d0f1      	beq.n	29ae0 <z_to_nrf_optname+0x100>
   29afc:	2903      	cmp	r1, #3
   29afe:	d0f1      	beq.n	29ae4 <z_to_nrf_optname+0x104>
   29b00:	2901      	cmp	r1, #1
   29b02:	f47f af78 	bne.w	299f6 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   29b06:	2301      	movs	r3, #1
	int retval = 0;
   29b08:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   29b0a:	6013      	str	r3, [r2, #0]
			break;
   29b0c:	4770      	bx	lr
   29b0e:	bf00      	nop

00029b10 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   29b10:	f240 1303 	movw	r3, #259	; 0x103
{
   29b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   29b18:	4299      	cmp	r1, r3
{
   29b1a:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   29b1c:	f000 8097 	beq.w	29c4e <nrf91_socket_offload_ioctl+0x13e>
   29b20:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   29b24:	d005      	beq.n	29b32 <nrf91_socket_offload_ioctl+0x22>
   29b26:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   29b2a:	d171      	bne.n	29c10 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   29b2c:	f06f 0411 	mvn.w	r4, #17
   29b30:	e01d      	b.n	29b6e <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   29b32:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   29b36:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   29b3a:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   29b3c:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   29b40:	4668      	mov	r0, sp
   29b42:	2240      	movs	r2, #64	; 0x40
   29b44:	f01b f8ef 	bl	44d26 <memset>
	for (int i = 0; i < nfds; i++) {
   29b48:	466e      	mov	r6, sp
   29b4a:	4655      	mov	r5, sl
   29b4c:	4657      	mov	r7, sl
	int retval = 0;
   29b4e:	4644      	mov	r4, r8
		tmp[i].events = 0;
   29b50:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   29b52:	4940      	ldr	r1, [pc, #256]	; (29c54 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   29b54:	45c1      	cmp	r9, r8
   29b56:	dc0e      	bgt.n	29b76 <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   29b58:	2c00      	cmp	r4, #0
   29b5a:	dc08      	bgt.n	29b6e <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   29b5c:	465a      	mov	r2, fp
   29b5e:	4649      	mov	r1, r9
   29b60:	4668      	mov	r0, sp
   29b62:	f00f fe1b 	bl	3979c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   29b66:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   29b68:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   29b6a:	4599      	cmp	r9, r3
   29b6c:	dc28      	bgt.n	29bc0 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   29b6e:	4620      	mov	r0, r4
   29b70:	b011      	add	sp, #68	; 0x44
   29b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   29b76:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   29b78:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   29b7a:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   29b7c:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   29b7e:	da05      	bge.n	29b8c <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   29b80:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   29b82:	f108 0801 	add.w	r8, r8, #1
   29b86:	3608      	adds	r6, #8
   29b88:	3708      	adds	r7, #8
   29b8a:	e7e3      	b.n	29b54 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   29b8c:	2286      	movs	r2, #134	; 0x86
   29b8e:	f7fa f867 	bl	23c60 <z_get_fd_obj>
			if (obj != NULL) {
   29b92:	2300      	movs	r3, #0
   29b94:	492f      	ldr	r1, [pc, #188]	; (29c54 <nrf91_socket_offload_ioctl+0x144>)
   29b96:	b178      	cbz	r0, 29bb8 <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   29b98:	3801      	subs	r0, #1
   29b9a:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   29b9c:	88b8      	ldrh	r0, [r7, #4]
   29b9e:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   29ba0:	bf42      	ittt	mi
   29ba2:	88b2      	ldrhmi	r2, [r6, #4]
   29ba4:	f042 0201 	orrmi.w	r2, r2, #1
   29ba8:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   29baa:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   29bac:	bf42      	ittt	mi
   29bae:	88b2      	ldrhmi	r2, [r6, #4]
   29bb0:	f042 0202 	orrmi.w	r2, r2, #2
   29bb4:	80b2      	strhmi	r2, [r6, #4]
   29bb6:	e7e4      	b.n	29b82 <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   29bb8:	2220      	movs	r2, #32
				retval++;
   29bba:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   29bbc:	80fa      	strh	r2, [r7, #6]
				retval++;
   29bbe:	e7ed      	b.n	29b9c <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   29bc0:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   29bc4:	2a00      	cmp	r2, #0
   29bc6:	db20      	blt.n	29c0a <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   29bc8:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   29bcc:	88d2      	ldrh	r2, [r2, #6]
   29bce:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   29bd0:	bf42      	ittt	mi
   29bd2:	88e9      	ldrhmi	r1, [r5, #6]
   29bd4:	f041 0101 	orrmi.w	r1, r1, #1
   29bd8:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   29bda:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   29bdc:	bf42      	ittt	mi
   29bde:	88e9      	ldrhmi	r1, [r5, #6]
   29be0:	f041 0104 	orrmi.w	r1, r1, #4
   29be4:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   29be6:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   29be8:	bf42      	ittt	mi
   29bea:	88e9      	ldrhmi	r1, [r5, #6]
   29bec:	f041 0108 	orrmi.w	r1, r1, #8
   29bf0:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   29bf2:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   29bf4:	bf42      	ittt	mi
   29bf6:	88e9      	ldrhmi	r1, [r5, #6]
   29bf8:	f041 0120 	orrmi.w	r1, r1, #32
   29bfc:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   29bfe:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   29c00:	bf42      	ittt	mi
   29c02:	88ea      	ldrhmi	r2, [r5, #6]
   29c04:	f042 0210 	orrmi.w	r2, r2, #16
   29c08:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   29c0a:	3301      	adds	r3, #1
   29c0c:	3508      	adds	r5, #8
   29c0e:	e7ac      	b.n	29b6a <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   29c10:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   29c12:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   29c16:	d00b      	beq.n	29c30 <nrf91_socket_offload_ioctl+0x120>
   29c18:	2904      	cmp	r1, #4
   29c1a:	d111      	bne.n	29c40 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   29c1c:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   29c1e:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   29c22:	d10d      	bne.n	29c40 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   29c24:	2101      	movs	r1, #1
   29c26:	1392      	asrs	r2, r2, #14
   29c28:	f00f fdba 	bl	397a0 <nrf_fcntl>
   29c2c:	4604      	mov	r4, r0
		break;
   29c2e:	e79e      	b.n	29b6e <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   29c30:	2200      	movs	r2, #0
   29c32:	2102      	movs	r1, #2
   29c34:	f00f fdb4 	bl	397a0 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   29c38:	0380      	lsls	r0, r0, #14
   29c3a:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   29c3e:	e796      	b.n	29b6e <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   29c40:	f018 fd17 	bl	42672 <__errno>
   29c44:	2316      	movs	r3, #22
	return retval;
   29c46:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   29c4a:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   29c4c:	e78f      	b.n	29b6e <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   29c4e:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   29c52:	e78c      	b.n	29b6e <nrf91_socket_offload_ioctl+0x5e>
   29c54:	00046a48 	.word	0x00046a48

00029c58 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   29c58:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   29c5a:	4b03      	ldr	r3, [pc, #12]	; (29c68 <nrf91_socket_iface_init+0x10>)
   29c5c:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   29c5e:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   29c60:	4802      	ldr	r0, [pc, #8]	; (29c6c <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   29c62:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   29c64:	f7fb bc56 	b.w	25514 <socket_offload_dns_register>
   29c68:	200248d0 	.word	0x200248d0
   29c6c:	00046a40 	.word	0x00046a40

00029c70 <nrf91_socket_offload_accept>:
{
   29c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c74:	b08a      	sub	sp, #40	; 0x28
   29c76:	4607      	mov	r7, r0
   29c78:	460c      	mov	r4, r1
   29c7a:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   29c7c:	f7fa f820 	bl	23cc0 <z_reserve_fd>
   29c80:	4606      	mov	r6, r0
	if (fd < 0) {
   29c82:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   29c84:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   29c88:	da05      	bge.n	29c96 <nrf91_socket_offload_accept+0x26>
	return -1;
   29c8a:	f04f 36ff 	mov.w	r6, #4294967295
}
   29c8e:	4630      	mov	r0, r6
   29c90:	b00a      	add	sp, #40	; 0x28
   29c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   29c96:	b31c      	cbz	r4, 29ce0 <nrf91_socket_offload_accept+0x70>
   29c98:	b32d      	cbz	r5, 29ce6 <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   29c9a:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   29c9c:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   29c9e:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   29ca0:	bf0c      	ite	eq
   29ca2:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   29ca4:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   29ca6:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   29ca8:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   29caa:	4639      	mov	r1, r7
   29cac:	f00f fd12 	bl	396d4 <nrf_accept>
	if (new_sd < 0) {
   29cb0:	f1b0 0800 	subs.w	r8, r0, #0
   29cb4:	dbe9      	blt.n	29c8a <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   29cb6:	b164      	cbz	r4, 29cd2 <nrf91_socket_offload_accept+0x62>
   29cb8:	b15d      	cbz	r5, 29cd2 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   29cba:	687b      	ldr	r3, [r7, #4]
   29cbc:	2b02      	cmp	r3, #2
   29cbe:	d115      	bne.n	29cec <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   29cc0:	2308      	movs	r3, #8
   29cc2:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   29cc4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   29cc8:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   29cca:	2301      	movs	r3, #1
   29ccc:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   29cce:	9b04      	ldr	r3, [sp, #16]
   29cd0:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   29cd2:	4630      	mov	r0, r6
   29cd4:	4a0c      	ldr	r2, [pc, #48]	; (29d08 <nrf91_socket_offload_accept+0x98>)
   29cd6:	f108 0101 	add.w	r1, r8, #1
   29cda:	f7fa f823 	bl	23d24 <z_finalize_fd>
	return fd;
   29cde:	e7d6      	b.n	29c8e <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   29ce0:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   29ce2:	4627      	mov	r7, r4
   29ce4:	e7e1      	b.n	29caa <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   29ce6:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   29ce8:	462f      	mov	r7, r5
   29cea:	e7de      	b.n	29caa <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   29cec:	2b0a      	cmp	r3, #10
   29cee:	d106      	bne.n	29cfe <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   29cf0:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   29cf2:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   29cf4:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   29cf6:	a901      	add	r1, sp, #4
   29cf8:	f01a f803 	bl	43d02 <nrf_to_z_ipv6>
   29cfc:	e7e9      	b.n	29cd2 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   29cfe:	4630      	mov	r0, r6
   29d00:	f7fa f81a 	bl	23d38 <z_free_fd>
   29d04:	e7c1      	b.n	29c8a <nrf91_socket_offload_accept+0x1a>
   29d06:	bf00      	nop
   29d08:	00046a48 	.word	0x00046a48

00029d0c <nrf91_socket_offload_sendmsg>:
{
   29d0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   29d10:	4607      	mov	r7, r0
   29d12:	4690      	mov	r8, r2
	if (msg == NULL) {
   29d14:	460c      	mov	r4, r1
   29d16:	b319      	cbz	r1, 29d60 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   29d18:	2300      	movs	r3, #0
	ssize_t len = 0;
   29d1a:	461a      	mov	r2, r3
   29d1c:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   29d1e:	4283      	cmp	r3, r0
   29d20:	d128      	bne.n	29d74 <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   29d22:	2a80      	cmp	r2, #128	; 0x80
   29d24:	d857      	bhi.n	29dd6 <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   29d26:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   29d28:	f04f 32ff 	mov.w	r2, #4294967295
   29d2c:	f04f 33ff 	mov.w	r3, #4294967295
   29d30:	482a      	ldr	r0, [pc, #168]	; (29ddc <nrf91_socket_offload_sendmsg+0xd0>)
   29d32:	f012 fac3 	bl	3c2bc <z_impl_k_mutex_lock>
		len = 0;
   29d36:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   29d38:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 29de0 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   29d3c:	68e3      	ldr	r3, [r4, #12]
   29d3e:	42ab      	cmp	r3, r5
   29d40:	d81f      	bhi.n	29d82 <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   29d42:	6863      	ldr	r3, [r4, #4]
   29d44:	4632      	mov	r2, r6
   29d46:	9301      	str	r3, [sp, #4]
   29d48:	6823      	ldr	r3, [r4, #0]
   29d4a:	4638      	mov	r0, r7
   29d4c:	9300      	str	r3, [sp, #0]
   29d4e:	4924      	ldr	r1, [pc, #144]	; (29de0 <nrf91_socket_offload_sendmsg+0xd4>)
   29d50:	4643      	mov	r3, r8
   29d52:	f01a f932 	bl	43fba <nrf91_socket_offload_sendto>
   29d56:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   29d58:	4820      	ldr	r0, [pc, #128]	; (29ddc <nrf91_socket_offload_sendmsg+0xd0>)
   29d5a:	f012 fba9 	bl	3c4b0 <z_impl_k_mutex_unlock>
		return ret;
   29d5e:	e005      	b.n	29d6c <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   29d60:	f018 fc87 	bl	42672 <__errno>
   29d64:	2316      	movs	r3, #22
		return -1;
   29d66:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   29d6a:	6003      	str	r3, [r0, #0]
}
   29d6c:	4628      	mov	r0, r5
   29d6e:	b002      	add	sp, #8
   29d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   29d74:	68a1      	ldr	r1, [r4, #8]
   29d76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   29d7a:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   29d7c:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   29d7e:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   29d80:	e7cd      	b.n	29d1e <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   29d82:	68a1      	ldr	r1, [r4, #8]
   29d84:	eb09 0006 	add.w	r0, r9, r6
   29d88:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   29d8c:	685a      	ldr	r2, [r3, #4]
   29d8e:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   29d92:	f01a ffa8 	bl	44ce6 <memcpy>
			len += msg->msg_iov[i].iov_len;
   29d96:	68a3      	ldr	r3, [r4, #8]
   29d98:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   29d9c:	4453      	add	r3, sl
   29d9e:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   29da0:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   29da2:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   29da4:	e7ca      	b.n	29d3c <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   29da6:	68a1      	ldr	r1, [r4, #8]
   29da8:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   29dac:	685a      	ldr	r2, [r3, #4]
   29dae:	b162      	cbz	r2, 29dca <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   29db0:	6863      	ldr	r3, [r4, #4]
   29db2:	4638      	mov	r0, r7
   29db4:	9301      	str	r3, [sp, #4]
   29db6:	6823      	ldr	r3, [r4, #0]
   29db8:	9300      	str	r3, [sp, #0]
   29dba:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   29dbe:	4643      	mov	r3, r8
   29dc0:	f01a f8fb 	bl	43fba <nrf91_socket_offload_sendto>
		if (ret < 0) {
   29dc4:	1e05      	subs	r5, r0, #0
   29dc6:	dbd1      	blt.n	29d6c <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   29dc8:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   29dca:	3601      	adds	r6, #1
   29dcc:	68e3      	ldr	r3, [r4, #12]
   29dce:	42b3      	cmp	r3, r6
   29dd0:	d8e9      	bhi.n	29da6 <nrf91_socket_offload_sendmsg+0x9a>
   29dd2:	464d      	mov	r5, r9
   29dd4:	e7ca      	b.n	29d6c <nrf91_socket_offload_sendmsg+0x60>
   29dd6:	2600      	movs	r6, #0
	len = 0;
   29dd8:	46b1      	mov	r9, r6
   29dda:	e7f7      	b.n	29dcc <nrf91_socket_offload_sendmsg+0xc0>
   29ddc:	20020b6c 	.word	0x20020b6c
   29de0:	2002b120 	.word	0x2002b120

00029de4 <nrf91_socket_create>:
{
   29de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29de6:	4606      	mov	r6, r0
   29de8:	460d      	mov	r5, r1
   29dea:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   29dec:	f7f9 ff68 	bl	23cc0 <z_reserve_fd>
	if (fd < 0) {
   29df0:	1e04      	subs	r4, r0, #0
   29df2:	db0d      	blt.n	29e10 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   29df4:	b2b0      	uxth	r0, r6
   29df6:	f019 fea1 	bl	43b3c <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   29dfa:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   29dfe:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   29e00:	d109      	bne.n	29e16 <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   29e02:	f018 fc36 	bl	42672 <__errno>
   29e06:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   29e08:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   29e0a:	4620      	mov	r0, r4
   29e0c:	f7f9 ff94 	bl	23d38 <z_free_fd>
		return -1;
   29e10:	f04f 34ff 	mov.w	r4, #4294967295
   29e14:	e01b      	b.n	29e4e <nrf91_socket_create+0x6a>
	switch (socktype) {
   29e16:	2d03      	cmp	r5, #3
   29e18:	d003      	beq.n	29e22 <nrf91_socket_create+0x3e>
   29e1a:	2d04      	cmp	r5, #4
   29e1c:	bf08      	it	eq
   29e1e:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   29e22:	4638      	mov	r0, r7
   29e24:	f019 fea6 	bl	43b74 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   29e28:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   29e2c:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   29e2e:	d103      	bne.n	29e38 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   29e30:	f018 fc1f 	bl	42672 <__errno>
   29e34:	237b      	movs	r3, #123	; 0x7b
   29e36:	e7e7      	b.n	29e08 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   29e38:	4629      	mov	r1, r5
   29e3a:	4630      	mov	r0, r6
   29e3c:	f00f fb8a 	bl	39554 <nrf_socket>
	if (sd < 0) {
   29e40:	1e01      	subs	r1, r0, #0
   29e42:	dbe2      	blt.n	29e0a <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   29e44:	4620      	mov	r0, r4
   29e46:	4a03      	ldr	r2, [pc, #12]	; (29e54 <nrf91_socket_create+0x70>)
   29e48:	3101      	adds	r1, #1
   29e4a:	f7f9 ff6b 	bl	23d24 <z_finalize_fd>
}
   29e4e:	4620      	mov	r0, r4
   29e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29e52:	bf00      	nop
   29e54:	00046a48 	.word	0x00046a48

00029e58 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   29e58:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   29e5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   29e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   29e64:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   29e68:	4605      	mov	r5, r0
   29e6a:	460e      	mov	r6, r1
   29e6c:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   29e6e:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   29e72:	d15f      	bne.n	29f34 <z_impl_gpio_pin_interrupt_configure+0xdc>
   29e74:	4937      	ldr	r1, [pc, #220]	; (29f54 <z_impl_gpio_pin_interrupt_configure+0xfc>)
   29e76:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   29e7a:	4a37      	ldr	r2, [pc, #220]	; (29f58 <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e7c:	4837      	ldr	r0, [pc, #220]	; (29f5c <z_impl_gpio_pin_interrupt_configure+0x104>)
   29e7e:	f017 faa1 	bl	413c4 <printk>
   29e82:	4837      	ldr	r0, [pc, #220]	; (29f60 <z_impl_gpio_pin_interrupt_configure+0x108>)
   29e84:	f017 fa9e 	bl	413c4 <printk>
   29e88:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   29e8c:	4832      	ldr	r0, [pc, #200]	; (29f58 <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e8e:	f017 fcb6 	bl	417fe <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   29e92:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   29e96:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   29e9a:	d10e      	bne.n	29eba <z_impl_gpio_pin_interrupt_configure+0x62>
   29e9c:	4931      	ldr	r1, [pc, #196]	; (29f64 <z_impl_gpio_pin_interrupt_configure+0x10c>)
   29e9e:	f240 13f1 	movw	r3, #497	; 0x1f1
   29ea2:	4a2d      	ldr	r2, [pc, #180]	; (29f58 <z_impl_gpio_pin_interrupt_configure+0x100>)
   29ea4:	482d      	ldr	r0, [pc, #180]	; (29f5c <z_impl_gpio_pin_interrupt_configure+0x104>)
   29ea6:	f017 fa8d 	bl	413c4 <printk>
   29eaa:	482f      	ldr	r0, [pc, #188]	; (29f68 <z_impl_gpio_pin_interrupt_configure+0x110>)
   29eac:	f017 fa8a 	bl	413c4 <printk>
   29eb0:	f240 11f1 	movw	r1, #497	; 0x1f1
   29eb4:	4828      	ldr	r0, [pc, #160]	; (29f58 <z_impl_gpio_pin_interrupt_configure+0x100>)
   29eb6:	f017 fca2 	bl	417fe <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   29eba:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   29ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   29ec2:	d10e      	bne.n	29ee2 <z_impl_gpio_pin_interrupt_configure+0x8a>
   29ec4:	4929      	ldr	r1, [pc, #164]	; (29f6c <z_impl_gpio_pin_interrupt_configure+0x114>)
   29ec6:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   29eca:	4a23      	ldr	r2, [pc, #140]	; (29f58 <z_impl_gpio_pin_interrupt_configure+0x100>)
   29ecc:	4823      	ldr	r0, [pc, #140]	; (29f5c <z_impl_gpio_pin_interrupt_configure+0x104>)
   29ece:	f017 fa79 	bl	413c4 <printk>
   29ed2:	4827      	ldr	r0, [pc, #156]	; (29f70 <z_impl_gpio_pin_interrupt_configure+0x118>)
   29ed4:	f017 fa76 	bl	413c4 <printk>
   29ed8:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   29edc:	481e      	ldr	r0, [pc, #120]	; (29f58 <z_impl_gpio_pin_interrupt_configure+0x100>)
   29ede:	f017 fc8e 	bl	417fe <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29ee2:	2701      	movs	r7, #1
   29ee4:	f8da 3000 	ldr.w	r3, [sl]
   29ee8:	40b7      	lsls	r7, r6
   29eea:	421f      	tst	r7, r3
   29eec:	d10e      	bne.n	29f0c <z_impl_gpio_pin_interrupt_configure+0xb4>
   29eee:	4921      	ldr	r1, [pc, #132]	; (29f74 <z_impl_gpio_pin_interrupt_configure+0x11c>)
   29ef0:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   29ef4:	4a18      	ldr	r2, [pc, #96]	; (29f58 <z_impl_gpio_pin_interrupt_configure+0x100>)
   29ef6:	4819      	ldr	r0, [pc, #100]	; (29f5c <z_impl_gpio_pin_interrupt_configure+0x104>)
   29ef8:	f017 fa64 	bl	413c4 <printk>
   29efc:	481e      	ldr	r0, [pc, #120]	; (29f78 <z_impl_gpio_pin_interrupt_configure+0x120>)
   29efe:	f017 fa61 	bl	413c4 <printk>
   29f02:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   29f06:	4814      	ldr	r0, [pc, #80]	; (29f58 <z_impl_gpio_pin_interrupt_configure+0x100>)
   29f08:	f017 fc79 	bl	417fe <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   29f0c:	0423      	lsls	r3, r4, #16
   29f0e:	d505      	bpl.n	29f1c <z_impl_gpio_pin_interrupt_configure+0xc4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   29f10:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   29f14:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   29f16:	bf18      	it	ne
   29f18:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   29f1c:	f8d8 7018 	ldr.w	r7, [r8, #24]
   29f20:	4631      	mov	r1, r6
   29f22:	4628      	mov	r0, r5
   29f24:	46bc      	mov	ip, r7
   29f26:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   29f2a:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   29f2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   29f32:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   29f34:	2b00      	cmp	r3, #0
   29f36:	d1ac      	bne.n	29e92 <z_impl_gpio_pin_interrupt_configure+0x3a>
   29f38:	4910      	ldr	r1, [pc, #64]	; (29f7c <z_impl_gpio_pin_interrupt_configure+0x124>)
   29f3a:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
   29f3e:	4a06      	ldr	r2, [pc, #24]	; (29f58 <z_impl_gpio_pin_interrupt_configure+0x100>)
   29f40:	4806      	ldr	r0, [pc, #24]	; (29f5c <z_impl_gpio_pin_interrupt_configure+0x104>)
   29f42:	f017 fa3f 	bl	413c4 <printk>
   29f46:	480e      	ldr	r0, [pc, #56]	; (29f80 <z_impl_gpio_pin_interrupt_configure+0x128>)
   29f48:	f017 fa3c 	bl	413c4 <printk>
   29f4c:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   29f50:	e79c      	b.n	29e8c <z_impl_gpio_pin_interrupt_configure+0x34>
   29f52:	bf00      	nop
   29f54:	00049ff5 	.word	0x00049ff5
   29f58:	00049fcb 	.word	0x00049fcb
   29f5c:	00048156 	.word	0x00048156
   29f60:	0004a036 	.word	0x0004a036
   29f64:	0004a0b7 	.word	0x0004a0b7
   29f68:	0004a138 	.word	0x0004a138
   29f6c:	0004a18c 	.word	0x0004a18c
   29f70:	0004a1d6 	.word	0x0004a1d6
   29f74:	0004a21b 	.word	0x0004a21b
   29f78:	0004a259 	.word	0x0004a259
   29f7c:	0004a062 	.word	0x0004a062
   29f80:	0004a08c 	.word	0x0004a08c

00029f84 <gpio_pin_configure>:
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(const struct device *port,
				     gpio_pin_t pin,
				     gpio_flags_t flags)
{
   29f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29f88:	2501      	movs	r5, #1
   29f8a:	6843      	ldr	r3, [r0, #4]
   29f8c:	408d      	lsls	r5, r1
   29f8e:	681b      	ldr	r3, [r3, #0]
{
   29f90:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29f92:	421d      	tst	r5, r3
{
   29f94:	460e      	mov	r6, r1
   29f96:	4690      	mov	r8, r2
	struct gpio_driver_data *data =
   29f98:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29f9a:	d10e      	bne.n	29fba <gpio_pin_configure+0x36>
   29f9c:	490d      	ldr	r1, [pc, #52]	; (29fd4 <gpio_pin_configure+0x50>)
   29f9e:	f44f 7311 	mov.w	r3, #580	; 0x244
   29fa2:	4a0d      	ldr	r2, [pc, #52]	; (29fd8 <gpio_pin_configure+0x54>)
   29fa4:	480d      	ldr	r0, [pc, #52]	; (29fdc <gpio_pin_configure+0x58>)
   29fa6:	f017 fa0d 	bl	413c4 <printk>
   29faa:	480d      	ldr	r0, [pc, #52]	; (29fe0 <gpio_pin_configure+0x5c>)
   29fac:	f017 fa0a 	bl	413c4 <printk>
   29fb0:	f44f 7111 	mov.w	r1, #580	; 0x244
   29fb4:	4808      	ldr	r0, [pc, #32]	; (29fd8 <gpio_pin_configure+0x54>)
   29fb6:	f017 fc22 	bl	417fe <assert_post_action>
	return api->pin_configure(port, pin, flags);
   29fba:	68a3      	ldr	r3, [r4, #8]
   29fbc:	4642      	mov	r2, r8
   29fbe:	4631      	mov	r1, r6
   29fc0:	4620      	mov	r0, r4
   29fc2:	681b      	ldr	r3, [r3, #0]
   29fc4:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   29fc6:	b918      	cbnz	r0, 29fd0 <gpio_pin_configure+0x4c>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   29fc8:	683b      	ldr	r3, [r7, #0]
   29fca:	ea23 0505 	bic.w	r5, r3, r5
   29fce:	603d      	str	r5, [r7, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
   29fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29fd4:	0004a21b 	.word	0x0004a21b
   29fd8:	00049fcb 	.word	0x00049fcb
   29fdc:	00048156 	.word	0x00048156
   29fe0:	0004a259 	.word	0x0004a259

00029fe4 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   29fe4:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29fe6:	2501      	movs	r5, #1
   29fe8:	6843      	ldr	r3, [r0, #4]
   29fea:	408d      	lsls	r5, r1
   29fec:	681b      	ldr	r3, [r3, #0]
{
   29fee:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29ff0:	421d      	tst	r5, r3
{
   29ff2:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29ff4:	d10e      	bne.n	2a014 <gpio_pin_set_raw+0x30>
   29ff6:	490d      	ldr	r1, [pc, #52]	; (2a02c <gpio_pin_set_raw+0x48>)
   29ff8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
   29ffc:	4a0c      	ldr	r2, [pc, #48]	; (2a030 <gpio_pin_set_raw+0x4c>)
   29ffe:	480d      	ldr	r0, [pc, #52]	; (2a034 <gpio_pin_set_raw+0x50>)
   2a000:	f017 f9e0 	bl	413c4 <printk>
   2a004:	480c      	ldr	r0, [pc, #48]	; (2a038 <gpio_pin_set_raw+0x54>)
   2a006:	f017 f9dd 	bl	413c4 <printk>
   2a00a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   2a00e:	4808      	ldr	r0, [pc, #32]	; (2a030 <gpio_pin_set_raw+0x4c>)
   2a010:	f017 fbf5 	bl	417fe <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   2a014:	b136      	cbz	r6, 2a024 <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
   2a016:	68a3      	ldr	r3, [r4, #8]
   2a018:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2a01a:	4629      	mov	r1, r5
   2a01c:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   2a01e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   2a022:	4718      	bx	r3
   2a024:	68a3      	ldr	r3, [r4, #8]
   2a026:	691b      	ldr	r3, [r3, #16]
   2a028:	e7f7      	b.n	2a01a <gpio_pin_set_raw+0x36>
   2a02a:	bf00      	nop
   2a02c:	0004a21b 	.word	0x0004a21b
   2a030:	00049fcb 	.word	0x00049fcb
   2a034:	00048156 	.word	0x00048156
   2a038:	0004a259 	.word	0x0004a259

0002a03c <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   2a03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a040:	4606      	mov	r6, r0
   2a042:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2a044:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   2a046:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2a0a4 <dk_set_leds_state.part.0+0x68>
   2a04a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 2a0a8 <dk_set_leds_state.part.0+0x6c>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   2a04e:	fa26 f204 	lsr.w	r2, r6, r4
   2a052:	fa27 f304 	lsr.w	r3, r7, r4
   2a056:	4313      	orrs	r3, r2
   2a058:	07db      	lsls	r3, r3, #31
   2a05a:	d517      	bpl.n	2a08c <dk_set_leds_state.part.0+0x50>
			int err = gpio_pin_set_raw(led_devs[i],
   2a05c:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   2a060:	7919      	ldrb	r1, [r3, #4]
   2a062:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   2a066:	f002 0201 	and.w	r2, r2, #1
   2a06a:	f7ff ffbb 	bl	29fe4 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   2a06e:	4605      	mov	r5, r0
   2a070:	b160      	cbz	r0, 2a08c <dk_set_leds_state.part.0+0x50>
   2a072:	4809      	ldr	r0, [pc, #36]	; (2a098 <dk_set_leds_state.part.0+0x5c>)
   2a074:	4b09      	ldr	r3, [pc, #36]	; (2a09c <dk_set_leds_state.part.0+0x60>)
				LOG_ERR("Cannot write LED gpio");
   2a076:	490a      	ldr	r1, [pc, #40]	; (2a0a0 <dk_set_leds_state.part.0+0x64>)
   2a078:	1a1b      	subs	r3, r3, r0
   2a07a:	08db      	lsrs	r3, r3, #3
   2a07c:	019b      	lsls	r3, r3, #6
   2a07e:	f043 0001 	orr.w	r0, r3, #1
   2a082:	f017 fbcd 	bl	41820 <log_string_sync>
			}
		}
	}

	return 0;
}
   2a086:	4628      	mov	r0, r5
   2a088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2a08c:	3401      	adds	r4, #1
   2a08e:	2c04      	cmp	r4, #4
   2a090:	d1dd      	bne.n	2a04e <dk_set_leds_state.part.0+0x12>
	return 0;
   2a092:	2500      	movs	r5, #0
   2a094:	e7f7      	b.n	2a086 <dk_set_leds_state.part.0+0x4a>
   2a096:	bf00      	nop
   2a098:	000463bc 	.word	0x000463bc
   2a09c:	00046434 	.word	0x00046434
   2a0a0:	0004a26b 	.word	0x0004a26b
   2a0a4:	00046aa0 	.word	0x00046aa0
   2a0a8:	20024918 	.word	0x20024918

0002a0ac <button_pressed>:
{
   2a0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2a0ae:	f04f 0320 	mov.w	r3, #32
   2a0b2:	f3ef 8511 	mrs	r5, BASEPRI
   2a0b6:	f383 8811 	msr	BASEPRI, r3
   2a0ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a0be:	4830      	ldr	r0, [pc, #192]	; (2a180 <button_pressed+0xd4>)
   2a0c0:	f013 ff3a 	bl	3df38 <z_spin_lock_valid>
   2a0c4:	b968      	cbnz	r0, 2a0e2 <button_pressed+0x36>
   2a0c6:	235c      	movs	r3, #92	; 0x5c
   2a0c8:	4a2e      	ldr	r2, [pc, #184]	; (2a184 <button_pressed+0xd8>)
   2a0ca:	492f      	ldr	r1, [pc, #188]	; (2a188 <button_pressed+0xdc>)
   2a0cc:	482f      	ldr	r0, [pc, #188]	; (2a18c <button_pressed+0xe0>)
   2a0ce:	f017 f979 	bl	413c4 <printk>
   2a0d2:	492b      	ldr	r1, [pc, #172]	; (2a180 <button_pressed+0xd4>)
   2a0d4:	482e      	ldr	r0, [pc, #184]	; (2a190 <button_pressed+0xe4>)
   2a0d6:	f017 f975 	bl	413c4 <printk>
   2a0da:	215c      	movs	r1, #92	; 0x5c
   2a0dc:	4829      	ldr	r0, [pc, #164]	; (2a184 <button_pressed+0xd8>)
   2a0de:	f017 fb8e 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   2a0e2:	4827      	ldr	r0, [pc, #156]	; (2a180 <button_pressed+0xd4>)
   2a0e4:	f013 ff46 	bl	3df74 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2a0e8:	2400      	movs	r4, #0
   2a0ea:	4e2a      	ldr	r6, [pc, #168]	; (2a194 <button_pressed+0xe8>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   2a0ec:	4f2a      	ldr	r7, [pc, #168]	; (2a198 <button_pressed+0xec>)
   2a0ee:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   2a0f2:	f856 0b04 	ldr.w	r0, [r6], #4
   2a0f6:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   2a0f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2a0fc:	3401      	adds	r4, #1
   2a0fe:	f7ff feab 	bl	29e58 <z_impl_gpio_pin_interrupt_configure>
   2a102:	2c04      	cmp	r4, #4
   2a104:	d00c      	beq.n	2a120 <button_pressed+0x74>
   2a106:	2800      	cmp	r0, #0
   2a108:	d0f1      	beq.n	2a0ee <button_pressed+0x42>
   2a10a:	4b24      	ldr	r3, [pc, #144]	; (2a19c <button_pressed+0xf0>)
   2a10c:	4824      	ldr	r0, [pc, #144]	; (2a1a0 <button_pressed+0xf4>)
		LOG_ERR("Cannot disable callbacks");
   2a10e:	4925      	ldr	r1, [pc, #148]	; (2a1a4 <button_pressed+0xf8>)
   2a110:	1ac0      	subs	r0, r0, r3
   2a112:	08c0      	lsrs	r0, r0, #3
   2a114:	0180      	lsls	r0, r0, #6
   2a116:	f040 0001 	orr.w	r0, r0, #1
   2a11a:	f017 fb81 	bl	41820 <log_string_sync>
   2a11e:	e001      	b.n	2a124 <button_pressed+0x78>
	if (err) {
   2a120:	2800      	cmp	r0, #0
   2a122:	d1f2      	bne.n	2a10a <button_pressed+0x5e>
	switch (state) {
   2a124:	4b20      	ldr	r3, [pc, #128]	; (2a1a8 <button_pressed+0xfc>)
   2a126:	781a      	ldrb	r2, [r3, #0]
   2a128:	b9f2      	cbnz	r2, 2a168 <button_pressed+0xbc>
		state = STATE_SCANNING;
   2a12a:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2a12c:	491f      	ldr	r1, [pc, #124]	; (2a1ac <button_pressed+0x100>)
   2a12e:	701a      	strb	r2, [r3, #0]
   2a130:	481f      	ldr	r0, [pc, #124]	; (2a1b0 <button_pressed+0x104>)
   2a132:	2221      	movs	r2, #33	; 0x21
   2a134:	2300      	movs	r3, #0
   2a136:	f013 ff4d 	bl	3dfd4 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a13a:	4811      	ldr	r0, [pc, #68]	; (2a180 <button_pressed+0xd4>)
   2a13c:	f013 ff0a 	bl	3df54 <z_spin_unlock_valid>
   2a140:	b968      	cbnz	r0, 2a15e <button_pressed+0xb2>
   2a142:	2384      	movs	r3, #132	; 0x84
   2a144:	4a0f      	ldr	r2, [pc, #60]	; (2a184 <button_pressed+0xd8>)
   2a146:	491b      	ldr	r1, [pc, #108]	; (2a1b4 <button_pressed+0x108>)
   2a148:	4810      	ldr	r0, [pc, #64]	; (2a18c <button_pressed+0xe0>)
   2a14a:	f017 f93b 	bl	413c4 <printk>
   2a14e:	490c      	ldr	r1, [pc, #48]	; (2a180 <button_pressed+0xd4>)
   2a150:	4819      	ldr	r0, [pc, #100]	; (2a1b8 <button_pressed+0x10c>)
   2a152:	f017 f937 	bl	413c4 <printk>
   2a156:	2184      	movs	r1, #132	; 0x84
   2a158:	480a      	ldr	r0, [pc, #40]	; (2a184 <button_pressed+0xd8>)
   2a15a:	f017 fb50 	bl	417fe <assert_post_action>
	__asm__ volatile(
   2a15e:	f385 8811 	msr	BASEPRI, r5
   2a162:	f3bf 8f6f 	isb	sy
}
   2a166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   2a168:	23eb      	movs	r3, #235	; 0xeb
   2a16a:	4a14      	ldr	r2, [pc, #80]	; (2a1bc <button_pressed+0x110>)
   2a16c:	4914      	ldr	r1, [pc, #80]	; (2a1c0 <button_pressed+0x114>)
   2a16e:	4807      	ldr	r0, [pc, #28]	; (2a18c <button_pressed+0xe0>)
   2a170:	f017 f928 	bl	413c4 <printk>
   2a174:	21eb      	movs	r1, #235	; 0xeb
   2a176:	4811      	ldr	r0, [pc, #68]	; (2a1bc <button_pressed+0x110>)
   2a178:	f017 fb41 	bl	417fe <assert_post_action>
		break;
   2a17c:	e7dd      	b.n	2a13a <button_pressed+0x8e>
   2a17e:	bf00      	nop
   2a180:	20024928 	.word	0x20024928
   2a184:	000488fa 	.word	0x000488fa
   2a188:	00048920 	.word	0x00048920
   2a18c:	00048156 	.word	0x00048156
   2a190:	00048935 	.word	0x00048935
   2a194:	200248d4 	.word	0x200248d4
   2a198:	00046a80 	.word	0x00046a80
   2a19c:	000463bc 	.word	0x000463bc
   2a1a0:	00046434 	.word	0x00046434
   2a1a4:	0004a281 	.word	0x0004a281
   2a1a8:	2002b1a0 	.word	0x2002b1a0
   2a1ac:	20021988 	.word	0x20021988
   2a1b0:	200244f8 	.word	0x200244f8
   2a1b4:	0004894d 	.word	0x0004894d
   2a1b8:	00048964 	.word	0x00048964
   2a1bc:	0004a29a 	.word	0x0004a29a
   2a1c0:	0004ef58 	.word	0x0004ef58

0002a1c4 <buttons_scan_fn>:
{
   2a1c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   2a1c8:	2400      	movs	r4, #0
   2a1ca:	4e7a      	ldr	r6, [pc, #488]	; (2a3b4 <buttons_scan_fn+0x1f0>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a1cc:	4625      	mov	r5, r4
{
   2a1ce:	46b2      	mov	sl, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   2a1d0:	f8df b208 	ldr.w	fp, [pc, #520]	; 2a3dc <buttons_scan_fn+0x218>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2a1d4:	4f78      	ldr	r7, [pc, #480]	; (2a3b8 <buttons_scan_fn+0x1f4>)
   2a1d6:	f04f 0801 	mov.w	r8, #1
   2a1da:	eb0b 03c5 	add.w	r3, fp, r5, lsl #3
   2a1de:	791b      	ldrb	r3, [r3, #4]
   2a1e0:	f85a 9b04 	ldr.w	r9, [sl], #4
   2a1e4:	fa08 f803 	lsl.w	r8, r8, r3
   2a1e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2a1ec:	681b      	ldr	r3, [r3, #0]
   2a1ee:	ea18 0f03 	tst.w	r8, r3
   2a1f2:	d10e      	bne.n	2a212 <buttons_scan_fn+0x4e>
   2a1f4:	4971      	ldr	r1, [pc, #452]	; (2a3bc <buttons_scan_fn+0x1f8>)
   2a1f6:	f44f 735e 	mov.w	r3, #888	; 0x378
   2a1fa:	463a      	mov	r2, r7
   2a1fc:	4870      	ldr	r0, [pc, #448]	; (2a3c0 <buttons_scan_fn+0x1fc>)
   2a1fe:	f017 f8e1 	bl	413c4 <printk>
   2a202:	4870      	ldr	r0, [pc, #448]	; (2a3c4 <buttons_scan_fn+0x200>)
   2a204:	f017 f8de 	bl	413c4 <printk>
   2a208:	f44f 715e 	mov.w	r1, #888	; 0x378
   2a20c:	4638      	mov	r0, r7
   2a20e:	f017 faf6 	bl	417fe <assert_post_action>
	return api->port_get_raw(port, value);
   2a212:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2a216:	4648      	mov	r0, r9
   2a218:	685b      	ldr	r3, [r3, #4]
   2a21a:	a901      	add	r1, sp, #4
   2a21c:	4798      	blx	r3
	if (ret == 0) {
   2a21e:	2800      	cmp	r0, #0
   2a220:	d17c      	bne.n	2a31c <buttons_scan_fn+0x158>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   2a222:	9b01      	ldr	r3, [sp, #4]
   2a224:	ea18 0f03 	tst.w	r8, r3
   2a228:	d003      	beq.n	2a232 <buttons_scan_fn+0x6e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a22a:	3501      	adds	r5, #1
   2a22c:	2d04      	cmp	r5, #4
   2a22e:	d1d2      	bne.n	2a1d6 <buttons_scan_fn+0x12>
   2a230:	e080      	b.n	2a334 <buttons_scan_fn+0x170>
			ret |= 1U << i;
   2a232:	2301      	movs	r3, #1
   2a234:	40ab      	lsls	r3, r5
   2a236:	431c      	orrs	r4, r3
   2a238:	e7f7      	b.n	2a22a <buttons_scan_fn+0x66>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2a23a:	3d04      	subs	r5, #4
   2a23c:	2d00      	cmp	r5, #0
   2a23e:	f000 809c 	beq.w	2a37a <buttons_scan_fn+0x1b6>
			handler->cb(button_state, has_changed);
   2a242:	46aa      	mov	sl, r5
   2a244:	f85a 3b04 	ldr.w	r3, [sl], #4
   2a248:	4641      	mov	r1, r8
   2a24a:	4620      	mov	r0, r4
   2a24c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a24e:	f1ba 0f00 	cmp.w	sl, #0
   2a252:	f000 8092 	beq.w	2a37a <buttons_scan_fn+0x1b6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a256:	686d      	ldr	r5, [r5, #4]
	return node->next;
   2a258:	e08c      	b.n	2a374 <buttons_scan_fn+0x1b0>
		initial_run = false;
   2a25a:	2200      	movs	r2, #0
   2a25c:	701a      	strb	r2, [r3, #0]
   2a25e:	e08f      	b.n	2a380 <buttons_scan_fn+0x1bc>
	__asm__ volatile(
   2a260:	f04f 0320 	mov.w	r3, #32
   2a264:	f3ef 8811 	mrs	r8, BASEPRI
   2a268:	f383 8811 	msr	BASEPRI, r3
   2a26c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a270:	4855      	ldr	r0, [pc, #340]	; (2a3c8 <buttons_scan_fn+0x204>)
   2a272:	f013 fe61 	bl	3df38 <z_spin_lock_valid>
   2a276:	b968      	cbnz	r0, 2a294 <buttons_scan_fn+0xd0>
   2a278:	235c      	movs	r3, #92	; 0x5c
   2a27a:	4a54      	ldr	r2, [pc, #336]	; (2a3cc <buttons_scan_fn+0x208>)
   2a27c:	4954      	ldr	r1, [pc, #336]	; (2a3d0 <buttons_scan_fn+0x20c>)
   2a27e:	4850      	ldr	r0, [pc, #320]	; (2a3c0 <buttons_scan_fn+0x1fc>)
   2a280:	f017 f8a0 	bl	413c4 <printk>
   2a284:	4950      	ldr	r1, [pc, #320]	; (2a3c8 <buttons_scan_fn+0x204>)
   2a286:	4853      	ldr	r0, [pc, #332]	; (2a3d4 <buttons_scan_fn+0x210>)
   2a288:	f017 f89c 	bl	413c4 <printk>
   2a28c:	215c      	movs	r1, #92	; 0x5c
   2a28e:	484f      	ldr	r0, [pc, #316]	; (2a3cc <buttons_scan_fn+0x208>)
   2a290:	f017 fab5 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   2a294:	484c      	ldr	r0, [pc, #304]	; (2a3c8 <buttons_scan_fn+0x204>)
   2a296:	f013 fe6d 	bl	3df74 <z_spin_lock_set_owner>
		switch (state) {
   2a29a:	4b4f      	ldr	r3, [pc, #316]	; (2a3d8 <buttons_scan_fn+0x214>)
   2a29c:	781a      	ldrb	r2, [r3, #0]
   2a29e:	2a01      	cmp	r2, #1
   2a2a0:	d130      	bne.n	2a304 <buttons_scan_fn+0x140>
			state = STATE_WAITING;
   2a2a2:	2200      	movs	r2, #0
   2a2a4:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   2a2a6:	4b4d      	ldr	r3, [pc, #308]	; (2a3dc <buttons_scan_fn+0x218>)
   2a2a8:	f856 0b04 	ldr.w	r0, [r6], #4
   2a2ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2a2b0:	7919      	ldrb	r1, [r3, #4]
   2a2b2:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   2a2b6:	f7ff fdcf 	bl	29e58 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2a2ba:	3401      	adds	r4, #1
   2a2bc:	2c04      	cmp	r4, #4
   2a2be:	4605      	mov	r5, r0
   2a2c0:	d001      	beq.n	2a2c6 <buttons_scan_fn+0x102>
   2a2c2:	2800      	cmp	r0, #0
   2a2c4:	d0ef      	beq.n	2a2a6 <buttons_scan_fn+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a2c6:	4840      	ldr	r0, [pc, #256]	; (2a3c8 <buttons_scan_fn+0x204>)
   2a2c8:	f013 fe44 	bl	3df54 <z_spin_unlock_valid>
   2a2cc:	b968      	cbnz	r0, 2a2ea <buttons_scan_fn+0x126>
   2a2ce:	2384      	movs	r3, #132	; 0x84
   2a2d0:	4a3e      	ldr	r2, [pc, #248]	; (2a3cc <buttons_scan_fn+0x208>)
   2a2d2:	4943      	ldr	r1, [pc, #268]	; (2a3e0 <buttons_scan_fn+0x21c>)
   2a2d4:	483a      	ldr	r0, [pc, #232]	; (2a3c0 <buttons_scan_fn+0x1fc>)
   2a2d6:	f017 f875 	bl	413c4 <printk>
   2a2da:	493b      	ldr	r1, [pc, #236]	; (2a3c8 <buttons_scan_fn+0x204>)
   2a2dc:	4841      	ldr	r0, [pc, #260]	; (2a3e4 <buttons_scan_fn+0x220>)
   2a2de:	f017 f871 	bl	413c4 <printk>
   2a2e2:	2184      	movs	r1, #132	; 0x84
   2a2e4:	4839      	ldr	r0, [pc, #228]	; (2a3cc <buttons_scan_fn+0x208>)
   2a2e6:	f017 fa8a 	bl	417fe <assert_post_action>
	__asm__ volatile(
   2a2ea:	f388 8811 	msr	BASEPRI, r8
   2a2ee:	f3bf 8f6f 	isb	sy
		if (err) {
   2a2f2:	2d00      	cmp	r5, #0
   2a2f4:	d05a      	beq.n	2a3ac <buttons_scan_fn+0x1e8>
   2a2f6:	483c      	ldr	r0, [pc, #240]	; (2a3e8 <buttons_scan_fn+0x224>)
   2a2f8:	4b3c      	ldr	r3, [pc, #240]	; (2a3ec <buttons_scan_fn+0x228>)
			LOG_ERR("Cannot enable callbacks");
   2a2fa:	493d      	ldr	r1, [pc, #244]	; (2a3f0 <buttons_scan_fn+0x22c>)
   2a2fc:	1ac0      	subs	r0, r0, r3
   2a2fe:	08c0      	lsrs	r0, r0, #3
   2a300:	0180      	lsls	r0, r0, #6
   2a302:	e04f      	b.n	2a3a4 <buttons_scan_fn+0x1e0>
			__ASSERT_NO_MSG(false);
   2a304:	23b4      	movs	r3, #180	; 0xb4
   2a306:	4a3b      	ldr	r2, [pc, #236]	; (2a3f4 <buttons_scan_fn+0x230>)
   2a308:	493b      	ldr	r1, [pc, #236]	; (2a3f8 <buttons_scan_fn+0x234>)
   2a30a:	482d      	ldr	r0, [pc, #180]	; (2a3c0 <buttons_scan_fn+0x1fc>)
   2a30c:	f017 f85a 	bl	413c4 <printk>
   2a310:	21b4      	movs	r1, #180	; 0xb4
   2a312:	4838      	ldr	r0, [pc, #224]	; (2a3f4 <buttons_scan_fn+0x230>)
   2a314:	f017 fa73 	bl	417fe <assert_post_action>
		int err = 0;
   2a318:	2500      	movs	r5, #0
			break;
   2a31a:	e7d4      	b.n	2a2c6 <buttons_scan_fn+0x102>
		if (val < 0) {
   2a31c:	da85      	bge.n	2a22a <buttons_scan_fn+0x66>
   2a31e:	4b33      	ldr	r3, [pc, #204]	; (2a3ec <buttons_scan_fn+0x228>)
   2a320:	4831      	ldr	r0, [pc, #196]	; (2a3e8 <buttons_scan_fn+0x224>)
			LOG_ERR("Cannot read gpio pin");
   2a322:	4936      	ldr	r1, [pc, #216]	; (2a3fc <buttons_scan_fn+0x238>)
   2a324:	1ac0      	subs	r0, r0, r3
   2a326:	08c0      	lsrs	r0, r0, #3
   2a328:	0180      	lsls	r0, r0, #6
   2a32a:	f040 0001 	orr.w	r0, r0, #1
   2a32e:	f017 fa77 	bl	41820 <log_string_sync>
			return 0;
   2a332:	2400      	movs	r4, #0
   2a334:	4b32      	ldr	r3, [pc, #200]	; (2a400 <buttons_scan_fn+0x23c>)
   2a336:	e8d3 2fef 	ldaex	r2, [r3]
   2a33a:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2a33e:	2900      	cmp	r1, #0
   2a340:	d1f9      	bne.n	2a336 <buttons_scan_fn+0x172>
	if (!initial_run) {
   2a342:	4b30      	ldr	r3, [pc, #192]	; (2a404 <buttons_scan_fn+0x240>)
   2a344:	4f30      	ldr	r7, [pc, #192]	; (2a408 <buttons_scan_fn+0x244>)
   2a346:	781a      	ldrb	r2, [r3, #0]
   2a348:	2a00      	cmp	r2, #0
   2a34a:	d186      	bne.n	2a25a <buttons_scan_fn+0x96>
		if (button_scan != last_button_scan) {
   2a34c:	6839      	ldr	r1, [r7, #0]
   2a34e:	42a1      	cmp	r1, r4
   2a350:	d016      	beq.n	2a380 <buttons_scan_fn+0x1bc>
	if (button_handler_cb != NULL) {
   2a352:	4b2e      	ldr	r3, [pc, #184]	; (2a40c <buttons_scan_fn+0x248>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   2a354:	ea81 0804 	eor.w	r8, r1, r4
	if (button_handler_cb != NULL) {
   2a358:	681b      	ldr	r3, [r3, #0]
   2a35a:	b113      	cbz	r3, 2a362 <buttons_scan_fn+0x19e>
		button_handler_cb(button_state, has_changed);
   2a35c:	4641      	mov	r1, r8
   2a35e:	4620      	mov	r0, r4
   2a360:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2a362:	f04f 33ff 	mov.w	r3, #4294967295
   2a366:	f04f 32ff 	mov.w	r2, #4294967295
   2a36a:	4829      	ldr	r0, [pc, #164]	; (2a410 <buttons_scan_fn+0x24c>)
   2a36c:	f011 ffa6 	bl	3c2bc <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2a370:	4b28      	ldr	r3, [pc, #160]	; (2a414 <buttons_scan_fn+0x250>)
   2a372:	681d      	ldr	r5, [r3, #0]
   2a374:	2d00      	cmp	r5, #0
   2a376:	f47f af60 	bne.w	2a23a <buttons_scan_fn+0x76>
	return z_impl_k_mutex_unlock(mutex);
   2a37a:	4825      	ldr	r0, [pc, #148]	; (2a410 <buttons_scan_fn+0x24c>)
   2a37c:	f012 f898 	bl	3c4b0 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   2a380:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   2a382:	2c00      	cmp	r4, #0
   2a384:	f43f af6c 	beq.w	2a260 <buttons_scan_fn+0x9c>
   2a388:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2a38c:	2300      	movs	r3, #0
   2a38e:	4922      	ldr	r1, [pc, #136]	; (2a418 <buttons_scan_fn+0x254>)
   2a390:	4822      	ldr	r0, [pc, #136]	; (2a41c <buttons_scan_fn+0x258>)
   2a392:	f013 fe1f 	bl	3dfd4 <k_delayed_work_submit_to_queue>
		if (err) {
   2a396:	b148      	cbz	r0, 2a3ac <buttons_scan_fn+0x1e8>
   2a398:	4813      	ldr	r0, [pc, #76]	; (2a3e8 <buttons_scan_fn+0x224>)
   2a39a:	4b14      	ldr	r3, [pc, #80]	; (2a3ec <buttons_scan_fn+0x228>)
			LOG_ERR("Cannot add work to workqueue");
   2a39c:	4920      	ldr	r1, [pc, #128]	; (2a420 <buttons_scan_fn+0x25c>)
   2a39e:	1ac0      	subs	r0, r0, r3
   2a3a0:	08c0      	lsrs	r0, r0, #3
   2a3a2:	0180      	lsls	r0, r0, #6
			LOG_ERR("Cannot enable callbacks");
   2a3a4:	f040 0001 	orr.w	r0, r0, #1
   2a3a8:	f017 fa3a 	bl	41820 <log_string_sync>
}
   2a3ac:	b003      	add	sp, #12
   2a3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3b2:	bf00      	nop
   2a3b4:	200248d4 	.word	0x200248d4
   2a3b8:	00049fcb 	.word	0x00049fcb
   2a3bc:	0004a21b 	.word	0x0004a21b
   2a3c0:	00048156 	.word	0x00048156
   2a3c4:	0004a259 	.word	0x0004a259
   2a3c8:	20024928 	.word	0x20024928
   2a3cc:	000488fa 	.word	0x000488fa
   2a3d0:	00048920 	.word	0x00048920
   2a3d4:	00048935 	.word	0x00048935
   2a3d8:	2002b1a0 	.word	0x2002b1a0
   2a3dc:	00046a80 	.word	0x00046a80
   2a3e0:	0004894d 	.word	0x0004894d
   2a3e4:	00048964 	.word	0x00048964
   2a3e8:	00046434 	.word	0x00046434
   2a3ec:	000463bc 	.word	0x000463bc
   2a3f0:	0004a30a 	.word	0x0004a30a
   2a3f4:	0004a29a 	.word	0x0004a29a
   2a3f8:	0004ef58 	.word	0x0004ef58
   2a3fc:	0004a2d8 	.word	0x0004a2d8
   2a400:	2002492c 	.word	0x2002492c
   2a404:	20020935 	.word	0x20020935
   2a408:	20024910 	.word	0x20024910
   2a40c:	200248e4 	.word	0x200248e4
   2a410:	200248e8 	.word	0x200248e8
   2a414:	200248fc 	.word	0x200248fc
   2a418:	20021988 	.word	0x20021988
   2a41c:	200244f8 	.word	0x200244f8
   2a420:	0004a2ed 	.word	0x0004a2ed

0002a424 <dk_leds_init>:
{
   2a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2a426:	2600      	movs	r6, #0
   2a428:	4d18      	ldr	r5, [pc, #96]	; (2a48c <dk_leds_init+0x68>)
   2a42a:	4f19      	ldr	r7, [pc, #100]	; (2a490 <dk_leds_init+0x6c>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   2a42c:	6828      	ldr	r0, [r5, #0]
   2a42e:	f011 faff 	bl	3ba30 <z_impl_device_get_binding>
   2a432:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   2a436:	b968      	cbnz	r0, 2a454 <dk_leds_init+0x30>
   2a438:	4b16      	ldr	r3, [pc, #88]	; (2a494 <dk_leds_init+0x70>)
   2a43a:	4817      	ldr	r0, [pc, #92]	; (2a498 <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   2a43c:	4917      	ldr	r1, [pc, #92]	; (2a49c <dk_leds_init+0x78>)
   2a43e:	1ac0      	subs	r0, r0, r3
   2a440:	08c0      	lsrs	r0, r0, #3
   2a442:	0180      	lsls	r0, r0, #6
   2a444:	f040 0001 	orr.w	r0, r0, #1
   2a448:	f017 f9ea 	bl	41820 <log_string_sync>
			return -ENODEV;
   2a44c:	f06f 0412 	mvn.w	r4, #18
}
   2a450:	4620      	mov	r0, r4
   2a452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   2a454:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a458:	7929      	ldrb	r1, [r5, #4]
   2a45a:	f7ff fd93 	bl	29f84 <gpio_pin_configure>
		if (err) {
   2a45e:	4604      	mov	r4, r0
   2a460:	b150      	cbz	r0, 2a478 <dk_leds_init+0x54>
   2a462:	480c      	ldr	r0, [pc, #48]	; (2a494 <dk_leds_init+0x70>)
   2a464:	4b0c      	ldr	r3, [pc, #48]	; (2a498 <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   2a466:	490e      	ldr	r1, [pc, #56]	; (2a4a0 <dk_leds_init+0x7c>)
   2a468:	1a1b      	subs	r3, r3, r0
   2a46a:	08db      	lsrs	r3, r3, #3
   2a46c:	019b      	lsls	r3, r3, #6
   2a46e:	f043 0001 	orr.w	r0, r3, #1
   2a472:	f017 f9d5 	bl	41820 <log_string_sync>
			return err;
   2a476:	e7eb      	b.n	2a450 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2a478:	3601      	adds	r6, #1
   2a47a:	2e04      	cmp	r6, #4
   2a47c:	f105 0508 	add.w	r5, r5, #8
   2a480:	d1d4      	bne.n	2a42c <dk_leds_init+0x8>
}
   2a482:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a486:	210f      	movs	r1, #15
   2a488:	f7ff bdd8 	b.w	2a03c <dk_set_leds_state.part.0>
   2a48c:	00046aa0 	.word	0x00046aa0
   2a490:	20024918 	.word	0x20024918
   2a494:	000463bc 	.word	0x000463bc
   2a498:	00046434 	.word	0x00046434
   2a49c:	0004a322 	.word	0x0004a322
   2a4a0:	0004a33a 	.word	0x0004a33a

0002a4a4 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a4a4:	4b05      	ldr	r3, [pc, #20]	; (2a4bc <dk_read_buttons+0x18>)
   2a4a6:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   2a4aa:	b100      	cbz	r0, 2a4ae <dk_read_buttons+0xa>
		*button_state = current_state;
   2a4ac:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   2a4ae:	4804      	ldr	r0, [pc, #16]	; (2a4c0 <dk_read_buttons+0x1c>)
   2a4b0:	b111      	cbz	r1, 2a4b8 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   2a4b2:	6802      	ldr	r2, [r0, #0]
   2a4b4:	405a      	eors	r2, r3
   2a4b6:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   2a4b8:	6003      	str	r3, [r0, #0]
}
   2a4ba:	4770      	bx	lr
   2a4bc:	2002492c 	.word	0x2002492c
   2a4c0:	20024914 	.word	0x20024914

0002a4c4 <dk_buttons_init>:
{
   2a4c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   2a4c8:	4b45      	ldr	r3, [pc, #276]	; (2a5e0 <dk_buttons_init+0x11c>)
   2a4ca:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   2a4cc:	4d45      	ldr	r5, [pc, #276]	; (2a5e4 <dk_buttons_init+0x120>)
   2a4ce:	4f46      	ldr	r7, [pc, #280]	; (2a5e8 <dk_buttons_init+0x124>)
   2a4d0:	4846      	ldr	r0, [pc, #280]	; (2a5ec <dk_buttons_init+0x128>)
   2a4d2:	f01a fa3c 	bl	4494e <z_impl_k_mutex_init>
   2a4d6:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a4d8:	2600      	movs	r6, #0
   2a4da:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   2a4dc:	6828      	ldr	r0, [r5, #0]
   2a4de:	f011 faa7 	bl	3ba30 <z_impl_device_get_binding>
   2a4e2:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   2a4e6:	b970      	cbnz	r0, 2a506 <dk_buttons_init+0x42>
   2a4e8:	4b41      	ldr	r3, [pc, #260]	; (2a5f0 <dk_buttons_init+0x12c>)
   2a4ea:	4842      	ldr	r0, [pc, #264]	; (2a5f4 <dk_buttons_init+0x130>)
			LOG_ERR("Cannot bind gpio device");
   2a4ec:	4942      	ldr	r1, [pc, #264]	; (2a5f8 <dk_buttons_init+0x134>)
   2a4ee:	1ac0      	subs	r0, r0, r3
   2a4f0:	08c0      	lsrs	r0, r0, #3
   2a4f2:	0180      	lsls	r0, r0, #6
   2a4f4:	f040 0001 	orr.w	r0, r0, #1
   2a4f8:	f017 f992 	bl	41820 <log_string_sync>
			return -ENODEV;
   2a4fc:	f06f 0412 	mvn.w	r4, #18
}
   2a500:	4620      	mov	r0, r4
   2a502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   2a506:	f44f 7288 	mov.w	r2, #272	; 0x110
   2a50a:	7929      	ldrb	r1, [r5, #4]
   2a50c:	f7ff fd3a 	bl	29f84 <gpio_pin_configure>
		if (err) {
   2a510:	4604      	mov	r4, r0
   2a512:	b150      	cbz	r0, 2a52a <dk_buttons_init+0x66>
   2a514:	4837      	ldr	r0, [pc, #220]	; (2a5f4 <dk_buttons_init+0x130>)
   2a516:	4b36      	ldr	r3, [pc, #216]	; (2a5f0 <dk_buttons_init+0x12c>)
			LOG_ERR("Cannot configure button gpio");
   2a518:	4938      	ldr	r1, [pc, #224]	; (2a5fc <dk_buttons_init+0x138>)
   2a51a:	1ac0      	subs	r0, r0, r3
   2a51c:	08c0      	lsrs	r0, r0, #3
   2a51e:	0180      	lsls	r0, r0, #6
		LOG_ERR("Cannot add work to workqueue");
   2a520:	f040 0001 	orr.w	r0, r0, #1
   2a524:	f017 f97c 	bl	41820 <log_string_sync>
		return err;
   2a528:	e7ea      	b.n	2a500 <dk_buttons_init+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a52a:	3601      	adds	r6, #1
   2a52c:	2e04      	cmp	r6, #4
   2a52e:	f105 0508 	add.w	r5, r5, #8
   2a532:	d1d3      	bne.n	2a4dc <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a534:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   2a536:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   2a538:	f04f 0b01 	mov.w	fp, #1
   2a53c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2a5e8 <dk_buttons_init+0x124>
		err = gpio_pin_interrupt_configure(button_devs[i],
   2a540:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   2a544:	f85a 0b04 	ldr.w	r0, [sl], #4
   2a548:	791e      	ldrb	r6, [r3, #4]
   2a54a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2a54e:	4631      	mov	r1, r6
   2a550:	f7ff fc82 	bl	29e58 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   2a554:	4604      	mov	r4, r0
   2a556:	b130      	cbz	r0, 2a566 <dk_buttons_init+0xa2>
   2a558:	4826      	ldr	r0, [pc, #152]	; (2a5f4 <dk_buttons_init+0x130>)
   2a55a:	4b25      	ldr	r3, [pc, #148]	; (2a5f0 <dk_buttons_init+0x12c>)
			LOG_ERR("Cannot disable callbacks()");
   2a55c:	4928      	ldr	r1, [pc, #160]	; (2a600 <dk_buttons_init+0x13c>)
   2a55e:	1ac0      	subs	r0, r0, r3
   2a560:	08c0      	lsrs	r0, r0, #3
   2a562:	0180      	lsls	r0, r0, #6
   2a564:	e7dc      	b.n	2a520 <dk_buttons_init+0x5c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a566:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   2a568:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a56c:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   2a56e:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a572:	d1e5      	bne.n	2a540 <dk_buttons_init+0x7c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a574:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2a576:	4e23      	ldr	r6, [pc, #140]	; (2a604 <dk_buttons_init+0x140>)
   2a578:	4b23      	ldr	r3, [pc, #140]	; (2a608 <dk_buttons_init+0x144>)
	callback->pin_mask = pin_mask;
   2a57a:	e9c6 3901 	strd	r3, r9, [r6, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   2a57e:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2a582:	6883      	ldr	r3, [r0, #8]
   2a584:	69db      	ldr	r3, [r3, #28]
   2a586:	b15b      	cbz	r3, 2a5a0 <dk_buttons_init+0xdc>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2a588:	2201      	movs	r2, #1
   2a58a:	4631      	mov	r1, r6
   2a58c:	4798      	blx	r3
		if (err) {
   2a58e:	4604      	mov	r4, r0
   2a590:	b148      	cbz	r0, 2a5a6 <dk_buttons_init+0xe2>
   2a592:	4818      	ldr	r0, [pc, #96]	; (2a5f4 <dk_buttons_init+0x130>)
   2a594:	4b16      	ldr	r3, [pc, #88]	; (2a5f0 <dk_buttons_init+0x12c>)
			LOG_ERR("Cannot add callback");
   2a596:	491d      	ldr	r1, [pc, #116]	; (2a60c <dk_buttons_init+0x148>)
   2a598:	1ac0      	subs	r0, r0, r3
   2a59a:	08c0      	lsrs	r0, r0, #3
   2a59c:	0180      	lsls	r0, r0, #6
   2a59e:	e7bf      	b.n	2a520 <dk_buttons_init+0x5c>
		return -ENOTSUP;
   2a5a0:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2a5a4:	e7f5      	b.n	2a592 <dk_buttons_init+0xce>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a5a6:	3501      	adds	r5, #1
   2a5a8:	2d04      	cmp	r5, #4
   2a5aa:	d1e8      	bne.n	2a57e <dk_buttons_init+0xba>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   2a5ac:	4918      	ldr	r1, [pc, #96]	; (2a610 <dk_buttons_init+0x14c>)
   2a5ae:	4819      	ldr	r0, [pc, #100]	; (2a614 <dk_buttons_init+0x150>)
   2a5b0:	f01a fab3 	bl	44b1a <k_delayed_work_init>
	state = STATE_SCANNING;
   2a5b4:	2201      	movs	r2, #1
   2a5b6:	4b18      	ldr	r3, [pc, #96]	; (2a618 <dk_buttons_init+0x154>)
   2a5b8:	4916      	ldr	r1, [pc, #88]	; (2a614 <dk_buttons_init+0x150>)
   2a5ba:	701a      	strb	r2, [r3, #0]
   2a5bc:	4817      	ldr	r0, [pc, #92]	; (2a61c <dk_buttons_init+0x158>)
   2a5be:	2200      	movs	r2, #0
   2a5c0:	2300      	movs	r3, #0
   2a5c2:	f013 fd07 	bl	3dfd4 <k_delayed_work_submit_to_queue>
	if (err) {
   2a5c6:	4604      	mov	r4, r0
   2a5c8:	b130      	cbz	r0, 2a5d8 <dk_buttons_init+0x114>
   2a5ca:	480a      	ldr	r0, [pc, #40]	; (2a5f4 <dk_buttons_init+0x130>)
   2a5cc:	4b08      	ldr	r3, [pc, #32]	; (2a5f0 <dk_buttons_init+0x12c>)
		LOG_ERR("Cannot add work to workqueue");
   2a5ce:	4914      	ldr	r1, [pc, #80]	; (2a620 <dk_buttons_init+0x15c>)
   2a5d0:	1ac0      	subs	r0, r0, r3
   2a5d2:	08c0      	lsrs	r0, r0, #3
   2a5d4:	0180      	lsls	r0, r0, #6
   2a5d6:	e7a3      	b.n	2a520 <dk_buttons_init+0x5c>
	dk_read_buttons(NULL, NULL);
   2a5d8:	4601      	mov	r1, r0
   2a5da:	f7ff ff63 	bl	2a4a4 <dk_read_buttons>
	return 0;
   2a5de:	e78f      	b.n	2a500 <dk_buttons_init+0x3c>
   2a5e0:	200248e4 	.word	0x200248e4
   2a5e4:	00046a80 	.word	0x00046a80
   2a5e8:	200248d4 	.word	0x200248d4
   2a5ec:	200248e8 	.word	0x200248e8
   2a5f0:	000463bc 	.word	0x000463bc
   2a5f4:	00046434 	.word	0x00046434
   2a5f8:	0004a322 	.word	0x0004a322
   2a5fc:	0004a354 	.word	0x0004a354
   2a600:	0004a371 	.word	0x0004a371
   2a604:	20024904 	.word	0x20024904
   2a608:	0002a0ad 	.word	0x0002a0ad
   2a60c:	0004a38c 	.word	0x0004a38c
   2a610:	0002a1c5 	.word	0x0002a1c5
   2a614:	20021988 	.word	0x20021988
   2a618:	2002b1a0 	.word	0x2002b1a0
   2a61c:	200244f8 	.word	0x200244f8
   2a620:	0004a2ed 	.word	0x0004a2ed

0002a624 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   2a624:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   2a626:	f240 2201 	movw	r2, #513	; 0x201
   2a62a:	2102      	movs	r1, #2
   2a62c:	2066      	movs	r0, #102	; 0x66
   2a62e:	f7fa fe1f 	bl	25270 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   2a632:	4b05      	ldr	r3, [pc, #20]	; (2a648 <open_socket+0x24>)
   2a634:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   2a636:	3001      	adds	r0, #1
   2a638:	d104      	bne.n	2a644 <open_socket+0x20>
		return -errno;
   2a63a:	f018 f81a 	bl	42672 <__errno>
   2a63e:	6800      	ldr	r0, [r0, #0]
   2a640:	4240      	negs	r0, r0
	}

	return 0;
}
   2a642:	bd08      	pop	{r3, pc}
	return 0;
   2a644:	2000      	movs	r0, #0
   2a646:	e7fc      	b.n	2a642 <open_socket+0x1e>
   2a648:	20024934 	.word	0x20024934

0002a64c <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   2a64c:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   2a64e:	4d18      	ldr	r5, [pc, #96]	; (2a6b0 <at_cmd_driver_init+0x64>)
{
   2a650:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   2a652:	782b      	ldrb	r3, [r5, #0]
   2a654:	bb53      	cbnz	r3, 2a6ac <at_cmd_driver_init+0x60>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   2a656:	f7ff ffe5 	bl	2a624 <open_socket>
	if (err) {
   2a65a:	4604      	mov	r4, r0
   2a65c:	b168      	cbz	r0, 2a67a <at_cmd_driver_init+0x2e>
   2a65e:	4815      	ldr	r0, [pc, #84]	; (2a6b4 <at_cmd_driver_init+0x68>)
   2a660:	4b15      	ldr	r3, [pc, #84]	; (2a6b8 <at_cmd_driver_init+0x6c>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   2a662:	4622      	mov	r2, r4
   2a664:	1ac0      	subs	r0, r0, r3
   2a666:	08c0      	lsrs	r0, r0, #3
   2a668:	0180      	lsls	r0, r0, #6
   2a66a:	4914      	ldr	r1, [pc, #80]	; (2a6bc <at_cmd_driver_init+0x70>)
   2a66c:	f040 0001 	orr.w	r0, r0, #1
   2a670:	f017 f8d6 	bl	41820 <log_string_sync>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   2a674:	4620      	mov	r0, r4
   2a676:	b009      	add	sp, #36	; 0x24
   2a678:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2a67a:	2200      	movs	r2, #0
   2a67c:	2300      	movs	r3, #0
   2a67e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a682:	230a      	movs	r3, #10
   2a684:	e9cd 0000 	strd	r0, r0, [sp]
   2a688:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2a68c:	9004      	str	r0, [sp, #16]
   2a68e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2a692:	4b0b      	ldr	r3, [pc, #44]	; (2a6c0 <at_cmd_driver_init+0x74>)
   2a694:	490b      	ldr	r1, [pc, #44]	; (2a6c4 <at_cmd_driver_init+0x78>)
   2a696:	480c      	ldr	r0, [pc, #48]	; (2a6c8 <at_cmd_driver_init+0x7c>)
   2a698:	f013 fb70 	bl	3dd7c <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   2a69c:	4b0b      	ldr	r3, [pc, #44]	; (2a6cc <at_cmd_driver_init+0x80>)
   2a69e:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread_id, value);
   2a6a0:	490b      	ldr	r1, [pc, #44]	; (2a6d0 <at_cmd_driver_init+0x84>)
   2a6a2:	f01a f9d9 	bl	44a58 <z_impl_k_thread_name_set>
	initialized = true;
   2a6a6:	2301      	movs	r3, #1
   2a6a8:	702b      	strb	r3, [r5, #0]
	return 0;
   2a6aa:	e7e3      	b.n	2a674 <at_cmd_driver_init+0x28>
		return 0;
   2a6ac:	2400      	movs	r4, #0
   2a6ae:	e7e1      	b.n	2a674 <at_cmd_driver_init+0x28>
   2a6b0:	2002bc2d 	.word	0x2002bc2d
   2a6b4:	000463d4 	.word	0x000463d4
   2a6b8:	000463bc 	.word	0x000463bc
   2a6bc:	0004a3b4 	.word	0x0004a3b4
   2a6c0:	0002a7fd 	.word	0x0002a7fd
   2a6c4:	2002e838 	.word	0x2002e838
   2a6c8:	200219b8 	.word	0x200219b8
   2a6cc:	2002495c 	.word	0x2002495c
   2a6d0:	0004a3d6 	.word	0x0004a3d6

0002a6d4 <complete_cmd>:
{
   2a6d4:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2a6d6:	4c08      	ldr	r4, [pc, #32]	; (2a6f8 <complete_cmd+0x24>)
   2a6d8:	f04f 32ff 	mov.w	r2, #4294967295
   2a6dc:	f04f 33ff 	mov.w	r3, #4294967295
   2a6e0:	4620      	mov	r0, r4
   2a6e2:	f011 fdeb 	bl	3c2bc <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   2a6e6:	2200      	movs	r2, #0
   2a6e8:	4b04      	ldr	r3, [pc, #16]	; (2a6fc <complete_cmd+0x28>)
   2a6ea:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   2a6ec:	4620      	mov	r0, r4
}
   2a6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a6f2:	f011 bedd 	b.w	3c4b0 <z_impl_k_mutex_unlock>
   2a6f6:	bf00      	nop
   2a6f8:	20020b1c 	.word	0x20020b1c
   2a6fc:	20024938 	.word	0x20024938

0002a700 <load_cmd_and_write>:
{
   2a700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a704:	b087      	sub	sp, #28
		if (current_cmd.cmd != NULL ||
   2a706:	4f34      	ldr	r7, [pc, #208]	; (2a7d8 <load_cmd_and_write+0xd8>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2a708:	f04f 33ff 	mov.w	r3, #4294967295
   2a70c:	46b8      	mov	r8, r7
   2a70e:	f04f 32ff 	mov.w	r2, #4294967295
   2a712:	4832      	ldr	r0, [pc, #200]	; (2a7dc <load_cmd_and_write+0xdc>)
   2a714:	f011 fdd2 	bl	3c2bc <z_impl_k_mutex_lock>
   2a718:	4d31      	ldr	r5, [pc, #196]	; (2a7e0 <load_cmd_and_write+0xe0>)
   2a71a:	4b32      	ldr	r3, [pc, #200]	; (2a7e4 <load_cmd_and_write+0xe4>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a71c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2a7f8 <load_cmd_and_write+0xf8>
   2a720:	1aed      	subs	r5, r5, r3
   2a722:	08ed      	lsrs	r5, r5, #3
   2a724:	683b      	ldr	r3, [r7, #0]
   2a726:	2b00      	cmp	r3, #0
   2a728:	d14f      	bne.n	2a7ca <load_cmd_and_write+0xca>
   2a72a:	2200      	movs	r2, #0
   2a72c:	2300      	movs	r3, #0
   2a72e:	4639      	mov	r1, r7
   2a730:	4648      	mov	r0, r9
   2a732:	f011 fd15 	bl	3c160 <z_impl_k_msgq_get>
   2a736:	4604      	mov	r4, r0
   2a738:	2800      	cmp	r0, #0
   2a73a:	d146      	bne.n	2a7ca <load_cmd_and_write+0xca>
		ret = at_write(current_cmd.cmd);
   2a73c:	6839      	ldr	r1, [r7, #0]
	int bytes_to_send = strlen(cmd);
   2a73e:	4608      	mov	r0, r1
   2a740:	9103      	str	r1, [sp, #12]
   2a742:	f7f2 fd8b 	bl	1d25c <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2a746:	4b28      	ldr	r3, [pc, #160]	; (2a7e8 <load_cmd_and_write+0xe8>)
	int bytes_to_send = strlen(cmd);
   2a748:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2a74a:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2a74c:	4632      	mov	r2, r6
   2a74e:	9903      	ldr	r1, [sp, #12]
   2a750:	4623      	mov	r3, r4
   2a752:	e9cd 4400 	strd	r4, r4, [sp]
   2a756:	f017 fc47 	bl	41fe8 <z_impl_zsock_sendto>
	if (bytes_sent == -1) {
   2a75a:	1c41      	adds	r1, r0, #1
   2a75c:	4602      	mov	r2, r0
   2a75e:	d129      	bne.n	2a7b4 <load_cmd_and_write+0xb4>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   2a760:	f017 ff87 	bl	42672 <__errno>
   2a764:	01ac      	lsls	r4, r5, #6
   2a766:	f044 0401 	orr.w	r4, r4, #1
   2a76a:	6802      	ldr	r2, [r0, #0]
   2a76c:	491f      	ldr	r1, [pc, #124]	; (2a7ec <load_cmd_and_write+0xec>)
   2a76e:	4620      	mov	r0, r4
   2a770:	f017 f856 	bl	41820 <log_string_sync>
		return -errno;
   2a774:	f017 ff7d 	bl	42672 <__errno>
   2a778:	6804      	ldr	r4, [r0, #0]
   2a77a:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   2a77c:	f898 3010 	ldrb.w	r3, [r8, #16]
   2a780:	07da      	lsls	r2, r3, #31
   2a782:	d503      	bpl.n	2a78c <load_cmd_and_write+0x8c>
			k_free(current_cmd.cmd);
   2a784:	f8d8 0000 	ldr.w	r0, [r8]
   2a788:	f01a fa70 	bl	44c6c <k_free>
		if (ret != 0) {
   2a78c:	b1ec      	cbz	r4, 2a7ca <load_cmd_and_write+0xca>
			resp.state = AT_CMD_ERROR_WRITE;
   2a78e:	2305      	movs	r3, #5
   2a790:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2a794:	f898 3010 	ldrb.w	r3, [r8, #16]
			resp.code = ret;
   2a798:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2a79a:	079b      	lsls	r3, r3, #30
   2a79c:	d507      	bpl.n	2a7ae <load_cmd_and_write+0xae>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a79e:	f04f 32ff 	mov.w	r2, #4294967295
   2a7a2:	f04f 33ff 	mov.w	r3, #4294967295
   2a7a6:	4812      	ldr	r0, [pc, #72]	; (2a7f0 <load_cmd_and_write+0xf0>)
   2a7a8:	a904      	add	r1, sp, #16
   2a7aa:	f011 fc37 	bl	3c01c <z_impl_k_msgq_put>
			complete_cmd();
   2a7ae:	f7ff ff91 	bl	2a6d4 <complete_cmd>
	} while (ret != 0);
   2a7b2:	e7b7      	b.n	2a724 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   2a7b4:	4286      	cmp	r6, r0
   2a7b6:	d0e1      	beq.n	2a77c <load_cmd_and_write+0x7c>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   2a7b8:	ea4f 1c85 	mov.w	ip, r5, lsl #6
   2a7bc:	4633      	mov	r3, r6
   2a7be:	490d      	ldr	r1, [pc, #52]	; (2a7f4 <load_cmd_and_write+0xf4>)
   2a7c0:	f04c 0002 	orr.w	r0, ip, #2
   2a7c4:	f017 f82c 	bl	41820 <log_string_sync>
   2a7c8:	e7d8      	b.n	2a77c <load_cmd_and_write+0x7c>
	return z_impl_k_mutex_unlock(mutex);
   2a7ca:	4804      	ldr	r0, [pc, #16]	; (2a7dc <load_cmd_and_write+0xdc>)
   2a7cc:	f011 fe70 	bl	3c4b0 <z_impl_k_mutex_unlock>
}
   2a7d0:	b007      	add	sp, #28
   2a7d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a7d6:	bf00      	nop
   2a7d8:	20024938 	.word	0x20024938
   2a7dc:	20020b1c 	.word	0x20020b1c
   2a7e0:	000463d4 	.word	0x000463d4
   2a7e4:	000463bc 	.word	0x000463bc
   2a7e8:	20024934 	.word	0x20024934
   2a7ec:	0004a3eb 	.word	0x0004a3eb
   2a7f0:	20020bd4 	.word	0x20020bd4
   2a7f4:	0004a40e 	.word	0x0004a40e
   2a7f8:	20020ba8 	.word	0x20020ba8

0002a7fc <socket_thread_fn>:
{
   2a7fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a800:	f8df 9260 	ldr.w	r9, [pc, #608]	; 2aa64 <socket_thread_fn+0x268>
   2a804:	4f83      	ldr	r7, [pc, #524]	; (2aa14 <socket_thread_fn+0x218>)
   2a806:	46ca      	mov	sl, r9
   2a808:	4b83      	ldr	r3, [pc, #524]	; (2aa18 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2a80a:	4e84      	ldr	r6, [pc, #528]	; (2aa1c <socket_thread_fn+0x220>)
   2a80c:	1aff      	subs	r7, r7, r3
   2a80e:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   2a810:	f7ff ff76 	bl	2a700 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a814:	f8d9 0000 	ldr.w	r0, [r9]
   2a818:	2500      	movs	r5, #0
   2a81a:	f640 228c 	movw	r2, #2700	; 0xa8c
   2a81e:	462b      	mov	r3, r5
   2a820:	e9cd 5500 	strd	r5, r5, [sp]
   2a824:	497d      	ldr	r1, [pc, #500]	; (2aa1c <socket_thread_fn+0x220>)
   2a826:	f017 fc12 	bl	4204e <z_impl_zsock_recvfrom>
		ret.code  = 0;
   2a82a:	4c7d      	ldr	r4, [pc, #500]	; (2aa20 <socket_thread_fn+0x224>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a82c:	f8df b238 	ldr.w	fp, [pc, #568]	; 2aa68 <socket_thread_fn+0x26c>
		if (bytes_read < 0) {
   2a830:	42a8      	cmp	r0, r5
   2a832:	4680      	mov	r8, r0
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a834:	f8cb 0000 	str.w	r0, [fp]
		ret.code  = 0;
   2a838:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   2a83a:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   2a83c:	da6a      	bge.n	2a914 <socket_thread_fn+0x118>
			if (errno == EHOSTDOWN) {
   2a83e:	f017 ff18 	bl	42672 <__errno>
   2a842:	6803      	ldr	r3, [r0, #0]
   2a844:	2b75      	cmp	r3, #117	; 0x75
   2a846:	d122      	bne.n	2a88e <socket_thread_fn+0x92>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a848:	2301      	movs	r3, #1
   2a84a:	4c76      	ldr	r4, [pc, #472]	; (2aa24 <socket_thread_fn+0x228>)
   2a84c:	e8d4 2fef 	ldaex	r2, [r4]
   2a850:	e8c4 3fe1 	stlex	r1, r3, [r4]
   2a854:	2900      	cmp	r1, #0
   2a856:	d1f9      	bne.n	2a84c <socket_thread_fn+0x50>
				close(common_socket_fd);
   2a858:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   2a85c:	f017 fb97 	bl	41f8e <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   2a860:	f7fe fdac 	bl	293bc <bsdlib_shutdown_wait>
   2a864:	e8d4 3fef 	ldaex	r3, [r4]
   2a868:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2a86c:	2a00      	cmp	r2, #0
   2a86e:	d1f9      	bne.n	2a864 <socket_thread_fn+0x68>
				if (open_socket() != 0) {
   2a870:	f7ff fed8 	bl	2a624 <open_socket>
   2a874:	2800      	cmp	r0, #0
   2a876:	d0cb      	beq.n	2a810 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   2a878:	f017 fefb 	bl	42672 <__errno>
   2a87c:	01bc      	lsls	r4, r7, #6
   2a87e:	f044 0401 	orr.w	r4, r4, #1
   2a882:	6802      	ldr	r2, [r0, #0]
   2a884:	4968      	ldr	r1, [pc, #416]	; (2aa28 <socket_thread_fn+0x22c>)
   2a886:	4620      	mov	r0, r4
   2a888:	f016 ffca 	bl	41820 <log_string_sync>
   2a88c:	e7c0      	b.n	2a810 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   2a88e:	01bd      	lsls	r5, r7, #6
   2a890:	f045 0001 	orr.w	r0, r5, #1
   2a894:	f8db 2000 	ldr.w	r2, [fp]
   2a898:	4964      	ldr	r1, [pc, #400]	; (2aa2c <socket_thread_fn+0x230>)
   2a89a:	f016 ffc1 	bl	41820 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   2a89e:	f8d9 0000 	ldr.w	r0, [r9]
   2a8a2:	f017 fb74 	bl	41f8e <z_impl_zsock_close>
   2a8a6:	bb28      	cbnz	r0, 2a8f4 <socket_thread_fn+0xf8>
			    (open_socket() == 0)) {
   2a8a8:	f7ff febc 	bl	2a624 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   2a8ac:	bb10      	cbnz	r0, 2a8f4 <socket_thread_fn+0xf8>
				LOG_INF("AT socket recovered");
   2a8ae:	4960      	ldr	r1, [pc, #384]	; (2aa30 <socket_thread_fn+0x234>)
   2a8b0:	f045 0003 	orr.w	r0, r5, #3
   2a8b4:	f016 ffb4 	bl	41820 <log_string_sync>
				ret.state = AT_CMD_ERROR_READ;
   2a8b8:	2306      	movs	r3, #6
   2a8ba:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   2a8bc:	f017 fed9 	bl	42672 <__errno>
   2a8c0:	6803      	ldr	r3, [r0, #0]
   2a8c2:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   2a8c4:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   2a8c6:	4b5b      	ldr	r3, [pc, #364]	; (2aa34 <socket_thread_fn+0x238>)
   2a8c8:	681a      	ldr	r2, [r3, #0]
   2a8ca:	b16a      	cbz	r2, 2a8e8 <socket_thread_fn+0xec>
   2a8cc:	7c1b      	ldrb	r3, [r3, #16]
   2a8ce:	079b      	lsls	r3, r3, #30
   2a8d0:	d50a      	bpl.n	2a8e8 <socket_thread_fn+0xec>
		    current_cmd.flags & AT_CMD_SYNC &&
   2a8d2:	7923      	ldrb	r3, [r4, #4]
   2a8d4:	2b07      	cmp	r3, #7
   2a8d6:	d09b      	beq.n	2a810 <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a8d8:	f04f 32ff 	mov.w	r2, #4294967295
   2a8dc:	f04f 33ff 	mov.w	r3, #4294967295
   2a8e0:	494f      	ldr	r1, [pc, #316]	; (2aa20 <socket_thread_fn+0x224>)
   2a8e2:	4855      	ldr	r0, [pc, #340]	; (2aa38 <socket_thread_fn+0x23c>)
   2a8e4:	f011 fb9a 	bl	3c01c <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   2a8e8:	7923      	ldrb	r3, [r4, #4]
   2a8ea:	2b07      	cmp	r3, #7
   2a8ec:	d090      	beq.n	2a810 <socket_thread_fn+0x14>
			complete_cmd();
   2a8ee:	f7ff fef1 	bl	2a6d4 <complete_cmd>
   2a8f2:	e78d      	b.n	2a810 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   2a8f4:	f017 febd 	bl	42672 <__errno>
   2a8f8:	f045 0501 	orr.w	r5, r5, #1
   2a8fc:	6802      	ldr	r2, [r0, #0]
   2a8fe:	494f      	ldr	r1, [pc, #316]	; (2aa3c <socket_thread_fn+0x240>)
   2a900:	4628      	mov	r0, r5
   2a902:	f016 ff8d 	bl	41820 <log_string_sync>
			close(common_socket_fd);
   2a906:	f8da 0000 	ldr.w	r0, [sl]
}
   2a90a:	b003      	add	sp, #12
   2a90c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a910:	f017 bb3d 	b.w	41f8e <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   2a914:	d10a      	bne.n	2a92c <socket_thread_fn+0x130>
			LOG_ERR("AT message empty");
   2a916:	01b8      	lsls	r0, r7, #6
   2a918:	4949      	ldr	r1, [pc, #292]	; (2aa40 <socket_thread_fn+0x244>)
   2a91a:	f040 0001 	orr.w	r0, r0, #1
   2a91e:	f016 ff7f 	bl	41820 <log_string_sync>
			ret.state = AT_CMD_ERROR_READ;
   2a922:	2306      	movs	r3, #6
   2a924:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   2a926:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   2a92a:	e7cb      	b.n	2a8c4 <socket_thread_fn+0xc8>
		} else if (buf[bytes_read - 1] != '\0') {
   2a92c:	1833      	adds	r3, r6, r0
   2a92e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2a932:	b153      	cbz	r3, 2a94a <socket_thread_fn+0x14e>
			LOG_ERR("AT message too large for reception buffer or "
   2a934:	01b8      	lsls	r0, r7, #6
   2a936:	4943      	ldr	r1, [pc, #268]	; (2aa44 <socket_thread_fn+0x248>)
   2a938:	f040 0001 	orr.w	r0, r0, #1
   2a93c:	f016 ff70 	bl	41820 <log_string_sync>
			ret.state = AT_CMD_ERROR_READ;
   2a940:	2306      	movs	r3, #6
   2a942:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   2a944:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2a948:	e7bc      	b.n	2a8c4 <socket_thread_fn+0xc8>
	ret->state = AT_CMD_NOTIFICATION;
   2a94a:	2307      	movs	r3, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   2a94c:	1f45      	subs	r5, r0, #5
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a94e:	483e      	ldr	r0, [pc, #248]	; (2aa48 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   2a950:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a952:	f7f2 fc83 	bl	1d25c <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   2a956:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a958:	4602      	mov	r2, r0
   2a95a:	493b      	ldr	r1, [pc, #236]	; (2aa48 <socket_thread_fn+0x24c>)
   2a95c:	4628      	mov	r0, r5
   2a95e:	f01a fbc2 	bl	450e6 <strncmp>
		if (match) {
   2a962:	b9c0      	cbnz	r0, 2a996 <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   2a964:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a966:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   2a968:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   2a96a:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   2a96c:	3201      	adds	r2, #1
   2a96e:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   2a970:	4d30      	ldr	r5, [pc, #192]	; (2aa34 <socket_thread_fn+0x238>)
   2a972:	682b      	ldr	r3, [r5, #0]
   2a974:	2b00      	cmp	r3, #0
   2a976:	d043      	beq.n	2aa00 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   2a978:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   2a97a:	2800      	cmp	r0, #0
   2a97c:	d040      	beq.n	2aa00 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   2a97e:	7923      	ldrb	r3, [r4, #4]
   2a980:	2b07      	cmp	r3, #7
   2a982:	d12e      	bne.n	2a9e2 <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   2a984:	4b31      	ldr	r3, [pc, #196]	; (2aa4c <socket_thread_fn+0x250>)
   2a986:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   2a988:	b913      	cbnz	r3, 2a990 <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   2a98a:	68ab      	ldr	r3, [r5, #8]
   2a98c:	2b00      	cmp	r3, #0
   2a98e:	d09a      	beq.n	2a8c6 <socket_thread_fn+0xca>
			current_cmd.callback(buf);
   2a990:	4630      	mov	r0, r6
   2a992:	4798      	blx	r3
   2a994:	e797      	b.n	2a8c6 <socket_thread_fn+0xca>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   2a996:	4630      	mov	r0, r6
   2a998:	492d      	ldr	r1, [pc, #180]	; (2aa50 <socket_thread_fn+0x254>)
   2a99a:	f01a fbd6 	bl	4514a <strstr>
		if (tmpstr) {
   2a99e:	4605      	mov	r5, r0
   2a9a0:	b128      	cbz	r0, 2a9ae <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   2a9a2:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a9a4:	482b      	ldr	r0, [pc, #172]	; (2aa54 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   2a9a6:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a9a8:	f01a f97d 	bl	44ca6 <atoi>
   2a9ac:	e7db      	b.n	2a966 <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2a9ae:	4630      	mov	r0, r6
   2a9b0:	4929      	ldr	r1, [pc, #164]	; (2aa58 <socket_thread_fn+0x25c>)
   2a9b2:	f01a fbca 	bl	4514a <strstr>
		if (tmpstr) {
   2a9b6:	4605      	mov	r5, r0
   2a9b8:	b108      	cbz	r0, 2a9be <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   2a9ba:	2303      	movs	r3, #3
   2a9bc:	e7f2      	b.n	2a9a4 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2a9be:	4827      	ldr	r0, [pc, #156]	; (2aa5c <socket_thread_fn+0x260>)
   2a9c0:	f7f2 fc4c 	bl	1d25c <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   2a9c4:	f1a8 0508 	sub.w	r5, r8, #8
   2a9c8:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2a9ca:	4602      	mov	r2, r0
   2a9cc:	4923      	ldr	r1, [pc, #140]	; (2aa5c <socket_thread_fn+0x260>)
   2a9ce:	4628      	mov	r0, r5
   2a9d0:	f01a fb89 	bl	450e6 <strncmp>
		if (match) {
   2a9d4:	b9c0      	cbnz	r0, 2aa08 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   2a9d6:	2301      	movs	r3, #1
   2a9d8:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   2a9da:	f06f 0307 	mvn.w	r3, #7
   2a9de:	6023      	str	r3, [r4, #0]
			break;
   2a9e0:	e7c2      	b.n	2a968 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   2a9e2:	68eb      	ldr	r3, [r5, #12]
   2a9e4:	429a      	cmp	r2, r3
   2a9e6:	d908      	bls.n	2a9fa <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   2a9e8:	01b8      	lsls	r0, r7, #6
   2a9ea:	491d      	ldr	r1, [pc, #116]	; (2aa60 <socket_thread_fn+0x264>)
   2a9ec:	f040 0001 	orr.w	r0, r0, #1
   2a9f0:	f016 ff16 	bl	41820 <log_string_sync>
				ret.code  = -EMSGSIZE;
   2a9f4:	f06f 0379 	mvn.w	r3, #121	; 0x79
   2a9f8:	e764      	b.n	2a8c4 <socket_thread_fn+0xc8>
   2a9fa:	4631      	mov	r1, r6
   2a9fc:	f01a f973 	bl	44ce6 <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   2aa00:	7923      	ldrb	r3, [r4, #4]
   2aa02:	2b07      	cmp	r3, #7
   2aa04:	d1c1      	bne.n	2a98a <socket_thread_fn+0x18e>
   2aa06:	e7bd      	b.n	2a984 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   2aa08:	4630      	mov	r0, r6
   2aa0a:	f7f2 fc27 	bl	1d25c <strlen>
   2aa0e:	1c42      	adds	r2, r0, #1
   2aa10:	e7ae      	b.n	2a970 <socket_thread_fn+0x174>
   2aa12:	bf00      	nop
   2aa14:	000463d4 	.word	0x000463d4
   2aa18:	000463bc 	.word	0x000463bc
   2aa1c:	2002b1a1 	.word	0x2002b1a1
   2aa20:	20024950 	.word	0x20024950
   2aa24:	20024958 	.word	0x20024958
   2aa28:	0004a440 	.word	0x0004a440
   2aa2c:	0004a474 	.word	0x0004a474
   2aa30:	0004a496 	.word	0x0004a496
   2aa34:	20024938 	.word	0x20024938
   2aa38:	20020bd4 	.word	0x20020bd4
   2aa3c:	0004a4aa 	.word	0x0004a4aa
   2aa40:	0004a4e1 	.word	0x0004a4e1
   2aa44:	0004a4f2 	.word	0x0004a4f2
   2aa48:	00047a32 	.word	0x00047a32
   2aa4c:	2002494c 	.word	0x2002494c
   2aa50:	0004a53d 	.word	0x0004a53d
   2aa54:	2002b1ac 	.word	0x2002b1ac
   2aa58:	0004a549 	.word	0x0004a549
   2aa5c:	0004a555 	.word	0x0004a555
   2aa60:	0004a55d 	.word	0x0004a55d
   2aa64:	20024934 	.word	0x20024934
   2aa68:	20024930 	.word	0x20024930

0002aa6c <at_cmd_write>:
{
   2aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aa6e:	4605      	mov	r5, r0
   2aa70:	460f      	mov	r7, r1
   2aa72:	4616      	mov	r6, r2
   2aa74:	461c      	mov	r4, r3
   2aa76:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aa78:	4b3b      	ldr	r3, [pc, #236]	; (2ab68 <at_cmd_write+0xfc>)
   2aa7a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   2aa7e:	2b01      	cmp	r3, #1
   2aa80:	d06f      	beq.n	2ab62 <at_cmd_write+0xf6>
	return z_impl_k_current_get();
   2aa82:	f013 f833 	bl	3daec <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   2aa86:	4b39      	ldr	r3, [pc, #228]	; (2ab6c <at_cmd_write+0x100>)
   2aa88:	681b      	ldr	r3, [r3, #0]
   2aa8a:	4283      	cmp	r3, r0
   2aa8c:	d10e      	bne.n	2aaac <at_cmd_write+0x40>
   2aa8e:	4938      	ldr	r1, [pc, #224]	; (2ab70 <at_cmd_write+0x104>)
   2aa90:	f44f 73c1 	mov.w	r3, #386	; 0x182
   2aa94:	4a37      	ldr	r2, [pc, #220]	; (2ab74 <at_cmd_write+0x108>)
   2aa96:	4838      	ldr	r0, [pc, #224]	; (2ab78 <at_cmd_write+0x10c>)
   2aa98:	f016 fc94 	bl	413c4 <printk>
   2aa9c:	4837      	ldr	r0, [pc, #220]	; (2ab7c <at_cmd_write+0x110>)
   2aa9e:	f016 fc91 	bl	413c4 <printk>
   2aaa2:	f44f 71c1 	mov.w	r1, #386	; 0x182
   2aaa6:	4833      	ldr	r0, [pc, #204]	; (2ab74 <at_cmd_write+0x108>)
   2aaa8:	f016 fea9 	bl	417fe <assert_post_action>
	if (cmd == NULL) {
   2aaac:	b155      	cbz	r5, 2aac4 <at_cmd_write+0x58>
   2aaae:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   2aab0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2aab4:	b9c3      	cbnz	r3, 2aae8 <at_cmd_write+0x7c>
   2aab6:	4832      	ldr	r0, [pc, #200]	; (2ab80 <at_cmd_write+0x114>)
   2aab8:	4b32      	ldr	r3, [pc, #200]	; (2ab84 <at_cmd_write+0x118>)
		LOG_ERR("Invalid command");
   2aaba:	4933      	ldr	r1, [pc, #204]	; (2ab88 <at_cmd_write+0x11c>)
   2aabc:	1ac0      	subs	r0, r0, r3
   2aabe:	08c0      	lsrs	r0, r0, #3
   2aac0:	0180      	lsls	r0, r0, #6
   2aac2:	e005      	b.n	2aad0 <at_cmd_write+0x64>
   2aac4:	482e      	ldr	r0, [pc, #184]	; (2ab80 <at_cmd_write+0x114>)
   2aac6:	4b2f      	ldr	r3, [pc, #188]	; (2ab84 <at_cmd_write+0x118>)
		LOG_ERR("cmd is NULL");
   2aac8:	4930      	ldr	r1, [pc, #192]	; (2ab8c <at_cmd_write+0x120>)
   2aaca:	1ac0      	subs	r0, r0, r3
   2aacc:	08c0      	lsrs	r0, r0, #3
   2aace:	0180      	lsls	r0, r0, #6
   2aad0:	f040 0001 	orr.w	r0, r0, #1
   2aad4:	f016 fea4 	bl	41820 <log_string_sync>
		if (state) {
   2aad8:	b91c      	cbnz	r4, 2aae2 <at_cmd_write+0x76>
		return -EINVAL;
   2aada:	f06f 0015 	mvn.w	r0, #21
}
   2aade:	b009      	add	sp, #36	; 0x24
   2aae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   2aae2:	2304      	movs	r3, #4
   2aae4:	7023      	strb	r3, [r4, #0]
   2aae6:	e7f8      	b.n	2aada <at_cmd_write+0x6e>
		if (*c > ' ') {
   2aae8:	2b20      	cmp	r3, #32
   2aaea:	d9e1      	bls.n	2aab0 <at_cmd_write+0x44>
	command.callback = NULL;
   2aaec:	2300      	movs	r3, #0
   2aaee:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   2aaf0:	2302      	movs	r3, #2
	command.resp = buf;
   2aaf2:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   2aaf6:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   2aaf8:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   2aafc:	f04f 32ff 	mov.w	r2, #4294967295
   2ab00:	f04f 33ff 	mov.w	r3, #4294967295
   2ab04:	4822      	ldr	r0, [pc, #136]	; (2ab90 <at_cmd_write+0x124>)
   2ab06:	f011 fbd9 	bl	3c2bc <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2ab0a:	f04f 32ff 	mov.w	r2, #4294967295
   2ab0e:	f04f 33ff 	mov.w	r3, #4294967295
   2ab12:	4820      	ldr	r0, [pc, #128]	; (2ab94 <at_cmd_write+0x128>)
   2ab14:	a903      	add	r1, sp, #12
   2ab16:	f011 fa81 	bl	3c01c <z_impl_k_msgq_put>
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   2ab1a:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   2ab1c:	b178      	cbz	r0, 2ab3e <at_cmd_write+0xd2>
   2ab1e:	4a19      	ldr	r2, [pc, #100]	; (2ab84 <at_cmd_write+0x118>)
   2ab20:	4b17      	ldr	r3, [pc, #92]	; (2ab80 <at_cmd_write+0x114>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   2ab22:	491d      	ldr	r1, [pc, #116]	; (2ab98 <at_cmd_write+0x12c>)
   2ab24:	1a9b      	subs	r3, r3, r2
   2ab26:	08db      	lsrs	r3, r3, #3
   2ab28:	019b      	lsls	r3, r3, #6
   2ab2a:	4602      	mov	r2, r0
   2ab2c:	f043 0001 	orr.w	r0, r3, #1
   2ab30:	f016 fe76 	bl	41820 <log_string_sync>
		if (state) {
   2ab34:	b10c      	cbz	r4, 2ab3a <at_cmd_write+0xce>
			*state = AT_CMD_ERROR_QUEUE;
   2ab36:	2304      	movs	r3, #4
		*state = ret.state;
   2ab38:	7023      	strb	r3, [r4, #0]
	return ret.code;
   2ab3a:	9801      	ldr	r0, [sp, #4]
   2ab3c:	e7cf      	b.n	2aade <at_cmd_write+0x72>
	load_cmd_and_write();
   2ab3e:	f7ff fddf 	bl	2a700 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2ab42:	f04f 32ff 	mov.w	r2, #4294967295
   2ab46:	f04f 33ff 	mov.w	r3, #4294967295
   2ab4a:	a901      	add	r1, sp, #4
   2ab4c:	4813      	ldr	r0, [pc, #76]	; (2ab9c <at_cmd_write+0x130>)
   2ab4e:	f011 fb07 	bl	3c160 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   2ab52:	480f      	ldr	r0, [pc, #60]	; (2ab90 <at_cmd_write+0x124>)
   2ab54:	f011 fcac 	bl	3c4b0 <z_impl_k_mutex_unlock>
	if (state) {
   2ab58:	2c00      	cmp	r4, #0
   2ab5a:	d0ee      	beq.n	2ab3a <at_cmd_write+0xce>
		*state = ret.state;
   2ab5c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2ab60:	e7ea      	b.n	2ab38 <at_cmd_write+0xcc>
		return -EHOSTDOWN;
   2ab62:	f06f 0074 	mvn.w	r0, #116	; 0x74
   2ab66:	e7ba      	b.n	2aade <at_cmd_write+0x72>
   2ab68:	20024958 	.word	0x20024958
   2ab6c:	2002495c 	.word	0x2002495c
   2ab70:	0004a5be 	.word	0x0004a5be
   2ab74:	0004a59a 	.word	0x0004a59a
   2ab78:	00048156 	.word	0x00048156
   2ab7c:	0004a5dc 	.word	0x0004a5dc
   2ab80:	000463d4 	.word	0x000463d4
   2ab84:	000463bc 	.word	0x000463bc
   2ab88:	0004a58a 	.word	0x0004a58a
   2ab8c:	0004a57e 	.word	0x0004a57e
   2ab90:	20020b58 	.word	0x20020b58
   2ab94:	20020ba8 	.word	0x20020ba8
   2ab98:	0004a60c 	.word	0x0004a60c
   2ab9c:	20020bd4 	.word	0x20020bd4

0002aba0 <at_cmd_set_notification_handler>:
{
   2aba0:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   2aba2:	4c09      	ldr	r4, [pc, #36]	; (2abc8 <at_cmd_set_notification_handler+0x28>)
{
   2aba4:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   2aba6:	6822      	ldr	r2, [r4, #0]
   2aba8:	b15a      	cbz	r2, 2abc2 <at_cmd_set_notification_handler+0x22>
   2abaa:	4282      	cmp	r2, r0
   2abac:	d009      	beq.n	2abc2 <at_cmd_set_notification_handler+0x22>
   2abae:	4807      	ldr	r0, [pc, #28]	; (2abcc <at_cmd_set_notification_handler+0x2c>)
   2abb0:	4b07      	ldr	r3, [pc, #28]	; (2abd0 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   2abb2:	4908      	ldr	r1, [pc, #32]	; (2abd4 <at_cmd_set_notification_handler+0x34>)
   2abb4:	1a1b      	subs	r3, r3, r0
   2abb6:	08db      	lsrs	r3, r3, #3
   2abb8:	019b      	lsls	r3, r3, #6
   2abba:	f043 0002 	orr.w	r0, r3, #2
   2abbe:	f016 fe2f 	bl	41820 <log_string_sync>
	notification_handler = handler;
   2abc2:	6025      	str	r5, [r4, #0]
}
   2abc4:	bd38      	pop	{r3, r4, r5, pc}
   2abc6:	bf00      	nop
   2abc8:	2002494c 	.word	0x2002494c
   2abcc:	000463bc 	.word	0x000463bc
   2abd0:	000463d4 	.word	0x000463d4
   2abd4:	0004a62c 	.word	0x0004a62c

0002abd8 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2abd8:	4b0f      	ldr	r3, [pc, #60]	; (2ac18 <find_node+0x40>)
{
   2abda:	b570      	push	{r4, r5, r6, lr}
   2abdc:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2abde:	6818      	ldr	r0, [r3, #0]
   2abe0:	b170      	cbz	r0, 2ac00 <find_node+0x28>
   2abe2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2abe4:	4603      	mov	r3, r0
   2abe6:	2d00      	cmp	r5, #0
   2abe8:	4628      	mov	r0, r5
   2abea:	bf38      	it	cc
   2abec:	2000      	movcc	r0, #0
   2abee:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   2abf0:	685e      	ldr	r6, [r3, #4]
   2abf2:	428e      	cmp	r6, r1
   2abf4:	d105      	bne.n	2ac02 <find_node+0x2a>
   2abf6:	689e      	ldr	r6, [r3, #8]
   2abf8:	4296      	cmp	r6, r2
   2abfa:	d102      	bne.n	2ac02 <find_node+0x2a>
			*prev_out = prev;
			return curr;
   2abfc:	4618      	mov	r0, r3
			*prev_out = prev;
   2abfe:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   2ac00:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2ac02:	2800      	cmp	r0, #0
   2ac04:	d0fc      	beq.n	2ac00 <find_node+0x28>
	return node->next;
   2ac06:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ac08:	461d      	mov	r5, r3
   2ac0a:	2e00      	cmp	r6, #0
   2ac0c:	4603      	mov	r3, r0
   2ac0e:	4630      	mov	r0, r6
   2ac10:	bf38      	it	cc
   2ac12:	2000      	movcc	r0, #0
   2ac14:	e7ec      	b.n	2abf0 <find_node+0x18>
   2ac16:	bf00      	nop
   2ac18:	20024960 	.word	0x20024960

0002ac1c <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   2ac1c:	4a0c      	ldr	r2, [pc, #48]	; (2ac50 <module_init+0x34>)
{
   2ac1e:	b508      	push	{r3, lr}
	if (initialized) {
   2ac20:	7813      	ldrb	r3, [r2, #0]
   2ac22:	b15b      	cbz	r3, 2ac3c <module_init+0x20>
   2ac24:	480b      	ldr	r0, [pc, #44]	; (2ac54 <module_init+0x38>)
   2ac26:	4b0c      	ldr	r3, [pc, #48]	; (2ac58 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   2ac28:	490c      	ldr	r1, [pc, #48]	; (2ac5c <module_init+0x40>)
   2ac2a:	1ac0      	subs	r0, r0, r3
   2ac2c:	08c0      	lsrs	r0, r0, #3
   2ac2e:	0180      	lsls	r0, r0, #6
   2ac30:	f040 0002 	orr.w	r0, r0, #2
   2ac34:	f016 fdf4 	bl	41820 <log_string_sync>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   2ac38:	2000      	movs	r0, #0
   2ac3a:	bd08      	pop	{r3, pc}
	initialized = true;
   2ac3c:	2101      	movs	r1, #1
   2ac3e:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   2ac40:	4a07      	ldr	r2, [pc, #28]	; (2ac60 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   2ac42:	4808      	ldr	r0, [pc, #32]	; (2ac64 <module_init+0x48>)
	list->tail = NULL;
   2ac44:	e9c2 3300 	strd	r3, r3, [r2]
   2ac48:	f7ff ffaa 	bl	2aba0 <at_cmd_set_notification_handler>
	return 0;
   2ac4c:	e7f4      	b.n	2ac38 <module_init+0x1c>
   2ac4e:	bf00      	nop
   2ac50:	2002bc2e 	.word	0x2002bc2e
   2ac54:	000463e4 	.word	0x000463e4
   2ac58:	000463bc 	.word	0x000463bc
   2ac5c:	0004a65c 	.word	0x0004a65c
   2ac60:	20024960 	.word	0x20024960
   2ac64:	0002ac75 	.word	0x0002ac75

0002ac68 <k_mutex_unlock.constprop.0>:
   2ac68:	4801      	ldr	r0, [pc, #4]	; (2ac70 <k_mutex_unlock.constprop.0+0x8>)
   2ac6a:	f011 bc21 	b.w	3c4b0 <z_impl_k_mutex_unlock>
   2ac6e:	bf00      	nop
   2ac70:	20020b44 	.word	0x20020b44

0002ac74 <notif_dispatch>:
{
   2ac74:	b538      	push	{r3, r4, r5, lr}
   2ac76:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2ac78:	f04f 33ff 	mov.w	r3, #4294967295
   2ac7c:	f04f 32ff 	mov.w	r2, #4294967295
   2ac80:	480d      	ldr	r0, [pc, #52]	; (2acb8 <notif_dispatch+0x44>)
   2ac82:	f011 fb1b 	bl	3c2bc <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2ac86:	4b0d      	ldr	r3, [pc, #52]	; (2acbc <notif_dispatch+0x48>)
   2ac88:	681b      	ldr	r3, [r3, #0]
   2ac8a:	b91b      	cbnz	r3, 2ac94 <notif_dispatch+0x20>
}
   2ac8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   2ac90:	f7ff bfea 	b.w	2ac68 <k_mutex_unlock.constprop.0>
	return node->next;
   2ac94:	681c      	ldr	r4, [r3, #0]
   2ac96:	2c00      	cmp	r4, #0
   2ac98:	bf38      	it	cc
   2ac9a:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   2ac9c:	4629      	mov	r1, r5
   2ac9e:	689a      	ldr	r2, [r3, #8]
   2aca0:	6858      	ldr	r0, [r3, #4]
   2aca2:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2aca4:	2c00      	cmp	r4, #0
   2aca6:	d0f1      	beq.n	2ac8c <notif_dispatch+0x18>
   2aca8:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2acaa:	4623      	mov	r3, r4
   2acac:	2a00      	cmp	r2, #0
   2acae:	bf38      	it	cc
   2acb0:	2200      	movcc	r2, #0
   2acb2:	4614      	mov	r4, r2
   2acb4:	e7f2      	b.n	2ac9c <notif_dispatch+0x28>
   2acb6:	bf00      	nop
   2acb8:	20020b44 	.word	0x20020b44
   2acbc:	20024960 	.word	0x20024960

0002acc0 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   2acc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2acc2:	4606      	mov	r6, r0
	if (handler == NULL) {
   2acc4:	460d      	mov	r5, r1
   2acc6:	b979      	cbnz	r1, 2ace8 <at_notif_register_handler+0x28>
   2acc8:	481d      	ldr	r0, [pc, #116]	; (2ad40 <at_notif_register_handler+0x80>)
   2acca:	4c1e      	ldr	r4, [pc, #120]	; (2ad44 <at_notif_register_handler+0x84>)
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   2accc:	460b      	mov	r3, r1
   2acce:	1a24      	subs	r4, r4, r0
   2acd0:	08e4      	lsrs	r4, r4, #3
   2acd2:	01a4      	lsls	r4, r4, #6
   2acd4:	f044 0001 	orr.w	r0, r4, #1
   2acd8:	4632      	mov	r2, r6
   2acda:	491b      	ldr	r1, [pc, #108]	; (2ad48 <at_notif_register_handler+0x88>)
   2acdc:	f016 fda0 	bl	41820 <log_string_sync>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   2ace0:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   2ace4:	b002      	add	sp, #8
   2ace6:	bd70      	pop	{r4, r5, r6, pc}
   2ace8:	f04f 32ff 	mov.w	r2, #4294967295
   2acec:	f04f 33ff 	mov.w	r3, #4294967295
   2acf0:	4816      	ldr	r0, [pc, #88]	; (2ad4c <at_notif_register_handler+0x8c>)
   2acf2:	f011 fae3 	bl	3c2bc <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   2acf6:	462a      	mov	r2, r5
   2acf8:	4631      	mov	r1, r6
   2acfa:	a801      	add	r0, sp, #4
   2acfc:	f7ff ff6c 	bl	2abd8 <find_node>
   2ad00:	4604      	mov	r4, r0
   2ad02:	b118      	cbz	r0, 2ad0c <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   2ad04:	f7ff ffb0 	bl	2ac68 <k_mutex_unlock.constprop.0>
		return 0;
   2ad08:	2000      	movs	r0, #0
   2ad0a:	e7eb      	b.n	2ace4 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   2ad0c:	200c      	movs	r0, #12
   2ad0e:	f014 f92d 	bl	3ef6c <k_malloc>
   2ad12:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   2ad14:	b920      	cbnz	r0, 2ad20 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   2ad16:	f7ff ffa7 	bl	2ac68 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   2ad1a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ad1e:	e7e1      	b.n	2ace4 <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   2ad20:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   2ad22:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   2ad24:	4a0a      	ldr	r2, [pc, #40]	; (2ad50 <at_notif_register_handler+0x90>)
   2ad26:	6044      	str	r4, [r0, #4]
   2ad28:	6084      	str	r4, [r0, #8]
	parent->next = child;
   2ad2a:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   2ad2c:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   2ad2e:	e9c3 6501 	strd	r6, r5, [r3, #4]
   2ad32:	b911      	cbnz	r1, 2ad3a <at_notif_register_handler+0x7a>
	list->head = node;
   2ad34:	e9c2 3300 	strd	r3, r3, [r2]
}
   2ad38:	e7e4      	b.n	2ad04 <at_notif_register_handler+0x44>
	parent->next = child;
   2ad3a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2ad3c:	6053      	str	r3, [r2, #4]
}
   2ad3e:	e7e1      	b.n	2ad04 <at_notif_register_handler+0x44>
   2ad40:	000463bc 	.word	0x000463bc
   2ad44:	000463e4 	.word	0x000463e4
   2ad48:	0004a67f 	.word	0x0004a67f
   2ad4c:	20020b44 	.word	0x20020b44
   2ad50:	20024960 	.word	0x20024960

0002ad54 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   2ad54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ad56:	4606      	mov	r6, r0
	if (handler == NULL) {
   2ad58:	460d      	mov	r5, r1
   2ad5a:	b979      	cbnz	r1, 2ad7c <at_notif_deregister_handler+0x28>
   2ad5c:	4820      	ldr	r0, [pc, #128]	; (2ade0 <at_notif_deregister_handler+0x8c>)
   2ad5e:	4c21      	ldr	r4, [pc, #132]	; (2ade4 <at_notif_deregister_handler+0x90>)
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   2ad60:	460b      	mov	r3, r1
   2ad62:	1a24      	subs	r4, r4, r0
   2ad64:	08e4      	lsrs	r4, r4, #3
   2ad66:	01a4      	lsls	r4, r4, #6
   2ad68:	f044 0001 	orr.w	r0, r4, #1
   2ad6c:	4632      	mov	r2, r6
   2ad6e:	491e      	ldr	r1, [pc, #120]	; (2ade8 <at_notif_deregister_handler+0x94>)
   2ad70:	f016 fd56 	bl	41820 <log_string_sync>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   2ad74:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   2ad78:	b002      	add	sp, #8
   2ad7a:	bd70      	pop	{r4, r5, r6, pc}
	struct notif_handler *curr, *prev = NULL;
   2ad7c:	2300      	movs	r3, #0
   2ad7e:	9301      	str	r3, [sp, #4]
   2ad80:	f04f 32ff 	mov.w	r2, #4294967295
   2ad84:	f04f 33ff 	mov.w	r3, #4294967295
   2ad88:	4818      	ldr	r0, [pc, #96]	; (2adec <at_notif_deregister_handler+0x98>)
   2ad8a:	f011 fa97 	bl	3c2bc <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   2ad8e:	462a      	mov	r2, r5
   2ad90:	4631      	mov	r1, r6
   2ad92:	a801      	add	r0, sp, #4
   2ad94:	f7ff ff20 	bl	2abd8 <find_node>
	if (curr == NULL) {
   2ad98:	b968      	cbnz	r0, 2adb6 <at_notif_deregister_handler+0x62>
   2ad9a:	4812      	ldr	r0, [pc, #72]	; (2ade4 <at_notif_deregister_handler+0x90>)
   2ad9c:	4b10      	ldr	r3, [pc, #64]	; (2ade0 <at_notif_deregister_handler+0x8c>)
		LOG_WRN("Handler not registered. Nothing to do");
   2ad9e:	4914      	ldr	r1, [pc, #80]	; (2adf0 <at_notif_deregister_handler+0x9c>)
   2ada0:	1ac0      	subs	r0, r0, r3
   2ada2:	08c0      	lsrs	r0, r0, #3
   2ada4:	0180      	lsls	r0, r0, #6
   2ada6:	f040 0002 	orr.w	r0, r0, #2
   2adaa:	f016 fd39 	bl	41820 <log_string_sync>
	k_mutex_unlock(&list_mtx);
   2adae:	f7ff ff5b 	bl	2ac68 <k_mutex_unlock.constprop.0>
	return remove_notif_handler(context, handler);
   2adb2:	2000      	movs	r0, #0
   2adb4:	e7e0      	b.n	2ad78 <at_notif_deregister_handler+0x24>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   2adb6:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   2adb8:	6801      	ldr	r1, [r0, #0]
   2adba:	4b0e      	ldr	r3, [pc, #56]	; (2adf4 <at_notif_deregister_handler+0xa0>)
   2adbc:	b94a      	cbnz	r2, 2add2 <at_notif_deregister_handler+0x7e>
   2adbe:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2adc0:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2adc2:	4290      	cmp	r0, r2
   2adc4:	d100      	bne.n	2adc8 <at_notif_deregister_handler+0x74>
	list->tail = node;
   2adc6:	6059      	str	r1, [r3, #4]
	parent->next = child;
   2adc8:	2300      	movs	r3, #0
   2adca:	6003      	str	r3, [r0, #0]
	k_free(curr);
   2adcc:	f019 ff4e 	bl	44c6c <k_free>
   2add0:	e7ed      	b.n	2adae <at_notif_deregister_handler+0x5a>
   2add2:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2add4:	6859      	ldr	r1, [r3, #4]
   2add6:	4288      	cmp	r0, r1
	list->tail = node;
   2add8:	bf08      	it	eq
   2adda:	605a      	streq	r2, [r3, #4]
}
   2addc:	e7f4      	b.n	2adc8 <at_notif_deregister_handler+0x74>
   2adde:	bf00      	nop
   2ade0:	000463bc 	.word	0x000463bc
   2ade4:	000463e4 	.word	0x000463e4
   2ade8:	0004a67f 	.word	0x0004a67f
   2adec:	20020b44 	.word	0x20020b44
   2adf0:	0004a6b0 	.word	0x0004a6b0
   2adf4:	20024960 	.word	0x20024960

0002adf8 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   2adf8:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   2adfa:	4d05      	ldr	r5, [pc, #20]	; (2ae10 <write_uart_string+0x18>)
   2adfc:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   2adfe:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   2ae02:	b901      	cbnz	r1, 2ae06 <write_uart_string+0xe>
	}
}
   2ae04:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   2ae06:	6828      	ldr	r0, [r5, #0]
   2ae08:	6883      	ldr	r3, [r0, #8]
   2ae0a:	685b      	ldr	r3, [r3, #4]
   2ae0c:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   2ae0e:	e7f6      	b.n	2adfe <write_uart_string+0x6>
   2ae10:	20024978 	.word	0x20024978

0002ae14 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   2ae14:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   2ae16:	4921      	ldr	r1, [pc, #132]	; (2ae9c <cmd_send+0x88>)
{
   2ae18:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   2ae1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2ae1e:	4608      	mov	r0, r1
   2ae20:	f10d 030b 	add.w	r3, sp, #11
   2ae24:	f7ff fe22 	bl	2aa6c <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   2ae28:	1e02      	subs	r2, r0, #0
   2ae2a:	da0e      	bge.n	2ae4a <cmd_send+0x36>
   2ae2c:	481c      	ldr	r0, [pc, #112]	; (2aea0 <cmd_send+0x8c>)
   2ae2e:	4b1d      	ldr	r3, [pc, #116]	; (2aea4 <cmd_send+0x90>)
		LOG_ERR("Error while processing AT command: %d", err);
   2ae30:	491d      	ldr	r1, [pc, #116]	; (2aea8 <cmd_send+0x94>)
   2ae32:	1a1b      	subs	r3, r3, r0
   2ae34:	08db      	lsrs	r3, r3, #3
   2ae36:	019b      	lsls	r3, r3, #6
   2ae38:	f043 0001 	orr.w	r0, r3, #1
   2ae3c:	f016 fcf0 	bl	41820 <log_string_sync>
		state = AT_CMD_ERROR;
   2ae40:	2301      	movs	r3, #1
   2ae42:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   2ae46:	4819      	ldr	r0, [pc, #100]	; (2aeac <cmd_send+0x98>)
   2ae48:	e012      	b.n	2ae70 <cmd_send+0x5c>
	switch (state) {
   2ae4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2ae4e:	2b03      	cmp	r3, #3
   2ae50:	d810      	bhi.n	2ae74 <cmd_send+0x60>
   2ae52:	a101      	add	r1, pc, #4	; (adr r1, 2ae58 <cmd_send+0x44>)
   2ae54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2ae58:	0002ae69 	.word	0x0002ae69
   2ae5c:	0002ae47 	.word	0x0002ae47
   2ae60:	0002ae83 	.word	0x0002ae83
   2ae64:	0002ae95 	.word	0x0002ae95
		write_uart_string(at_buf);
   2ae68:	480c      	ldr	r0, [pc, #48]	; (2ae9c <cmd_send+0x88>)
   2ae6a:	f7ff ffc5 	bl	2adf8 <write_uart_string>
		write_uart_string(OK_STR);
   2ae6e:	4810      	ldr	r0, [pc, #64]	; (2aeb0 <cmd_send+0x9c>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   2ae70:	f7ff ffc2 	bl	2adf8 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   2ae74:	4b0f      	ldr	r3, [pc, #60]	; (2aeb4 <cmd_send+0xa0>)
   2ae76:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   2ae78:	f019 f98c 	bl	44194 <z_impl_uart_irq_rx_enable>
}
   2ae7c:	b00b      	add	sp, #44	; 0x2c
   2ae7e:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   2ae82:	4b0d      	ldr	r3, [pc, #52]	; (2aeb8 <cmd_send+0xa4>)
   2ae84:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   2ae86:	2219      	movs	r2, #25
   2ae88:	2100      	movs	r1, #0
   2ae8a:	a803      	add	r0, sp, #12
   2ae8c:	f01a f88c 	bl	44fa8 <__sprintf_chk>
		write_uart_string(str);
   2ae90:	a803      	add	r0, sp, #12
   2ae92:	e7ed      	b.n	2ae70 <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   2ae94:	4b09      	ldr	r3, [pc, #36]	; (2aebc <cmd_send+0xa8>)
   2ae96:	9200      	str	r2, [sp, #0]
   2ae98:	e7f5      	b.n	2ae86 <cmd_send+0x72>
   2ae9a:	bf00      	nop
   2ae9c:	2002bc2f 	.word	0x2002bc2f
   2aea0:	000463bc 	.word	0x000463bc
   2aea4:	000463dc 	.word	0x000463dc
   2aea8:	0004a6df 	.word	0x0004a6df
   2aeac:	0004a555 	.word	0x0004a555
   2aeb0:	00047a32 	.word	0x00047a32
   2aeb4:	20024978 	.word	0x20024978
   2aeb8:	0004a705 	.word	0x0004a705
   2aebc:	0004a716 	.word	0x0004a716

0002aec0 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   2aec0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2aec4:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   2aec6:	6883      	ldr	r3, [r0, #8]
   2aec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2aeca:	b103      	cbz	r3, 2aece <isr+0xe>
		return api->irq_update(dev);
   2aecc:	4798      	blx	r3
	if (api->irq_rx_ready) {
   2aece:	68a3      	ldr	r3, [r4, #8]
   2aed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2aed2:	b1bb      	cbz	r3, 2af04 <isr+0x44>
		return api->irq_rx_ready(dev);
   2aed4:	4620      	mov	r0, r4
   2aed6:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   2aed8:	b1a0      	cbz	r0, 2af04 <isr+0x44>
   2aeda:	f8df 8140 	ldr.w	r8, [pc, #320]	; 2b01c <isr+0x15c>
   2aede:	4e44      	ldr	r6, [pc, #272]	; (2aff0 <isr+0x130>)
   2aee0:	4647      	mov	r7, r8
   2aee2:	4b44      	ldr	r3, [pc, #272]	; (2aff4 <isr+0x134>)
		if (at_cmd_len > 0) {
   2aee4:	4d44      	ldr	r5, [pc, #272]	; (2aff8 <isr+0x138>)
   2aee6:	1af6      	subs	r6, r6, r3
   2aee8:	08f6      	lsrs	r6, r6, #3
   2aeea:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   2aeee:	07db      	lsls	r3, r3, #31
   2aef0:	d408      	bmi.n	2af04 <isr+0x44>
	if (api->fifo_read) {
   2aef2:	68a3      	ldr	r3, [r4, #8]
   2aef4:	699b      	ldr	r3, [r3, #24]
   2aef6:	b12b      	cbz	r3, 2af04 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   2aef8:	2201      	movs	r2, #1
   2aefa:	4620      	mov	r0, r4
   2aefc:	f10d 0107 	add.w	r1, sp, #7
   2af00:	4798      	blx	r3
   2af02:	b910      	cbnz	r0, 2af0a <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   2af04:	b002      	add	sp, #8
   2af06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   2af0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   2af0e:	2a08      	cmp	r2, #8
   2af10:	d001      	beq.n	2af16 <isr+0x56>
   2af12:	2a7f      	cmp	r2, #127	; 0x7f
   2af14:	d105      	bne.n	2af22 <isr+0x62>
		if (at_cmd_len > 0) {
   2af16:	682b      	ldr	r3, [r5, #0]
   2af18:	2b00      	cmp	r3, #0
   2af1a:	d0e6      	beq.n	2aeea <isr+0x2a>
			at_cmd_len--;
   2af1c:	3b01      	subs	r3, #1
   2af1e:	602b      	str	r3, [r5, #0]
   2af20:	e7e3      	b.n	2aeea <isr+0x2a>
	if (!inside_quotes) {
   2af22:	4936      	ldr	r1, [pc, #216]	; (2affc <isr+0x13c>)
   2af24:	780b      	ldrb	r3, [r1, #0]
   2af26:	b993      	cbnz	r3, 2af4e <isr+0x8e>
		switch (character) {
   2af28:	2a0a      	cmp	r2, #10
   2af2a:	d01e      	beq.n	2af6a <isr+0xaa>
   2af2c:	2a0d      	cmp	r2, #13
   2af2e:	d00a      	beq.n	2af46 <isr+0x86>
   2af30:	b96a      	cbnz	r2, 2af4e <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   2af32:	4b33      	ldr	r3, [pc, #204]	; (2b000 <isr+0x140>)
   2af34:	781b      	ldrb	r3, [r3, #0]
   2af36:	b3a3      	cbz	r3, 2afa2 <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   2af38:	01b0      	lsls	r0, r6, #6
   2af3a:	4932      	ldr	r1, [pc, #200]	; (2b004 <isr+0x144>)
   2af3c:	f040 0002 	orr.w	r0, r0, #2
   2af40:	f016 fc6e 	bl	41820 <log_string_sync>
			return;
   2af44:	e7d1      	b.n	2aeea <isr+0x2a>
			if (term_mode == MODE_CR) {
   2af46:	482e      	ldr	r0, [pc, #184]	; (2b000 <isr+0x140>)
   2af48:	7800      	ldrb	r0, [r0, #0]
   2af4a:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   2af4c:	d029      	beq.n	2afa2 <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   2af4e:	f8d5 c000 	ldr.w	ip, [r5]
   2af52:	f10c 0001 	add.w	r0, ip, #1
   2af56:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   2af5a:	d317      	bcc.n	2af8c <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   2af5c:	01b0      	lsls	r0, r6, #6
   2af5e:	492a      	ldr	r1, [pc, #168]	; (2b008 <isr+0x148>)
   2af60:	f040 0001 	orr.w	r0, r0, #1
   2af64:	f016 fc5c 	bl	41820 <log_string_sync>
		return;
   2af68:	e7bf      	b.n	2aeea <isr+0x2a>
			if (term_mode == MODE_LF) {
   2af6a:	4825      	ldr	r0, [pc, #148]	; (2b000 <isr+0x140>)
   2af6c:	7800      	ldrb	r0, [r0, #0]
   2af6e:	2802      	cmp	r0, #2
   2af70:	d017      	beq.n	2afa2 <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   2af72:	2803      	cmp	r0, #3
   2af74:	d1eb      	bne.n	2af4e <isr+0x8e>
   2af76:	f8d5 c000 	ldr.w	ip, [r5]
   2af7a:	f1bc 0f00 	cmp.w	ip, #0
   2af7e:	d0e6      	beq.n	2af4e <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   2af80:	4822      	ldr	r0, [pc, #136]	; (2b00c <isr+0x14c>)
   2af82:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   2af84:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   2af88:	280d      	cmp	r0, #13
   2af8a:	e7df      	b.n	2af4c <isr+0x8c>
	at_buf[at_cmd_len] = character;
   2af8c:	f8df e07c 	ldr.w	lr, [pc, #124]	; 2b00c <isr+0x14c>
	if (character == '"') {
   2af90:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   2af92:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   2af96:	6028      	str	r0, [r5, #0]
	if (character == '"') {
   2af98:	d1a7      	bne.n	2aeea <isr+0x2a>
	if (!inside_quotes) {
   2af9a:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   2af9e:	700b      	strb	r3, [r1, #0]
   2afa0:	e7a3      	b.n	2aeea <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2afa2:	2200      	movs	r2, #0
   2afa4:	4b19      	ldr	r3, [pc, #100]	; (2b00c <isr+0x14c>)
	inside_quotes = false;
   2afa6:	700a      	strb	r2, [r1, #0]
   2afa8:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2afaa:	6828      	ldr	r0, [r5, #0]
	at_cmd_len = 0;
   2afac:	602a      	str	r2, [r5, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2afae:	541a      	strb	r2, [r3, r0]
		if (*c > ' ') {
   2afb0:	f813 2b01 	ldrb.w	r2, [r3], #1
   2afb4:	2a20      	cmp	r2, #32
   2afb6:	d802      	bhi.n	2afbe <isr+0xfe>
		} else if (*c == '\0') {
   2afb8:	2a00      	cmp	r2, #0
   2afba:	d1f9      	bne.n	2afb0 <isr+0xf0>
   2afbc:	e795      	b.n	2aeea <isr+0x2a>
	if (at_buf[0]) {
   2afbe:	780b      	ldrb	r3, [r1, #0]
   2afc0:	2b00      	cmp	r3, #0
   2afc2:	d092      	beq.n	2aeea <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   2afc4:	4b12      	ldr	r3, [pc, #72]	; (2b010 <isr+0x150>)
   2afc6:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   2afc8:	6883      	ldr	r3, [r0, #8]
   2afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2afcc:	b103      	cbz	r3, 2afd0 <isr+0x110>
		api->irq_rx_disable(dev);
   2afce:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2afd0:	e8d7 3fef 	ldaex	r3, [r7]
   2afd4:	f043 0201 	orr.w	r2, r3, #1
   2afd8:	e8c7 2fe1 	stlex	r1, r2, [r7]
   2afdc:	2900      	cmp	r1, #0
   2afde:	d1f7      	bne.n	2afd0 <isr+0x110>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2afe0:	07da      	lsls	r2, r3, #31
   2afe2:	d482      	bmi.n	2aeea <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   2afe4:	490b      	ldr	r1, [pc, #44]	; (2b014 <isr+0x154>)
   2afe6:	480c      	ldr	r0, [pc, #48]	; (2b018 <isr+0x158>)
   2afe8:	f019 fcd1 	bl	4498e <k_queue_append>
   2afec:	e77d      	b.n	2aeea <isr+0x2a>
   2afee:	bf00      	nop
   2aff0:	000463dc 	.word	0x000463dc
   2aff4:	000463bc 	.word	0x000463bc
   2aff8:	20024968 	.word	0x20024968
   2affc:	2002cc2f 	.word	0x2002cc2f
   2b000:	2002cc30 	.word	0x2002cc30
   2b004:	0004a727 	.word	0x0004a727
   2b008:	0004a753 	.word	0x0004a753
   2b00c:	2002bc2f 	.word	0x2002bc2f
   2b010:	20024978 	.word	0x20024978
   2b014:	2002496c 	.word	0x2002496c
   2b018:	20021a80 	.word	0x20021a80
   2b01c:	20024974 	.word	0x20024974

0002b020 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   2b020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   2b024:	2201      	movs	r2, #1
   2b026:	4b47      	ldr	r3, [pc, #284]	; (2b144 <at_host_init+0x124>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   2b028:	2000      	movs	r0, #0
   2b02a:	4947      	ldr	r1, [pc, #284]	; (2b148 <at_host_init+0x128>)
		term_mode = mode;
   2b02c:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   2b02e:	f7ff fe47 	bl	2acc0 <at_notif_register_handler>
	if (err != 0) {
   2b032:	4c46      	ldr	r4, [pc, #280]	; (2b14c <at_host_init+0x12c>)
   2b034:	4b46      	ldr	r3, [pc, #280]	; (2b150 <at_host_init+0x130>)
   2b036:	4606      	mov	r6, r0
   2b038:	1ae4      	subs	r4, r4, r3
   2b03a:	08e4      	lsrs	r4, r4, #3
   2b03c:	b150      	cbz	r0, 2b054 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   2b03e:	01a0      	lsls	r0, r4, #6
   2b040:	4632      	mov	r2, r6
   2b042:	4944      	ldr	r1, [pc, #272]	; (2b154 <at_host_init+0x134>)
   2b044:	f040 0001 	orr.w	r0, r0, #1
   2b048:	f016 fbea 	bl	41820 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   2b04c:	4630      	mov	r0, r6
   2b04e:	b004      	add	sp, #16
   2b050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b054:	4840      	ldr	r0, [pc, #256]	; (2b158 <at_host_init+0x138>)
   2b056:	f010 fceb 	bl	3ba30 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   2b05a:	4d40      	ldr	r5, [pc, #256]	; (2b15c <at_host_init+0x13c>)
   2b05c:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   2b05e:	b988      	cbnz	r0, 2b084 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   2b060:	01a0      	lsls	r0, r4, #6
   2b062:	4a3d      	ldr	r2, [pc, #244]	; (2b158 <at_host_init+0x138>)
   2b064:	493e      	ldr	r1, [pc, #248]	; (2b160 <at_host_init+0x140>)
   2b066:	f040 0001 	orr.w	r0, r0, #1
   2b06a:	f016 fbd9 	bl	41820 <log_string_sync>
		return -EINVAL;
   2b06e:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   2b072:	01a0      	lsls	r0, r4, #6
   2b074:	493b      	ldr	r1, [pc, #236]	; (2b164 <at_host_init+0x144>)
   2b076:	f040 0001 	orr.w	r0, r0, #1
   2b07a:	f016 fbd1 	bl	41820 <log_string_sync>
		return -EFAULT;
   2b07e:	f06f 060d 	mvn.w	r6, #13
   2b082:	e7e3      	b.n	2b04c <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   2b084:	f019 fd55 	bl	44b32 <z_impl_k_uptime_ticks>
   2b088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2b08c:	460a      	mov	r2, r1
   2b08e:	fba0 0103 	umull	r0, r1, r0, r3
   2b092:	fb03 1102 	mla	r1, r3, r2, r1
   2b096:	0bc7      	lsrs	r7, r0, #15
   2b098:	ea4f 1884 	mov.w	r8, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   2b09c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 2b180 <at_host_init+0x160>
   2b0a0:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
   2b0a4:	f048 0903 	orr.w	r9, r8, #3
		err = uart_err_check(uart_dev);
   2b0a8:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   2b0aa:	6883      	ldr	r3, [r0, #8]
   2b0ac:	689b      	ldr	r3, [r3, #8]
   2b0ae:	b383      	cbz	r3, 2b112 <at_host_init+0xf2>
		return api->err_check(dev);
   2b0b0:	4798      	blx	r3
		if (err) {
   2b0b2:	9001      	str	r0, [sp, #4]
   2b0b4:	b368      	cbz	r0, 2b112 <at_host_init+0xf2>
   2b0b6:	f019 fd3c 	bl	44b32 <z_impl_k_uptime_ticks>
   2b0ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2b0be:	468c      	mov	ip, r1
   2b0c0:	fba0 0103 	umull	r0, r1, r0, r3
   2b0c4:	fb03 110c 	mla	r1, r3, ip, r1
   2b0c8:	0bc3      	lsrs	r3, r0, #15
   2b0ca:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   2b0ce:	1bdb      	subs	r3, r3, r7
   2b0d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2b0d4:	9a01      	ldr	r2, [sp, #4]
   2b0d6:	d907      	bls.n	2b0e8 <at_host_init+0xc8>
				LOG_ERR("UART check failed: %d. "
   2b0d8:	4923      	ldr	r1, [pc, #140]	; (2b168 <at_host_init+0x148>)
   2b0da:	f048 0001 	orr.w	r0, r8, #1
   2b0de:	f016 fb9f 	bl	41820 <log_string_sync>
				return -EIO;
   2b0e2:	f06f 0204 	mvn.w	r2, #4
   2b0e6:	e7c4      	b.n	2b072 <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   2b0e8:	4651      	mov	r1, sl
   2b0ea:	4648      	mov	r0, r9
   2b0ec:	f016 fb98 	bl	41820 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   2b0f0:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   2b0f2:	6883      	ldr	r3, [r0, #8]
   2b0f4:	699b      	ldr	r3, [r3, #24]
   2b0f6:	b92b      	cbnz	r3, 2b104 <at_host_init+0xe4>
	return z_impl_k_sleep(timeout);
   2b0f8:	2100      	movs	r1, #0
   2b0fa:	f44f 70a4 	mov.w	r0, #328	; 0x148
   2b0fe:	f012 fcbf 	bl	3da80 <z_impl_k_sleep>
	} while (err);
   2b102:	e7d1      	b.n	2b0a8 <at_host_init+0x88>
		return api->fifo_read(dev, rx_data, size);
   2b104:	2201      	movs	r2, #1
   2b106:	f10d 010f 	add.w	r1, sp, #15
   2b10a:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   2b10c:	2800      	cmp	r0, #0
   2b10e:	d1ef      	bne.n	2b0f0 <at_host_init+0xd0>
   2b110:	e7f2      	b.n	2b0f8 <at_host_init+0xd8>
	uart_irq_callback_set(uart_dev, isr);
   2b112:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   2b114:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   2b116:	b123      	cbz	r3, 2b122 <at_host_init+0x102>
   2b118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2b11a:	b113      	cbz	r3, 2b122 <at_host_init+0x102>
		api->irq_callback_set(dev, cb, user_data);
   2b11c:	2200      	movs	r2, #0
   2b11e:	4913      	ldr	r1, [pc, #76]	; (2b16c <at_host_init+0x14c>)
   2b120:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2b122:	2200      	movs	r2, #0
   2b124:	4b12      	ldr	r3, [pc, #72]	; (2b170 <at_host_init+0x150>)
   2b126:	4913      	ldr	r1, [pc, #76]	; (2b174 <at_host_init+0x154>)
   2b128:	601a      	str	r2, [r3, #0]
   2b12a:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   2b12e:	4812      	ldr	r0, [pc, #72]	; (2b178 <at_host_init+0x158>)
   2b130:	230a      	movs	r3, #10
   2b132:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2b136:	4911      	ldr	r1, [pc, #68]	; (2b17c <at_host_init+0x15c>)
   2b138:	f012 ff24 	bl	3df84 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   2b13c:	6828      	ldr	r0, [r5, #0]
   2b13e:	f019 f829 	bl	44194 <z_impl_uart_irq_rx_enable>
	return err;
   2b142:	e783      	b.n	2b04c <at_host_init+0x2c>
   2b144:	2002cc30 	.word	0x2002cc30
   2b148:	0004419f 	.word	0x0004419f
   2b14c:	000463dc 	.word	0x000463dc
   2b150:	000463bc 	.word	0x000463bc
   2b154:	0004a773 	.word	0x0004a773
   2b158:	00048efb 	.word	0x00048efb
   2b15c:	20024978 	.word	0x20024978
   2b160:	0004a791 	.word	0x0004a791
   2b164:	0004a80c 	.word	0x0004a80c
   2b168:	0004a7a1 	.word	0x0004a7a1
   2b16c:	0002aec1 	.word	0x0002aec1
   2b170:	2002496c 	.word	0x2002496c
   2b174:	0002ae15 	.word	0x0002ae15
   2b178:	20021a80 	.word	0x20021a80
   2b17c:	2002ec38 	.word	0x2002ec38
   2b180:	0004a7d7 	.word	0x0004a7d7

0002b184 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   2b184:	4b06      	ldr	r3, [pc, #24]	; (2b1a0 <is_valid_notification_char+0x1c>)
   2b186:	5cc3      	ldrb	r3, [r0, r3]
   2b188:	f003 0303 	and.w	r3, r3, #3
   2b18c:	2b02      	cmp	r3, #2
   2b18e:	bf08      	it	eq
   2b190:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   2b192:	3841      	subs	r0, #65	; 0x41
   2b194:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   2b196:	2819      	cmp	r0, #25
   2b198:	bf8c      	ite	hi
   2b19a:	2000      	movhi	r0, #0
   2b19c:	2001      	movls	r0, #1
   2b19e:	4770      	bx	lr
   2b1a0:	0004f35b 	.word	0x0004f35b

0002b1a4 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   2b1a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   2b1a8:	6805      	ldr	r5, [r0, #0]
{
   2b1aa:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   2b1ac:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b1ae:	782b      	ldrb	r3, [r5, #0]
{
   2b1b0:	4680      	mov	r8, r0
   2b1b2:	460f      	mov	r7, r1
   2b1b4:	4616      	mov	r6, r2
   2b1b6:	2b00      	cmp	r3, #0
   2b1b8:	f000 80c8 	beq.w	2b34c <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   2b1bc:	4b65      	ldr	r3, [pc, #404]	; (2b354 <at_parse_process_element+0x1b0>)
   2b1be:	781c      	ldrb	r4, [r3, #0]
   2b1c0:	2c06      	cmp	r4, #6
   2b1c2:	d110      	bne.n	2b1e6 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   2b1c4:	1c6b      	adds	r3, r5, #1
   2b1c6:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   2b1c8:	9a00      	ldr	r2, [sp, #0]
   2b1ca:	7810      	ldrb	r0, [r2, #0]
   2b1cc:	f7ff ffda 	bl	2b184 <is_valid_notification_char>
   2b1d0:	b930      	cbnz	r0, 2b1e0 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2b1d2:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2b1d4:	462a      	mov	r2, r5
   2b1d6:	4639      	mov	r1, r7
   2b1d8:	4630      	mov	r0, r6
   2b1da:	f019 f85c 	bl	44296 <at_params_string_put>
   2b1de:	e01b      	b.n	2b218 <at_parse_process_element+0x74>
			tmpstr++;
   2b1e0:	3201      	adds	r2, #1
   2b1e2:	9200      	str	r2, [sp, #0]
   2b1e4:	e7f0      	b.n	2b1c8 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   2b1e6:	2c07      	cmp	r4, #7
   2b1e8:	d124      	bne.n	2b234 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   2b1ea:	4668      	mov	r0, sp
   2b1ec:	f018 ffe3 	bl	441b6 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   2b1f0:	9a00      	ldr	r2, [sp, #0]
   2b1f2:	7810      	ldrb	r0, [r2, #0]
   2b1f4:	f7ff ffc6 	bl	2b184 <is_valid_notification_char>
   2b1f8:	b9a8      	cbnz	r0, 2b226 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   2b1fa:	1b53      	subs	r3, r2, r5
   2b1fc:	4639      	mov	r1, r7
   2b1fe:	462a      	mov	r2, r5
   2b200:	4630      	mov	r0, r6
   2b202:	f019 f848 	bl	44296 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   2b206:	9b00      	ldr	r3, [sp, #0]
   2b208:	781a      	ldrb	r2, [r3, #0]
   2b20a:	2a3d      	cmp	r2, #61	; 0x3d
   2b20c:	d10e      	bne.n	2b22c <at_parse_process_element+0x88>
   2b20e:	785a      	ldrb	r2, [r3, #1]
   2b210:	2a3f      	cmp	r2, #63	; 0x3f
   2b212:	d101      	bne.n	2b218 <at_parse_process_element+0x74>
			tmpstr += 2;
   2b214:	3302      	adds	r3, #2
			tmpstr++;
   2b216:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   2b218:	2000      	movs	r0, #0
	*str = tmpstr;
   2b21a:	9b00      	ldr	r3, [sp, #0]
   2b21c:	f8c8 3000 	str.w	r3, [r8]
}
   2b220:	b023      	add	sp, #140	; 0x8c
   2b222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   2b226:	3201      	adds	r2, #1
   2b228:	9200      	str	r2, [sp, #0]
   2b22a:	e7e1      	b.n	2b1f0 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   2b22c:	2a3f      	cmp	r2, #63	; 0x3f
   2b22e:	d1f3      	bne.n	2b218 <at_parse_process_element+0x74>
			tmpstr++;
   2b230:	3301      	adds	r3, #1
   2b232:	e7f0      	b.n	2b216 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   2b234:	2c08      	cmp	r4, #8
   2b236:	d103      	bne.n	2b240 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   2b238:	4610      	mov	r0, r2
   2b23a:	f019 f803 	bl	44244 <at_params_empty_put>
   2b23e:	e7eb      	b.n	2b218 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   2b240:	2c02      	cmp	r4, #2
   2b242:	d111      	bne.n	2b268 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   2b244:	9a00      	ldr	r2, [sp, #0]
   2b246:	7811      	ldrb	r1, [r2, #0]
   2b248:	4608      	mov	r0, r1
   2b24a:	f018 ffab 	bl	441a4 <is_lfcr>
   2b24e:	b918      	cbnz	r0, 2b258 <at_parse_process_element+0xb4>
   2b250:	b111      	cbz	r1, 2b258 <at_parse_process_element+0xb4>
			tmpstr++;
   2b252:	3201      	adds	r2, #1
   2b254:	9200      	str	r2, [sp, #0]
   2b256:	e7f5      	b.n	2b244 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   2b258:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   2b25a:	462a      	mov	r2, r5
   2b25c:	4639      	mov	r1, r7
   2b25e:	4630      	mov	r0, r6
   2b260:	f019 f819 	bl	44296 <at_params_string_put>
		tmpstr++;
   2b264:	9b00      	ldr	r3, [sp, #0]
   2b266:	e7e3      	b.n	2b230 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   2b268:	2c03      	cmp	r4, #3
   2b26a:	d109      	bne.n	2b280 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   2b26c:	9b00      	ldr	r3, [sp, #0]
   2b26e:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   2b270:	2a22      	cmp	r2, #34	; 0x22
   2b272:	d003      	beq.n	2b27c <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b274:	b112      	cbz	r2, 2b27c <at_parse_process_element+0xd8>
			tmpstr++;
   2b276:	3301      	adds	r3, #1
   2b278:	9300      	str	r3, [sp, #0]
   2b27a:	e7f7      	b.n	2b26c <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   2b27c:	1b5b      	subs	r3, r3, r5
   2b27e:	e7ec      	b.n	2b25a <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   2b280:	2c01      	cmp	r4, #1
   2b282:	d13c      	bne.n	2b2fe <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2b284:	4628      	mov	r0, r5
   2b286:	220a      	movs	r2, #10
   2b288:	a901      	add	r1, sp, #4
   2b28a:	f014 fde7 	bl	3fe5c <strtoul>
		tmpstr = next;
   2b28e:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b290:	4d31      	ldr	r5, [pc, #196]	; (2b358 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2b292:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   2b294:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   2b296:	9800      	ldr	r0, [sp, #0]
   2b298:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   2b29a:	2b29      	cmp	r3, #41	; 0x29
   2b29c:	d028      	beq.n	2b2f0 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b29e:	b33b      	cbz	r3, 2b2f0 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b2a0:	3b2c      	subs	r3, #44	; 0x2c
   2b2a2:	b2db      	uxtb	r3, r3
   2b2a4:	3001      	adds	r0, #1
   2b2a6:	2b11      	cmp	r3, #17
				tmparray[i++] =
   2b2a8:	9000      	str	r0, [sp, #0]
   2b2aa:	d803      	bhi.n	2b2b4 <at_parse_process_element+0x110>
   2b2ac:	fa25 f303 	lsr.w	r3, r5, r3
   2b2b0:	07db      	lsls	r3, r3, #31
   2b2b2:	d408      	bmi.n	2b2c6 <at_parse_process_element+0x122>
				tmpstr++;
   2b2b4:	46a1      	mov	r9, r4
   2b2b6:	e004      	b.n	2b2c2 <at_parse_process_element+0x11e>
					tmpstr = next;
   2b2b8:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2b2ba:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   2b2be:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2b2c0:	d015      	beq.n	2b2ee <at_parse_process_element+0x14a>
				tmpstr++;
   2b2c2:	464c      	mov	r4, r9
   2b2c4:	e7e7      	b.n	2b296 <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2b2c6:	220a      	movs	r2, #10
   2b2c8:	a901      	add	r1, sp, #4
   2b2ca:	f014 fdc7 	bl	3fe5c <strtoul>
				tmparray[i++] =
   2b2ce:	ab22      	add	r3, sp, #136	; 0x88
   2b2d0:	f104 0901 	add.w	r9, r4, #1
   2b2d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2b2d8:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   2b2dc:	9800      	ldr	r0, [sp, #0]
   2b2de:	f7f1 ffbd 	bl	1d25c <strlen>
   2b2e2:	4604      	mov	r4, r0
   2b2e4:	9801      	ldr	r0, [sp, #4]
   2b2e6:	f7f1 ffb9 	bl	1d25c <strlen>
   2b2ea:	4284      	cmp	r4, r0
   2b2ec:	d1e4      	bne.n	2b2b8 <at_parse_process_element+0x114>
   2b2ee:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   2b2f0:	4639      	mov	r1, r7
   2b2f2:	4630      	mov	r0, r6
   2b2f4:	00a3      	lsls	r3, r4, #2
   2b2f6:	aa02      	add	r2, sp, #8
   2b2f8:	f018 fff3 	bl	442e2 <at_params_array_put>
   2b2fc:	e7b2      	b.n	2b264 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   2b2fe:	2c04      	cmp	r4, #4
   2b300:	d115      	bne.n	2b32e <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   2b302:	220a      	movs	r2, #10
   2b304:	4628      	mov	r0, r5
   2b306:	a902      	add	r1, sp, #8
   2b308:	f014 fda8 	bl	3fe5c <strtoul>
		tmpstr = next;
   2b30c:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   2b30e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   2b312:	4602      	mov	r2, r0
		tmpstr = next;
   2b314:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   2b316:	da05      	bge.n	2b324 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   2b318:	b282      	uxth	r2, r0
   2b31a:	4639      	mov	r1, r7
   2b31c:	4630      	mov	r0, r6
   2b31e:	f018 ff7c 	bl	4421a <at_params_short_put>
   2b322:	e779      	b.n	2b218 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   2b324:	4639      	mov	r1, r7
   2b326:	4630      	mov	r0, r6
   2b328:	f018 ffa0 	bl	4426c <at_params_int_put>
   2b32c:	e774      	b.n	2b218 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   2b32e:	2c05      	cmp	r4, #5
   2b330:	f47f af72 	bne.w	2b218 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   2b334:	4909      	ldr	r1, [pc, #36]	; (2b35c <at_parse_process_element+0x1b8>)
   2b336:	9b00      	ldr	r3, [sp, #0]
   2b338:	781a      	ldrb	r2, [r3, #0]
   2b33a:	5c52      	ldrb	r2, [r2, r1]
   2b33c:	f012 0f44 	tst.w	r2, #68	; 0x44
   2b340:	d101      	bne.n	2b346 <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   2b342:	1b5b      	subs	r3, r3, r5
   2b344:	e746      	b.n	2b1d4 <at_parse_process_element+0x30>
			tmpstr++;
   2b346:	3301      	adds	r3, #1
   2b348:	9300      	str	r3, [sp, #0]
   2b34a:	e7f4      	b.n	2b336 <at_parse_process_element+0x192>
		return -1;
   2b34c:	f04f 30ff 	mov.w	r0, #4294967295
   2b350:	e766      	b.n	2b220 <at_parse_process_element+0x7c>
   2b352:	bf00      	nop
   2b354:	2002cc31 	.word	0x2002cc31
   2b358:	00024001 	.word	0x00024001
   2b35c:	0004f35b 	.word	0x0004f35b

0002b360 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   2b360:	b510      	push	{r4, lr}
   2b362:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   2b364:	f7f1 ff7a 	bl	1d25c <strlen>
   2b368:	2801      	cmp	r0, #1
   2b36a:	d922      	bls.n	2b3b2 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   2b36c:	7821      	ldrb	r1, [r4, #0]
   2b36e:	4b13      	ldr	r3, [pc, #76]	; (2b3bc <is_command+0x5c>)
   2b370:	5cca      	ldrb	r2, [r1, r3]
   2b372:	f002 0203 	and.w	r2, r2, #3
   2b376:	2a02      	cmp	r2, #2
   2b378:	bf08      	it	eq
   2b37a:	3920      	subeq	r1, #32
   2b37c:	2941      	cmp	r1, #65	; 0x41
   2b37e:	461a      	mov	r2, r3
   2b380:	d117      	bne.n	2b3b2 <is_command+0x52>
   2b382:	7863      	ldrb	r3, [r4, #1]
   2b384:	5cd2      	ldrb	r2, [r2, r3]
   2b386:	f002 0203 	and.w	r2, r2, #3
   2b38a:	2a02      	cmp	r2, #2
   2b38c:	bf08      	it	eq
   2b38e:	3b20      	subeq	r3, #32
   2b390:	2b54      	cmp	r3, #84	; 0x54
   2b392:	d10e      	bne.n	2b3b2 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b394:	78a2      	ldrb	r2, [r4, #2]
   2b396:	2a25      	cmp	r2, #37	; 0x25
   2b398:	d00d      	beq.n	2b3b6 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   2b39a:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2b39e:	2b23      	cmp	r3, #35	; 0x23
   2b3a0:	d009      	beq.n	2b3b6 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   2b3a2:	4610      	mov	r0, r2
   2b3a4:	f018 fefe 	bl	441a4 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   2b3a8:	b910      	cbnz	r0, 2b3b0 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b3aa:	fab2 f082 	clz	r0, r2
   2b3ae:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2b3b0:	bd10      	pop	{r4, pc}
		return false;
   2b3b2:	2000      	movs	r0, #0
   2b3b4:	e7fc      	b.n	2b3b0 <is_command+0x50>
		return true;
   2b3b6:	2001      	movs	r0, #1
   2b3b8:	e7fa      	b.n	2b3b0 <is_command+0x50>
   2b3ba:	bf00      	nop
   2b3bc:	0004f35b 	.word	0x0004f35b

0002b3c0 <at_parse_detect_type>:
{
   2b3c0:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   2b3c2:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2b3c4:	2900      	cmp	r1, #0
{
   2b3c6:	4605      	mov	r5, r0
   2b3c8:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2b3ca:	d141      	bne.n	2b450 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b3cc:	2a2b      	cmp	r2, #43	; 0x2b
   2b3ce:	4e29      	ldr	r6, [pc, #164]	; (2b474 <at_parse_detect_type+0xb4>)
   2b3d0:	d001      	beq.n	2b3d6 <at_parse_detect_type+0x16>
   2b3d2:	2a25      	cmp	r2, #37	; 0x25
   2b3d4:	d104      	bne.n	2b3e0 <at_parse_detect_type+0x20>
	state = new_state;
   2b3d6:	2306      	movs	r3, #6
   2b3d8:	7033      	strb	r3, [r6, #0]
	return 0;
   2b3da:	2000      	movs	r0, #0
	*str = tmpstr;
   2b3dc:	602c      	str	r4, [r5, #0]
}
   2b3de:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   2b3e0:	4620      	mov	r0, r4
   2b3e2:	f7ff ffbd 	bl	2b360 <is_command>
   2b3e6:	b388      	cbz	r0, 2b44c <at_parse_detect_type+0x8c>
	state = new_state;
   2b3e8:	2307      	movs	r3, #7
   2b3ea:	e7f5      	b.n	2b3d8 <at_parse_detect_type+0x18>
	if (chr == '"') {
   2b3ec:	2a22      	cmp	r2, #34	; 0x22
   2b3ee:	d006      	beq.n	2b3fe <at_parse_detect_type+0x3e>
	if (chr == '(') {
   2b3f0:	2a28      	cmp	r2, #40	; 0x28
   2b3f2:	d109      	bne.n	2b408 <at_parse_detect_type+0x48>
   2b3f4:	2201      	movs	r2, #1
   2b3f6:	4b1f      	ldr	r3, [pc, #124]	; (2b474 <at_parse_detect_type+0xb4>)
		tmpstr++;
   2b3f8:	4414      	add	r4, r2
	state = new_state;
   2b3fa:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2b3fc:	e7ed      	b.n	2b3da <at_parse_detect_type+0x1a>
	state = new_state;
   2b3fe:	2203      	movs	r2, #3
   2b400:	4b1c      	ldr	r3, [pc, #112]	; (2b474 <at_parse_detect_type+0xb4>)
		tmpstr++;
   2b402:	3401      	adds	r4, #1
	state = new_state;
   2b404:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2b406:	e7e8      	b.n	2b3da <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   2b408:	4610      	mov	r0, r2
   2b40a:	f018 fecb 	bl	441a4 <is_lfcr>
   2b40e:	b170      	cbz	r0, 2b42e <at_parse_detect_type+0x6e>
   2b410:	4918      	ldr	r1, [pc, #96]	; (2b474 <at_parse_detect_type+0xb4>)
   2b412:	7808      	ldrb	r0, [r1, #0]
   2b414:	2804      	cmp	r0, #4
   2b416:	d108      	bne.n	2b42a <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   2b418:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2b41c:	f018 fec2 	bl	441a4 <is_lfcr>
   2b420:	2800      	cmp	r0, #0
   2b422:	d1f9      	bne.n	2b418 <at_parse_detect_type+0x58>
	state = new_state;
   2b424:	2305      	movs	r3, #5
   2b426:	700b      	strb	r3, [r1, #0]
}
   2b428:	e7d7      	b.n	2b3da <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   2b42a:	2808      	cmp	r0, #8
   2b42c:	d0d5      	beq.n	2b3da <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b42e:	3a2c      	subs	r2, #44	; 0x2c
   2b430:	b2d2      	uxtb	r2, r2
   2b432:	2a11      	cmp	r2, #17
   2b434:	d807      	bhi.n	2b446 <at_parse_detect_type+0x86>
   2b436:	4b10      	ldr	r3, [pc, #64]	; (2b478 <at_parse_detect_type+0xb8>)
   2b438:	fa23 f202 	lsr.w	r2, r3, r2
   2b43c:	07d3      	lsls	r3, r2, #31
   2b43e:	d502      	bpl.n	2b446 <at_parse_detect_type+0x86>
	state = new_state;
   2b440:	2208      	movs	r2, #8
   2b442:	4b0c      	ldr	r3, [pc, #48]	; (2b474 <at_parse_detect_type+0xb4>)
   2b444:	e013      	b.n	2b46e <at_parse_detect_type+0xae>
		return -1;
   2b446:	f04f 30ff 	mov.w	r0, #4294967295
   2b44a:	e7c8      	b.n	2b3de <at_parse_detect_type+0x1e>
	state = new_state;
   2b44c:	2302      	movs	r3, #2
   2b44e:	e7c3      	b.n	2b3d8 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   2b450:	dd03      	ble.n	2b45a <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b452:	2a2b      	cmp	r2, #43	; 0x2b
   2b454:	d0f7      	beq.n	2b446 <at_parse_detect_type+0x86>
   2b456:	2a25      	cmp	r2, #37	; 0x25
   2b458:	d0f5      	beq.n	2b446 <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   2b45a:	4b08      	ldr	r3, [pc, #32]	; (2b47c <at_parse_detect_type+0xbc>)
   2b45c:	5cd3      	ldrb	r3, [r2, r3]
   2b45e:	0759      	lsls	r1, r3, #29
   2b460:	d403      	bmi.n	2b46a <at_parse_detect_type+0xaa>
   2b462:	2a2d      	cmp	r2, #45	; 0x2d
   2b464:	d001      	beq.n	2b46a <at_parse_detect_type+0xaa>
   2b466:	2a2b      	cmp	r2, #43	; 0x2b
   2b468:	d1c0      	bne.n	2b3ec <at_parse_detect_type+0x2c>
	state = new_state;
   2b46a:	2204      	movs	r2, #4
   2b46c:	4b01      	ldr	r3, [pc, #4]	; (2b474 <at_parse_detect_type+0xb4>)
   2b46e:	701a      	strb	r2, [r3, #0]
}
   2b470:	e7b3      	b.n	2b3da <at_parse_detect_type+0x1a>
   2b472:	bf00      	nop
   2b474:	2002cc31 	.word	0x2002cc31
   2b478:	00024001 	.word	0x00024001
   2b47c:	0004f35b 	.word	0x0004f35b

0002b480 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   2b480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b484:	4688      	mov	r8, r1
   2b486:	4616      	mov	r6, r2
   2b488:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   2b48a:	4604      	mov	r4, r0
   2b48c:	2800      	cmp	r0, #0
   2b48e:	d07e      	beq.n	2b58e <at_parser_max_params_from_str+0x10e>
   2b490:	2a00      	cmp	r2, #0
   2b492:	d07c      	beq.n	2b58e <at_parser_max_params_from_str+0x10e>
   2b494:	6853      	ldr	r3, [r2, #4]
   2b496:	2b00      	cmp	r3, #0
   2b498:	d079      	beq.n	2b58e <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   2b49a:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   2b49c:	4610      	mov	r0, r2
   2b49e:	f000 f8eb 	bl	2b678 <at_params_list_clear>
	const char *str = *at_params_str;
   2b4a2:	9401      	str	r4, [sp, #4]
	int index = 0;
   2b4a4:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   2b4a6:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   2b4a8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 2b598 <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   2b4ac:	429f      	cmp	r7, r3
   2b4ae:	bf28      	it	cs
   2b4b0:	461f      	movcs	r7, r3
	state = IDLE;
   2b4b2:	4b38      	ldr	r3, [pc, #224]	; (2b594 <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b4b4:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2b59c <at_parser_max_params_from_str+0x11c>
   2b4b8:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   2b4ba:	9b01      	ldr	r3, [sp, #4]
   2b4bc:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b4be:	2a00      	cmp	r2, #0
   2b4c0:	d04b      	beq.n	2b55a <at_parser_max_params_from_str+0xda>
   2b4c2:	42a7      	cmp	r7, r4
   2b4c4:	d949      	bls.n	2b55a <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   2b4c6:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   2b4ca:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   2b4cc:	0711      	lsls	r1, r2, #28
			str++;
   2b4ce:	bf48      	it	mi
   2b4d0:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   2b4d2:	4621      	mov	r1, r4
			str++;
   2b4d4:	bf48      	it	mi
   2b4d6:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   2b4d8:	f7ff ff72 	bl	2b3c0 <at_parse_detect_type>
   2b4dc:	1c42      	adds	r2, r0, #1
   2b4de:	d03c      	beq.n	2b55a <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   2b4e0:	4632      	mov	r2, r6
   2b4e2:	4621      	mov	r1, r4
   2b4e4:	a801      	add	r0, sp, #4
   2b4e6:	f7ff fe5d 	bl	2b1a4 <at_parse_process_element>
   2b4ea:	1c43      	adds	r3, r0, #1
   2b4ec:	d035      	beq.n	2b55a <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   2b4ee:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b4f0:	781a      	ldrb	r2, [r3, #0]
   2b4f2:	3a2c      	subs	r2, #44	; 0x2c
   2b4f4:	b2d2      	uxtb	r2, r2
   2b4f6:	2a11      	cmp	r2, #17
   2b4f8:	d81a      	bhi.n	2b530 <at_parser_max_params_from_str+0xb0>
   2b4fa:	fa2a f202 	lsr.w	r2, sl, r2
   2b4fe:	07d1      	lsls	r1, r2, #31
   2b500:	d516      	bpl.n	2b530 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   2b502:	7858      	ldrb	r0, [r3, #1]
   2b504:	f018 fe4e 	bl	441a4 <is_lfcr>
   2b508:	b178      	cbz	r0, 2b52a <at_parser_max_params_from_str+0xaa>
				index++;
   2b50a:	3401      	adds	r4, #1
				if (index == max_params) {
   2b50c:	42bc      	cmp	r4, r7
   2b50e:	d039      	beq.n	2b584 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   2b510:	4621      	mov	r1, r4
   2b512:	a801      	add	r0, sp, #4
   2b514:	f7ff ff54 	bl	2b3c0 <at_parse_detect_type>
   2b518:	1c42      	adds	r2, r0, #1
   2b51a:	d01e      	beq.n	2b55a <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   2b51c:	4632      	mov	r2, r6
   2b51e:	4621      	mov	r1, r4
   2b520:	a801      	add	r0, sp, #4
   2b522:	f7ff fe3f 	bl	2b1a4 <at_parse_process_element>
   2b526:	1c43      	adds	r3, r0, #1
   2b528:	d017      	beq.n	2b55a <at_parser_max_params_from_str+0xda>
			str++;
   2b52a:	9b01      	ldr	r3, [sp, #4]
   2b52c:	3301      	adds	r3, #1
   2b52e:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   2b530:	9a01      	ldr	r2, [sp, #4]
   2b532:	7810      	ldrb	r0, [r2, #0]
   2b534:	f018 fe36 	bl	441a4 <is_lfcr>
   2b538:	b1f8      	cbz	r0, 2b57a <at_parser_max_params_from_str+0xfa>
   2b53a:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   2b53c:	7811      	ldrb	r1, [r2, #0]
   2b53e:	4693      	mov	fp, r2
   2b540:	4608      	mov	r0, r1
   2b542:	3201      	adds	r2, #1
   2b544:	f018 fe2e 	bl	441a4 <is_lfcr>
   2b548:	2800      	cmp	r0, #0
   2b54a:	d1f7      	bne.n	2b53c <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b54c:	b119      	cbz	r1, 2b556 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b54e:	292b      	cmp	r1, #43	; 0x2b
   2b550:	d001      	beq.n	2b556 <at_parser_max_params_from_str+0xd6>
   2b552:	2925      	cmp	r1, #37	; 0x25
   2b554:	d111      	bne.n	2b57a <at_parser_max_params_from_str+0xfa>
				str += i;
   2b556:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   2b55a:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   2b55c:	b9a5      	cbnz	r5, 2b588 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b55e:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   2b560:	2a00      	cmp	r2, #0
   2b562:	bf0c      	ite	eq
   2b564:	2000      	moveq	r0, #0
   2b566:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   2b56a:	f1b8 0f00 	cmp.w	r8, #0
   2b56e:	d001      	beq.n	2b574 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   2b570:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   2b574:	b003      	add	sp, #12
   2b576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   2b57a:	3401      	adds	r4, #1
			oversized = true;
   2b57c:	42bc      	cmp	r4, r7
   2b57e:	bf08      	it	eq
   2b580:	2501      	moveq	r5, #1
   2b582:	e79a      	b.n	2b4ba <at_parser_max_params_from_str+0x3a>
					oversized = true;
   2b584:	4605      	mov	r5, r0
   2b586:	e7e8      	b.n	2b55a <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   2b588:	f06f 0006 	mvn.w	r0, #6
   2b58c:	e7ed      	b.n	2b56a <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   2b58e:	f06f 0015 	mvn.w	r0, #21
   2b592:	e7ef      	b.n	2b574 <at_parser_max_params_from_str+0xf4>
   2b594:	2002cc31 	.word	0x2002cc31
   2b598:	0004f35b 	.word	0x0004f35b
   2b59c:	00024001 	.word	0x00024001

0002b5a0 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   2b5a0:	b538      	push	{r3, r4, r5, lr}
   2b5a2:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   2b5a4:	4605      	mov	r5, r0
   2b5a6:	b960      	cbnz	r0, 2b5c2 <at_params_get+0x22>
   2b5a8:	490a      	ldr	r1, [pc, #40]	; (2b5d4 <at_params_get+0x34>)
   2b5aa:	232b      	movs	r3, #43	; 0x2b
   2b5ac:	4a0a      	ldr	r2, [pc, #40]	; (2b5d8 <at_params_get+0x38>)
   2b5ae:	480b      	ldr	r0, [pc, #44]	; (2b5dc <at_params_get+0x3c>)
   2b5b0:	f015 ff08 	bl	413c4 <printk>
   2b5b4:	480a      	ldr	r0, [pc, #40]	; (2b5e0 <at_params_get+0x40>)
   2b5b6:	f015 ff05 	bl	413c4 <printk>
   2b5ba:	212b      	movs	r1, #43	; 0x2b
   2b5bc:	4806      	ldr	r0, [pc, #24]	; (2b5d8 <at_params_get+0x38>)
   2b5be:	f016 f91e 	bl	417fe <assert_post_action>

	if (index >= list->param_count) {
   2b5c2:	682b      	ldr	r3, [r5, #0]
   2b5c4:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2b5c6:	bf85      	ittet	hi
   2b5c8:	210c      	movhi	r1, #12
   2b5ca:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   2b5cc:	2000      	movls	r0, #0
	return &param[index];
   2b5ce:	fb01 0004 	mlahi	r0, r1, r4, r0
}
   2b5d2:	bd38      	pop	{r3, r4, r5, pc}
   2b5d4:	0004a864 	.word	0x0004a864
   2b5d8:	0004a836 	.word	0x0004a836
   2b5dc:	00048156 	.word	0x00048156
   2b5e0:	0004a878 	.word	0x0004a878

0002b5e4 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   2b5e4:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b5e6:	4604      	mov	r4, r0
   2b5e8:	b960      	cbnz	r0, 2b604 <at_param_size+0x20>
   2b5ea:	490e      	ldr	r1, [pc, #56]	; (2b624 <at_param_size+0x40>)
   2b5ec:	2339      	movs	r3, #57	; 0x39
   2b5ee:	4a0e      	ldr	r2, [pc, #56]	; (2b628 <at_param_size+0x44>)
   2b5f0:	480e      	ldr	r0, [pc, #56]	; (2b62c <at_param_size+0x48>)
   2b5f2:	f015 fee7 	bl	413c4 <printk>
   2b5f6:	480e      	ldr	r0, [pc, #56]	; (2b630 <at_param_size+0x4c>)
   2b5f8:	f015 fee4 	bl	413c4 <printk>
   2b5fc:	2139      	movs	r1, #57	; 0x39
   2b5fe:	480a      	ldr	r0, [pc, #40]	; (2b628 <at_param_size+0x44>)
   2b600:	f016 f8fd 	bl	417fe <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   2b604:	7823      	ldrb	r3, [r4, #0]
   2b606:	2b01      	cmp	r3, #1
   2b608:	d006      	beq.n	2b618 <at_param_size+0x34>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   2b60a:	2b02      	cmp	r3, #2
   2b60c:	d006      	beq.n	2b61c <at_param_size+0x38>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2b60e:	3b03      	subs	r3, #3
   2b610:	2b01      	cmp	r3, #1
   2b612:	d805      	bhi.n	2b620 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   2b614:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   2b616:	bd10      	pop	{r4, pc}
		return sizeof(uint16_t);
   2b618:	2002      	movs	r0, #2
   2b61a:	e7fc      	b.n	2b616 <at_param_size+0x32>
		return sizeof(uint32_t);
   2b61c:	2004      	movs	r0, #4
   2b61e:	e7fa      	b.n	2b616 <at_param_size+0x32>
	return 0;
   2b620:	2000      	movs	r0, #0
   2b622:	e7f8      	b.n	2b616 <at_param_size+0x32>
   2b624:	0004a899 	.word	0x0004a899
   2b628:	0004a836 	.word	0x0004a836
   2b62c:	00048156 	.word	0x00048156
   2b630:	0004a8ae 	.word	0x0004a8ae

0002b634 <at_param_clear>:
{
   2b634:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b636:	4604      	mov	r4, r0
   2b638:	b960      	cbnz	r0, 2b654 <at_param_clear+0x20>
   2b63a:	490b      	ldr	r1, [pc, #44]	; (2b668 <at_param_clear+0x34>)
   2b63c:	231d      	movs	r3, #29
   2b63e:	4a0b      	ldr	r2, [pc, #44]	; (2b66c <at_param_clear+0x38>)
   2b640:	480b      	ldr	r0, [pc, #44]	; (2b670 <at_param_clear+0x3c>)
   2b642:	f015 febf 	bl	413c4 <printk>
   2b646:	480b      	ldr	r0, [pc, #44]	; (2b674 <at_param_clear+0x40>)
   2b648:	f015 febc 	bl	413c4 <printk>
   2b64c:	211d      	movs	r1, #29
   2b64e:	4807      	ldr	r0, [pc, #28]	; (2b66c <at_param_clear+0x38>)
   2b650:	f016 f8d5 	bl	417fe <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2b654:	7823      	ldrb	r3, [r4, #0]
   2b656:	3b03      	subs	r3, #3
   2b658:	2b01      	cmp	r3, #1
   2b65a:	d802      	bhi.n	2b662 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   2b65c:	68a0      	ldr	r0, [r4, #8]
   2b65e:	f019 fb05 	bl	44c6c <k_free>
	param->value.int_val = 0;
   2b662:	2300      	movs	r3, #0
   2b664:	60a3      	str	r3, [r4, #8]
}
   2b666:	bd10      	pop	{r4, pc}
   2b668:	0004a899 	.word	0x0004a899
   2b66c:	0004a836 	.word	0x0004a836
   2b670:	00048156 	.word	0x00048156
   2b674:	0004a8ae 	.word	0x0004a8ae

0002b678 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   2b678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   2b67c:	4604      	mov	r4, r0
   2b67e:	b158      	cbz	r0, 2b698 <at_params_list_clear+0x20>
   2b680:	6843      	ldr	r3, [r0, #4]
   2b682:	b14b      	cbz	r3, 2b698 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   2b684:	2500      	movs	r5, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b686:	f8df b054 	ldr.w	fp, [pc, #84]	; 2b6dc <at_params_list_clear+0x64>
   2b68a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2b6e0 <at_params_list_clear+0x68>
   2b68e:	f8df a054 	ldr.w	sl, [pc, #84]	; 2b6e4 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   2b692:	6823      	ldr	r3, [r4, #0]
   2b694:	429d      	cmp	r5, r3
   2b696:	d301      	bcc.n	2b69c <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2b698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   2b69c:	270c      	movs	r7, #12
   2b69e:	436f      	muls	r7, r5
   2b6a0:	f8d4 8004 	ldr.w	r8, [r4, #4]
   2b6a4:	eb08 0607 	add.w	r6, r8, r7
   2b6a8:	4630      	mov	r0, r6
   2b6aa:	f7ff ffc3 	bl	2b634 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b6ae:	b966      	cbnz	r6, 2b6ca <at_params_list_clear+0x52>
   2b6b0:	4649      	mov	r1, r9
   2b6b2:	2314      	movs	r3, #20
   2b6b4:	465a      	mov	r2, fp
   2b6b6:	4650      	mov	r0, sl
   2b6b8:	f015 fe84 	bl	413c4 <printk>
   2b6bc:	4806      	ldr	r0, [pc, #24]	; (2b6d8 <at_params_list_clear+0x60>)
   2b6be:	f015 fe81 	bl	413c4 <printk>
   2b6c2:	2114      	movs	r1, #20
   2b6c4:	4658      	mov	r0, fp
   2b6c6:	f016 f89a 	bl	417fe <assert_post_action>
   2b6ca:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   2b6cc:	3501      	adds	r5, #1
   2b6ce:	f848 3007 	str.w	r3, [r8, r7]
   2b6d2:	6073      	str	r3, [r6, #4]
   2b6d4:	60b3      	str	r3, [r6, #8]
   2b6d6:	e7dc      	b.n	2b692 <at_params_list_clear+0x1a>
   2b6d8:	0004a8ae 	.word	0x0004a8ae
   2b6dc:	0004a836 	.word	0x0004a836
   2b6e0:	0004a899 	.word	0x0004a899
   2b6e4:	00048156 	.word	0x00048156

0002b6e8 <parse_psm_cfg>:
	char timer_str[9] = {0};
   2b6e8:	2300      	movs	r3, #0
{
   2b6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b6ee:	b086      	sub	sp, #24
	char timer_str[9] = {0};
   2b6f0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2b6f4:	f88d 3014 	strb.w	r3, [sp, #20]
	char unit_str[4] = {0};
   2b6f8:	9301      	str	r3, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   2b6fa:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   2b6fc:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   2b6fe:	9302      	str	r3, [sp, #8]
{
   2b700:	4616      	mov	r6, r2
	err = at_params_string_get(at_params,
   2b702:	bf14      	ite	ne
   2b704:	2108      	movne	r1, #8
   2b706:	2109      	moveq	r1, #9
   2b708:	446b      	add	r3, sp
   2b70a:	aa03      	add	r2, sp, #12
{
   2b70c:	4607      	mov	r7, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   2b70e:	bf14      	ite	ne
   2b710:	f04f 0807 	movne.w	r8, #7
   2b714:	f04f 0808 	moveq.w	r8, #8
	err = at_params_string_get(at_params,
   2b718:	f018 fe36 	bl	44388 <at_params_string_get>
	if (err) {
   2b71c:	4604      	mov	r4, r0
   2b71e:	b170      	cbz	r0, 2b73e <parse_psm_cfg+0x56>
   2b720:	4832      	ldr	r0, [pc, #200]	; (2b7ec <parse_psm_cfg+0x104>)
   2b722:	4b33      	ldr	r3, [pc, #204]	; (2b7f0 <parse_psm_cfg+0x108>)
		LOG_ERR("Could not get TAU, error: %d", err);
   2b724:	4622      	mov	r2, r4
   2b726:	1ac0      	subs	r0, r0, r3
   2b728:	08c0      	lsrs	r0, r0, #3
   2b72a:	0180      	lsls	r0, r0, #6
   2b72c:	4931      	ldr	r1, [pc, #196]	; (2b7f4 <parse_psm_cfg+0x10c>)
   2b72e:	f040 0001 	orr.w	r0, r0, #1
   2b732:	f016 f875 	bl	41820 <log_string_sync>
}
   2b736:	4620      	mov	r0, r4
   2b738:	b006      	add	sp, #24
   2b73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   2b73e:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b740:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2b742:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b746:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   2b748:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   2b74a:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   2b74c:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b750:	f014 fb84 	bl	3fe5c <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   2b754:	2807      	cmp	r0, #7
   2b756:	d90c      	bls.n	2b772 <parse_psm_cfg+0x8a>
   2b758:	4824      	ldr	r0, [pc, #144]	; (2b7ec <parse_psm_cfg+0x104>)
   2b75a:	4b25      	ldr	r3, [pc, #148]	; (2b7f0 <parse_psm_cfg+0x108>)
		LOG_ERR("Unable to parse periodic TAU string");
   2b75c:	4926      	ldr	r1, [pc, #152]	; (2b7f8 <parse_psm_cfg+0x110>)
   2b75e:	1ac0      	subs	r0, r0, r3
   2b760:	08c0      	lsrs	r0, r0, #3
   2b762:	0180      	lsls	r0, r0, #6
		LOG_ERR("Unable to parse active time string");
   2b764:	f040 0001 	orr.w	r0, r0, #1
   2b768:	f016 f85a 	bl	41820 <log_string_sync>
		return err;
   2b76c:	f06f 0415 	mvn.w	r4, #21
   2b770:	e7e1      	b.n	2b736 <parse_psm_cfg+0x4e>
	timer_unit = t3412_lookup[lut_idx];
   2b772:	4b22      	ldr	r3, [pc, #136]	; (2b7fc <parse_psm_cfg+0x114>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b774:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   2b776:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b77a:	4621      	mov	r1, r4
   2b77c:	f10d 000f 	add.w	r0, sp, #15
   2b780:	f014 fb6c 	bl	3fe5c <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2b784:	b1f5      	cbz	r5, 2b7c4 <parse_psm_cfg+0xdc>
   2b786:	4345      	muls	r5, r0
	err = at_params_string_get(at_params,
   2b788:	4641      	mov	r1, r8
   2b78a:	4638      	mov	r0, r7
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2b78c:	6035      	str	r5, [r6, #0]
	err = at_params_string_get(at_params,
   2b78e:	ab02      	add	r3, sp, #8
   2b790:	aa03      	add	r2, sp, #12
   2b792:	f018 fdf9 	bl	44388 <at_params_string_get>
	if (err) {
   2b796:	4604      	mov	r4, r0
   2b798:	2800      	cmp	r0, #0
   2b79a:	d1c1      	bne.n	2b720 <parse_psm_cfg+0x38>
	memcpy(unit_str, timer_str, unit_str_len);
   2b79c:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b79e:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2b7a0:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b7a4:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   2b7a6:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   2b7a8:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   2b7aa:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b7ae:	f014 fb55 	bl	3fe5c <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   2b7b2:	2807      	cmp	r0, #7
   2b7b4:	d909      	bls.n	2b7ca <parse_psm_cfg+0xe2>
   2b7b6:	480d      	ldr	r0, [pc, #52]	; (2b7ec <parse_psm_cfg+0x104>)
   2b7b8:	4b0d      	ldr	r3, [pc, #52]	; (2b7f0 <parse_psm_cfg+0x108>)
		LOG_ERR("Unable to parse active time string");
   2b7ba:	4911      	ldr	r1, [pc, #68]	; (2b800 <parse_psm_cfg+0x118>)
   2b7bc:	1ac0      	subs	r0, r0, r3
   2b7be:	08c0      	lsrs	r0, r0, #3
   2b7c0:	0180      	lsls	r0, r0, #6
   2b7c2:	e7cf      	b.n	2b764 <parse_psm_cfg+0x7c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2b7c4:	f04f 35ff 	mov.w	r5, #4294967295
   2b7c8:	e7de      	b.n	2b788 <parse_psm_cfg+0xa0>
	timer_unit = t3324_lookup[lut_idx];
   2b7ca:	4b0e      	ldr	r3, [pc, #56]	; (2b804 <parse_psm_cfg+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b7cc:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   2b7ce:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b7d2:	4621      	mov	r1, r4
   2b7d4:	f10d 000f 	add.w	r0, sp, #15
   2b7d8:	f014 fb40 	bl	3fe5c <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2b7dc:	b115      	cbz	r5, 2b7e4 <parse_psm_cfg+0xfc>
   2b7de:	4368      	muls	r0, r5
   2b7e0:	6070      	str	r0, [r6, #4]
	return 0;
   2b7e2:	e7a8      	b.n	2b736 <parse_psm_cfg+0x4e>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2b7e4:	f04f 30ff 	mov.w	r0, #4294967295
   2b7e8:	e7fa      	b.n	2b7e0 <parse_psm_cfg+0xf8>
   2b7ea:	bf00      	nop
   2b7ec:	00046464 	.word	0x00046464
   2b7f0:	000463bc 	.word	0x000463bc
   2b7f4:	0004a8ca 	.word	0x0004a8ca
   2b7f8:	0004a8e7 	.word	0x0004a8e7
   2b7fc:	00046b04 	.word	0x00046b04
   2b800:	0004a90b 	.word	0x0004a90b
   2b804:	00046ae4 	.word	0x00046ae4

0002b808 <lte_lc_register_handler>:
{
   2b808:	b538      	push	{r3, r4, r5, lr}
	if (handler == NULL) {
   2b80a:	4604      	mov	r4, r0
   2b80c:	4d0f      	ldr	r5, [pc, #60]	; (2b84c <lte_lc_register_handler+0x44>)
   2b80e:	b968      	cbnz	r0, 2b82c <lte_lc_register_handler+0x24>
   2b810:	4b0f      	ldr	r3, [pc, #60]	; (2b850 <lte_lc_register_handler+0x48>)
		evt_handler = NULL;
   2b812:	6028      	str	r0, [r5, #0]
   2b814:	480f      	ldr	r0, [pc, #60]	; (2b854 <lte_lc_register_handler+0x4c>)
		LOG_INF("Previously registered handler (%p) deregistered",
   2b816:	4622      	mov	r2, r4
   2b818:	1ac0      	subs	r0, r0, r3
   2b81a:	08c0      	lsrs	r0, r0, #3
   2b81c:	0180      	lsls	r0, r0, #6
   2b81e:	490e      	ldr	r1, [pc, #56]	; (2b858 <lte_lc_register_handler+0x50>)
   2b820:	f040 0003 	orr.w	r0, r0, #3
}
   2b824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_INF("Previously registered handler (%p) deregistered",
   2b828:	f015 bffa 	b.w	41820 <log_string_sync>
	if (evt_handler) {
   2b82c:	682a      	ldr	r2, [r5, #0]
   2b82e:	b152      	cbz	r2, 2b846 <lte_lc_register_handler+0x3e>
   2b830:	4b07      	ldr	r3, [pc, #28]	; (2b850 <lte_lc_register_handler+0x48>)
   2b832:	4808      	ldr	r0, [pc, #32]	; (2b854 <lte_lc_register_handler+0x4c>)
		LOG_WRN("Replacing previously registered handler (%p) with %p",
   2b834:	4909      	ldr	r1, [pc, #36]	; (2b85c <lte_lc_register_handler+0x54>)
   2b836:	1ac0      	subs	r0, r0, r3
   2b838:	08c0      	lsrs	r0, r0, #3
   2b83a:	0180      	lsls	r0, r0, #6
   2b83c:	4623      	mov	r3, r4
   2b83e:	f040 0002 	orr.w	r0, r0, #2
   2b842:	f015 ffed 	bl	41820 <log_string_sync>
	evt_handler = handler;
   2b846:	602c      	str	r4, [r5, #0]
}
   2b848:	bd38      	pop	{r3, r4, r5, pc}
   2b84a:	bf00      	nop
   2b84c:	2002497c 	.word	0x2002497c
   2b850:	000463bc 	.word	0x000463bc
   2b854:	00046464 	.word	0x00046464
   2b858:	0004ac1e 	.word	0x0004ac1e
   2b85c:	0004ac4e 	.word	0x0004ac4e

0002b860 <lte_lc_offline>:
{
   2b860:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   2b862:	2300      	movs	r3, #0
   2b864:	4804      	ldr	r0, [pc, #16]	; (2b878 <lte_lc_offline+0x18>)
   2b866:	461a      	mov	r2, r3
   2b868:	4619      	mov	r1, r3
   2b86a:	f7ff f8ff 	bl	2aa6c <at_cmd_write>
   2b86e:	2800      	cmp	r0, #0
}
   2b870:	bf18      	it	ne
   2b872:	f06f 0004 	mvnne.w	r0, #4
   2b876:	bd08      	pop	{r3, pc}
   2b878:	0004b0f0 	.word	0x0004b0f0

0002b87c <lte_lc_power_off>:
{
   2b87c:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   2b87e:	2300      	movs	r3, #0
   2b880:	4804      	ldr	r0, [pc, #16]	; (2b894 <lte_lc_power_off+0x18>)
   2b882:	461a      	mov	r2, r3
   2b884:	4619      	mov	r1, r3
   2b886:	f7ff f8f1 	bl	2aa6c <at_cmd_write>
   2b88a:	2800      	cmp	r0, #0
}
   2b88c:	bf18      	it	ne
   2b88e:	f06f 0004 	mvnne.w	r0, #4
   2b892:	bd08      	pop	{r3, pc}
   2b894:	0004b0fa 	.word	0x0004b0fa

0002b898 <lte_lc_deinit>:
{
   2b898:	b508      	push	{r3, lr}
	if (is_initialized) {
   2b89a:	4b06      	ldr	r3, [pc, #24]	; (2b8b4 <lte_lc_deinit+0x1c>)
   2b89c:	7818      	ldrb	r0, [r3, #0]
   2b89e:	b140      	cbz	r0, 2b8b2 <lte_lc_deinit+0x1a>
		is_initialized = false;
   2b8a0:	2000      	movs	r0, #0
		at_notif_deregister_handler(NULL, at_handler);
   2b8a2:	4905      	ldr	r1, [pc, #20]	; (2b8b8 <lte_lc_deinit+0x20>)
		is_initialized = false;
   2b8a4:	7018      	strb	r0, [r3, #0]
		at_notif_deregister_handler(NULL, at_handler);
   2b8a6:	f7ff fa55 	bl	2ad54 <at_notif_deregister_handler>
}
   2b8aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return lte_lc_power_off();
   2b8ae:	f7ff bfe5 	b.w	2b87c <lte_lc_power_off>
}
   2b8b2:	bd08      	pop	{r3, pc}
   2b8b4:	2002cc32 	.word	0x2002cc32
   2b8b8:	0001da59 	.word	0x0001da59

0002b8bc <lte_lc_normal>:
{
   2b8bc:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   2b8be:	2300      	movs	r3, #0
   2b8c0:	4804      	ldr	r0, [pc, #16]	; (2b8d4 <lte_lc_normal+0x18>)
   2b8c2:	461a      	mov	r2, r3
   2b8c4:	4619      	mov	r1, r3
   2b8c6:	f7ff f8d1 	bl	2aa6c <at_cmd_write>
   2b8ca:	2800      	cmp	r0, #0
}
   2b8cc:	bf18      	it	ne
   2b8ce:	f06f 0004 	mvnne.w	r0, #4
   2b8d2:	bd08      	pop	{r3, pc}
   2b8d4:	0004b0e6 	.word	0x0004b0e6

0002b8d8 <lte_lc_psm_req>:
{
   2b8d8:	b500      	push	{lr}
	if (enable) {
   2b8da:	4603      	mov	r3, r0
{
   2b8dc:	b08d      	sub	sp, #52	; 0x34
	if (enable) {
   2b8de:	b1a0      	cbz	r0, 2b90a <lte_lc_psm_req+0x32>
		snprintf(psm_req, sizeof(psm_req),
   2b8e0:	4b0c      	ldr	r3, [pc, #48]	; (2b914 <lte_lc_psm_req+0x3c>)
   2b8e2:	2128      	movs	r1, #40	; 0x28
   2b8e4:	4a0c      	ldr	r2, [pc, #48]	; (2b918 <lte_lc_psm_req+0x40>)
   2b8e6:	9300      	str	r3, [sp, #0]
   2b8e8:	a802      	add	r0, sp, #8
   2b8ea:	4b0c      	ldr	r3, [pc, #48]	; (2b91c <lte_lc_psm_req+0x44>)
   2b8ec:	f014 f94e 	bl	3fb8c <sniprintf>
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   2b8f0:	2300      	movs	r3, #0
   2b8f2:	461a      	mov	r2, r3
   2b8f4:	4619      	mov	r1, r3
   2b8f6:	a802      	add	r0, sp, #8
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   2b8f8:	f7ff f8b8 	bl	2aa6c <at_cmd_write>
		return -EIO;
   2b8fc:	2800      	cmp	r0, #0
}
   2b8fe:	bf18      	it	ne
   2b900:	f06f 0004 	mvnne.w	r0, #4
   2b904:	b00d      	add	sp, #52	; 0x34
   2b906:	f85d fb04 	ldr.w	pc, [sp], #4
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   2b90a:	4602      	mov	r2, r0
   2b90c:	4601      	mov	r1, r0
   2b90e:	4804      	ldr	r0, [pc, #16]	; (2b920 <lte_lc_psm_req+0x48>)
   2b910:	e7f2      	b.n	2b8f8 <lte_lc_psm_req+0x20>
   2b912:	bf00      	nop
   2b914:	200209c6 	.word	0x200209c6
   2b918:	0004ac83 	.word	0x0004ac83
   2b91c:	200209cf 	.word	0x200209cf
   2b920:	0004b104 	.word	0x0004b104

0002b924 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   2b924:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   2b926:	4605      	mov	r5, r0
{
   2b928:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   2b92a:	2800      	cmp	r0, #0
   2b92c:	d040      	beq.n	2b9b0 <lte_lc_system_mode_set+0x8c>
   2b92e:	1e43      	subs	r3, r0, #1
   2b930:	2b04      	cmp	r3, #4
   2b932:	d90e      	bls.n	2b952 <lte_lc_system_mode_set+0x2e>
   2b934:	4b1f      	ldr	r3, [pc, #124]	; (2b9b4 <lte_lc_system_mode_set+0x90>)
   2b936:	4820      	ldr	r0, [pc, #128]	; (2b9b8 <lte_lc_system_mode_set+0x94>)
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   2b938:	4920      	ldr	r1, [pc, #128]	; (2b9bc <lte_lc_system_mode_set+0x98>)
   2b93a:	1ac0      	subs	r0, r0, r3
   2b93c:	08c0      	lsrs	r0, r0, #3
   2b93e:	0180      	lsls	r0, r0, #6
   2b940:	f040 0001 	orr.w	r0, r0, #1
   2b944:	f015 ff6c 	bl	41820 <log_string_sync>
		return -EINVAL;
   2b948:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   2b94c:	4620      	mov	r0, r4
   2b94e:	b00f      	add	sp, #60	; 0x3c
   2b950:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   2b952:	4b1b      	ldr	r3, [pc, #108]	; (2b9c0 <lte_lc_system_mode_set+0x9c>)
   2b954:	2132      	movs	r1, #50	; 0x32
   2b956:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2b95a:	4a1a      	ldr	r2, [pc, #104]	; (2b9c4 <lte_lc_system_mode_set+0xa0>)
   2b95c:	a801      	add	r0, sp, #4
   2b95e:	f015 fd3e 	bl	413de <snprintk>
	if (len < 0) {
   2b962:	2800      	cmp	r0, #0
   2b964:	da0c      	bge.n	2b980 <lte_lc_system_mode_set+0x5c>
   2b966:	4b13      	ldr	r3, [pc, #76]	; (2b9b4 <lte_lc_system_mode_set+0x90>)
   2b968:	4813      	ldr	r0, [pc, #76]	; (2b9b8 <lte_lc_system_mode_set+0x94>)
		LOG_ERR("Could not construct system mode command");
   2b96a:	4917      	ldr	r1, [pc, #92]	; (2b9c8 <lte_lc_system_mode_set+0xa4>)
   2b96c:	1ac0      	subs	r0, r0, r3
   2b96e:	08c0      	lsrs	r0, r0, #3
   2b970:	0180      	lsls	r0, r0, #6
   2b972:	f040 0001 	orr.w	r0, r0, #1
   2b976:	f015 ff53 	bl	41820 <log_string_sync>
		return -EFAULT;
   2b97a:	f06f 040d 	mvn.w	r4, #13
   2b97e:	e7e5      	b.n	2b94c <lte_lc_system_mode_set+0x28>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   2b980:	2300      	movs	r3, #0
   2b982:	a801      	add	r0, sp, #4
   2b984:	461a      	mov	r2, r3
   2b986:	4619      	mov	r1, r3
   2b988:	f7ff f870 	bl	2aa6c <at_cmd_write>
	if (err) {
   2b98c:	4604      	mov	r4, r0
   2b98e:	b150      	cbz	r0, 2b9a6 <lte_lc_system_mode_set+0x82>
   2b990:	4809      	ldr	r0, [pc, #36]	; (2b9b8 <lte_lc_system_mode_set+0x94>)
   2b992:	4b08      	ldr	r3, [pc, #32]	; (2b9b4 <lte_lc_system_mode_set+0x90>)
		LOG_ERR("Could not send AT command, error: %d", err);
   2b994:	4622      	mov	r2, r4
   2b996:	1ac0      	subs	r0, r0, r3
   2b998:	08c0      	lsrs	r0, r0, #3
   2b99a:	0180      	lsls	r0, r0, #6
   2b99c:	490b      	ldr	r1, [pc, #44]	; (2b9cc <lte_lc_system_mode_set+0xa8>)
   2b99e:	f040 0001 	orr.w	r0, r0, #1
   2b9a2:	f015 ff3d 	bl	41820 <log_string_sync>
	sys_mode_current = mode;
   2b9a6:	4b0a      	ldr	r3, [pc, #40]	; (2b9d0 <lte_lc_system_mode_set+0xac>)
   2b9a8:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   2b9aa:	4b0a      	ldr	r3, [pc, #40]	; (2b9d4 <lte_lc_system_mode_set+0xb0>)
   2b9ac:	701d      	strb	r5, [r3, #0]
	return err;
   2b9ae:	e7cd      	b.n	2b94c <lte_lc_system_mode_set+0x28>
	switch (mode) {
   2b9b0:	4604      	mov	r4, r0
   2b9b2:	e7cb      	b.n	2b94c <lte_lc_system_mode_set+0x28>
   2b9b4:	000463bc 	.word	0x000463bc
   2b9b8:	00046464 	.word	0x00046464
   2b9bc:	0004ad46 	.word	0x0004ad46
   2b9c0:	00046acc 	.word	0x00046acc
   2b9c4:	0004ad64 	.word	0x0004ad64
   2b9c8:	0004ad77 	.word	0x0004ad77
   2b9cc:	0004ad9f 	.word	0x0004ad9f
   2b9d0:	2002cc34 	.word	0x2002cc34
   2b9d4:	200209d8 	.word	0x200209d8

0002b9d8 <w_lte_lc_connect>:
{
   2b9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   2b9dc:	4b23      	ldr	r3, [pc, #140]	; (2ba6c <w_lte_lc_connect+0x94>)
{
   2b9de:	4605      	mov	r5, r0
   2b9e0:	4c23      	ldr	r4, [pc, #140]	; (2ba70 <w_lte_lc_connect+0x98>)
   2b9e2:	4824      	ldr	r0, [pc, #144]	; (2ba74 <w_lte_lc_connect+0x9c>)
	if (!is_initialized) {
   2b9e4:	781b      	ldrb	r3, [r3, #0]
   2b9e6:	1a24      	subs	r4, r4, r0
   2b9e8:	08e4      	lsrs	r4, r4, #3
   2b9ea:	b94b      	cbnz	r3, 2ba00 <w_lte_lc_connect+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   2b9ec:	01a0      	lsls	r0, r4, #6
   2b9ee:	f040 0001 	orr.w	r0, r0, #1
   2b9f2:	4921      	ldr	r1, [pc, #132]	; (2ba78 <w_lte_lc_connect+0xa0>)
   2b9f4:	f015 ff14 	bl	41820 <log_string_sync>
		return -EPERM;
   2b9f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   2b9fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2ba00:	2201      	movs	r2, #1
   2ba02:	2100      	movs	r1, #0
   2ba04:	481d      	ldr	r0, [pc, #116]	; (2ba7c <w_lte_lc_connect+0xa4>)
   2ba06:	f019 f80f 	bl	44a28 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   2ba0a:	4e1d      	ldr	r6, [pc, #116]	; (2ba80 <w_lte_lc_connect+0xa8>)
	return z_impl_k_sem_take(sem, timeout);
   2ba0c:	4f1b      	ldr	r7, [pc, #108]	; (2ba7c <w_lte_lc_connect+0xa4>)
			LOG_INF("Network connection attempt timed out");
   2ba0e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2ba88 <w_lte_lc_connect+0xb0>
		err = lte_lc_system_mode_set(sys_mode_target);
   2ba12:	7830      	ldrb	r0, [r6, #0]
   2ba14:	f7ff ff86 	bl	2b924 <lte_lc_system_mode_set>
		if (err) {
   2ba18:	2800      	cmp	r0, #0
   2ba1a:	d1ef      	bne.n	2b9fc <w_lte_lc_connect+0x24>
		err = lte_lc_normal();
   2ba1c:	f7ff ff4e 	bl	2b8bc <lte_lc_normal>
		if (err || !blocking) {
   2ba20:	2800      	cmp	r0, #0
   2ba22:	d1eb      	bne.n	2b9fc <w_lte_lc_connect+0x24>
   2ba24:	2d00      	cmp	r5, #0
   2ba26:	d0e9      	beq.n	2b9fc <w_lte_lc_connect+0x24>
   2ba28:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   2ba2c:	2300      	movs	r3, #0
   2ba2e:	4638      	mov	r0, r7
   2ba30:	f012 f8a6 	bl	3db80 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2ba34:	f110 0f0b 	cmn.w	r0, #11
   2ba38:	d1e0      	bne.n	2b9fc <w_lte_lc_connect+0x24>
			LOG_INF("Network connection attempt timed out");
   2ba3a:	ea4f 1984 	mov.w	r9, r4, lsl #6
   2ba3e:	f049 0903 	orr.w	r9, r9, #3
   2ba42:	4641      	mov	r1, r8
   2ba44:	4648      	mov	r0, r9
   2ba46:	f015 feeb 	bl	41820 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   2ba4a:	7833      	ldrb	r3, [r6, #0]
   2ba4c:	2b05      	cmp	r3, #5
   2ba4e:	d10a      	bne.n	2ba66 <w_lte_lc_connect+0x8e>
				sys_mode_target = sys_mode_fallback;
   2ba50:	2304      	movs	r3, #4
   2ba52:	7033      	strb	r3, [r6, #0]
				err = lte_lc_offline();
   2ba54:	f7ff ff04 	bl	2b860 <lte_lc_offline>
				if (err) {
   2ba58:	2800      	cmp	r0, #0
   2ba5a:	d1cf      	bne.n	2b9fc <w_lte_lc_connect+0x24>
				LOG_INF("Using fallback network mode");
   2ba5c:	4648      	mov	r0, r9
   2ba5e:	4909      	ldr	r1, [pc, #36]	; (2ba84 <w_lte_lc_connect+0xac>)
   2ba60:	f015 fede 	bl	41820 <log_string_sync>
	} while (retry);
   2ba64:	e7d5      	b.n	2ba12 <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   2ba66:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2ba6a:	e7c7      	b.n	2b9fc <w_lte_lc_connect+0x24>
   2ba6c:	2002cc32 	.word	0x2002cc32
   2ba70:	00046464 	.word	0x00046464
   2ba74:	000463bc 	.word	0x000463bc
   2ba78:	0004adc4 	.word	0x0004adc4
   2ba7c:	20024980 	.word	0x20024980
   2ba80:	200209d8 	.word	0x200209d8
   2ba84:	0004ae14 	.word	0x0004ae14
   2ba88:	0004adef 	.word	0x0004adef

0002ba8c <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   2ba8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   2ba90:	2400      	movs	r4, #0
{
   2ba92:	b090      	sub	sp, #64	; 0x40
   2ba94:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   2ba96:	221a      	movs	r2, #26
   2ba98:	4621      	mov	r1, r4
   2ba9a:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   2ba9c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   2baa0:	9408      	str	r4, [sp, #32]
   2baa2:	f019 f940 	bl	44d26 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   2baa6:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   2baa8:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2baac:	9406      	str	r4, [sp, #24]
   2baae:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   2bab2:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   2bab4:	2d00      	cmp	r5, #0
   2bab6:	f000 80ab 	beq.w	2bc10 <lte_lc_system_mode_get+0x184>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   2baba:	4623      	mov	r3, r4
   2babc:	221e      	movs	r2, #30
   2babe:	4856      	ldr	r0, [pc, #344]	; (2bc18 <lte_lc_system_mode_get+0x18c>)
   2bac0:	a908      	add	r1, sp, #32
   2bac2:	f7fe ffd3 	bl	2aa6c <at_cmd_write>
			   NULL);
	if (err) {
   2bac6:	4604      	mov	r4, r0
   2bac8:	b168      	cbz	r0, 2bae6 <lte_lc_system_mode_get+0x5a>
   2baca:	4854      	ldr	r0, [pc, #336]	; (2bc1c <lte_lc_system_mode_get+0x190>)
   2bacc:	4b54      	ldr	r3, [pc, #336]	; (2bc20 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could not send AT command");
   2bace:	4955      	ldr	r1, [pc, #340]	; (2bc24 <lte_lc_system_mode_get+0x198>)
   2bad0:	1ac0      	subs	r0, r0, r3
   2bad2:	08c0      	lsrs	r0, r0, #3
   2bad4:	0180      	lsls	r0, r0, #6
   2bad6:	f040 0001 	orr.w	r0, r0, #1
   2bada:	f015 fea1 	bl	41820 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2bade:	4620      	mov	r0, r4
   2bae0:	b010      	add	sp, #64	; 0x40
   2bae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2bae6:	2105      	movs	r1, #5
   2bae8:	a802      	add	r0, sp, #8
   2baea:	f018 fb75 	bl	441d8 <at_params_list_init>
	if (err) {
   2baee:	4604      	mov	r4, r0
   2baf0:	b158      	cbz	r0, 2bb0a <lte_lc_system_mode_get+0x7e>
   2baf2:	4b4b      	ldr	r3, [pc, #300]	; (2bc20 <lte_lc_system_mode_get+0x194>)
   2baf4:	4849      	ldr	r0, [pc, #292]	; (2bc1c <lte_lc_system_mode_get+0x190>)
		LOG_ERR("Could init AT params list, error: %d", err);
   2baf6:	4622      	mov	r2, r4
   2baf8:	1ac0      	subs	r0, r0, r3
   2bafa:	08c0      	lsrs	r0, r0, #3
   2bafc:	0180      	lsls	r0, r0, #6
   2bafe:	494a      	ldr	r1, [pc, #296]	; (2bc28 <lte_lc_system_mode_get+0x19c>)
   2bb00:	f040 0001 	orr.w	r0, r0, #1
   2bb04:	f015 fe8c 	bl	41820 <log_string_sync>
		return err;
   2bb08:	e7e9      	b.n	2bade <lte_lc_system_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   2bb0a:	4601      	mov	r1, r0
   2bb0c:	2305      	movs	r3, #5
   2bb0e:	aa02      	add	r2, sp, #8
   2bb10:	a808      	add	r0, sp, #32
   2bb12:	f7ff fcb5 	bl	2b480 <at_parser_max_params_from_str>
	if (err) {
   2bb16:	4604      	mov	r4, r0
   2bb18:	b158      	cbz	r0, 2bb32 <lte_lc_system_mode_get+0xa6>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2bb1a:	4622      	mov	r2, r4
   2bb1c:	483f      	ldr	r0, [pc, #252]	; (2bc1c <lte_lc_system_mode_get+0x190>)
   2bb1e:	4b40      	ldr	r3, [pc, #256]	; (2bc20 <lte_lc_system_mode_get+0x194>)
   2bb20:	4942      	ldr	r1, [pc, #264]	; (2bc2c <lte_lc_system_mode_get+0x1a0>)
   2bb22:	1ac0      	subs	r0, r0, r3
   2bb24:	08c0      	lsrs	r0, r0, #3
   2bb26:	0180      	lsls	r0, r0, #6
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   2bb28:	f040 0001 	orr.w	r0, r0, #1
   2bb2c:	f015 fe78 	bl	41820 <log_string_sync>
			goto clean_exit;
   2bb30:	e013      	b.n	2bb5a <lte_lc_system_mode_get+0xce>
	err = at_params_string_get(&resp_list,
   2bb32:	4601      	mov	r1, r0
   2bb34:	466b      	mov	r3, sp
   2bb36:	aa04      	add	r2, sp, #16
   2bb38:	a802      	add	r0, sp, #8
   2bb3a:	f018 fc25 	bl	44388 <at_params_string_get>
	if (err) {
   2bb3e:	4606      	mov	r6, r0
   2bb40:	b178      	cbz	r0, 2bb62 <lte_lc_system_mode_get+0xd6>
   2bb42:	4b37      	ldr	r3, [pc, #220]	; (2bc20 <lte_lc_system_mode_get+0x194>)
   2bb44:	4835      	ldr	r0, [pc, #212]	; (2bc1c <lte_lc_system_mode_get+0x190>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   2bb46:	4632      	mov	r2, r6
   2bb48:	1ac0      	subs	r0, r0, r3
   2bb4a:	08c0      	lsrs	r0, r0, #3
   2bb4c:	0180      	lsls	r0, r0, #6
   2bb4e:	4938      	ldr	r1, [pc, #224]	; (2bc30 <lte_lc_system_mode_get+0x1a4>)
   2bb50:	f040 0001 	orr.w	r0, r0, #1
   2bb54:	f015 fe64 	bl	41820 <log_string_sync>
		goto clean_exit;
   2bb58:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   2bb5a:	a802      	add	r0, sp, #8
   2bb5c:	f018 fb4f 	bl	441fe <at_params_list_free>
	return err;
   2bb60:	e7bd      	b.n	2bade <lte_lc_system_mode_get+0x52>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2bb62:	4a34      	ldr	r2, [pc, #208]	; (2bc34 <lte_lc_system_mode_get+0x1a8>)
   2bb64:	9900      	ldr	r1, [sp, #0]
   2bb66:	a804      	add	r0, sp, #16
   2bb68:	f018 fc4c 	bl	44404 <response_is_valid>
   2bb6c:	b960      	cbnz	r0, 2bb88 <lte_lc_system_mode_get+0xfc>
   2bb6e:	4b2c      	ldr	r3, [pc, #176]	; (2bc20 <lte_lc_system_mode_get+0x194>)
   2bb70:	482a      	ldr	r0, [pc, #168]	; (2bc1c <lte_lc_system_mode_get+0x190>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   2bb72:	4931      	ldr	r1, [pc, #196]	; (2bc38 <lte_lc_system_mode_get+0x1ac>)
   2bb74:	1ac0      	subs	r0, r0, r3
   2bb76:	08c0      	lsrs	r0, r0, #3
   2bb78:	0180      	lsls	r0, r0, #6
   2bb7a:	f040 0001 	orr.w	r0, r0, #1
   2bb7e:	f015 fe4f 	bl	41820 <log_string_sync>
		err = -EIO;
   2bb82:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   2bb86:	e7e8      	b.n	2bb5a <lte_lc_system_mode_get+0xce>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2bb88:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   2bb8a:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   2bb8c:	4639      	mov	r1, r7
   2bb8e:	aa01      	add	r2, sp, #4
   2bb90:	a802      	add	r0, sp, #8
   2bb92:	f018 fbe2 	bl	4435a <at_params_int_get>
		if (err) {
   2bb96:	4604      	mov	r4, r0
   2bb98:	b138      	cbz	r0, 2bbaa <lte_lc_system_mode_get+0x11e>
   2bb9a:	4820      	ldr	r0, [pc, #128]	; (2bc1c <lte_lc_system_mode_get+0x190>)
   2bb9c:	4b20      	ldr	r3, [pc, #128]	; (2bc20 <lte_lc_system_mode_get+0x194>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   2bb9e:	4622      	mov	r2, r4
   2bba0:	1ac0      	subs	r0, r0, r3
   2bba2:	08c0      	lsrs	r0, r0, #3
   2bba4:	4925      	ldr	r1, [pc, #148]	; (2bc3c <lte_lc_system_mode_get+0x1b0>)
   2bba6:	0180      	lsls	r0, r0, #6
   2bba8:	e7be      	b.n	2bb28 <lte_lc_system_mode_get+0x9c>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   2bbaa:	9b01      	ldr	r3, [sp, #4]
   2bbac:	b113      	cbz	r3, 2bbb4 <lte_lc_system_mode_get+0x128>
   2bbae:	fa08 f307 	lsl.w	r3, r8, r7
   2bbb2:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2bbb4:	3701      	adds	r7, #1
   2bbb6:	2f05      	cmp	r7, #5
   2bbb8:	d1e8      	bne.n	2bb8c <lte_lc_system_mode_get+0x100>
	switch (bitmask) {
   2bbba:	2e0c      	cmp	r6, #12
   2bbbc:	d81b      	bhi.n	2bbf6 <lte_lc_system_mode_get+0x16a>
   2bbbe:	e8df f006 	tbb	[pc, r6]
   2bbc2:	1a07      	.short	0x1a07
   2bbc4:	1a121a10 	.word	0x1a121a10
   2bbc8:	1a141a1a 	.word	0x1a141a1a
   2bbcc:	1a16      	.short	0x1a16
   2bbce:	18          	.byte	0x18
   2bbcf:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   2bbd0:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2bbd2:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   2bbd4:	4b1a      	ldr	r3, [pc, #104]	; (2bc40 <lte_lc_system_mode_get+0x1b4>)
   2bbd6:	782a      	ldrb	r2, [r5, #0]
   2bbd8:	7819      	ldrb	r1, [r3, #0]
   2bbda:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   2bbdc:	bf18      	it	ne
   2bbde:	701a      	strbne	r2, [r3, #0]
   2bbe0:	e7bb      	b.n	2bb5a <lte_lc_system_mode_get+0xce>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   2bbe2:	2301      	movs	r3, #1
   2bbe4:	e7f5      	b.n	2bbd2 <lte_lc_system_mode_get+0x146>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   2bbe6:	2302      	movs	r3, #2
   2bbe8:	e7f3      	b.n	2bbd2 <lte_lc_system_mode_get+0x146>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   2bbea:	2303      	movs	r3, #3
   2bbec:	e7f1      	b.n	2bbd2 <lte_lc_system_mode_get+0x146>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   2bbee:	2304      	movs	r3, #4
   2bbf0:	e7ef      	b.n	2bbd2 <lte_lc_system_mode_get+0x146>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2bbf2:	2305      	movs	r3, #5
   2bbf4:	e7ed      	b.n	2bbd2 <lte_lc_system_mode_get+0x146>
   2bbf6:	4b0a      	ldr	r3, [pc, #40]	; (2bc20 <lte_lc_system_mode_get+0x194>)
   2bbf8:	4808      	ldr	r0, [pc, #32]	; (2bc1c <lte_lc_system_mode_get+0x190>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   2bbfa:	4912      	ldr	r1, [pc, #72]	; (2bc44 <lte_lc_system_mode_get+0x1b8>)
   2bbfc:	1ac0      	subs	r0, r0, r3
   2bbfe:	08c0      	lsrs	r0, r0, #3
   2bc00:	0180      	lsls	r0, r0, #6
   2bc02:	f040 0001 	orr.w	r0, r0, #1
   2bc06:	f015 fe0b 	bl	41820 <log_string_sync>
		err = -EFAULT;
   2bc0a:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   2bc0e:	e7a4      	b.n	2bb5a <lte_lc_system_mode_get+0xce>
		return -EINVAL;
   2bc10:	f06f 0415 	mvn.w	r4, #21
   2bc14:	e763      	b.n	2bade <lte_lc_system_mode_get+0x52>
   2bc16:	bf00      	nop
   2bc18:	0004ae30 	.word	0x0004ae30
   2bc1c:	00046464 	.word	0x00046464
   2bc20:	000463bc 	.word	0x000463bc
   2bc24:	0004ae40 	.word	0x0004ae40
   2bc28:	0004ae5a 	.word	0x0004ae5a
   2bc2c:	0004ae7f 	.word	0x0004ae7f
   2bc30:	0004acc1 	.word	0x0004acc1
   2bc34:	0004aea6 	.word	0x0004aea6
   2bc38:	0004aeb3 	.word	0x0004aeb3
   2bc3c:	0004aed0 	.word	0x0004aed0
   2bc40:	2002cc34 	.word	0x2002cc34
   2bc44:	0004aef8 	.word	0x0004aef8

0002bc48 <w_lte_lc_init>:
{
   2bc48:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (is_initialized) {
   2bc4a:	4e45      	ldr	r6, [pc, #276]	; (2bd60 <w_lte_lc_init+0x118>)
{
   2bc4c:	b08f      	sub	sp, #60	; 0x3c
	if (is_initialized) {
   2bc4e:	7833      	ldrb	r3, [r6, #0]
   2bc50:	2b00      	cmp	r3, #0
   2bc52:	f040 8082 	bne.w	2bd5a <w_lte_lc_init+0x112>
	err = lte_lc_system_mode_get(&sys_mode_current);
   2bc56:	4d43      	ldr	r5, [pc, #268]	; (2bd64 <w_lte_lc_init+0x11c>)
   2bc58:	4628      	mov	r0, r5
   2bc5a:	f7ff ff17 	bl	2ba8c <lte_lc_system_mode_get>
	if (err) {
   2bc5e:	4604      	mov	r4, r0
   2bc60:	b168      	cbz	r0, 2bc7e <w_lte_lc_init+0x36>
		LOG_ERR("Could not get current system mode, error: %d", err);
   2bc62:	4622      	mov	r2, r4
   2bc64:	4840      	ldr	r0, [pc, #256]	; (2bd68 <w_lte_lc_init+0x120>)
   2bc66:	4b41      	ldr	r3, [pc, #260]	; (2bd6c <w_lte_lc_init+0x124>)
   2bc68:	4941      	ldr	r1, [pc, #260]	; (2bd70 <w_lte_lc_init+0x128>)
   2bc6a:	1ac0      	subs	r0, r0, r3
   2bc6c:	08c0      	lsrs	r0, r0, #3
   2bc6e:	0180      	lsls	r0, r0, #6
		LOG_ERR("Can't register AT handler, error: %d", err);
   2bc70:	f040 0001 	orr.w	r0, r0, #1
   2bc74:	f015 fdd4 	bl	41820 <log_string_sync>
}
   2bc78:	4620      	mov	r0, r4
   2bc7a:	b00f      	add	sp, #60	; 0x3c
   2bc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_notif_register_handler(NULL, at_handler);
   2bc7e:	493d      	ldr	r1, [pc, #244]	; (2bd74 <w_lte_lc_init+0x12c>)
   2bc80:	f7ff f81e 	bl	2acc0 <at_notif_register_handler>
	if (err) {
   2bc84:	4604      	mov	r4, r0
   2bc86:	b138      	cbz	r0, 2bc98 <w_lte_lc_init+0x50>
   2bc88:	4837      	ldr	r0, [pc, #220]	; (2bd68 <w_lte_lc_init+0x120>)
   2bc8a:	4b38      	ldr	r3, [pc, #224]	; (2bd6c <w_lte_lc_init+0x124>)
		LOG_ERR("Can't register AT handler, error: %d", err);
   2bc8c:	4622      	mov	r2, r4
   2bc8e:	1ac0      	subs	r0, r0, r3
   2bc90:	08c0      	lsrs	r0, r0, #3
   2bc92:	4939      	ldr	r1, [pc, #228]	; (2bd78 <w_lte_lc_init+0x130>)
   2bc94:	0180      	lsls	r0, r0, #6
   2bc96:	e7eb      	b.n	2bc70 <w_lte_lc_init+0x28>
	if (sys_mode_current != sys_mode_target) {
   2bc98:	4b38      	ldr	r3, [pc, #224]	; (2bd7c <w_lte_lc_init+0x134>)
   2bc9a:	7818      	ldrb	r0, [r3, #0]
   2bc9c:	782b      	ldrb	r3, [r5, #0]
   2bc9e:	4283      	cmp	r3, r0
   2bca0:	d00b      	beq.n	2bcba <w_lte_lc_init+0x72>
		err = lte_lc_system_mode_set(sys_mode_target);
   2bca2:	f7ff fe3f 	bl	2b924 <lte_lc_system_mode_set>
		if (err) {
   2bca6:	4604      	mov	r4, r0
   2bca8:	b138      	cbz	r0, 2bcba <w_lte_lc_init+0x72>
   2bcaa:	482f      	ldr	r0, [pc, #188]	; (2bd68 <w_lte_lc_init+0x120>)
   2bcac:	4b2f      	ldr	r3, [pc, #188]	; (2bd6c <w_lte_lc_init+0x124>)
			LOG_ERR("Could not set system mode, error: %d", err);
   2bcae:	4622      	mov	r2, r4
   2bcb0:	1ac0      	subs	r0, r0, r3
   2bcb2:	08c0      	lsrs	r0, r0, #3
   2bcb4:	4932      	ldr	r1, [pc, #200]	; (2bd80 <w_lte_lc_init+0x138>)
   2bcb6:	0180      	lsls	r0, r0, #6
   2bcb8:	e7da      	b.n	2bc70 <w_lte_lc_init+0x28>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   2bcba:	2300      	movs	r3, #0
   2bcbc:	4831      	ldr	r0, [pc, #196]	; (2bd84 <w_lte_lc_init+0x13c>)
   2bcbe:	461a      	mov	r2, r3
   2bcc0:	4619      	mov	r1, r3
   2bcc2:	f7fe fed3 	bl	2aa6c <at_cmd_write>
   2bcc6:	4603      	mov	r3, r0
   2bcc8:	b110      	cbz	r0, 2bcd0 <w_lte_lc_init+0x88>
		return -EIO;
   2bcca:	f06f 0404 	mvn.w	r4, #4
   2bcce:	e7d3      	b.n	2bc78 <w_lte_lc_init+0x30>
	if (at_cmd_write(lock_bands, NULL, 0, NULL) != 0) {
   2bcd0:	4602      	mov	r2, r0
   2bcd2:	4601      	mov	r1, r0
   2bcd4:	482c      	ldr	r0, [pc, #176]	; (2bd88 <w_lte_lc_init+0x140>)
   2bcd6:	f7fe fec9 	bl	2aa6c <at_cmd_write>
   2bcda:	4603      	mov	r3, r0
   2bcdc:	2800      	cmp	r0, #0
   2bcde:	d1f4      	bne.n	2bcca <w_lte_lc_init+0x82>
	if (at_cmd_write(cgdcont, NULL, 0, NULL) != 0) {
   2bce0:	4602      	mov	r2, r0
   2bce2:	4601      	mov	r1, r0
   2bce4:	4829      	ldr	r0, [pc, #164]	; (2bd8c <w_lte_lc_init+0x144>)
   2bce6:	f7fe fec1 	bl	2aa6c <at_cmd_write>
   2bcea:	4604      	mov	r4, r0
   2bcec:	2800      	cmp	r0, #0
   2bcee:	d1ec      	bne.n	2bcca <w_lte_lc_init+0x82>
   2bcf0:	4b1e      	ldr	r3, [pc, #120]	; (2bd6c <w_lte_lc_init+0x124>)
   2bcf2:	4d1d      	ldr	r5, [pc, #116]	; (2bd68 <w_lte_lc_init+0x120>)
	LOG_INF("PDP Context: %s", log_strdup(cgdcont));
   2bcf4:	4825      	ldr	r0, [pc, #148]	; (2bd8c <w_lte_lc_init+0x144>)
   2bcf6:	1aed      	subs	r5, r5, r3
   2bcf8:	f015 fda5 	bl	41846 <log_strdup>
   2bcfc:	08ed      	lsrs	r5, r5, #3
   2bcfe:	01ad      	lsls	r5, r5, #6
   2bd00:	f045 0703 	orr.w	r7, r5, #3
   2bd04:	4602      	mov	r2, r0
   2bd06:	4922      	ldr	r1, [pc, #136]	; (2bd90 <w_lte_lc_init+0x148>)
   2bd08:	4638      	mov	r0, r7
   2bd0a:	f015 fd89 	bl	41820 <log_string_sync>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   2bd0e:	4623      	mov	r3, r4
   2bd10:	4622      	mov	r2, r4
   2bd12:	4621      	mov	r1, r4
   2bd14:	481f      	ldr	r0, [pc, #124]	; (2bd94 <w_lte_lc_init+0x14c>)
   2bd16:	f7fe fea9 	bl	2aa6c <at_cmd_write>
	if (err) {
   2bd1a:	4603      	mov	r3, r0
   2bd1c:	b1d0      	cbz	r0, 2bd54 <w_lte_lc_init+0x10c>
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   2bd1e:	f045 0502 	orr.w	r5, r5, #2
   2bd22:	4628      	mov	r0, r5
   2bd24:	4a1b      	ldr	r2, [pc, #108]	; (2bd94 <w_lte_lc_init+0x14c>)
   2bd26:	491c      	ldr	r1, [pc, #112]	; (2bd98 <w_lte_lc_init+0x150>)
   2bd28:	f015 fd7a 	bl	41820 <log_string_sync>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   2bd2c:	4628      	mov	r0, r5
   2bd2e:	4a19      	ldr	r2, [pc, #100]	; (2bd94 <w_lte_lc_init+0x14c>)
   2bd30:	491a      	ldr	r1, [pc, #104]	; (2bd9c <w_lte_lc_init+0x154>)
   2bd32:	f015 fd75 	bl	41820 <log_string_sync>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   2bd36:	4623      	mov	r3, r4
   2bd38:	2232      	movs	r2, #50	; 0x32
   2bd3a:	4819      	ldr	r0, [pc, #100]	; (2bda0 <w_lte_lc_init+0x158>)
   2bd3c:	a901      	add	r1, sp, #4
   2bd3e:	f7fe fe95 	bl	2aa6c <at_cmd_write>
		if (err == 0) {
   2bd42:	b938      	cbnz	r0, 2bd54 <w_lte_lc_init+0x10c>
			LOG_WRN("Current modem firmware version: %s",
   2bd44:	a801      	add	r0, sp, #4
   2bd46:	f015 fd7e 	bl	41846 <log_strdup>
   2bd4a:	4916      	ldr	r1, [pc, #88]	; (2bda4 <w_lte_lc_init+0x15c>)
   2bd4c:	4602      	mov	r2, r0
   2bd4e:	4628      	mov	r0, r5
   2bd50:	f015 fd66 	bl	41820 <log_string_sync>
	is_initialized = true;
   2bd54:	2301      	movs	r3, #1
   2bd56:	7033      	strb	r3, [r6, #0]
	return 0;
   2bd58:	e78e      	b.n	2bc78 <w_lte_lc_init+0x30>
		return -EALREADY;
   2bd5a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2bd5e:	e78b      	b.n	2bc78 <w_lte_lc_init+0x30>
   2bd60:	2002cc32 	.word	0x2002cc32
   2bd64:	2002cc34 	.word	0x2002cc34
   2bd68:	00046464 	.word	0x00046464
   2bd6c:	000463bc 	.word	0x000463bc
   2bd70:	0004af24 	.word	0x0004af24
   2bd74:	0001da59 	.word	0x0001da59
   2bd78:	0004af51 	.word	0x0004af51
   2bd7c:	200209d8 	.word	0x200209d8
   2bd80:	0004af76 	.word	0x0004af76
   2bd84:	0004b0a2 	.word	0x0004b0a2
   2bd88:	0004b0b8 	.word	0x0004b0b8
   2bd8c:	20020936 	.word	0x20020936
   2bd90:	0004af9b 	.word	0x0004af9b
   2bd94:	0004b0ad 	.word	0x0004b0ad
   2bd98:	0004afab 	.word	0x0004afab
   2bd9c:	0004afdd 	.word	0x0004afdd
   2bda0:	0004b008 	.word	0x0004b008
   2bda4:	0004b010 	.word	0x0004b010

0002bda8 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   2bda8:	b530      	push	{r4, r5, lr}
	int err, resp_mode;
	struct at_param_list resp_list = {0};
   2bdaa:	2400      	movs	r4, #0
{
   2bdac:	b08d      	sub	sp, #52	; 0x34
   2bdae:	4605      	mov	r5, r0
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   2bdb0:	2210      	movs	r2, #16
   2bdb2:	4621      	mov	r1, r4
   2bdb4:	a808      	add	r0, sp, #32
	struct at_param_list resp_list = {0};
   2bdb6:	e9cd 4405 	strd	r4, r4, [sp, #20]
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   2bdba:	9407      	str	r4, [sp, #28]
   2bdbc:	f018 ffb3 	bl	44d26 <memset>
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   2bdc0:	2306      	movs	r3, #6
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
   2bdc2:	9403      	str	r4, [sp, #12]
   2bdc4:	f8ad 4010 	strh.w	r4, [sp, #16]
	size_t response_prefix_len = sizeof(response_prefix);
   2bdc8:	9302      	str	r3, [sp, #8]

	if (mode == NULL) {
   2bdca:	2d00      	cmp	r5, #0
   2bdcc:	d072      	beq.n	2beb4 <lte_lc_func_mode_get+0x10c>
		return -EINVAL;
	}

	err = at_cmd_write(AT_CFUN_READ, response, sizeof(response), NULL);
   2bdce:	4623      	mov	r3, r4
   2bdd0:	2214      	movs	r2, #20
   2bdd2:	483a      	ldr	r0, [pc, #232]	; (2bebc <lte_lc_func_mode_get+0x114>)
   2bdd4:	a907      	add	r1, sp, #28
   2bdd6:	f7fe fe49 	bl	2aa6c <at_cmd_write>
	if (err) {
   2bdda:	4604      	mov	r4, r0
   2bddc:	b160      	cbz	r0, 2bdf8 <lte_lc_func_mode_get+0x50>
   2bdde:	4838      	ldr	r0, [pc, #224]	; (2bec0 <lte_lc_func_mode_get+0x118>)
   2bde0:	4b38      	ldr	r3, [pc, #224]	; (2bec4 <lte_lc_func_mode_get+0x11c>)
		LOG_ERR("Could not send AT command");
   2bde2:	4939      	ldr	r1, [pc, #228]	; (2bec8 <lte_lc_func_mode_get+0x120>)
   2bde4:	1ac0      	subs	r0, r0, r3
   2bde6:	08c0      	lsrs	r0, r0, #3
   2bde8:	0180      	lsls	r0, r0, #6
   2bdea:	f040 0001 	orr.w	r0, r0, #1
   2bdee:	f015 fd17 	bl	41820 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2bdf2:	4620      	mov	r0, r4
   2bdf4:	b00d      	add	sp, #52	; 0x34
   2bdf6:	bd30      	pop	{r4, r5, pc}
	err = at_params_list_init(&resp_list, AT_CFUN_PARAMS_COUNT);
   2bdf8:	2102      	movs	r1, #2
   2bdfa:	a805      	add	r0, sp, #20
   2bdfc:	f018 f9ec 	bl	441d8 <at_params_list_init>
	if (err) {
   2be00:	4604      	mov	r4, r0
   2be02:	b158      	cbz	r0, 2be1c <lte_lc_func_mode_get+0x74>
   2be04:	4b2f      	ldr	r3, [pc, #188]	; (2bec4 <lte_lc_func_mode_get+0x11c>)
   2be06:	482e      	ldr	r0, [pc, #184]	; (2bec0 <lte_lc_func_mode_get+0x118>)
		LOG_ERR("Could init AT params list, error: %d", err);
   2be08:	4622      	mov	r2, r4
   2be0a:	1ac0      	subs	r0, r0, r3
   2be0c:	08c0      	lsrs	r0, r0, #3
   2be0e:	0180      	lsls	r0, r0, #6
   2be10:	492e      	ldr	r1, [pc, #184]	; (2becc <lte_lc_func_mode_get+0x124>)
   2be12:	f040 0001 	orr.w	r0, r0, #1
   2be16:	f015 fd03 	bl	41820 <log_string_sync>
		return err;
   2be1a:	e7ea      	b.n	2bdf2 <lte_lc_func_mode_get+0x4a>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   2be1c:	4601      	mov	r1, r0
   2be1e:	2302      	movs	r3, #2
   2be20:	aa05      	add	r2, sp, #20
   2be22:	a807      	add	r0, sp, #28
   2be24:	f7ff fb2c 	bl	2b480 <at_parser_max_params_from_str>
	if (err) {
   2be28:	4604      	mov	r4, r0
   2be2a:	b170      	cbz	r0, 2be4a <lte_lc_func_mode_get+0xa2>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2be2c:	4622      	mov	r2, r4
   2be2e:	4824      	ldr	r0, [pc, #144]	; (2bec0 <lte_lc_func_mode_get+0x118>)
   2be30:	4b24      	ldr	r3, [pc, #144]	; (2bec4 <lte_lc_func_mode_get+0x11c>)
   2be32:	4927      	ldr	r1, [pc, #156]	; (2bed0 <lte_lc_func_mode_get+0x128>)
   2be34:	1ac0      	subs	r0, r0, r3
   2be36:	08c0      	lsrs	r0, r0, #3
   2be38:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not get response prefix, error: %d", err);
   2be3a:	f040 0001 	orr.w	r0, r0, #1
   2be3e:	f015 fcef 	bl	41820 <log_string_sync>
	at_params_list_free(&resp_list);
   2be42:	a805      	add	r0, sp, #20
   2be44:	f018 f9db 	bl	441fe <at_params_list_free>
	return err;
   2be48:	e7d3      	b.n	2bdf2 <lte_lc_func_mode_get+0x4a>
	err = at_params_string_get(&resp_list,
   2be4a:	4601      	mov	r1, r0
   2be4c:	ab02      	add	r3, sp, #8
   2be4e:	aa03      	add	r2, sp, #12
   2be50:	a805      	add	r0, sp, #20
   2be52:	f018 fa99 	bl	44388 <at_params_string_get>
	if (err) {
   2be56:	4604      	mov	r4, r0
   2be58:	b138      	cbz	r0, 2be6a <lte_lc_func_mode_get+0xc2>
   2be5a:	4819      	ldr	r0, [pc, #100]	; (2bec0 <lte_lc_func_mode_get+0x118>)
   2be5c:	4b19      	ldr	r3, [pc, #100]	; (2bec4 <lte_lc_func_mode_get+0x11c>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   2be5e:	4622      	mov	r2, r4
   2be60:	1ac0      	subs	r0, r0, r3
   2be62:	08c0      	lsrs	r0, r0, #3
   2be64:	491b      	ldr	r1, [pc, #108]	; (2bed4 <lte_lc_func_mode_get+0x12c>)
   2be66:	0180      	lsls	r0, r0, #6
   2be68:	e7e7      	b.n	2be3a <lte_lc_func_mode_get+0x92>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2be6a:	4a1b      	ldr	r2, [pc, #108]	; (2bed8 <lte_lc_func_mode_get+0x130>)
   2be6c:	9902      	ldr	r1, [sp, #8]
   2be6e:	a803      	add	r0, sp, #12
   2be70:	f018 fac8 	bl	44404 <response_is_valid>
   2be74:	b960      	cbnz	r0, 2be90 <lte_lc_func_mode_get+0xe8>
   2be76:	4b13      	ldr	r3, [pc, #76]	; (2bec4 <lte_lc_func_mode_get+0x11c>)
   2be78:	4811      	ldr	r0, [pc, #68]	; (2bec0 <lte_lc_func_mode_get+0x118>)
		LOG_ERR("Invalid CFUN response");
   2be7a:	4918      	ldr	r1, [pc, #96]	; (2bedc <lte_lc_func_mode_get+0x134>)
   2be7c:	1ac0      	subs	r0, r0, r3
   2be7e:	08c0      	lsrs	r0, r0, #3
   2be80:	0180      	lsls	r0, r0, #6
   2be82:	f040 0001 	orr.w	r0, r0, #1
   2be86:	f015 fccb 	bl	41820 <log_string_sync>
		err = -EIO;
   2be8a:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   2be8e:	e7d8      	b.n	2be42 <lte_lc_func_mode_get+0x9a>
	err = at_params_int_get(&resp_list, AT_CFUN_MODE_INDEX, &resp_mode);
   2be90:	2101      	movs	r1, #1
   2be92:	aa01      	add	r2, sp, #4
   2be94:	a805      	add	r0, sp, #20
   2be96:	f018 fa60 	bl	4435a <at_params_int_get>
	if (err) {
   2be9a:	4604      	mov	r4, r0
   2be9c:	b138      	cbz	r0, 2beae <lte_lc_func_mode_get+0x106>
   2be9e:	4808      	ldr	r0, [pc, #32]	; (2bec0 <lte_lc_func_mode_get+0x118>)
   2bea0:	4b08      	ldr	r3, [pc, #32]	; (2bec4 <lte_lc_func_mode_get+0x11c>)
		LOG_ERR("Could not parse mode parameter, err: %d", err);
   2bea2:	4622      	mov	r2, r4
   2bea4:	1ac0      	subs	r0, r0, r3
   2bea6:	08c0      	lsrs	r0, r0, #3
   2bea8:	490d      	ldr	r1, [pc, #52]	; (2bee0 <lte_lc_func_mode_get+0x138>)
   2beaa:	0180      	lsls	r0, r0, #6
   2beac:	e7c5      	b.n	2be3a <lte_lc_func_mode_get+0x92>
	*mode = resp_mode;
   2beae:	9b01      	ldr	r3, [sp, #4]
   2beb0:	702b      	strb	r3, [r5, #0]
   2beb2:	e7c6      	b.n	2be42 <lte_lc_func_mode_get+0x9a>
		return -EINVAL;
   2beb4:	f06f 0415 	mvn.w	r4, #21
   2beb8:	e79b      	b.n	2bdf2 <lte_lc_func_mode_get+0x4a>
   2beba:	bf00      	nop
   2bebc:	0004b033 	.word	0x0004b033
   2bec0:	00046464 	.word	0x00046464
   2bec4:	000463bc 	.word	0x000463bc
   2bec8:	0004ae40 	.word	0x0004ae40
   2becc:	0004ae5a 	.word	0x0004ae5a
   2bed0:	0004ae7f 	.word	0x0004ae7f
   2bed4:	0004acc1 	.word	0x0004acc1
   2bed8:	0004b03c 	.word	0x0004b03c
   2bedc:	0004b042 	.word	0x0004b042
   2bee0:	0004aed0 	.word	0x0004aed0

0002bee4 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   2bee4:	b510      	push	{r4, lr}
   2bee6:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2bee8:	4a09      	ldr	r2, [pc, #36]	; (2bf10 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   2beea:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2beec:	7823      	ldrb	r3, [r4, #0]
   2beee:	2100      	movs	r1, #0
   2bef0:	f7ff fac6 	bl	2b480 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   2bef4:	f110 0f0b 	cmn.w	r0, #11
   2bef8:	d000      	beq.n	2befc <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   2befa:	b940      	cbnz	r0, 2bf0e <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   2befc:	4804      	ldr	r0, [pc, #16]	; (2bf10 <modem_info_parse.isra.0+0x2c>)
   2befe:	f018 fa6a 	bl	443d6 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   2bf02:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   2bf04:	4298      	cmp	r0, r3
   2bf06:	bf94      	ite	ls
   2bf08:	2000      	movls	r0, #0
   2bf0a:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   2bf0e:	bd10      	pop	{r4, pc}
   2bf10:	200249a8 	.word	0x200249a8

0002bf14 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, const char *response)
{
   2bf14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2bf16:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	uint16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   2bf18:	4608      	mov	r0, r1
   2bf1a:	f7f1 f99f 	bl	1d25c <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   2bf1e:	4620      	mov	r0, r4
   2bf20:	4919      	ldr	r1, [pc, #100]	; (2bf88 <modem_info_rsrp_subscribe_handler+0x74>)
   2bf22:	f019 f912 	bl	4514a <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   2bf26:	b1b0      	cbz	r0, 2bf56 <modem_info_rsrp_subscribe_handler+0x42>
		return;
	}

	const struct modem_info_data rsrp_notify_data = {
   2bf28:	4b18      	ldr	r3, [pc, #96]	; (2bf8c <modem_info_rsrp_subscribe_handler+0x78>)
   2bf2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2bf2e:	ab04      	add	r3, sp, #16
   2bf30:	e903 0007 	stmdb	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_SHORT,
	};

	err = modem_info_parse(&rsrp_notify_data, response);
   2bf34:	4621      	mov	r1, r4
   2bf36:	f10d 000d 	add.w	r0, sp, #13
   2bf3a:	f7ff ffd3 	bl	2bee4 <modem_info_parse.isra.0>
	if (err != 0) {
   2bf3e:	b160      	cbz	r0, 2bf5a <modem_info_rsrp_subscribe_handler+0x46>
   2bf40:	4a13      	ldr	r2, [pc, #76]	; (2bf90 <modem_info_rsrp_subscribe_handler+0x7c>)
   2bf42:	4b14      	ldr	r3, [pc, #80]	; (2bf94 <modem_info_rsrp_subscribe_handler+0x80>)
		LOG_ERR("modem_info_parse failed to parse "
   2bf44:	4914      	ldr	r1, [pc, #80]	; (2bf98 <modem_info_rsrp_subscribe_handler+0x84>)
   2bf46:	1a9b      	subs	r3, r3, r2
   2bf48:	4602      	mov	r2, r0
   2bf4a:	08db      	lsrs	r3, r3, #3
   2bf4c:	019b      	lsls	r3, r3, #6

	err = at_params_short_get(&m_param_list,
				  rsrp_notify_data.param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2bf4e:	f043 0001 	orr.w	r0, r3, #1
   2bf52:	f015 fc65 	bl	41820 <log_string_sync>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   2bf56:	b004      	add	sp, #16
   2bf58:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   2bf5a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   2bf5e:	480f      	ldr	r0, [pc, #60]	; (2bf9c <modem_info_rsrp_subscribe_handler+0x88>)
   2bf60:	f10d 0202 	add.w	r2, sp, #2
   2bf64:	f018 f9e3 	bl	4432e <at_params_short_get>
	if (err != 0) {
   2bf68:	b138      	cbz	r0, 2bf7a <modem_info_rsrp_subscribe_handler+0x66>
   2bf6a:	4a09      	ldr	r2, [pc, #36]	; (2bf90 <modem_info_rsrp_subscribe_handler+0x7c>)
   2bf6c:	4b09      	ldr	r3, [pc, #36]	; (2bf94 <modem_info_rsrp_subscribe_handler+0x80>)
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2bf6e:	490c      	ldr	r1, [pc, #48]	; (2bfa0 <modem_info_rsrp_subscribe_handler+0x8c>)
   2bf70:	1a9b      	subs	r3, r3, r2
   2bf72:	08db      	lsrs	r3, r3, #3
   2bf74:	4602      	mov	r2, r0
   2bf76:	019b      	lsls	r3, r3, #6
   2bf78:	e7e9      	b.n	2bf4e <modem_info_rsrp_subscribe_handler+0x3a>
	modem_info_rsrp_cb(param_value);
   2bf7a:	4b0a      	ldr	r3, [pc, #40]	; (2bfa4 <modem_info_rsrp_subscribe_handler+0x90>)
   2bf7c:	f89d 0002 	ldrb.w	r0, [sp, #2]
   2bf80:	681b      	ldr	r3, [r3, #0]
   2bf82:	4798      	blx	r3
   2bf84:	e7e7      	b.n	2bf56 <modem_info_rsrp_subscribe_handler+0x42>
   2bf86:	bf00      	nop
   2bf88:	0004b264 	.word	0x0004b264
   2bf8c:	00046574 	.word	0x00046574
   2bf90:	000463bc 	.word	0x000463bc
   2bf94:	0004646c 	.word	0x0004646c
   2bf98:	0004b26a 	.word	0x0004b26a
   2bf9c:	200249a8 	.word	0x200249a8
   2bfa0:	0004b2a1 	.word	0x0004b2a1
   2bfa4:	200249b0 	.word	0x200249b0

0002bfa8 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   2bfa8:	2815      	cmp	r0, #21
	return modem_data[info_type]->data_type;
   2bfaa:	bf9d      	ittte	ls
   2bfac:	4b02      	ldrls	r3, [pc, #8]	; (2bfb8 <modem_info_type_get+0x10>)
   2bfae:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   2bfb2:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   2bfb4:	20ea      	movhi	r0, #234	; 0xea
}
   2bfb6:	4770      	bx	lr
   2bfb8:	00046bf0 	.word	0x00046bf0

0002bfbc <modem_info_name_get>:
{
   2bfbc:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   2bfbe:	460d      	mov	r5, r1
   2bfc0:	b919      	cbnz	r1, 2bfca <modem_info_name_get+0xe>
		return -EINVAL;
   2bfc2:	f06f 0415 	mvn.w	r4, #21
}
   2bfc6:	4620      	mov	r0, r4
   2bfc8:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   2bfca:	4b07      	ldr	r3, [pc, #28]	; (2bfe8 <modem_info_name_get+0x2c>)
   2bfcc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2bfd0:	6870      	ldr	r0, [r6, #4]
   2bfd2:	f7f1 f943 	bl	1d25c <strlen>
	if (len <= 0) {
   2bfd6:	1e04      	subs	r4, r0, #0
   2bfd8:	ddf3      	ble.n	2bfc2 <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2bfda:	4622      	mov	r2, r4
   2bfdc:	4628      	mov	r0, r5
   2bfde:	6871      	ldr	r1, [r6, #4]
   2bfe0:	f018 fe81 	bl	44ce6 <memcpy>
   2bfe4:	e7ef      	b.n	2bfc6 <modem_info_name_get+0xa>
   2bfe6:	bf00      	nop
   2bfe8:	00046bf0 	.word	0x00046bf0

0002bfec <modem_info_short_get>:
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2bfec:	2300      	movs	r3, #0
{
   2bfee:	b530      	push	{r4, r5, lr}
   2bff0:	460d      	mov	r5, r1
   2bff2:	b0a1      	sub	sp, #132	; 0x84
   2bff4:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2bff6:	227c      	movs	r2, #124	; 0x7c
   2bff8:	4619      	mov	r1, r3
   2bffa:	a801      	add	r0, sp, #4
   2bffc:	9300      	str	r3, [sp, #0]
   2bffe:	f018 fe92 	bl	44d26 <memset>
	if (buf == NULL) {
   2c002:	b1e5      	cbz	r5, 2c03e <modem_info_short_get+0x52>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2c004:	4a11      	ldr	r2, [pc, #68]	; (2c04c <modem_info_short_get+0x60>)
   2c006:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   2c00a:	7aa2      	ldrb	r2, [r4, #10]
   2c00c:	2a03      	cmp	r2, #3
   2c00e:	d016      	beq.n	2c03e <modem_info_short_get+0x52>
	err = at_cmd_write(modem_data[info]->cmd,
   2c010:	2300      	movs	r3, #0
   2c012:	2280      	movs	r2, #128	; 0x80
   2c014:	4669      	mov	r1, sp
   2c016:	6820      	ldr	r0, [r4, #0]
   2c018:	f7fe fd28 	bl	2aa6c <at_cmd_write>
	if (err != 0) {
   2c01c:	b990      	cbnz	r0, 2c044 <modem_info_short_get+0x58>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   2c01e:	4669      	mov	r1, sp
   2c020:	f104 0009 	add.w	r0, r4, #9
   2c024:	f7ff ff5e 	bl	2bee4 <modem_info_parse.isra.0>
	if (err) {
   2c028:	b938      	cbnz	r0, 2c03a <modem_info_short_get+0x4e>
	err = at_params_short_get(&m_param_list,
   2c02a:	462a      	mov	r2, r5
   2c02c:	7a21      	ldrb	r1, [r4, #8]
   2c02e:	4808      	ldr	r0, [pc, #32]	; (2c050 <modem_info_short_get+0x64>)
   2c030:	f018 f97d 	bl	4432e <at_params_short_get>
	return sizeof(uint16_t);
   2c034:	2800      	cmp	r0, #0
   2c036:	bf08      	it	eq
   2c038:	2002      	moveq	r0, #2
}
   2c03a:	b021      	add	sp, #132	; 0x84
   2c03c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c03e:	f06f 0015 	mvn.w	r0, #21
   2c042:	e7fa      	b.n	2c03a <modem_info_short_get+0x4e>
		return -EIO;
   2c044:	f06f 0004 	mvn.w	r0, #4
   2c048:	e7f7      	b.n	2c03a <modem_info_short_get+0x4e>
   2c04a:	bf00      	nop
   2c04c:	00046bf0 	.word	0x00046bf0
   2c050:	200249a8 	.word	0x200249a8

0002c054 <modem_info_string_get>:
{
   2c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2c058:	2500      	movs	r5, #0
{
   2c05a:	460e      	mov	r6, r1
   2c05c:	b0a5      	sub	sp, #148	; 0x94
   2c05e:	4680      	mov	r8, r0
   2c060:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2c062:	4629      	mov	r1, r5
   2c064:	227c      	movs	r2, #124	; 0x7c
   2c066:	a805      	add	r0, sp, #20
   2c068:	9504      	str	r5, [sp, #16]
   2c06a:	f018 fe5c 	bl	44d26 <memset>
	size_t len = 0;
   2c06e:	9503      	str	r5, [sp, #12]
	if ((buf == NULL) || (buf_size == 0)) {
   2c070:	2e00      	cmp	r6, #0
   2c072:	f000 80e2 	beq.w	2c23a <modem_info_string_get+0x1e6>
   2c076:	f1b9 0f00 	cmp.w	r9, #0
   2c07a:	f000 80de 	beq.w	2c23a <modem_info_string_get+0x1e6>
	err = at_cmd_write(modem_data[info]->cmd,
   2c07e:	4b73      	ldr	r3, [pc, #460]	; (2c24c <modem_info_string_get+0x1f8>)
   2c080:	2280      	movs	r2, #128	; 0x80
   2c082:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   2c086:	a904      	add	r1, sp, #16
   2c088:	462b      	mov	r3, r5
   2c08a:	f8da 0000 	ldr.w	r0, [sl]
   2c08e:	f7fe fced 	bl	2aa6c <at_cmd_write>
	if (info == MODEM_INFO_SUP_BAND) {
   2c092:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   2c096:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   2c098:	d10c      	bne.n	2c0b4 <modem_info_string_get+0x60>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2c09a:	f10d 0119 	add.w	r1, sp, #25
   2c09e:	4630      	mov	r0, r6
   2c0a0:	f018 fffd 	bl	4509e <strcpy>
		return strlen(buf);
   2c0a4:	4630      	mov	r0, r6
   2c0a6:	f7f1 f8d9 	bl	1d25c <strlen>
   2c0aa:	4602      	mov	r2, r0
}
   2c0ac:	4610      	mov	r0, r2
   2c0ae:	b025      	add	sp, #148	; 0x94
   2c0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   2c0b4:	f1b8 0f09 	cmp.w	r8, #9
   2c0b8:	d038      	beq.n	2c12c <modem_info_string_get+0xd8>
	if (err != 0) {
   2c0ba:	2c00      	cmp	r4, #0
   2c0bc:	f040 80c0 	bne.w	2c240 <modem_info_string_get+0x1ec>
	size_t ip_str_len = 0;
   2c0c0:	4627      	mov	r7, r4
		err = at_params_string_get(&m_param_list,
   2c0c2:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 2c270 <modem_info_string_get+0x21c>
	size_t cmd_rsp_idx = 0;
   2c0c6:	9400      	str	r4, [sp, #0]
	if (info == MODEM_INFO_IP_ADDRESS) {
   2c0c8:	9a00      	ldr	r2, [sp, #0]
   2c0ca:	ab04      	add	r3, sp, #16
   2c0cc:	f1b8 0f09 	cmp.w	r8, #9
   2c0d0:	4413      	add	r3, r2
   2c0d2:	d10f      	bne.n	2c0f4 <modem_info_string_get+0xa0>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   2c0d4:	4618      	mov	r0, r3
   2c0d6:	495e      	ldr	r1, [pc, #376]	; (2c250 <modem_info_string_get+0x1fc>)
   2c0d8:	9301      	str	r3, [sp, #4]
   2c0da:	f019 f836 	bl	4514a <strstr>
		if (ip_str_end == NULL) {
   2c0de:	2800      	cmp	r0, #0
   2c0e0:	f000 80b1 	beq.w	2c246 <modem_info_string_get+0x1f2>
		recv_buf[++ip_str_len] = 0;
   2c0e4:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   2c0e6:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   2c0e8:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   2c0ea:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   2c0ec:	1c47      	adds	r7, r0, #1
   2c0ee:	443a      	add	r2, r7
   2c0f0:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   2c0f4:	4619      	mov	r1, r3
   2c0f6:	f10a 0009 	add.w	r0, sl, #9
   2c0fa:	f7ff fef3 	bl	2bee4 <modem_info_parse.isra.0>
	if (err) {
   2c0fe:	4602      	mov	r2, r0
   2c100:	b1b8      	cbz	r0, 2c132 <modem_info_string_get+0xde>
   2c102:	4854      	ldr	r0, [pc, #336]	; (2c254 <modem_info_string_get+0x200>)
   2c104:	4b54      	ldr	r3, [pc, #336]	; (2c258 <modem_info_string_get+0x204>)
		LOG_ERR("Unable to parse data: %d", err);
   2c106:	4955      	ldr	r1, [pc, #340]	; (2c25c <modem_info_string_get+0x208>)
   2c108:	1ac0      	subs	r0, r0, r3
   2c10a:	08c0      	lsrs	r0, r0, #3
   2c10c:	0180      	lsls	r0, r0, #6
   2c10e:	9200      	str	r2, [sp, #0]
			LOG_ERR("Unable to obtain short: %d", err);
   2c110:	f040 0001 	orr.w	r0, r0, #1
   2c114:	f015 fb84 	bl	41820 <log_string_sync>
			return err;
   2c118:	9a00      	ldr	r2, [sp, #0]
   2c11a:	e7c7      	b.n	2c0ac <modem_info_string_get+0x58>
			++ip_str_end;
   2c11c:	3001      	adds	r0, #1
			++ip_cnt;
   2c11e:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   2c120:	4639      	mov	r1, r7
   2c122:	f019 f812 	bl	4514a <strstr>
   2c126:	2800      	cmp	r0, #0
   2c128:	d1f8      	bne.n	2c11c <modem_info_string_get+0xc8>
   2c12a:	e7c6      	b.n	2c0ba <modem_info_string_get+0x66>
   2c12c:	4f48      	ldr	r7, [pc, #288]	; (2c250 <modem_info_string_get+0x1fc>)
	char *ip_str_end = recv_buf;
   2c12e:	a804      	add	r0, sp, #16
   2c130:	e7f6      	b.n	2c120 <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2c132:	f89a 300a 	ldrb.w	r3, [sl, #10]
   2c136:	2b01      	cmp	r3, #1
   2c138:	d11c      	bne.n	2c174 <modem_info_string_get+0x120>
		err = at_params_short_get(&m_param_list,
   2c13a:	f10d 020a 	add.w	r2, sp, #10
   2c13e:	4658      	mov	r0, fp
   2c140:	f89a 1008 	ldrb.w	r1, [sl, #8]
   2c144:	f018 f8f3 	bl	4432e <at_params_short_get>
		if (err) {
   2c148:	4602      	mov	r2, r0
   2c14a:	b138      	cbz	r0, 2c15c <modem_info_string_get+0x108>
   2c14c:	4841      	ldr	r0, [pc, #260]	; (2c254 <modem_info_string_get+0x200>)
   2c14e:	4b42      	ldr	r3, [pc, #264]	; (2c258 <modem_info_string_get+0x204>)
			LOG_ERR("Unable to obtain short: %d", err);
   2c150:	4943      	ldr	r1, [pc, #268]	; (2c260 <modem_info_string_get+0x20c>)
   2c152:	1ac0      	subs	r0, r0, r3
   2c154:	08c0      	lsrs	r0, r0, #3
   2c156:	0180      	lsls	r0, r0, #6
   2c158:	9200      	str	r2, [sp, #0]
   2c15a:	e7d9      	b.n	2c110 <modem_info_string_get+0xbc>
		err = snprintf(buf, buf_size, "%d", param_value);
   2c15c:	4649      	mov	r1, r9
   2c15e:	4630      	mov	r0, r6
   2c160:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2c164:	4a3f      	ldr	r2, [pc, #252]	; (2c264 <modem_info_string_get+0x210>)
   2c166:	f013 fd11 	bl	3fb8c <sniprintf>
		if ((err <= 0) || (err > buf_size)) {
   2c16a:	4548      	cmp	r0, r9
   2c16c:	d915      	bls.n	2c19a <modem_info_string_get+0x146>
			return -EMSGSIZE;
   2c16e:	f06f 0279 	mvn.w	r2, #121	; 0x79
   2c172:	e79b      	b.n	2c0ac <modem_info_string_get+0x58>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2c174:	2b03      	cmp	r3, #3
   2c176:	d110      	bne.n	2c19a <modem_info_string_get+0x146>
		len = buf_size - out_buf_len;
   2c178:	eba9 0304 	sub.w	r3, r9, r4
   2c17c:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   2c17e:	1932      	adds	r2, r6, r4
   2c180:	4658      	mov	r0, fp
   2c182:	f89a 1008 	ldrb.w	r1, [sl, #8]
   2c186:	ab03      	add	r3, sp, #12
   2c188:	f018 f8fe 	bl	44388 <at_params_string_get>
		if (err != 0) {
   2c18c:	4602      	mov	r2, r0
   2c18e:	2800      	cmp	r0, #0
   2c190:	d18c      	bne.n	2c0ac <modem_info_string_get+0x58>
		} else if (len >= buf_size) {
   2c192:	9b03      	ldr	r3, [sp, #12]
   2c194:	454b      	cmp	r3, r9
   2c196:	d2ea      	bcs.n	2c16e <modem_info_string_get+0x11a>
		buf[len] = 0;
   2c198:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   2c19a:	f1b8 0f0e 	cmp.w	r8, #14
   2c19e:	d121      	bne.n	2c1e4 <modem_info_string_get+0x190>
   2c1a0:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   2c1a2:	4630      	mov	r0, r6
   2c1a4:	f7f1 f85a 	bl	1d25c <strlen>
   2c1a8:	1ca3      	adds	r3, r4, #2
   2c1aa:	1ba4      	subs	r4, r4, r6
   2c1ac:	42a0      	cmp	r0, r4
   2c1ae:	d80f      	bhi.n	2c1d0 <modem_info_string_get+0x17c>
		if ((len == ICCID_LEN) &&
   2c1b0:	9b03      	ldr	r3, [sp, #12]
   2c1b2:	2b14      	cmp	r3, #20
   2c1b4:	d106      	bne.n	2c1c4 <modem_info_string_get+0x170>
   2c1b6:	7cf3      	ldrb	r3, [r6, #19]
   2c1b8:	2b46      	cmp	r3, #70	; 0x46
   2c1ba:	d103      	bne.n	2c1c4 <modem_info_string_get+0x170>
			buf[len - 1] = '\0';
   2c1bc:	2300      	movs	r3, #0
   2c1be:	74f3      	strb	r3, [r6, #19]
			--len;
   2c1c0:	2313      	movs	r3, #19
   2c1c2:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   2c1c4:	9a03      	ldr	r2, [sp, #12]
   2c1c6:	2a00      	cmp	r2, #0
   2c1c8:	bf08      	it	eq
   2c1ca:	f06f 0285 	mvneq.w	r2, #133	; 0x85
   2c1ce:	e76d      	b.n	2c0ac <modem_info_string_get+0x58>
		current_char = buf[i];
   2c1d0:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   2c1d4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   2c1d8:	461c      	mov	r4, r3
		buf[i] = next_char;
   2c1da:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   2c1de:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   2c1e2:	e7de      	b.n	2c1a2 <modem_info_string_get+0x14e>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   2c1e4:	f1b8 0f09 	cmp.w	r8, #9
   2c1e8:	d1ec      	bne.n	2c1c4 <modem_info_string_get+0x170>
   2c1ea:	2d00      	cmp	r5, #0
   2c1ec:	ddea      	ble.n	2c1c4 <modem_info_string_get+0x170>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   2c1ee:	1933      	adds	r3, r6, r4
   2c1f0:	4618      	mov	r0, r3
   2c1f2:	491d      	ldr	r1, [pc, #116]	; (2c268 <modem_info_string_get+0x214>)
   2c1f4:	9301      	str	r3, [sp, #4]
   2c1f6:	f018 ffa8 	bl	4514a <strstr>
		if (ip_v6_str) {
   2c1fa:	b130      	cbz	r0, 2c20a <modem_info_string_get+0x1b6>
			*ip_v6_str = 0;
   2c1fc:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   2c1fe:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   2c200:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   2c202:	4618      	mov	r0, r3
   2c204:	f7f1 f82a 	bl	1d25c <strlen>
   2c208:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   2c20a:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   2c20c:	2d01      	cmp	r5, #1
		out_buf_len += len;
   2c20e:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   2c210:	d00e      	beq.n	2c230 <modem_info_string_get+0x1dc>
			err = snprintf(&buf[out_buf_len],
   2c212:	eba9 0104 	sub.w	r1, r9, r4
   2c216:	4a15      	ldr	r2, [pc, #84]	; (2c26c <modem_info_string_get+0x218>)
   2c218:	1930      	adds	r0, r6, r4
   2c21a:	9100      	str	r1, [sp, #0]
   2c21c:	f013 fcb6 	bl	3fb8c <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   2c220:	2800      	cmp	r0, #0
   2c222:	dda4      	ble.n	2c16e <modem_info_string_get+0x11a>
   2c224:	9900      	ldr	r1, [sp, #0]
   2c226:	4281      	cmp	r1, r0
   2c228:	d3a1      	bcc.n	2c16e <modem_info_string_get+0x11a>
			cmd_rsp_idx = ip_str_len + 1;
   2c22a:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   2c22c:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   2c22e:	9300      	str	r3, [sp, #0]
		if (--ip_cnt) {
   2c230:	3d01      	subs	r5, #1
   2c232:	f47f af49 	bne.w	2c0c8 <modem_info_string_get+0x74>
			len = out_buf_len;
   2c236:	9403      	str	r4, [sp, #12]
   2c238:	e7c4      	b.n	2c1c4 <modem_info_string_get+0x170>
		return -EINVAL;
   2c23a:	f06f 0215 	mvn.w	r2, #21
   2c23e:	e735      	b.n	2c0ac <modem_info_string_get+0x58>
		return -EIO;
   2c240:	f06f 0204 	mvn.w	r2, #4
   2c244:	e732      	b.n	2c0ac <modem_info_string_get+0x58>
			return -EFAULT;
   2c246:	f06f 020d 	mvn.w	r2, #13
   2c24a:	e72f      	b.n	2c0ac <modem_info_string_get+0x58>
   2c24c:	00046bf0 	.word	0x00046bf0
   2c250:	0004d31b 	.word	0x0004d31b
   2c254:	0004646c 	.word	0x0004646c
   2c258:	000463bc 	.word	0x000463bc
   2c25c:	0004b2c1 	.word	0x0004b2c1
   2c260:	0004b2da 	.word	0x0004b2da
   2c264:	0004c1f0 	.word	0x0004c1f0
   2c268:	00048e92 	.word	0x00048e92
   2c26c:	00048848 	.word	0x00048848
   2c270:	200249a8 	.word	0x200249a8

0002c274 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   2c274:	4b10      	ldr	r3, [pc, #64]	; (2c2b8 <modem_info_rsrp_register+0x44>)
{
   2c276:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   2c278:	4910      	ldr	r1, [pc, #64]	; (2c2bc <modem_info_rsrp_register+0x48>)
	modem_info_rsrp_cb = cb;
   2c27a:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   2c27c:	2000      	movs	r0, #0
   2c27e:	f7fe fd1f 	bl	2acc0 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   2c282:	4604      	mov	r4, r0
   2c284:	b160      	cbz	r0, 2c2a0 <modem_info_rsrp_register+0x2c>
   2c286:	480e      	ldr	r0, [pc, #56]	; (2c2c0 <modem_info_rsrp_register+0x4c>)
   2c288:	4b0e      	ldr	r3, [pc, #56]	; (2c2c4 <modem_info_rsrp_register+0x50>)
		LOG_ERR("Can't register handler rc=%d", rc);
   2c28a:	4622      	mov	r2, r4
   2c28c:	1ac0      	subs	r0, r0, r3
   2c28e:	08c0      	lsrs	r0, r0, #3
   2c290:	0180      	lsls	r0, r0, #6
   2c292:	490d      	ldr	r1, [pc, #52]	; (2c2c8 <modem_info_rsrp_register+0x54>)
   2c294:	f040 0001 	orr.w	r0, r0, #1
   2c298:	f015 fac2 	bl	41820 <log_string_sync>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   2c29c:	4620      	mov	r0, r4
   2c29e:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   2c2a0:	4603      	mov	r3, r0
   2c2a2:	4602      	mov	r2, r0
   2c2a4:	4601      	mov	r1, r0
   2c2a6:	4809      	ldr	r0, [pc, #36]	; (2c2cc <modem_info_rsrp_register+0x58>)
   2c2a8:	f7fe fbe0 	bl	2aa6c <at_cmd_write>
   2c2ac:	1e04      	subs	r4, r0, #0
		return -EIO;
   2c2ae:	bf18      	it	ne
   2c2b0:	f06f 0404 	mvnne.w	r4, #4
   2c2b4:	e7f2      	b.n	2c29c <modem_info_rsrp_register+0x28>
   2c2b6:	bf00      	nop
   2c2b8:	200249b0 	.word	0x200249b0
   2c2bc:	0002bf15 	.word	0x0002bf15
   2c2c0:	0004646c 	.word	0x0004646c
   2c2c4:	000463bc 	.word	0x000463bc
   2c2c8:	0004b2f5 	.word	0x0004b2f5
   2c2cc:	0004b312 	.word	0x0004b312

0002c2d0 <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   2c2d0:	210a      	movs	r1, #10
   2c2d2:	4801      	ldr	r0, [pc, #4]	; (2c2d8 <modem_info_init+0x8>)
   2c2d4:	f017 bf80 	b.w	441d8 <at_params_list_init>
   2c2d8:	200249a8 	.word	0x200249a8

0002c2dc <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   2c2dc:	b538      	push	{r3, r4, r5, lr}
   2c2de:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   2c2e0:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   2c2e4:	f7ff fe60 	bl	2bfa8 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   2c2e8:	2803      	cmp	r0, #3
   2c2ea:	d118      	bne.n	2c31e <modem_data_get+0x42>
		ret = modem_info_string_get(param->type,
   2c2ec:	2264      	movs	r2, #100	; 0x64
   2c2ee:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2c2f2:	1ca9      	adds	r1, r5, #2
   2c2f4:	f7ff feae 	bl	2c054 <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   2c2f8:	1e04      	subs	r4, r0, #0
   2c2fa:	db02      	blt.n	2c302 <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   2c2fc:	2400      	movs	r4, #0
}
   2c2fe:	4620      	mov	r0, r4
   2c300:	bd38      	pop	{r3, r4, r5, pc}
   2c302:	4b11      	ldr	r3, [pc, #68]	; (2c348 <modem_data_get+0x6c>)
   2c304:	4811      	ldr	r0, [pc, #68]	; (2c34c <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   2c306:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   2c30a:	1ac0      	subs	r0, r0, r3
   2c30c:	08c0      	lsrs	r0, r0, #3
   2c30e:	0180      	lsls	r0, r0, #6
   2c310:	4623      	mov	r3, r4
   2c312:	490f      	ldr	r1, [pc, #60]	; (2c350 <modem_data_get+0x74>)
   2c314:	f040 0001 	orr.w	r0, r0, #1
   2c318:	f015 fa82 	bl	41820 <log_string_sync>
			return ret;
   2c31c:	e7ef      	b.n	2c2fe <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2c31e:	2801      	cmp	r0, #1
   2c320:	d1ec      	bne.n	2c2fc <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   2c322:	4629      	mov	r1, r5
   2c324:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2c328:	f7ff fe60 	bl	2bfec <modem_info_short_get>
		if (ret < 0) {
   2c32c:	1e04      	subs	r4, r0, #0
   2c32e:	dae5      	bge.n	2c2fc <modem_data_get+0x20>
   2c330:	4b05      	ldr	r3, [pc, #20]	; (2c348 <modem_data_get+0x6c>)
   2c332:	4806      	ldr	r0, [pc, #24]	; (2c34c <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d", ret);
   2c334:	4622      	mov	r2, r4
   2c336:	1ac0      	subs	r0, r0, r3
   2c338:	08c0      	lsrs	r0, r0, #3
   2c33a:	0180      	lsls	r0, r0, #6
   2c33c:	4905      	ldr	r1, [pc, #20]	; (2c354 <modem_data_get+0x78>)
   2c33e:	f040 0001 	orr.w	r0, r0, #1
   2c342:	f015 fa6d 	bl	41820 <log_string_sync>
			return ret;
   2c346:	e7da      	b.n	2c2fe <modem_data_get+0x22>
   2c348:	000463bc 	.word	0x000463bc
   2c34c:	0004647c 	.word	0x0004647c
   2c350:	0004b31c 	.word	0x0004b31c
   2c354:	0004b33a 	.word	0x0004b33a

0002c358 <modem_info_params_init>:
	if (modem == NULL) {
   2c358:	2800      	cmp	r0, #0
   2c35a:	d046      	beq.n	2c3ea <modem_info_params_init+0x92>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   2c35c:	2301      	movs	r3, #1
   2c35e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   2c362:	2302      	movs	r3, #2
   2c364:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   2c368:	2303      	movs	r3, #3
   2c36a:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   2c36e:	2305      	movs	r3, #5
   2c370:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   2c374:	2306      	movs	r3, #6
   2c376:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   2c37a:	2307      	movs	r3, #7
   2c37c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   2c380:	2308      	movs	r3, #8
   2c382:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   2c386:	2309      	movs	r3, #9
   2c388:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   2c38c:	2304      	movs	r3, #4
   2c38e:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   2c392:	230f      	movs	r3, #15
   2c394:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   2c398:	2310      	movs	r3, #16
   2c39a:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   2c39e:	2311      	movs	r3, #17
   2c3a0:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   2c3a4:	2314      	movs	r3, #20
   2c3a6:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   2c3aa:	2315      	movs	r3, #21
   2c3ac:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   2c3b0:	230a      	movs	r3, #10
   2c3b2:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   2c3b6:	230e      	movs	r3, #14
   2c3b8:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   2c3bc:	2312      	movs	r3, #18
   2c3be:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   2c3c2:	230d      	movs	r3, #13
   2c3c4:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   2c3c8:	230b      	movs	r3, #11
   2c3ca:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.imei.type			= MODEM_INFO_IMEI;
   2c3ce:	2313      	movs	r3, #19
   2c3d0:	f880 38d4 	strb.w	r3, [r0, #2260]	; 0x8d4
	modem->device.board			= CONFIG_BOARD;
   2c3d4:	4b06      	ldr	r3, [pc, #24]	; (2c3f0 <modem_info_params_init+0x98>)
   2c3d6:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   2c3da:	4b06      	ldr	r3, [pc, #24]	; (2c3f4 <modem_info_params_init+0x9c>)
   2c3dc:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   2c3e0:	4b05      	ldr	r3, [pc, #20]	; (2c3f8 <modem_info_params_init+0xa0>)
   2c3e2:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0
	return 0;
   2c3e6:	2000      	movs	r0, #0
   2c3e8:	4770      	bx	lr
		return -EINVAL;
   2c3ea:	f06f 0015 	mvn.w	r0, #21
}
   2c3ee:	4770      	bx	lr
   2c3f0:	0004b355 	.word	0x0004b355
   2c3f4:	0004b367 	.word	0x0004b367
   2c3f8:	0004754f 	.word	0x0004754f

0002c3fc <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   2c3fc:	e92d 4477 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, sl, lr}
	int ret;

	if (modem == NULL) {
   2c400:	4604      	mov	r4, r0
   2c402:	2800      	cmp	r0, #0
   2c404:	f000 80cc 	beq.w	2c5a0 <modem_info_params_get+0x1a4>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   2c408:	f7ff ff68 	bl	2c2dc <modem_data_get>
   2c40c:	4606      	mov	r6, r0
		ret += modem_data_get(&modem->network.sup_band);
   2c40e:	f104 0070 	add.w	r0, r4, #112	; 0x70
   2c412:	f7ff ff63 	bl	2c2dc <modem_data_get>
   2c416:	4406      	add	r6, r0
		ret += modem_data_get(&modem->network.ip_address);
   2c418:	f504 7044 	add.w	r0, r4, #784	; 0x310
   2c41c:	f7ff ff5e 	bl	2c2dc <modem_data_get>
   2c420:	1985      	adds	r5, r0, r6
		ret += modem_data_get(&modem->network.ue_mode);
   2c422:	f504 7060 	add.w	r0, r4, #896	; 0x380
   2c426:	f7ff ff59 	bl	2c2dc <modem_data_get>
		ret += modem_data_get(&modem->network.current_operator);
   2c42a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		ret += modem_data_get(&modem->network.ue_mode);
   2c42e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   2c430:	4618      	mov	r0, r3
   2c432:	9301      	str	r3, [sp, #4]
   2c434:	f7ff ff52 	bl	2c2dc <modem_data_get>
   2c438:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   2c43a:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   2c43e:	f7ff ff4d 	bl	2c2dc <modem_data_get>
		ret += modem_data_get(&modem->network.area_code);
   2c442:	f104 0ae0 	add.w	sl, r4, #224	; 0xe0
		ret += modem_data_get(&modem->network.cellid_hex);
   2c446:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   2c448:	4650      	mov	r0, sl
   2c44a:	f7ff ff47 	bl	2c2dc <modem_data_get>
   2c44e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   2c450:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   2c454:	f7ff ff42 	bl	2c2dc <modem_data_get>
   2c458:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   2c45a:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   2c45e:	f7ff ff3d 	bl	2c2dc <modem_data_get>
   2c462:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   2c464:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   2c468:	f7ff ff38 	bl	2c2dc <modem_data_get>
   2c46c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   2c46e:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   2c472:	f7ff ff33 	bl	2c2dc <modem_data_get>
   2c476:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   2c478:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   2c47c:	f7ff ff2e 	bl	2c2dc <modem_data_get>
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   2c480:	9b01      	ldr	r3, [sp, #4]
			ret += modem_data_get(&modem->network.date_time);
   2c482:	4405      	add	r5, r0
		}

		ret += mcc_mnc_parse(&modem->network.current_operator,
   2c484:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
   2c488:	f504 720c 	add.w	r2, r4, #560	; 0x230
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   2c48c:	2b00      	cmp	r3, #0
   2c48e:	d050      	beq.n	2c532 <modem_info_params_get+0x136>
   2c490:	2900      	cmp	r1, #0
   2c492:	d04e      	beq.n	2c532 <modem_info_params_get+0x136>
   2c494:	2a00      	cmp	r2, #0
   2c496:	d04c      	beq.n	2c532 <modem_info_params_get+0x136>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c498:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
	memcpy(mcc->value_string, current_operator->value_string, 3);
   2c49c:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   2c4a0:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   2c4a4:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2c4a8:	220a      	movs	r2, #10
   2c4aa:	7083      	strb	r3, [r0, #2]
   2c4ac:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   2c4b0:	2100      	movs	r1, #0
   2c4b2:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   2c4b6:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   2c4ba:	f204 2632 	addw	r6, r4, #562	; 0x232
   2c4be:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2c4c2:	f013 fc47 	bl	3fd54 <strtol>
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2c4c6:	220a      	movs	r2, #10
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2c4c8:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2c4cc:	2100      	movs	r1, #0
   2c4ce:	4630      	mov	r0, r6
   2c4d0:	f013 fc40 	bl	3fd54 <strtol>
	return 0;
   2c4d4:	2200      	movs	r2, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2c4d6:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2c4da:	2100      	movs	r1, #0
		ret += mcc_mnc_parse(&modem->network.current_operator,
   2c4dc:	4415      	add	r5, r2
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2c4de:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   2c4e2:	2210      	movs	r2, #16
   2c4e4:	f013 fc36 	bl	3fd54 <strtol>
   2c4e8:	f7f0 f8fc 	bl	1c6e4 <__aeabi_i2d>
   2c4ec:	f504 66c4 	add.w	r6, r4, #1568	; 0x620
   2c4f0:	e9c6 0100 	strd	r0, r1, [r6]
	if (area_code == NULL) {
   2c4f4:	f1ba 0f00 	cmp.w	sl, #0
   2c4f8:	d01e      	beq.n	2c538 <modem_info_params_get+0x13c>
	area_code->value_string[4] = '\0';
   2c4fa:	2600      	movs	r6, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2c4fc:	2210      	movs	r2, #16
   2c4fe:	4631      	mov	r1, r6
	area_code->value_string[4] = '\0';
   2c500:	f884 60e6 	strb.w	r6, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2c504:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   2c508:	f013 fc24 	bl	3fd54 <strtol>
   2c50c:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   2c510:	19aa      	adds	r2, r5, r6
   2c512:	d014      	beq.n	2c53e <modem_info_params_get+0x142>
   2c514:	4824      	ldr	r0, [pc, #144]	; (2c5a8 <modem_info_params_get+0x1ac>)
   2c516:	4b25      	ldr	r3, [pc, #148]	; (2c5ac <modem_info_params_get+0x1b0>)
			LOG_ERR("Network data not obtained: %d", ret);
   2c518:	4925      	ldr	r1, [pc, #148]	; (2c5b0 <modem_info_params_get+0x1b4>)
   2c51a:	1ac0      	subs	r0, r0, r3
   2c51c:	08c0      	lsrs	r0, r0, #3
   2c51e:	0180      	lsls	r0, r0, #6
		}
		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM_IMSI)) {
			ret += modem_data_get(&modem->sim.imsi);
		}
		if (ret) {
			LOG_ERR("Sim data not obtained: %d", ret);
   2c520:	f040 0001 	orr.w	r0, r0, #1
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   2c524:	f015 f97c 	bl	41820 <log_string_sync>
			return -EAGAIN;
   2c528:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   2c52c:	b003      	add	sp, #12
   2c52e:	e8bd 8470 	ldmia.w	sp!, {r4, r5, r6, sl, pc}
		return -EINVAL;
   2c532:	f06f 0215 	mvn.w	r2, #21
   2c536:	e7d0      	b.n	2c4da <modem_info_params_get+0xde>
		return -EINVAL;
   2c538:	f06f 0615 	mvn.w	r6, #21
   2c53c:	e7e8      	b.n	2c510 <modem_info_params_get+0x114>
		ret = modem_data_get(&modem->sim.uicc);
   2c53e:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   2c542:	f7ff fecb 	bl	2c2dc <modem_data_get>
   2c546:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   2c548:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   2c54c:	f7ff fec6 	bl	2c2dc <modem_data_get>
   2c550:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   2c552:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   2c556:	f7ff fec1 	bl	2c2dc <modem_data_get>
		if (ret) {
   2c55a:	182a      	adds	r2, r5, r0
   2c55c:	d006      	beq.n	2c56c <modem_info_params_get+0x170>
   2c55e:	4812      	ldr	r0, [pc, #72]	; (2c5a8 <modem_info_params_get+0x1ac>)
   2c560:	4b12      	ldr	r3, [pc, #72]	; (2c5ac <modem_info_params_get+0x1b0>)
			LOG_ERR("Sim data not obtained: %d", ret);
   2c562:	4914      	ldr	r1, [pc, #80]	; (2c5b4 <modem_info_params_get+0x1b8>)
   2c564:	1ac0      	subs	r0, r0, r3
   2c566:	08c0      	lsrs	r0, r0, #3
   2c568:	0180      	lsls	r0, r0, #6
   2c56a:	e7d9      	b.n	2c520 <modem_info_params_get+0x124>
		ret = modem_data_get(&modem->device.modem_fw);
   2c56c:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   2c570:	f7ff feb4 	bl	2c2dc <modem_data_get>
   2c574:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   2c576:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   2c57a:	f7ff feaf 	bl	2c2dc <modem_data_get>
   2c57e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   2c580:	f604 0068 	addw	r0, r4, #2152	; 0x868
   2c584:	f7ff feaa 	bl	2c2dc <modem_data_get>
		if (ret) {
   2c588:	1828      	adds	r0, r5, r0
   2c58a:	d0cf      	beq.n	2c52c <modem_info_params_get+0x130>
   2c58c:	4a07      	ldr	r2, [pc, #28]	; (2c5ac <modem_info_params_get+0x1b0>)
   2c58e:	4b06      	ldr	r3, [pc, #24]	; (2c5a8 <modem_info_params_get+0x1ac>)
			LOG_ERR("Device data not obtained: %d", ret);
   2c590:	4909      	ldr	r1, [pc, #36]	; (2c5b8 <modem_info_params_get+0x1bc>)
   2c592:	1a9b      	subs	r3, r3, r2
   2c594:	08db      	lsrs	r3, r3, #3
   2c596:	019b      	lsls	r3, r3, #6
   2c598:	4602      	mov	r2, r0
   2c59a:	f043 0001 	orr.w	r0, r3, #1
   2c59e:	e7c1      	b.n	2c524 <modem_info_params_get+0x128>
		return -EINVAL;
   2c5a0:	f06f 0015 	mvn.w	r0, #21
   2c5a4:	e7c2      	b.n	2c52c <modem_info_params_get+0x130>
   2c5a6:	bf00      	nop
   2c5a8:	0004647c 	.word	0x0004647c
   2c5ac:	000463bc 	.word	0x000463bc
   2c5b0:	0004b36e 	.word	0x0004b36e
   2c5b4:	0004b38c 	.word	0x0004b38c
   2c5b8:	0004b3a6 	.word	0x0004b3a6

0002c5bc <network_data_add>:

	return total_len;
}

static int network_data_add(struct network_param *network, cJSON *json_obj)
{
   2c5bc:	e92d 4230 	stmdb	sp!, {r4, r5, r9, lr}
   2c5c0:	460c      	mov	r4, r1

	static const char lte_string[]	 = "LTE-M";
	static const char nbiot_string[] = "NB-IoT";
	static const char gps_string[]	 = " GPS";

	if (network == NULL || json_obj == NULL) {
   2c5c2:	4681      	mov	r9, r0
{
   2c5c4:	b09a      	sub	sp, #104	; 0x68
	if (network == NULL || json_obj == NULL) {
   2c5c6:	2800      	cmp	r0, #0
   2c5c8:	d066      	beq.n	2c698 <network_data_add+0xdc>
   2c5ca:	2900      	cmp	r1, #0
   2c5cc:	d064      	beq.n	2c698 <network_data_add+0xdc>
		return -EINVAL;
	}

	total_len = json_add_data(&network->current_band, json_obj);
   2c5ce:	f017 ff4f 	bl	44470 <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   2c5d2:	4621      	mov	r1, r4
	total_len = json_add_data(&network->current_band, json_obj);
   2c5d4:	4605      	mov	r5, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   2c5d6:	f109 0070 	add.w	r0, r9, #112	; 0x70
   2c5da:	f017 ff49 	bl	44470 <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   2c5de:	4621      	mov	r1, r4
	total_len += json_add_data(&network->sup_band, json_obj);
   2c5e0:	4405      	add	r5, r0
	total_len += json_add_data(&network->area_code, json_obj);
   2c5e2:	f109 00e0 	add.w	r0, r9, #224	; 0xe0
   2c5e6:	f017 ff43 	bl	44470 <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   2c5ea:	4621      	mov	r1, r4
	total_len += json_add_data(&network->area_code, json_obj);
   2c5ec:	4405      	add	r5, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   2c5ee:	f509 70a8 	add.w	r0, r9, #336	; 0x150
   2c5f2:	f017 ff3d 	bl	44470 <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   2c5f6:	4621      	mov	r1, r4
	total_len += json_add_data(&network->current_operator, json_obj);
   2c5f8:	4405      	add	r5, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   2c5fa:	f509 7044 	add.w	r0, r9, #784	; 0x310
   2c5fe:	f017 ff37 	bl	44470 <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   2c602:	4621      	mov	r1, r4
	total_len += json_add_data(&network->ip_address, json_obj);
   2c604:	4405      	add	r5, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   2c606:	f509 7060 	add.w	r0, r9, #896	; 0x380
   2c60a:	f017 ff31 	bl	44470 <json_add_data>

	len = modem_info_name_get(network->cellid_hex.type, data_name);
   2c60e:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   2c610:	4405      	add	r5, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   2c612:	f899 030c 	ldrb.w	r0, [r9, #780]	; 0x30c
   2c616:	f7ff fcd1 	bl	2bfbc <modem_info_name_get>
	data_name[len] =  '\0';
   2c61a:	ab1a      	add	r3, sp, #104	; 0x68
   2c61c:	4418      	add	r0, r3
   2c61e:	2300      	movs	r3, #0
   2c620:	f800 3c64 	strb.w	r3, [r0, #-100]
	ret = json_add_num(json_obj, data_name, network->cellid_dec);
   2c624:	f509 63c4 	add.w	r3, r9, #1568	; 0x620
	json_num = cJSON_CreateNumber(num);
   2c628:	ed93 0b00 	vldr	d0, [r3]
   2c62c:	f7f1 f9e0 	bl	1d9f0 <cJSON_CreateNumber>
	if (json_num == NULL) {
   2c630:	4602      	mov	r2, r0
   2c632:	b120      	cbz	r0, 2c63e <network_data_add+0x82>
	cJSON_AddItemToObject(parent, str, item);
   2c634:	4620      	mov	r0, r4
   2c636:	a901      	add	r1, sp, #4
   2c638:	f017 f9e1 	bl	439fe <cJSON_AddItemToObject>

	if (ret) {
		LOG_DBG("Unable to add the cell ID.");
	} else {
		total_len += sizeof(double);
   2c63c:	3508      	adds	r5, #8
	}

	if (network->lte_mode.value == 1) {
   2c63e:	f8b9 33f0 	ldrh.w	r3, [r9, #1008]	; 0x3f0
   2c642:	f509 62c5 	add.w	r2, r9, #1576	; 0x628
   2c646:	2b01      	cmp	r3, #1
   2c648:	d11b      	bne.n	2c682 <network_data_add+0xc6>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   2c64a:	4610      	mov	r0, r2
   2c64c:	4914      	ldr	r1, [pc, #80]	; (2c6a0 <network_data_add+0xe4>)
   2c64e:	f018 fd0a 	bl	45066 <strcat>
   2c652:	4602      	mov	r2, r0
		strcat(network->network_mode, lte_string);
		total_len += sizeof(lte_string);
   2c654:	3506      	adds	r5, #6
	} else if (network->nbiot_mode.value == 1) {
		strcat(network->network_mode, nbiot_string);
		total_len += sizeof(nbiot_string);
	}

	if (network->gps_mode.value == 1) {
   2c656:	f8b9 34d0 	ldrh.w	r3, [r9, #1232]	; 0x4d0
   2c65a:	2b01      	cmp	r3, #1
   2c65c:	d105      	bne.n	2c66a <network_data_add+0xae>
   2c65e:	4610      	mov	r0, r2
   2c660:	4910      	ldr	r1, [pc, #64]	; (2c6a4 <network_data_add+0xe8>)
   2c662:	f018 fd00 	bl	45066 <strcat>
   2c666:	4602      	mov	r2, r0
		strcat(network->network_mode, gps_string);
		total_len += sizeof(gps_string);
   2c668:	3505      	adds	r5, #5
	}

	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   2c66a:	4620      	mov	r0, r4
   2c66c:	490e      	ldr	r1, [pc, #56]	; (2c6a8 <network_data_add+0xec>)
   2c66e:	f017 fee8 	bl	44442 <json_add_str>

	if (ret) {
   2c672:	b110      	cbz	r0, 2c67a <network_data_add+0xbe>
		printk("Unable to add the network mode");
   2c674:	480d      	ldr	r0, [pc, #52]	; (2c6ac <network_data_add+0xf0>)
   2c676:	f014 fea5 	bl	413c4 <printk>
	}

	return total_len;
}
   2c67a:	4628      	mov	r0, r5
   2c67c:	b01a      	add	sp, #104	; 0x68
   2c67e:	e8bd 8230 	ldmia.w	sp!, {r4, r5, r9, pc}
	} else if (network->nbiot_mode.value == 1) {
   2c682:	f8b9 3460 	ldrh.w	r3, [r9, #1120]	; 0x460
   2c686:	2b01      	cmp	r3, #1
   2c688:	d1e5      	bne.n	2c656 <network_data_add+0x9a>
   2c68a:	4610      	mov	r0, r2
   2c68c:	4908      	ldr	r1, [pc, #32]	; (2c6b0 <network_data_add+0xf4>)
   2c68e:	f018 fcea 	bl	45066 <strcat>
		total_len += sizeof(nbiot_string);
   2c692:	3507      	adds	r5, #7
   2c694:	4602      	mov	r2, r0
   2c696:	e7de      	b.n	2c656 <network_data_add+0x9a>
		return -EINVAL;
   2c698:	f06f 0515 	mvn.w	r5, #21
   2c69c:	e7ed      	b.n	2c67a <network_data_add+0xbe>
   2c69e:	bf00      	nop
   2c6a0:	0004b44d 	.word	0x0004b44d
   2c6a4:	0004b448 	.word	0x0004b448
   2c6a8:	0004b3d5 	.word	0x0004b3d5
   2c6ac:	0004b3e1 	.word	0x0004b3e1
   2c6b0:	0004b453 	.word	0x0004b453

0002c6b4 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   2c6b4:	e92d 4230 	stmdb	sp!, {r4, r5, r9, lr}
   2c6b8:	460c      	mov	r4, r1
	int total_len;

	if (device == NULL || json_obj == NULL) {
   2c6ba:	4681      	mov	r9, r0
   2c6bc:	b330      	cbz	r0, 2c70c <device_data_add+0x58>
   2c6be:	b329      	cbz	r1, 2c70c <device_data_add+0x58>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   2c6c0:	f017 fed6 	bl	44470 <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   2c6c4:	4621      	mov	r1, r4
	total_len = json_add_data(&device->modem_fw, json_obj);
   2c6c6:	4605      	mov	r5, r0
	total_len += json_add_data(&device->battery, json_obj);
   2c6c8:	f109 0070 	add.w	r0, r9, #112	; 0x70
   2c6cc:	f017 fed0 	bl	44470 <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   2c6d0:	4621      	mov	r1, r4
	total_len += json_add_data(&device->battery, json_obj);
   2c6d2:	4405      	add	r5, r0
	total_len += json_add_data(&device->imei, json_obj);
   2c6d4:	f109 00e0 	add.w	r0, r9, #224	; 0xe0
   2c6d8:	f017 feca 	bl	44470 <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   2c6dc:	f8d9 2150 	ldr.w	r2, [r9, #336]	; 0x150
   2c6e0:	490c      	ldr	r1, [pc, #48]	; (2c714 <device_data_add+0x60>)
	total_len += json_add_data(&device->imei, json_obj);
   2c6e2:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "board", device->board);
   2c6e4:	4620      	mov	r0, r4
   2c6e6:	f017 feac 	bl	44442 <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2c6ea:	f8d9 2154 	ldr.w	r2, [r9, #340]	; 0x154
   2c6ee:	490a      	ldr	r1, [pc, #40]	; (2c718 <device_data_add+0x64>)
	total_len += json_add_str(json_obj, "board", device->board);
   2c6f0:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2c6f2:	4620      	mov	r0, r4
   2c6f4:	f017 fea5 	bl	44442 <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   2c6f8:	f8d9 2158 	ldr.w	r2, [r9, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2c6fc:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   2c6fe:	4907      	ldr	r1, [pc, #28]	; (2c71c <device_data_add+0x68>)
   2c700:	4620      	mov	r0, r4
   2c702:	f017 fe9e 	bl	44442 <json_add_str>
   2c706:	4428      	add	r0, r5

	return total_len;
}
   2c708:	e8bd 8230 	ldmia.w	sp!, {r4, r5, r9, pc}
		return -EINVAL;
   2c70c:	f06f 0015 	mvn.w	r0, #21
   2c710:	e7fa      	b.n	2c708 <device_data_add+0x54>
   2c712:	bf00      	nop
   2c714:	0004b400 	.word	0x0004b400
   2c718:	0004b406 	.word	0x0004b406
   2c71c:	0004b411 	.word	0x0004b411

0002c720 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   2c720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c724:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   2c726:	460d      	mov	r5, r1
   2c728:	2900      	cmp	r1, #0
   2c72a:	d04f      	beq.n	2c7cc <modem_info_json_object_encode+0xac>
   2c72c:	2800      	cmp	r0, #0
   2c72e:	d04d      	beq.n	2c7cc <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   2c730:	4608      	mov	r0, r1
   2c732:	f017 f94d 	bl	439d0 <cJSON_GetArraySize>
   2c736:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   2c738:	f7fc fde2 	bl	29300 <cJSON_CreateObject>
   2c73c:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   2c73e:	f7fc fddf 	bl	29300 <cJSON_CreateObject>
   2c742:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   2c744:	f7fc fddc 	bl	29300 <cJSON_CreateObject>
   2c748:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   2c74a:	f1b8 0f00 	cmp.w	r8, #0
   2c74e:	d03a      	beq.n	2c7c6 <modem_info_json_object_encode+0xa6>
   2c750:	b3cf      	cbz	r7, 2c7c6 <modem_info_json_object_encode+0xa6>
   2c752:	b3c0      	cbz	r0, 2c7c6 <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   2c754:	4641      	mov	r1, r8
   2c756:	4648      	mov	r0, r9
   2c758:	f7ff ff30 	bl	2c5bc <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   2c75c:	2800      	cmp	r0, #0
   2c75e:	dd06      	ble.n	2c76e <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   2c760:	4642      	mov	r2, r8
   2c762:	4628      	mov	r0, r5
   2c764:	491b      	ldr	r1, [pc, #108]	; (2c7d4 <modem_info_json_object_encode+0xb4>)
   2c766:	f017 f94a 	bl	439fe <cJSON_AddItemToObject>

		json_add_obj(root_obj, "networkInfo", network_obj);
		network_obj = NULL;
   2c76a:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   2c76e:	4639      	mov	r1, r7
   2c770:	f509 60c7 	add.w	r0, r9, #1592	; 0x638
   2c774:	f017 fec3 	bl	444fe <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   2c778:	2800      	cmp	r0, #0
   2c77a:	dd05      	ble.n	2c788 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   2c77c:	463a      	mov	r2, r7
   2c77e:	4628      	mov	r0, r5
   2c780:	4915      	ldr	r1, [pc, #84]	; (2c7d8 <modem_info_json_object_encode+0xb8>)
   2c782:	f017 f93c 	bl	439fe <cJSON_AddItemToObject>

		json_add_obj(root_obj, "simInfo", sim_obj);
		sim_obj = NULL;
   2c786:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   2c788:	4631      	mov	r1, r6
   2c78a:	f509 60f1 	add.w	r0, r9, #1928	; 0x788
   2c78e:	f7ff ff91 	bl	2c6b4 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   2c792:	2800      	cmp	r0, #0
   2c794:	dd05      	ble.n	2c7a2 <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   2c796:	4632      	mov	r2, r6
   2c798:	4628      	mov	r0, r5
   2c79a:	4910      	ldr	r1, [pc, #64]	; (2c7dc <modem_info_json_object_encode+0xbc>)
   2c79c:	f017 f92f 	bl	439fe <cJSON_AddItemToObject>

		json_add_obj(root_obj, "deviceInfo", device_obj);
		device_obj = NULL;
   2c7a0:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   2c7a2:	4640      	mov	r0, r8
   2c7a4:	f7fc fcd8 	bl	29158 <cJSON_Delete>
	cJSON_Delete(sim_obj);
   2c7a8:	4638      	mov	r0, r7
   2c7aa:	f7fc fcd5 	bl	29158 <cJSON_Delete>
	cJSON_Delete(device_obj);
   2c7ae:	4630      	mov	r0, r6
   2c7b0:	f7fc fcd2 	bl	29158 <cJSON_Delete>

	if (obj_count >= 0) {
   2c7b4:	2c00      	cmp	r4, #0
   2c7b6:	db03      	blt.n	2c7c0 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   2c7b8:	4628      	mov	r0, r5
   2c7ba:	f017 f909 	bl	439d0 <cJSON_GetArraySize>
   2c7be:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   2c7c0:	4620      	mov	r0, r4
   2c7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   2c7c6:	f06f 040b 	mvn.w	r4, #11
   2c7ca:	e7ea      	b.n	2c7a2 <modem_info_json_object_encode+0x82>
		return -EINVAL;
   2c7cc:	f06f 0415 	mvn.w	r4, #21
   2c7d0:	e7f6      	b.n	2c7c0 <modem_info_json_object_encode+0xa0>
   2c7d2:	bf00      	nop
   2c7d4:	0004b419 	.word	0x0004b419
   2c7d8:	0004b425 	.word	0x0004b425
   2c7dc:	0004b42d 	.word	0x0004b42d

0002c7e0 <date_time_notify_event.constprop.0>:

static void date_time_notify_event(const struct date_time_evt *evt)
{
	__ASSERT(evt != NULL, "Library event not found");

	if (app_evt_handler != NULL) {
   2c7e0:	4b02      	ldr	r3, [pc, #8]	; (2c7ec <date_time_notify_event.constprop.0+0xc>)
   2c7e2:	681b      	ldr	r3, [r3, #0]
   2c7e4:	b10b      	cbz	r3, 2c7ea <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   2c7e6:	4802      	ldr	r0, [pc, #8]	; (2c7f0 <date_time_notify_event.constprop.0+0x10>)
   2c7e8:	4718      	bx	r3
	}
}
   2c7ea:	4770      	bx	lr
   2c7ec:	200249b4 	.word	0x200249b4
   2c7f0:	2002cc35 	.word	0x2002cc35

0002c7f4 <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   2c7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   2c7f8:	4e72      	ldr	r6, [pc, #456]	; (2c9c4 <new_date_time_get+0x1d0>)
   2c7fa:	4c73      	ldr	r4, [pc, #460]	; (2c9c8 <new_date_time_get+0x1d4>)
   2c7fc:	4637      	mov	r7, r6
   2c7fe:	4b73      	ldr	r3, [pc, #460]	; (2c9cc <new_date_time_get+0x1d8>)
{
   2c800:	b095      	sub	sp, #84	; 0x54
   2c802:	1ae4      	subs	r4, r4, r3
   2c804:	08e4      	lsrs	r4, r4, #3
   2c806:	f04f 33ff 	mov.w	r3, #4294967295
   2c80a:	f04f 32ff 	mov.w	r2, #4294967295
   2c80e:	4870      	ldr	r0, [pc, #448]	; (2c9d0 <new_date_time_get+0x1dc>)
   2c810:	f011 f9b6 	bl	3db80 <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   2c814:	68b3      	ldr	r3, [r6, #8]
   2c816:	b193      	cbz	r3, 2c83e <new_date_time_get+0x4a>
   2c818:	e9d6 2300 	ldrd	r2, r3, [r6]
   2c81c:	4313      	orrs	r3, r2
   2c81e:	d00e      	beq.n	2c83e <new_date_time_get+0x4a>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   2c820:	f017 fe85 	bl	4452e <k_uptime_get>
   2c824:	68b3      	ldr	r3, [r6, #8]
   2c826:	4a6b      	ldr	r2, [pc, #428]	; (2c9d4 <new_date_time_get+0x1e0>)
   2c828:	1ac0      	subs	r0, r0, r3
   2c82a:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   2c82e:	2300      	movs	r3, #0
   2c830:	4282      	cmp	r2, r0
   2c832:	418b      	sbcs	r3, r1
   2c834:	db03      	blt.n	2c83e <new_date_time_get+0x4a>
		LOG_DBG("Updating date time UTC...");

		err = current_time_check();
		if (err == 0) {
			LOG_DBG("Time successfully obtained");
			initial_valid_time = true;
   2c836:	2201      	movs	r2, #1
   2c838:	4b67      	ldr	r3, [pc, #412]	; (2c9d8 <new_date_time_get+0x1e4>)

		LOG_DBG("Not getting time from NTP server");
#endif
		LOG_DBG("Not getting time from any time source");

		evt.type = DATE_TIME_NOT_OBTAINED;
   2c83a:	701a      	strb	r2, [r3, #0]
   2c83c:	e05a      	b.n	2c8f4 <new_date_time_get+0x100>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   2c83e:	2300      	movs	r3, #0
   2c840:	2221      	movs	r2, #33	; 0x21
   2c842:	4866      	ldr	r0, [pc, #408]	; (2c9dc <new_date_time_get+0x1e8>)
   2c844:	a902      	add	r1, sp, #8
   2c846:	f7fe f911 	bl	2aa6c <at_cmd_write>
	if (err) {
   2c84a:	2800      	cmp	r0, #0
   2c84c:	d155      	bne.n	2c8fa <new_date_time_get+0x106>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   2c84e:	2520      	movs	r5, #32
   2c850:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   2c854:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   2c858:	4628      	mov	r0, r5
   2c85a:	aa02      	add	r2, sp, #8
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   2c85c:	f812 3b01 	ldrb.w	r3, [r2], #1
   2c860:	3b2c      	subs	r3, #44	; 0x2c
   2c862:	b2db      	uxtb	r3, r3
   2c864:	2b0e      	cmp	r3, #14
   2c866:	d805      	bhi.n	2c874 <new_date_time_get+0x80>
   2c868:	fa21 f303 	lsr.w	r3, r1, r3
   2c86c:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   2c86e:	bf48      	it	mi
   2c870:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   2c874:	3d01      	subs	r5, #1
   2c876:	d1f1      	bne.n	2c85c <new_date_time_get+0x68>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2c878:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   2c87a:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2c87c:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   2c87e:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2c880:	f013 fa68 	bl	3fd54 <strtol>
   2c884:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   2c886:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2c888:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   2c88a:	a901      	add	r1, sp, #4
   2c88c:	9801      	ldr	r0, [sp, #4]
   2c88e:	f013 fa61 	bl	3fd54 <strtol>
   2c892:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2c894:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   2c896:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2c898:	a901      	add	r1, sp, #4
   2c89a:	9801      	ldr	r0, [sp, #4]
   2c89c:	f013 fa5a 	bl	3fd54 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2c8a0:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2c8a2:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2c8a4:	a901      	add	r1, sp, #4
   2c8a6:	9801      	ldr	r0, [sp, #4]
   2c8a8:	f013 fa54 	bl	3fd54 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2c8ac:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2c8ae:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2c8b0:	a901      	add	r1, sp, #4
   2c8b2:	9801      	ldr	r0, [sp, #4]
   2c8b4:	f013 fa4e 	bl	3fd54 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2c8b8:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2c8ba:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2c8bc:	a901      	add	r1, sp, #4
   2c8be:	9801      	ldr	r0, [sp, #4]
   2c8c0:	f013 fa48 	bl	3fd54 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   2c8c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2c8c6:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   2c8c8:	2b73      	cmp	r3, #115	; 0x73
   2c8ca:	d016      	beq.n	2c8fa <new_date_time_get+0x106>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2c8cc:	a80b      	add	r0, sp, #44	; 0x2c
   2c8ce:	f7f7 feff 	bl	246d0 <timeutil_timegm64>
   2c8d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2c8d6:	460a      	mov	r2, r1
   2c8d8:	fba0 0103 	umull	r0, r1, r0, r3
   2c8dc:	fb03 1102 	mla	r1, r3, r2, r1
   2c8e0:	e9c7 0100 	strd	r0, r1, [r7]
	time_aux.last_date_time_update = k_uptime_get();
   2c8e4:	f017 fe23 	bl	4452e <k_uptime_get>
			initial_valid_time = true;
   2c8e8:	2201      	movs	r2, #1
   2c8ea:	4b3b      	ldr	r3, [pc, #236]	; (2c9d8 <new_date_time_get+0x1e4>)
	time_aux.last_date_time_update = k_uptime_get();
   2c8ec:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   2c8ee:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   2c8f0:	4b3b      	ldr	r3, [pc, #236]	; (2c9e0 <new_date_time_get+0x1ec>)
   2c8f2:	701d      	strb	r5, [r3, #0]
		date_time_notify_event(&evt);
   2c8f4:	f7ff ff74 	bl	2c7e0 <date_time_notify_event.constprop.0>
   2c8f8:	e785      	b.n	2c806 <new_date_time_get+0x12>
		if (err == 0) {
   2c8fa:	f04f 0900 	mov.w	r9, #0
   2c8fe:	4d39      	ldr	r5, [pc, #228]	; (2c9e4 <new_date_time_get+0x1f0>)
	hints.ai_family = AF_INET;
   2c900:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 2ca00 <new_date_time_get+0x20c>
	err = sntp_query(&sntp_ctx, timeout, time);
   2c904:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 2c9f8 <new_date_time_get+0x204>
	hints.ai_socktype = SOCK_DGRAM;
   2c908:	2302      	movs	r3, #2
   2c90a:	2201      	movs	r2, #1
   2c90c:	e9c8 2302 	strd	r2, r3, [r8, #8]
	hints.ai_protocol = 0;
   2c910:	2300      	movs	r3, #0
   2c912:	f8c8 3010 	str.w	r3, [r8, #16]
	if (server->addr == NULL) {
   2c916:	686b      	ldr	r3, [r5, #4]
   2c918:	b9eb      	cbnz	r3, 2c956 <new_date_time_get+0x162>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   2c91a:	4642      	mov	r2, r8
   2c91c:	4932      	ldr	r1, [pc, #200]	; (2c9e8 <new_date_time_get+0x1f4>)
   2c91e:	6828      	ldr	r0, [r5, #0]
   2c920:	1d2b      	adds	r3, r5, #4
   2c922:	f015 fb21 	bl	41f68 <zsock_getaddrinfo>
		if (err) {
   2c926:	4602      	mov	r2, r0
   2c928:	b1a8      	cbz	r0, 2c956 <new_date_time_get+0x162>
			LOG_WRN("getaddrinfo, error: %d", err);
   2c92a:	01a0      	lsls	r0, r4, #6
   2c92c:	492f      	ldr	r1, [pc, #188]	; (2c9ec <new_date_time_get+0x1f8>)
   2c92e:	f040 0002 	orr.w	r0, r0, #2
   2c932:	f014 ff75 	bl	41820 <log_string_sync>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   2c936:	f109 0901 	add.w	r9, r9, #1
   2c93a:	f1b9 0f05 	cmp.w	r9, #5
   2c93e:	f105 0508 	add.w	r5, r5, #8
   2c942:	d1e1      	bne.n	2c908 <new_date_time_get+0x114>
	LOG_WRN("Not getting time from any NTP server");
   2c944:	01a0      	lsls	r0, r4, #6
   2c946:	492a      	ldr	r1, [pc, #168]	; (2c9f0 <new_date_time_get+0x1fc>)
   2c948:	f040 0002 	orr.w	r0, r0, #2
   2c94c:	f014 ff68 	bl	41820 <log_string_sync>
		evt.type = DATE_TIME_NOT_OBTAINED;
   2c950:	2203      	movs	r2, #3
   2c952:	4b23      	ldr	r3, [pc, #140]	; (2c9e0 <new_date_time_get+0x1ec>)
   2c954:	e771      	b.n	2c83a <new_date_time_get+0x46>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   2c956:	686b      	ldr	r3, [r5, #4]
   2c958:	a80b      	add	r0, sp, #44	; 0x2c
   2c95a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2c95e:	f015 facf 	bl	41f00 <sntp_init>
	if (err) {
   2c962:	4682      	mov	sl, r0
   2c964:	b300      	cbz	r0, 2c9a8 <new_date_time_get+0x1b4>
		LOG_WRN("sntp_init, error: %d", err);
   2c966:	4652      	mov	r2, sl
   2c968:	4922      	ldr	r1, [pc, #136]	; (2c9f4 <new_date_time_get+0x200>)
   2c96a:	01a0      	lsls	r0, r4, #6
		LOG_WRN("sntp_query, error: %d", err);
   2c96c:	f040 0002 	orr.w	r0, r0, #2
   2c970:	f014 ff56 	bl	41820 <log_string_sync>
	sntp_close(&sntp_ctx);
   2c974:	a80b      	add	r0, sp, #44	; 0x2c
   2c976:	f015 faf2 	bl	41f5e <sntp_close>
		if (err) {
   2c97a:	f1ba 0f00 	cmp.w	sl, #0
   2c97e:	d1da      	bne.n	2c936 <new_date_time_get+0x142>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   2c980:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2c984:	4b1c      	ldr	r3, [pc, #112]	; (2c9f8 <new_date_time_get+0x204>)
   2c986:	681a      	ldr	r2, [r3, #0]
   2c988:	6858      	ldr	r0, [r3, #4]
   2c98a:	fba2 2301 	umull	r2, r3, r2, r1
   2c98e:	fb01 3300 	mla	r3, r1, r0, r3
   2c992:	e9c7 2300 	strd	r2, r3, [r7]
		time_aux.last_date_time_update = k_uptime_get();
   2c996:	f017 fdca 	bl	4452e <k_uptime_get>
			initial_valid_time = true;
   2c99a:	2301      	movs	r3, #1
   2c99c:	4a0e      	ldr	r2, [pc, #56]	; (2c9d8 <new_date_time_get+0x1e4>)
		time_aux.last_date_time_update = k_uptime_get();
   2c99e:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   2c9a0:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   2c9a2:	4a0f      	ldr	r2, [pc, #60]	; (2c9e0 <new_date_time_get+0x1ec>)
   2c9a4:	7013      	strb	r3, [r2, #0]
			date_time_notify_event(&evt);
   2c9a6:	e7a5      	b.n	2c8f4 <new_date_time_get+0x100>
	err = sntp_query(&sntp_ctx, timeout, time);
   2c9a8:	465a      	mov	r2, fp
   2c9aa:	f241 3188 	movw	r1, #5000	; 0x1388
   2c9ae:	a80b      	add	r0, sp, #44	; 0x2c
   2c9b0:	f7f0 fdf2 	bl	1d598 <sntp_query>
	if (err) {
   2c9b4:	4682      	mov	sl, r0
   2c9b6:	2800      	cmp	r0, #0
   2c9b8:	d0dc      	beq.n	2c974 <new_date_time_get+0x180>
		LOG_WRN("sntp_query, error: %d", err);
   2c9ba:	4652      	mov	r2, sl
   2c9bc:	490f      	ldr	r1, [pc, #60]	; (2c9fc <new_date_time_get+0x208>)
   2c9be:	01a0      	lsls	r0, r4, #6
   2c9c0:	e7d4      	b.n	2c96c <new_date_time_get+0x178>
   2c9c2:	bf00      	nop
   2c9c4:	20021c40 	.word	0x20021c40
   2c9c8:	00046414 	.word	0x00046414
   2c9cc:	000463bc 	.word	0x000463bc
   2c9d0:	20020c90 	.word	0x20020c90
   2c9d4:	0036ee80 	.word	0x0036ee80
   2c9d8:	2002cc36 	.word	0x2002cc36
   2c9dc:	0004b12b 	.word	0x0004b12b
   2c9e0:	2002cc35 	.word	0x2002cc35
   2c9e4:	20020700 	.word	0x20020700
   2c9e8:	0004b45a 	.word	0x0004b45a
   2c9ec:	0004b45e 	.word	0x0004b45e
   2c9f0:	0004b4a0 	.word	0x0004b4a0
   2c9f4:	0004b475 	.word	0x0004b475
   2c9f8:	20021c30 	.word	0x20021c30
   2c9fc:	0004b48a 	.word	0x0004b48a
   2ca00:	200249b8 	.word	0x200249b8

0002ca04 <date_time_init>:
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   2ca04:	b510      	push	{r4, lr}
	k_delayed_work_init(&time_work, date_time_handler);
   2ca06:	4c07      	ldr	r4, [pc, #28]	; (2ca24 <date_time_init+0x20>)
   2ca08:	4907      	ldr	r1, [pc, #28]	; (2ca28 <date_time_init+0x24>)
   2ca0a:	4620      	mov	r0, r4
   2ca0c:	f018 f885 	bl	44b1a <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2ca10:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   2ca14:	2300      	movs	r3, #0
   2ca16:	4621      	mov	r1, r4
   2ca18:	4804      	ldr	r0, [pc, #16]	; (2ca2c <date_time_init+0x28>)
   2ca1a:	f011 fadb 	bl	3dfd4 <k_delayed_work_submit_to_queue>
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   2ca1e:	2000      	movs	r0, #0
   2ca20:	bd10      	pop	{r4, pc}
   2ca22:	bf00      	nop
   2ca24:	20021c50 	.word	0x20021c50
   2ca28:	0002ca31 	.word	0x0002ca31
   2ca2c:	200244f8 	.word	0x200244f8

0002ca30 <date_time_handler>:
{
   2ca30:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
   2ca32:	4806      	ldr	r0, [pc, #24]	; (2ca4c <date_time_handler+0x1c>)
   2ca34:	f011 f860 	bl	3daf8 <z_impl_k_sem_give>
}
   2ca38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ca3c:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   2ca40:	2300      	movs	r3, #0
   2ca42:	4903      	ldr	r1, [pc, #12]	; (2ca50 <date_time_handler+0x20>)
   2ca44:	4803      	ldr	r0, [pc, #12]	; (2ca54 <date_time_handler+0x24>)
   2ca46:	f011 bac5 	b.w	3dfd4 <k_delayed_work_submit_to_queue>
   2ca4a:	bf00      	nop
   2ca4c:	20020c90 	.word	0x20020c90
   2ca50:	20021c50 	.word	0x20021c50
   2ca54:	200244f8 	.word	0x200244f8

0002ca58 <date_time_set>:

	/** Seconds after the minute. tm_sec is generally 0-59.
	 *  The extra range is to accommodate for leap seconds
	 *  in certain systems.
	 */
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2ca58:	6803      	ldr	r3, [r0, #0]
{
   2ca5a:	b570      	push	{r4, r5, r6, lr}
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2ca5c:	2b3d      	cmp	r3, #61	; 0x3d
{
   2ca5e:	4604      	mov	r4, r0
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2ca60:	d97b      	bls.n	2cb5a <date_time_set+0x102>
   2ca62:	4b4c      	ldr	r3, [pc, #304]	; (2cb94 <date_time_set+0x13c>)
   2ca64:	484c      	ldr	r0, [pc, #304]	; (2cb98 <date_time_set+0x140>)
		LOG_ERR("Seconds in time structure not in correct format");
   2ca66:	494d      	ldr	r1, [pc, #308]	; (2cb9c <date_time_set+0x144>)
   2ca68:	1ac0      	subs	r0, r0, r3
   2ca6a:	08c0      	lsrs	r0, r0, #3
   2ca6c:	0180      	lsls	r0, r0, #6
   2ca6e:	f040 0001 	orr.w	r0, r0, #1
   2ca72:	f014 fed5 	bl	41820 <log_string_sync>
		err = -EINVAL;
   2ca76:	f06f 0515 	mvn.w	r5, #21
	}

	/** Minutes after the hour. */
	if (new_date_time->tm_min < 0 || new_date_time->tm_min > 59) {
   2ca7a:	6863      	ldr	r3, [r4, #4]
   2ca7c:	2b3b      	cmp	r3, #59	; 0x3b
   2ca7e:	d90b      	bls.n	2ca98 <date_time_set+0x40>
   2ca80:	4b44      	ldr	r3, [pc, #272]	; (2cb94 <date_time_set+0x13c>)
   2ca82:	4845      	ldr	r0, [pc, #276]	; (2cb98 <date_time_set+0x140>)
		LOG_ERR("Minutes in time structure not in correct format");
   2ca84:	4946      	ldr	r1, [pc, #280]	; (2cba0 <date_time_set+0x148>)
   2ca86:	1ac0      	subs	r0, r0, r3
   2ca88:	08c0      	lsrs	r0, r0, #3
   2ca8a:	0180      	lsls	r0, r0, #6
   2ca8c:	f040 0001 	orr.w	r0, r0, #1
   2ca90:	f014 fec6 	bl	41820 <log_string_sync>
		err = -EINVAL;
   2ca94:	f06f 0515 	mvn.w	r5, #21
	}

	/** Hours since midnight. */
	if (new_date_time->tm_hour < 0 || new_date_time->tm_hour > 23) {
   2ca98:	68a3      	ldr	r3, [r4, #8]
   2ca9a:	2b17      	cmp	r3, #23
   2ca9c:	d90b      	bls.n	2cab6 <date_time_set+0x5e>
   2ca9e:	4b3d      	ldr	r3, [pc, #244]	; (2cb94 <date_time_set+0x13c>)
   2caa0:	483d      	ldr	r0, [pc, #244]	; (2cb98 <date_time_set+0x140>)
		LOG_ERR("Hours in time structure not in correct format");
   2caa2:	4940      	ldr	r1, [pc, #256]	; (2cba4 <date_time_set+0x14c>)
   2caa4:	1ac0      	subs	r0, r0, r3
   2caa6:	08c0      	lsrs	r0, r0, #3
   2caa8:	0180      	lsls	r0, r0, #6
   2caaa:	f040 0001 	orr.w	r0, r0, #1
   2caae:	f014 feb7 	bl	41820 <log_string_sync>
		err = -EINVAL;
   2cab2:	f06f 0515 	mvn.w	r5, #21
	}

	/** Day of the month. */
	if (new_date_time->tm_mday < 1 || new_date_time->tm_mday > 31) {
   2cab6:	68e3      	ldr	r3, [r4, #12]
   2cab8:	3b01      	subs	r3, #1
   2caba:	2b1e      	cmp	r3, #30
   2cabc:	d90b      	bls.n	2cad6 <date_time_set+0x7e>
   2cabe:	4b35      	ldr	r3, [pc, #212]	; (2cb94 <date_time_set+0x13c>)
   2cac0:	4835      	ldr	r0, [pc, #212]	; (2cb98 <date_time_set+0x140>)
		LOG_ERR("Day in time structure not in correct format");
   2cac2:	4939      	ldr	r1, [pc, #228]	; (2cba8 <date_time_set+0x150>)
   2cac4:	1ac0      	subs	r0, r0, r3
   2cac6:	08c0      	lsrs	r0, r0, #3
   2cac8:	0180      	lsls	r0, r0, #6
   2caca:	f040 0001 	orr.w	r0, r0, #1
   2cace:	f014 fea7 	bl	41820 <log_string_sync>
		err = -EINVAL;
   2cad2:	f06f 0515 	mvn.w	r5, #21
	}

	/** Months since January. */
	if (new_date_time->tm_mon < 0 || new_date_time->tm_mon > 11) {
   2cad6:	6923      	ldr	r3, [r4, #16]
   2cad8:	2b0b      	cmp	r3, #11
   2cada:	d90b      	bls.n	2caf4 <date_time_set+0x9c>
   2cadc:	4b2d      	ldr	r3, [pc, #180]	; (2cb94 <date_time_set+0x13c>)
   2cade:	482e      	ldr	r0, [pc, #184]	; (2cb98 <date_time_set+0x140>)
		LOG_ERR("Month in time structure not in correct format");
   2cae0:	4932      	ldr	r1, [pc, #200]	; (2cbac <date_time_set+0x154>)
   2cae2:	1ac0      	subs	r0, r0, r3
   2cae4:	08c0      	lsrs	r0, r0, #3
   2cae6:	0180      	lsls	r0, r0, #6
   2cae8:	f040 0001 	orr.w	r0, r0, #1
   2caec:	f014 fe98 	bl	41820 <log_string_sync>
		err = -EINVAL;
   2caf0:	f06f 0515 	mvn.w	r5, #21
	}

	/** Years since 1900. 115 corresponds to the year 2015. */
	if (new_date_time->tm_year < 115 || new_date_time->tm_year > 1900) {
   2caf4:	f240 62f9 	movw	r2, #1785	; 0x6f9
   2caf8:	6963      	ldr	r3, [r4, #20]
   2cafa:	3b73      	subs	r3, #115	; 0x73
   2cafc:	4293      	cmp	r3, r2
   2cafe:	d90b      	bls.n	2cb18 <date_time_set+0xc0>
   2cb00:	4b24      	ldr	r3, [pc, #144]	; (2cb94 <date_time_set+0x13c>)
   2cb02:	4825      	ldr	r0, [pc, #148]	; (2cb98 <date_time_set+0x140>)
		LOG_ERR("Year in time structure not in correct format");
   2cb04:	492a      	ldr	r1, [pc, #168]	; (2cbb0 <date_time_set+0x158>)
   2cb06:	1ac0      	subs	r0, r0, r3
   2cb08:	08c0      	lsrs	r0, r0, #3
   2cb0a:	0180      	lsls	r0, r0, #6
   2cb0c:	f040 0001 	orr.w	r0, r0, #1
   2cb10:	f014 fe86 	bl	41820 <log_string_sync>
		err = -EINVAL;
   2cb14:	f06f 0515 	mvn.w	r5, #21
	}

	/** Days since Sunday. */
	if (new_date_time->tm_wday < 0 || new_date_time->tm_wday > 6) {
   2cb18:	69a3      	ldr	r3, [r4, #24]
   2cb1a:	2b06      	cmp	r3, #6
   2cb1c:	d90b      	bls.n	2cb36 <date_time_set+0xde>
   2cb1e:	4b1d      	ldr	r3, [pc, #116]	; (2cb94 <date_time_set+0x13c>)
   2cb20:	481d      	ldr	r0, [pc, #116]	; (2cb98 <date_time_set+0x140>)
		LOG_ERR("Week day in time structure not in correct format");
   2cb22:	4924      	ldr	r1, [pc, #144]	; (2cbb4 <date_time_set+0x15c>)
   2cb24:	1ac0      	subs	r0, r0, r3
   2cb26:	08c0      	lsrs	r0, r0, #3
   2cb28:	0180      	lsls	r0, r0, #6
   2cb2a:	f040 0001 	orr.w	r0, r0, #1
   2cb2e:	f014 fe77 	bl	41820 <log_string_sync>
		err = -EINVAL;
   2cb32:	f06f 0515 	mvn.w	r5, #21
	}

	/** Days since January 1. */
	if (new_date_time->tm_yday < 0 || new_date_time->tm_yday > 365) {
   2cb36:	69e3      	ldr	r3, [r4, #28]
   2cb38:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
   2cb3c:	d30f      	bcc.n	2cb5e <date_time_set+0x106>
   2cb3e:	4b15      	ldr	r3, [pc, #84]	; (2cb94 <date_time_set+0x13c>)
   2cb40:	4815      	ldr	r0, [pc, #84]	; (2cb98 <date_time_set+0x140>)
		LOG_ERR("Year day in time structure not in correct format");
   2cb42:	491d      	ldr	r1, [pc, #116]	; (2cbb8 <date_time_set+0x160>)
   2cb44:	1ac0      	subs	r0, r0, r3
   2cb46:	08c0      	lsrs	r0, r0, #3
   2cb48:	0180      	lsls	r0, r0, #6
   2cb4a:	f040 0001 	orr.w	r0, r0, #1
   2cb4e:	f014 fe67 	bl	41820 <log_string_sync>
		err = -EINVAL;
   2cb52:	f06f 0515 	mvn.w	r5, #21

	evt.type = DATE_TIME_OBTAINED_EXT;
	date_time_notify_event(&evt);

	return 0;
}
   2cb56:	4628      	mov	r0, r5
   2cb58:	bd70      	pop	{r4, r5, r6, pc}
	int err = 0;
   2cb5a:	2500      	movs	r5, #0
   2cb5c:	e78d      	b.n	2ca7a <date_time_set+0x22>
	if (err) {
   2cb5e:	2d00      	cmp	r5, #0
   2cb60:	d1f9      	bne.n	2cb56 <date_time_set+0xfe>
	initial_valid_time = true;
   2cb62:	2201      	movs	r2, #1
   2cb64:	4b15      	ldr	r3, [pc, #84]	; (2cbbc <date_time_set+0x164>)
	time_aux.last_date_time_update = k_uptime_get();
   2cb66:	4e16      	ldr	r6, [pc, #88]	; (2cbc0 <date_time_set+0x168>)
	initial_valid_time = true;
   2cb68:	701a      	strb	r2, [r3, #0]
	time_aux.last_date_time_update = k_uptime_get();
   2cb6a:	f017 fce0 	bl	4452e <k_uptime_get>
   2cb6e:	60b0      	str	r0, [r6, #8]
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(new_date_time) * 1000;
   2cb70:	4620      	mov	r0, r4
   2cb72:	f7f7 fdad 	bl	246d0 <timeutil_timegm64>
   2cb76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2cb7a:	460a      	mov	r2, r1
   2cb7c:	fba0 0103 	umull	r0, r1, r0, r3
   2cb80:	fb03 1102 	mla	r1, r3, r2, r1
	evt.type = DATE_TIME_OBTAINED_EXT;
   2cb84:	2202      	movs	r2, #2
   2cb86:	4b0f      	ldr	r3, [pc, #60]	; (2cbc4 <date_time_set+0x16c>)
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(new_date_time) * 1000;
   2cb88:	e9c6 0100 	strd	r0, r1, [r6]
	evt.type = DATE_TIME_OBTAINED_EXT;
   2cb8c:	701a      	strb	r2, [r3, #0]
	date_time_notify_event(&evt);
   2cb8e:	f7ff fe27 	bl	2c7e0 <date_time_notify_event.constprop.0>
	return 0;
   2cb92:	e7e0      	b.n	2cb56 <date_time_set+0xfe>
   2cb94:	000463bc 	.word	0x000463bc
   2cb98:	00046414 	.word	0x00046414
   2cb9c:	0004b4c5 	.word	0x0004b4c5
   2cba0:	0004b4f5 	.word	0x0004b4f5
   2cba4:	0004b525 	.word	0x0004b525
   2cba8:	0004b553 	.word	0x0004b553
   2cbac:	0004b57f 	.word	0x0004b57f
   2cbb0:	0004b5ad 	.word	0x0004b5ad
   2cbb4:	0004b5da 	.word	0x0004b5da
   2cbb8:	0004b60b 	.word	0x0004b60b
   2cbbc:	2002cc36 	.word	0x2002cc36
   2cbc0:	20021c40 	.word	0x20021c40
   2cbc4:	2002cc35 	.word	0x2002cc35

0002cbc8 <date_time_uptime_to_unix_time_ms>:

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   2cbc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev = *uptime;
   2cbcc:	6803      	ldr	r3, [r0, #0]
{
   2cbce:	4604      	mov	r4, r0
	int64_t uptime_prev = *uptime;
   2cbd0:	9300      	str	r3, [sp, #0]
   2cbd2:	6843      	ldr	r3, [r0, #4]
   2cbd4:	9301      	str	r3, [sp, #4]

	if (!initial_valid_time) {
   2cbd6:	4b23      	ldr	r3, [pc, #140]	; (2cc64 <date_time_uptime_to_unix_time_ms+0x9c>)
   2cbd8:	781b      	ldrb	r3, [r3, #0]
   2cbda:	b973      	cbnz	r3, 2cbfa <date_time_uptime_to_unix_time_ms+0x32>
   2cbdc:	4b22      	ldr	r3, [pc, #136]	; (2cc68 <date_time_uptime_to_unix_time_ms+0xa0>)
   2cbde:	4823      	ldr	r0, [pc, #140]	; (2cc6c <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Valid time not currently available");
   2cbe0:	4923      	ldr	r1, [pc, #140]	; (2cc70 <date_time_uptime_to_unix_time_ms+0xa8>)
   2cbe2:	1ac0      	subs	r0, r0, r3
   2cbe4:	08c0      	lsrs	r0, r0, #3
   2cbe6:	0180      	lsls	r0, r0, #6
   2cbe8:	f040 0002 	orr.w	r0, r0, #2
   2cbec:	f014 fe18 	bl	41820 <log_string_sync>
		return -ENODATA;
   2cbf0:	f06f 003c 	mvn.w	r0, #60	; 0x3c
		*uptime = uptime_prev;
		return -EINVAL;
	}

	return 0;
}
   2cbf4:	b003      	add	sp, #12
   2cbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   2cbfa:	4d1e      	ldr	r5, [pc, #120]	; (2cc74 <date_time_uptime_to_unix_time_ms+0xac>)
   2cbfc:	68a9      	ldr	r1, [r5, #8]
   2cbfe:	e9d5 6700 	ldrd	r6, r7, [r5]
   2cc02:	1a72      	subs	r2, r6, r1
   2cc04:	eb67 73e1 	sbc.w	r3, r7, r1, asr #31
   2cc08:	9900      	ldr	r1, [sp, #0]
   2cc0a:	eb12 0801 	adds.w	r8, r2, r1
   2cc0e:	9901      	ldr	r1, [sp, #4]
   2cc10:	eb43 0901 	adc.w	r9, r3, r1
   2cc14:	e9c0 8900 	strd	r8, r9, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   2cc18:	f017 fc89 	bl	4452e <k_uptime_get>
   2cc1c:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   2cc1e:	1af6      	subs	r6, r6, r3
   2cc20:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   2cc24:	eb16 0a00 	adds.w	sl, r6, r0
   2cc28:	eb47 0b01 	adc.w	fp, r7, r1
   2cc2c:	45c2      	cmp	sl, r8
   2cc2e:	eb7b 0309 	sbcs.w	r3, fp, r9
   2cc32:	da15      	bge.n	2cc60 <date_time_uptime_to_unix_time_ms+0x98>
   2cc34:	4b0c      	ldr	r3, [pc, #48]	; (2cc68 <date_time_uptime_to_unix_time_ms+0xa0>)
   2cc36:	4d0d      	ldr	r5, [pc, #52]	; (2cc6c <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Uptime to large or previously converted");
   2cc38:	490f      	ldr	r1, [pc, #60]	; (2cc78 <date_time_uptime_to_unix_time_ms+0xb0>)
   2cc3a:	1aed      	subs	r5, r5, r3
   2cc3c:	08ed      	lsrs	r5, r5, #3
   2cc3e:	01ad      	lsls	r5, r5, #6
   2cc40:	f045 0502 	orr.w	r5, r5, #2
   2cc44:	4628      	mov	r0, r5
   2cc46:	f014 fdeb 	bl	41820 <log_string_sync>
		LOG_WRN("Clear variable or set a new uptime");
   2cc4a:	4628      	mov	r0, r5
   2cc4c:	490b      	ldr	r1, [pc, #44]	; (2cc7c <date_time_uptime_to_unix_time_ms+0xb4>)
   2cc4e:	f014 fde7 	bl	41820 <log_string_sync>
		*uptime = uptime_prev;
   2cc52:	9b00      	ldr	r3, [sp, #0]
		return -EINVAL;
   2cc54:	f06f 0015 	mvn.w	r0, #21
		*uptime = uptime_prev;
   2cc58:	6023      	str	r3, [r4, #0]
   2cc5a:	9b01      	ldr	r3, [sp, #4]
   2cc5c:	6063      	str	r3, [r4, #4]
		return -EINVAL;
   2cc5e:	e7c9      	b.n	2cbf4 <date_time_uptime_to_unix_time_ms+0x2c>
	return 0;
   2cc60:	2000      	movs	r0, #0
   2cc62:	e7c7      	b.n	2cbf4 <date_time_uptime_to_unix_time_ms+0x2c>
   2cc64:	2002cc36 	.word	0x2002cc36
   2cc68:	000463bc 	.word	0x000463bc
   2cc6c:	00046414 	.word	0x00046414
   2cc70:	0004b63c 	.word	0x0004b63c
   2cc74:	20021c40 	.word	0x20021c40
   2cc78:	0004b65f 	.word	0x0004b65f
   2cc7c:	0004b687 	.word	0x0004b687

0002cc80 <date_time_update_async>:

	app_evt_handler = evt_handler;
}

int date_time_update_async(date_time_evt_handler_t evt_handler)
{
   2cc80:	b508      	push	{r3, lr}
	if (evt_handler) {
   2cc82:	b108      	cbz	r0, 2cc88 <date_time_update_async+0x8>
		app_evt_handler = evt_handler;
   2cc84:	4b03      	ldr	r3, [pc, #12]	; (2cc94 <date_time_update_async+0x14>)
   2cc86:	6018      	str	r0, [r3, #0]
   2cc88:	4803      	ldr	r0, [pc, #12]	; (2cc98 <date_time_update_async+0x18>)
   2cc8a:	f010 ff35 	bl	3daf8 <z_impl_k_sem_give>
	}

	k_sem_give(&time_fetch_sem);

	return 0;
}
   2cc8e:	2000      	movs	r0, #0
   2cc90:	bd08      	pop	{r3, pc}
   2cc92:	bf00      	nop
   2cc94:	200249b4 	.word	0x200249b4
   2cc98:	20020c90 	.word	0x20020c90

0002cc9c <cloud_get_binding>:

extern struct cloud_backend __cloud_backends_start[0];
extern struct cloud_backend __cloud_backends_end[0];

struct cloud_backend *cloud_get_binding(const char *name)
{
   2cc9c:	b570      	push	{r4, r5, r6, lr}
   2cc9e:	4605      	mov	r5, r0
	struct cloud_backend *info;

	for (info = __cloud_backends_start; info != __cloud_backends_end;
   2cca0:	4c09      	ldr	r4, [pc, #36]	; (2ccc8 <cloud_get_binding+0x2c>)
   2cca2:	4e0a      	ldr	r6, [pc, #40]	; (2cccc <cloud_get_binding+0x30>)
   2cca4:	42b4      	cmp	r4, r6
   2cca6:	d101      	bne.n	2ccac <cloud_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   2cca8:	2400      	movs	r4, #0
   2ccaa:	e00a      	b.n	2ccc2 <cloud_get_binding+0x26>
		if (info->api == NULL) {
   2ccac:	6823      	ldr	r3, [r4, #0]
   2ccae:	b90b      	cbnz	r3, 2ccb4 <cloud_get_binding+0x18>
	     info++) {
   2ccb0:	3408      	adds	r4, #8
   2ccb2:	e7f7      	b.n	2cca4 <cloud_get_binding+0x8>
		if (strcmp(name, info->config->name) == 0) {
   2ccb4:	6863      	ldr	r3, [r4, #4]
   2ccb6:	4628      	mov	r0, r5
   2ccb8:	6819      	ldr	r1, [r3, #0]
   2ccba:	f7f0 fac5 	bl	1d248 <strcmp>
   2ccbe:	2800      	cmp	r0, #0
   2ccc0:	d1f6      	bne.n	2ccb0 <cloud_get_binding+0x14>
}
   2ccc2:	4620      	mov	r0, r4
   2ccc4:	bd70      	pop	{r4, r5, r6, pc}
   2ccc6:	bf00      	nop
   2ccc8:	00050184 	.word	0x00050184
   2cccc:	0005018c 	.word	0x0005018c

0002ccd0 <api_uninit>:

	return nrf_cloud_init(&params);
}

static int api_uninit(const struct cloud_backend *const backend)
{
   2ccd0:	b508      	push	{r3, lr}
   2ccd2:	4806      	ldr	r0, [pc, #24]	; (2ccec <api_uninit+0x1c>)
   2ccd4:	4b06      	ldr	r3, [pc, #24]	; (2ccf0 <api_uninit+0x20>)
	LOG_INF("uninit() is not implemented");
   2ccd6:	4907      	ldr	r1, [pc, #28]	; (2ccf4 <api_uninit+0x24>)
   2ccd8:	1ac0      	subs	r0, r0, r3
   2ccda:	08c0      	lsrs	r0, r0, #3
   2ccdc:	0180      	lsls	r0, r0, #6
   2ccde:	f040 0003 	orr.w	r0, r0, #3
   2cce2:	f014 fd9d 	bl	41820 <log_string_sync>

	return 0;
}
   2cce6:	2000      	movs	r0, #0
   2cce8:	bd08      	pop	{r3, pc}
   2ccea:	bf00      	nop
   2ccec:	000464a4 	.word	0x000464a4
   2ccf0:	000463bc 	.word	0x000463bc
   2ccf4:	0004b719 	.word	0x0004b719

0002ccf8 <api_send>:
	return nrf_cloud_disconnect();
}

static int api_send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   2ccf8:	b570      	push	{r4, r5, r6, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   2ccfa:	694c      	ldr	r4, [r1, #20]
{
   2ccfc:	460d      	mov	r5, r1
   2ccfe:	b086      	sub	sp, #24
	if (msg->endpoint.len != 0) {
   2cd00:	2c00      	cmp	r4, #0
   2cd02:	d150      	bne.n	2cda6 <api_send+0xae>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   2cd04:	898e      	ldrh	r6, [r1, #12]
   2cd06:	b176      	cbz	r6, 2cd26 <api_send+0x2e>
   2cd08:	2e01      	cmp	r6, #1
   2cd0a:	d02f      	beq.n	2cd6c <api_send+0x74>
   2cd0c:	4b27      	ldr	r3, [pc, #156]	; (2cdac <api_send+0xb4>)
   2cd0e:	4828      	ldr	r0, [pc, #160]	; (2cdb0 <api_send+0xb8>)
			return err;
		}
		break;
	}
	default:
		LOG_DBG("Unknown cloud endpoint type: %d", msg->endpoint.type);
   2cd10:	4a28      	ldr	r2, [pc, #160]	; (2cdb4 <api_send+0xbc>)
   2cd12:	1ac0      	subs	r0, r0, r3
   2cd14:	08c0      	lsrs	r0, r0, #3
   2cd16:	0180      	lsls	r0, r0, #6
   2cd18:	4633      	mov	r3, r6
   2cd1a:	4927      	ldr	r1, [pc, #156]	; (2cdb8 <api_send+0xc0>)
   2cd1c:	f040 0004 	orr.w	r0, r0, #4
   2cd20:	f014 fd7e 	bl	41820 <log_string_sync>
		break;
	}

	if (err) {
   2cd24:	e00c      	b.n	2cd40 <api_send+0x48>
		const struct nct_dc_data buf = {
   2cd26:	684b      	ldr	r3, [r1, #4]
   2cd28:	e9cd 6602 	strd	r6, r6, [sp, #8]
   2cd2c:	9300      	str	r3, [sp, #0]
   2cd2e:	680b      	ldr	r3, [r1, #0]
   2cd30:	9604      	str	r6, [sp, #16]
   2cd32:	9301      	str	r3, [sp, #4]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   2cd34:	7a0b      	ldrb	r3, [r1, #8]
   2cd36:	b933      	cbnz	r3, 2cd46 <api_send+0x4e>
			err = nct_dc_stream(&buf);
   2cd38:	4668      	mov	r0, sp
   2cd3a:	f017 fccd 	bl	446d8 <nct_dc_stream>
			err = nct_dc_send(&buf);
   2cd3e:	4604      	mov	r4, r0
		return err;
	}

	return 0;
}
   2cd40:	4620      	mov	r0, r4
   2cd42:	b006      	add	sp, #24
   2cd44:	bd70      	pop	{r4, r5, r6, pc}
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   2cd46:	2b01      	cmp	r3, #1
   2cd48:	d103      	bne.n	2cd52 <api_send+0x5a>
			err = nct_dc_send(&buf);
   2cd4a:	4668      	mov	r0, sp
   2cd4c:	f017 fcc1 	bl	446d2 <nct_dc_send>
   2cd50:	e7f5      	b.n	2cd3e <api_send+0x46>
   2cd52:	4b16      	ldr	r3, [pc, #88]	; (2cdac <api_send+0xb4>)
   2cd54:	4816      	ldr	r0, [pc, #88]	; (2cdb0 <api_send+0xb8>)
			LOG_ERR("Unsupported QoS setting.");
   2cd56:	4919      	ldr	r1, [pc, #100]	; (2cdbc <api_send+0xc4>)
   2cd58:	1ac0      	subs	r0, r0, r3
   2cd5a:	08c0      	lsrs	r0, r0, #3
   2cd5c:	0180      	lsls	r0, r0, #6
   2cd5e:	f040 0001 	orr.w	r0, r0, #1
   2cd62:	f014 fd5d 	bl	41820 <log_string_sync>
			return err;
   2cd66:	f06f 0415 	mvn.w	r4, #21
   2cd6a:	e7e9      	b.n	2cd40 <api_send+0x48>
		struct nct_cc_data shadow_data = {
   2cd6c:	4621      	mov	r1, r4
   2cd6e:	2210      	movs	r2, #16
   2cd70:	a802      	add	r0, sp, #8
   2cd72:	f017 ffd8 	bl	44d26 <memset>
   2cd76:	686b      	ldr	r3, [r5, #4]
		err = nct_cc_send(&shadow_data);
   2cd78:	4668      	mov	r0, sp
		struct nct_cc_data shadow_data = {
   2cd7a:	9300      	str	r3, [sp, #0]
   2cd7c:	682b      	ldr	r3, [r5, #0]
   2cd7e:	f88d 6014 	strb.w	r6, [sp, #20]
   2cd82:	9301      	str	r3, [sp, #4]
		err = nct_cc_send(&shadow_data);
   2cd84:	f001 fe5c 	bl	2ea40 <nct_cc_send>
		if (err) {
   2cd88:	4604      	mov	r4, r0
   2cd8a:	2800      	cmp	r0, #0
   2cd8c:	d0d8      	beq.n	2cd40 <api_send+0x48>
   2cd8e:	4b07      	ldr	r3, [pc, #28]	; (2cdac <api_send+0xb4>)
   2cd90:	4807      	ldr	r0, [pc, #28]	; (2cdb0 <api_send+0xb8>)
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   2cd92:	4622      	mov	r2, r4
   2cd94:	1ac0      	subs	r0, r0, r3
   2cd96:	08c0      	lsrs	r0, r0, #3
   2cd98:	0180      	lsls	r0, r0, #6
   2cd9a:	4909      	ldr	r1, [pc, #36]	; (2cdc0 <api_send+0xc8>)
   2cd9c:	f040 0001 	orr.w	r0, r0, #1
   2cda0:	f014 fd3e 	bl	41820 <log_string_sync>
			return err;
   2cda4:	e7cc      	b.n	2cd40 <api_send+0x48>
		return -ENOTSUP;
   2cda6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2cdaa:	e7c9      	b.n	2cd40 <api_send+0x48>
   2cdac:	000463bc 	.word	0x000463bc
   2cdb0:	000464a4 	.word	0x000464a4
   2cdb4:	0004bb27 	.word	0x0004bb27
   2cdb8:	0004b76d 	.word	0x0004b76d
   2cdbc:	0004b735 	.word	0x0004b735
   2cdc0:	0004b74e 	.word	0x0004b74e

0002cdc4 <translate_connect_error>:
	switch (err) {
   2cdc4:	2800      	cmp	r0, #0
{
   2cdc6:	b508      	push	{r3, lr}
	switch (err) {
   2cdc8:	dc0e      	bgt.n	2cde8 <translate_connect_error+0x24>
   2cdca:	f110 0f0d 	cmn.w	r0, #13
   2cdce:	da19      	bge.n	2ce04 <translate_connect_error+0x40>
   2cdd0:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   2cdd4:	d04f      	beq.n	2ce76 <translate_connect_error+0xb2>
   2cdd6:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   2cdda:	da3a      	bge.n	2ce52 <translate_connect_error+0x8e>
   2cddc:	f110 0f77 	cmn.w	r0, #119	; 0x77
   2cde0:	d04c      	beq.n	2ce7c <translate_connect_error+0xb8>
   2cde2:	f110 0f74 	cmn.w	r0, #116	; 0x74
   2cde6:	d04c      	beq.n	2ce82 <translate_connect_error+0xbe>
   2cde8:	4a29      	ldr	r2, [pc, #164]	; (2ce90 <translate_connect_error+0xcc>)
   2cdea:	4b2a      	ldr	r3, [pc, #168]	; (2ce94 <translate_connect_error+0xd0>)
		LOG_ERR("nRF cloud connect failed %d", err);
   2cdec:	492a      	ldr	r1, [pc, #168]	; (2ce98 <translate_connect_error+0xd4>)
   2cdee:	1a9b      	subs	r3, r3, r2
   2cdf0:	08db      	lsrs	r3, r3, #3
   2cdf2:	019b      	lsls	r3, r3, #6
   2cdf4:	4602      	mov	r2, r0
   2cdf6:	f043 0001 	orr.w	r0, r3, #1
   2cdfa:	f014 fd11 	bl	41820 <log_string_sync>
		return CLOUD_CONNECT_RES_ERR_MISC;
   2cdfe:	f06f 0004 	mvn.w	r0, #4
   2ce02:	e025      	b.n	2ce50 <translate_connect_error+0x8c>
   2ce04:	f100 030d 	add.w	r3, r0, #13
   2ce08:	2b0d      	cmp	r3, #13
   2ce0a:	d8ed      	bhi.n	2cde8 <translate_connect_error+0x24>
   2ce0c:	a201      	add	r2, pc, #4	; (adr r2, 2ce14 <translate_connect_error+0x50>)
   2ce0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2ce12:	bf00      	nop
   2ce14:	0002ce65 	.word	0x0002ce65
   2ce18:	0002ce71 	.word	0x0002ce71
   2ce1c:	0002cde9 	.word	0x0002cde9
   2ce20:	0002ce4d 	.word	0x0002ce4d
   2ce24:	0002cde9 	.word	0x0002cde9
   2ce28:	0002ce6b 	.word	0x0002ce6b
   2ce2c:	0002cde9 	.word	0x0002cde9
   2ce30:	0002cde9 	.word	0x0002cde9
   2ce34:	0002cde9 	.word	0x0002cde9
   2ce38:	0002cde9 	.word	0x0002cde9
   2ce3c:	0002cde9 	.word	0x0002cde9
   2ce40:	0002cde9 	.word	0x0002cde9
   2ce44:	0002cde9 	.word	0x0002cde9
   2ce48:	0002ce51 	.word	0x0002ce51
	switch (err) {
   2ce4c:	f06f 0002 	mvn.w	r0, #2
}
   2ce50:	bd08      	pop	{r3, pc}
	switch (err) {
   2ce52:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   2ce56:	d017      	beq.n	2ce88 <translate_connect_error+0xc4>
   2ce58:	f110 0f16 	cmn.w	r0, #22
   2ce5c:	d1c4      	bne.n	2cde8 <translate_connect_error+0x24>
		return CLOUD_CONNECT_RES_ERR_PRV_KEY;
   2ce5e:	f06f 0006 	mvn.w	r0, #6
   2ce62:	e7f5      	b.n	2ce50 <translate_connect_error+0x8c>
		return CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2ce64:	f04f 30ff 	mov.w	r0, #4294967295
   2ce68:	e7f2      	b.n	2ce50 <translate_connect_error+0x8c>
		return CLOUD_CONNECT_RES_ERR_BACKEND;
   2ce6a:	f06f 0003 	mvn.w	r0, #3
   2ce6e:	e7ef      	b.n	2ce50 <translate_connect_error+0x8c>
		return CLOUD_CONNECT_RES_ERR_NO_MEM;
   2ce70:	f06f 0005 	mvn.w	r0, #5
   2ce74:	e7ec      	b.n	2ce50 <translate_connect_error+0x8c>
		return CLOUD_CONNECT_RES_ERR_CERT_MISC;
   2ce76:	f06f 0008 	mvn.w	r0, #8
   2ce7a:	e7e9      	b.n	2ce50 <translate_connect_error+0x8c>
		return CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2ce7c:	f06f 000a 	mvn.w	r0, #10
   2ce80:	e7e6      	b.n	2ce50 <translate_connect_error+0x8c>
		return CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   2ce82:	f06f 0009 	mvn.w	r0, #9
   2ce86:	e7e3      	b.n	2ce50 <translate_connect_error+0x8c>
		return CLOUD_CONNECT_RES_ERR_CERT;
   2ce88:	f06f 0007 	mvn.w	r0, #7
   2ce8c:	e7e0      	b.n	2ce50 <translate_connect_error+0x8c>
   2ce8e:	bf00      	nop
   2ce90:	000463bc 	.word	0x000463bc
   2ce94:	000464a4 	.word	0x000464a4
   2ce98:	0004b791 	.word	0x0004b791

0002ce9c <api_connect>:
{
   2ce9c:	b510      	push	{r4, lr}
	if (current_state == STATE_IDLE) {
   2ce9e:	4b12      	ldr	r3, [pc, #72]	; (2cee8 <api_connect+0x4c>)
   2cea0:	781b      	ldrb	r3, [r3, #0]
   2cea2:	b1eb      	cbz	r3, 2cee0 <api_connect+0x44>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cea4:	4b11      	ldr	r3, [pc, #68]	; (2ceec <api_connect+0x50>)
   2cea6:	e8d3 4faf 	lda	r4, [r3]
	if (atomic_get(&connection_poll_active)) {
   2ceaa:	b184      	cbz	r4, 2cece <api_connect+0x32>
   2ceac:	4b10      	ldr	r3, [pc, #64]	; (2cef0 <api_connect+0x54>)
   2ceae:	4811      	ldr	r0, [pc, #68]	; (2cef4 <api_connect+0x58>)
		LOG_DBG("Connection poll in progress");
   2ceb0:	4a11      	ldr	r2, [pc, #68]	; (2cef8 <api_connect+0x5c>)
   2ceb2:	1ac0      	subs	r0, r0, r3
   2ceb4:	08c0      	lsrs	r0, r0, #3
   2ceb6:	0180      	lsls	r0, r0, #6
   2ceb8:	f040 0004 	orr.w	r0, r0, #4
   2cebc:	490f      	ldr	r1, [pc, #60]	; (2cefc <api_connect+0x60>)
   2cebe:	f014 fcaf 	bl	41820 <log_string_sync>
		return -EINPROGRESS;
   2cec2:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   2cec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return translate_connect_error(err);
   2ceca:	f7ff bf7b 	b.w	2cdc4 <translate_connect_error>
	atomic_set(&disconnect_requested, 0);
   2cece:	4621      	mov	r1, r4
   2ced0:	480b      	ldr	r0, [pc, #44]	; (2cf00 <api_connect+0x64>)
   2ced2:	f017 fb4d 	bl	44570 <atomic_set>
   2ced6:	480b      	ldr	r0, [pc, #44]	; (2cf04 <api_connect+0x68>)
   2ced8:	f010 fe0e 	bl	3daf8 <z_impl_k_sem_give>
	return CLOUD_CONNECT_RES_SUCCESS;
   2cedc:	4620      	mov	r0, r4
}
   2cede:	e7f2      	b.n	2cec6 <api_connect+0x2a>
		return -EACCES;
   2cee0:	f06f 000c 	mvn.w	r0, #12
   2cee4:	e7ef      	b.n	2cec6 <api_connect+0x2a>
   2cee6:	bf00      	nop
   2cee8:	2002cc37 	.word	0x2002cc37
   2ceec:	20024a0c 	.word	0x20024a0c
   2cef0:	000463bc 	.word	0x000463bc
   2cef4:	000464a4 	.word	0x000464a4
   2cef8:	0004bb11 	.word	0x0004bb11
   2cefc:	0004b7ad 	.word	0x0004b7ad
   2cf00:	20024a10 	.word	0x20024a10
   2cf04:	20020c18 	.word	0x20020c18

0002cf08 <api_event_handler>:
{
   2cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cf0c:	4606      	mov	r6, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2cf0e:	4f55      	ldr	r7, [pc, #340]	; (2d064 <api_event_handler+0x15c>)
{
   2cf10:	b088      	sub	sp, #32
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2cf12:	683b      	ldr	r3, [r7, #0]
	struct cloud_event evt = { 0 };
   2cf14:	221c      	movs	r2, #28
   2cf16:	2100      	movs	r1, #0
   2cf18:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2cf1a:	685d      	ldr	r5, [r3, #4]
	struct cloud_event evt = { 0 };
   2cf1c:	4c52      	ldr	r4, [pc, #328]	; (2d068 <api_event_handler+0x160>)
   2cf1e:	f017 ff02 	bl	44d26 <memset>
	switch (nrf_cloud_evt->type) {
   2cf22:	4852      	ldr	r0, [pc, #328]	; (2d06c <api_event_handler+0x164>)
   2cf24:	7833      	ldrb	r3, [r6, #0]
   2cf26:	1a24      	subs	r4, r4, r0
   2cf28:	08e4      	lsrs	r4, r4, #3
   2cf2a:	2b09      	cmp	r3, #9
   2cf2c:	46b8      	mov	r8, r7
   2cf2e:	ea4f 1084 	mov.w	r0, r4, lsl #6
   2cf32:	d809      	bhi.n	2cf48 <api_event_handler+0x40>
   2cf34:	b153      	cbz	r3, 2cf4c <api_event_handler+0x44>
   2cf36:	3b02      	subs	r3, #2
   2cf38:	2b07      	cmp	r3, #7
   2cf3a:	d80e      	bhi.n	2cf5a <api_event_handler+0x52>
   2cf3c:	e8df f003 	tbb	[pc, r3]
   2cf40:	3b332b21 	.word	0x3b332b21
   2cf44:	8a4c4475 	.word	0x8a4c4475
   2cf48:	2bff      	cmp	r3, #255	; 0xff
   2cf4a:	d05d      	beq.n	2d008 <api_event_handler+0x100>
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
   2cf4c:	4a48      	ldr	r2, [pc, #288]	; (2d070 <api_event_handler+0x168>)
   2cf4e:	4949      	ldr	r1, [pc, #292]	; (2d074 <api_event_handler+0x16c>)
   2cf50:	f040 0004 	orr.w	r0, r0, #4
   2cf54:	f014 fc64 	bl	41820 <log_string_sync>
}
   2cf58:	e033      	b.n	2cfc2 <api_event_handler+0xba>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTED");
   2cf5a:	4a45      	ldr	r2, [pc, #276]	; (2d070 <api_event_handler+0x168>)
   2cf5c:	4946      	ldr	r1, [pc, #280]	; (2d078 <api_event_handler+0x170>)
   2cf5e:	f040 0004 	orr.w	r0, r0, #4
   2cf62:	f014 fc5d 	bl	41820 <log_string_sync>
		evt.type = CLOUD_EVT_CONNECTED;
   2cf66:	2301      	movs	r3, #1
   2cf68:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.persistent_session = (nrf_cloud_evt->status != 0);
   2cf6c:	6873      	ldr	r3, [r6, #4]
   2cf6e:	3b00      	subs	r3, #0
   2cf70:	bf18      	it	ne
   2cf72:	2301      	movne	r3, #1
   2cf74:	f88d 3008 	strb.w	r3, [sp, #8]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2cf78:	68ea      	ldr	r2, [r5, #12]
   2cf7a:	f8d8 0000 	ldr.w	r0, [r8]
   2cf7e:	a901      	add	r1, sp, #4
   2cf80:	e050      	b.n	2d024 <api_event_handler+0x11c>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST");
   2cf82:	4a3b      	ldr	r2, [pc, #236]	; (2d070 <api_event_handler+0x168>)
   2cf84:	493d      	ldr	r1, [pc, #244]	; (2d07c <api_event_handler+0x174>)
   2cf86:	f040 0004 	orr.w	r0, r0, #4
   2cf8a:	f014 fc49 	bl	41820 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   2cf8e:	2307      	movs	r3, #7
		evt.type = CLOUD_EVT_FOTA_DONE;
   2cf90:	f88d 3004 	strb.w	r3, [sp, #4]
   2cf94:	e7f0      	b.n	2cf78 <api_event_handler+0x70>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATED");
   2cf96:	4a36      	ldr	r2, [pc, #216]	; (2d070 <api_event_handler+0x168>)
   2cf98:	4939      	ldr	r1, [pc, #228]	; (2d080 <api_event_handler+0x178>)
   2cf9a:	f040 0004 	orr.w	r0, r0, #4
   2cf9e:	f014 fc3f 	bl	41820 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_DONE;
   2cfa2:	2308      	movs	r3, #8
   2cfa4:	e7f4      	b.n	2cf90 <api_event_handler+0x88>
		LOG_DBG("NRF_CLOUD_EVT_READY");
   2cfa6:	4a32      	ldr	r2, [pc, #200]	; (2d070 <api_event_handler+0x168>)
   2cfa8:	4936      	ldr	r1, [pc, #216]	; (2d084 <api_event_handler+0x17c>)
   2cfaa:	f040 0004 	orr.w	r0, r0, #4
   2cfae:	f014 fc37 	bl	41820 <log_string_sync>
		evt.type = CLOUD_EVT_READY;
   2cfb2:	2303      	movs	r3, #3
   2cfb4:	e7ec      	b.n	2cf90 <api_event_handler+0x88>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_ATTACHED");
   2cfb6:	4a2e      	ldr	r2, [pc, #184]	; (2d070 <api_event_handler+0x168>)
   2cfb8:	4933      	ldr	r1, [pc, #204]	; (2d088 <api_event_handler+0x180>)
   2cfba:	f040 0004 	orr.w	r0, r0, #4
   2cfbe:	f014 fc2f 	bl	41820 <log_string_sync>
}
   2cfc2:	b008      	add	sp, #32
   2cfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_DATA_ACK");
   2cfc8:	4a29      	ldr	r2, [pc, #164]	; (2d070 <api_event_handler+0x168>)
   2cfca:	4930      	ldr	r1, [pc, #192]	; (2d08c <api_event_handler+0x184>)
   2cfcc:	f040 0004 	orr.w	r0, r0, #4
   2cfd0:	f014 fc26 	bl	41820 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_SENT;
   2cfd4:	2305      	movs	r3, #5
   2cfd6:	e7db      	b.n	2cf90 <api_event_handler+0x88>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED");
   2cfd8:	4a25      	ldr	r2, [pc, #148]	; (2d070 <api_event_handler+0x168>)
   2cfda:	492d      	ldr	r1, [pc, #180]	; (2d090 <api_event_handler+0x188>)
   2cfdc:	f040 0004 	orr.w	r0, r0, #4
   2cfe0:	f014 fc1e 	bl	41820 <log_string_sync>
		evt.data.err = CLOUD_DISCONNECT_MISC;
   2cfe4:	2303      	movs	r3, #3
   2cfe6:	9302      	str	r3, [sp, #8]
   2cfe8:	4b2a      	ldr	r3, [pc, #168]	; (2d094 <api_event_handler+0x18c>)
   2cfea:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&disconnect_requested)) {
   2cfee:	b12b      	cbz	r3, 2cffc <api_event_handler+0xf4>
   2cff0:	4b29      	ldr	r3, [pc, #164]	; (2d098 <api_event_handler+0x190>)
   2cff2:	e8d3 3faf 	lda	r3, [r3]
			if (atomic_get(&connection_poll_active)) {
   2cff6:	2b00      	cmp	r3, #0
   2cff8:	d1e3      	bne.n	2cfc2 <api_event_handler+0xba>
			evt.data.err = CLOUD_DISCONNECT_USER_REQUEST;
   2cffa:	9302      	str	r3, [sp, #8]
		atomic_set(&transport_disconnected, 1);
   2cffc:	2101      	movs	r1, #1
   2cffe:	4827      	ldr	r0, [pc, #156]	; (2d09c <api_event_handler+0x194>)
   2d000:	f017 fab6 	bl	44570 <atomic_set>
		evt.type = CLOUD_EVT_DISCONNECTED;
   2d004:	2302      	movs	r3, #2
   2d006:	e7c3      	b.n	2cf90 <api_event_handler+0x88>
		LOG_DBG("NRF_CLOUD_EVT_ERROR: %d", nrf_cloud_evt->status);
   2d008:	6873      	ldr	r3, [r6, #4]
   2d00a:	4a19      	ldr	r2, [pc, #100]	; (2d070 <api_event_handler+0x168>)
   2d00c:	4924      	ldr	r1, [pc, #144]	; (2d0a0 <api_event_handler+0x198>)
   2d00e:	f040 0004 	orr.w	r0, r0, #4
   2d012:	f014 fc05 	bl	41820 <log_string_sync>
		evt.type = CLOUD_EVT_ERROR;
   2d016:	2304      	movs	r3, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d018:	68ea      	ldr	r2, [r5, #12]
   2d01a:	6838      	ldr	r0, [r7, #0]
		evt.type = CLOUD_EVT_ERROR;
   2d01c:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d020:	eb0d 0103 	add.w	r1, sp, r3
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d024:	f017 fa9b 	bl	4455e <cloud_notify_event>
		break;
   2d028:	e7cb      	b.n	2cfc2 <api_event_handler+0xba>
		LOG_DBG("NRF_CLOUD_EVT_RX_DATA");
   2d02a:	4a11      	ldr	r2, [pc, #68]	; (2d070 <api_event_handler+0x168>)
   2d02c:	491d      	ldr	r1, [pc, #116]	; (2d0a4 <api_event_handler+0x19c>)
   2d02e:	f040 0004 	orr.w	r0, r0, #4
   2d032:	f014 fbf5 	bl	41820 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   2d036:	2306      	movs	r3, #6
   2d038:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   2d03c:	68f3      	ldr	r3, [r6, #12]
   2d03e:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   2d040:	68b3      	ldr	r3, [r6, #8]
   2d042:	9303      	str	r3, [sp, #12]
		evt.data.msg.endpoint.type = CLOUD_EP_TOPIC_MSG;
   2d044:	2300      	movs	r3, #0
   2d046:	f8ad 3014 	strh.w	r3, [sp, #20]
		evt.data.msg.endpoint.str =
   2d04a:	6973      	ldr	r3, [r6, #20]
   2d04c:	9306      	str	r3, [sp, #24]
		evt.data.msg.endpoint.len = nrf_cloud_evt->topic.len;
   2d04e:	6933      	ldr	r3, [r6, #16]
   2d050:	9307      	str	r3, [sp, #28]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d052:	e791      	b.n	2cf78 <api_event_handler+0x70>
		LOG_DBG("NRF_CLOUD_EVT_FOTA_DONE");
   2d054:	4a06      	ldr	r2, [pc, #24]	; (2d070 <api_event_handler+0x168>)
   2d056:	4914      	ldr	r1, [pc, #80]	; (2d0a8 <api_event_handler+0x1a0>)
   2d058:	f040 0004 	orr.w	r0, r0, #4
   2d05c:	f014 fbe0 	bl	41820 <log_string_sync>
		evt.type = CLOUD_EVT_FOTA_DONE;
   2d060:	230a      	movs	r3, #10
   2d062:	e795      	b.n	2cf90 <api_event_handler+0x88>
   2d064:	20024a14 	.word	0x20024a14
   2d068:	000464a4 	.word	0x000464a4
   2d06c:	000463bc 	.word	0x000463bc
   2d070:	0004baff 	.word	0x0004baff
   2d074:	0004b917 	.word	0x0004b917
   2d078:	0004b7cd 	.word	0x0004b7cd
   2d07c:	0004b7f3 	.word	0x0004b7f3
   2d080:	0004b81e 	.word	0x0004b81e
   2d084:	0004b840 	.word	0x0004b840
   2d088:	0004b858 	.word	0x0004b858
   2d08c:	0004b87a 	.word	0x0004b87a
   2d090:	0004b89c 	.word	0x0004b89c
   2d094:	20024a10 	.word	0x20024a10
   2d098:	20024a0c 	.word	0x20024a0c
   2d09c:	20024a18 	.word	0x20024a18
   2d0a0:	0004b8c5 	.word	0x0004b8c5
   2d0a4:	0004b8e1 	.word	0x0004b8e1
   2d0a8:	0004b8fb 	.word	0x0004b8fb

0002d0ac <nfsm_get_current_state>:
	return current_state;
   2d0ac:	4b01      	ldr	r3, [pc, #4]	; (2d0b4 <nfsm_get_current_state+0x8>)
   2d0ae:	7818      	ldrb	r0, [r3, #0]
}
   2d0b0:	4770      	bx	lr
   2d0b2:	bf00      	nop
   2d0b4:	2002cc37 	.word	0x2002cc37

0002d0b8 <nfsm_set_current_state_and_notify>:
{
   2d0b8:	b570      	push	{r4, r5, r6, lr}
   2d0ba:	4606      	mov	r6, r0
   2d0bc:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   2d0be:	f04f 32ff 	mov.w	r2, #4294967295
   2d0c2:	f04f 33ff 	mov.w	r3, #4294967295
   2d0c6:	480e      	ldr	r0, [pc, #56]	; (2d100 <nfsm_set_current_state_and_notify+0x48>)
   2d0c8:	f00f f8f8 	bl	3c2bc <z_impl_k_mutex_lock>
   2d0cc:	4c0d      	ldr	r4, [pc, #52]	; (2d104 <nfsm_set_current_state_and_notify+0x4c>)
   2d0ce:	480e      	ldr	r0, [pc, #56]	; (2d108 <nfsm_set_current_state_and_notify+0x50>)
	LOG_DBG("state: %d", state);
   2d0d0:	4633      	mov	r3, r6
   2d0d2:	1a24      	subs	r4, r4, r0
   2d0d4:	08e4      	lsrs	r4, r4, #3
   2d0d6:	01a4      	lsls	r4, r4, #6
   2d0d8:	4a0c      	ldr	r2, [pc, #48]	; (2d10c <nfsm_set_current_state_and_notify+0x54>)
   2d0da:	490d      	ldr	r1, [pc, #52]	; (2d110 <nfsm_set_current_state_and_notify+0x58>)
   2d0dc:	f044 0004 	orr.w	r0, r4, #4
   2d0e0:	f014 fb9e 	bl	41820 <log_string_sync>
	current_state = state;
   2d0e4:	4b0b      	ldr	r3, [pc, #44]	; (2d114 <nfsm_set_current_state_and_notify+0x5c>)
   2d0e6:	701e      	strb	r6, [r3, #0]
	if ((app_event_handler != NULL) && (evt != NULL)) {
   2d0e8:	4b0b      	ldr	r3, [pc, #44]	; (2d118 <nfsm_set_current_state_and_notify+0x60>)
   2d0ea:	681b      	ldr	r3, [r3, #0]
   2d0ec:	b113      	cbz	r3, 2d0f4 <nfsm_set_current_state_and_notify+0x3c>
   2d0ee:	b10d      	cbz	r5, 2d0f4 <nfsm_set_current_state_and_notify+0x3c>
		app_event_handler(evt);
   2d0f0:	4628      	mov	r0, r5
   2d0f2:	4798      	blx	r3
}
   2d0f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_mutex_unlock(mutex);
   2d0f8:	4801      	ldr	r0, [pc, #4]	; (2d100 <nfsm_set_current_state_and_notify+0x48>)
   2d0fa:	f00f b9d9 	b.w	3c4b0 <z_impl_k_mutex_unlock>
   2d0fe:	bf00      	nop
   2d100:	20020b94 	.word	0x20020b94
   2d104:	000464a4 	.word	0x000464a4
   2d108:	000463bc 	.word	0x000463bc
   2d10c:	0004badd 	.word	0x0004badd
   2d110:	0004b932 	.word	0x0004b932
   2d114:	2002cc37 	.word	0x2002cc37
   2d118:	20024a08 	.word	0x20024a08

0002d11c <nrf_cloud_init>:
{
   2d11c:	b538      	push	{r3, r4, r5, lr}
	if (current_state != STATE_IDLE) {
   2d11e:	4d0d      	ldr	r5, [pc, #52]	; (2d154 <nrf_cloud_init+0x38>)
{
   2d120:	4604      	mov	r4, r0
	if (current_state != STATE_IDLE) {
   2d122:	782b      	ldrb	r3, [r5, #0]
   2d124:	b983      	cbnz	r3, 2d148 <nrf_cloud_init+0x2c>
	if (param->event_handler == NULL) {
   2d126:	6803      	ldr	r3, [r0, #0]
   2d128:	b18b      	cbz	r3, 2d14e <nrf_cloud_init+0x32>
	err = nfsm_init();
   2d12a:	f000 fdfd 	bl	2dd28 <nfsm_init>
	if (err) {
   2d12e:	b950      	cbnz	r0, 2d146 <nrf_cloud_init+0x2a>
	err = nrf_codec_init();
   2d130:	f017 fa7a 	bl	44628 <nrf_codec_init>
	if (err) {
   2d134:	b938      	cbnz	r0, 2d146 <nrf_cloud_init+0x2a>
	err = nct_init();
   2d136:	f001 faaf 	bl	2e698 <nct_init>
	if (err) {
   2d13a:	b920      	cbnz	r0, 2d146 <nrf_cloud_init+0x2a>
	app_event_handler = param->event_handler;
   2d13c:	4b06      	ldr	r3, [pc, #24]	; (2d158 <nrf_cloud_init+0x3c>)
   2d13e:	6822      	ldr	r2, [r4, #0]
   2d140:	601a      	str	r2, [r3, #0]
	current_state = STATE_INITIALIZED;
   2d142:	2301      	movs	r3, #1
   2d144:	702b      	strb	r3, [r5, #0]
}
   2d146:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   2d148:	f06f 000c 	mvn.w	r0, #12
   2d14c:	e7fb      	b.n	2d146 <nrf_cloud_init+0x2a>
		return -EINVAL;
   2d14e:	f06f 0015 	mvn.w	r0, #21
   2d152:	e7f8      	b.n	2d146 <nrf_cloud_init+0x2a>
   2d154:	2002cc37 	.word	0x2002cc37
   2d158:	20024a08 	.word	0x20024a08

0002d15c <api_init>:
{
   2d15c:	b507      	push	{r0, r1, r2, lr}
	const struct nrf_cloud_init_param params = {
   2d15e:	4b06      	ldr	r3, [pc, #24]	; (2d178 <api_init+0x1c>)
   2d160:	9301      	str	r3, [sp, #4]
	backend->config->handler = handler;
   2d162:	6843      	ldr	r3, [r0, #4]
   2d164:	6059      	str	r1, [r3, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   2d166:	4b05      	ldr	r3, [pc, #20]	; (2d17c <api_init+0x20>)
   2d168:	6018      	str	r0, [r3, #0]
	return nrf_cloud_init(&params);
   2d16a:	a801      	add	r0, sp, #4
   2d16c:	f7ff ffd6 	bl	2d11c <nrf_cloud_init>
}
   2d170:	b003      	add	sp, #12
   2d172:	f85d fb04 	ldr.w	pc, [sp], #4
   2d176:	bf00      	nop
   2d178:	0002cf09 	.word	0x0002cf09
   2d17c:	20024a14 	.word	0x20024a14

0002d180 <nrf_cloud_connect>:
{
   2d180:	b508      	push	{r3, lr}
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   2d182:	4b07      	ldr	r3, [pc, #28]	; (2d1a0 <nrf_cloud_connect+0x20>)
   2d184:	781b      	ldrb	r3, [r3, #0]
   2d186:	2b01      	cmp	r3, #1
   2d188:	d807      	bhi.n	2d19a <nrf_cloud_connect+0x1a>
	atomic_set(&disconnect_requested, 0);
   2d18a:	2100      	movs	r1, #0
   2d18c:	4805      	ldr	r0, [pc, #20]	; (2d1a4 <nrf_cloud_connect+0x24>)
   2d18e:	f017 f9ef 	bl	44570 <atomic_set>
}
   2d192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_connect();
   2d196:	f001 bbc1 	b.w	2e91c <nct_connect>
}
   2d19a:	f06f 000c 	mvn.w	r0, #12
   2d19e:	bd08      	pop	{r3, pc}
   2d1a0:	2002cc37 	.word	0x2002cc37
   2d1a4:	20024a10 	.word	0x20024a10

0002d1a8 <nrf_cloud_disconnect>:
{
   2d1a8:	b508      	push	{r3, lr}
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   2d1aa:	4b09      	ldr	r3, [pc, #36]	; (2d1d0 <nrf_cloud_disconnect+0x28>)
   2d1ac:	781a      	ldrb	r2, [r3, #0]
   2d1ae:	2a09      	cmp	r2, #9
   2d1b0:	d902      	bls.n	2d1b8 <nrf_cloud_disconnect+0x10>
	    NOT_VALID_STATE(STATE_CC_CONNECTED)) {
   2d1b2:	781b      	ldrb	r3, [r3, #0]
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   2d1b4:	2b04      	cmp	r3, #4
   2d1b6:	d807      	bhi.n	2d1c8 <nrf_cloud_disconnect+0x20>
	atomic_set(&disconnect_requested, 1);
   2d1b8:	2101      	movs	r1, #1
   2d1ba:	4806      	ldr	r0, [pc, #24]	; (2d1d4 <nrf_cloud_disconnect+0x2c>)
   2d1bc:	f017 f9d8 	bl	44570 <atomic_set>
}
   2d1c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_disconnect();
   2d1c4:	f001 bd9c 	b.w	2ed00 <nct_disconnect>
}
   2d1c8:	f06f 000c 	mvn.w	r0, #12
   2d1cc:	bd08      	pop	{r3, pc}
   2d1ce:	bf00      	nop
   2d1d0:	2002cc37 	.word	0x2002cc37
   2d1d4:	20024a10 	.word	0x20024a10

0002d1d8 <nrf_cloud_run>:

	return 0;
}

void nrf_cloud_run(void)
{
   2d1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d1dc:	b08d      	sub	sp, #52	; 0x34
	int ret;
	struct pollfd fds[1];
	struct cloud_event cloud_evt = {
   2d1de:	221c      	movs	r2, #28
   2d1e0:	2100      	movs	r1, #0
   2d1e2:	a805      	add	r0, sp, #20
   2d1e4:	f017 fd9f 	bl	44d26 <memset>
   2d1e8:	2302      	movs	r3, #2
   2d1ea:	f88d 3014 	strb.w	r3, [sp, #20]
   2d1ee:	2303      	movs	r3, #3

start:
	k_sem_take(&connection_poll_sem, K_FOREVER);
	atomic_set(&connection_poll_active, 1);

	cloud_evt.data.err = CLOUD_CONNECT_RES_SUCCESS;
   2d1f0:	2600      	movs	r6, #0
   2d1f2:	4a68      	ldr	r2, [pc, #416]	; (2d394 <nrf_cloud_run+0x1bc>)
	struct cloud_event cloud_evt = {
   2d1f4:	9306      	str	r3, [sp, #24]
   2d1f6:	4b68      	ldr	r3, [pc, #416]	; (2d398 <nrf_cloud_run+0x1c0>)
	return z_impl_k_sem_take(sem, timeout);
   2d1f8:	4f68      	ldr	r7, [pc, #416]	; (2d39c <nrf_cloud_run+0x1c4>)
   2d1fa:	1a9b      	subs	r3, r3, r2
	atomic_set(&connection_poll_active, 1);
   2d1fc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 2d3dc <nrf_cloud_run+0x204>
   2d200:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
   2d204:	f04f 33ff 	mov.w	r3, #4294967295
   2d208:	f04f 32ff 	mov.w	r2, #4294967295
   2d20c:	4638      	mov	r0, r7
	cloud_evt.type = CLOUD_EVT_CONNECTING;
	cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2d20e:	4d64      	ldr	r5, [pc, #400]	; (2d3a0 <nrf_cloud_run+0x1c8>)
   2d210:	f010 fcb6 	bl	3db80 <z_impl_k_sem_take>
	atomic_set(&connection_poll_active, 1);
   2d214:	2101      	movs	r1, #1
   2d216:	4640      	mov	r0, r8
   2d218:	f017 f9aa 	bl	44570 <atomic_set>
	cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2d21c:	2200      	movs	r2, #0
   2d21e:	a905      	add	r1, sp, #20
   2d220:	6828      	ldr	r0, [r5, #0]
	cloud_evt.data.err = CLOUD_CONNECT_RES_SUCCESS;
   2d222:	9606      	str	r6, [sp, #24]
	cloud_evt.type = CLOUD_EVT_CONNECTING;
   2d224:	f88d 6014 	strb.w	r6, [sp, #20]
	cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2d228:	f017 f999 	bl	4455e <cloud_notify_event>

	ret = nrf_cloud_connect(NULL);
   2d22c:	2000      	movs	r0, #0
   2d22e:	f7ff ffa7 	bl	2d180 <nrf_cloud_connect>
	ret = translate_connect_error(ret);
   2d232:	f7ff fdc7 	bl	2cdc4 <translate_connect_error>

	if (ret != CLOUD_CONNECT_RES_SUCCESS) {
   2d236:	4681      	mov	r9, r0
   2d238:	b188      	cbz	r0, 2d25e <nrf_cloud_run+0x86>
		cloud_evt.data.err = ret;
   2d23a:	9006      	str	r0, [sp, #24]
		cloud_evt.type = CLOUD_EVT_CONNECTING;
   2d23c:	f88d 6014 	strb.w	r6, [sp, #20]
		cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2d240:	2200      	movs	r2, #0
   2d242:	6828      	ldr	r0, [r5, #0]
   2d244:	a905      	add	r1, sp, #20
   2d246:	f017 f98a 	bl	4455e <cloud_notify_event>
		cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
		nrf_cloud_disconnect();
	}

reset:
	atomic_set(&connection_poll_active, 0);
   2d24a:	2100      	movs	r1, #0
   2d24c:	4640      	mov	r0, r8
   2d24e:	f017 f98f 	bl	44570 <atomic_set>
   2d252:	2200      	movs	r2, #0
   2d254:	2300      	movs	r3, #0
   2d256:	4638      	mov	r0, r7
   2d258:	f010 fc92 	bl	3db80 <z_impl_k_sem_take>
	k_sem_take(&connection_poll_sem, K_NO_WAIT);
	goto start;
   2d25c:	e7d2      	b.n	2d204 <nrf_cloud_run+0x2c>
		LOG_DBG("Cloud connection request sent.");
   2d25e:	ea4f 148a 	mov.w	r4, sl, lsl #6
   2d262:	4a50      	ldr	r2, [pc, #320]	; (2d3a4 <nrf_cloud_run+0x1cc>)
   2d264:	4950      	ldr	r1, [pc, #320]	; (2d3a8 <nrf_cloud_run+0x1d0>)
   2d266:	f044 0004 	orr.w	r0, r4, #4
   2d26a:	f014 fad9 	bl	41820 <log_string_sync>
	fds[0].fd = nct_socket_get();
   2d26e:	f001 fd77 	bl	2ed60 <nct_socket_get>
	fds[0].events = POLLIN;
   2d272:	2301      	movs	r3, #1
   2d274:	f8ad 3010 	strh.w	r3, [sp, #16]
	cloud_evt.type = CLOUD_EVT_DISCONNECTED;
   2d278:	2302      	movs	r3, #2
	atomic_set(&transport_disconnected, 0);
   2d27a:	4649      	mov	r1, r9
	fds[0].fd = nct_socket_get();
   2d27c:	9003      	str	r0, [sp, #12]
	atomic_set(&transport_disconnected, 0);
   2d27e:	484b      	ldr	r0, [pc, #300]	; (2d3ac <nrf_cloud_run+0x1d4>)
	cloud_evt.type = CLOUD_EVT_DISCONNECTED;
   2d280:	f88d 3014 	strb.w	r3, [sp, #20]
	atomic_set(&transport_disconnected, 0);
   2d284:	f017 f974 	bl	44570 <atomic_set>
 */
static inline int cloud_keepalive_time_left(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
	    backend->api->keepalive_time_left == NULL) {
		__ASSERT(0, "Missing cloud backend functionality");
   2d288:	f8df 9154 	ldr.w	r9, [pc, #340]	; 2d3e0 <nrf_cloud_run+0x208>
   2d28c:	f8df b154 	ldr.w	fp, [pc, #340]	; 2d3e4 <nrf_cloud_run+0x20c>
	return z_impl_zsock_poll(fds, nfds, timeout);
   2d290:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   2d294:	2101      	movs	r1, #1
   2d296:	a803      	add	r0, sp, #12
   2d298:	f7f8 f840 	bl	2531c <z_impl_zsock_poll>
		if (ret == 0) {
   2d29c:	4602      	mov	r2, r0
   2d29e:	b9e8      	cbnz	r0, 2d2dc <nrf_cloud_run+0x104>
			if (cloud_keepalive_time_left(nrf_cloud_backend) <
   2d2a0:	4b3f      	ldr	r3, [pc, #252]	; (2d3a0 <nrf_cloud_run+0x1c8>)
   2d2a2:	6818      	ldr	r0, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   2d2a4:	b118      	cbz	r0, 2d2ae <nrf_cloud_run+0xd6>
   2d2a6:	6803      	ldr	r3, [r0, #0]
   2d2a8:	b10b      	cbz	r3, 2d2ae <nrf_cloud_run+0xd6>
	    backend->api->keepalive_time_left == NULL) {
   2d2aa:	699b      	ldr	r3, [r3, #24]
	if (backend == NULL || backend->api == NULL ||
   2d2ac:	b98b      	cbnz	r3, 2d2d2 <nrf_cloud_run+0xfa>
		__ASSERT(0, "Missing cloud backend functionality");
   2d2ae:	4659      	mov	r1, fp
   2d2b0:	f44f 739f 	mov.w	r3, #318	; 0x13e
   2d2b4:	464a      	mov	r2, r9
   2d2b6:	483e      	ldr	r0, [pc, #248]	; (2d3b0 <nrf_cloud_run+0x1d8>)
   2d2b8:	f014 f884 	bl	413c4 <printk>
   2d2bc:	483d      	ldr	r0, [pc, #244]	; (2d3b4 <nrf_cloud_run+0x1dc>)
   2d2be:	f014 f881 	bl	413c4 <printk>
   2d2c2:	f44f 719f 	mov.w	r1, #318	; 0x13e
   2d2c6:	4648      	mov	r0, r9
   2d2c8:	f014 fa99 	bl	417fe <assert_post_action>
	nct_process();
   2d2cc:	f001 fd36 	bl	2ed3c <nct_process>
	return 0;
   2d2d0:	e7de      	b.n	2d290 <nrf_cloud_run+0xb8>
		return SYS_FOREVER_MS;
	}

	return backend->api->keepalive_time_left(backend);
   2d2d2:	4798      	blx	r3
			if (cloud_keepalive_time_left(nrf_cloud_backend) <
   2d2d4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   2d2d8:	dada      	bge.n	2d290 <nrf_cloud_run+0xb8>
   2d2da:	e7f7      	b.n	2d2cc <nrf_cloud_run+0xf4>
		if ((fds[0].revents & POLLIN) == POLLIN) {
   2d2dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2d2e0:	f013 0301 	ands.w	r3, r3, #1
   2d2e4:	d1f2      	bne.n	2d2cc <nrf_cloud_run+0xf4>
		if (ret < 0) {
   2d2e6:	2800      	cmp	r0, #0
   2d2e8:	da06      	bge.n	2d2f8 <nrf_cloud_run+0x120>
			LOG_ERR("poll() returned an error: %d", ret);
   2d2ea:	4933      	ldr	r1, [pc, #204]	; (2d3b8 <nrf_cloud_run+0x1e0>)
   2d2ec:	f044 0001 	orr.w	r0, r4, #1
			LOG_DBG("Cloud connection was unexpectedly closed.");
   2d2f0:	f014 fa96 	bl	41820 <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_MISC;
   2d2f4:	2303      	movs	r3, #3
   2d2f6:	e022      	b.n	2d33e <nrf_cloud_run+0x166>
   2d2f8:	4a30      	ldr	r2, [pc, #192]	; (2d3bc <nrf_cloud_run+0x1e4>)
   2d2fa:	e8d2 2faf 	lda	r2, [r2]
		if (atomic_get(&disconnect_requested)) {
   2d2fe:	b16a      	cbz	r2, 2d31c <nrf_cloud_run+0x144>
			atomic_set(&disconnect_requested, 0);
   2d300:	4619      	mov	r1, r3
   2d302:	482e      	ldr	r0, [pc, #184]	; (2d3bc <nrf_cloud_run+0x1e4>)
   2d304:	9301      	str	r3, [sp, #4]
   2d306:	f017 f933 	bl	44570 <atomic_set>
			LOG_DBG("Expected disconnect event.");
   2d30a:	4a26      	ldr	r2, [pc, #152]	; (2d3a4 <nrf_cloud_run+0x1cc>)
   2d30c:	492c      	ldr	r1, [pc, #176]	; (2d3c0 <nrf_cloud_run+0x1e8>)
   2d30e:	f044 0004 	orr.w	r0, r4, #4
   2d312:	f014 fa85 	bl	41820 <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_USER_REQUEST;
   2d316:	9b01      	ldr	r3, [sp, #4]
   2d318:	9306      	str	r3, [sp, #24]
			cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2d31a:	e791      	b.n	2d240 <nrf_cloud_run+0x68>
		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   2d31c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2d320:	0699      	lsls	r1, r3, #26
   2d322:	d51a      	bpl.n	2d35a <nrf_cloud_run+0x182>
			LOG_DBG("Socket error: POLLNVAL");
   2d324:	f044 0404 	orr.w	r4, r4, #4
   2d328:	4620      	mov	r0, r4
   2d32a:	4a1e      	ldr	r2, [pc, #120]	; (2d3a4 <nrf_cloud_run+0x1cc>)
   2d32c:	4925      	ldr	r1, [pc, #148]	; (2d3c4 <nrf_cloud_run+0x1ec>)
   2d32e:	f014 fa77 	bl	41820 <log_string_sync>
			LOG_DBG("The cloud socket was unexpectedly closed.");
   2d332:	4620      	mov	r0, r4
   2d334:	4a1b      	ldr	r2, [pc, #108]	; (2d3a4 <nrf_cloud_run+0x1cc>)
   2d336:	4924      	ldr	r1, [pc, #144]	; (2d3c8 <nrf_cloud_run+0x1f0>)
   2d338:	f014 fa72 	bl	41820 <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_INVALID_REQUEST;
   2d33c:	2302      	movs	r3, #2
			cloud_evt.data.err = CLOUD_DISCONNECT_MISC;
   2d33e:	9306      	str	r3, [sp, #24]
   2d340:	4b1a      	ldr	r3, [pc, #104]	; (2d3ac <nrf_cloud_run+0x1d4>)
   2d342:	e8d3 2faf 	lda	r2, [r3]
	if (atomic_get(&transport_disconnected) == 0) {
   2d346:	2a00      	cmp	r2, #0
   2d348:	f47f af7f 	bne.w	2d24a <nrf_cloud_run+0x72>
		cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2d34c:	6828      	ldr	r0, [r5, #0]
   2d34e:	a905      	add	r1, sp, #20
   2d350:	f017 f905 	bl	4455e <cloud_notify_event>
		nrf_cloud_disconnect();
   2d354:	f7ff ff28 	bl	2d1a8 <nrf_cloud_disconnect>
   2d358:	e777      	b.n	2d24a <nrf_cloud_run+0x72>
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   2d35a:	06da      	lsls	r2, r3, #27
   2d35c:	d50d      	bpl.n	2d37a <nrf_cloud_run+0x1a2>
			LOG_DBG("Socket error: POLLHUP");
   2d35e:	f044 0404 	orr.w	r4, r4, #4
   2d362:	4620      	mov	r0, r4
   2d364:	4a0f      	ldr	r2, [pc, #60]	; (2d3a4 <nrf_cloud_run+0x1cc>)
   2d366:	4919      	ldr	r1, [pc, #100]	; (2d3cc <nrf_cloud_run+0x1f4>)
   2d368:	f014 fa5a 	bl	41820 <log_string_sync>
			LOG_DBG("Connection was closed by the cloud.");
   2d36c:	4620      	mov	r0, r4
   2d36e:	4a0d      	ldr	r2, [pc, #52]	; (2d3a4 <nrf_cloud_run+0x1cc>)
   2d370:	4917      	ldr	r1, [pc, #92]	; (2d3d0 <nrf_cloud_run+0x1f8>)
   2d372:	f014 fa55 	bl	41820 <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_CLOSED_BY_REMOTE;
   2d376:	2301      	movs	r3, #1
   2d378:	e7e1      	b.n	2d33e <nrf_cloud_run+0x166>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   2d37a:	071b      	lsls	r3, r3, #28
   2d37c:	d588      	bpl.n	2d290 <nrf_cloud_run+0xb8>
			LOG_DBG("Socket error: POLLERR");
   2d37e:	f044 0404 	orr.w	r4, r4, #4
   2d382:	4620      	mov	r0, r4
   2d384:	4a07      	ldr	r2, [pc, #28]	; (2d3a4 <nrf_cloud_run+0x1cc>)
   2d386:	4913      	ldr	r1, [pc, #76]	; (2d3d4 <nrf_cloud_run+0x1fc>)
   2d388:	f014 fa4a 	bl	41820 <log_string_sync>
			LOG_DBG("Cloud connection was unexpectedly closed.");
   2d38c:	4620      	mov	r0, r4
   2d38e:	4a05      	ldr	r2, [pc, #20]	; (2d3a4 <nrf_cloud_run+0x1cc>)
   2d390:	4911      	ldr	r1, [pc, #68]	; (2d3d8 <nrf_cloud_run+0x200>)
   2d392:	e7ad      	b.n	2d2f0 <nrf_cloud_run+0x118>
   2d394:	000463bc 	.word	0x000463bc
   2d398:	000464a4 	.word	0x000464a4
   2d39c:	20020c18 	.word	0x20020c18
   2d3a0:	20024a14 	.word	0x20024a14
   2d3a4:	0004bb30 	.word	0x0004bb30
   2d3a8:	0004b940 	.word	0x0004b940
   2d3ac:	20024a18 	.word	0x20024a18
   2d3b0:	00048156 	.word	0x00048156
   2d3b4:	0004b987 	.word	0x0004b987
   2d3b8:	0004b9ad 	.word	0x0004b9ad
   2d3bc:	20024a10 	.word	0x20024a10
   2d3c0:	0004b9ca 	.word	0x0004b9ca
   2d3c4:	0004b9e9 	.word	0x0004b9e9
   2d3c8:	0004ba04 	.word	0x0004ba04
   2d3cc:	0004ba32 	.word	0x0004ba32
   2d3d0:	0004ba4c 	.word	0x0004ba4c
   2d3d4:	0004ba74 	.word	0x0004ba74
   2d3d8:	0004ba8e 	.word	0x0004ba8e
   2d3dc:	20024a0c 	.word	0x20024a0c
   2d3e0:	0004b963 	.word	0x0004b963
   2d3e4:	0004ef58 	.word	0x0004ef58

0002d3e8 <nct_input>:
	return nfsm_handle_incoming_event(evt, current_state);
   2d3e8:	4b01      	ldr	r3, [pc, #4]	; (2d3f0 <nct_input+0x8>)
   2d3ea:	7819      	ldrb	r1, [r3, #0]
   2d3ec:	f000 bca2 	b.w	2dd34 <nfsm_handle_incoming_event>
   2d3f0:	2002cc37 	.word	0x2002cc37

0002d3f4 <nct_apply_update>:
	app_event_handler(&evt);
   2d3f4:	4b01      	ldr	r3, [pc, #4]	; (2d3fc <nct_apply_update+0x8>)
   2d3f6:	4802      	ldr	r0, [pc, #8]	; (2d400 <nct_apply_update+0xc>)
   2d3f8:	681b      	ldr	r3, [r3, #0]
   2d3fa:	4718      	bx	r3
   2d3fc:	20024a08 	.word	0x20024a08
   2d400:	00046c84 	.word	0x00046c84

0002d404 <nrf_cloud_decode_desired_obj>:
	return !strncmp(s1, s2, strlen(s2));
}

static void nrf_cloud_decode_desired_obj(cJSON *const root_obj,
					 cJSON **desired_obj)
{
   2d404:	b538      	push	{r3, r4, r5, lr}
   2d406:	460c      	mov	r4, r1
	cJSON *state_obj;

	if ((root_obj != NULL) && (desired_obj != NULL)) {
   2d408:	4605      	mov	r5, r0
   2d40a:	b140      	cbz	r0, 2d41e <nrf_cloud_decode_desired_obj+0x1a>
		/* On initial pairing, a shadow delta event is sent */
		/* which does not include the "desired" JSON key, */
		/* "state" is used instead */
		state_obj = json_object_decode(root_obj, "state");
   2d40c:	4904      	ldr	r1, [pc, #16]	; (2d420 <nrf_cloud_decode_desired_obj+0x1c>)
   2d40e:	f017 f8d7 	bl	445c0 <json_object_decode>
		if (state_obj == NULL) {
   2d412:	b918      	cbnz	r0, 2d41c <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, "desired");
   2d414:	4628      	mov	r0, r5
   2d416:	4903      	ldr	r1, [pc, #12]	; (2d424 <nrf_cloud_decode_desired_obj+0x20>)
   2d418:	f017 f8d2 	bl	445c0 <json_object_decode>
		} else {
			*desired_obj = state_obj;
   2d41c:	6020      	str	r0, [r4, #0]
		}
	}
}
   2d41e:	bd38      	pop	{r3, r4, r5, pc}
   2d420:	0004e7b6 	.word	0x0004e7b6
   2d424:	0004bb3e 	.word	0x0004bb3e

0002d428 <nrf_cloud_decode_requested_state>:
	return 0;
}

int nrf_cloud_decode_requested_state(const struct nrf_cloud_data *input,
				     enum nfsm_state *requested_state)
{
   2d428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d42a:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   2d42c:	460f      	mov	r7, r1
   2d42e:	b949      	cbnz	r1, 2d444 <nrf_cloud_decode_requested_state+0x1c>
   2d430:	494e      	ldr	r1, [pc, #312]	; (2d56c <nrf_cloud_decode_requested_state+0x144>)
   2d432:	484f      	ldr	r0, [pc, #316]	; (2d570 <nrf_cloud_decode_requested_state+0x148>)
   2d434:	23cb      	movs	r3, #203	; 0xcb
   2d436:	4a4f      	ldr	r2, [pc, #316]	; (2d574 <nrf_cloud_decode_requested_state+0x14c>)
   2d438:	f013 ffc4 	bl	413c4 <printk>
   2d43c:	21cb      	movs	r1, #203	; 0xcb
   2d43e:	484d      	ldr	r0, [pc, #308]	; (2d574 <nrf_cloud_decode_requested_state+0x14c>)
   2d440:	f014 f9dd 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2d444:	b94e      	cbnz	r6, 2d45a <nrf_cloud_decode_requested_state+0x32>
   2d446:	494c      	ldr	r1, [pc, #304]	; (2d578 <nrf_cloud_decode_requested_state+0x150>)
   2d448:	4849      	ldr	r0, [pc, #292]	; (2d570 <nrf_cloud_decode_requested_state+0x148>)
   2d44a:	23cc      	movs	r3, #204	; 0xcc
   2d44c:	4a49      	ldr	r2, [pc, #292]	; (2d574 <nrf_cloud_decode_requested_state+0x14c>)
   2d44e:	f013 ffb9 	bl	413c4 <printk>
   2d452:	21cc      	movs	r1, #204	; 0xcc
   2d454:	4847      	ldr	r0, [pc, #284]	; (2d574 <nrf_cloud_decode_requested_state+0x14c>)
   2d456:	f014 f9d2 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2d45a:	6873      	ldr	r3, [r6, #4]
   2d45c:	b94b      	cbnz	r3, 2d472 <nrf_cloud_decode_requested_state+0x4a>
   2d45e:	4947      	ldr	r1, [pc, #284]	; (2d57c <nrf_cloud_decode_requested_state+0x154>)
   2d460:	4843      	ldr	r0, [pc, #268]	; (2d570 <nrf_cloud_decode_requested_state+0x148>)
   2d462:	23cd      	movs	r3, #205	; 0xcd
   2d464:	4a43      	ldr	r2, [pc, #268]	; (2d574 <nrf_cloud_decode_requested_state+0x14c>)
   2d466:	f013 ffad 	bl	413c4 <printk>
   2d46a:	21cd      	movs	r1, #205	; 0xcd
   2d46c:	4841      	ldr	r0, [pc, #260]	; (2d574 <nrf_cloud_decode_requested_state+0x14c>)
   2d46e:	f014 f9c6 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2d472:	6833      	ldr	r3, [r6, #0]
   2d474:	b94b      	cbnz	r3, 2d48a <nrf_cloud_decode_requested_state+0x62>
   2d476:	4942      	ldr	r1, [pc, #264]	; (2d580 <nrf_cloud_decode_requested_state+0x158>)
   2d478:	483d      	ldr	r0, [pc, #244]	; (2d570 <nrf_cloud_decode_requested_state+0x148>)
   2d47a:	23ce      	movs	r3, #206	; 0xce
   2d47c:	4a3d      	ldr	r2, [pc, #244]	; (2d574 <nrf_cloud_decode_requested_state+0x14c>)
   2d47e:	f013 ffa1 	bl	413c4 <printk>
   2d482:	21ce      	movs	r1, #206	; 0xce
   2d484:	483b      	ldr	r0, [pc, #236]	; (2d574 <nrf_cloud_decode_requested_state+0x14c>)
   2d486:	f014 f9ba 	bl	417fe <assert_post_action>
	cJSON *desired_obj;
	cJSON *pairing_obj;
	cJSON *pairing_state_obj;
	cJSON *topic_prefix_obj;

	root_obj = cJSON_Parse(input->ptr);
   2d48a:	6870      	ldr	r0, [r6, #4]
   2d48c:	f016 fa99 	bl	439c2 <cJSON_Parse>
	if (root_obj == NULL) {
   2d490:	4605      	mov	r5, r0
   2d492:	b988      	cbnz	r0, 2d4b8 <nrf_cloud_decode_requested_state+0x90>
   2d494:	4b3b      	ldr	r3, [pc, #236]	; (2d584 <nrf_cloud_decode_requested_state+0x15c>)
   2d496:	4c3c      	ldr	r4, [pc, #240]	; (2d588 <nrf_cloud_decode_requested_state+0x160>)
		LOG_ERR("cJSON_Parse failed: %s",
   2d498:	6870      	ldr	r0, [r6, #4]
   2d49a:	1ae4      	subs	r4, r4, r3
   2d49c:	f014 f9d3 	bl	41846 <log_strdup>
   2d4a0:	08e4      	lsrs	r4, r4, #3
   2d4a2:	01a4      	lsls	r4, r4, #6
   2d4a4:	f044 0401 	orr.w	r4, r4, #1
   2d4a8:	4602      	mov	r2, r0
   2d4aa:	4938      	ldr	r1, [pc, #224]	; (2d58c <nrf_cloud_decode_requested_state+0x164>)
   2d4ac:	4620      	mov	r0, r4
   2d4ae:	f014 f9b7 	bl	41820 <log_string_sync>
			LOG_WRN("Unhandled data received from nRF Cloud.");
			LOG_INF("Ensure device firmware is up to date.");
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
		}
		cJSON_Delete(root_obj);
		return -ENOENT;
   2d4b2:	f06f 0401 	mvn.w	r4, #1
   2d4b6:	e00d      	b.n	2d4d4 <nrf_cloud_decode_requested_state+0xac>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2d4b8:	a901      	add	r1, sp, #4
   2d4ba:	f7ff ffa3 	bl	2d404 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, "nrfcloud_mqtt_topic_prefix");
   2d4be:	4934      	ldr	r1, [pc, #208]	; (2d590 <nrf_cloud_decode_requested_state+0x168>)
   2d4c0:	9801      	ldr	r0, [sp, #4]
   2d4c2:	f017 f87d 	bl	445c0 <json_object_decode>
	if (topic_prefix_obj != NULL) {
   2d4c6:	b140      	cbz	r0, 2d4da <nrf_cloud_decode_requested_state+0xb2>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2d4c8:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2d4ca:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2d4cc:	703b      	strb	r3, [r7, #0]
		cJSON_Delete(root_obj);
   2d4ce:	f7fb fe43 	bl	29158 <cJSON_Delete>
		return 0;
   2d4d2:	2400      	movs	r4, #0
	}

	cJSON_Delete(root_obj);

	return 0;
}
   2d4d4:	4620      	mov	r0, r4
   2d4d6:	b003      	add	sp, #12
   2d4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	pairing_obj = json_object_decode(desired_obj, "pairing");
   2d4da:	492e      	ldr	r1, [pc, #184]	; (2d594 <nrf_cloud_decode_requested_state+0x16c>)
   2d4dc:	9801      	ldr	r0, [sp, #4]
   2d4de:	f017 f86f 	bl	445c0 <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   2d4e2:	492d      	ldr	r1, [pc, #180]	; (2d598 <nrf_cloud_decode_requested_state+0x170>)
   2d4e4:	f017 f86c 	bl	445c0 <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   2d4e8:	b110      	cbz	r0, 2d4f0 <nrf_cloud_decode_requested_state+0xc8>
   2d4ea:	68c3      	ldr	r3, [r0, #12]
   2d4ec:	2b10      	cmp	r3, #16
   2d4ee:	d01c      	beq.n	2d52a <nrf_cloud_decode_requested_state+0x102>
		if (cJSON_HasObjectItem(desired_obj, "config") == false) {
   2d4f0:	492a      	ldr	r1, [pc, #168]	; (2d59c <nrf_cloud_decode_requested_state+0x174>)
   2d4f2:	9801      	ldr	r0, [sp, #4]
   2d4f4:	f016 fa7a 	bl	439ec <cJSON_HasObjectItem>
   2d4f8:	b998      	cbnz	r0, 2d522 <nrf_cloud_decode_requested_state+0xfa>
   2d4fa:	4b22      	ldr	r3, [pc, #136]	; (2d584 <nrf_cloud_decode_requested_state+0x15c>)
   2d4fc:	4c22      	ldr	r4, [pc, #136]	; (2d588 <nrf_cloud_decode_requested_state+0x160>)
			LOG_WRN("Unhandled data received from nRF Cloud.");
   2d4fe:	4928      	ldr	r1, [pc, #160]	; (2d5a0 <nrf_cloud_decode_requested_state+0x178>)
   2d500:	1ae4      	subs	r4, r4, r3
   2d502:	08e4      	lsrs	r4, r4, #3
   2d504:	01a4      	lsls	r4, r4, #6
   2d506:	f044 0002 	orr.w	r0, r4, #2
			LOG_INF("Ensure device firmware is up to date.");
   2d50a:	f044 0403 	orr.w	r4, r4, #3
			LOG_WRN("Unhandled data received from nRF Cloud.");
   2d50e:	f014 f987 	bl	41820 <log_string_sync>
			LOG_INF("Ensure device firmware is up to date.");
   2d512:	4620      	mov	r0, r4
   2d514:	4923      	ldr	r1, [pc, #140]	; (2d5a4 <nrf_cloud_decode_requested_state+0x17c>)
   2d516:	f014 f983 	bl	41820 <log_string_sync>
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
   2d51a:	4620      	mov	r0, r4
   2d51c:	4922      	ldr	r1, [pc, #136]	; (2d5a8 <nrf_cloud_decode_requested_state+0x180>)
   2d51e:	f014 f97f 	bl	41820 <log_string_sync>
		cJSON_Delete(root_obj);
   2d522:	4628      	mov	r0, r5
   2d524:	f7fb fe18 	bl	29158 <cJSON_Delete>
   2d528:	e7c3      	b.n	2d4b2 <nrf_cloud_decode_requested_state+0x8a>
	const char *state_str = pairing_state_obj->valuestring;
   2d52a:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   2d52c:	481f      	ldr	r0, [pc, #124]	; (2d5ac <nrf_cloud_decode_requested_state+0x184>)
   2d52e:	f7ef fe95 	bl	1d25c <strlen>
   2d532:	491e      	ldr	r1, [pc, #120]	; (2d5ac <nrf_cloud_decode_requested_state+0x184>)
   2d534:	4602      	mov	r2, r0
   2d536:	4620      	mov	r0, r4
   2d538:	f017 fdd5 	bl	450e6 <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   2d53c:	4604      	mov	r4, r0
   2d53e:	b928      	cbnz	r0, 2d54c <nrf_cloud_decode_requested_state+0x124>
		(*requested_state) = STATE_UA_PIN_WAIT;
   2d540:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   2d542:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   2d544:	703b      	strb	r3, [r7, #0]
	cJSON_Delete(root_obj);
   2d546:	f7fb fe07 	bl	29158 <cJSON_Delete>
	return 0;
   2d54a:	e7c3      	b.n	2d4d4 <nrf_cloud_decode_requested_state+0xac>
   2d54c:	4b0d      	ldr	r3, [pc, #52]	; (2d584 <nrf_cloud_decode_requested_state+0x15c>)
   2d54e:	480e      	ldr	r0, [pc, #56]	; (2d588 <nrf_cloud_decode_requested_state+0x160>)
		LOG_ERR("Deprecated state. Delete device from nRF Cloud and update device with JITP certificates.");
   2d550:	4917      	ldr	r1, [pc, #92]	; (2d5b0 <nrf_cloud_decode_requested_state+0x188>)
   2d552:	1ac0      	subs	r0, r0, r3
   2d554:	08c0      	lsrs	r0, r0, #3
   2d556:	0180      	lsls	r0, r0, #6
   2d558:	f040 0001 	orr.w	r0, r0, #1
   2d55c:	f014 f960 	bl	41820 <log_string_sync>
		cJSON_Delete(root_obj);
   2d560:	4628      	mov	r0, r5
   2d562:	f7fb fdf9 	bl	29158 <cJSON_Delete>
		return -ENOTSUP;
   2d566:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2d56a:	e7b3      	b.n	2d4d4 <nrf_cloud_decode_requested_state+0xac>
   2d56c:	0004bbd1 	.word	0x0004bbd1
   2d570:	00048156 	.word	0x00048156
   2d574:	0004bb46 	.word	0x0004bb46
   2d578:	0004bbf0 	.word	0x0004bbf0
   2d57c:	0004bc05 	.word	0x0004bc05
   2d580:	0004bc1f 	.word	0x0004bc1f
   2d584:	000463bc 	.word	0x000463bc
   2d588:	000464b4 	.word	0x000464b4
   2d58c:	0004bc2f 	.word	0x0004bc2f
   2d590:	0004bc46 	.word	0x0004bc46
   2d594:	0004bc61 	.word	0x0004bc61
   2d598:	0004e7b6 	.word	0x0004e7b6
   2d59c:	0004eb07 	.word	0x0004eb07
   2d5a0:	0004bc69 	.word	0x0004bc69
   2d5a4:	0004bc91 	.word	0x0004bc91
   2d5a8:	0004bcb7 	.word	0x0004bcb7
   2d5ac:	0004bcf2 	.word	0x0004bcf2
   2d5b0:	0004bd01 	.word	0x0004bd01

0002d5b4 <nrf_cloud_encode_config_response>:

int nrf_cloud_encode_config_response(struct nrf_cloud_data const *const input,
				     struct nrf_cloud_data *const output,
				     bool *const has_config)
{
   2d5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d5b8:	4604      	mov	r4, r0
   2d5ba:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   2d5bc:	460d      	mov	r5, r1
   2d5be:	b959      	cbnz	r1, 2d5d8 <nrf_cloud_encode_config_response+0x24>
   2d5c0:	494e      	ldr	r1, [pc, #312]	; (2d6fc <nrf_cloud_encode_config_response+0x148>)
   2d5c2:	484f      	ldr	r0, [pc, #316]	; (2d700 <nrf_cloud_encode_config_response+0x14c>)
   2d5c4:	f240 1307 	movw	r3, #263	; 0x107
   2d5c8:	4a4e      	ldr	r2, [pc, #312]	; (2d704 <nrf_cloud_encode_config_response+0x150>)
   2d5ca:	f013 fefb 	bl	413c4 <printk>
   2d5ce:	f240 1107 	movw	r1, #263	; 0x107
   2d5d2:	484c      	ldr	r0, [pc, #304]	; (2d704 <nrf_cloud_encode_config_response+0x150>)
   2d5d4:	f014 f913 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2d5d8:	2c00      	cmp	r4, #0
   2d5da:	d164      	bne.n	2d6a6 <nrf_cloud_encode_config_response+0xf2>
   2d5dc:	494a      	ldr	r1, [pc, #296]	; (2d708 <nrf_cloud_encode_config_response+0x154>)
   2d5de:	4848      	ldr	r0, [pc, #288]	; (2d700 <nrf_cloud_encode_config_response+0x14c>)
   2d5e0:	f44f 7384 	mov.w	r3, #264	; 0x108
   2d5e4:	4a47      	ldr	r2, [pc, #284]	; (2d704 <nrf_cloud_encode_config_response+0x150>)
   2d5e6:	f013 feed 	bl	413c4 <printk>
   2d5ea:	f44f 7184 	mov.w	r1, #264	; 0x108
   2d5ee:	4845      	ldr	r0, [pc, #276]	; (2d704 <nrf_cloud_encode_config_response+0x150>)
   2d5f0:	f014 f905 	bl	417fe <assert_post_action>
	cJSON *state_obj = NULL;
	cJSON *config_obj = NULL;
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;

	if (input_obj == NULL) {
		return -ESRCH; /* invalid input or no JSON parsed */
   2d5f4:	f06f 0002 	mvn.w	r0, #2
   2d5f8:	e07d      	b.n	2d6f6 <nrf_cloud_encode_config_response+0x142>
		output->len = 0;
		return 0;
	}

	/* Prepare JSON response for the delta */
	root_obj = cJSON_CreateObject();
   2d5fa:	f7fb fe81 	bl	29300 <cJSON_CreateObject>
   2d5fe:	4606      	mov	r6, r0
	desired_obj = cJSON_CreateObject();
   2d600:	f7fb fe7e 	bl	29300 <cJSON_CreateObject>
   2d604:	4680      	mov	r8, r0
	null_obj = cJSON_CreateNull();
   2d606:	f7fb fe3b 	bl	29280 <cJSON_CreateNull>
   2d60a:	4681      	mov	r9, r0
	reported_obj = cJSON_CreateObject();
   2d60c:	f7fb fe78 	bl	29300 <cJSON_CreateObject>
   2d610:	4682      	mov	sl, r0

	if ((root_obj == NULL) || (desired_obj == NULL) || (null_obj == NULL) ||
   2d612:	b136      	cbz	r6, 2d622 <nrf_cloud_encode_config_response+0x6e>
   2d614:	f1b8 0f00 	cmp.w	r8, #0
   2d618:	d003      	beq.n	2d622 <nrf_cloud_encode_config_response+0x6e>
   2d61a:	f1b9 0f00 	cmp.w	r9, #0
   2d61e:	d000      	beq.n	2d622 <nrf_cloud_encode_config_response+0x6e>
   2d620:	b9a0      	cbnz	r0, 2d64c <nrf_cloud_encode_config_response+0x98>
		(reported_obj == NULL)) {
		cJSON_Delete(root_obj);
   2d622:	4630      	mov	r0, r6
   2d624:	f7fb fd98 	bl	29158 <cJSON_Delete>
		cJSON_Delete(desired_obj);
   2d628:	4640      	mov	r0, r8
   2d62a:	f7fb fd95 	bl	29158 <cJSON_Delete>
		cJSON_Delete(null_obj);
   2d62e:	4648      	mov	r0, r9
   2d630:	f7fb fd92 	bl	29158 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2d634:	4650      	mov	r0, sl
   2d636:	f7fb fd8f 	bl	29158 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2d63a:	4638      	mov	r0, r7
   2d63c:	f7fb fd8c 	bl	29158 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2d640:	4620      	mov	r0, r4
   2d642:	f7fb fd89 	bl	29158 <cJSON_Delete>
	(void)json_add_obj(state_obj, "state", root_obj);
	buffer = cJSON_PrintUnformatted(state_obj);
	cJSON_Delete(state_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   2d646:	f06f 000b 	mvn.w	r0, #11
   2d64a:	e054      	b.n	2d6f6 <nrf_cloud_encode_config_response+0x142>
	cJSON_AddItemToObject(parent, str, item);
   2d64c:	463a      	mov	r2, r7
   2d64e:	492f      	ldr	r1, [pc, #188]	; (2d70c <nrf_cloud_encode_config_response+0x158>)
   2d650:	f016 f9d5 	bl	439fe <cJSON_AddItemToObject>
   2d654:	4652      	mov	r2, sl
   2d656:	4630      	mov	r0, r6
   2d658:	492d      	ldr	r1, [pc, #180]	; (2d710 <nrf_cloud_encode_config_response+0x15c>)
   2d65a:	f016 f9d0 	bl	439fe <cJSON_AddItemToObject>
   2d65e:	464a      	mov	r2, r9
   2d660:	4640      	mov	r0, r8
   2d662:	492a      	ldr	r1, [pc, #168]	; (2d70c <nrf_cloud_encode_config_response+0x158>)
   2d664:	f016 f9cb 	bl	439fe <cJSON_AddItemToObject>
   2d668:	4642      	mov	r2, r8
   2d66a:	492a      	ldr	r1, [pc, #168]	; (2d714 <nrf_cloud_encode_config_response+0x160>)
   2d66c:	4630      	mov	r0, r6
   2d66e:	f016 f9c6 	bl	439fe <cJSON_AddItemToObject>
	cJSON_Delete(state_obj);
   2d672:	4620      	mov	r0, r4
   2d674:	f7fb fd70 	bl	29158 <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   2d678:	f7fb fe42 	bl	29300 <cJSON_CreateObject>
   2d67c:	4607      	mov	r7, r0
	cJSON_AddItemToObject(parent, str, item);
   2d67e:	4632      	mov	r2, r6
   2d680:	4925      	ldr	r1, [pc, #148]	; (2d718 <nrf_cloud_encode_config_response+0x164>)
   2d682:	f016 f9bc 	bl	439fe <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(state_obj);
   2d686:	4638      	mov	r0, r7
   2d688:	f016 f99f 	bl	439ca <cJSON_PrintUnformatted>
   2d68c:	4604      	mov	r4, r0
	cJSON_Delete(state_obj);
   2d68e:	4638      	mov	r0, r7
   2d690:	f7fb fd62 	bl	29158 <cJSON_Delete>
	if (buffer == NULL) {
   2d694:	2c00      	cmp	r4, #0
   2d696:	d0d6      	beq.n	2d646 <nrf_cloud_encode_config_response+0x92>
	}

	output->ptr = buffer;
	output->len = strlen(buffer);
   2d698:	4620      	mov	r0, r4
	output->ptr = buffer;
   2d69a:	606c      	str	r4, [r5, #4]
	output->len = strlen(buffer);
   2d69c:	f7ef fdde 	bl	1d25c <strlen>
   2d6a0:	6028      	str	r0, [r5, #0]

	return 0;
   2d6a2:	2000      	movs	r0, #0
   2d6a4:	e027      	b.n	2d6f6 <nrf_cloud_encode_config_response+0x142>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   2d6a6:	6860      	ldr	r0, [r4, #4]
   2d6a8:	f016 f98b 	bl	439c2 <cJSON_Parse>
	if (input_obj == NULL) {
   2d6ac:	4606      	mov	r6, r0
   2d6ae:	2800      	cmp	r0, #0
   2d6b0:	d0a0      	beq.n	2d5f4 <nrf_cloud_encode_config_response+0x40>
	state_obj = cJSON_DetachItemFromObject(input_obj, "state");
   2d6b2:	4919      	ldr	r1, [pc, #100]	; (2d718 <nrf_cloud_encode_config_response+0x164>)
   2d6b4:	f016 f9ba 	bl	43a2c <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   2d6b8:	1e04      	subs	r4, r0, #0
   2d6ba:	bf14      	ite	ne
   2d6bc:	4620      	movne	r0, r4
   2d6be:	4630      	moveq	r0, r6
   2d6c0:	4912      	ldr	r1, [pc, #72]	; (2d70c <nrf_cloud_encode_config_response+0x158>)
   2d6c2:	f016 f9b3 	bl	43a2c <cJSON_DetachItemFromObject>
   2d6c6:	4607      	mov	r7, r0
	cJSON_Delete(input_obj);
   2d6c8:	4630      	mov	r0, r6
   2d6ca:	f7fb fd45 	bl	29158 <cJSON_Delete>
	if (has_config) {
   2d6ce:	f1b8 0f00 	cmp.w	r8, #0
   2d6d2:	d004      	beq.n	2d6de <nrf_cloud_encode_config_response+0x12a>
		*has_config = (config_obj != NULL);
   2d6d4:	1e3b      	subs	r3, r7, #0
   2d6d6:	bf18      	it	ne
   2d6d8:	2301      	movne	r3, #1
   2d6da:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   2d6de:	b10c      	cbz	r4, 2d6e4 <nrf_cloud_encode_config_response+0x130>
   2d6e0:	2f00      	cmp	r7, #0
   2d6e2:	d18a      	bne.n	2d5fa <nrf_cloud_encode_config_response+0x46>
		cJSON_Delete(state_obj);
   2d6e4:	4620      	mov	r0, r4
   2d6e6:	f7fb fd37 	bl	29158 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2d6ea:	4638      	mov	r0, r7
   2d6ec:	f7fb fd34 	bl	29158 <cJSON_Delete>
		output->ptr = NULL;
   2d6f0:	2000      	movs	r0, #0
		output->len = 0;
   2d6f2:	e9c5 0000 	strd	r0, r0, [r5]
}
   2d6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d6fa:	bf00      	nop
   2d6fc:	0004849b 	.word	0x0004849b
   2d700:	00048156 	.word	0x00048156
   2d704:	0004bb46 	.word	0x0004bb46
   2d708:	0004bbf0 	.word	0x0004bbf0
   2d70c:	0004eb07 	.word	0x0004eb07
   2d710:	0004852a 	.word	0x0004852a
   2d714:	0004bb3e 	.word	0x0004bb3e
   2d718:	0004e7b6 	.word	0x0004e7b6

0002d71c <nrf_cloud_encode_state>:

int nrf_cloud_encode_state(uint32_t reported_state, struct nrf_cloud_data *output)
{
   2d71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d720:	4604      	mov	r4, r0
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   2d722:	468a      	mov	sl, r1
{
   2d724:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(output != NULL);
   2d726:	b959      	cbnz	r1, 2d740 <nrf_cloud_encode_state+0x24>
   2d728:	495b      	ldr	r1, [pc, #364]	; (2d898 <nrf_cloud_encode_state+0x17c>)
   2d72a:	485c      	ldr	r0, [pc, #368]	; (2d89c <nrf_cloud_encode_state+0x180>)
   2d72c:	f240 1359 	movw	r3, #345	; 0x159
   2d730:	4a5b      	ldr	r2, [pc, #364]	; (2d8a0 <nrf_cloud_encode_state+0x184>)
   2d732:	f013 fe47 	bl	413c4 <printk>
   2d736:	f240 1159 	movw	r1, #345	; 0x159
   2d73a:	4859      	ldr	r0, [pc, #356]	; (2d8a0 <nrf_cloud_encode_state+0x184>)
   2d73c:	f014 f85f 	bl	417fe <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   2d740:	f7fb fdde 	bl	29300 <cJSON_CreateObject>
   2d744:	4680      	mov	r8, r0
	cJSON *state_obj = cJSON_CreateObject();
   2d746:	f7fb fddb 	bl	29300 <cJSON_CreateObject>
   2d74a:	4681      	mov	r9, r0
	cJSON *reported_obj = cJSON_CreateObject();
   2d74c:	f7fb fdd8 	bl	29300 <cJSON_CreateObject>
   2d750:	4607      	mov	r7, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   2d752:	f7fb fdd5 	bl	29300 <cJSON_CreateObject>
   2d756:	4606      	mov	r6, r0

	if ((root_obj == NULL) || (state_obj == NULL) ||
   2d758:	f1b8 0f00 	cmp.w	r8, #0
   2d75c:	d004      	beq.n	2d768 <nrf_cloud_encode_state+0x4c>
   2d75e:	f1b9 0f00 	cmp.w	r9, #0
   2d762:	d001      	beq.n	2d768 <nrf_cloud_encode_state+0x4c>
   2d764:	b107      	cbz	r7, 2d768 <nrf_cloud_encode_state+0x4c>
	    (reported_obj == NULL) || (pairing_obj == NULL)) {
   2d766:	b970      	cbnz	r0, 2d786 <nrf_cloud_encode_state+0x6a>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   2d768:	4640      	mov	r0, r8
	ret += json_add_obj(reported_obj, "pairing", pairing_obj);
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {
		cJSON_Delete(root_obj);
   2d76a:	f7fb fcf5 	bl	29158 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2d76e:	4648      	mov	r0, r9
   2d770:	f7fb fcf2 	bl	29158 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2d774:	4638      	mov	r0, r7
   2d776:	f7fb fcef 	bl	29158 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   2d77a:	4630      	mov	r0, r6
   2d77c:	f7fb fcec 	bl	29158 <cJSON_Delete>

	buffer = cJSON_PrintUnformatted(root_obj);
	cJSON_Delete(root_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   2d780:	f06f 040b 	mvn.w	r4, #11
   2d784:	e011      	b.n	2d7aa <nrf_cloud_encode_state+0x8e>
	switch (reported_state) {
   2d786:	2c06      	cmp	r4, #6
   2d788:	d013      	beq.n	2d7b2 <nrf_cloud_encode_state+0x96>
   2d78a:	2c07      	cmp	r4, #7
   2d78c:	d04c      	beq.n	2d828 <nrf_cloud_encode_state+0x10c>
		cJSON_Delete(root_obj);
   2d78e:	4640      	mov	r0, r8
   2d790:	f7fb fce2 	bl	29158 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2d794:	4648      	mov	r0, r9
   2d796:	f7fb fcdf 	bl	29158 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2d79a:	4638      	mov	r0, r7
   2d79c:	f7fb fcdc 	bl	29158 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   2d7a0:	4630      	mov	r0, r6
   2d7a2:	f7fb fcd9 	bl	29158 <cJSON_Delete>
		return -ENOTSUP;
   2d7a6:	f06f 0485 	mvn.w	r4, #133	; 0x85

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   2d7aa:	4620      	mov	r0, r4
   2d7ac:	b007      	add	sp, #28
   2d7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   2d7b2:	4a3c      	ldr	r2, [pc, #240]	; (2d8a4 <nrf_cloud_encode_state+0x188>)
   2d7b4:	493c      	ldr	r1, [pc, #240]	; (2d8a8 <nrf_cloud_encode_state+0x18c>)
   2d7b6:	f016 fef1 	bl	4459c <json_add_str>
		ret += json_add_null(pairing_obj, "topics");
   2d7ba:	493c      	ldr	r1, [pc, #240]	; (2d8ac <nrf_cloud_encode_state+0x190>)
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   2d7bc:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   2d7be:	4630      	mov	r0, r6
   2d7c0:	f016 ff02 	bl	445c8 <json_add_null>
		ret += json_add_null(pairing_obj, "config");
   2d7c4:	493a      	ldr	r1, [pc, #232]	; (2d8b0 <nrf_cloud_encode_state+0x194>)
		ret += json_add_null(pairing_obj, "topics");
   2d7c6:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   2d7c8:	4630      	mov	r0, r6
   2d7ca:	f016 fefd 	bl	445c8 <json_add_null>
		ret += json_add_null(reported_obj, "stage");
   2d7ce:	4939      	ldr	r1, [pc, #228]	; (2d8b4 <nrf_cloud_encode_state+0x198>)
		ret += json_add_null(pairing_obj, "config");
   2d7d0:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "stage");
   2d7d2:	4638      	mov	r0, r7
   2d7d4:	f016 fef8 	bl	445c8 <json_add_null>
		ret += json_add_null(reported_obj,
   2d7d8:	4937      	ldr	r1, [pc, #220]	; (2d8b8 <nrf_cloud_encode_state+0x19c>)
		ret += json_add_null(reported_obj, "stage");
   2d7da:	4404      	add	r4, r0
		ret += json_add_null(reported_obj,
   2d7dc:	4638      	mov	r0, r7
   2d7de:	f016 fef3 	bl	445c8 <json_add_null>
   2d7e2:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   2d7e4:	4632      	mov	r2, r6
   2d7e6:	4638      	mov	r0, r7
   2d7e8:	4934      	ldr	r1, [pc, #208]	; (2d8bc <nrf_cloud_encode_state+0x1a0>)
   2d7ea:	f016 f908 	bl	439fe <cJSON_AddItemToObject>
   2d7ee:	463a      	mov	r2, r7
   2d7f0:	4648      	mov	r0, r9
   2d7f2:	4933      	ldr	r1, [pc, #204]	; (2d8c0 <nrf_cloud_encode_state+0x1a4>)
   2d7f4:	f016 f903 	bl	439fe <cJSON_AddItemToObject>
   2d7f8:	4640      	mov	r0, r8
   2d7fa:	464a      	mov	r2, r9
   2d7fc:	492a      	ldr	r1, [pc, #168]	; (2d8a8 <nrf_cloud_encode_state+0x18c>)
   2d7fe:	f016 f8fe 	bl	439fe <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   2d802:	4640      	mov	r0, r8
	if (ret != 0) {
   2d804:	2c00      	cmp	r4, #0
   2d806:	d1b0      	bne.n	2d76a <nrf_cloud_encode_state+0x4e>
	buffer = cJSON_PrintUnformatted(root_obj);
   2d808:	f016 f8df 	bl	439ca <cJSON_PrintUnformatted>
   2d80c:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   2d80e:	4640      	mov	r0, r8
   2d810:	f7fb fca2 	bl	29158 <cJSON_Delete>
	if (buffer == NULL) {
   2d814:	2d00      	cmp	r5, #0
   2d816:	d0b3      	beq.n	2d780 <nrf_cloud_encode_state+0x64>
	output->len = strlen(buffer);
   2d818:	4628      	mov	r0, r5
	output->ptr = buffer;
   2d81a:	f8ca 5004 	str.w	r5, [sl, #4]
	output->len = strlen(buffer);
   2d81e:	f7ef fd1d 	bl	1d25c <strlen>
   2d822:	f8ca 0000 	str.w	r0, [sl]
	return 0;
   2d826:	e7c0      	b.n	2d7aa <nrf_cloud_encode_state+0x8e>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, &m_endp);
   2d828:	4669      	mov	r1, sp
   2d82a:	aa04      	add	r2, sp, #16
   2d82c:	a802      	add	r0, sp, #8
   2d82e:	f001 f9e5 	bl	2ebfc <nct_dc_endpoint_get>
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   2d832:	9a05      	ldr	r2, [sp, #20]
   2d834:	4920      	ldr	r1, [pc, #128]	; (2d8b8 <nrf_cloud_encode_state+0x19c>)
   2d836:	4638      	mov	r0, r7
   2d838:	f016 feb0 	bl	4459c <json_add_str>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2d83c:	4a21      	ldr	r2, [pc, #132]	; (2d8c4 <nrf_cloud_encode_state+0x1a8>)
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   2d83e:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2d840:	4919      	ldr	r1, [pc, #100]	; (2d8a8 <nrf_cloud_encode_state+0x18c>)
   2d842:	4630      	mov	r0, r6
   2d844:	f016 feaa 	bl	4459c <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   2d848:	4919      	ldr	r1, [pc, #100]	; (2d8b0 <nrf_cloud_encode_state+0x194>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2d84a:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   2d84c:	4630      	mov	r0, r6
   2d84e:	f016 febb 	bl	445c8 <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   2d852:	491d      	ldr	r1, [pc, #116]	; (2d8c8 <nrf_cloud_encode_state+0x1ac>)
		ret += json_add_null(pairing_obj, "config");
   2d854:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "pairingStatus");
   2d856:	4638      	mov	r0, r7
   2d858:	f016 feb6 	bl	445c8 <json_add_null>
   2d85c:	1825      	adds	r5, r4, r0
		cJSON *topics_obj = cJSON_CreateObject();
   2d85e:	f7fb fd4f 	bl	29300 <cJSON_CreateObject>
		if (topics_obj == NULL) {
   2d862:	4683      	mov	fp, r0
   2d864:	2800      	cmp	r0, #0
   2d866:	f43f af7f 	beq.w	2d768 <nrf_cloud_encode_state+0x4c>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   2d86a:	9a03      	ldr	r2, [sp, #12]
   2d86c:	4917      	ldr	r1, [pc, #92]	; (2d8cc <nrf_cloud_encode_state+0x1b0>)
   2d86e:	f016 fe95 	bl	4459c <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2d872:	9a01      	ldr	r2, [sp, #4]
   2d874:	4916      	ldr	r1, [pc, #88]	; (2d8d0 <nrf_cloud_encode_state+0x1b4>)
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   2d876:	4405      	add	r5, r0
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2d878:	4658      	mov	r0, fp
   2d87a:	f016 fe8f 	bl	4459c <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   2d87e:	465a      	mov	r2, fp
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2d880:	182c      	adds	r4, r5, r0
	cJSON_AddItemToObject(parent, str, item);
   2d882:	490a      	ldr	r1, [pc, #40]	; (2d8ac <nrf_cloud_encode_state+0x190>)
   2d884:	4630      	mov	r0, r6
   2d886:	f016 f8ba 	bl	439fe <cJSON_AddItemToObject>
		if (ret != 0) {
   2d88a:	2c00      	cmp	r4, #0
   2d88c:	d0aa      	beq.n	2d7e4 <nrf_cloud_encode_state+0xc8>
			cJSON_Delete(topics_obj);
   2d88e:	4658      	mov	r0, fp
   2d890:	f7fb fc62 	bl	29158 <cJSON_Delete>
		break;
   2d894:	e7a6      	b.n	2d7e4 <nrf_cloud_encode_state+0xc8>
   2d896:	bf00      	nop
   2d898:	0004849b 	.word	0x0004849b
   2d89c:	00048156 	.word	0x00048156
   2d8a0:	0004bb46 	.word	0x0004bb46
   2d8a4:	0004bcf2 	.word	0x0004bcf2
   2d8a8:	0004e7b6 	.word	0x0004e7b6
   2d8ac:	0004bd5a 	.word	0x0004bd5a
   2d8b0:	0004eb07 	.word	0x0004eb07
   2d8b4:	0004bd61 	.word	0x0004bd61
   2d8b8:	0004bc46 	.word	0x0004bc46
   2d8bc:	0004bc61 	.word	0x0004bc61
   2d8c0:	0004852a 	.word	0x0004852a
   2d8c4:	0004bd67 	.word	0x0004bd67
   2d8c8:	0004bd6e 	.word	0x0004bd6e
   2d8cc:	0004bd7c 	.word	0x0004bd7c
   2d8d0:	0004bd80 	.word	0x0004bd80

0002d8d4 <nrf_cloud_decode_data_endpoint>:
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   2d8d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2d8d8:	4688      	mov	r8, r1
   2d8da:	4617      	mov	r7, r2
   2d8dc:	4699      	mov	r9, r3
	__ASSERT_NO_MSG(input != NULL);
   2d8de:	4604      	mov	r4, r0
   2d8e0:	b958      	cbnz	r0, 2d8fa <nrf_cloud_decode_data_endpoint+0x26>
   2d8e2:	4950      	ldr	r1, [pc, #320]	; (2da24 <nrf_cloud_decode_data_endpoint+0x150>)
   2d8e4:	4850      	ldr	r0, [pc, #320]	; (2da28 <nrf_cloud_decode_data_endpoint+0x154>)
   2d8e6:	f240 13cb 	movw	r3, #459	; 0x1cb
   2d8ea:	4a50      	ldr	r2, [pc, #320]	; (2da2c <nrf_cloud_decode_data_endpoint+0x158>)
   2d8ec:	f013 fd6a 	bl	413c4 <printk>
   2d8f0:	f240 11cb 	movw	r1, #459	; 0x1cb
   2d8f4:	484d      	ldr	r0, [pc, #308]	; (2da2c <nrf_cloud_decode_data_endpoint+0x158>)
   2d8f6:	f013 ff82 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2d8fa:	6863      	ldr	r3, [r4, #4]
   2d8fc:	b95b      	cbnz	r3, 2d916 <nrf_cloud_decode_data_endpoint+0x42>
   2d8fe:	494c      	ldr	r1, [pc, #304]	; (2da30 <nrf_cloud_decode_data_endpoint+0x15c>)
   2d900:	4849      	ldr	r0, [pc, #292]	; (2da28 <nrf_cloud_decode_data_endpoint+0x154>)
   2d902:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   2d906:	4a49      	ldr	r2, [pc, #292]	; (2da2c <nrf_cloud_decode_data_endpoint+0x158>)
   2d908:	f013 fd5c 	bl	413c4 <printk>
   2d90c:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   2d910:	4846      	ldr	r0, [pc, #280]	; (2da2c <nrf_cloud_decode_data_endpoint+0x158>)
   2d912:	f013 ff74 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2d916:	6823      	ldr	r3, [r4, #0]
   2d918:	b95b      	cbnz	r3, 2d932 <nrf_cloud_decode_data_endpoint+0x5e>
   2d91a:	4946      	ldr	r1, [pc, #280]	; (2da34 <nrf_cloud_decode_data_endpoint+0x160>)
   2d91c:	4842      	ldr	r0, [pc, #264]	; (2da28 <nrf_cloud_decode_data_endpoint+0x154>)
   2d91e:	f240 13cd 	movw	r3, #461	; 0x1cd
   2d922:	4a42      	ldr	r2, [pc, #264]	; (2da2c <nrf_cloud_decode_data_endpoint+0x158>)
   2d924:	f013 fd4e 	bl	413c4 <printk>
   2d928:	f240 11cd 	movw	r1, #461	; 0x1cd
   2d92c:	483f      	ldr	r0, [pc, #252]	; (2da2c <nrf_cloud_decode_data_endpoint+0x158>)
   2d92e:	f013 ff66 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   2d932:	f1b8 0f00 	cmp.w	r8, #0
   2d936:	d10b      	bne.n	2d950 <nrf_cloud_decode_data_endpoint+0x7c>
   2d938:	493f      	ldr	r1, [pc, #252]	; (2da38 <nrf_cloud_decode_data_endpoint+0x164>)
   2d93a:	483b      	ldr	r0, [pc, #236]	; (2da28 <nrf_cloud_decode_data_endpoint+0x154>)
   2d93c:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   2d940:	4a3a      	ldr	r2, [pc, #232]	; (2da2c <nrf_cloud_decode_data_endpoint+0x158>)
   2d942:	f013 fd3f 	bl	413c4 <printk>
   2d946:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   2d94a:	4838      	ldr	r0, [pc, #224]	; (2da2c <nrf_cloud_decode_data_endpoint+0x158>)
   2d94c:	f013 ff57 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   2d950:	b95f      	cbnz	r7, 2d96a <nrf_cloud_decode_data_endpoint+0x96>
   2d952:	493a      	ldr	r1, [pc, #232]	; (2da3c <nrf_cloud_decode_data_endpoint+0x168>)
   2d954:	4834      	ldr	r0, [pc, #208]	; (2da28 <nrf_cloud_decode_data_endpoint+0x154>)
   2d956:	f240 13cf 	movw	r3, #463	; 0x1cf
   2d95a:	4a34      	ldr	r2, [pc, #208]	; (2da2c <nrf_cloud_decode_data_endpoint+0x158>)
   2d95c:	f013 fd32 	bl	413c4 <printk>
   2d960:	f240 11cf 	movw	r1, #463	; 0x1cf
   2d964:	4831      	ldr	r0, [pc, #196]	; (2da2c <nrf_cloud_decode_data_endpoint+0x158>)
   2d966:	f013 ff4a 	bl	417fe <assert_post_action>

	int err;
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *desired_obj = NULL;
   2d96a:	2300      	movs	r3, #0

	root_obj = cJSON_Parse(input->ptr);
   2d96c:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   2d96e:	9301      	str	r3, [sp, #4]
	root_obj = cJSON_Parse(input->ptr);
   2d970:	f016 f827 	bl	439c2 <cJSON_Parse>
	if (root_obj == NULL) {
   2d974:	4605      	mov	r5, r0
   2d976:	b318      	cbz	r0, 2d9c0 <nrf_cloud_decode_data_endpoint+0xec>
		return -ENOENT;
	}

	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2d978:	a901      	add	r1, sp, #4
   2d97a:	f7ff fd43 	bl	2d404 <nrf_cloud_decode_desired_obj>

	if (m_endpoint != NULL) {
   2d97e:	f1b9 0f00 	cmp.w	r9, #0
   2d982:	d020      	beq.n	2d9c6 <nrf_cloud_decode_data_endpoint+0xf2>
		m_endpoint_obj = json_object_decode(
   2d984:	492e      	ldr	r1, [pc, #184]	; (2da40 <nrf_cloud_decode_data_endpoint+0x16c>)
   2d986:	9801      	ldr	r0, [sp, #4]
   2d988:	f016 fe1a 	bl	445c0 <json_object_decode>
   2d98c:	4604      	mov	r4, r0
			desired_obj, "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   2d98e:	492d      	ldr	r1, [pc, #180]	; (2da44 <nrf_cloud_decode_data_endpoint+0x170>)
   2d990:	9801      	ldr	r0, [sp, #4]
   2d992:	f016 fe15 	bl	445c0 <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2d996:	492c      	ldr	r1, [pc, #176]	; (2da48 <nrf_cloud_decode_data_endpoint+0x174>)
	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   2d998:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2d99a:	f016 fe11 	bl	445c0 <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   2d99e:	492b      	ldr	r1, [pc, #172]	; (2da4c <nrf_cloud_decode_data_endpoint+0x178>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2d9a0:	4682      	mov	sl, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   2d9a2:	4630      	mov	r0, r6
   2d9a4:	f016 fe0c 	bl	445c0 <json_object_decode>
   2d9a8:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   2d9aa:	f1ba 0f00 	cmp.w	sl, #0
   2d9ae:	d004      	beq.n	2d9ba <nrf_cloud_decode_data_endpoint+0xe6>
   2d9b0:	b118      	cbz	r0, 2d9ba <nrf_cloud_decode_data_endpoint+0xe6>
   2d9b2:	f8da 300c 	ldr.w	r3, [sl, #12]
   2d9b6:	2b10      	cmp	r3, #16
   2d9b8:	d007      	beq.n	2d9ca <nrf_cloud_decode_data_endpoint+0xf6>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   2d9ba:	4628      	mov	r0, r5
   2d9bc:	f7fb fbcc 	bl	29158 <cJSON_Delete>
		return -ENOENT;
   2d9c0:	f06f 0401 	mvn.w	r4, #1
   2d9c4:	e017      	b.n	2d9f6 <nrf_cloud_decode_data_endpoint+0x122>
	cJSON *m_endpoint_obj = NULL;
   2d9c6:	464c      	mov	r4, r9
   2d9c8:	e7e1      	b.n	2d98e <nrf_cloud_decode_data_endpoint+0xba>
	return !strncmp(s1, s2, strlen(s2));
   2d9ca:	4821      	ldr	r0, [pc, #132]	; (2da50 <nrf_cloud_decode_data_endpoint+0x17c>)
	const char *state_str = pairing_state_obj->valuestring;
   2d9cc:	f8da a010 	ldr.w	sl, [sl, #16]
	return !strncmp(s1, s2, strlen(s2));
   2d9d0:	f7ef fc44 	bl	1d25c <strlen>
   2d9d4:	491e      	ldr	r1, [pc, #120]	; (2da50 <nrf_cloud_decode_data_endpoint+0x17c>)
   2d9d6:	4602      	mov	r2, r0
   2d9d8:	4650      	mov	r0, sl
   2d9da:	f017 fb84 	bl	450e6 <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   2d9de:	2800      	cmp	r0, #0
   2d9e0:	d1eb      	bne.n	2d9ba <nrf_cloud_decode_data_endpoint+0xe6>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   2d9e2:	b164      	cbz	r4, 2d9fe <nrf_cloud_decode_data_endpoint+0x12a>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   2d9e4:	4620      	mov	r0, r4
   2d9e6:	4649      	mov	r1, r9
   2d9e8:	f016 fdff 	bl	445ea <json_decode_and_alloc>
		if (err) {
   2d9ec:	4604      	mov	r4, r0
   2d9ee:	b130      	cbz	r0, 2d9fe <nrf_cloud_decode_data_endpoint+0x12a>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   2d9f0:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   2d9f2:	f7fb fbb1 	bl	29158 <cJSON_Delete>

	return err;
}
   2d9f6:	4620      	mov	r0, r4
   2d9f8:	b002      	add	sp, #8
   2d9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   2d9fe:	4915      	ldr	r1, [pc, #84]	; (2da54 <nrf_cloud_decode_data_endpoint+0x180>)
   2da00:	4630      	mov	r0, r6
   2da02:	f016 fddd 	bl	445c0 <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   2da06:	4641      	mov	r1, r8
   2da08:	f016 fdef 	bl	445ea <json_decode_and_alloc>
	if (err) {
   2da0c:	4604      	mov	r4, r0
   2da0e:	2800      	cmp	r0, #0
   2da10:	d1ee      	bne.n	2d9f0 <nrf_cloud_decode_data_endpoint+0x11c>
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   2da12:	4911      	ldr	r1, [pc, #68]	; (2da58 <nrf_cloud_decode_data_endpoint+0x184>)
   2da14:	4630      	mov	r0, r6
   2da16:	f016 fdd3 	bl	445c0 <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   2da1a:	4639      	mov	r1, r7
   2da1c:	f016 fde5 	bl	445ea <json_decode_and_alloc>
	if (err) {
   2da20:	4604      	mov	r4, r0
   2da22:	e7e5      	b.n	2d9f0 <nrf_cloud_decode_data_endpoint+0x11c>
   2da24:	0004bbf0 	.word	0x0004bbf0
   2da28:	00048156 	.word	0x00048156
   2da2c:	0004bb46 	.word	0x0004bb46
   2da30:	0004bc05 	.word	0x0004bc05
   2da34:	0004bc1f 	.word	0x0004bc1f
   2da38:	0004bd84 	.word	0x0004bd84
   2da3c:	0004bd9f 	.word	0x0004bd9f
   2da40:	0004bc46 	.word	0x0004bc46
   2da44:	0004bc61 	.word	0x0004bc61
   2da48:	0004e7b6 	.word	0x0004e7b6
   2da4c:	0004bd5a 	.word	0x0004bd5a
   2da50:	0004bd67 	.word	0x0004bd67
   2da54:	0004bd7c 	.word	0x0004bd7c
   2da58:	0004bd80 	.word	0x0004bd80

0002da5c <state_ua_pin_wait>:

	return err;
}

static int state_ua_pin_wait(void)
{
   2da5c:	b510      	push	{r4, lr}
   2da5e:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct nct_cc_data msg = {
   2da60:	2218      	movs	r2, #24
   2da62:	2100      	movs	r1, #0
   2da64:	4668      	mov	r0, sp
   2da66:	f017 f95e 	bl	44d26 <memset>
   2da6a:	2301      	movs	r3, #1
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.id = DEFAULT_REPORT_ID,
	};

	/* Publish report to the cloud on current status. */
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2da6c:	4669      	mov	r1, sp
   2da6e:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   2da70:	9304      	str	r3, [sp, #16]
   2da72:	f88d 3014 	strb.w	r3, [sp, #20]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2da76:	f7ff fe51 	bl	2d71c <nrf_cloud_encode_state>
	if (err) {
   2da7a:	4604      	mov	r4, r0
   2da7c:	b168      	cbz	r0, 2da9a <state_ua_pin_wait+0x3e>
   2da7e:	4819      	ldr	r0, [pc, #100]	; (2dae4 <state_ua_pin_wait+0x88>)
   2da80:	4b19      	ldr	r3, [pc, #100]	; (2dae8 <state_ua_pin_wait+0x8c>)
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2da82:	4622      	mov	r2, r4
   2da84:	1ac0      	subs	r0, r0, r3
   2da86:	08c0      	lsrs	r0, r0, #3
   2da88:	0180      	lsls	r0, r0, #6
   2da8a:	4918      	ldr	r1, [pc, #96]	; (2daec <state_ua_pin_wait+0x90>)
   2da8c:	f040 0001 	orr.w	r0, r0, #1
   2da90:	f013 fec6 	bl	41820 <log_string_sync>
	};

	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);

	return 0;
}
   2da94:	4620      	mov	r0, r4
   2da96:	b00c      	add	sp, #48	; 0x30
   2da98:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   2da9a:	4668      	mov	r0, sp
   2da9c:	f000 ffd0 	bl	2ea40 <nct_cc_send>
	if (err) {
   2daa0:	4604      	mov	r4, r0
   2daa2:	b170      	cbz	r0, 2dac2 <state_ua_pin_wait+0x66>
   2daa4:	4b10      	ldr	r3, [pc, #64]	; (2dae8 <state_ua_pin_wait+0x8c>)
   2daa6:	480f      	ldr	r0, [pc, #60]	; (2dae4 <state_ua_pin_wait+0x88>)
		LOG_ERR("nct_cc_send failed %d", err);
   2daa8:	4622      	mov	r2, r4
   2daaa:	1ac0      	subs	r0, r0, r3
   2daac:	08c0      	lsrs	r0, r0, #3
   2daae:	0180      	lsls	r0, r0, #6
   2dab0:	490f      	ldr	r1, [pc, #60]	; (2daf0 <state_ua_pin_wait+0x94>)
   2dab2:	f040 0001 	orr.w	r0, r0, #1
   2dab6:	f013 feb3 	bl	41820 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   2daba:	9801      	ldr	r0, [sp, #4]
   2dabc:	f017 f8d6 	bl	44c6c <k_free>
		return err;
   2dac0:	e7e8      	b.n	2da94 <state_ua_pin_wait+0x38>
	nrf_cloud_free((void *)msg.data.ptr);
   2dac2:	9801      	ldr	r0, [sp, #4]
   2dac4:	f017 f8d2 	bl	44c6c <k_free>
	struct nrf_cloud_evt evt = {
   2dac8:	2218      	movs	r2, #24
   2daca:	4621      	mov	r1, r4
   2dacc:	eb0d 0002 	add.w	r0, sp, r2
   2dad0:	f017 f929 	bl	44d26 <memset>
   2dad4:	2302      	movs	r3, #2
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2dad6:	2006      	movs	r0, #6
   2dad8:	a906      	add	r1, sp, #24
	struct nrf_cloud_evt evt = {
   2dada:	f88d 3018 	strb.w	r3, [sp, #24]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2dade:	f7ff faeb 	bl	2d0b8 <nfsm_set_current_state_and_notify>
	return 0;
   2dae2:	e7d7      	b.n	2da94 <state_ua_pin_wait+0x38>
   2dae4:	000464bc 	.word	0x000464bc
   2dae8:	000463bc 	.word	0x000463bc
   2daec:	0004bdca 	.word	0x0004bdca
   2daf0:	0004bdeb 	.word	0x0004bdeb

0002daf4 <cc_connection_handler>:

	return 0;
}

static int cc_connection_handler(const struct nct_evt *nct_evt)
{
   2daf4:	b510      	push	{r4, lr}
   2daf6:	4604      	mov	r4, r0
   2daf8:	b086      	sub	sp, #24
		.opcode = NCT_CC_OPCODE_GET_REQ,
		.id = CLOUD_STATE_REQ_ID,
	};

	int err;
	const struct nrf_cloud_evt evt = {
   2dafa:	2100      	movs	r1, #0
   2dafc:	2218      	movs	r2, #24
   2dafe:	4668      	mov	r0, sp
   2db00:	f017 f911 	bl	44d26 <memset>
   2db04:	23ff      	movs	r3, #255	; 0xff
		.type = NRF_CLOUD_EVT_ERROR,
	};

	if (nct_evt->status != 0) {
   2db06:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   2db08:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   2db0c:	b139      	cbz	r1, 2db1e <cc_connection_handler+0x2a>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   2db0e:	4669      	mov	r1, sp
   2db10:	200c      	movs	r0, #12
   2db12:	f7ff fad1 	bl	2d0b8 <nfsm_set_current_state_and_notify>
		return 0;
   2db16:	2400      	movs	r4, #0
	}

	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);

	return 0;
}
   2db18:	4620      	mov	r0, r4
   2db1a:	b006      	add	sp, #24
   2db1c:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   2db1e:	2004      	movs	r0, #4
   2db20:	f7ff faca 	bl	2d0b8 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   2db24:	4806      	ldr	r0, [pc, #24]	; (2db40 <cc_connection_handler+0x4c>)
   2db26:	f000 ff8b 	bl	2ea40 <nct_cc_send>
	if (err) {
   2db2a:	4604      	mov	r4, r0
   2db2c:	b120      	cbz	r0, 2db38 <cc_connection_handler+0x44>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2db2e:	4669      	mov	r1, sp
   2db30:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2db32:	f7ff fac1 	bl	2d0b8 <nfsm_set_current_state_and_notify>
	return 0;
   2db36:	e7ef      	b.n	2db18 <cc_connection_handler+0x24>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2db38:	4601      	mov	r1, r0
   2db3a:	2005      	movs	r0, #5
   2db3c:	e7f9      	b.n	2db32 <cc_connection_handler+0x3e>
   2db3e:	bf00      	nop
   2db40:	00046db8 	.word	0x00046db8

0002db44 <cc_rx_data_handler>:

	return state_ua_pin_complete();
}

static int cc_rx_data_handler(const struct nct_evt *nct_evt)
{
   2db44:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	enum nfsm_state new_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
	bool config_found = false;
   2db46:	2700      	movs	r7, #0
{
   2db48:	b095      	sub	sp, #84	; 0x54
   2db4a:	4606      	mov	r6, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   2db4c:	6844      	ldr	r4, [r0, #4]
	bool config_found = false;
   2db4e:	f88d 7007 	strb.w	r7, [sp, #7]
	const enum nfsm_state current_state = nfsm_get_current_state();
   2db52:	f7ff faab 	bl	2d0ac <nfsm_get_current_state>
	struct nct_cc_data msg = {
   2db56:	2218      	movs	r2, #24
   2db58:	4639      	mov	r1, r7
	const enum nfsm_state current_state = nfsm_get_current_state();
   2db5a:	4605      	mov	r5, r0
	struct nct_cc_data msg = {
   2db5c:	a808      	add	r0, sp, #32
   2db5e:	f017 f8e2 	bl	44d26 <memset>
   2db62:	2301      	movs	r3, #1
	struct nrf_cloud_evt cloud_evt = {
   2db64:	2218      	movs	r2, #24
   2db66:	4639      	mov	r1, r7
   2db68:	a80e      	add	r0, sp, #56	; 0x38
	struct nct_cc_data msg = {
   2db6a:	930c      	str	r3, [sp, #48]	; 0x30
   2db6c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	struct nrf_cloud_evt cloud_evt = {
   2db70:	f017 f8d9 	bl	44d26 <memset>
   2db74:	2306      	movs	r3, #6
	if (evt->param.cc == NULL) {
   2db76:	6870      	ldr	r0, [r6, #4]
	struct nrf_cloud_evt cloud_evt = {
   2db78:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (evt->param.cc == NULL) {
   2db7c:	b190      	cbz	r0, 2dba4 <cc_rx_data_handler+0x60>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   2db7e:	f10d 0207 	add.w	r2, sp, #7
   2db82:	a908      	add	r1, sp, #32
   2db84:	f7ff fd16 	bl	2d5b4 <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   2db88:	b328      	cbz	r0, 2dbd6 <cc_rx_data_handler+0x92>
   2db8a:	1cc3      	adds	r3, r0, #3
   2db8c:	d023      	beq.n	2dbd6 <cc_rx_data_handler+0x92>
   2db8e:	4a5f      	ldr	r2, [pc, #380]	; (2dd0c <cc_rx_data_handler+0x1c8>)
   2db90:	4b5f      	ldr	r3, [pc, #380]	; (2dd10 <cc_rx_data_handler+0x1cc>)
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   2db92:	4960      	ldr	r1, [pc, #384]	; (2dd14 <cc_rx_data_handler+0x1d0>)
   2db94:	1a9b      	subs	r3, r3, r2
   2db96:	08db      	lsrs	r3, r3, #3
   2db98:	019b      	lsls	r3, r3, #6
   2db9a:	4602      	mov	r2, r0
   2db9c:	f043 0001 	orr.w	r0, r3, #1
   2dba0:	f013 fe3e 	bl	41820 <log_string_sync>

	handle_device_config_update(nct_evt, &config_found);

	err = nrf_cloud_decode_requested_state(payload, &new_state);
   2dba4:	4620      	mov	r0, r4
   2dba6:	f10d 0106 	add.w	r1, sp, #6
   2dbaa:	f7ff fc3d 	bl	2d428 <nrf_cloud_decode_requested_state>

	if (err) {
   2dbae:	4604      	mov	r4, r0
   2dbb0:	2800      	cmp	r0, #0
   2dbb2:	d03a      	beq.n	2dc2a <cc_rx_data_handler+0xe6>
		if (!config_found) {
   2dbb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2dbb8:	2b00      	cmp	r3, #0
   2dbba:	f040 80a4 	bne.w	2dd06 <cc_rx_data_handler+0x1c2>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   2dbbe:	4622      	mov	r2, r4
   2dbc0:	4853      	ldr	r0, [pc, #332]	; (2dd10 <cc_rx_data_handler+0x1cc>)
   2dbc2:	4b52      	ldr	r3, [pc, #328]	; (2dd0c <cc_rx_data_handler+0x1c8>)
   2dbc4:	4954      	ldr	r1, [pc, #336]	; (2dd18 <cc_rx_data_handler+0x1d4>)
   2dbc6:	1ac0      	subs	r0, r0, r3
   2dbc8:	08c0      	lsrs	r0, r0, #3
   2dbca:	0180      	lsls	r0, r0, #6
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2dbcc:	f040 0001 	orr.w	r0, r0, #1
   2dbd0:	f013 fe26 	bl	41820 <log_string_sync>
		return err;
   2dbd4:	e045      	b.n	2dc62 <cc_rx_data_handler+0x11e>
	if (*config_found == false) {
   2dbd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2dbda:	2b00      	cmp	r3, #0
   2dbdc:	d0e2      	beq.n	2dba4 <cc_rx_data_handler+0x60>
	if (msg.data.ptr) {
   2dbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2dbe0:	b193      	cbz	r3, 2dc08 <cc_rx_data_handler+0xc4>
		err = nct_cc_send(&msg);
   2dbe2:	a808      	add	r0, sp, #32
   2dbe4:	f000 ff2c 	bl	2ea40 <nct_cc_send>
   2dbe8:	4607      	mov	r7, r0
		nrf_cloud_free((void *)msg.data.ptr);
   2dbea:	9809      	ldr	r0, [sp, #36]	; 0x24
   2dbec:	f017 f83e 	bl	44c6c <k_free>
		if (err) {
   2dbf0:	b157      	cbz	r7, 2dc08 <cc_rx_data_handler+0xc4>
   2dbf2:	4846      	ldr	r0, [pc, #280]	; (2dd0c <cc_rx_data_handler+0x1c8>)
   2dbf4:	4b46      	ldr	r3, [pc, #280]	; (2dd10 <cc_rx_data_handler+0x1cc>)
			LOG_ERR("nct_cc_send failed %d", err);
   2dbf6:	463a      	mov	r2, r7
   2dbf8:	1a1b      	subs	r3, r3, r0
   2dbfa:	08db      	lsrs	r3, r3, #3
   2dbfc:	019b      	lsls	r3, r3, #6
   2dbfe:	4947      	ldr	r1, [pc, #284]	; (2dd1c <cc_rx_data_handler+0x1d8>)
   2dc00:	f043 0001 	orr.w	r0, r3, #1
   2dc04:	f013 fe0c 	bl	41820 <log_string_sync>
	cloud_evt.data = evt->param.cc->data;
   2dc08:	6873      	ldr	r3, [r6, #4]
   2dc0a:	aa10      	add	r2, sp, #64	; 0x40
   2dc0c:	e893 0003 	ldmia.w	r3, {r0, r1}
   2dc10:	e882 0003 	stmia.w	r2, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   2dc14:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2dc18:	ab14      	add	r3, sp, #80	; 0x50
   2dc1a:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2dc1e:	f7ff fa45 	bl	2d0ac <nfsm_get_current_state>
   2dc22:	a90e      	add	r1, sp, #56	; 0x38
   2dc24:	f7ff fa48 	bl	2d0b8 <nfsm_set_current_state_and_notify>
	return err;
   2dc28:	e7bc      	b.n	2dba4 <cc_rx_data_handler+0x60>

		/* Config only, nothing else to do */
		return 0;
	}

	switch (current_state) {
   2dc2a:	2d07      	cmp	r5, #7
   2dc2c:	d815      	bhi.n	2dc5a <cc_rx_data_handler+0x116>
   2dc2e:	2d03      	cmp	r5, #3
   2dc30:	d917      	bls.n	2dc62 <cc_rx_data_handler+0x11e>
	case STATE_CC_CONNECTED:
	case STATE_CLOUD_STATE_REQUESTED:
	case STATE_UA_PIN_WAIT:
	case STATE_UA_PIN_COMPLETE:
		if (new_state == STATE_UA_PIN_COMPLETE) {
   2dc32:	f89d 5006 	ldrb.w	r5, [sp, #6]
   2dc36:	2d07      	cmp	r5, #7
   2dc38:	d158      	bne.n	2dcec <cc_rx_data_handler+0x1a8>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &endpoint);
   2dc3a:	6870      	ldr	r0, [r6, #4]
   2dc3c:	ab06      	add	r3, sp, #24
   2dc3e:	aa02      	add	r2, sp, #8
   2dc40:	a904      	add	r1, sp, #16
   2dc42:	f7ff fe47 	bl	2d8d4 <nrf_cloud_decode_data_endpoint>
	if (err) {
   2dc46:	4604      	mov	r4, r0
   2dc48:	b170      	cbz	r0, 2dc68 <cc_rx_data_handler+0x124>
   2dc4a:	4831      	ldr	r0, [pc, #196]	; (2dd10 <cc_rx_data_handler+0x1cc>)
   2dc4c:	4b2f      	ldr	r3, [pc, #188]	; (2dd0c <cc_rx_data_handler+0x1c8>)
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2dc4e:	4622      	mov	r2, r4
   2dc50:	1ac0      	subs	r0, r0, r3
   2dc52:	08c0      	lsrs	r0, r0, #3
   2dc54:	4932      	ldr	r1, [pc, #200]	; (2dd20 <cc_rx_data_handler+0x1dc>)
   2dc56:	0180      	lsls	r0, r0, #6
   2dc58:	e7b8      	b.n	2dbcc <cc_rx_data_handler+0x88>
	switch (current_state) {
   2dc5a:	3d08      	subs	r5, #8
   2dc5c:	b2ed      	uxtb	r5, r5
   2dc5e:	2d01      	cmp	r5, #1
   2dc60:	d94a      	bls.n	2dcf8 <cc_rx_data_handler+0x1b4>
	default:
		break;
	}

	return 0;
}
   2dc62:	4620      	mov	r0, r4
   2dc64:	b015      	add	sp, #84	; 0x54
   2dc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nct_dc_endpoint_set(&tx, &rx, &endpoint);
   2dc68:	aa06      	add	r2, sp, #24
   2dc6a:	a902      	add	r1, sp, #8
   2dc6c:	a804      	add	r0, sp, #16
   2dc6e:	f000 ff51 	bl	2eb14 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   2dc72:	4621      	mov	r1, r4
   2dc74:	2218      	movs	r2, #24
   2dc76:	a808      	add	r0, sp, #32
   2dc78:	f017 f855 	bl	44d26 <memset>
   2dc7c:	f641 63d2 	movw	r3, #7890	; 0x1ed2
   2dc80:	930c      	str	r3, [sp, #48]	; 0x30
   2dc82:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2dc84:	4628      	mov	r0, r5
   2dc86:	a908      	add	r1, sp, #32
	struct nct_cc_data msg = {
   2dc88:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2dc8c:	f7ff fd46 	bl	2d71c <nrf_cloud_encode_state>
	if (err) {
   2dc90:	4604      	mov	r4, r0
   2dc92:	b138      	cbz	r0, 2dca4 <cc_rx_data_handler+0x160>
   2dc94:	481e      	ldr	r0, [pc, #120]	; (2dd10 <cc_rx_data_handler+0x1cc>)
   2dc96:	4b1d      	ldr	r3, [pc, #116]	; (2dd0c <cc_rx_data_handler+0x1c8>)
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2dc98:	4622      	mov	r2, r4
   2dc9a:	1ac0      	subs	r0, r0, r3
   2dc9c:	08c0      	lsrs	r0, r0, #3
   2dc9e:	4921      	ldr	r1, [pc, #132]	; (2dd24 <cc_rx_data_handler+0x1e0>)
   2dca0:	0180      	lsls	r0, r0, #6
   2dca2:	e793      	b.n	2dbcc <cc_rx_data_handler+0x88>
	err = nct_cc_send(&msg);
   2dca4:	a808      	add	r0, sp, #32
   2dca6:	f000 fecb 	bl	2ea40 <nct_cc_send>
	if (err) {
   2dcaa:	4604      	mov	r4, r0
   2dcac:	b170      	cbz	r0, 2dccc <cc_rx_data_handler+0x188>
   2dcae:	4b17      	ldr	r3, [pc, #92]	; (2dd0c <cc_rx_data_handler+0x1c8>)
   2dcb0:	4817      	ldr	r0, [pc, #92]	; (2dd10 <cc_rx_data_handler+0x1cc>)
		LOG_ERR("nct_cc_send failed %d", err);
   2dcb2:	4622      	mov	r2, r4
   2dcb4:	1ac0      	subs	r0, r0, r3
   2dcb6:	08c0      	lsrs	r0, r0, #3
   2dcb8:	0180      	lsls	r0, r0, #6
   2dcba:	4918      	ldr	r1, [pc, #96]	; (2dd1c <cc_rx_data_handler+0x1d8>)
   2dcbc:	f040 0001 	orr.w	r0, r0, #1
   2dcc0:	f013 fdae 	bl	41820 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   2dcc4:	9809      	ldr	r0, [sp, #36]	; 0x24
   2dcc6:	f016 ffd1 	bl	44c6c <k_free>
		return err;
   2dcca:	e7ca      	b.n	2dc62 <cc_rx_data_handler+0x11e>
	nrf_cloud_free((void *)msg.data.ptr);
   2dccc:	9809      	ldr	r0, [sp, #36]	; 0x24
   2dcce:	f016 ffcd 	bl	44c6c <k_free>
	struct nrf_cloud_evt evt = {
   2dcd2:	4621      	mov	r1, r4
   2dcd4:	2218      	movs	r2, #24
   2dcd6:	a80e      	add	r0, sp, #56	; 0x38
   2dcd8:	f017 f825 	bl	44d26 <memset>
   2dcdc:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2dcde:	4628      	mov	r0, r5
   2dce0:	a90e      	add	r1, sp, #56	; 0x38
	struct nrf_cloud_evt evt = {
   2dce2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2dce6:	f7ff f9e7 	bl	2d0b8 <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   2dcea:	e7ba      	b.n	2dc62 <cc_rx_data_handler+0x11e>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   2dcec:	2d06      	cmp	r5, #6
   2dcee:	d1b8      	bne.n	2dc62 <cc_rx_data_handler+0x11e>
			return state_ua_pin_wait();
   2dcf0:	f7ff feb4 	bl	2da5c <state_ua_pin_wait>
   2dcf4:	4604      	mov	r4, r0
   2dcf6:	e7b4      	b.n	2dc62 <cc_rx_data_handler+0x11e>
		if (new_state == STATE_UA_PIN_WAIT) {
   2dcf8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2dcfc:	2b06      	cmp	r3, #6
   2dcfe:	d1b0      	bne.n	2dc62 <cc_rx_data_handler+0x11e>
			(void)nct_dc_disconnect();
   2dd00:	f000 ffd8 	bl	2ecb4 <nct_dc_disconnect>
   2dd04:	e7f4      	b.n	2dcf0 <cc_rx_data_handler+0x1ac>
		return 0;
   2dd06:	2400      	movs	r4, #0
   2dd08:	e7ab      	b.n	2dc62 <cc_rx_data_handler+0x11e>
   2dd0a:	bf00      	nop
   2dd0c:	000463bc 	.word	0x000463bc
   2dd10:	000464bc 	.word	0x000464bc
   2dd14:	0004be01 	.word	0x0004be01
   2dd18:	0004be2c 	.word	0x0004be2c
   2dd1c:	0004bdeb 	.word	0x0004bdeb
   2dd20:	0004be57 	.word	0x0004be57
   2dd24:	0004bdca 	.word	0x0004bdca

0002dd28 <nfsm_init>:
	persistent_session = false;
   2dd28:	2000      	movs	r0, #0
   2dd2a:	4b01      	ldr	r3, [pc, #4]	; (2dd30 <nfsm_init+0x8>)
   2dd2c:	7018      	strb	r0, [r3, #0]
}
   2dd2e:	4770      	bx	lr
   2dd30:	2002cc38 	.word	0x2002cc38

0002dd34 <nfsm_handle_incoming_event>:
{
   2dd34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2dd38:	460e      	mov	r6, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   2dd3a:	4607      	mov	r7, r0
   2dd3c:	b130      	cbz	r0, 2dd4c <nfsm_handle_incoming_event+0x18>
   2dd3e:	f890 8008 	ldrb.w	r8, [r0, #8]
   2dd42:	f1b8 0f09 	cmp.w	r8, #9
   2dd46:	d801      	bhi.n	2dd4c <nfsm_handle_incoming_event+0x18>
   2dd48:	290c      	cmp	r1, #12
   2dd4a:	d90f      	bls.n	2dd6c <nfsm_handle_incoming_event+0x38>
		__ASSERT_NO_MSG(false);
   2dd4c:	2387      	movs	r3, #135	; 0x87
   2dd4e:	4a1b      	ldr	r2, [pc, #108]	; (2ddbc <nfsm_handle_incoming_event+0x88>)
   2dd50:	491b      	ldr	r1, [pc, #108]	; (2ddc0 <nfsm_handle_incoming_event+0x8c>)
   2dd52:	481c      	ldr	r0, [pc, #112]	; (2ddc4 <nfsm_handle_incoming_event+0x90>)
   2dd54:	f013 fb36 	bl	413c4 <printk>
   2dd58:	2187      	movs	r1, #135	; 0x87
   2dd5a:	4818      	ldr	r0, [pc, #96]	; (2ddbc <nfsm_handle_incoming_event+0x88>)
   2dd5c:	f013 fd4f 	bl	417fe <assert_post_action>
   2dd60:	f06f 0415 	mvn.w	r4, #21
}
   2dd64:	4620      	mov	r0, r4
   2dd66:	b002      	add	sp, #8
   2dd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   2dd6c:	4b16      	ldr	r3, [pc, #88]	; (2ddc8 <nfsm_handle_incoming_event+0x94>)
   2dd6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2dd72:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
   2dd76:	b184      	cbz	r4, 2dd9a <nfsm_handle_incoming_event+0x66>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   2dd78:	47a0      	blx	r4
		if (err) {
   2dd7a:	4604      	mov	r4, r0
   2dd7c:	2800      	cmp	r0, #0
   2dd7e:	d0f1      	beq.n	2dd64 <nfsm_handle_incoming_event+0x30>
   2dd80:	4812      	ldr	r0, [pc, #72]	; (2ddcc <nfsm_handle_incoming_event+0x98>)
   2dd82:	4d13      	ldr	r5, [pc, #76]	; (2ddd0 <nfsm_handle_incoming_event+0x9c>)
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   2dd84:	4632      	mov	r2, r6
   2dd86:	1a2d      	subs	r5, r5, r0
   2dd88:	08ed      	lsrs	r5, r5, #3
   2dd8a:	01ad      	lsls	r5, r5, #6
   2dd8c:	7a3b      	ldrb	r3, [r7, #8]
   2dd8e:	4911      	ldr	r1, [pc, #68]	; (2ddd4 <nfsm_handle_incoming_event+0xa0>)
   2dd90:	f045 0001 	orr.w	r0, r5, #1
   2dd94:	f013 fd44 	bl	41820 <log_string_sync>
   2dd98:	e7e4      	b.n	2dd64 <nfsm_handle_incoming_event+0x30>
   2dd9a:	4b0c      	ldr	r3, [pc, #48]	; (2ddcc <nfsm_handle_incoming_event+0x98>)
   2dd9c:	4d0c      	ldr	r5, [pc, #48]	; (2ddd0 <nfsm_handle_incoming_event+0x9c>)
   2dd9e:	1aed      	subs	r5, r5, r3
	LOG_DBG("Dropping FSM transition %d, current state %d", nct_evt->type,
   2dda0:	f7ff f984 	bl	2d0ac <nfsm_get_current_state>
   2dda4:	08ed      	lsrs	r5, r5, #3
   2dda6:	01ad      	lsls	r5, r5, #6
   2dda8:	f045 0504 	orr.w	r5, r5, #4
   2ddac:	9000      	str	r0, [sp, #0]
   2ddae:	4643      	mov	r3, r8
   2ddb0:	4628      	mov	r0, r5
   2ddb2:	4a09      	ldr	r2, [pc, #36]	; (2ddd8 <nfsm_handle_incoming_event+0xa4>)
   2ddb4:	4909      	ldr	r1, [pc, #36]	; (2dddc <nfsm_handle_incoming_event+0xa8>)
   2ddb6:	f013 fd33 	bl	41820 <log_string_sync>
	return 0;
   2ddba:	e7d3      	b.n	2dd64 <nfsm_handle_incoming_event+0x30>
   2ddbc:	0004be80 	.word	0x0004be80
   2ddc0:	0004ef58 	.word	0x0004ef58
   2ddc4:	00048156 	.word	0x00048156
   2ddc8:	00046e20 	.word	0x00046e20
   2ddcc:	000463bc 	.word	0x000463bc
   2ddd0:	000464bc 	.word	0x000464bc
   2ddd4:	0004bebd 	.word	0x0004bebd
   2ddd8:	0004bf8c 	.word	0x0004bf8c
   2dddc:	0004bee1 	.word	0x0004bee1

0002dde0 <cc_tx_ack_handler>:

static int cc_tx_ack_handler(const struct nct_evt *nct_evt)
{
   2dde0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   2dde2:	f241 622e 	movw	r2, #5678	; 0x162e
   2dde6:	6843      	ldr	r3, [r0, #4]
   2dde8:	4293      	cmp	r3, r2
   2ddea:	d105      	bne.n	2ddf8 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   2ddec:	2100      	movs	r1, #0
   2ddee:	2005      	movs	r0, #5
   2ddf0:	f7ff f962 	bl	2d0b8 <nfsm_set_current_state_and_notify>
				" skipping nct_dc_connect()");
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
		}
	}

	return 0;
   2ddf4:	2400      	movs	r4, #0
   2ddf6:	e00e      	b.n	2de16 <cc_tx_ack_handler+0x36>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   2ddf8:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   2ddfc:	4293      	cmp	r3, r2
   2ddfe:	d1f9      	bne.n	2ddf4 <cc_tx_ack_handler+0x14>
		if (!persistent_session) {
   2de00:	4b12      	ldr	r3, [pc, #72]	; (2de4c <cc_tx_ack_handler+0x6c>)
   2de02:	781b      	ldrb	r3, [r3, #0]
   2de04:	b953      	cbnz	r3, 2de1c <cc_tx_ack_handler+0x3c>
			err = nct_dc_connect();
   2de06:	f000 ff27 	bl	2ec58 <nct_dc_connect>
			if (err) {
   2de0a:	4604      	mov	r4, r0
   2de0c:	b918      	cbnz	r0, 2de16 <cc_tx_ack_handler+0x36>
			nfsm_set_current_state_and_notify(STATE_DC_CONNECTING,
   2de0e:	4601      	mov	r1, r0
   2de10:	2008      	movs	r0, #8
   2de12:	f7ff f951 	bl	2d0b8 <nfsm_set_current_state_and_notify>
}
   2de16:	4620      	mov	r0, r4
   2de18:	b004      	add	sp, #16
   2de1a:	bd10      	pop	{r4, pc}
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2de1c:	2400      	movs	r4, #0
   2de1e:	2302      	movs	r3, #2
   2de20:	9403      	str	r4, [sp, #12]
   2de22:	480b      	ldr	r0, [pc, #44]	; (2de50 <cc_tx_ack_handler+0x70>)
   2de24:	f88d 300c 	strb.w	r3, [sp, #12]
   2de28:	4b0a      	ldr	r3, [pc, #40]	; (2de54 <cc_tx_ack_handler+0x74>)
			LOG_DBG("Previous session valid;"
   2de2a:	4a0b      	ldr	r2, [pc, #44]	; (2de58 <cc_tx_ack_handler+0x78>)
   2de2c:	1ac0      	subs	r0, r0, r3
   2de2e:	08c0      	lsrs	r0, r0, #3
   2de30:	0180      	lsls	r0, r0, #6
   2de32:	490a      	ldr	r1, [pc, #40]	; (2de5c <cc_tx_ack_handler+0x7c>)
   2de34:	f040 0004 	orr.w	r0, r0, #4
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2de38:	e9cd 4401 	strd	r4, r4, [sp, #4]
			LOG_DBG("Previous session valid;"
   2de3c:	f013 fcf0 	bl	41820 <log_string_sync>
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   2de40:	2108      	movs	r1, #8
   2de42:	a801      	add	r0, sp, #4
   2de44:	f7ff ff76 	bl	2dd34 <nfsm_handle_incoming_event>
   2de48:	e7e5      	b.n	2de16 <cc_tx_ack_handler+0x36>
   2de4a:	bf00      	nop
   2de4c:	2002cc38 	.word	0x2002cc38
   2de50:	000464bc 	.word	0x000464bc
   2de54:	000463bc 	.word	0x000463bc
   2de58:	0004bfb2 	.word	0x0004bfb2
   2de5c:	0004bf12 	.word	0x0004bf12

0002de60 <connection_handler>:
{
   2de60:	b570      	push	{r4, r5, r6, lr}
	if (nct_evt->status != 0) {
   2de62:	6804      	ldr	r4, [r0, #0]
{
   2de64:	4605      	mov	r5, r0
   2de66:	b08a      	sub	sp, #40	; 0x28
	if (nct_evt->status != 0) {
   2de68:	b164      	cbz	r4, 2de84 <connection_handler+0x24>
		evt.type = NRF_CLOUD_EVT_ERROR;
   2de6a:	23ff      	movs	r3, #255	; 0xff
		evt.status = nct_evt->status;
   2de6c:	9405      	str	r4, [sp, #20]
		evt.type = NRF_CLOUD_EVT_ERROR;
   2de6e:	f88d 3010 	strb.w	r3, [sp, #16]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2de72:	f7ff f91b 	bl	2d0ac <nfsm_get_current_state>
   2de76:	a904      	add	r1, sp, #16
   2de78:	f7ff f91e 	bl	2d0b8 <nfsm_set_current_state_and_notify>
		return 0;
   2de7c:	2400      	movs	r4, #0
}
   2de7e:	4620      	mov	r0, r4
   2de80:	b00a      	add	sp, #40	; 0x28
   2de82:	bd70      	pop	{r4, r5, r6, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2de84:	2601      	movs	r6, #1
	evt.status = nct_evt->param.flag;
   2de86:	7903      	ldrb	r3, [r0, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2de88:	a904      	add	r1, sp, #16
   2de8a:	2002      	movs	r0, #2
	evt.status = nct_evt->param.flag;
   2de8c:	9305      	str	r3, [sp, #20]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2de8e:	f88d 6010 	strb.w	r6, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2de92:	f7ff f911 	bl	2d0b8 <nfsm_set_current_state_and_notify>
	persistent_session = nct_evt->param.flag;
   2de96:	792b      	ldrb	r3, [r5, #4]
   2de98:	2b00      	cmp	r3, #0
   2de9a:	bf14      	ite	ne
   2de9c:	4632      	movne	r2, r6
   2de9e:	2200      	moveq	r2, #0
   2dea0:	4b10      	ldr	r3, [pc, #64]	; (2dee4 <connection_handler+0x84>)
   2dea2:	701a      	strb	r2, [r3, #0]
	if (!persistent_session) {
   2dea4:	d109      	bne.n	2deba <connection_handler+0x5a>
		err = nct_cc_connect();
   2dea6:	f000 fda5 	bl	2e9f4 <nct_cc_connect>
		if (err) {
   2deaa:	4604      	mov	r4, r0
   2deac:	2800      	cmp	r0, #0
   2deae:	d1e6      	bne.n	2de7e <connection_handler+0x1e>
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   2deb0:	4601      	mov	r1, r0
   2deb2:	2003      	movs	r0, #3
   2deb4:	f7ff f900 	bl	2d0b8 <nfsm_set_current_state_and_notify>
   2deb8:	e7e1      	b.n	2de7e <connection_handler+0x1e>
   2deba:	4b0b      	ldr	r3, [pc, #44]	; (2dee8 <connection_handler+0x88>)
   2debc:	480b      	ldr	r0, [pc, #44]	; (2deec <connection_handler+0x8c>)
		LOG_DBG("Previous session valid; skipping nct_cc_connect()");
   2debe:	4a0c      	ldr	r2, [pc, #48]	; (2def0 <connection_handler+0x90>)
   2dec0:	1ac0      	subs	r0, r0, r3
   2dec2:	08c0      	lsrs	r0, r0, #3
   2dec4:	0180      	lsls	r0, r0, #6
   2dec6:	490b      	ldr	r1, [pc, #44]	; (2def4 <connection_handler+0x94>)
   2dec8:	f040 0004 	orr.w	r0, r0, #4
		struct nct_evt nevt = { .type = NCT_EVT_CC_CONNECTED,
   2decc:	9403      	str	r4, [sp, #12]
   2dece:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2ded2:	f88d 600c 	strb.w	r6, [sp, #12]
		LOG_DBG("Previous session valid; skipping nct_cc_connect()");
   2ded6:	f013 fca3 	bl	41820 <log_string_sync>
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   2deda:	2103      	movs	r1, #3
   2dedc:	a801      	add	r0, sp, #4
   2dede:	f7ff ff29 	bl	2dd34 <nfsm_handle_incoming_event>
   2dee2:	e7cc      	b.n	2de7e <connection_handler+0x1e>
   2dee4:	2002cc38 	.word	0x2002cc38
   2dee8:	000463bc 	.word	0x000463bc
   2deec:	000464bc 	.word	0x000464bc
   2def0:	0004bf9f 	.word	0x0004bf9f
   2def4:	0004bf48 	.word	0x0004bf48

0002def8 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   2def8:	2200      	movs	r2, #0
   2defa:	4b05      	ldr	r3, [pc, #20]	; (2df10 <dc_endpoint_reset+0x18>)
	nct.dc_rx_endp.size = 0;
   2defc:	e9c3 222f 	strd	r2, r2, [r3, #188]	; 0xbc

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   2df00:	e9c3 222d 	strd	r2, r2, [r3, #180]	; 0xb4

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   2df04:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4

	nct.job_status_endp.utf8 = NULL;
	nct.job_status_endp.size = 0;
   2df08:	e9c3 2233 	strd	r2, r2, [r3, #204]	; 0xcc
}
   2df0c:	4770      	bx	lr
   2df0e:	bf00      	nop
   2df10:	20024a24 	.word	0x20024a24

0002df14 <nct_settings_set>:
}
#endif /* defined(CONFIG_AWS_FOTA) */

static int nct_settings_set(const char *key, size_t len_rd,
			    settings_read_cb read_cb, void *cb_arg)
{
   2df14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2df18:	460d      	mov	r5, r1
   2df1a:	4617      	mov	r7, r2
   2df1c:	4698      	mov	r8, r3
	if (!key) {
   2df1e:	4606      	mov	r6, r0
   2df20:	2800      	cmp	r0, #0
   2df22:	d033      	beq.n	2df8c <nct_settings_set+0x78>
   2df24:	4b1b      	ldr	r3, [pc, #108]	; (2df94 <nct_settings_set+0x80>)
   2df26:	4c1c      	ldr	r4, [pc, #112]	; (2df98 <nct_settings_set+0x84>)
   2df28:	1ae4      	subs	r4, r4, r3
		return -EINVAL;
	}

	int read_val;

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);
   2df2a:	f013 fc8c 	bl	41846 <log_strdup>
   2df2e:	08e4      	lsrs	r4, r4, #3
   2df30:	01a4      	lsls	r4, r4, #6
   2df32:	f044 0404 	orr.w	r4, r4, #4
   2df36:	4603      	mov	r3, r0
   2df38:	4a18      	ldr	r2, [pc, #96]	; (2df9c <nct_settings_set+0x88>)
   2df3a:	4919      	ldr	r1, [pc, #100]	; (2dfa0 <nct_settings_set+0x8c>)
   2df3c:	4620      	mov	r0, r4
   2df3e:	9500      	str	r5, [sp, #0]
   2df40:	f013 fc6e 	bl	41820 <log_string_sync>

	if (!strncmp(key, SETTINGS_KEY_PERSISTENT_SESSION,
   2df44:	4817      	ldr	r0, [pc, #92]	; (2dfa4 <nct_settings_set+0x90>)
   2df46:	f7ef f989 	bl	1d25c <strlen>
   2df4a:	4916      	ldr	r1, [pc, #88]	; (2dfa4 <nct_settings_set+0x90>)
   2df4c:	4602      	mov	r2, r0
   2df4e:	4630      	mov	r0, r6
   2df50:	f017 f8c9 	bl	450e6 <strncmp>
   2df54:	4606      	mov	r6, r0
   2df56:	b128      	cbz	r0, 2df64 <nct_settings_set+0x50>
#endif
			LOG_DBG("Read setting val: %d", read_val);
			return 0;
		}
	}
	return -ENOTSUP;
   2df58:	f06f 0685 	mvn.w	r6, #133	; 0x85
}
   2df5c:	4630      	mov	r0, r6
   2df5e:	b004      	add	sp, #16
   2df60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		     strlen(SETTINGS_KEY_PERSISTENT_SESSION)) &&
   2df64:	2d04      	cmp	r5, #4
   2df66:	d1f7      	bne.n	2df58 <nct_settings_set+0x44>
		if (read_cb(cb_arg, (void *)&read_val, len_rd) == len_rd) {
   2df68:	462a      	mov	r2, r5
   2df6a:	4640      	mov	r0, r8
   2df6c:	a903      	add	r1, sp, #12
   2df6e:	47b8      	blx	r7
   2df70:	2804      	cmp	r0, #4
   2df72:	d1f1      	bne.n	2df58 <nct_settings_set+0x44>
			persistent_session = (bool)read_val;
   2df74:	9b03      	ldr	r3, [sp, #12]
   2df76:	4a0c      	ldr	r2, [pc, #48]	; (2dfa8 <nct_settings_set+0x94>)
   2df78:	1e19      	subs	r1, r3, #0
   2df7a:	bf18      	it	ne
   2df7c:	2101      	movne	r1, #1
			LOG_DBG("Read setting val: %d", read_val);
   2df7e:	4620      	mov	r0, r4
			persistent_session = (bool)read_val;
   2df80:	7011      	strb	r1, [r2, #0]
			LOG_DBG("Read setting val: %d", read_val);
   2df82:	4a06      	ldr	r2, [pc, #24]	; (2df9c <nct_settings_set+0x88>)
   2df84:	4909      	ldr	r1, [pc, #36]	; (2dfac <nct_settings_set+0x98>)
   2df86:	f013 fc4b 	bl	41820 <log_string_sync>
			return 0;
   2df8a:	e7e7      	b.n	2df5c <nct_settings_set+0x48>
		return -EINVAL;
   2df8c:	f06f 0615 	mvn.w	r6, #21
   2df90:	e7e4      	b.n	2df5c <nct_settings_set+0x48>
   2df92:	bf00      	nop
   2df94:	000463bc 	.word	0x000463bc
   2df98:	000464c4 	.word	0x000464c4
   2df9c:	0004c7fc 	.word	0x0004c7fc
   2dfa0:	0004bfc4 	.word	0x0004bfc4
   2dfa4:	0004c1c6 	.word	0x0004c1c6
   2dfa8:	2002cc7f 	.word	0x2002cc7f
   2dfac:	0004bfe3 	.word	0x0004bfe3

0002dfb0 <aws_fota_cb_handler>:
{
   2dfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (fota_evt == NULL) {
   2dfb4:	4606      	mov	r6, r0
{
   2dfb6:	b08c      	sub	sp, #48	; 0x30
	if (fota_evt == NULL) {
   2dfb8:	b330      	cbz	r0, 2e008 <aws_fota_cb_handler+0x58>
	char fota_status[JOB_STATUS_STR_LEN] = { 0 };
   2dfba:	2300      	movs	r3, #0
   2dfbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2dfc0:	9304      	str	r3, [sp, #16]
   2dfc2:	f88d 3014 	strb.w	r3, [sp, #20]
	switch (fota_evt->id) {
   2dfc6:	7803      	ldrb	r3, [r0, #0]
   2dfc8:	2b05      	cmp	r3, #5
   2dfca:	d81d      	bhi.n	2e008 <aws_fota_cb_handler+0x58>
   2dfcc:	e8df f003 	tbb	[pc, r3]
   2dfd0:	324a1f03 	.word	0x324a1f03
   2dfd4:	5a3e      	.short	0x5a3e
   2dfd6:	4b61      	ldr	r3, [pc, #388]	; (2e15c <aws_fota_cb_handler+0x1ac>)
   2dfd8:	4c61      	ldr	r4, [pc, #388]	; (2e160 <aws_fota_cb_handler+0x1b0>)
		if (aws_fota_get_job_id(current_job_id, sizeof(current_job_id))
   2dfda:	4d62      	ldr	r5, [pc, #392]	; (2e164 <aws_fota_cb_handler+0x1b4>)
   2dfdc:	1ae4      	subs	r4, r4, r3
   2dfde:	08e4      	lsrs	r4, r4, #3
		LOG_DBG("AWS_FOTA_EVT_START");
   2dfe0:	01a4      	lsls	r4, r4, #6
   2dfe2:	4a61      	ldr	r2, [pc, #388]	; (2e168 <aws_fota_cb_handler+0x1b8>)
   2dfe4:	4961      	ldr	r1, [pc, #388]	; (2e16c <aws_fota_cb_handler+0x1bc>)
   2dfe6:	f044 0004 	orr.w	r0, r4, #4
   2dfea:	f013 fc19 	bl	41820 <log_string_sync>
		if (aws_fota_get_job_id(current_job_id, sizeof(current_job_id))
   2dfee:	2109      	movs	r1, #9
   2dff0:	4628      	mov	r0, r5
   2dff2:	f003 f9a1 	bl	31338 <aws_fota_get_job_id>
   2dff6:	2807      	cmp	r0, #7
   2dff8:	dc06      	bgt.n	2e008 <aws_fota_cb_handler+0x58>
			LOG_ERR("Failed to get current job ID");
   2dffa:	495d      	ldr	r1, [pc, #372]	; (2e170 <aws_fota_cb_handler+0x1c0>)
   2dffc:	f044 0001 	orr.w	r0, r4, #1
   2e000:	f013 fc0e 	bl	41820 <log_string_sync>
			current_job_id[0] = 0;
   2e004:	2300      	movs	r3, #0
   2e006:	702b      	strb	r3, [r5, #0]
}
   2e008:	b00c      	add	sp, #48	; 0x30
   2e00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e00e:	4b53      	ldr	r3, [pc, #332]	; (2e15c <aws_fota_cb_handler+0x1ac>)
   2e010:	4853      	ldr	r0, [pc, #332]	; (2e160 <aws_fota_cb_handler+0x1b0>)
		LOG_DBG("AWS_FOTA_EVT_DONE: rebooting to apply update");
   2e012:	4a55      	ldr	r2, [pc, #340]	; (2e168 <aws_fota_cb_handler+0x1b8>)
   2e014:	1ac0      	subs	r0, r0, r3
   2e016:	08c0      	lsrs	r0, r0, #3
   2e018:	0180      	lsls	r0, r0, #6
   2e01a:	4956      	ldr	r1, [pc, #344]	; (2e174 <aws_fota_cb_handler+0x1c4>)
   2e01c:	f040 0004 	orr.w	r0, r0, #4
   2e020:	f013 fbfe 	bl	41820 <log_string_sync>
		last_sent_fota_progress = 0;
   2e024:	2300      	movs	r3, #0
   2e026:	4a54      	ldr	r2, [pc, #336]	; (2e178 <aws_fota_cb_handler+0x1c8>)
   2e028:	6013      	str	r3, [r2, #0]
		current_job_id[0] = 0;
   2e02a:	4a4e      	ldr	r2, [pc, #312]	; (2e164 <aws_fota_cb_handler+0x1b4>)
   2e02c:	7013      	strb	r3, [r2, #0]
		nct_apply_update();
   2e02e:	f7ff f9e1 	bl	2d3f4 <nct_apply_update>
		break;
   2e032:	e7e9      	b.n	2e008 <aws_fota_cb_handler+0x58>
   2e034:	4b49      	ldr	r3, [pc, #292]	; (2e15c <aws_fota_cb_handler+0x1ac>)
   2e036:	484a      	ldr	r0, [pc, #296]	; (2e160 <aws_fota_cb_handler+0x1b0>)
		LOG_DBG("AWS_FOTA_EVT_ERASE_PENDING: rebooting");
   2e038:	4a4b      	ldr	r2, [pc, #300]	; (2e168 <aws_fota_cb_handler+0x1b8>)
   2e03a:	1ac0      	subs	r0, r0, r3
   2e03c:	08c0      	lsrs	r0, r0, #3
   2e03e:	0180      	lsls	r0, r0, #6
   2e040:	494e      	ldr	r1, [pc, #312]	; (2e17c <aws_fota_cb_handler+0x1cc>)
   2e042:	f040 0004 	orr.w	r0, r0, #4
   2e046:	f013 fbeb 	bl	41820 <log_string_sync>
   2e04a:	e7f0      	b.n	2e02e <aws_fota_cb_handler+0x7e>
   2e04c:	4844      	ldr	r0, [pc, #272]	; (2e160 <aws_fota_cb_handler+0x1b0>)
   2e04e:	4b43      	ldr	r3, [pc, #268]	; (2e15c <aws_fota_cb_handler+0x1ac>)
		LOG_DBG("AWS_FOTA_EVT_ERASE_DONE");
   2e050:	4a45      	ldr	r2, [pc, #276]	; (2e168 <aws_fota_cb_handler+0x1b8>)
   2e052:	1ac0      	subs	r0, r0, r3
   2e054:	08c0      	lsrs	r0, r0, #3
   2e056:	0180      	lsls	r0, r0, #6
   2e058:	4949      	ldr	r1, [pc, #292]	; (2e180 <aws_fota_cb_handler+0x1d0>)
   2e05a:	f040 0004 	orr.w	r0, r0, #4
			LOG_ERR("job_status_stream failed %d", err);
   2e05e:	f013 fbdf 	bl	41820 <log_string_sync>
			return;
   2e062:	e7d1      	b.n	2e008 <aws_fota_cb_handler+0x58>
   2e064:	4b3d      	ldr	r3, [pc, #244]	; (2e15c <aws_fota_cb_handler+0x1ac>)
   2e066:	483e      	ldr	r0, [pc, #248]	; (2e160 <aws_fota_cb_handler+0x1b0>)
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   2e068:	4946      	ldr	r1, [pc, #280]	; (2e184 <aws_fota_cb_handler+0x1d4>)
   2e06a:	1ac0      	subs	r0, r0, r3
   2e06c:	08c0      	lsrs	r0, r0, #3
   2e06e:	0180      	lsls	r0, r0, #6
   2e070:	f040 0001 	orr.w	r0, r0, #1
   2e074:	f013 fbd4 	bl	41820 <log_string_sync>
		last_sent_fota_progress = 0;
   2e078:	2300      	movs	r3, #0
   2e07a:	4a3f      	ldr	r2, [pc, #252]	; (2e178 <aws_fota_cb_handler+0x1c8>)
   2e07c:	6013      	str	r3, [r2, #0]
		current_job_id[0] = 0;
   2e07e:	4a39      	ldr	r2, [pc, #228]	; (2e164 <aws_fota_cb_handler+0x1b4>)
   2e080:	7013      	strb	r3, [r2, #0]
		break;
   2e082:	e7c1      	b.n	2e008 <aws_fota_cb_handler+0x58>
   2e084:	4b35      	ldr	r3, [pc, #212]	; (2e15c <aws_fota_cb_handler+0x1ac>)
   2e086:	4c36      	ldr	r4, [pc, #216]	; (2e160 <aws_fota_cb_handler+0x1b0>)
		LOG_DBG("AWS_FOTA_EVT_DL_PROGRESS");
   2e088:	4a37      	ldr	r2, [pc, #220]	; (2e168 <aws_fota_cb_handler+0x1b8>)
   2e08a:	1ae4      	subs	r4, r4, r3
   2e08c:	08e4      	lsrs	r4, r4, #3
   2e08e:	01a4      	lsls	r4, r4, #6
   2e090:	493d      	ldr	r1, [pc, #244]	; (2e188 <aws_fota_cb_handler+0x1d8>)
   2e092:	f044 0004 	orr.w	r0, r4, #4
   2e096:	f013 fbc3 	bl	41820 <log_string_sync>
		if ((fota_evt->dl.progress < 0) ||
   2e09a:	6872      	ldr	r2, [r6, #4]
   2e09c:	2a64      	cmp	r2, #100	; 0x64
   2e09e:	d904      	bls.n	2e0aa <aws_fota_cb_handler+0xfa>
			LOG_ERR("Invalid progress value %d",
   2e0a0:	493a      	ldr	r1, [pc, #232]	; (2e18c <aws_fota_cb_handler+0x1dc>)
   2e0a2:	f044 0001 	orr.w	r0, r4, #1
   2e0a6:	f013 fbbb 	bl	41820 <log_string_sync>
		if ((last_sent_fota_progress == AWS_FOTA_EVT_DL_COMPLETE_VAL) &&
   2e0aa:	4d33      	ldr	r5, [pc, #204]	; (2e178 <aws_fota_cb_handler+0x1c8>)
   2e0ac:	6872      	ldr	r2, [r6, #4]
   2e0ae:	682b      	ldr	r3, [r5, #0]
   2e0b0:	2b64      	cmp	r3, #100	; 0x64
   2e0b2:	d101      	bne.n	2e0b8 <aws_fota_cb_handler+0x108>
   2e0b4:	2a64      	cmp	r2, #100	; 0x64
   2e0b6:	d0a7      	beq.n	2e008 <aws_fota_cb_handler+0x58>
		if (last_sent_fota_progress > fota_evt->dl.progress) {
   2e0b8:	429a      	cmp	r2, r3
			last_sent_fota_progress = 0;
   2e0ba:	bfbc      	itt	lt
   2e0bc:	2300      	movlt	r3, #0
   2e0be:	602b      	strlt	r3, [r5, #0]
		if (current_job_id[0] == 0) {
   2e0c0:	4b28      	ldr	r3, [pc, #160]	; (2e164 <aws_fota_cb_handler+0x1b4>)
   2e0c2:	7819      	ldrb	r1, [r3, #0]
   2e0c4:	b929      	cbnz	r1, 2e0d2 <aws_fota_cb_handler+0x122>
			LOG_ERR("Invalid job ID, progress will not be sent");
   2e0c6:	4932      	ldr	r1, [pc, #200]	; (2e190 <aws_fota_cb_handler+0x1e0>)
			LOG_ERR("Failed to create FOTA progress message");
   2e0c8:	f044 0001 	orr.w	r0, r4, #1
   2e0cc:	f013 fba8 	bl	41820 <log_string_sync>
			return;
   2e0d0:	e79a      	b.n	2e008 <aws_fota_cb_handler+0x58>
			snprintf(fota_status, sizeof(fota_status), "%s %d",
   2e0d2:	f10d 0908 	add.w	r9, sp, #8
   2e0d6:	9200      	str	r2, [sp, #0]
   2e0d8:	210d      	movs	r1, #13
   2e0da:	4648      	mov	r0, r9
   2e0dc:	4a2d      	ldr	r2, [pc, #180]	; (2e194 <aws_fota_cb_handler+0x1e4>)
   2e0de:	f011 fd55 	bl	3fb8c <sniprintf>
		if ((prog.data.len <= 0) ||
   2e0e2:	1e43      	subs	r3, r0, #1
   2e0e4:	2b0b      	cmp	r3, #11
			snprintf(fota_status, sizeof(fota_status), "%s %d",
   2e0e6:	4607      	mov	r7, r0
		if ((prog.data.len <= 0) ||
   2e0e8:	d901      	bls.n	2e0ee <aws_fota_cb_handler+0x13e>
			LOG_ERR("Failed to create FOTA progress message");
   2e0ea:	492b      	ldr	r1, [pc, #172]	; (2e198 <aws_fota_cb_handler+0x1e8>)
   2e0ec:	e7ec      	b.n	2e0c8 <aws_fota_cb_handler+0x118>
		LOG_DBG("Job status (ID/progress): %s",
   2e0ee:	4648      	mov	r0, r9
   2e0f0:	f013 fba9 	bl	41846 <log_strdup>
   2e0f4:	f044 0804 	orr.w	r8, r4, #4
   2e0f8:	4603      	mov	r3, r0
   2e0fa:	4640      	mov	r0, r8
	if (nct.job_status_endp.utf8 == NULL) {
   2e0fc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2e1a8 <aws_fota_cb_handler+0x1f8>
		LOG_DBG("Job status (ID/progress): %s",
   2e100:	4a19      	ldr	r2, [pc, #100]	; (2e168 <aws_fota_cb_handler+0x1b8>)
   2e102:	4926      	ldr	r1, [pc, #152]	; (2e19c <aws_fota_cb_handler+0x1ec>)
   2e104:	f013 fb8c 	bl	41820 <log_string_sync>
	if (nct.job_status_endp.utf8 == NULL) {
   2e108:	f8d8 a0cc 	ldr.w	sl, [r8, #204]	; 0xcc
   2e10c:	f1ba 0f00 	cmp.w	sl, #0
   2e110:	d10a      	bne.n	2e128 <aws_fota_cb_handler+0x178>
		LOG_ERR("Job status topic not set");
   2e112:	4923      	ldr	r1, [pc, #140]	; (2e1a0 <aws_fota_cb_handler+0x1f0>)
   2e114:	f044 0001 	orr.w	r0, r4, #1
   2e118:	f013 fb82 	bl	41820 <log_string_sync>
		return -EACCES;
   2e11c:	f06f 020c 	mvn.w	r2, #12
			LOG_ERR("job_status_stream failed %d", err);
   2e120:	4920      	ldr	r1, [pc, #128]	; (2e1a4 <aws_fota_cb_handler+0x1f4>)
   2e122:	f044 0001 	orr.w	r0, r4, #1
   2e126:	e79a      	b.n	2e05e <aws_fota_cb_handler+0xae>
	struct mqtt_publish_param publish = {
   2e128:	2210      	movs	r2, #16
   2e12a:	2100      	movs	r1, #0
   2e12c:	a808      	add	r0, sp, #32
   2e12e:	f016 fdfa 	bl	44d26 <memset>
	publish.message.topic.topic.size = nct.job_status_endp.size;
   2e132:	f8d8 30d0 	ldr.w	r3, [r8, #208]	; 0xd0
	return mqtt_publish(&nct.client, &publish);
   2e136:	a906      	add	r1, sp, #24
	publish.message.topic.topic.utf8 = nct.job_status_endp.utf8;
   2e138:	e9cd a306 	strd	sl, r3, [sp, #24]
	publish.message_id = 0;
   2e13c:	2300      	movs	r3, #0
	return mqtt_publish(&nct.client, &publish);
   2e13e:	f108 001c 	add.w	r0, r8, #28
		publish.message.payload.len = dc_data->data.len;
   2e142:	e9cd 9709 	strd	r9, r7, [sp, #36]	; 0x24
	publish.message_id = 0;
   2e146:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	return mqtt_publish(&nct.client, &publish);
   2e14a:	f014 fee7 	bl	42f1c <mqtt_publish>
		if (err) {
   2e14e:	4602      	mov	r2, r0
   2e150:	2800      	cmp	r0, #0
   2e152:	d1e5      	bne.n	2e120 <aws_fota_cb_handler+0x170>
		last_sent_fota_progress = fota_evt->dl.progress;
   2e154:	6873      	ldr	r3, [r6, #4]
   2e156:	602b      	str	r3, [r5, #0]
		break;
   2e158:	e756      	b.n	2e008 <aws_fota_cb_handler+0x58>
   2e15a:	bf00      	nop
   2e15c:	000463bc 	.word	0x000463bc
   2e160:	000464c4 	.word	0x000464c4
   2e164:	2002cc75 	.word	0x2002cc75
   2e168:	0004c7e8 	.word	0x0004c7e8
   2e16c:	0004bffc 	.word	0x0004bffc
   2e170:	0004c013 	.word	0x0004c013
   2e174:	0004c030 	.word	0x0004c030
   2e178:	20024a1c 	.word	0x20024a1c
   2e17c:	0004c061 	.word	0x0004c061
   2e180:	0004c08b 	.word	0x0004c08b
   2e184:	0004c0a7 	.word	0x0004c0a7
   2e188:	0004c0ba 	.word	0x0004c0ba
   2e18c:	0004c0d7 	.word	0x0004c0d7
   2e190:	0004c0f1 	.word	0x0004c0f1
   2e194:	0004c11b 	.word	0x0004c11b
   2e198:	0004c121 	.word	0x0004c121
   2e19c:	0004c148 	.word	0x0004c148
   2e1a0:	0004c169 	.word	0x0004c169
   2e1a4:	0004c182 	.word	0x0004c182
   2e1a8:	20024a24 	.word	0x20024a24

0002e1ac <dc_send>:
{
   2e1ac:	b530      	push	{r4, r5, lr}
   2e1ae:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   2e1b0:	4604      	mov	r4, r0
{
   2e1b2:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2e1b4:	b368      	cbz	r0, 2e212 <dc_send+0x66>
	struct mqtt_publish_param publish = {
   2e1b6:	2210      	movs	r2, #16
   2e1b8:	2100      	movs	r1, #0
   2e1ba:	a802      	add	r0, sp, #8
   2e1bc:	f016 fdb3 	bl	44d26 <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   2e1c0:	4b15      	ldr	r3, [pc, #84]	; (2e218 <dc_send+0x6c>)
	struct mqtt_publish_param publish = {
   2e1c2:	f88d 5008 	strb.w	r5, [sp, #8]
   2e1c6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2e1ca:	9200      	str	r2, [sp, #0]
   2e1cc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   2e1d0:	9201      	str	r2, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2e1d2:	6822      	ldr	r2, [r4, #0]
   2e1d4:	b11a      	cbz	r2, 2e1de <dc_send+0x32>
   2e1d6:	6861      	ldr	r1, [r4, #4]
   2e1d8:	b109      	cbz	r1, 2e1de <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   2e1da:	e9cd 1203 	strd	r1, r2, [sp, #12]
	if (dc_data->id != 0) {
   2e1de:	6922      	ldr	r2, [r4, #16]
   2e1e0:	b13a      	cbz	r2, 2e1f2 <dc_send+0x46>
		publish.message_id = dc_data->id;
   2e1e2:	f8ad 2014 	strh.w	r2, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2e1e6:	4669      	mov	r1, sp
   2e1e8:	480c      	ldr	r0, [pc, #48]	; (2e21c <dc_send+0x70>)
   2e1ea:	f014 fe97 	bl	42f1c <mqtt_publish>
}
   2e1ee:	b007      	add	sp, #28
   2e1f0:	bd30      	pop	{r4, r5, pc}
	nct.message_id++;
   2e1f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   2e1f6:	1c51      	adds	r1, r2, #1
	if ((uint16_t)nct.message_id == 0) {
   2e1f8:	b288      	uxth	r0, r1
   2e1fa:	b130      	cbz	r0, 2e20a <dc_send+0x5e>
	nct.message_id++;
   2e1fc:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		publish.message_id = dc_get_next_message_id();
   2e200:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   2e204:	f8ad 3014 	strh.w	r3, [sp, #20]
   2e208:	e7ed      	b.n	2e1e6 <dc_send+0x3a>
		nct.message_id++;
   2e20a:	3202      	adds	r2, #2
   2e20c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
   2e210:	e7f6      	b.n	2e200 <dc_send+0x54>
		return -EINVAL;
   2e212:	f06f 0015 	mvn.w	r0, #21
   2e216:	e7ea      	b.n	2e1ee <dc_send+0x42>
   2e218:	20024a24 	.word	0x20024a24
   2e21c:	20024a40 	.word	0x20024a40

0002e220 <dc_endpoint_free>:
{
   2e220:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   2e222:	4c0c      	ldr	r4, [pc, #48]	; (2e254 <dc_endpoint_free+0x34>)
   2e224:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2e228:	b108      	cbz	r0, 2e22e <dc_endpoint_free+0xe>
		nrf_cloud_free((void *)nct.dc_rx_endp.utf8);
   2e22a:	f016 fd1f 	bl	44c6c <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   2e22e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2e232:	b108      	cbz	r0, 2e238 <dc_endpoint_free+0x18>
		nrf_cloud_free((void *)nct.dc_tx_endp.utf8);
   2e234:	f016 fd1a 	bl	44c6c <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   2e238:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   2e23c:	b108      	cbz	r0, 2e242 <dc_endpoint_free+0x22>
		nrf_cloud_free((void *)nct.dc_m_endp.utf8);
   2e23e:	f016 fd15 	bl	44c6c <k_free>
	if (nct.job_status_endp.utf8 != NULL) {
   2e242:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2e246:	b108      	cbz	r0, 2e24c <dc_endpoint_free+0x2c>
		nrf_cloud_free((void *)nct.job_status_endp.utf8);
   2e248:	f016 fd10 	bl	44c6c <k_free>
}
   2e24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dc_endpoint_reset();
   2e250:	f7ff be52 	b.w	2def8 <dc_endpoint_reset>
   2e254:	20024a24 	.word	0x20024a24

0002e258 <save_session_state>:

int save_session_state(const int session_valid)
{
   2e258:	b513      	push	{r0, r1, r4, lr}
   2e25a:	4b0d      	ldr	r3, [pc, #52]	; (2e290 <save_session_state+0x38>)
   2e25c:	4c0d      	ldr	r4, [pc, #52]	; (2e294 <save_session_state+0x3c>)
   2e25e:	9001      	str	r0, [sp, #4]
   2e260:	1ae4      	subs	r4, r4, r3
   2e262:	08e4      	lsrs	r4, r4, #3
	int ret = 0;

#if !IS_ENABLED(CONFIG_MQTT_CLEAN_SESSION)
	LOG_DBG("Setting session state: %d", session_valid);
   2e264:	01a4      	lsls	r4, r4, #6
   2e266:	4603      	mov	r3, r0
   2e268:	4a0b      	ldr	r2, [pc, #44]	; (2e298 <save_session_state+0x40>)
   2e26a:	f044 0004 	orr.w	r0, r4, #4
   2e26e:	490b      	ldr	r1, [pc, #44]	; (2e29c <save_session_state+0x44>)
   2e270:	f013 fad6 	bl	41820 <log_string_sync>
	persistent_session = (bool)session_valid;
   2e274:	9b01      	ldr	r3, [sp, #4]
   2e276:	4a0a      	ldr	r2, [pc, #40]	; (2e2a0 <save_session_state+0x48>)
   2e278:	3b00      	subs	r3, #0
   2e27a:	bf18      	it	ne
   2e27c:	2301      	movne	r3, #1
   2e27e:	7013      	strb	r3, [r2, #0]
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2e280:	2204      	movs	r2, #4
   2e282:	4808      	ldr	r0, [pc, #32]	; (2e2a4 <save_session_state+0x4c>)
   2e284:	eb0d 0102 	add.w	r1, sp, r2
   2e288:	f7f7 fb5c 	bl	25944 <settings_save_one>
				&session_valid, sizeof(session_valid));
#endif
	return ret;
}
   2e28c:	b002      	add	sp, #8
   2e28e:	bd10      	pop	{r4, pc}
   2e290:	000463bc 	.word	0x000463bc
   2e294:	000464c4 	.word	0x000464c4
   2e298:	0004c80d 	.word	0x0004c80d
   2e29c:	0004c19e 	.word	0x0004c19e
   2e2a0:	2002cc7f 	.word	0x2002cc7f
   2e2a4:	0004c1bc 	.word	0x0004c1bc

0002e2a8 <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2e2a8:	2300      	movs	r3, #0
{
   2e2aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e2ac:	b093      	sub	sp, #76	; 0x4c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2e2ae:	e9cd 3305 	strd	r3, r3, [sp, #20]
   2e2b2:	69cb      	ldr	r3, [r1, #28]
{
   2e2b4:	4606      	mov	r6, r0
   2e2b6:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2e2b8:	9304      	str	r3, [sp, #16]
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_AWS_FOTA)
	err = aws_fota_mqtt_evt_handler(mqtt_client, _mqtt_evt);
   2e2ba:	f002 fd19 	bl	30cf0 <aws_fota_mqtt_evt_handler>
	if (err == 0) {
   2e2be:	1e02      	subs	r2, r0, #0
   2e2c0:	d065      	beq.n	2e38e <nct_mqtt_evt_handler+0xe6>
		/* Event handled by FOTA library so we can skip it */
		return;
	} else if (err < 0) {
   2e2c2:	da19      	bge.n	2e2f8 <nct_mqtt_evt_handler+0x50>
   2e2c4:	4b8b      	ldr	r3, [pc, #556]	; (2e4f4 <nct_mqtt_evt_handler+0x24c>)
   2e2c6:	4d8c      	ldr	r5, [pc, #560]	; (2e4f8 <nct_mqtt_evt_handler+0x250>)
		LOG_ERR("aws_fota_mqtt_evt_handler: Failed! %d", err);
   2e2c8:	498c      	ldr	r1, [pc, #560]	; (2e4fc <nct_mqtt_evt_handler+0x254>)
   2e2ca:	1aed      	subs	r5, r5, r3
   2e2cc:	08ed      	lsrs	r5, r5, #3
   2e2ce:	01ad      	lsls	r5, r5, #6
   2e2d0:	f045 0701 	orr.w	r7, r5, #1
   2e2d4:	4638      	mov	r0, r7
   2e2d6:	f013 faa3 	bl	41820 <log_string_sync>
		LOG_DBG("Disconnecting MQTT client...");
   2e2da:	4a89      	ldr	r2, [pc, #548]	; (2e500 <nct_mqtt_evt_handler+0x258>)
   2e2dc:	4989      	ldr	r1, [pc, #548]	; (2e504 <nct_mqtt_evt_handler+0x25c>)
   2e2de:	f045 0004 	orr.w	r0, r5, #4
   2e2e2:	f013 fa9d 	bl	41820 <log_string_sync>

		err = mqtt_disconnect(mqtt_client);
   2e2e6:	4630      	mov	r0, r6
   2e2e8:	f014 fe84 	bl	42ff4 <mqtt_disconnect>
		if (err) {
   2e2ec:	4602      	mov	r2, r0
   2e2ee:	b118      	cbz	r0, 2e2f8 <nct_mqtt_evt_handler+0x50>
			LOG_ERR("Could not disconnect: %d", err);
   2e2f0:	4638      	mov	r0, r7
   2e2f2:	4985      	ldr	r1, [pc, #532]	; (2e508 <nct_mqtt_evt_handler+0x260>)
   2e2f4:	f013 fa94 	bl	41820 <log_string_sync>
		}
	}
#endif /* defined(CONFIG_AWS_FOTA) */

	switch (_mqtt_evt->type) {
   2e2f8:	7823      	ldrb	r3, [r4, #0]
   2e2fa:	2b08      	cmp	r3, #8
   2e2fc:	d847      	bhi.n	2e38e <nct_mqtt_evt_handler+0xe6>
   2e2fe:	e8df f013 	tbh	[pc, r3, lsl #1]
   2e302:	0009      	.short	0x0009
   2e304:	002600d6 	.word	0x002600d6
   2e308:	004600c2 	.word	0x004600c2
   2e30c:	00460046 	.word	0x00460046
   2e310:	00b0009b 	.word	0x00b0009b
   2e314:	4b77      	ldr	r3, [pc, #476]	; (2e4f4 <nct_mqtt_evt_handler+0x24c>)
   2e316:	4878      	ldr	r0, [pc, #480]	; (2e4f8 <nct_mqtt_evt_handler+0x250>)
	case MQTT_EVT_CONNACK: {
		const struct mqtt_connack_param *p = &_mqtt_evt->param.connack;

		LOG_DBG("MQTT_EVT_CONNACK: result %d", _mqtt_evt->result);
   2e318:	4a79      	ldr	r2, [pc, #484]	; (2e500 <nct_mqtt_evt_handler+0x258>)
   2e31a:	1ac0      	subs	r0, r0, r3
   2e31c:	08c0      	lsrs	r0, r0, #3
   2e31e:	0180      	lsls	r0, r0, #6
   2e320:	69e3      	ldr	r3, [r4, #28]
   2e322:	f040 0004 	orr.w	r0, r0, #4
   2e326:	4979      	ldr	r1, [pc, #484]	; (2e50c <nct_mqtt_evt_handler+0x264>)
   2e328:	f013 fa7a 	bl	41820 <log_string_sync>

		evt.param.flag = (p->session_present_flag != 0) &&
   2e32c:	7920      	ldrb	r0, [r4, #4]
   2e32e:	4b78      	ldr	r3, [pc, #480]	; (2e510 <nct_mqtt_evt_handler+0x268>)
   2e330:	b158      	cbz	r0, 2e34a <nct_mqtt_evt_handler+0xa2>
   2e332:	781a      	ldrb	r2, [r3, #0]
				 persistent_session;

		if (persistent_session && (p->session_present_flag == 0)) {
   2e334:	781b      	ldrb	r3, [r3, #0]
		evt.param.flag = (p->session_present_flag != 0) &&
   2e336:	f88d 2014 	strb.w	r2, [sp, #20]
		if (persistent_session && (p->session_present_flag == 0)) {
   2e33a:	b113      	cbz	r3, 2e342 <nct_mqtt_evt_handler+0x9a>
   2e33c:	b908      	cbnz	r0, 2e342 <nct_mqtt_evt_handler+0x9a>
			/* Session not present, clear saved state */
			save_session_state(0);
   2e33e:	f7ff ff8b 	bl	2e258 <save_session_state>
		}

		evt.type = NCT_EVT_CONNECTED;
   2e342:	2300      	movs	r3, #0
		break;
	}
	case MQTT_EVT_DISCONNECT: {
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);

		evt.type = NCT_EVT_DISCONNECTED;
   2e344:	f88d 3018 	strb.w	r3, [sp, #24]
	}
	default:
		break;
	}

	if (event_notify) {
   2e348:	e051      	b.n	2e3ee <nct_mqtt_evt_handler+0x146>
		evt.param.flag = (p->session_present_flag != 0) &&
   2e34a:	4602      	mov	r2, r0
   2e34c:	e7f2      	b.n	2e334 <nct_mqtt_evt_handler+0x8c>
   2e34e:	4b69      	ldr	r3, [pc, #420]	; (2e4f4 <nct_mqtt_evt_handler+0x24c>)
   2e350:	4d69      	ldr	r5, [pc, #420]	; (2e4f8 <nct_mqtt_evt_handler+0x250>)
		LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   2e352:	4a6b      	ldr	r2, [pc, #428]	; (2e500 <nct_mqtt_evt_handler+0x258>)
   2e354:	1aed      	subs	r5, r5, r3
   2e356:	08ed      	lsrs	r5, r5, #3
   2e358:	6963      	ldr	r3, [r4, #20]
   2e35a:	01ad      	lsls	r5, r5, #6
   2e35c:	9300      	str	r3, [sp, #0]
   2e35e:	496d      	ldr	r1, [pc, #436]	; (2e514 <nct_mqtt_evt_handler+0x26c>)
   2e360:	8b23      	ldrh	r3, [r4, #24]
   2e362:	f045 0004 	orr.w	r0, r5, #4
   2e366:	f013 fa5b 	bl	41820 <log_string_sync>
		int err = publish_get_payload(mqtt_client,
   2e36a:	6962      	ldr	r2, [r4, #20]
	if (length > sizeof(nct.payload_buf)) {
   2e36c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2e370:	d80f      	bhi.n	2e392 <nct_mqtt_evt_handler+0xea>
	return mqtt_readall_publish_payload(client, nct.payload_buf, length);
   2e372:	4630      	mov	r0, r6
   2e374:	4968      	ldr	r1, [pc, #416]	; (2e518 <nct_mqtt_evt_handler+0x270>)
   2e376:	f014 ff41 	bl	431fc <mqtt_readall_publish_payload>
		if (err < 0) {
   2e37a:	1e02      	subs	r2, r0, #0
   2e37c:	da0c      	bge.n	2e398 <nct_mqtt_evt_handler+0xf0>
			LOG_ERR("publish_get_payload: failed %d", err);
   2e37e:	f045 0001 	orr.w	r0, r5, #1
   2e382:	4966      	ldr	r1, [pc, #408]	; (2e51c <nct_mqtt_evt_handler+0x274>)
   2e384:	f013 fa4c 	bl	41820 <log_string_sync>
			mqtt_disconnect(mqtt_client);
   2e388:	4630      	mov	r0, r6
   2e38a:	f014 fe33 	bl	42ff4 <mqtt_disconnect>

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
		}
	}
}
   2e38e:	b013      	add	sp, #76	; 0x4c
   2e390:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2e392:	f06f 0279 	mvn.w	r2, #121	; 0x79
   2e396:	e7f2      	b.n	2e37e <nct_mqtt_evt_handler+0xd6>
	for (uint32_t index = 0; index < list_size; index++) {
   2e398:	2500      	movs	r5, #0
   2e39a:	4f61      	ldr	r7, [pc, #388]	; (2e520 <nct_mqtt_evt_handler+0x278>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   2e39c:	68a2      	ldr	r2, [r4, #8]
   2e39e:	687b      	ldr	r3, [r7, #4]
   2e3a0:	6839      	ldr	r1, [r7, #0]
   2e3a2:	429a      	cmp	r2, r3
   2e3a4:	bf28      	it	cs
   2e3a6:	461a      	movcs	r2, r3
   2e3a8:	6860      	ldr	r0, [r4, #4]
   2e3aa:	f016 fe9c 	bl	450e6 <strncmp>
		if (strings_compare(
   2e3ae:	2800      	cmp	r0, #0
   2e3b0:	d12e      	bne.n	2e410 <nct_mqtt_evt_handler+0x168>
			*opcode = nct_cc_rx_opcode_map[index];
   2e3b2:	4b5c      	ldr	r3, [pc, #368]	; (2e524 <nct_mqtt_evt_handler+0x27c>)
   2e3b4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   2e3b8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			cc.id = p->message_id;
   2e3bc:	8b23      	ldrh	r3, [r4, #24]
   2e3be:	9310      	str	r3, [sp, #64]	; 0x40
			cc.data.ptr = nct.payload_buf;
   2e3c0:	4b55      	ldr	r3, [pc, #340]	; (2e518 <nct_mqtt_evt_handler+0x270>)
   2e3c2:	930d      	str	r3, [sp, #52]	; 0x34
			cc.data.len = p->message.payload.len;
   2e3c4:	6963      	ldr	r3, [r4, #20]
   2e3c6:	930c      	str	r3, [sp, #48]	; 0x30
			cc.topic.len = p->message.topic.topic.size;
   2e3c8:	68a3      	ldr	r3, [r4, #8]
   2e3ca:	930e      	str	r3, [sp, #56]	; 0x38
			cc.topic.ptr = p->message.topic.topic.utf8;
   2e3cc:	6863      	ldr	r3, [r4, #4]
   2e3ce:	930f      	str	r3, [sp, #60]	; 0x3c
			evt.type = NCT_EVT_CC_RX_DATA;
   2e3d0:	2303      	movs	r3, #3
   2e3d2:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.cc = &cc;
   2e3d6:	ab0c      	add	r3, sp, #48	; 0x30
			evt.param.dc = &dc;
   2e3d8:	9305      	str	r3, [sp, #20]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2e3da:	7b23      	ldrb	r3, [r4, #12]
   2e3dc:	2b01      	cmp	r3, #1
   2e3de:	d106      	bne.n	2e3ee <nct_mqtt_evt_handler+0x146>
			const struct mqtt_puback_param ack = {
   2e3e0:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2e3e2:	4630      	mov	r0, r6
   2e3e4:	a903      	add	r1, sp, #12
			const struct mqtt_puback_param ack = {
   2e3e6:	f8ad 300c 	strh.w	r3, [sp, #12]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2e3ea:	f014 fddc 	bl	42fa6 <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2e3ee:	a804      	add	r0, sp, #16
   2e3f0:	f7fe fffa 	bl	2d3e8 <nct_input>
		if (err != 0) {
   2e3f4:	2800      	cmp	r0, #0
   2e3f6:	d0ca      	beq.n	2e38e <nct_mqtt_evt_handler+0xe6>
   2e3f8:	4a3e      	ldr	r2, [pc, #248]	; (2e4f4 <nct_mqtt_evt_handler+0x24c>)
   2e3fa:	4b3f      	ldr	r3, [pc, #252]	; (2e4f8 <nct_mqtt_evt_handler+0x250>)
			LOG_ERR("nct_input: failed %d", err);
   2e3fc:	494a      	ldr	r1, [pc, #296]	; (2e528 <nct_mqtt_evt_handler+0x280>)
   2e3fe:	1a9b      	subs	r3, r3, r2
   2e400:	08db      	lsrs	r3, r3, #3
   2e402:	019b      	lsls	r3, r3, #6
   2e404:	4602      	mov	r2, r0
   2e406:	f043 0001 	orr.w	r0, r3, #1
   2e40a:	f013 fa09 	bl	41820 <log_string_sync>
   2e40e:	e7be      	b.n	2e38e <nct_mqtt_evt_handler+0xe6>
	for (uint32_t index = 0; index < list_size; index++) {
   2e410:	3501      	adds	r5, #1
   2e412:	2d03      	cmp	r5, #3
   2e414:	f107 070c 	add.w	r7, r7, #12
   2e418:	d1c0      	bne.n	2e39c <nct_mqtt_evt_handler+0xf4>
			dc.id = p->message_id;
   2e41a:	8b23      	ldrh	r3, [r4, #24]
   2e41c:	930b      	str	r3, [sp, #44]	; 0x2c
			dc.data.ptr = nct.payload_buf;
   2e41e:	4b3e      	ldr	r3, [pc, #248]	; (2e518 <nct_mqtt_evt_handler+0x270>)
   2e420:	9308      	str	r3, [sp, #32]
			dc.data.len = p->message.payload.len;
   2e422:	6963      	ldr	r3, [r4, #20]
   2e424:	9307      	str	r3, [sp, #28]
			dc.topic.len = p->message.topic.topic.size;
   2e426:	68a3      	ldr	r3, [r4, #8]
   2e428:	9309      	str	r3, [sp, #36]	; 0x24
			dc.topic.ptr = p->message.topic.topic.utf8;
   2e42a:	6863      	ldr	r3, [r4, #4]
   2e42c:	930a      	str	r3, [sp, #40]	; 0x28
			evt.type = NCT_EVT_DC_RX_DATA;
   2e42e:	2305      	movs	r3, #5
   2e430:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.dc = &dc;
   2e434:	ab07      	add	r3, sp, #28
   2e436:	e7cf      	b.n	2e3d8 <nct_mqtt_evt_handler+0x130>
   2e438:	4b2e      	ldr	r3, [pc, #184]	; (2e4f4 <nct_mqtt_evt_handler+0x24c>)
   2e43a:	4d2f      	ldr	r5, [pc, #188]	; (2e4f8 <nct_mqtt_evt_handler+0x250>)
		LOG_DBG("MQTT_EVT_SUBACK: id = %d result = %d",
   2e43c:	4a30      	ldr	r2, [pc, #192]	; (2e500 <nct_mqtt_evt_handler+0x258>)
   2e43e:	1aed      	subs	r5, r5, r3
   2e440:	08ed      	lsrs	r5, r5, #3
   2e442:	69e3      	ldr	r3, [r4, #28]
   2e444:	01ad      	lsls	r5, r5, #6
   2e446:	9300      	str	r3, [sp, #0]
   2e448:	4938      	ldr	r1, [pc, #224]	; (2e52c <nct_mqtt_evt_handler+0x284>)
   2e44a:	88a3      	ldrh	r3, [r4, #4]
   2e44c:	f045 0004 	orr.w	r0, r5, #4
   2e450:	f013 f9e6 	bl	41820 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2e454:	f240 42d2 	movw	r2, #1234	; 0x4d2
   2e458:	88a3      	ldrh	r3, [r4, #4]
   2e45a:	4293      	cmp	r3, r2
   2e45c:	d135      	bne.n	2e4ca <nct_mqtt_evt_handler+0x222>
			evt.type = NCT_EVT_CC_CONNECTED;
   2e45e:	2301      	movs	r3, #1
   2e460:	e770      	b.n	2e344 <nct_mqtt_evt_handler+0x9c>
   2e462:	4b24      	ldr	r3, [pc, #144]	; (2e4f4 <nct_mqtt_evt_handler+0x24c>)
   2e464:	4824      	ldr	r0, [pc, #144]	; (2e4f8 <nct_mqtt_evt_handler+0x250>)
		LOG_DBG("MQTT_EVT_UNSUBACK");
   2e466:	4a26      	ldr	r2, [pc, #152]	; (2e500 <nct_mqtt_evt_handler+0x258>)
   2e468:	1ac0      	subs	r0, r0, r3
   2e46a:	08c0      	lsrs	r0, r0, #3
   2e46c:	0180      	lsls	r0, r0, #6
   2e46e:	4930      	ldr	r1, [pc, #192]	; (2e530 <nct_mqtt_evt_handler+0x288>)
   2e470:	f040 0004 	orr.w	r0, r0, #4
   2e474:	f013 f9d4 	bl	41820 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2e478:	f240 43d2 	movw	r3, #1234	; 0x4d2
   2e47c:	88a2      	ldrh	r2, [r4, #4]
   2e47e:	429a      	cmp	r2, r3
   2e480:	d185      	bne.n	2e38e <nct_mqtt_evt_handler+0xe6>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   2e482:	2307      	movs	r3, #7
   2e484:	e75e      	b.n	2e344 <nct_mqtt_evt_handler+0x9c>
   2e486:	4b1b      	ldr	r3, [pc, #108]	; (2e4f4 <nct_mqtt_evt_handler+0x24c>)
   2e488:	481b      	ldr	r0, [pc, #108]	; (2e4f8 <nct_mqtt_evt_handler+0x250>)
		LOG_DBG("MQTT_EVT_PUBACK: id = %d result = %d",
   2e48a:	4a1d      	ldr	r2, [pc, #116]	; (2e500 <nct_mqtt_evt_handler+0x258>)
   2e48c:	1ac0      	subs	r0, r0, r3
   2e48e:	08c0      	lsrs	r0, r0, #3
   2e490:	69e3      	ldr	r3, [r4, #28]
   2e492:	0180      	lsls	r0, r0, #6
   2e494:	9300      	str	r3, [sp, #0]
   2e496:	4927      	ldr	r1, [pc, #156]	; (2e534 <nct_mqtt_evt_handler+0x28c>)
   2e498:	88a3      	ldrh	r3, [r4, #4]
   2e49a:	f040 0004 	orr.w	r0, r0, #4
   2e49e:	f013 f9bf 	bl	41820 <log_string_sync>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   2e4a2:	2304      	movs	r3, #4
   2e4a4:	f88d 3018 	strb.w	r3, [sp, #24]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   2e4a8:	88a3      	ldrh	r3, [r4, #4]
   2e4aa:	9305      	str	r3, [sp, #20]
	if (event_notify) {
   2e4ac:	e79f      	b.n	2e3ee <nct_mqtt_evt_handler+0x146>
   2e4ae:	4b11      	ldr	r3, [pc, #68]	; (2e4f4 <nct_mqtt_evt_handler+0x24c>)
   2e4b0:	4811      	ldr	r0, [pc, #68]	; (2e4f8 <nct_mqtt_evt_handler+0x250>)
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);
   2e4b2:	4a13      	ldr	r2, [pc, #76]	; (2e500 <nct_mqtt_evt_handler+0x258>)
   2e4b4:	1ac0      	subs	r0, r0, r3
   2e4b6:	08c0      	lsrs	r0, r0, #3
   2e4b8:	0180      	lsls	r0, r0, #6
   2e4ba:	69e3      	ldr	r3, [r4, #28]
   2e4bc:	491e      	ldr	r1, [pc, #120]	; (2e538 <nct_mqtt_evt_handler+0x290>)
   2e4be:	f040 0004 	orr.w	r0, r0, #4
   2e4c2:	f013 f9ad 	bl	41820 <log_string_sync>
		evt.type = NCT_EVT_DISCONNECTED;
   2e4c6:	2309      	movs	r3, #9
   2e4c8:	e73c      	b.n	2e344 <nct_mqtt_evt_handler+0x9c>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   2e4ca:	f242 223d 	movw	r2, #8765	; 0x223d
   2e4ce:	4293      	cmp	r3, r2
   2e4d0:	f47f af5d 	bne.w	2e38e <nct_mqtt_evt_handler+0xe6>
			evt.type = NCT_EVT_DC_CONNECTED;
   2e4d4:	2302      	movs	r3, #2
			err = save_session_state(1);
   2e4d6:	2001      	movs	r0, #1
			evt.type = NCT_EVT_DC_CONNECTED;
   2e4d8:	f88d 3018 	strb.w	r3, [sp, #24]
			err = save_session_state(1);
   2e4dc:	f7ff febc 	bl	2e258 <save_session_state>
			if (err) {
   2e4e0:	4602      	mov	r2, r0
   2e4e2:	2800      	cmp	r0, #0
   2e4e4:	d083      	beq.n	2e3ee <nct_mqtt_evt_handler+0x146>
				LOG_ERR("Failed to save session state: %d",
   2e4e6:	4915      	ldr	r1, [pc, #84]	; (2e53c <nct_mqtt_evt_handler+0x294>)
   2e4e8:	f045 0001 	orr.w	r0, r5, #1
   2e4ec:	f013 f998 	bl	41820 <log_string_sync>
	if (event_notify) {
   2e4f0:	e77d      	b.n	2e3ee <nct_mqtt_evt_handler+0x146>
   2e4f2:	bf00      	nop
   2e4f4:	000463bc 	.word	0x000463bc
   2e4f8:	000464c4 	.word	0x000464c4
   2e4fc:	0004c1cd 	.word	0x0004c1cd
   2e500:	0004c831 	.word	0x0004c831
   2e504:	0004c1f3 	.word	0x0004c1f3
   2e508:	0004c214 	.word	0x0004c214
   2e50c:	0004c22d 	.word	0x0004c22d
   2e510:	2002cc7f 	.word	0x2002cc7f
   2e514:	0004c24d 	.word	0x0004c24d
   2e518:	20024cfc 	.word	0x20024cfc
   2e51c:	0004c274 	.word	0x0004c274
   2e520:	00046e7c 	.word	0x00046e7c
   2e524:	00046ea0 	.word	0x00046ea0
   2e528:	0004c341 	.word	0x0004c341
   2e52c:	0004c293 	.word	0x0004c293
   2e530:	0004c2dd 	.word	0x0004c2dd
   2e534:	0004c2f3 	.word	0x0004c2f3
   2e538:	0004c31c 	.word	0x0004c31c
   2e53c:	0004c2bc 	.word	0x0004c2bc

0002e540 <nct_mqtt_connect>:
{
   2e540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2e544:	4d45      	ldr	r5, [pc, #276]	; (2e65c <nct_mqtt_connect+0x11c>)
   2e546:	4b46      	ldr	r3, [pc, #280]	; (2e660 <nct_mqtt_connect+0x120>)
	if (!initialized) {
   2e548:	f8df 8148 	ldr.w	r8, [pc, #328]	; 2e694 <nct_mqtt_connect+0x154>
   2e54c:	1aed      	subs	r5, r5, r3
   2e54e:	f898 6000 	ldrb.w	r6, [r8]
   2e552:	08ed      	lsrs	r5, r5, #3
   2e554:	4c43      	ldr	r4, [pc, #268]	; (2e664 <nct_mqtt_connect+0x124>)
   2e556:	01ad      	lsls	r5, r5, #6
   2e558:	2e00      	cmp	r6, #0
   2e55a:	d151      	bne.n	2e600 <nct_mqtt_connect+0xc0>
		mqtt_client_init(&nct.client);
   2e55c:	f104 001c 	add.w	r0, r4, #28
   2e560:	f014 fc80 	bl	42e64 <mqtt_client_init>
		nct.client.evt_cb = nct_mqtt_evt_handler;
   2e564:	4b40      	ldr	r3, [pc, #256]	; (2e668 <nct_mqtt_connect+0x128>)
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   2e566:	4841      	ldr	r0, [pc, #260]	; (2e66c <nct_mqtt_connect+0x12c>)
		nct.client.broker = (struct sockaddr *)&nct.broker;
   2e568:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
		nct.client.evt_cb = nct_mqtt_evt_handler;
   2e56c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		nct.client.broker = (struct sockaddr *)&nct.broker;
   2e570:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   2e574:	6660      	str	r0, [r4, #100]	; 0x64
		nct.client.client_id.size = strlen(client_id_buf);
   2e576:	f7ee fe71 	bl	1d25c <strlen>
		nct.client.protocol_version = MQTT_VERSION_3_1_1;
   2e57a:	2304      	movs	r3, #4
   2e57c:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2e580:	4b3b      	ldr	r3, [pc, #236]	; (2e670 <nct_mqtt_connect+0x130>)
   2e582:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
   2e586:	781b      	ldrb	r3, [r3, #0]
		LOG_DBG("MQTT clean session flag: %u",
   2e588:	493a      	ldr	r1, [pc, #232]	; (2e674 <nct_mqtt_connect+0x134>)
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2e58a:	f083 0301 	eor.w	r3, r3, #1
   2e58e:	f363 0241 	bfi	r2, r3, #1, #1
		nct.client.client_id.size = strlen(client_id_buf);
   2e592:	66a0      	str	r0, [r4, #104]	; 0x68
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2e594:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
		LOG_DBG("MQTT clean session flag: %u",
   2e598:	f045 0004 	orr.w	r0, r5, #4
   2e59c:	4a36      	ldr	r2, [pc, #216]	; (2e678 <nct_mqtt_connect+0x138>)
		nct.client.user_name = NULL;
   2e59e:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
		LOG_DBG("MQTT clean session flag: %u",
   2e5a2:	f013 f93d 	bl	41820 <log_string_sync>
		nct.client.rx_buf = nct.rx_buf;
   2e5a6:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
   2e5aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   2e5ae:	4627      	mov	r7, r4
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2e5b0:	f44f 7380 	mov.w	r3, #256	; 0x100
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2e5b4:	f04f 0901 	mov.w	r9, #1
		nct.client.tx_buf = nct.tx_buf;
   2e5b8:	f504 72ec 	add.w	r2, r4, #472	; 0x1d8
   2e5bc:	f104 0648 	add.w	r6, r4, #72	; 0x48
		nct.client.tx_buf_size = sizeof(nct.tx_buf);
   2e5c0:	e9c4 2323 	strd	r2, r3, [r4, #140]	; 0x8c
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2e5c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   2e5c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2e5ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2e5cc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   2e5d0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		err = aws_fota_init(&nct.client, aws_fota_cb_handler);
   2e5d4:	4929      	ldr	r1, [pc, #164]	; (2e67c <nct_mqtt_connect+0x13c>)
   2e5d6:	f104 001c 	add.w	r0, r4, #28
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2e5da:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
		err = aws_fota_init(&nct.client, aws_fota_cb_handler);
   2e5de:	f002 fe83 	bl	312e8 <aws_fota_init>
		if (err != 0) {
   2e5e2:	4602      	mov	r2, r0
   2e5e4:	b150      	cbz	r0, 2e5fc <nct_mqtt_connect+0xbc>
			LOG_ERR("aws_fota_init failed %d", err);
   2e5e6:	4926      	ldr	r1, [pc, #152]	; (2e680 <nct_mqtt_connect+0x140>)
   2e5e8:	ea45 0009 	orr.w	r0, r5, r9
   2e5ec:	f013 f918 	bl	41820 <log_string_sync>
			return -ENOEXEC;
   2e5f0:	f06f 0607 	mvn.w	r6, #7
}
   2e5f4:	4630      	mov	r0, r6
   2e5f6:	b004      	add	sp, #16
   2e5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		initialized = true;
   2e5fc:	f888 9000 	strb.w	r9, [r8]
	err = mqtt_connect(&nct.client);
   2e600:	4820      	ldr	r0, [pc, #128]	; (2e684 <nct_mqtt_connect+0x144>)
   2e602:	f014 fc48 	bl	42e96 <mqtt_connect>
	if (err != 0) {
   2e606:	4606      	mov	r6, r0
   2e608:	b138      	cbz	r0, 2e61a <nct_mqtt_connect+0xda>
		LOG_DBG("mqtt_connect failed %d", err);
   2e60a:	4603      	mov	r3, r0
   2e60c:	4a1a      	ldr	r2, [pc, #104]	; (2e678 <nct_mqtt_connect+0x138>)
   2e60e:	491e      	ldr	r1, [pc, #120]	; (2e688 <nct_mqtt_connect+0x148>)
   2e610:	f045 0004 	orr.w	r0, r5, #4
   2e614:	f013 f904 	bl	41820 <log_string_sync>
		return err;
   2e618:	e7ec      	b.n	2e5f4 <nct_mqtt_connect+0xb4>
		struct timeval timeout = {
   2e61a:	273c      	movs	r7, #60	; 0x3c
   2e61c:	9003      	str	r0, [sp, #12]
   2e61e:	9702      	str	r7, [sp, #8]
	return (int)mqtt_keepalive_time_left(&nct.client);
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
   2e620:	6c60      	ldr	r0, [r4, #68]	; 0x44
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2e622:	2308      	movs	r3, #8
   2e624:	2215      	movs	r2, #21
   2e626:	9300      	str	r3, [sp, #0]
   2e628:	2101      	movs	r1, #1
   2e62a:	446b      	add	r3, sp
   2e62c:	f013 fd47 	bl	420be <z_impl_zsock_setsockopt>
		if (err == -1) {
   2e630:	1c43      	adds	r3, r0, #1
   2e632:	4604      	mov	r4, r0
   2e634:	d109      	bne.n	2e64a <nct_mqtt_connect+0x10a>
			LOG_ERR("Failed to set timeout, errno: %d", errno);
   2e636:	f014 f81c 	bl	42672 <__errno>
   2e63a:	f045 0501 	orr.w	r5, r5, #1
   2e63e:	6802      	ldr	r2, [r0, #0]
   2e640:	4912      	ldr	r1, [pc, #72]	; (2e68c <nct_mqtt_connect+0x14c>)
   2e642:	4628      	mov	r0, r5
   2e644:	f013 f8ec 	bl	41820 <log_string_sync>
			err = 0;
   2e648:	e7d4      	b.n	2e5f4 <nct_mqtt_connect+0xb4>
			LOG_INF("Using socket send timeout of %d seconds",
   2e64a:	463a      	mov	r2, r7
   2e64c:	4910      	ldr	r1, [pc, #64]	; (2e690 <nct_mqtt_connect+0x150>)
   2e64e:	f045 0003 	orr.w	r0, r5, #3
   2e652:	f013 f8e5 	bl	41820 <log_string_sync>
   2e656:	4626      	mov	r6, r4
	return err;
   2e658:	e7cc      	b.n	2e5f4 <nct_mqtt_connect+0xb4>
   2e65a:	bf00      	nop
   2e65c:	000464c4 	.word	0x000464c4
   2e660:	000463bc 	.word	0x000463bc
   2e664:	20024a24 	.word	0x20024a24
   2e668:	0002e2a9 	.word	0x0002e2a9
   2e66c:	2002cc61 	.word	0x2002cc61
   2e670:	2002cc7f 	.word	0x2002cc7f
   2e674:	0004c356 	.word	0x0004c356
   2e678:	0004c820 	.word	0x0004c820
   2e67c:	0002dfb1 	.word	0x0002dfb1
   2e680:	0004c376 	.word	0x0004c376
   2e684:	20024a40 	.word	0x20024a40
   2e688:	0004c38e 	.word	0x0004c38e
   2e68c:	0004c3a9 	.word	0x0004c3a9
   2e690:	0004c3ca 	.word	0x0004c3ca
   2e694:	2002cc7e 	.word	0x2002cc7e

0002e698 <nct_init>:
{
   2e698:	b530      	push	{r4, r5, lr}
   2e69a:	b087      	sub	sp, #28
	dc_endpoint_reset();
   2e69c:	f7ff fc2c 	bl	2def8 <dc_endpoint_reset>
	at_socket_fd = nrf_socket(NRF_AF_LTE, NRF_SOCK_DGRAM, NRF_PROTO_AT);
   2e6a0:	f240 2201 	movw	r2, #513	; 0x201
   2e6a4:	2102      	movs	r1, #2
   2e6a6:	2066      	movs	r0, #102	; 0x66
   2e6a8:	f00a ff54 	bl	39554 <nrf_socket>
	__ASSERT_NO_MSG(at_socket_fd >= 0);
   2e6ac:	1e04      	subs	r4, r0, #0
   2e6ae:	da0b      	bge.n	2e6c8 <nct_init+0x30>
   2e6b0:	4973      	ldr	r1, [pc, #460]	; (2e880 <nct_init+0x1e8>)
   2e6b2:	4874      	ldr	r0, [pc, #464]	; (2e884 <nct_init+0x1ec>)
   2e6b4:	f240 1341 	movw	r3, #321	; 0x141
   2e6b8:	4a73      	ldr	r2, [pc, #460]	; (2e888 <nct_init+0x1f0>)
   2e6ba:	f012 fe83 	bl	413c4 <printk>
   2e6be:	f240 1141 	movw	r1, #321	; 0x141
   2e6c2:	4871      	ldr	r0, [pc, #452]	; (2e888 <nct_init+0x1f0>)
   2e6c4:	f013 f89b 	bl	417fe <assert_post_action>
	bytes_written = nrf_write(at_socket_fd, "AT+CGSN", 7);
   2e6c8:	2207      	movs	r2, #7
   2e6ca:	4620      	mov	r0, r4
   2e6cc:	496f      	ldr	r1, [pc, #444]	; (2e88c <nct_init+0x1f4>)
   2e6ce:	f00a ff7d 	bl	395cc <nrf_write>
	__ASSERT_NO_MSG(bytes_written == 7);
   2e6d2:	2807      	cmp	r0, #7
   2e6d4:	d00b      	beq.n	2e6ee <nct_init+0x56>
   2e6d6:	496e      	ldr	r1, [pc, #440]	; (2e890 <nct_init+0x1f8>)
   2e6d8:	486a      	ldr	r0, [pc, #424]	; (2e884 <nct_init+0x1ec>)
   2e6da:	f44f 73a2 	mov.w	r3, #324	; 0x144
   2e6de:	4a6a      	ldr	r2, [pc, #424]	; (2e888 <nct_init+0x1f0>)
   2e6e0:	f012 fe70 	bl	413c4 <printk>
   2e6e4:	f44f 71a2 	mov.w	r1, #324	; 0x144
   2e6e8:	4867      	ldr	r0, [pc, #412]	; (2e888 <nct_init+0x1f0>)
   2e6ea:	f013 f888 	bl	417fe <assert_post_action>
	bytes_read = nrf_read(at_socket_fd, imei_buf, NRF_IMEI_LEN);
   2e6ee:	ad02      	add	r5, sp, #8
   2e6f0:	220f      	movs	r2, #15
   2e6f2:	4629      	mov	r1, r5
   2e6f4:	4620      	mov	r0, r4
   2e6f6:	f00a ffb5 	bl	39664 <nrf_read>
	__ASSERT_NO_MSG(bytes_read == NRF_IMEI_LEN);
   2e6fa:	280f      	cmp	r0, #15
   2e6fc:	d00b      	beq.n	2e716 <nct_init+0x7e>
   2e6fe:	4965      	ldr	r1, [pc, #404]	; (2e894 <nct_init+0x1fc>)
   2e700:	4860      	ldr	r0, [pc, #384]	; (2e884 <nct_init+0x1ec>)
   2e702:	f240 1347 	movw	r3, #327	; 0x147
   2e706:	4a60      	ldr	r2, [pc, #384]	; (2e888 <nct_init+0x1f0>)
   2e708:	f012 fe5c 	bl	413c4 <printk>
   2e70c:	f240 1147 	movw	r1, #327	; 0x147
   2e710:	485d      	ldr	r0, [pc, #372]	; (2e888 <nct_init+0x1f0>)
   2e712:	f013 f874 	bl	417fe <assert_post_action>
	imei_buf[NRF_IMEI_LEN] = 0;
   2e716:	2300      	movs	r3, #0
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "%s%s", CONFIG_NRF_CLOUD_CLIENT_ID_PREFIX, imei_buf);
   2e718:	2114      	movs	r1, #20
	imei_buf[NRF_IMEI_LEN] = 0;
   2e71a:	f88d 3017 	strb.w	r3, [sp, #23]
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "%s%s", CONFIG_NRF_CLOUD_CLIENT_ID_PREFIX, imei_buf);
   2e71e:	4a5e      	ldr	r2, [pc, #376]	; (2e898 <nct_init+0x200>)
   2e720:	4b5e      	ldr	r3, [pc, #376]	; (2e89c <nct_init+0x204>)
   2e722:	485f      	ldr	r0, [pc, #380]	; (2e8a0 <nct_init+0x208>)
   2e724:	9500      	str	r5, [sp, #0]
   2e726:	f011 fa31 	bl	3fb8c <sniprintf>
	ret = nrf_close(at_socket_fd);
   2e72a:	4620      	mov	r0, r4
   2e72c:	f00a ff24 	bl	39578 <nrf_close>
	__ASSERT_NO_MSG(ret == 0);
   2e730:	b158      	cbz	r0, 2e74a <nct_init+0xb2>
   2e732:	495c      	ldr	r1, [pc, #368]	; (2e8a4 <nct_init+0x20c>)
   2e734:	4853      	ldr	r0, [pc, #332]	; (2e884 <nct_init+0x1ec>)
   2e736:	f240 134d 	movw	r3, #333	; 0x14d
   2e73a:	4a53      	ldr	r2, [pc, #332]	; (2e888 <nct_init+0x1f0>)
   2e73c:	f012 fe42 	bl	413c4 <printk>
   2e740:	f240 114d 	movw	r1, #333	; 0x14d
   2e744:	4850      	ldr	r0, [pc, #320]	; (2e888 <nct_init+0x1f0>)
   2e746:	f013 f85a 	bl	417fe <assert_post_action>
   2e74a:	4b57      	ldr	r3, [pc, #348]	; (2e8a8 <nct_init+0x210>)
   2e74c:	4d57      	ldr	r5, [pc, #348]	; (2e8ac <nct_init+0x214>)
	LOG_DBG("client_id = %s", log_strdup(id));
   2e74e:	4854      	ldr	r0, [pc, #336]	; (2e8a0 <nct_init+0x208>)
   2e750:	1aed      	subs	r5, r5, r3
   2e752:	f013 f878 	bl	41846 <log_strdup>
   2e756:	08ed      	lsrs	r5, r5, #3
   2e758:	01ad      	lsls	r5, r5, #6
   2e75a:	f045 0404 	orr.w	r4, r5, #4
   2e75e:	4603      	mov	r3, r0
   2e760:	4a53      	ldr	r2, [pc, #332]	; (2e8b0 <nct_init+0x218>)
   2e762:	4620      	mov	r0, r4
   2e764:	4953      	ldr	r1, [pc, #332]	; (2e8b4 <nct_init+0x21c>)
   2e766:	f013 f85b 	bl	41820 <log_string_sync>
	ret = snprintf(shadow_base_topic, sizeof(shadow_base_topic),
   2e76a:	2127      	movs	r1, #39	; 0x27
   2e76c:	4b4c      	ldr	r3, [pc, #304]	; (2e8a0 <nct_init+0x208>)
   2e76e:	4a52      	ldr	r2, [pc, #328]	; (2e8b8 <nct_init+0x220>)
   2e770:	4852      	ldr	r0, [pc, #328]	; (2e8bc <nct_init+0x224>)
   2e772:	f011 fa0b 	bl	3fb8c <sniprintf>
	if (ret != NCT_SHADOW_BASE_TOPIC_LEN) {
   2e776:	2826      	cmp	r0, #38	; 0x26
   2e778:	d004      	beq.n	2e784 <nct_init+0xec>
		return -ENOMEM;
   2e77a:	f06f 040b 	mvn.w	r4, #11
}
   2e77e:	4620      	mov	r0, r4
   2e780:	b007      	add	sp, #28
   2e782:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("shadow_base_topic: %s", log_strdup(shadow_base_topic));
   2e784:	484d      	ldr	r0, [pc, #308]	; (2e8bc <nct_init+0x224>)
   2e786:	f013 f85e 	bl	41846 <log_strdup>
   2e78a:	4a4d      	ldr	r2, [pc, #308]	; (2e8c0 <nct_init+0x228>)
   2e78c:	4603      	mov	r3, r0
   2e78e:	494d      	ldr	r1, [pc, #308]	; (2e8c4 <nct_init+0x22c>)
   2e790:	4620      	mov	r0, r4
   2e792:	f013 f845 	bl	41820 <log_string_sync>
	ret = snprintf(accepted_topic, sizeof(accepted_topic),
   2e796:	2128      	movs	r1, #40	; 0x28
   2e798:	4b41      	ldr	r3, [pc, #260]	; (2e8a0 <nct_init+0x208>)
   2e79a:	4a4b      	ldr	r2, [pc, #300]	; (2e8c8 <nct_init+0x230>)
   2e79c:	484b      	ldr	r0, [pc, #300]	; (2e8cc <nct_init+0x234>)
   2e79e:	f011 f9f5 	bl	3fb8c <sniprintf>
	if (ret != NCT_ACCEPTED_TOPIC_LEN) {
   2e7a2:	2827      	cmp	r0, #39	; 0x27
   2e7a4:	d1e9      	bne.n	2e77a <nct_init+0xe2>
	LOG_DBG("accepted_topic: %s", log_strdup(accepted_topic));
   2e7a6:	4849      	ldr	r0, [pc, #292]	; (2e8cc <nct_init+0x234>)
   2e7a8:	f013 f84d 	bl	41846 <log_strdup>
   2e7ac:	4a44      	ldr	r2, [pc, #272]	; (2e8c0 <nct_init+0x228>)
   2e7ae:	4603      	mov	r3, r0
   2e7b0:	4947      	ldr	r1, [pc, #284]	; (2e8d0 <nct_init+0x238>)
   2e7b2:	4620      	mov	r0, r4
   2e7b4:	f013 f834 	bl	41820 <log_string_sync>
	ret = snprintf(rejected_topic, sizeof(rejected_topic),
   2e7b8:	2134      	movs	r1, #52	; 0x34
   2e7ba:	4b39      	ldr	r3, [pc, #228]	; (2e8a0 <nct_init+0x208>)
   2e7bc:	4a45      	ldr	r2, [pc, #276]	; (2e8d4 <nct_init+0x23c>)
   2e7be:	4846      	ldr	r0, [pc, #280]	; (2e8d8 <nct_init+0x240>)
   2e7c0:	f011 f9e4 	bl	3fb8c <sniprintf>
	if (ret != NCT_REJECTED_TOPIC_LEN) {
   2e7c4:	2833      	cmp	r0, #51	; 0x33
   2e7c6:	d1d8      	bne.n	2e77a <nct_init+0xe2>
	LOG_DBG("rejected_topic: %s", log_strdup(rejected_topic));
   2e7c8:	4843      	ldr	r0, [pc, #268]	; (2e8d8 <nct_init+0x240>)
   2e7ca:	f013 f83c 	bl	41846 <log_strdup>
   2e7ce:	4a3c      	ldr	r2, [pc, #240]	; (2e8c0 <nct_init+0x228>)
   2e7d0:	4603      	mov	r3, r0
   2e7d2:	4942      	ldr	r1, [pc, #264]	; (2e8dc <nct_init+0x244>)
   2e7d4:	4620      	mov	r0, r4
   2e7d6:	f013 f823 	bl	41820 <log_string_sync>
	ret = snprintf(update_delta_topic, sizeof(update_delta_topic),
   2e7da:	2134      	movs	r1, #52	; 0x34
   2e7dc:	4b30      	ldr	r3, [pc, #192]	; (2e8a0 <nct_init+0x208>)
   2e7de:	4a40      	ldr	r2, [pc, #256]	; (2e8e0 <nct_init+0x248>)
   2e7e0:	4840      	ldr	r0, [pc, #256]	; (2e8e4 <nct_init+0x24c>)
   2e7e2:	f011 f9d3 	bl	3fb8c <sniprintf>
	if (ret != NCT_UPDATE_DELTA_TOPIC_LEN) {
   2e7e6:	2833      	cmp	r0, #51	; 0x33
   2e7e8:	d1c7      	bne.n	2e77a <nct_init+0xe2>
	LOG_DBG("update_delta_topic: %s", log_strdup(update_delta_topic));
   2e7ea:	483e      	ldr	r0, [pc, #248]	; (2e8e4 <nct_init+0x24c>)
   2e7ec:	f013 f82b 	bl	41846 <log_strdup>
   2e7f0:	4a33      	ldr	r2, [pc, #204]	; (2e8c0 <nct_init+0x228>)
   2e7f2:	4603      	mov	r3, r0
   2e7f4:	493c      	ldr	r1, [pc, #240]	; (2e8e8 <nct_init+0x250>)
   2e7f6:	4620      	mov	r0, r4
   2e7f8:	f013 f812 	bl	41820 <log_string_sync>
	ret = snprintf(update_topic, sizeof(update_topic), NCT_UPDATE_TOPIC,
   2e7fc:	212e      	movs	r1, #46	; 0x2e
   2e7fe:	4b28      	ldr	r3, [pc, #160]	; (2e8a0 <nct_init+0x208>)
   2e800:	4a3a      	ldr	r2, [pc, #232]	; (2e8ec <nct_init+0x254>)
   2e802:	483b      	ldr	r0, [pc, #236]	; (2e8f0 <nct_init+0x258>)
   2e804:	f011 f9c2 	bl	3fb8c <sniprintf>
	if (ret != NCT_UPDATE_TOPIC_LEN) {
   2e808:	282d      	cmp	r0, #45	; 0x2d
   2e80a:	d1b6      	bne.n	2e77a <nct_init+0xe2>
	LOG_DBG("update_topic: %s", log_strdup(update_topic));
   2e80c:	4838      	ldr	r0, [pc, #224]	; (2e8f0 <nct_init+0x258>)
   2e80e:	f013 f81a 	bl	41846 <log_strdup>
   2e812:	4a2b      	ldr	r2, [pc, #172]	; (2e8c0 <nct_init+0x228>)
   2e814:	4603      	mov	r3, r0
   2e816:	4937      	ldr	r1, [pc, #220]	; (2e8f4 <nct_init+0x25c>)
   2e818:	4620      	mov	r0, r4
   2e81a:	f013 f801 	bl	41820 <log_string_sync>
	ret = snprintf(shadow_get_topic, sizeof(shadow_get_topic),
   2e81e:	212b      	movs	r1, #43	; 0x2b
   2e820:	4b1f      	ldr	r3, [pc, #124]	; (2e8a0 <nct_init+0x208>)
   2e822:	4a35      	ldr	r2, [pc, #212]	; (2e8f8 <nct_init+0x260>)
   2e824:	4835      	ldr	r0, [pc, #212]	; (2e8fc <nct_init+0x264>)
   2e826:	f011 f9b1 	bl	3fb8c <sniprintf>
	if (ret != NCT_SHADOW_GET_LEN) {
   2e82a:	282a      	cmp	r0, #42	; 0x2a
   2e82c:	d1a5      	bne.n	2e77a <nct_init+0xe2>
	LOG_DBG("shadow_get_topic: %s", log_strdup(shadow_get_topic));
   2e82e:	4833      	ldr	r0, [pc, #204]	; (2e8fc <nct_init+0x264>)
   2e830:	f013 f809 	bl	41846 <log_strdup>
   2e834:	4a22      	ldr	r2, [pc, #136]	; (2e8c0 <nct_init+0x228>)
   2e836:	4603      	mov	r3, r0
   2e838:	4931      	ldr	r1, [pc, #196]	; (2e900 <nct_init+0x268>)
   2e83a:	4620      	mov	r0, r4
   2e83c:	f012 fff0 	bl	41820 <log_string_sync>
	ret = settings_subsys_init();
   2e840:	f7f7 f9f8 	bl	25c34 <settings_subsys_init>
	if (ret) {
   2e844:	4604      	mov	r4, r0
   2e846:	b130      	cbz	r0, 2e856 <nct_init+0x1be>
		LOG_ERR("Settings init failed: %d", ret);
   2e848:	4602      	mov	r2, r0
   2e84a:	492e      	ldr	r1, [pc, #184]	; (2e904 <nct_init+0x26c>)
		LOG_ERR("Cannot load settings: %d", ret);
   2e84c:	f045 0001 	orr.w	r0, r5, #1
   2e850:	f012 ffe6 	bl	41820 <log_string_sync>
   2e854:	e793      	b.n	2e77e <nct_init+0xe6>
	ret = settings_load_subtree(settings_handler_nrf_cloud.name);
   2e856:	482c      	ldr	r0, [pc, #176]	; (2e908 <nct_init+0x270>)
   2e858:	f7f7 f8ae 	bl	259b8 <settings_load_subtree>
	if (ret) {
   2e85c:	4604      	mov	r4, r0
   2e85e:	b110      	cbz	r0, 2e866 <nct_init+0x1ce>
		LOG_ERR("Cannot load settings: %d", ret);
   2e860:	4602      	mov	r2, r0
   2e862:	492a      	ldr	r1, [pc, #168]	; (2e90c <nct_init+0x274>)
   2e864:	e7f2      	b.n	2e84c <nct_init+0x1b4>
	nct.tls_config.peer_verify = 2;
   2e866:	2202      	movs	r2, #2
   2e868:	4b29      	ldr	r3, [pc, #164]	; (2e910 <nct_init+0x278>)
	nct.tls_config.cipher_count = 0;
   2e86a:	e9c3 2000 	strd	r2, r0, [r3]
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   2e86e:	2201      	movs	r2, #1
   2e870:	60da      	str	r2, [r3, #12]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2e872:	4a28      	ldr	r2, [pc, #160]	; (2e914 <nct_init+0x27c>)
	nct.tls_config.cipher_list = NULL;
   2e874:	6098      	str	r0, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2e876:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   2e878:	4a27      	ldr	r2, [pc, #156]	; (2e918 <nct_init+0x280>)
   2e87a:	615a      	str	r2, [r3, #20]
	return nct_provision();
   2e87c:	e77f      	b.n	2e77e <nct_init+0xe6>
   2e87e:	bf00      	nop
   2e880:	0004c435 	.word	0x0004c435
   2e884:	00048156 	.word	0x00048156
   2e888:	0004c3f2 	.word	0x0004c3f2
   2e88c:	0004b13d 	.word	0x0004b13d
   2e890:	0004c447 	.word	0x0004c447
   2e894:	0004c45a 	.word	0x0004c45a
   2e898:	0004d601 	.word	0x0004d601
   2e89c:	0004c46b 	.word	0x0004c46b
   2e8a0:	2002cc61 	.word	0x2002cc61
   2e8a4:	00049d81 	.word	0x00049d81
   2e8a8:	000463bc 	.word	0x000463bc
   2e8ac:	000464c4 	.word	0x000464c4
   2e8b0:	0004c7c2 	.word	0x0004c7c2
   2e8b4:	0004c470 	.word	0x0004c470
   2e8b8:	0004c483 	.word	0x0004c483
   2e8bc:	2002ccb4 	.word	0x2002ccb4
   2e8c0:	0004c7d4 	.word	0x0004c7d4
   2e8c4:	0004c499 	.word	0x0004c499
   2e8c8:	0004c4b3 	.word	0x0004c4b3
   2e8cc:	2002cc39 	.word	0x2002cc39
   2e8d0:	0004c4ca 	.word	0x0004c4ca
   2e8d4:	0004c4e1 	.word	0x0004c4e1
   2e8d8:	2002cc80 	.word	0x2002cc80
   2e8dc:	0004c504 	.word	0x0004c504
   2e8e0:	0004c51b 	.word	0x0004c51b
   2e8e4:	2002cd06 	.word	0x2002cd06
   2e8e8:	0004c53e 	.word	0x0004c53e
   2e8ec:	0004c559 	.word	0x0004c559
   2e8f0:	2002cd3a 	.word	0x2002cd3a
   2e8f4:	0004c576 	.word	0x0004c576
   2e8f8:	0004c58b 	.word	0x0004c58b
   2e8fc:	2002ccdb 	.word	0x2002ccdb
   2e900:	0004c5a5 	.word	0x0004c5a5
   2e904:	0004c5be 	.word	0x0004c5be
   2e908:	0004bad3 	.word	0x0004bad3
   2e90c:	0004c5d7 	.word	0x0004c5d7
   2e910:	20024a24 	.word	0x20024a24
   2e914:	20020740 	.word	0x20020740
   2e918:	0004c5f0 	.word	0x0004c5f0

0002e91c <nct_connect>:
{
   2e91c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e91e:	b09d      	sub	sp, #116	; 0x74
	struct addrinfo hints = {
   2e920:	2250      	movs	r2, #80	; 0x50
   2e922:	2100      	movs	r1, #0
   2e924:	a808      	add	r0, sp, #32
   2e926:	f016 f9fe 	bl	44d26 <memset>
   2e92a:	2301      	movs	r3, #1
   2e92c:	2100      	movs	r1, #0
   2e92e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2e932:	4827      	ldr	r0, [pc, #156]	; (2e9d0 <nct_connect+0xb4>)
   2e934:	ab03      	add	r3, sp, #12
   2e936:	aa08      	add	r2, sp, #32
   2e938:	f013 fb16 	bl	41f68 <zsock_getaddrinfo>
	if (err) {
   2e93c:	4c25      	ldr	r4, [pc, #148]	; (2e9d4 <nct_connect+0xb8>)
   2e93e:	4b26      	ldr	r3, [pc, #152]	; (2e9d8 <nct_connect+0xbc>)
   2e940:	1ae4      	subs	r4, r4, r3
   2e942:	08e4      	lsrs	r4, r4, #3
   2e944:	4603      	mov	r3, r0
   2e946:	b158      	cbz	r0, 2e960 <nct_connect+0x44>
		LOG_DBG("getaddrinfo failed %d", err);
   2e948:	01a4      	lsls	r4, r4, #6
   2e94a:	f044 0004 	orr.w	r0, r4, #4
   2e94e:	4a23      	ldr	r2, [pc, #140]	; (2e9dc <nct_connect+0xc0>)
   2e950:	4923      	ldr	r1, [pc, #140]	; (2e9e0 <nct_connect+0xc4>)
   2e952:	f012 ff65 	bl	41820 <log_string_sync>
		return -ECHILD;
   2e956:	f06f 0409 	mvn.w	r4, #9
}
   2e95a:	4620      	mov	r0, r4
   2e95c:	b01d      	add	sp, #116	; 0x74
   2e95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	addr = result;
   2e960:	01a4      	lsls	r4, r4, #6
   2e962:	9d03      	ldr	r5, [sp, #12]
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2e964:	4f1d      	ldr	r7, [pc, #116]	; (2e9dc <nct_connect+0xc0>)
   2e966:	f044 0604 	orr.w	r6, r4, #4
	while (addr != NULL) {
   2e96a:	b915      	cbnz	r5, 2e972 <nct_connect+0x56>
	err = -ECHILD;
   2e96c:	f06f 0409 	mvn.w	r4, #9
   2e970:	e01f      	b.n	2e9b2 <nct_connect+0x96>
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2e972:	696b      	ldr	r3, [r5, #20]
   2e974:	2b08      	cmp	r3, #8
   2e976:	d120      	bne.n	2e9ba <nct_connect+0x9e>
					->sin_addr.s_addr;
   2e978:	69ab      	ldr	r3, [r5, #24]
			broker->sin_addr.s_addr =
   2e97a:	491a      	ldr	r1, [pc, #104]	; (2e9e4 <nct_connect+0xc8>)
					->sin_addr.s_addr;
   2e97c:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   2e97e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
			broker->sin_family = AF_INET;
   2e982:	4b19      	ldr	r3, [pc, #100]	; (2e9e8 <nct_connect+0xcc>)
   2e984:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   2e988:	2310      	movs	r3, #16
   2e98a:	31a0      	adds	r1, #160	; 0xa0
   2e98c:	eb0d 0203 	add.w	r2, sp, r3
   2e990:	2001      	movs	r0, #1
   2e992:	f7f9 f8fb 	bl	27b8c <z_impl_net_addr_ntop>
			LOG_DBG("IPv4 address: %s", log_strdup(addr_str));
   2e996:	a804      	add	r0, sp, #16
   2e998:	f012 ff55 	bl	41846 <log_strdup>
   2e99c:	f044 0404 	orr.w	r4, r4, #4
   2e9a0:	4603      	mov	r3, r0
   2e9a2:	4a0e      	ldr	r2, [pc, #56]	; (2e9dc <nct_connect+0xc0>)
   2e9a4:	4620      	mov	r0, r4
   2e9a6:	4911      	ldr	r1, [pc, #68]	; (2e9ec <nct_connect+0xd0>)
   2e9a8:	f012 ff3a 	bl	41820 <log_string_sync>
			err = nct_mqtt_connect();
   2e9ac:	f7ff fdc8 	bl	2e540 <nct_mqtt_connect>
   2e9b0:	4604      	mov	r4, r0
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   2e9b2:	9803      	ldr	r0, [sp, #12]
   2e9b4:	f013 fada 	bl	41f6c <zsock_freeaddrinfo>
	return err;
   2e9b8:	e7cf      	b.n	2e95a <nct_connect+0x3e>
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2e9ba:	2208      	movs	r2, #8
   2e9bc:	2118      	movs	r1, #24
   2e9be:	4630      	mov	r0, r6
   2e9c0:	e9cd 2100 	strd	r2, r1, [sp]
   2e9c4:	463a      	mov	r2, r7
   2e9c6:	490a      	ldr	r1, [pc, #40]	; (2e9f0 <nct_connect+0xd4>)
   2e9c8:	f012 ff2a 	bl	41820 <log_string_sync>
		addr = addr->ai_next;
   2e9cc:	682d      	ldr	r5, [r5, #0]
   2e9ce:	e7cc      	b.n	2e96a <nct_connect+0x4e>
   2e9d0:	0004c5f0 	.word	0x0004c5f0
   2e9d4:	000464c4 	.word	0x000464c4
   2e9d8:	000463bc 	.word	0x000463bc
   2e9dc:	0004c846 	.word	0x0004c846
   2e9e0:	0004c61f 	.word	0x0004c61f
   2e9e4:	20024a24 	.word	0x20024a24
   2e9e8:	b3220001 	.word	0xb3220001
   2e9ec:	0004c639 	.word	0x0004c639
   2e9f0:	0004c64e 	.word	0x0004c64e

0002e9f4 <nct_cc_connect>:
{
   2e9f4:	b507      	push	{r0, r1, r2, lr}
   2e9f6:	4b0b      	ldr	r3, [pc, #44]	; (2ea24 <nct_cc_connect+0x30>)
   2e9f8:	480b      	ldr	r0, [pc, #44]	; (2ea28 <nct_cc_connect+0x34>)
	LOG_DBG("nct_cc_connect");
   2e9fa:	4a0c      	ldr	r2, [pc, #48]	; (2ea2c <nct_cc_connect+0x38>)
   2e9fc:	1ac0      	subs	r0, r0, r3
   2e9fe:	08c0      	lsrs	r0, r0, #3
   2ea00:	0180      	lsls	r0, r0, #6
   2ea02:	490b      	ldr	r1, [pc, #44]	; (2ea30 <nct_cc_connect+0x3c>)
   2ea04:	f040 0004 	orr.w	r0, r0, #4
   2ea08:	f012 ff0a 	bl	41820 <log_string_sync>
	const struct mqtt_subscription_list subscription_list = {
   2ea0c:	4b09      	ldr	r3, [pc, #36]	; (2ea34 <nct_cc_connect+0x40>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2ea0e:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2ea10:	9300      	str	r3, [sp, #0]
   2ea12:	4b09      	ldr	r3, [pc, #36]	; (2ea38 <nct_cc_connect+0x44>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2ea14:	4809      	ldr	r0, [pc, #36]	; (2ea3c <nct_cc_connect+0x48>)
	const struct mqtt_subscription_list subscription_list = {
   2ea16:	9301      	str	r3, [sp, #4]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2ea18:	f014 fb15 	bl	43046 <mqtt_subscribe>
}
   2ea1c:	b003      	add	sp, #12
   2ea1e:	f85d fb04 	ldr.w	pc, [sp], #4
   2ea22:	bf00      	nop
   2ea24:	000463bc 	.word	0x000463bc
   2ea28:	000464c4 	.word	0x000464c4
   2ea2c:	0004c852 	.word	0x0004c852
   2ea30:	0004c675 	.word	0x0004c675
   2ea34:	00046e7c 	.word	0x00046e7c
   2ea38:	04d20003 	.word	0x04d20003
   2ea3c:	20024a40 	.word	0x20024a40

0002ea40 <nct_cc_send>:
{
   2ea40:	b570      	push	{r4, r5, r6, lr}
   2ea42:	4b2a      	ldr	r3, [pc, #168]	; (2eaec <nct_cc_send+0xac>)
   2ea44:	4c2a      	ldr	r4, [pc, #168]	; (2eaf0 <nct_cc_send+0xb0>)
	if (cc_data == NULL) {
   2ea46:	4605      	mov	r5, r0
   2ea48:	1ae4      	subs	r4, r4, r3
   2ea4a:	08e4      	lsrs	r4, r4, #3
{
   2ea4c:	b088      	sub	sp, #32
   2ea4e:	01a4      	lsls	r4, r4, #6
	if (cc_data == NULL) {
   2ea50:	b948      	cbnz	r0, 2ea66 <nct_cc_send+0x26>
		LOG_ERR("cc_data == NULL");
   2ea52:	4928      	ldr	r1, [pc, #160]	; (2eaf4 <nct_cc_send+0xb4>)
   2ea54:	f044 0001 	orr.w	r0, r4, #1
   2ea58:	f012 fee2 	bl	41820 <log_string_sync>
		return -EINVAL;
   2ea5c:	f06f 0515 	mvn.w	r5, #21
}
   2ea60:	4628      	mov	r0, r5
   2ea62:	b008      	add	sp, #32
   2ea64:	bd70      	pop	{r4, r5, r6, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   2ea66:	7d06      	ldrb	r6, [r0, #20]
   2ea68:	2e01      	cmp	r6, #1
   2ea6a:	d908      	bls.n	2ea7e <nct_cc_send+0x3e>
		LOG_ERR("opcode = %d", cc_data->opcode);
   2ea6c:	4632      	mov	r2, r6
   2ea6e:	4922      	ldr	r1, [pc, #136]	; (2eaf8 <nct_cc_send+0xb8>)
   2ea70:	f044 0001 	orr.w	r0, r4, #1
   2ea74:	f012 fed4 	bl	41820 <log_string_sync>
		return -ENOTSUP;
   2ea78:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2ea7c:	e7f0      	b.n	2ea60 <nct_cc_send+0x20>
	struct mqtt_publish_param publish = {
   2ea7e:	2210      	movs	r2, #16
   2ea80:	2100      	movs	r1, #0
   2ea82:	eb0d 0002 	add.w	r0, sp, r2
   2ea86:	f016 f94e 	bl	44d26 <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   2ea8a:	230c      	movs	r3, #12
   2ea8c:	4373      	muls	r3, r6
   2ea8e:	491b      	ldr	r1, [pc, #108]	; (2eafc <nct_cc_send+0xbc>)
   2ea90:	18ca      	adds	r2, r1, r3
	struct mqtt_publish_param publish = {
   2ea92:	58cb      	ldr	r3, [r1, r3]
   2ea94:	9302      	str	r3, [sp, #8]
   2ea96:	6853      	ldr	r3, [r2, #4]
   2ea98:	9303      	str	r3, [sp, #12]
   2ea9a:	7a13      	ldrb	r3, [r2, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2ea9c:	682a      	ldr	r2, [r5, #0]
	struct mqtt_publish_param publish = {
   2ea9e:	f88d 3010 	strb.w	r3, [sp, #16]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2eaa2:	b11a      	cbz	r2, 2eaac <nct_cc_send+0x6c>
   2eaa4:	686b      	ldr	r3, [r5, #4]
   2eaa6:	b10b      	cbz	r3, 2eaac <nct_cc_send+0x6c>
		publish.message.payload.len = cc_data->data.len;
   2eaa8:	e9cd 3205 	strd	r3, r2, [sp, #20]
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2eaac:	692b      	ldr	r3, [r5, #16]
   2eaae:	b1c3      	cbz	r3, 2eae2 <nct_cc_send+0xa2>
   2eab0:	b29b      	uxth	r3, r3
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2eab2:	e9cd 6200 	strd	r6, r2, [sp]
   2eab6:	4912      	ldr	r1, [pc, #72]	; (2eb00 <nct_cc_send+0xc0>)
   2eab8:	4a12      	ldr	r2, [pc, #72]	; (2eb04 <nct_cc_send+0xc4>)
   2eaba:	f044 0004 	orr.w	r0, r4, #4
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2eabe:	f8ad 301c 	strh.w	r3, [sp, #28]
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2eac2:	f012 fead 	bl	41820 <log_string_sync>
	int err = mqtt_publish(&nct.client, &publish);
   2eac6:	4810      	ldr	r0, [pc, #64]	; (2eb08 <nct_cc_send+0xc8>)
   2eac8:	a902      	add	r1, sp, #8
   2eaca:	f014 fa27 	bl	42f1c <mqtt_publish>
	if (err) {
   2eace:	4605      	mov	r5, r0
   2ead0:	2800      	cmp	r0, #0
   2ead2:	d0c5      	beq.n	2ea60 <nct_cc_send+0x20>
		LOG_ERR("mqtt_publish failed %d", err);
   2ead4:	4602      	mov	r2, r0
   2ead6:	490d      	ldr	r1, [pc, #52]	; (2eb0c <nct_cc_send+0xcc>)
   2ead8:	f044 0001 	orr.w	r0, r4, #1
   2eadc:	f012 fea0 	bl	41820 <log_string_sync>
   2eae0:	e7be      	b.n	2ea60 <nct_cc_send+0x20>
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2eae2:	490b      	ldr	r1, [pc, #44]	; (2eb10 <nct_cc_send+0xd0>)
   2eae4:	680b      	ldr	r3, [r1, #0]
   2eae6:	3301      	adds	r3, #1
   2eae8:	600b      	str	r3, [r1, #0]
   2eaea:	e7e1      	b.n	2eab0 <nct_cc_send+0x70>
   2eaec:	000463bc 	.word	0x000463bc
   2eaf0:	000464c4 	.word	0x000464c4
   2eaf4:	0004c688 	.word	0x0004c688
   2eaf8:	0004c698 	.word	0x0004c698
   2eafc:	00046eac 	.word	0x00046eac
   2eb00:	0004c6a4 	.word	0x0004c6a4
   2eb04:	0004c861 	.word	0x0004c861
   2eb08:	20024a40 	.word	0x20024a40
   2eb0c:	0004c6d3 	.word	0x0004c6d3
   2eb10:	20024a20 	.word	0x20024a20

0002eb14 <nct_dc_endpoint_set>:
{
   2eb14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2eb18:	4680      	mov	r8, r0
   2eb1a:	460f      	mov	r7, r1
   2eb1c:	4616      	mov	r6, r2
   2eb1e:	4b2c      	ldr	r3, [pc, #176]	; (2ebd0 <nct_dc_endpoint_set+0xbc>)
   2eb20:	4d2c      	ldr	r5, [pc, #176]	; (2ebd4 <nct_dc_endpoint_set+0xc0>)
	LOG_DBG("nct_dc_endpoint_set");
   2eb22:	4a2d      	ldr	r2, [pc, #180]	; (2ebd8 <nct_dc_endpoint_set+0xc4>)
   2eb24:	1aed      	subs	r5, r5, r3
   2eb26:	08ed      	lsrs	r5, r5, #3
   2eb28:	01ad      	lsls	r5, r5, #6
   2eb2a:	492c      	ldr	r1, [pc, #176]	; (2ebdc <nct_dc_endpoint_set+0xc8>)
   2eb2c:	f045 0004 	orr.w	r0, r5, #4
	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   2eb30:	4c2b      	ldr	r4, [pc, #172]	; (2ebe0 <nct_dc_endpoint_set+0xcc>)
	LOG_DBG("nct_dc_endpoint_set");
   2eb32:	f012 fe75 	bl	41820 <log_string_sync>
	dc_endpoint_free();
   2eb36:	f7ff fb73 	bl	2e220 <dc_endpoint_free>
	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   2eb3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2eb3e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
	nct.dc_tx_endp.size = tx_endp->len;
   2eb42:	f8d8 3000 	ldr.w	r3, [r8]
   2eb46:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	nct.dc_rx_endp.utf8 = (const uint8_t *)rx_endp->ptr;
   2eb4a:	687b      	ldr	r3, [r7, #4]
   2eb4c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	nct.dc_rx_endp.size = rx_endp->len;
   2eb50:	683b      	ldr	r3, [r7, #0]
   2eb52:	4627      	mov	r7, r4
   2eb54:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	if (m_endp != NULL) {
   2eb58:	b19e      	cbz	r6, 2eb82 <nct_dc_endpoint_set+0x6e>
		nct.dc_m_endp.size = m_endp->len;
   2eb5a:	6830      	ldr	r0, [r6, #0]
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2eb5c:	6873      	ldr	r3, [r6, #4]
		nct.dc_m_endp.size = m_endp->len;
   2eb5e:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
			NRF_CLOUD_CLIENT_ID_LEN + NCT_JOB_STATUS_TOPIC_LEN + 1;
   2eb62:	301d      	adds	r0, #29
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2eb64:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
		nct.job_status_endp.size =
   2eb68:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
		job_status_utf8 = nrf_cloud_malloc(nct.job_status_endp.size);
   2eb6c:	f010 f9fe 	bl	3ef6c <k_malloc>
		if (job_status_utf8 == NULL) {
   2eb70:	4606      	mov	r6, r0
   2eb72:	b948      	cbnz	r0, 2eb88 <nct_dc_endpoint_set+0x74>
			LOG_ERR("Failed to allocate mem for job status topic");
   2eb74:	491b      	ldr	r1, [pc, #108]	; (2ebe4 <nct_dc_endpoint_set+0xd0>)
   2eb76:	f045 0001 	orr.w	r0, r5, #1
   2eb7a:	f012 fe51 	bl	41820 <log_string_sync>
			nct.job_status_endp.size = 0;
   2eb7e:	e9c4 6633 	strd	r6, r6, [r4, #204]	; 0xcc
}
   2eb82:	b004      	add	sp, #16
   2eb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = snprintf(job_status_utf8,
   2eb88:	4b17      	ldr	r3, [pc, #92]	; (2ebe8 <nct_dc_endpoint_set+0xd4>)
   2eb8a:	4a18      	ldr	r2, [pc, #96]	; (2ebec <nct_dc_endpoint_set+0xd8>)
   2eb8c:	9302      	str	r3, [sp, #8]
   2eb8e:	4b18      	ldr	r3, [pc, #96]	; (2ebf0 <nct_dc_endpoint_set+0xdc>)
   2eb90:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
   2eb94:	9301      	str	r3, [sp, #4]
   2eb96:	4b17      	ldr	r3, [pc, #92]	; (2ebf4 <nct_dc_endpoint_set+0xe0>)
   2eb98:	9300      	str	r3, [sp, #0]
   2eb9a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   2eb9e:	f010 fff5 	bl	3fb8c <sniprintf>
		if ((ret <= 0) || (ret >= nct.job_status_endp.size)) {
   2eba2:	2800      	cmp	r0, #0
   2eba4:	dd03      	ble.n	2ebae <nct_dc_endpoint_set+0x9a>
   2eba6:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   2ebaa:	4283      	cmp	r3, r0
   2ebac:	d80d      	bhi.n	2ebca <nct_dc_endpoint_set+0xb6>
			nrf_cloud_free(job_status_utf8);
   2ebae:	4630      	mov	r0, r6
   2ebb0:	f016 f85c 	bl	44c6c <k_free>
			nct.job_status_endp.utf8 = NULL;
   2ebb4:	2300      	movs	r3, #0
			LOG_ERR("Failed to build job status topic");
   2ebb6:	4910      	ldr	r1, [pc, #64]	; (2ebf8 <nct_dc_endpoint_set+0xe4>)
   2ebb8:	f045 0001 	orr.w	r0, r5, #1
			nct.job_status_endp.size = 0;
   2ebbc:	e9c7 3333 	strd	r3, r3, [r7, #204]	; 0xcc
}
   2ebc0:	b004      	add	sp, #16
   2ebc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Failed to build job status topic");
   2ebc6:	f012 be2b 	b.w	41820 <log_string_sync>
		nct.job_status_endp.size = ret;
   2ebca:	e9c4 6033 	strd	r6, r0, [r4, #204]	; 0xcc
   2ebce:	e7d8      	b.n	2eb82 <nct_dc_endpoint_set+0x6e>
   2ebd0:	000463bc 	.word	0x000463bc
   2ebd4:	000464c4 	.word	0x000464c4
   2ebd8:	0004c86d 	.word	0x0004c86d
   2ebdc:	0004c6ea 	.word	0x0004c6ea
   2ebe0:	20024a24 	.word	0x20024a24
   2ebe4:	0004c702 	.word	0x0004c702
   2ebe8:	0004c72e 	.word	0x0004c72e
   2ebec:	0004d5fd 	.word	0x0004d5fd
   2ebf0:	2002cc61 	.word	0x2002cc61
   2ebf4:	0004c734 	.word	0x0004c734
   2ebf8:	0004c739 	.word	0x0004c739

0002ebfc <nct_dc_endpoint_get>:
{
   2ebfc:	b570      	push	{r4, r5, r6, lr}
   2ebfe:	4606      	mov	r6, r0
   2ec00:	460d      	mov	r5, r1
   2ec02:	4614      	mov	r4, r2
   2ec04:	480f      	ldr	r0, [pc, #60]	; (2ec44 <nct_dc_endpoint_get+0x48>)
   2ec06:	4b10      	ldr	r3, [pc, #64]	; (2ec48 <nct_dc_endpoint_get+0x4c>)
	LOG_DBG("nct_dc_endpoint_get");
   2ec08:	4a10      	ldr	r2, [pc, #64]	; (2ec4c <nct_dc_endpoint_get+0x50>)
   2ec0a:	1a1b      	subs	r3, r3, r0
   2ec0c:	08db      	lsrs	r3, r3, #3
   2ec0e:	019b      	lsls	r3, r3, #6
   2ec10:	f043 0004 	orr.w	r0, r3, #4
   2ec14:	490e      	ldr	r1, [pc, #56]	; (2ec50 <nct_dc_endpoint_get+0x54>)
   2ec16:	f012 fe03 	bl	41820 <log_string_sync>
	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2ec1a:	4b0e      	ldr	r3, [pc, #56]	; (2ec54 <nct_dc_endpoint_get+0x58>)
   2ec1c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2ec20:	6072      	str	r2, [r6, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   2ec22:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   2ec26:	6032      	str	r2, [r6, #0]
	rx_endp->ptr = nct.dc_rx_endp.utf8;
   2ec28:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   2ec2c:	606a      	str	r2, [r5, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2ec2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   2ec32:	602a      	str	r2, [r5, #0]
	if (m_endp != NULL) {
   2ec34:	b12c      	cbz	r4, 2ec42 <nct_dc_endpoint_get+0x46>
		m_endp->ptr = nct.dc_m_endp.utf8;
   2ec36:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
		m_endp->len = nct.dc_m_endp.size;
   2ec3a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		m_endp->ptr = nct.dc_m_endp.utf8;
   2ec3e:	6062      	str	r2, [r4, #4]
		m_endp->len = nct.dc_m_endp.size;
   2ec40:	6023      	str	r3, [r4, #0]
}
   2ec42:	bd70      	pop	{r4, r5, r6, pc}
   2ec44:	000463bc 	.word	0x000463bc
   2ec48:	000464c4 	.word	0x000464c4
   2ec4c:	0004c881 	.word	0x0004c881
   2ec50:	0004c75a 	.word	0x0004c75a
   2ec54:	20024a24 	.word	0x20024a24

0002ec58 <nct_dc_connect>:
{
   2ec58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2ec5a:	4b10      	ldr	r3, [pc, #64]	; (2ec9c <nct_dc_connect+0x44>)
   2ec5c:	4810      	ldr	r0, [pc, #64]	; (2eca0 <nct_dc_connect+0x48>)
	LOG_DBG("nct_dc_connect");
   2ec5e:	4a11      	ldr	r2, [pc, #68]	; (2eca4 <nct_dc_connect+0x4c>)
   2ec60:	1ac0      	subs	r0, r0, r3
   2ec62:	08c0      	lsrs	r0, r0, #3
   2ec64:	0180      	lsls	r0, r0, #6
   2ec66:	4910      	ldr	r1, [pc, #64]	; (2eca8 <nct_dc_connect+0x50>)
   2ec68:	f040 0004 	orr.w	r0, r0, #4
   2ec6c:	f012 fdd8 	bl	41820 <log_string_sync>
			.utf8 = nct.dc_rx_endp.utf8,
   2ec70:	480e      	ldr	r0, [pc, #56]	; (2ecac <nct_dc_connect+0x54>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2ec72:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   2ec74:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
	return mqtt_subscribe(&nct.client, &subscription_list);
   2ec78:	301c      	adds	r0, #28
	struct mqtt_topic subscribe_topic = {
   2ec7a:	9303      	str	r3, [sp, #12]
   2ec7c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2ec80:	9304      	str	r3, [sp, #16]
   2ec82:	2301      	movs	r3, #1
   2ec84:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   2ec88:	ab03      	add	r3, sp, #12
   2ec8a:	9301      	str	r3, [sp, #4]
   2ec8c:	4b08      	ldr	r3, [pc, #32]	; (2ecb0 <nct_dc_connect+0x58>)
   2ec8e:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2ec90:	f014 f9d9 	bl	43046 <mqtt_subscribe>
}
   2ec94:	b007      	add	sp, #28
   2ec96:	f85d fb04 	ldr.w	pc, [sp], #4
   2ec9a:	bf00      	nop
   2ec9c:	000463bc 	.word	0x000463bc
   2eca0:	000464c4 	.word	0x000464c4
   2eca4:	0004c895 	.word	0x0004c895
   2eca8:	0004c772 	.word	0x0004c772
   2ecac:	20024a24 	.word	0x20024a24
   2ecb0:	223d0001 	.word	0x223d0001

0002ecb4 <nct_dc_disconnect>:
{
   2ecb4:	b507      	push	{r0, r1, r2, lr}
   2ecb6:	4b0c      	ldr	r3, [pc, #48]	; (2ece8 <nct_dc_disconnect+0x34>)
   2ecb8:	480c      	ldr	r0, [pc, #48]	; (2ecec <nct_dc_disconnect+0x38>)
	LOG_DBG("nct_dc_disconnect");
   2ecba:	4a0d      	ldr	r2, [pc, #52]	; (2ecf0 <nct_dc_disconnect+0x3c>)
   2ecbc:	1ac0      	subs	r0, r0, r3
   2ecbe:	08c0      	lsrs	r0, r0, #3
   2ecc0:	0180      	lsls	r0, r0, #6
   2ecc2:	490c      	ldr	r1, [pc, #48]	; (2ecf4 <nct_dc_disconnect+0x40>)
   2ecc4:	f040 0004 	orr.w	r0, r0, #4
   2ecc8:	f012 fdaa 	bl	41820 <log_string_sync>
	const struct mqtt_subscription_list subscription_list = {
   2eccc:	480a      	ldr	r0, [pc, #40]	; (2ecf8 <nct_dc_disconnect+0x44>)
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   2ecce:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2ecd0:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   2ecd4:	9300      	str	r3, [sp, #0]
   2ecd6:	4b09      	ldr	r3, [pc, #36]	; (2ecfc <nct_dc_disconnect+0x48>)
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   2ecd8:	301c      	adds	r0, #28
	const struct mqtt_subscription_list subscription_list = {
   2ecda:	9301      	str	r3, [sp, #4]
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   2ecdc:	f014 f9da 	bl	43094 <mqtt_unsubscribe>
}
   2ece0:	b003      	add	sp, #12
   2ece2:	f85d fb04 	ldr.w	pc, [sp], #4
   2ece6:	bf00      	nop
   2ece8:	000463bc 	.word	0x000463bc
   2ecec:	000464c4 	.word	0x000464c4
   2ecf0:	0004c8a4 	.word	0x0004c8a4
   2ecf4:	0004c785 	.word	0x0004c785
   2ecf8:	20024a24 	.word	0x20024a24
   2ecfc:	223d0001 	.word	0x223d0001

0002ed00 <nct_disconnect>:
{
   2ed00:	b508      	push	{r3, lr}
   2ed02:	4809      	ldr	r0, [pc, #36]	; (2ed28 <nct_disconnect+0x28>)
   2ed04:	4b09      	ldr	r3, [pc, #36]	; (2ed2c <nct_disconnect+0x2c>)
	LOG_DBG("nct_disconnect");
   2ed06:	4a0a      	ldr	r2, [pc, #40]	; (2ed30 <nct_disconnect+0x30>)
   2ed08:	1ac0      	subs	r0, r0, r3
   2ed0a:	08c0      	lsrs	r0, r0, #3
   2ed0c:	0180      	lsls	r0, r0, #6
   2ed0e:	f040 0004 	orr.w	r0, r0, #4
   2ed12:	4908      	ldr	r1, [pc, #32]	; (2ed34 <nct_disconnect+0x34>)
   2ed14:	f012 fd84 	bl	41820 <log_string_sync>
	dc_endpoint_free();
   2ed18:	f7ff fa82 	bl	2e220 <dc_endpoint_free>
}
   2ed1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   2ed20:	4805      	ldr	r0, [pc, #20]	; (2ed38 <nct_disconnect+0x38>)
   2ed22:	f014 b967 	b.w	42ff4 <mqtt_disconnect>
   2ed26:	bf00      	nop
   2ed28:	000464c4 	.word	0x000464c4
   2ed2c:	000463bc 	.word	0x000463bc
   2ed30:	0004c8b6 	.word	0x0004c8b6
   2ed34:	0004c79b 	.word	0x0004c79b
   2ed38:	20024a40 	.word	0x20024a40

0002ed3c <nct_process>:
{
   2ed3c:	b510      	push	{r4, lr}
	mqtt_input(&nct.client);
   2ed3e:	4c04      	ldr	r4, [pc, #16]	; (2ed50 <nct_process+0x14>)
   2ed40:	4620      	mov	r0, r4
   2ed42:	f014 fa37 	bl	431b4 <mqtt_input>
	mqtt_live(&nct.client);
   2ed46:	4620      	mov	r0, r4
}
   2ed48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mqtt_live(&nct.client);
   2ed4c:	f014 b9f4 	b.w	43138 <mqtt_live>
   2ed50:	20024a40 	.word	0x20024a40

0002ed54 <nct_keepalive_time_left>:
	return (int)mqtt_keepalive_time_left(&nct.client);
   2ed54:	4801      	ldr	r0, [pc, #4]	; (2ed5c <nct_keepalive_time_left+0x8>)
   2ed56:	f014 ba16 	b.w	43186 <mqtt_keepalive_time_left>
   2ed5a:	bf00      	nop
   2ed5c:	20024a40 	.word	0x20024a40

0002ed60 <nct_socket_get>:
}
   2ed60:	4b01      	ldr	r3, [pc, #4]	; (2ed68 <nct_socket_get+0x8>)
   2ed62:	6c58      	ldr	r0, [r3, #68]	; 0x44
   2ed64:	4770      	bx	lr
   2ed66:	bf00      	nop
   2ed68:	20024a24 	.word	0x20024a24

0002ed6c <send_to_modem>:
	return type_lookup_socket2gps[type];
}

static int send_to_modem(void *data, size_t data_len,
			 nrf_gnss_agps_data_type_t type)
{
   2ed6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	/* At this point, GPS driver or app-provided socket is assumed. */
	if (gps_dev) {
   2ed6e:	4b24      	ldr	r3, [pc, #144]	; (2ee00 <send_to_modem+0x94>)
{
   2ed70:	4605      	mov	r5, r0
	if (gps_dev) {
   2ed72:	681c      	ldr	r4, [r3, #0]
{
   2ed74:	4608      	mov	r0, r1
   2ed76:	f8ad 200e 	strh.w	r2, [sp, #14]
	if (gps_dev) {
   2ed7a:	b184      	cbz	r4, 2ed9e <send_to_modem+0x32>
	return type_lookup_socket2gps[type];
   2ed7c:	b293      	uxth	r3, r2
   2ed7e:	4a21      	ldr	r2, [pc, #132]	; (2ee04 <send_to_modem+0x98>)
   2ed80:	5cd1      	ldrb	r1, [r2, r3]
	if ((data == NULL) || (dev == NULL)) {
   2ed82:	2d00      	cmp	r5, #0
   2ed84:	d035      	beq.n	2edf2 <send_to_modem+0x86>
	if (api->agps_write == NULL) {
   2ed86:	68a3      	ldr	r3, [r4, #8]
   2ed88:	689e      	ldr	r6, [r3, #8]
   2ed8a:	2e00      	cmp	r6, #0
   2ed8c:	d034      	beq.n	2edf8 <send_to_modem+0x8c>
	return api->agps_write(dev, type, data, data_len);
   2ed8e:	4603      	mov	r3, r0
   2ed90:	462a      	mov	r2, r5
   2ed92:	4620      	mov	r0, r4
   2ed94:	47b0      	blx	r6
   2ed96:	4604      	mov	r4, r0
	if (agps_print_enabled) {
		agps_print(type, data);
	}

	return err;
}
   2ed98:	4620      	mov	r0, r4
   2ed9a:	b004      	add	sp, #16
   2ed9c:	bd70      	pop	{r4, r5, r6, pc}
	err = nrf_sendto(fd, data, data_len, 0, &type, sizeof(type));
   2ed9e:	2302      	movs	r3, #2
   2eda0:	4819      	ldr	r0, [pc, #100]	; (2ee08 <send_to_modem+0x9c>)
   2eda2:	9301      	str	r3, [sp, #4]
   2eda4:	f10d 030e 	add.w	r3, sp, #14
   2eda8:	9300      	str	r3, [sp, #0]
   2edaa:	460a      	mov	r2, r1
   2edac:	4623      	mov	r3, r4
   2edae:	4629      	mov	r1, r5
   2edb0:	6800      	ldr	r0, [r0, #0]
   2edb2:	f00a fbef 	bl	39594 <nrf_sendto>
	if (err < 0) {
   2edb6:	2800      	cmp	r0, #0
   2edb8:	da11      	bge.n	2edde <send_to_modem+0x72>
   2edba:	4b14      	ldr	r3, [pc, #80]	; (2ee0c <send_to_modem+0xa0>)
   2edbc:	4c14      	ldr	r4, [pc, #80]	; (2ee10 <send_to_modem+0xa4>)
   2edbe:	1ae4      	subs	r4, r4, r3
		LOG_ERR("Failed to send AGPS data to modem, errno: %d", errno);
   2edc0:	f013 fc57 	bl	42672 <__errno>
   2edc4:	08e4      	lsrs	r4, r4, #3
   2edc6:	01a4      	lsls	r4, r4, #6
   2edc8:	f044 0401 	orr.w	r4, r4, #1
   2edcc:	6802      	ldr	r2, [r0, #0]
   2edce:	4911      	ldr	r1, [pc, #68]	; (2ee14 <send_to_modem+0xa8>)
   2edd0:	4620      	mov	r0, r4
   2edd2:	f012 fd25 	bl	41820 <log_string_sync>
		err = -errno;
   2edd6:	f013 fc4c 	bl	42672 <__errno>
   2edda:	6804      	ldr	r4, [r0, #0]
   2eddc:	4264      	negs	r4, r4
	if (agps_print_enabled) {
   2edde:	4b0e      	ldr	r3, [pc, #56]	; (2ee18 <send_to_modem+0xac>)
   2ede0:	781b      	ldrb	r3, [r3, #0]
   2ede2:	2b00      	cmp	r3, #0
   2ede4:	d0d8      	beq.n	2ed98 <send_to_modem+0x2c>
		agps_print(type, data);
   2ede6:	4629      	mov	r1, r5
   2ede8:	f89d 000e 	ldrb.w	r0, [sp, #14]
   2edec:	f000 fb30 	bl	2f450 <agps_print>
   2edf0:	e7d2      	b.n	2ed98 <send_to_modem+0x2c>
		return -EINVAL;
   2edf2:	f06f 0415 	mvn.w	r4, #21
   2edf6:	e7cf      	b.n	2ed98 <send_to_modem+0x2c>
		return -ENOTSUP;
   2edf8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2edfc:	e7cc      	b.n	2ed98 <send_to_modem+0x2c>
   2edfe:	bf00      	nop
   2ee00:	200254fc 	.word	0x200254fc
   2ee04:	0004cb59 	.word	0x0004cb59
   2ee08:	20020744 	.word	0x20020744
   2ee0c:	000463bc 	.word	0x000463bc
   2ee10:	000464ac 	.word	0x000464ac
   2ee14:	0004c8c5 	.word	0x0004c8c5
   2ee18:	2002cd68 	.word	0x2002cd68

0002ee1c <nrf_cloud_agps_request>:
{
   2ee1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ee20:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
   2ee24:	ac05      	add	r4, sp, #20
   2ee26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	struct modem_param_info modem_info = {0};
   2ee2a:	f640 02e8 	movw	r2, #2280	; 0x8e8
   2ee2e:	2100      	movs	r1, #0
   2ee30:	a85c      	add	r0, sp, #368	; 0x170
   2ee32:	f015 ff78 	bl	44d26 <memset>
	struct nct_dc_data msg = {
   2ee36:	2214      	movs	r2, #20
   2ee38:	2100      	movs	r1, #0
   2ee3a:	a810      	add	r0, sp, #64	; 0x40
   2ee3c:	f015 ff73 	bl	44d26 <memset>
	if (request.utc) {
   2ee40:	7a23      	ldrb	r3, [r4, #8]
	if (request.sv_mask_ephe) {
   2ee42:	6822      	ldr	r2, [r4, #0]
	if (request.utc) {
   2ee44:	f013 0501 	ands.w	r5, r3, #1
		types[type_count] = GPS_AGPS_UTC_PARAMETERS;
   2ee48:	bf18      	it	ne
   2ee4a:	2501      	movne	r5, #1
	struct nct_dc_data msg = {
   2ee4c:	f10d 0874 	add.w	r8, sp, #116	; 0x74
   2ee50:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
		types[type_count] = GPS_AGPS_UTC_PARAMETERS;
   2ee54:	bf18      	it	ne
   2ee56:	f88d 5020 	strbne.w	r5, [sp, #32]
	if (request.sv_mask_ephe) {
   2ee5a:	b11a      	cbz	r2, 2ee64 <nrf_cloud_agps_request+0x48>
		types[type_count] = GPS_AGPS_EPHEMERIDES;
   2ee5c:	2102      	movs	r1, #2
   2ee5e:	aa08      	add	r2, sp, #32
   2ee60:	5551      	strb	r1, [r2, r5]
		type_count += 1;
   2ee62:	3501      	adds	r5, #1
	if (request.sv_mask_alm) {
   2ee64:	6862      	ldr	r2, [r4, #4]
   2ee66:	b11a      	cbz	r2, 2ee70 <nrf_cloud_agps_request+0x54>
		types[type_count] = GPS_AGPS_ALMANAC;
   2ee68:	2103      	movs	r1, #3
   2ee6a:	aa08      	add	r2, sp, #32
   2ee6c:	5551      	strb	r1, [r2, r5]
		type_count += 1;
   2ee6e:	3501      	adds	r5, #1
	if (request.klobuchar) {
   2ee70:	079c      	lsls	r4, r3, #30
		types[type_count] = GPS_AGPS_KLOBUCHAR_CORRECTION;
   2ee72:	bf41      	itttt	mi
   2ee74:	2104      	movmi	r1, #4
   2ee76:	aa08      	addmi	r2, sp, #32
   2ee78:	5551      	strbmi	r1, [r2, r5]
		type_count += 1;
   2ee7a:	3501      	addmi	r5, #1
	if (request.nequick) {
   2ee7c:	0758      	lsls	r0, r3, #29
		types[type_count] = GPS_AGPS_NEQUICK_CORRECTION;
   2ee7e:	bf41      	itttt	mi
   2ee80:	2105      	movmi	r1, #5
   2ee82:	aa08      	addmi	r2, sp, #32
   2ee84:	5551      	strbmi	r1, [r2, r5]
		type_count += 1;
   2ee86:	3501      	addmi	r5, #1
	if (request.system_time_tow) {
   2ee88:	0719      	lsls	r1, r3, #28
		types[type_count] = GPS_AGPS_GPS_SYSTEM_CLOCK_AND_TOWS;
   2ee8a:	bf41      	itttt	mi
   2ee8c:	2107      	movmi	r1, #7
   2ee8e:	aa08      	addmi	r2, sp, #32
   2ee90:	5551      	strbmi	r1, [r2, r5]
		type_count += 1;
   2ee92:	3501      	addmi	r5, #1
	if (request.position) {
   2ee94:	06da      	lsls	r2, r3, #27
		types[type_count] = GPS_AGPS_LOCATION;
   2ee96:	bf41      	itttt	mi
   2ee98:	2108      	movmi	r1, #8
   2ee9a:	aa08      	addmi	r2, sp, #32
   2ee9c:	5551      	strbmi	r1, [r2, r5]
		type_count += 1;
   2ee9e:	3501      	addmi	r5, #1
	if (request.integrity) {
   2eea0:	069b      	lsls	r3, r3, #26
   2eea2:	d512      	bpl.n	2eeca <nrf_cloud_agps_request+0xae>
		types[type_count] = GPS_AGPS_INTEGRITY;
   2eea4:	2209      	movs	r2, #9
   2eea6:	ab08      	add	r3, sp, #32
   2eea8:	555a      	strb	r2, [r3, r5]
		type_count += 1;
   2eeaa:	3501      	adds	r5, #1
	err = modem_info_init();
   2eeac:	f7fd fa10 	bl	2c2d0 <modem_info_init>
	if (err) {
   2eeb0:	4604      	mov	r4, r0
   2eeb2:	b1e0      	cbz	r0, 2eeee <nrf_cloud_agps_request+0xd2>
   2eeb4:	4848      	ldr	r0, [pc, #288]	; (2efd8 <nrf_cloud_agps_request+0x1bc>)
   2eeb6:	4b49      	ldr	r3, [pc, #292]	; (2efdc <nrf_cloud_agps_request+0x1c0>)
		LOG_ERR("Could not initialize modem info module");
   2eeb8:	4949      	ldr	r1, [pc, #292]	; (2efe0 <nrf_cloud_agps_request+0x1c4>)
   2eeba:	1ac0      	subs	r0, r0, r3
   2eebc:	08c0      	lsrs	r0, r0, #3
   2eebe:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not initialize modem info parameters");
   2eec0:	f040 0001 	orr.w	r0, r0, #1
   2eec4:	f012 fcac 	bl	41820 <log_string_sync>
		return err;
   2eec8:	e00c      	b.n	2eee4 <nrf_cloud_agps_request+0xc8>
	if (type_count == 0) {
   2eeca:	2d00      	cmp	r5, #0
   2eecc:	d1ee      	bne.n	2eeac <nrf_cloud_agps_request+0x90>
   2eece:	4b43      	ldr	r3, [pc, #268]	; (2efdc <nrf_cloud_agps_request+0x1c0>)
   2eed0:	4841      	ldr	r0, [pc, #260]	; (2efd8 <nrf_cloud_agps_request+0x1bc>)
		LOG_INF("No A-GPS data types requested");
   2eed2:	4944      	ldr	r1, [pc, #272]	; (2efe4 <nrf_cloud_agps_request+0x1c8>)
   2eed4:	1ac0      	subs	r0, r0, r3
   2eed6:	08c0      	lsrs	r0, r0, #3
   2eed8:	0180      	lsls	r0, r0, #6
   2eeda:	f040 0003 	orr.w	r0, r0, #3
   2eede:	f012 fc9f 	bl	41820 <log_string_sync>
		return 0;
   2eee2:	462c      	mov	r4, r5
}
   2eee4:	4620      	mov	r0, r4
   2eee6:	f60d 2d58 	addw	sp, sp, #2648	; 0xa58
   2eeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = modem_info_params_init(&modem_info);
   2eeee:	a85c      	add	r0, sp, #368	; 0x170
   2eef0:	f7fd fa32 	bl	2c358 <modem_info_params_init>
	if (err) {
   2eef4:	4604      	mov	r4, r0
   2eef6:	b130      	cbz	r0, 2ef06 <nrf_cloud_agps_request+0xea>
   2eef8:	4837      	ldr	r0, [pc, #220]	; (2efd8 <nrf_cloud_agps_request+0x1bc>)
   2eefa:	4b38      	ldr	r3, [pc, #224]	; (2efdc <nrf_cloud_agps_request+0x1c0>)
		LOG_ERR("Could not initialize modem info parameters");
   2eefc:	493a      	ldr	r1, [pc, #232]	; (2efe8 <nrf_cloud_agps_request+0x1cc>)
   2eefe:	1ac0      	subs	r0, r0, r3
   2ef00:	08c0      	lsrs	r0, r0, #3
   2ef02:	0180      	lsls	r0, r0, #6
   2ef04:	e7dc      	b.n	2eec0 <nrf_cloud_agps_request+0xa4>
	err = modem_info_params_get(&modem_info);
   2ef06:	a85c      	add	r0, sp, #368	; 0x170
   2ef08:	f7fd fa78 	bl	2c3fc <modem_info_params_get>
	if (err) {
   2ef0c:	4604      	mov	r4, r0
   2ef0e:	b130      	cbz	r0, 2ef1e <nrf_cloud_agps_request+0x102>
   2ef10:	4831      	ldr	r0, [pc, #196]	; (2efd8 <nrf_cloud_agps_request+0x1bc>)
   2ef12:	4b32      	ldr	r3, [pc, #200]	; (2efdc <nrf_cloud_agps_request+0x1c0>)
		LOG_ERR("Could not obtain cell information");
   2ef14:	4935      	ldr	r1, [pc, #212]	; (2efec <nrf_cloud_agps_request+0x1d0>)
   2ef16:	1ac0      	subs	r0, r0, r3
   2ef18:	08c0      	lsrs	r0, r0, #3
   2ef1a:	0180      	lsls	r0, r0, #6
   2ef1c:	e7d0      	b.n	2eec0 <nrf_cloud_agps_request+0xa4>
	size_t len = 0;
   2ef1e:	4606      	mov	r6, r0
	for (size_t i = 0; i < type_count; i++) {
   2ef20:	4607      	mov	r7, r0
		err = snprintk(&type_array[len], type_array_len,
   2ef22:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 2f004 <nrf_cloud_agps_request+0x1e8>
   2ef26:	f10d 0920 	add.w	r9, sp, #32
   2ef2a:	a80b      	add	r0, sp, #44	; 0x2c
   2ef2c:	4652      	mov	r2, sl
   2ef2e:	2114      	movs	r1, #20
   2ef30:	f819 3b01 	ldrb.w	r3, [r9], #1
   2ef34:	4430      	add	r0, r6
   2ef36:	f012 fa52 	bl	413de <snprintk>
		if (err < 0) {
   2ef3a:	1e04      	subs	r4, r0, #0
   2ef3c:	db10      	blt.n	2ef60 <nrf_cloud_agps_request+0x144>
	for (size_t i = 0; i < type_count; i++) {
   2ef3e:	3701      	adds	r7, #1
   2ef40:	42af      	cmp	r7, r5
		len += err;
   2ef42:	4426      	add	r6, r4
	for (size_t i = 0; i < type_count; i++) {
   2ef44:	d3f1      	bcc.n	2ef2a <nrf_cloud_agps_request+0x10e>
	type_array[len - 1] = '\0';
   2ef46:	2200      	movs	r2, #0
   2ef48:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
	err = snprintk(types_array, sizeof(types_array),
   2ef4c:	ad15      	add	r5, sp, #84	; 0x54
	type_array[len - 1] = '\0';
   2ef4e:	559a      	strb	r2, [r3, r6]
	err = snprintk(types_array, sizeof(types_array),
   2ef50:	211e      	movs	r1, #30
   2ef52:	4628      	mov	r0, r5
   2ef54:	4a26      	ldr	r2, [pc, #152]	; (2eff0 <nrf_cloud_agps_request+0x1d4>)
   2ef56:	ab0b      	add	r3, sp, #44	; 0x2c
   2ef58:	f012 fa41 	bl	413de <snprintk>
	if (err < 0) {
   2ef5c:	1e04      	subs	r4, r0, #0
   2ef5e:	da0b      	bge.n	2ef78 <nrf_cloud_agps_request+0x15c>
		LOG_ERR("Error when creating type array: %d", err);
   2ef60:	4622      	mov	r2, r4
   2ef62:	481d      	ldr	r0, [pc, #116]	; (2efd8 <nrf_cloud_agps_request+0x1bc>)
   2ef64:	4b1d      	ldr	r3, [pc, #116]	; (2efdc <nrf_cloud_agps_request+0x1c0>)
   2ef66:	4923      	ldr	r1, [pc, #140]	; (2eff4 <nrf_cloud_agps_request+0x1d8>)
   2ef68:	1ac0      	subs	r0, r0, r3
   2ef6a:	08c0      	lsrs	r0, r0, #3
   2ef6c:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed to send A-GPS request, error: %d", err);
   2ef6e:	f040 0001 	orr.w	r0, r0, #1
   2ef72:	f012 fc55 	bl	41820 <log_string_sync>
		return err;
   2ef76:	e7b5      	b.n	2eee4 <nrf_cloud_agps_request+0xc8>
	len = snprintk(request_buf, sizeof(request_buf),
   2ef78:	f8bd 3330 	ldrh.w	r3, [sp, #816]	; 0x330
		(uint32_t)modem_info.network.cellid_dec,
   2ef7c:	f50d 62f2 	add.w	r2, sp, #1936	; 0x790
	len = snprintk(request_buf, sizeof(request_buf),
   2ef80:	e9cd 5303 	strd	r5, r3, [sp, #12]
   2ef84:	e9d2 0100 	ldrd	r0, r1, [r2]
   2ef88:	f7ed fed8 	bl	1cd3c <__aeabi_d2uiz>
   2ef8c:	f8bd 2250 	ldrh.w	r2, [sp, #592]	; 0x250
   2ef90:	9002      	str	r0, [sp, #8]
   2ef92:	9201      	str	r2, [sp, #4]
   2ef94:	f8bd 23a0 	ldrh.w	r2, [sp, #928]	; 0x3a0
   2ef98:	21fa      	movs	r1, #250	; 0xfa
   2ef9a:	9200      	str	r2, [sp, #0]
   2ef9c:	4640      	mov	r0, r8
   2ef9e:	9b04      	ldr	r3, [sp, #16]
   2efa0:	4a15      	ldr	r2, [pc, #84]	; (2eff8 <nrf_cloud_agps_request+0x1dc>)
   2efa2:	f012 fa1c 	bl	413de <snprintk>
	if (len < 0) {
   2efa6:	1e04      	subs	r4, r0, #0
   2efa8:	da07      	bge.n	2efba <nrf_cloud_agps_request+0x19e>
   2efaa:	480b      	ldr	r0, [pc, #44]	; (2efd8 <nrf_cloud_agps_request+0x1bc>)
   2efac:	4b0b      	ldr	r3, [pc, #44]	; (2efdc <nrf_cloud_agps_request+0x1c0>)
		LOG_ERR("Failed to create A-GPS request, error: %d", len);
   2efae:	4622      	mov	r2, r4
   2efb0:	1ac0      	subs	r0, r0, r3
   2efb2:	08c0      	lsrs	r0, r0, #3
   2efb4:	4911      	ldr	r1, [pc, #68]	; (2effc <nrf_cloud_agps_request+0x1e0>)
   2efb6:	0180      	lsls	r0, r0, #6
   2efb8:	e7d9      	b.n	2ef6e <nrf_cloud_agps_request+0x152>
	err = nct_dc_send(&msg);
   2efba:	a810      	add	r0, sp, #64	; 0x40
	msg.data.len = len;
   2efbc:	9410      	str	r4, [sp, #64]	; 0x40
	err = nct_dc_send(&msg);
   2efbe:	f015 fb88 	bl	446d2 <nct_dc_send>
	if (err) {
   2efc2:	4604      	mov	r4, r0
   2efc4:	2800      	cmp	r0, #0
   2efc6:	d08d      	beq.n	2eee4 <nrf_cloud_agps_request+0xc8>
   2efc8:	4803      	ldr	r0, [pc, #12]	; (2efd8 <nrf_cloud_agps_request+0x1bc>)
   2efca:	4b04      	ldr	r3, [pc, #16]	; (2efdc <nrf_cloud_agps_request+0x1c0>)
		LOG_ERR("Failed to send A-GPS request, error: %d", err);
   2efcc:	4622      	mov	r2, r4
   2efce:	1ac0      	subs	r0, r0, r3
   2efd0:	08c0      	lsrs	r0, r0, #3
   2efd2:	490b      	ldr	r1, [pc, #44]	; (2f000 <nrf_cloud_agps_request+0x1e4>)
   2efd4:	0180      	lsls	r0, r0, #6
   2efd6:	e7ca      	b.n	2ef6e <nrf_cloud_agps_request+0x152>
   2efd8:	000464ac 	.word	0x000464ac
   2efdc:	000463bc 	.word	0x000463bc
   2efe0:	0004c910 	.word	0x0004c910
   2efe4:	0004c8f2 	.word	0x0004c8f2
   2efe8:	0004c937 	.word	0x0004c937
   2efec:	0004c962 	.word	0x0004c962
   2eff0:	0004c988 	.word	0x0004c988
   2eff4:	0004c996 	.word	0x0004c996
   2eff8:	0004c9b9 	.word	0x0004c9b9
   2effc:	0004ca19 	.word	0x0004ca19
   2f000:	0004ca43 	.word	0x0004ca43
   2f004:	0004c984 	.word	0x0004c984

0002f008 <nrf_cloud_agps_process>:

	return len;
}

int nrf_cloud_agps_process(const char *buf, size_t buf_len, const int *socket)
{
   2f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nrf_cloud_apgs_element element = {};
	struct nrf_cloud_agps_system_time sys_time;
	size_t parsed_len = 0;
	uint8_t version;

	version = buf[NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_INDEX];
   2f00c:	7804      	ldrb	r4, [r0, #0]
{
   2f00e:	4606      	mov	r6, r0
	parsed_len += NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_SIZE;

	__ASSERT(version == NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION,
   2f010:	2c01      	cmp	r4, #1
{
   2f012:	460f      	mov	r7, r1
   2f014:	4615      	mov	r5, r2
   2f016:	b0c9      	sub	sp, #292	; 0x124
	__ASSERT(version == NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION,
   2f018:	d00f      	beq.n	2f03a <nrf_cloud_agps_process+0x32>
   2f01a:	f240 2325 	movw	r3, #549	; 0x225
   2f01e:	4ab3      	ldr	r2, [pc, #716]	; (2f2ec <nrf_cloud_agps_process+0x2e4>)
   2f020:	49b3      	ldr	r1, [pc, #716]	; (2f2f0 <nrf_cloud_agps_process+0x2e8>)
   2f022:	48b4      	ldr	r0, [pc, #720]	; (2f2f4 <nrf_cloud_agps_process+0x2ec>)
   2f024:	f012 f9ce 	bl	413c4 <printk>
   2f028:	4621      	mov	r1, r4
   2f02a:	48b3      	ldr	r0, [pc, #716]	; (2f2f8 <nrf_cloud_agps_process+0x2f0>)
   2f02c:	f012 f9ca 	bl	413c4 <printk>
   2f030:	f240 2125 	movw	r1, #549	; 0x225
   2f034:	48ad      	ldr	r0, [pc, #692]	; (2f2ec <nrf_cloud_agps_process+0x2e4>)
   2f036:	f012 fbe2 	bl	417fe <assert_post_action>
		 "Cannot parse schema version: %d", version);

	LOG_DBG("Receievd AGPS data. Schema version: %d, length: %d",
		version, buf_len);

	if (socket) {
   2f03a:	4cb0      	ldr	r4, [pc, #704]	; (2f2fc <nrf_cloud_agps_process+0x2f4>)
   2f03c:	48b0      	ldr	r0, [pc, #704]	; (2f300 <nrf_cloud_agps_process+0x2f8>)
   2f03e:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 2f314 <nrf_cloud_agps_process+0x30c>
   2f042:	1a24      	subs	r4, r4, r0
   2f044:	08e4      	lsrs	r4, r4, #3
   2f046:	b18d      	cbz	r5, 2f06c <nrf_cloud_agps_process+0x64>
		LOG_DBG("Using user-provided socket, fd %d", fd);

		gps_dev = NULL;
   2f048:	2300      	movs	r3, #0
		fd = *socket;
   2f04a:	682a      	ldr	r2, [r5, #0]
		gps_dev = NULL;
   2f04c:	f8c8 3000 	str.w	r3, [r8]
		fd = *socket;
   2f050:	4bac      	ldr	r3, [pc, #688]	; (2f304 <nrf_cloud_agps_process+0x2fc>)
   2f052:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f054:	2501      	movs	r5, #1
	if (elements_left_to_process == 0) {
   2f056:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 2f318 <nrf_cloud_agps_process+0x310>
   2f05a:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 2f31c <nrf_cloud_agps_process+0x314>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2f05e:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 2f320 <nrf_cloud_agps_process+0x318>
			LOG_ERR("GPS is not enabled, A-GPS response unhandled");
			return -ENODEV;
		}
	}

	while (parsed_len < buf_len) {
   2f062:	42af      	cmp	r7, r5
   2f064:	d819      	bhi.n	2f09a <nrf_cloud_agps_process+0x92>
			return -ENODEV;
   2f066:	f04f 0b00 	mov.w	fp, #0
   2f06a:	e012      	b.n	2f092 <nrf_cloud_agps_process+0x8a>
	} else if (gps_dev == NULL) {
   2f06c:	f8d8 3000 	ldr.w	r3, [r8]
   2f070:	2b00      	cmp	r3, #0
   2f072:	d1ef      	bne.n	2f054 <nrf_cloud_agps_process+0x4c>
   2f074:	48a4      	ldr	r0, [pc, #656]	; (2f308 <nrf_cloud_agps_process+0x300>)
   2f076:	f00c fcdb 	bl	3ba30 <z_impl_device_get_binding>
		gps_dev = device_get_binding("NRF9160_GPS");
   2f07a:	f8c8 0000 	str.w	r0, [r8]
		if (gps_dev == NULL) {
   2f07e:	2800      	cmp	r0, #0
   2f080:	d1e8      	bne.n	2f054 <nrf_cloud_agps_process+0x4c>
			LOG_ERR("GPS is not enabled, A-GPS response unhandled");
   2f082:	01a0      	lsls	r0, r4, #6
   2f084:	49a1      	ldr	r1, [pc, #644]	; (2f30c <nrf_cloud_agps_process+0x304>)
   2f086:	f040 0001 	orr.w	r0, r0, #1
   2f08a:	f012 fbc9 	bl	41820 <log_string_sync>
			return -ENODEV;
   2f08e:	f06f 0b12 	mvn.w	fp, #18
			return err;
		}
	}

	return 0;
}
   2f092:	4658      	mov	r0, fp
   2f094:	b049      	add	sp, #292	; 0x124
   2f096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (elements_left_to_process == 0) {
   2f09a:	f8b8 1000 	ldrh.w	r1, [r8]
			get_next_agps_element(&element, &buf[parsed_len]);
   2f09e:	1973      	adds	r3, r6, r5
	if (elements_left_to_process == 0) {
   2f0a0:	bb11      	cbnz	r1, 2f0e8 <nrf_cloud_agps_process+0xe0>
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2f0a2:	f8b3 1001 	ldrh.w	r1, [r3, #1]
			(enum nrf_cloud_agps_type)buf[NRF_CLOUD_AGPS_BIN_TYPE_OFFSET];
   2f0a6:	5d72      	ldrb	r2, [r6, r5]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2f0a8:	3901      	subs	r1, #1
		elements_left_to_process =
   2f0aa:	f8a8 1000 	strh.w	r1, [r8]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2f0ae:	2103      	movs	r1, #3
		element_type = element->type;
   2f0b0:	f889 2000 	strb.w	r2, [r9]
	switch (element->type) {
   2f0b4:	1e50      	subs	r0, r2, #1
   2f0b6:	2808      	cmp	r0, #8
   2f0b8:	d8d5      	bhi.n	2f066 <nrf_cloud_agps_process+0x5e>
   2f0ba:	f20f 0c08 	addw	ip, pc, #8
   2f0be:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   2f0c2:	bf00      	nop
   2f0c4:	0002f0f7 	.word	0x0002f0f7
   2f0c8:	0002f113 	.word	0x0002f113
   2f0cc:	0002f119 	.word	0x0002f119
   2f0d0:	0002f11f 	.word	0x0002f11f
   2f0d4:	0002f067 	.word	0x0002f067
   2f0d8:	0002f131 	.word	0x0002f131
   2f0dc:	0002f125 	.word	0x0002f125
   2f0e0:	0002f12b 	.word	0x0002f12b
   2f0e4:	0002f131 	.word	0x0002f131
		elements_left_to_process -= 1;
   2f0e8:	3901      	subs	r1, #1
   2f0ea:	f8a8 1000 	strh.w	r1, [r8]
		element->type = element_type;
   2f0ee:	f899 2000 	ldrb.w	r2, [r9]
	size_t len = 0;
   2f0f2:	2100      	movs	r1, #0
   2f0f4:	e7de      	b.n	2f0b4 <nrf_cloud_agps_process+0xac>
		element->utc = (struct nrf_cloud_agps_utc *)(buf + len);
   2f0f6:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_utc);
   2f0f8:	310e      	adds	r1, #14
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2f0fa:	2a06      	cmp	r2, #6
		parsed_len += element_size;
   2f0fc:	440d      	add	r5, r1
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2f0fe:	d11a      	bne.n	2f136 <nrf_cloud_agps_process+0x12e>
			memcpy(&sys_time.sv_tow[element.tow->sv_id - 1],
   2f100:	781a      	ldrb	r2, [r3, #0]
   2f102:	a948      	add	r1, sp, #288	; 0x120
   2f104:	681b      	ldr	r3, [r3, #0]
   2f106:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   2f10a:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
   2f10e:	6013      	str	r3, [r2, #0]
			continue;
   2f110:	e7a7      	b.n	2f062 <nrf_cloud_agps_process+0x5a>
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2f112:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2f114:	313e      	adds	r1, #62	; 0x3e
		break;
   2f116:	e7f0      	b.n	2f0fa <nrf_cloud_agps_process+0xf2>
		element->almanac = (struct nrf_cloud_agps_almanac *)(buf + len);
   2f118:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_almanac);
   2f11a:	311f      	adds	r1, #31
		break;
   2f11c:	e7ed      	b.n	2f0fa <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_klobuchar *)(buf + len);
   2f11e:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_klobuchar);
   2f120:	3108      	adds	r1, #8
		break;
   2f122:	e7ea      	b.n	2f0fa <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2f124:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2f126:	3110      	adds	r1, #16
		break;
   2f128:	e7e7      	b.n	2f0fa <nrf_cloud_agps_process+0xf2>
		element->location = (struct nrf_cloud_agps_location *)(buf + len);
   2f12a:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_location);
   2f12c:	310f      	adds	r1, #15
		break;
   2f12e:	e7e4      	b.n	2f0fa <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_integrity *)(buf + len);
   2f130:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_integrity);
   2f132:	3104      	adds	r1, #4
		break;
   2f134:	e7e1      	b.n	2f0fa <nrf_cloud_agps_process+0xf2>
		} else if (element.type == NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) {
   2f136:	2a07      	cmp	r2, #7
   2f138:	d12f      	bne.n	2f19a <nrf_cloud_agps_process+0x192>
			memcpy(&sys_time, element.time_and_tow,
   2f13a:	6818      	ldr	r0, [r3, #0]
   2f13c:	6859      	ldr	r1, [r3, #4]
   2f13e:	aa01      	add	r2, sp, #4
   2f140:	c203      	stmia	r2!, {r0, r1}
   2f142:	6898      	ldr	r0, [r3, #8]
	dst->date_day		= src->time_and_tow->date_day;
   2f144:	7859      	ldrb	r1, [r3, #1]
			memcpy(&sys_time, element.time_and_tow,
   2f146:	6010      	str	r0, [r2, #0]
	dst->date_day		= src->time_and_tow->date_day;
   2f148:	781a      	ldrb	r2, [r3, #0]
   2f14a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f14e:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
	dst->time_full_s	= src->time_and_tow->time_full_s;
   2f152:	f8d3 2002 	ldr.w	r2, [r3, #2]
   2f156:	9225      	str	r2, [sp, #148]	; 0x94
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2f158:	79d9      	ldrb	r1, [r3, #7]
   2f15a:	799a      	ldrb	r2, [r3, #6]
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2f15c:	9027      	str	r0, [sp, #156]	; 0x9c
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2f15e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f162:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2f166:	4601      	mov	r1, r0
	if (src->time_and_tow->sv_mask == 0U) {
   2f168:	2800      	cmp	r0, #0
   2f16a:	f040 8132 	bne.w	2f3d2 <nrf_cloud_agps_process+0x3ca>
		memset(dst->sv_tow, 0, sizeof(dst->sv_tow));
   2f16e:	2280      	movs	r2, #128	; 0x80
   2f170:	a828      	add	r0, sp, #160	; 0xa0
   2f172:	f015 fdd8 	bl	44d26 <memset>
		return send_to_modem(&time_and_tow, sizeof(time_and_tow),
   2f176:	2190      	movs	r1, #144	; 0x90
   2f178:	2206      	movs	r2, #6
   2f17a:	eb0d 0001 	add.w	r0, sp, r1
		return send_to_modem(agps_data->integrity,
   2f17e:	f7ff fdf5 	bl	2ed6c <send_to_modem>
   2f182:	4683      	mov	fp, r0
		if (err) {
   2f184:	2800      	cmp	r0, #0
   2f186:	f43f af6c 	beq.w	2f062 <nrf_cloud_agps_process+0x5a>
			LOG_ERR("Failed to send data to modem, error: %d", err);
   2f18a:	01a0      	lsls	r0, r4, #6
   2f18c:	465a      	mov	r2, fp
   2f18e:	4960      	ldr	r1, [pc, #384]	; (2f310 <nrf_cloud_agps_process+0x308>)
   2f190:	f040 0001 	orr.w	r0, r0, #1
   2f194:	f012 fb44 	bl	41820 <log_string_sync>
			return err;
   2f198:	e77b      	b.n	2f092 <nrf_cloud_agps_process+0x8a>
	switch (agps_data->type) {
   2f19a:	2808      	cmp	r0, #8
   2f19c:	f200 8150 	bhi.w	2f440 <nrf_cloud_agps_process+0x438>
   2f1a0:	e8df f010 	tbh	[pc, r0, lsl #1]
   2f1a4:	00220009 	.word	0x00220009
   2f1a8:	00fc00c0 	.word	0x00fc00c0
   2f1ac:	014e014e 	.word	0x014e014e
   2f1b0:	012c014e 	.word	0x012c014e
   2f1b4:	014a      	.short	0x014a
	dst->a1		= src->utc->a1;
   2f1b6:	681a      	ldr	r2, [r3, #0]
   2f1b8:	9224      	str	r2, [sp, #144]	; 0x90
	dst->a0		= src->utc->a0;
   2f1ba:	685a      	ldr	r2, [r3, #4]
   2f1bc:	9225      	str	r2, [sp, #148]	; 0x94
	dst->tot	= src->utc->tot;
   2f1be:	7a1a      	ldrb	r2, [r3, #8]
   2f1c0:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->wn_t	= src->utc->wn_t;
   2f1c4:	7a5a      	ldrb	r2, [r3, #9]
   2f1c6:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
	dst->delta_tls	= src->utc->delta_tls;
   2f1ca:	7a9a      	ldrb	r2, [r3, #10]
   2f1cc:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->wn_lsf	= src->utc->wn_lsf;
   2f1d0:	7ada      	ldrb	r2, [r3, #11]
   2f1d2:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
	dst->dn		= src->utc->dn;
   2f1d6:	7b1a      	ldrb	r2, [r3, #12]
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2f1d8:	7b5b      	ldrb	r3, [r3, #13]
	dst->dn		= src->utc->dn;
   2f1da:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
		return send_to_modem(&utc, sizeof(utc),
   2f1de:	2201      	movs	r2, #1
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2f1e0:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
		return send_to_modem(&location, sizeof(location),
   2f1e4:	2110      	movs	r1, #16
   2f1e6:	e07e      	b.n	2f2e6 <nrf_cloud_agps_process+0x2de>
	dst->sv_id	= src->ephemeris->sv_id;
   2f1e8:	781a      	ldrb	r2, [r3, #0]
   2f1ea:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
	dst->health	= src->ephemeris->health;
   2f1ee:	785a      	ldrb	r2, [r3, #1]
   2f1f0:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
	dst->iodc	= src->ephemeris->iodc;
   2f1f4:	78d9      	ldrb	r1, [r3, #3]
   2f1f6:	789a      	ldrb	r2, [r3, #2]
   2f1f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f1fc:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	dst->toc	= src->ephemeris->toc;
   2f200:	7959      	ldrb	r1, [r3, #5]
   2f202:	791a      	ldrb	r2, [r3, #4]
   2f204:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f208:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
	dst->af2	= src->ephemeris->af2;
   2f20c:	799a      	ldrb	r2, [r3, #6]
   2f20e:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
	dst->af1	= src->ephemeris->af1;
   2f212:	7a19      	ldrb	r1, [r3, #8]
   2f214:	79da      	ldrb	r2, [r3, #7]
   2f216:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f21a:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
	dst->af0	= src->ephemeris->af0;
   2f21e:	f8d3 2009 	ldr.w	r2, [r3, #9]
   2f222:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->tgd	= src->ephemeris->tgd;
   2f224:	7b5a      	ldrb	r2, [r3, #13]
   2f226:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
	dst->ura	= src->ephemeris->ura;
   2f22a:	7b9a      	ldrb	r2, [r3, #14]
   2f22c:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
	dst->fit_int	= src->ephemeris->fit_int;
   2f230:	7bda      	ldrb	r2, [r3, #15]
   2f232:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
	dst->toe	= src->ephemeris->toe;
   2f236:	7c59      	ldrb	r1, [r3, #17]
   2f238:	7c1a      	ldrb	r2, [r3, #16]
   2f23a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f23e:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
	dst->w		= src->ephemeris->w;
   2f242:	f8d3 2012 	ldr.w	r2, [r3, #18]
   2f246:	922a      	str	r2, [sp, #168]	; 0xa8
	dst->delta_n	= src->ephemeris->delta_n;
   2f248:	7dd9      	ldrb	r1, [r3, #23]
   2f24a:	7d9a      	ldrb	r2, [r3, #22]
   2f24c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f250:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
	dst->m0		= src->ephemeris->m0;
   2f254:	699a      	ldr	r2, [r3, #24]
   2f256:	922c      	str	r2, [sp, #176]	; 0xb0
	dst->omega_dot	= src->ephemeris->omega_dot;
   2f258:	69da      	ldr	r2, [r3, #28]
   2f25a:	922d      	str	r2, [sp, #180]	; 0xb4
	dst->e		= src->ephemeris->e;
   2f25c:	6a1a      	ldr	r2, [r3, #32]
   2f25e:	922e      	str	r2, [sp, #184]	; 0xb8
	dst->idot	= src->ephemeris->idot;
   2f260:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
   2f264:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   2f268:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f26c:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
	dst->sqrt_a	= src->ephemeris->sqrt_a;
   2f270:	f8d3 2026 	ldr.w	r2, [r3, #38]	; 0x26
   2f274:	9230      	str	r2, [sp, #192]	; 0xc0
	dst->i0		= src->ephemeris->i0;
   2f276:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
   2f27a:	9231      	str	r2, [sp, #196]	; 0xc4
	dst->omega0	= src->ephemeris->omega0;
   2f27c:	f8d3 202e 	ldr.w	r2, [r3, #46]	; 0x2e
   2f280:	9232      	str	r2, [sp, #200]	; 0xc8
	dst->crs	= src->ephemeris->crs;
   2f282:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
   2f286:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
   2f28a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f28e:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
	dst->cis	= src->ephemeris->cis;
   2f292:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   2f296:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
   2f29a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f29e:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
	dst->cus	= src->ephemeris->cus;
   2f2a2:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
   2f2a6:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
   2f2aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f2ae:	f8ad 20d0 	strh.w	r2, [sp, #208]	; 0xd0
	dst->crc	= src->ephemeris->crc;
   2f2b2:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   2f2b6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2f2ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f2be:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
	dst->cic	= src->ephemeris->cic;
   2f2c2:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
   2f2c6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   2f2ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f2ce:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	dst->cuc	= src->ephemeris->cuc;
   2f2d2:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   2f2d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2f2da:	2148      	movs	r1, #72	; 0x48
	dst->cuc	= src->ephemeris->cuc;
   2f2dc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2f2e0:	2202      	movs	r2, #2
	dst->cuc	= src->ephemeris->cuc;
   2f2e2:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
		return send_to_modem(&location, sizeof(location),
   2f2e6:	a824      	add	r0, sp, #144	; 0x90
   2f2e8:	e749      	b.n	2f17e <nrf_cloud_agps_process+0x176>
   2f2ea:	bf00      	nop
   2f2ec:	0004ca6b 	.word	0x0004ca6b
   2f2f0:	0004caa9 	.word	0x0004caa9
   2f2f4:	00048156 	.word	0x00048156
   2f2f8:	0004cab8 	.word	0x0004cab8
   2f2fc:	000464ac 	.word	0x000464ac
   2f300:	000463bc 	.word	0x000463bc
   2f304:	20020744 	.word	0x20020744
   2f308:	00048886 	.word	0x00048886
   2f30c:	0004cada 	.word	0x0004cada
   2f310:	0004cb22 	.word	0x0004cb22
   2f314:	200254fc 	.word	0x200254fc
   2f318:	2002a5e6 	.word	0x2002a5e6
   2f31c:	2002cd69 	.word	0x2002cd69
   2f320:	0004cb07 	.word	0x0004cb07
	dst->sv_id	= src->almanac->sv_id;
   2f324:	781a      	ldrb	r2, [r3, #0]
   2f326:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
	dst->wn		= src->almanac->wn;
   2f32a:	785a      	ldrb	r2, [r3, #1]
   2f32c:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
	dst->toa	= src->almanac->toa;
   2f330:	789a      	ldrb	r2, [r3, #2]
   2f332:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
	dst->ioda	= src->almanac->ioda;
   2f336:	78da      	ldrb	r2, [r3, #3]
   2f338:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
	dst->e		= src->almanac->e;
   2f33c:	7959      	ldrb	r1, [r3, #5]
   2f33e:	791a      	ldrb	r2, [r3, #4]
   2f340:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f344:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
	dst->delta_i	= src->almanac->delta_i;
   2f348:	79d9      	ldrb	r1, [r3, #7]
   2f34a:	799a      	ldrb	r2, [r3, #6]
   2f34c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f350:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
	dst->omega_dot	= src->almanac->omega_dot;
   2f354:	7a59      	ldrb	r1, [r3, #9]
   2f356:	7a1a      	ldrb	r2, [r3, #8]
   2f358:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f35c:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
	dst->sv_health	= src->almanac->sv_health;
   2f360:	7a9a      	ldrb	r2, [r3, #10]
   2f362:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->sqrt_a	= src->almanac->sqrt_a;
   2f366:	f8d3 200b 	ldr.w	r2, [r3, #11]
   2f36a:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->omega0	= src->almanac->omega0;
   2f36c:	f8d3 200f 	ldr.w	r2, [r3, #15]
   2f370:	9228      	str	r2, [sp, #160]	; 0xa0
	dst->w		= src->almanac->w;
   2f372:	f8d3 2013 	ldr.w	r2, [r3, #19]
   2f376:	9229      	str	r2, [sp, #164]	; 0xa4
	dst->m0		= src->almanac->m0;
   2f378:	f8d3 2017 	ldr.w	r2, [r3, #23]
   2f37c:	922a      	str	r2, [sp, #168]	; 0xa8
	dst->af0	= src->almanac->af0;
   2f37e:	7f19      	ldrb	r1, [r3, #28]
   2f380:	7eda      	ldrb	r2, [r3, #27]
   2f382:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f386:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
	dst->af1	= src->almanac->af1;
   2f38a:	7f5a      	ldrb	r2, [r3, #29]
   2f38c:	7f9b      	ldrb	r3, [r3, #30]
		return send_to_modem(&almanac, sizeof(almanac),
   2f38e:	2120      	movs	r1, #32
	dst->af1	= src->almanac->af1;
   2f390:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2f394:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
		return send_to_modem(&almanac, sizeof(almanac),
   2f398:	2203      	movs	r2, #3
   2f39a:	e7a4      	b.n	2f2e6 <nrf_cloud_agps_process+0x2de>
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2f39c:	781a      	ldrb	r2, [r3, #0]
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2f39e:	2108      	movs	r1, #8
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2f3a0:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
	dst->alpha1	= src->ion_correction.klobuchar->alpha1;
   2f3a4:	785a      	ldrb	r2, [r3, #1]
   2f3a6:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
	dst->alpha2	= src->ion_correction.klobuchar->alpha2;
   2f3aa:	789a      	ldrb	r2, [r3, #2]
   2f3ac:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
	dst->alpha3	= src->ion_correction.klobuchar->alpha3;
   2f3b0:	78da      	ldrb	r2, [r3, #3]
   2f3b2:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
	dst->beta0	= src->ion_correction.klobuchar->beta0;
   2f3b6:	791a      	ldrb	r2, [r3, #4]
   2f3b8:	f88d 2094 	strb.w	r2, [sp, #148]	; 0x94
	dst->beta1	= src->ion_correction.klobuchar->beta1;
   2f3bc:	795a      	ldrb	r2, [r3, #5]
   2f3be:	f88d 2095 	strb.w	r2, [sp, #149]	; 0x95
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2f3c2:	799a      	ldrb	r2, [r3, #6]
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2f3c4:	79db      	ldrb	r3, [r3, #7]
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2f3c6:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2f3ca:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2f3ce:	2204      	movs	r2, #4
   2f3d0:	e789      	b.n	2f2e6 <nrf_cloud_agps_process+0x2de>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f3d2:	2200      	movs	r2, #0
   2f3d4:	a924      	add	r1, sp, #144	; 0x90
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2f3d6:	f103 0c0f 	add.w	ip, r3, #15
   2f3da:	f81c 0022 	ldrb.w	r0, [ip, r2, lsl #2]
   2f3de:	3104      	adds	r1, #4
   2f3e0:	7388      	strb	r0, [r1, #14]
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2f3e2:	1c90      	adds	r0, r2, #2
   2f3e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2f3e8:	f890 e005 	ldrb.w	lr, [r0, #5]
   2f3ec:	7980      	ldrb	r0, [r0, #6]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f3ee:	3201      	adds	r2, #1
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2f3f0:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f3f4:	2a20      	cmp	r2, #32
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2f3f6:	8188      	strh	r0, [r1, #12]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f3f8:	d1ef      	bne.n	2f3da <nrf_cloud_agps_process+0x3d2>
   2f3fa:	e6bc      	b.n	2f176 <nrf_cloud_agps_process+0x16e>
		nrf_gnss_agps_data_location_t location = {0};
   2f3fc:	2200      	movs	r2, #0
   2f3fe:	f88d 209f 	strb.w	r2, [sp, #159]	; 0x9f
	dst->latitude		= src->location->latitude;
   2f402:	681a      	ldr	r2, [r3, #0]
   2f404:	9224      	str	r2, [sp, #144]	; 0x90
	dst->longitude		= src->location->longitude;
   2f406:	685a      	ldr	r2, [r3, #4]
   2f408:	9225      	str	r2, [sp, #148]	; 0x94
	dst->altitude		= src->location->altitude;
   2f40a:	7a1a      	ldrb	r2, [r3, #8]
   2f40c:	7a59      	ldrb	r1, [r3, #9]
   2f40e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f412:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
	dst->unc_semimajor	= src->location->unc_semimajor;
   2f416:	7a9a      	ldrb	r2, [r3, #10]
   2f418:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->unc_semiminor	= src->location->unc_semiminor;
   2f41c:	7ada      	ldrb	r2, [r3, #11]
   2f41e:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
	dst->orientation_major	= src->location->orientation_major;
   2f422:	7b1a      	ldrb	r2, [r3, #12]
   2f424:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
	dst->unc_altitude	= src->location->unc_altitude;
   2f428:	7b5a      	ldrb	r2, [r3, #13]
	dst->confidence		= src->location->confidence;
   2f42a:	7b9b      	ldrb	r3, [r3, #14]
	dst->unc_altitude	= src->location->unc_altitude;
   2f42c:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
	dst->confidence		= src->location->confidence;
   2f430:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
		return send_to_modem(&location, sizeof(location),
   2f434:	2207      	movs	r2, #7
   2f436:	e6d5      	b.n	2f1e4 <nrf_cloud_agps_process+0x1dc>
		return send_to_modem(agps_data->integrity,
   2f438:	2208      	movs	r2, #8
   2f43a:	2104      	movs	r1, #4
   2f43c:	4618      	mov	r0, r3
   2f43e:	e69e      	b.n	2f17e <nrf_cloud_agps_process+0x176>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2f440:	01a0      	lsls	r0, r4, #6
   2f442:	4651      	mov	r1, sl
   2f444:	f040 0002 	orr.w	r0, r0, #2
   2f448:	f012 f9ea 	bl	41820 <log_string_sync>
		if (err) {
   2f44c:	e609      	b.n	2f062 <nrf_cloud_agps_process+0x5a>
   2f44e:	bf00      	nop

0002f450 <agps_print>:
}

void agps_print(nrf_gnss_agps_data_type_t type, void *data)
{

	switch (type) {
   2f450:	3801      	subs	r0, #1
{
   2f452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f456:	460c      	mov	r4, r1
   2f458:	2807      	cmp	r0, #7
   2f45a:	f200 816b 	bhi.w	2f734 <agps_print+0x2e4>
   2f45e:	e8df f010 	tbh	[pc, r0, lsl #1]
   2f462:	0008      	.short	0x0008
   2f464:	00a50030 	.word	0x00a50030
   2f468:	010d00e3 	.word	0x010d00e3
   2f46c:	01400112 	.word	0x01400112
   2f470:	0163      	.short	0x0163
	printk("utc:\n");
   2f472:	48b1      	ldr	r0, [pc, #708]	; (2f738 <agps_print+0x2e8>)
   2f474:	f011 ffa6 	bl	413c4 <printk>
	printk("\ta1: %d\n", data->a1);
   2f478:	6821      	ldr	r1, [r4, #0]
   2f47a:	48b0      	ldr	r0, [pc, #704]	; (2f73c <agps_print+0x2ec>)
   2f47c:	f011 ffa2 	bl	413c4 <printk>
	printk("\ta0: %d\n", data->a0);
   2f480:	6861      	ldr	r1, [r4, #4]
   2f482:	48af      	ldr	r0, [pc, #700]	; (2f740 <agps_print+0x2f0>)
   2f484:	f011 ff9e 	bl	413c4 <printk>
	printk("\ttot: %d\n", data->tot);
   2f488:	7a21      	ldrb	r1, [r4, #8]
   2f48a:	48ae      	ldr	r0, [pc, #696]	; (2f744 <agps_print+0x2f4>)
   2f48c:	f011 ff9a 	bl	413c4 <printk>
	printk("\twn_t: %d\n", data->wn_t);
   2f490:	7a61      	ldrb	r1, [r4, #9]
   2f492:	48ad      	ldr	r0, [pc, #692]	; (2f748 <agps_print+0x2f8>)
   2f494:	f011 ff96 	bl	413c4 <printk>
	printk("\tdelta_tls: %d\n", data->delta_tls);
   2f498:	f994 100a 	ldrsb.w	r1, [r4, #10]
   2f49c:	48ab      	ldr	r0, [pc, #684]	; (2f74c <agps_print+0x2fc>)
   2f49e:	f011 ff91 	bl	413c4 <printk>
	printk("\twn_lsf: %d\n", data->wn_lsf);
   2f4a2:	7ae1      	ldrb	r1, [r4, #11]
   2f4a4:	48aa      	ldr	r0, [pc, #680]	; (2f750 <agps_print+0x300>)
   2f4a6:	f011 ff8d 	bl	413c4 <printk>
	printk("\tdn: %d\n", data->dn);
   2f4aa:	f994 100c 	ldrsb.w	r1, [r4, #12]
   2f4ae:	48a9      	ldr	r0, [pc, #676]	; (2f754 <agps_print+0x304>)
   2f4b0:	f011 ff88 	bl	413c4 <printk>
	printk("\tdelta_tlsf: %d\n", data->delta_tlsf);
   2f4b4:	f994 100d 	ldrsb.w	r1, [r4, #13]
   2f4b8:	48a7      	ldr	r0, [pc, #668]	; (2f758 <agps_print+0x308>)
	}
	default:
		printk("Unknown AGPS data type\n");
		break;
	}
}
   2f4ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printk("\tcuc: %d\n", data->cuc);
   2f4be:	f011 bf81 	b.w	413c4 <printk>
	printk("ephemeris:\n");
   2f4c2:	48a6      	ldr	r0, [pc, #664]	; (2f75c <agps_print+0x30c>)
   2f4c4:	f011 ff7e 	bl	413c4 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2f4c8:	7821      	ldrb	r1, [r4, #0]
   2f4ca:	48a5      	ldr	r0, [pc, #660]	; (2f760 <agps_print+0x310>)
   2f4cc:	f011 ff7a 	bl	413c4 <printk>
	printk("\thealth: %d\n", data->health);
   2f4d0:	7861      	ldrb	r1, [r4, #1]
   2f4d2:	48a4      	ldr	r0, [pc, #656]	; (2f764 <agps_print+0x314>)
   2f4d4:	f011 ff76 	bl	413c4 <printk>
	printk("\tiodc: %d\n", data->iodc);
   2f4d8:	8861      	ldrh	r1, [r4, #2]
   2f4da:	48a3      	ldr	r0, [pc, #652]	; (2f768 <agps_print+0x318>)
   2f4dc:	f011 ff72 	bl	413c4 <printk>
	printk("\ttoc: %d\n", data->toc);
   2f4e0:	88a1      	ldrh	r1, [r4, #4]
   2f4e2:	48a2      	ldr	r0, [pc, #648]	; (2f76c <agps_print+0x31c>)
   2f4e4:	f011 ff6e 	bl	413c4 <printk>
	printk("\taf2: %d\n", data->af2);
   2f4e8:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2f4ec:	48a0      	ldr	r0, [pc, #640]	; (2f770 <agps_print+0x320>)
   2f4ee:	f011 ff69 	bl	413c4 <printk>
	printk("\taf1: %d\n", data->af1);
   2f4f2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2f4f6:	489f      	ldr	r0, [pc, #636]	; (2f774 <agps_print+0x324>)
   2f4f8:	f011 ff64 	bl	413c4 <printk>
	printk("\taf0: %d\n", data->af0);
   2f4fc:	68e1      	ldr	r1, [r4, #12]
   2f4fe:	489e      	ldr	r0, [pc, #632]	; (2f778 <agps_print+0x328>)
   2f500:	f011 ff60 	bl	413c4 <printk>
	printk("\ttgd: %d\n", data->tgd);
   2f504:	f994 1010 	ldrsb.w	r1, [r4, #16]
   2f508:	489c      	ldr	r0, [pc, #624]	; (2f77c <agps_print+0x32c>)
   2f50a:	f011 ff5b 	bl	413c4 <printk>
	printk("\tura: %d\n", data->ura);
   2f50e:	7c61      	ldrb	r1, [r4, #17]
   2f510:	489b      	ldr	r0, [pc, #620]	; (2f780 <agps_print+0x330>)
   2f512:	f011 ff57 	bl	413c4 <printk>
	printk("\tfit_int: %d\n", data->fit_int);
   2f516:	7ca1      	ldrb	r1, [r4, #18]
   2f518:	489a      	ldr	r0, [pc, #616]	; (2f784 <agps_print+0x334>)
   2f51a:	f011 ff53 	bl	413c4 <printk>
	printk("\ttoe: %d\n", data->toe);
   2f51e:	8aa1      	ldrh	r1, [r4, #20]
   2f520:	4899      	ldr	r0, [pc, #612]	; (2f788 <agps_print+0x338>)
   2f522:	f011 ff4f 	bl	413c4 <printk>
	printk("\tw: %d\n", data->w);
   2f526:	69a1      	ldr	r1, [r4, #24]
   2f528:	4898      	ldr	r0, [pc, #608]	; (2f78c <agps_print+0x33c>)
   2f52a:	f011 ff4b 	bl	413c4 <printk>
	printk("\tdelta_n: %d\n", data->delta_n);
   2f52e:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2f532:	4897      	ldr	r0, [pc, #604]	; (2f790 <agps_print+0x340>)
   2f534:	f011 ff46 	bl	413c4 <printk>
	printk("\tm0: %d\n", data->m0);
   2f538:	6a21      	ldr	r1, [r4, #32]
   2f53a:	4896      	ldr	r0, [pc, #600]	; (2f794 <agps_print+0x344>)
   2f53c:	f011 ff42 	bl	413c4 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2f540:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2f542:	4895      	ldr	r0, [pc, #596]	; (2f798 <agps_print+0x348>)
   2f544:	f011 ff3e 	bl	413c4 <printk>
	printk("\te: %d\n", data->e);
   2f548:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2f54a:	4894      	ldr	r0, [pc, #592]	; (2f79c <agps_print+0x34c>)
   2f54c:	f011 ff3a 	bl	413c4 <printk>
	printk("\tidot: %d\n", data->idot);
   2f550:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   2f554:	4892      	ldr	r0, [pc, #584]	; (2f7a0 <agps_print+0x350>)
   2f556:	f011 ff35 	bl	413c4 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2f55a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2f55c:	4891      	ldr	r0, [pc, #580]	; (2f7a4 <agps_print+0x354>)
   2f55e:	f011 ff31 	bl	413c4 <printk>
	printk("\ti0: %d\n", data->i0);
   2f562:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2f564:	4890      	ldr	r0, [pc, #576]	; (2f7a8 <agps_print+0x358>)
   2f566:	f011 ff2d 	bl	413c4 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2f56a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2f56c:	488f      	ldr	r0, [pc, #572]	; (2f7ac <agps_print+0x35c>)
   2f56e:	f011 ff29 	bl	413c4 <printk>
	printk("\tcrs: %d\n", data->crs);
   2f572:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   2f576:	488e      	ldr	r0, [pc, #568]	; (2f7b0 <agps_print+0x360>)
   2f578:	f011 ff24 	bl	413c4 <printk>
	printk("\tcis: %d\n", data->cis);
   2f57c:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
   2f580:	488c      	ldr	r0, [pc, #560]	; (2f7b4 <agps_print+0x364>)
   2f582:	f011 ff1f 	bl	413c4 <printk>
	printk("\tcus: %d\n", data->cus);
   2f586:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   2f58a:	488b      	ldr	r0, [pc, #556]	; (2f7b8 <agps_print+0x368>)
   2f58c:	f011 ff1a 	bl	413c4 <printk>
	printk("\tcrc: %d\n", data->crc);
   2f590:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
   2f594:	4889      	ldr	r0, [pc, #548]	; (2f7bc <agps_print+0x36c>)
   2f596:	f011 ff15 	bl	413c4 <printk>
	printk("\tcic: %d\n", data->cic);
   2f59a:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   2f59e:	4888      	ldr	r0, [pc, #544]	; (2f7c0 <agps_print+0x370>)
   2f5a0:	f011 ff10 	bl	413c4 <printk>
	printk("\tcuc: %d\n", data->cuc);
   2f5a4:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   2f5a8:	4886      	ldr	r0, [pc, #536]	; (2f7c4 <agps_print+0x374>)
   2f5aa:	e786      	b.n	2f4ba <agps_print+0x6a>
	printk("almanac\n");
   2f5ac:	4886      	ldr	r0, [pc, #536]	; (2f7c8 <agps_print+0x378>)
   2f5ae:	f011 ff09 	bl	413c4 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2f5b2:	7821      	ldrb	r1, [r4, #0]
   2f5b4:	486a      	ldr	r0, [pc, #424]	; (2f760 <agps_print+0x310>)
   2f5b6:	f011 ff05 	bl	413c4 <printk>
	printk("\twn: %d\n", data->wn);
   2f5ba:	7861      	ldrb	r1, [r4, #1]
   2f5bc:	4883      	ldr	r0, [pc, #524]	; (2f7cc <agps_print+0x37c>)
   2f5be:	f011 ff01 	bl	413c4 <printk>
	printk("\ttoa: %d\n", data->toa);
   2f5c2:	78a1      	ldrb	r1, [r4, #2]
   2f5c4:	4882      	ldr	r0, [pc, #520]	; (2f7d0 <agps_print+0x380>)
   2f5c6:	f011 fefd 	bl	413c4 <printk>
	printk("\tioda: %d\n", data->ioda);
   2f5ca:	78e1      	ldrb	r1, [r4, #3]
   2f5cc:	4881      	ldr	r0, [pc, #516]	; (2f7d4 <agps_print+0x384>)
   2f5ce:	f011 fef9 	bl	413c4 <printk>
	printk("\te: %d\n", data->e);
   2f5d2:	88a1      	ldrh	r1, [r4, #4]
   2f5d4:	4871      	ldr	r0, [pc, #452]	; (2f79c <agps_print+0x34c>)
   2f5d6:	f011 fef5 	bl	413c4 <printk>
	printk("\tdelta_i: %d\n", data->delta_i);
   2f5da:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   2f5de:	487e      	ldr	r0, [pc, #504]	; (2f7d8 <agps_print+0x388>)
   2f5e0:	f011 fef0 	bl	413c4 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2f5e4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2f5e8:	486b      	ldr	r0, [pc, #428]	; (2f798 <agps_print+0x348>)
   2f5ea:	f011 feeb 	bl	413c4 <printk>
	printk("\tsv_health: %d\n", data->sv_health);
   2f5ee:	7aa1      	ldrb	r1, [r4, #10]
   2f5f0:	487a      	ldr	r0, [pc, #488]	; (2f7dc <agps_print+0x38c>)
   2f5f2:	f011 fee7 	bl	413c4 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2f5f6:	68e1      	ldr	r1, [r4, #12]
   2f5f8:	486a      	ldr	r0, [pc, #424]	; (2f7a4 <agps_print+0x354>)
   2f5fa:	f011 fee3 	bl	413c4 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2f5fe:	6921      	ldr	r1, [r4, #16]
   2f600:	486a      	ldr	r0, [pc, #424]	; (2f7ac <agps_print+0x35c>)
   2f602:	f011 fedf 	bl	413c4 <printk>
	printk("\tw: %d\n", data->w);
   2f606:	6961      	ldr	r1, [r4, #20]
   2f608:	4860      	ldr	r0, [pc, #384]	; (2f78c <agps_print+0x33c>)
   2f60a:	f011 fedb 	bl	413c4 <printk>
	printk("\tm0: %d\n", data->m0);
   2f60e:	69a1      	ldr	r1, [r4, #24]
   2f610:	4860      	ldr	r0, [pc, #384]	; (2f794 <agps_print+0x344>)
   2f612:	f011 fed7 	bl	413c4 <printk>
	printk("\taf0: %d\n", data->af0);
   2f616:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2f61a:	4857      	ldr	r0, [pc, #348]	; (2f778 <agps_print+0x328>)
   2f61c:	f011 fed2 	bl	413c4 <printk>
	printk("\taf1: %d\n", data->af1);
   2f620:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   2f624:	4853      	ldr	r0, [pc, #332]	; (2f774 <agps_print+0x324>)
   2f626:	e748      	b.n	2f4ba <agps_print+0x6a>
	printk("klobuchar\n");
   2f628:	486d      	ldr	r0, [pc, #436]	; (2f7e0 <agps_print+0x390>)
   2f62a:	f011 fecb 	bl	413c4 <printk>
	printk("\talpha0: %d\n", data->alpha0);
   2f62e:	f994 1000 	ldrsb.w	r1, [r4]
   2f632:	486c      	ldr	r0, [pc, #432]	; (2f7e4 <agps_print+0x394>)
   2f634:	f011 fec6 	bl	413c4 <printk>
	printk("\talpha1: %d\n", data->alpha1);
   2f638:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2f63c:	486a      	ldr	r0, [pc, #424]	; (2f7e8 <agps_print+0x398>)
   2f63e:	f011 fec1 	bl	413c4 <printk>
	printk("\talpha2: %d\n", data->alpha2);
   2f642:	f994 1002 	ldrsb.w	r1, [r4, #2]
   2f646:	4869      	ldr	r0, [pc, #420]	; (2f7ec <agps_print+0x39c>)
   2f648:	f011 febc 	bl	413c4 <printk>
	printk("\talpha3: %d\n", data->alpha3);
   2f64c:	f994 1003 	ldrsb.w	r1, [r4, #3]
   2f650:	4867      	ldr	r0, [pc, #412]	; (2f7f0 <agps_print+0x3a0>)
   2f652:	f011 feb7 	bl	413c4 <printk>
	printk("\tbeta0: %d\n", data->beta0);
   2f656:	f994 1004 	ldrsb.w	r1, [r4, #4]
   2f65a:	4866      	ldr	r0, [pc, #408]	; (2f7f4 <agps_print+0x3a4>)
   2f65c:	f011 feb2 	bl	413c4 <printk>
	printk("\tbeta1: %d\n", data->beta1);
   2f660:	f994 1005 	ldrsb.w	r1, [r4, #5]
   2f664:	4864      	ldr	r0, [pc, #400]	; (2f7f8 <agps_print+0x3a8>)
   2f666:	f011 fead 	bl	413c4 <printk>
	printk("\tbeta2: %d\n", data->beta2);
   2f66a:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2f66e:	4863      	ldr	r0, [pc, #396]	; (2f7fc <agps_print+0x3ac>)
   2f670:	f011 fea8 	bl	413c4 <printk>
	printk("\tbeta3: %d\n", data->beta3);
   2f674:	f994 1007 	ldrsb.w	r1, [r4, #7]
   2f678:	4861      	ldr	r0, [pc, #388]	; (2f800 <agps_print+0x3b0>)
   2f67a:	e71e      	b.n	2f4ba <agps_print+0x6a>
		printk("nequick unhandled\n");
   2f67c:	4861      	ldr	r0, [pc, #388]	; (2f804 <agps_print+0x3b4>)
}
   2f67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Unknown AGPS data type\n");
   2f682:	f011 be9f 	b.w	413c4 <printk>
	printk("clock_and_tows\n");
   2f686:	4860      	ldr	r0, [pc, #384]	; (2f808 <agps_print+0x3b8>)
   2f688:	f011 fe9c 	bl	413c4 <printk>
	printk("\tdate_day: %d\n", data->date_day);
   2f68c:	8821      	ldrh	r1, [r4, #0]
   2f68e:	485f      	ldr	r0, [pc, #380]	; (2f80c <agps_print+0x3bc>)
   2f690:	f011 fe98 	bl	413c4 <printk>
	printk("\ttime_full_s: %d\n", data->time_full_s);
   2f694:	6861      	ldr	r1, [r4, #4]
   2f696:	485e      	ldr	r0, [pc, #376]	; (2f810 <agps_print+0x3c0>)
   2f698:	f011 fe94 	bl	413c4 <printk>
	printk("\ttime_frac_ms: %d\n", data->time_frac_ms);
   2f69c:	8921      	ldrh	r1, [r4, #8]
   2f69e:	485d      	ldr	r0, [pc, #372]	; (2f814 <agps_print+0x3c4>)
   2f6a0:	f011 fe90 	bl	413c4 <printk>
	printk("\tsv_mask: %d\n", data->sv_mask);
   2f6a4:	68e1      	ldr	r1, [r4, #12]
   2f6a6:	485c      	ldr	r0, [pc, #368]	; (2f818 <agps_print+0x3c8>)
   2f6a8:	f011 fe8c 	bl	413c4 <printk>
	printk("\tsv_tow\n");
   2f6ac:	485b      	ldr	r0, [pc, #364]	; (2f81c <agps_print+0x3cc>)
   2f6ae:	f011 fe89 	bl	413c4 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2f6b2:	2500      	movs	r5, #0
		printk("\t\tsv_tow[%d]\n", i);
   2f6b4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 2f858 <agps_print+0x408>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2f6b8:	4f59      	ldr	r7, [pc, #356]	; (2f820 <agps_print+0x3d0>)
		printk("\t\t\tflags: %d\n", data->sv_tow[i].flags);
   2f6ba:	4e5a      	ldr	r6, [pc, #360]	; (2f824 <agps_print+0x3d4>)
		printk("\t\tsv_tow[%d]\n", i);
   2f6bc:	4629      	mov	r1, r5
   2f6be:	4640      	mov	r0, r8
   2f6c0:	f011 fe80 	bl	413c4 <printk>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2f6c4:	8a21      	ldrh	r1, [r4, #16]
   2f6c6:	4638      	mov	r0, r7
   2f6c8:	f011 fe7c 	bl	413c4 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2f6cc:	3501      	adds	r5, #1
		printk("\t\t\tflags: %d\n", data->sv_tow[i].flags);
   2f6ce:	7ca1      	ldrb	r1, [r4, #18]
   2f6d0:	4630      	mov	r0, r6
   2f6d2:	f011 fe77 	bl	413c4 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2f6d6:	2d20      	cmp	r5, #32
   2f6d8:	f104 0404 	add.w	r4, r4, #4
   2f6dc:	d1ee      	bne.n	2f6bc <agps_print+0x26c>
}
   2f6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("location\n");
   2f6e2:	4851      	ldr	r0, [pc, #324]	; (2f828 <agps_print+0x3d8>)
   2f6e4:	f011 fe6e 	bl	413c4 <printk>
	printk("\tlatitude: %d\n", data->latitude);
   2f6e8:	6821      	ldr	r1, [r4, #0]
   2f6ea:	4850      	ldr	r0, [pc, #320]	; (2f82c <agps_print+0x3dc>)
   2f6ec:	f011 fe6a 	bl	413c4 <printk>
	printk("\tlongitude: %d\n", data->longitude);
   2f6f0:	6861      	ldr	r1, [r4, #4]
   2f6f2:	484f      	ldr	r0, [pc, #316]	; (2f830 <agps_print+0x3e0>)
   2f6f4:	f011 fe66 	bl	413c4 <printk>
	printk("\taltitude: %d\n", data->altitude);
   2f6f8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2f6fc:	484d      	ldr	r0, [pc, #308]	; (2f834 <agps_print+0x3e4>)
   2f6fe:	f011 fe61 	bl	413c4 <printk>
	printk("\tunc_semimajor: %d\n", data->unc_semimajor);
   2f702:	7aa1      	ldrb	r1, [r4, #10]
   2f704:	484c      	ldr	r0, [pc, #304]	; (2f838 <agps_print+0x3e8>)
   2f706:	f011 fe5d 	bl	413c4 <printk>
	printk("\tunc_semiminor: %d\n", data->unc_semiminor);
   2f70a:	7ae1      	ldrb	r1, [r4, #11]
   2f70c:	484b      	ldr	r0, [pc, #300]	; (2f83c <agps_print+0x3ec>)
   2f70e:	f011 fe59 	bl	413c4 <printk>
	printk("\torientation_major: %d\n", data->orientation_major);
   2f712:	7b21      	ldrb	r1, [r4, #12]
   2f714:	484a      	ldr	r0, [pc, #296]	; (2f840 <agps_print+0x3f0>)
   2f716:	f011 fe55 	bl	413c4 <printk>
	printk("\tunc_altitude: %d\n", data->unc_altitude);
   2f71a:	7b61      	ldrb	r1, [r4, #13]
   2f71c:	4849      	ldr	r0, [pc, #292]	; (2f844 <agps_print+0x3f4>)
   2f71e:	f011 fe51 	bl	413c4 <printk>
	printk("\tconfidence: %d\n", data->confidence);
   2f722:	7ba1      	ldrb	r1, [r4, #14]
   2f724:	4848      	ldr	r0, [pc, #288]	; (2f848 <agps_print+0x3f8>)
   2f726:	e6c8      	b.n	2f4ba <agps_print+0x6a>
	printk("integrity\n");
   2f728:	4848      	ldr	r0, [pc, #288]	; (2f84c <agps_print+0x3fc>)
   2f72a:	f011 fe4b 	bl	413c4 <printk>
	printk("\tintegrity_mask: %d\n", data->integrity_mask);
   2f72e:	6821      	ldr	r1, [r4, #0]
   2f730:	4847      	ldr	r0, [pc, #284]	; (2f850 <agps_print+0x400>)
   2f732:	e6c2      	b.n	2f4ba <agps_print+0x6a>
		printk("Unknown AGPS data type\n");
   2f734:	4847      	ldr	r0, [pc, #284]	; (2f854 <agps_print+0x404>)
   2f736:	e7a2      	b.n	2f67e <agps_print+0x22e>
   2f738:	0004cb62 	.word	0x0004cb62
   2f73c:	0004cb68 	.word	0x0004cb68
   2f740:	0004cb71 	.word	0x0004cb71
   2f744:	0004cb7a 	.word	0x0004cb7a
   2f748:	0004cb84 	.word	0x0004cb84
   2f74c:	0004cb8f 	.word	0x0004cb8f
   2f750:	0004cb9f 	.word	0x0004cb9f
   2f754:	0004cbac 	.word	0x0004cbac
   2f758:	0004cbb5 	.word	0x0004cbb5
   2f75c:	0004cbc6 	.word	0x0004cbc6
   2f760:	0004cbd2 	.word	0x0004cbd2
   2f764:	0004cbde 	.word	0x0004cbde
   2f768:	0004cbeb 	.word	0x0004cbeb
   2f76c:	0004cbf6 	.word	0x0004cbf6
   2f770:	0004cc00 	.word	0x0004cc00
   2f774:	0004cc0a 	.word	0x0004cc0a
   2f778:	0004cc14 	.word	0x0004cc14
   2f77c:	0004cc1e 	.word	0x0004cc1e
   2f780:	0004cc28 	.word	0x0004cc28
   2f784:	0004cc32 	.word	0x0004cc32
   2f788:	0004cc40 	.word	0x0004cc40
   2f78c:	0004cc4a 	.word	0x0004cc4a
   2f790:	0004cc52 	.word	0x0004cc52
   2f794:	0004cc60 	.word	0x0004cc60
   2f798:	0004cc69 	.word	0x0004cc69
   2f79c:	0004cc79 	.word	0x0004cc79
   2f7a0:	0004cc81 	.word	0x0004cc81
   2f7a4:	0004cc8c 	.word	0x0004cc8c
   2f7a8:	0004cc99 	.word	0x0004cc99
   2f7ac:	0004cca2 	.word	0x0004cca2
   2f7b0:	0004ccaf 	.word	0x0004ccaf
   2f7b4:	0004ccb9 	.word	0x0004ccb9
   2f7b8:	0004ccc3 	.word	0x0004ccc3
   2f7bc:	0004cccd 	.word	0x0004cccd
   2f7c0:	0004ccd7 	.word	0x0004ccd7
   2f7c4:	0004cce1 	.word	0x0004cce1
   2f7c8:	0004cceb 	.word	0x0004cceb
   2f7cc:	0004ccf4 	.word	0x0004ccf4
   2f7d0:	0004ccfd 	.word	0x0004ccfd
   2f7d4:	0004cd07 	.word	0x0004cd07
   2f7d8:	0004cd12 	.word	0x0004cd12
   2f7dc:	0004cd20 	.word	0x0004cd20
   2f7e0:	0004cd30 	.word	0x0004cd30
   2f7e4:	0004cd3b 	.word	0x0004cd3b
   2f7e8:	0004cd48 	.word	0x0004cd48
   2f7ec:	0004cd55 	.word	0x0004cd55
   2f7f0:	0004cd62 	.word	0x0004cd62
   2f7f4:	0004cd6f 	.word	0x0004cd6f
   2f7f8:	0004cd7b 	.word	0x0004cd7b
   2f7fc:	0004cd87 	.word	0x0004cd87
   2f800:	0004cd93 	.word	0x0004cd93
   2f804:	0004cd9f 	.word	0x0004cd9f
   2f808:	0004cdb2 	.word	0x0004cdb2
   2f80c:	0004cdc2 	.word	0x0004cdc2
   2f810:	0004cdd1 	.word	0x0004cdd1
   2f814:	0004cde3 	.word	0x0004cde3
   2f818:	0004cdf6 	.word	0x0004cdf6
   2f81c:	0004ce04 	.word	0x0004ce04
   2f820:	0004ce1b 	.word	0x0004ce1b
   2f824:	0004ce27 	.word	0x0004ce27
   2f828:	000490d9 	.word	0x000490d9
   2f82c:	0004ce35 	.word	0x0004ce35
   2f830:	0004ce44 	.word	0x0004ce44
   2f834:	0004ce54 	.word	0x0004ce54
   2f838:	0004ce63 	.word	0x0004ce63
   2f83c:	0004ce77 	.word	0x0004ce77
   2f840:	0004ce8b 	.word	0x0004ce8b
   2f844:	0004cea3 	.word	0x0004cea3
   2f848:	0004ceb6 	.word	0x0004ceb6
   2f84c:	0004cec7 	.word	0x0004cec7
   2f850:	0004ced2 	.word	0x0004ced2
   2f854:	0004cee7 	.word	0x0004cee7
   2f858:	0004ce0d 	.word	0x0004ce0d

0002f85c <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   2f85c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2f85e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   2f862:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2f864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2f868:	d90e      	bls.n	2f888 <fragment_evt_send+0x2c>
   2f86a:	490f      	ldr	r1, [pc, #60]	; (2f8a8 <fragment_evt_send+0x4c>)
   2f86c:	f44f 739c 	mov.w	r3, #312	; 0x138
   2f870:	4a0e      	ldr	r2, [pc, #56]	; (2f8ac <fragment_evt_send+0x50>)
   2f872:	480f      	ldr	r0, [pc, #60]	; (2f8b0 <fragment_evt_send+0x54>)
   2f874:	f011 fda6 	bl	413c4 <printk>
   2f878:	480e      	ldr	r0, [pc, #56]	; (2f8b4 <fragment_evt_send+0x58>)
   2f87a:	f011 fda3 	bl	413c4 <printk>
   2f87e:	f44f 719c 	mov.w	r1, #312	; 0x138
   2f882:	480a      	ldr	r0, [pc, #40]	; (2f8ac <fragment_evt_send+0x50>)
   2f884:	f011 ffbb 	bl	417fe <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   2f888:	2300      	movs	r3, #0
   2f88a:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   2f88e:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   2f890:	9302      	str	r3, [sp, #8]
   2f892:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
			.len = client->offset,
		}
	};

	return client->callback(&evt);
   2f896:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   2f898:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   2f89a:	f641 1308 	movw	r3, #6408	; 0x1908
   2f89e:	58e3      	ldr	r3, [r4, r3]
   2f8a0:	4798      	blx	r3
}
   2f8a2:	b004      	add	sp, #16
   2f8a4:	bd10      	pop	{r4, pc}
   2f8a6:	bf00      	nop
   2f8a8:	0004cf44 	.word	0x0004cf44
   2f8ac:	0004ceff 	.word	0x0004ceff
   2f8b0:	00048156 	.word	0x00048156
   2f8b4:	0004cf5b 	.word	0x0004cf5b

0002f8b8 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   2f8b8:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   2f8ba:	4604      	mov	r4, r0
{
   2f8bc:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   2f8be:	b1f8      	cbz	r0, 2f900 <download_client_init+0x48>
   2f8c0:	b1f1      	cbz	r1, 2f900 <download_client_init+0x48>
		return -EINVAL;
	}

	client->fd = -1;
   2f8c2:	f04f 33ff 	mov.w	r3, #4294967295
   2f8c6:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   2f8c8:	f641 1308 	movw	r3, #6408	; 0x1908
   2f8cc:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2f8ce:	2200      	movs	r2, #0
   2f8d0:	2300      	movs	r3, #0
   2f8d2:	2500      	movs	r5, #0
   2f8d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2f8d8:	230e      	movs	r3, #14
   2f8da:	9000      	str	r0, [sp, #0]
   2f8dc:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2f8e0:	f600 1108 	addw	r1, r0, #2312	; 0x908
   2f8e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2f8e8:	e9cd 5501 	strd	r5, r5, [sp, #4]
   2f8ec:	4b06      	ldr	r3, [pc, #24]	; (2f908 <download_client_init+0x50>)
   2f8ee:	f500 6004 	add.w	r0, r0, #2112	; 0x840
   2f8f2:	f00e fa43 	bl	3dd7c <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   2f8f6:	f8c4 0838 	str.w	r0, [r4, #2104]	; 0x838
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   2f8fa:	4628      	mov	r0, r5
}
   2f8fc:	b009      	add	sp, #36	; 0x24
   2f8fe:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2f900:	f06f 0015 	mvn.w	r0, #21
   2f904:	e7fa      	b.n	2f8fc <download_client_init+0x44>
   2f906:	bf00      	nop
   2f908:	0002fd85 	.word	0x0002fd85

0002f90c <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   2f90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f910:	4688      	mov	r8, r1
   2f912:	4616      	mov	r6, r2
	int err;
	struct sockaddr sa;

	if (client == NULL || host == NULL || config == NULL) {
   2f914:	4604      	mov	r4, r0
{
   2f916:	b0c5      	sub	sp, #276	; 0x114
	if (client == NULL || host == NULL || config == NULL) {
   2f918:	2800      	cmp	r0, #0
   2f91a:	f000 81de 	beq.w	2fcda <download_client_connect+0x3ce>
   2f91e:	2900      	cmp	r1, #0
   2f920:	f000 81db 	beq.w	2fcda <download_client_connect+0x3ce>
   2f924:	2a00      	cmp	r2, #0
   2f926:	f000 81d8 	beq.w	2fcda <download_client_connect+0x3ce>
		return -EINVAL;
	}

	if (client->fd != -1) {
   2f92a:	6803      	ldr	r3, [r0, #0]
   2f92c:	3301      	adds	r3, #1
   2f92e:	f040 81d7 	bne.w	2fce0 <download_client_connect+0x3d4>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   2f932:	6893      	ldr	r3, [r2, #8]
   2f934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2f938:	d90f      	bls.n	2f95a <download_client_connect+0x4e>
   2f93a:	4bc1      	ldr	r3, [pc, #772]	; (2fc40 <download_client_connect+0x334>)
   2f93c:	48c1      	ldr	r0, [pc, #772]	; (2fc44 <download_client_connect+0x338>)
		LOG_ERR("The configured fragment size is larger than buffer");
   2f93e:	49c2      	ldr	r1, [pc, #776]	; (2fc48 <download_client_connect+0x33c>)
   2f940:	1ac0      	subs	r0, r0, r3
   2f942:	08c0      	lsrs	r0, r0, #3
   2f944:	0180      	lsls	r0, r0, #6
   2f946:	f040 0001 	orr.w	r0, r0, #1
   2f94a:	f011 ff69 	bl	41820 <log_string_sync>
		return -E2BIG;
   2f94e:	f06f 0506 	mvn.w	r5, #6
	if (client->fd < 0) {
		return err;
	}

	return 0;
}
   2f952:	4628      	mov	r0, r5
   2f954:	b045      	add	sp, #276	; 0x114
   2f956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = host_lookup(host, AF_INET, config->apn, &sa);
   2f95a:	6855      	ldr	r5, [r2, #4]
	struct addrinfo hints = {
   2f95c:	2100      	movs	r1, #0
   2f95e:	2250      	movs	r2, #80	; 0x50
   2f960:	a81c      	add	r0, sp, #112	; 0x70
   2f962:	f015 f9e0 	bl	44d26 <memset>
			} : NULL,
   2f966:	b16d      	cbz	r5, 2f984 <download_client_connect+0x78>
			&(struct addrinfo) {
   2f968:	2250      	movs	r2, #80	; 0x50
   2f96a:	2100      	movs	r1, #0
   2f96c:	a830      	add	r0, sp, #192	; 0xc0
   2f96e:	f015 f9da 	bl	44d26 <memset>
   2f972:	2304      	movs	r3, #4
   2f974:	2266      	movs	r2, #102	; 0x66
   2f976:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
   2f97a:	f240 2302 	movw	r3, #514	; 0x202
   2f97e:	9537      	str	r5, [sp, #220]	; 0xdc
   2f980:	9334      	str	r3, [sp, #208]	; 0xd0
			} : NULL,
   2f982:	ad30      	add	r5, sp, #192	; 0xc0
	struct addrinfo hints = {
   2f984:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   2f986:	2240      	movs	r2, #64	; 0x40
   2f988:	4640      	mov	r0, r8
   2f98a:	a90c      	add	r1, sp, #48	; 0x30
	struct addrinfo hints = {
   2f98c:	951c      	str	r5, [sp, #112]	; 0x70
   2f98e:	931e      	str	r3, [sp, #120]	; 0x78
	err = url_parse_host(host, hostname, sizeof(hostname));
   2f990:	f000 fb78 	bl	30084 <url_parse_host>
	if (err) {
   2f994:	4605      	mov	r5, r0
   2f996:	2800      	cmp	r0, #0
   2f998:	d1db      	bne.n	2f952 <download_client_connect+0x46>
	return zsock_getaddrinfo(host, service, hints, res);
   2f99a:	4601      	mov	r1, r0
   2f99c:	ab05      	add	r3, sp, #20
   2f99e:	aa1c      	add	r2, sp, #112	; 0x70
   2f9a0:	a80c      	add	r0, sp, #48	; 0x30
   2f9a2:	f012 fae1 	bl	41f68 <zsock_getaddrinfo>
	if (err) {
   2f9a6:	4605      	mov	r5, r0
   2f9a8:	b190      	cbz	r0, 2f9d0 <download_client_connect+0xc4>
   2f9aa:	4ba5      	ldr	r3, [pc, #660]	; (2fc40 <download_client_connect+0x334>)
   2f9ac:	4ca5      	ldr	r4, [pc, #660]	; (2fc44 <download_client_connect+0x338>)
		LOG_WRN("Failed to resolve hostname %s on %s",
   2f9ae:	a80c      	add	r0, sp, #48	; 0x30
   2f9b0:	1ae4      	subs	r4, r4, r3
   2f9b2:	f011 ff48 	bl	41846 <log_strdup>
   2f9b6:	08e4      	lsrs	r4, r4, #3
   2f9b8:	01a4      	lsls	r4, r4, #6
   2f9ba:	f044 0402 	orr.w	r4, r4, #2
   2f9be:	4602      	mov	r2, r0
   2f9c0:	4ba2      	ldr	r3, [pc, #648]	; (2fc4c <download_client_connect+0x340>)
   2f9c2:	4620      	mov	r0, r4
   2f9c4:	49a2      	ldr	r1, [pc, #648]	; (2fc50 <download_client_connect+0x344>)
   2f9c6:	f011 ff2b 	bl	41820 <log_string_sync>
		return -EHOSTUNREACH;
   2f9ca:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2f9ce:	e7c0      	b.n	2f952 <download_client_connect+0x46>
	*sa = *(ai->ai_addr);
   2f9d0:	f8dd c014 	ldr.w	ip, [sp, #20]
   2f9d4:	aa06      	add	r2, sp, #24
   2f9d6:	f8dc 3018 	ldr.w	r3, [ip, #24]
   2f9da:	f103 0e18 	add.w	lr, r3, #24
   2f9de:	4617      	mov	r7, r2
   2f9e0:	6818      	ldr	r0, [r3, #0]
   2f9e2:	6859      	ldr	r1, [r3, #4]
   2f9e4:	3308      	adds	r3, #8
   2f9e6:	c703      	stmia	r7!, {r0, r1}
   2f9e8:	4573      	cmp	r3, lr
   2f9ea:	463a      	mov	r2, r7
   2f9ec:	d1f7      	bne.n	2f9de <download_client_connect+0xd2>
	zsock_freeaddrinfo(ai);
   2f9ee:	4660      	mov	r0, ip
   2f9f0:	f012 fabc 	bl	41f6c <zsock_freeaddrinfo>
	client->config = *config;
   2f9f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2f9f8:	f604 0318 	addw	r3, r4, #2072	; 0x818
   2f9fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = url_parse_proto(host, &dl->proto, &type);
   2fa00:	4640      	mov	r0, r8
	client->host = host;
   2fa02:	f8c4 8810 	str.w	r8, [r4, #2064]	; 0x810
	err = url_parse_proto(host, &dl->proto, &type);
   2fa06:	aa0c      	add	r2, sp, #48	; 0x30
   2fa08:	f604 0124 	addw	r1, r4, #2084	; 0x824
   2fa0c:	f000 fb04 	bl	30018 <url_parse_proto>
	if (err) {
   2fa10:	b150      	cbz	r0, 2fa28 <download_client_connect+0x11c>
		type = SOCK_STREAM;
   2fa12:	2301      	movs	r3, #1
   2fa14:	930c      	str	r3, [sp, #48]	; 0x30
		if (dl->config.sec_tag != -1) {
   2fa16:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   2fa1a:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   2fa1c:	bf14      	ite	ne
   2fa1e:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   2fa22:	2306      	moveq	r3, #6
   2fa24:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   2fa28:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   2fa2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   2fa30:	2a11      	cmp	r2, #17
   2fa32:	f000 814c 	beq.w	2fcce <download_client_connect+0x3c2>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   2fa36:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2fa3a:	d115      	bne.n	2fa68 <download_client_connect+0x15c>
		if (dl->config.sec_tag == -1) {
   2fa3c:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   2fa40:	3301      	adds	r3, #1
   2fa42:	d111      	bne.n	2fa68 <download_client_connect+0x15c>
   2fa44:	4b7e      	ldr	r3, [pc, #504]	; (2fc40 <download_client_connect+0x334>)
   2fa46:	487f      	ldr	r0, [pc, #508]	; (2fc44 <download_client_connect+0x338>)
			LOG_WRN("No security tag provided for TLS/DTLS");
   2fa48:	4982      	ldr	r1, [pc, #520]	; (2fc54 <download_client_connect+0x348>)
   2fa4a:	1ac0      	subs	r0, r0, r3
   2fa4c:	08c0      	lsrs	r0, r0, #3
   2fa4e:	0180      	lsls	r0, r0, #6
   2fa50:	f040 0002 	orr.w	r0, r0, #2
   2fa54:	f011 fee4 	bl	41820 <log_string_sync>
			return -EINVAL;
   2fa58:	f06f 0715 	mvn.w	r7, #21
	if (client->fd < 0) {
   2fa5c:	6823      	ldr	r3, [r4, #0]
		return err;
   2fa5e:	ea35 0523 	bics.w	r5, r5, r3, asr #32
   2fa62:	bf28      	it	cs
   2fa64:	463d      	movcs	r5, r7
   2fa66:	e774      	b.n	2f952 <download_client_connect+0x46>
	err = url_parse_port(host, &port);
   2fa68:	4640      	mov	r0, r8
   2fa6a:	a905      	add	r1, sp, #20
   2fa6c:	f000 fb34 	bl	300d8 <url_parse_port>
	if (err) {
   2fa70:	b148      	cbz	r0, 2fa86 <download_client_connect+0x17a>
		switch (dl->proto) {
   2fa72:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   2fa76:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2fa7a:	d03a      	beq.n	2faf2 <download_client_connect+0x1e6>
   2fa7c:	dc32      	bgt.n	2fae4 <download_client_connect+0x1d8>
   2fa7e:	2b06      	cmp	r3, #6
   2fa80:	d03c      	beq.n	2fafc <download_client_connect+0x1f0>
   2fa82:	2b11      	cmp	r3, #17
   2fa84:	d03c      	beq.n	2fb00 <download_client_connect+0x1f4>
	switch (sa->sa_family) {
   2fa86:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   2fa8a:	2801      	cmp	r0, #1
   2fa8c:	d03b      	beq.n	2fb06 <download_client_connect+0x1fa>
   2fa8e:	2802      	cmp	r0, #2
   2fa90:	f040 8120 	bne.w	2fcd4 <download_client_connect+0x3c8>
		SIN6(sa)->sin6_port = htons(port);
   2fa94:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2fa98:	0213      	lsls	r3, r2, #8
   2fa9a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2fa9e:	f8ad 301a 	strh.w	r3, [sp, #26]
		addrlen = sizeof(struct sockaddr_in6);
   2faa2:	2318      	movs	r3, #24
	*fd = socket(sa->sa_family, type, dl->proto);
   2faa4:	990c      	ldr	r1, [sp, #48]	; 0x30
   2faa6:	f8d4 2824 	ldr.w	r2, [r4, #2084]	; 0x824
		addrlen = sizeof(struct sockaddr_in);
   2faaa:	9302      	str	r3, [sp, #8]
	return z_impl_zsock_socket(family, type, proto);
   2faac:	f7f5 fbe0 	bl	25270 <z_impl_zsock_socket>
   2fab0:	4f64      	ldr	r7, [pc, #400]	; (2fc44 <download_client_connect+0x338>)
   2fab2:	4b63      	ldr	r3, [pc, #396]	; (2fc40 <download_client_connect+0x334>)
	if (*fd < 0) {
   2fab4:	2800      	cmp	r0, #0
   2fab6:	eba7 0703 	sub.w	r7, r7, r3
   2faba:	ea4f 03d7 	mov.w	r3, r7, lsr #3
	*fd = socket(sa->sa_family, type, dl->proto);
   2fabe:	6020      	str	r0, [r4, #0]
	if (*fd < 0) {
   2fac0:	9303      	str	r3, [sp, #12]
   2fac2:	ea4f 1683 	mov.w	r6, r3, lsl #6
   2fac6:	da27      	bge.n	2fb18 <download_client_connect+0x20c>
		LOG_ERR("Failed to create socket, err %d", errno);
   2fac8:	f012 fdd3 	bl	42672 <__errno>
   2facc:	f046 0601 	orr.w	r6, r6, #1
   2fad0:	6802      	ldr	r2, [r0, #0]
   2fad2:	4961      	ldr	r1, [pc, #388]	; (2fc58 <download_client_connect+0x34c>)
   2fad4:	4630      	mov	r0, r6
   2fad6:	f011 fea3 	bl	41820 <log_string_sync>
		return -errno;
   2fada:	f012 fdca 	bl	42672 <__errno>
   2fade:	6807      	ldr	r7, [r0, #0]
   2fae0:	427f      	negs	r7, r7
   2fae2:	e7bb      	b.n	2fa5c <download_client_connect+0x150>
		switch (dl->proto) {
   2fae4:	f240 1211 	movw	r2, #273	; 0x111
   2fae8:	4293      	cmp	r3, r2
   2faea:	d1cc      	bne.n	2fa86 <download_client_connect+0x17a>
			port = 5684;
   2faec:	f241 6334 	movw	r3, #5684	; 0x1634
   2faf0:	e001      	b.n	2faf6 <download_client_connect+0x1ea>
			port = 443;
   2faf2:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   2faf6:	f8ad 3014 	strh.w	r3, [sp, #20]
			break;
   2fafa:	e7c4      	b.n	2fa86 <download_client_connect+0x17a>
			port = 80;
   2fafc:	2350      	movs	r3, #80	; 0x50
   2fafe:	e7fa      	b.n	2faf6 <download_client_connect+0x1ea>
			port = 5683;
   2fb00:	f241 6333 	movw	r3, #5683	; 0x1633
   2fb04:	e7f7      	b.n	2faf6 <download_client_connect+0x1ea>
		SIN(sa)->sin_port = htons(port);
   2fb06:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2fb0a:	0213      	lsls	r3, r2, #8
   2fb0c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2fb10:	f8ad 301a 	strh.w	r3, [sp, #26]
		addrlen = sizeof(struct sockaddr_in);
   2fb14:	2308      	movs	r3, #8
   2fb16:	e7c5      	b.n	2faa4 <download_client_connect+0x198>
	if (dl->config.apn != NULL && strlen(dl->config.apn)) {
   2fb18:	f8d4 081c 	ldr.w	r0, [r4, #2076]	; 0x81c
   2fb1c:	2800      	cmp	r0, #0
   2fb1e:	d04a      	beq.n	2fbb6 <download_client_connect+0x2aa>
   2fb20:	f7ed fb9c 	bl	1d25c <strlen>
   2fb24:	2800      	cmp	r0, #0
   2fb26:	d046      	beq.n	2fbb6 <download_client_connect+0x2aa>
		err = socket_apn_set(*fd, dl->config.apn);
   2fb28:	f8d4 781c 	ldr.w	r7, [r4, #2076]	; 0x81c
   2fb2c:	f8d4 a000 	ldr.w	sl, [r4]
	__ASSERT_NO_MSG(apn);
   2fb30:	b94f      	cbnz	r7, 2fb46 <download_client_connect+0x23a>
   2fb32:	494a      	ldr	r1, [pc, #296]	; (2fc5c <download_client_connect+0x350>)
   2fb34:	484a      	ldr	r0, [pc, #296]	; (2fc60 <download_client_connect+0x354>)
   2fb36:	236f      	movs	r3, #111	; 0x6f
   2fb38:	4a4a      	ldr	r2, [pc, #296]	; (2fc64 <download_client_connect+0x358>)
   2fb3a:	f011 fc43 	bl	413c4 <printk>
   2fb3e:	216f      	movs	r1, #111	; 0x6f
   2fb40:	4848      	ldr	r0, [pc, #288]	; (2fc64 <download_client_connect+0x358>)
   2fb42:	f011 fe5c 	bl	417fe <assert_post_action>
	len = strlen(apn);
   2fb46:	4638      	mov	r0, r7
   2fb48:	f7ed fb88 	bl	1d25c <strlen>
	if (len >= IFNAMSIZ) {
   2fb4c:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   2fb4e:	4681      	mov	r9, r0
	if (len >= IFNAMSIZ) {
   2fb50:	d90d      	bls.n	2fb6e <download_client_connect+0x262>
		LOG_ERR("Access point name is too long.");
   2fb52:	4945      	ldr	r1, [pc, #276]	; (2fc68 <download_client_connect+0x35c>)
   2fb54:	f046 0001 	orr.w	r0, r6, #1
   2fb58:	f011 fe62 	bl	41820 <log_string_sync>
		return -EINVAL;
   2fb5c:	f06f 0715 	mvn.w	r7, #21
		close(*fd);
   2fb60:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   2fb62:	f012 fa14 	bl	41f8e <z_impl_zsock_close>
		*fd = -1;
   2fb66:	f04f 33ff 	mov.w	r3, #4294967295
   2fb6a:	6023      	str	r3, [r4, #0]
   2fb6c:	e776      	b.n	2fa5c <download_client_connect+0x150>
	LOG_INF("Setting up APN: %s", log_strdup(apn));
   2fb6e:	4638      	mov	r0, r7
   2fb70:	f011 fe69 	bl	41846 <log_strdup>
   2fb74:	f046 0b03 	orr.w	fp, r6, #3
   2fb78:	4602      	mov	r2, r0
   2fb7a:	493c      	ldr	r1, [pc, #240]	; (2fc6c <download_client_connect+0x360>)
   2fb7c:	4658      	mov	r0, fp
   2fb7e:	f011 fe4f 	bl	41820 <log_string_sync>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2fb82:	2219      	movs	r2, #25
   2fb84:	463b      	mov	r3, r7
   2fb86:	2101      	movs	r1, #1
   2fb88:	4650      	mov	r0, sl
   2fb8a:	f8cd 9000 	str.w	r9, [sp]
   2fb8e:	f012 fa96 	bl	420be <z_impl_zsock_setsockopt>
	if (err) {
   2fb92:	b180      	cbz	r0, 2fbb6 <download_client_connect+0x2aa>
		LOG_ERR("Failed to bind socket to network \"%s\", err %d",
   2fb94:	4638      	mov	r0, r7
   2fb96:	f011 fe56 	bl	41846 <log_strdup>
   2fb9a:	9002      	str	r0, [sp, #8]
   2fb9c:	f012 fd69 	bl	42672 <__errno>
   2fba0:	f046 0601 	orr.w	r6, r6, #1
   2fba4:	6803      	ldr	r3, [r0, #0]
   2fba6:	9a02      	ldr	r2, [sp, #8]
   2fba8:	4630      	mov	r0, r6
   2fbaa:	4931      	ldr	r1, [pc, #196]	; (2fc70 <download_client_connect+0x364>)
   2fbac:	f011 fe38 	bl	41820 <log_string_sync>
		return -ENETUNREACH;
   2fbb0:	f06f 0771 	mvn.w	r7, #113	; 0x71
   2fbb4:	e7d4      	b.n	2fb60 <download_client_connect+0x254>
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   2fbb6:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   2fbba:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2fbbe:	d003      	beq.n	2fbc8 <download_client_connect+0x2bc>
   2fbc0:	f240 1211 	movw	r2, #273	; 0x111
   2fbc4:	4293      	cmp	r3, r2
   2fbc6:	d128      	bne.n	2fc1a <download_client_connect+0x30e>
	     && (dl->config.sec_tag != -1)) {
   2fbc8:	f8d4 9818 	ldr.w	r9, [r4, #2072]	; 0x818
   2fbcc:	f1b9 3fff 	cmp.w	r9, #4294967295
   2fbd0:	d023      	beq.n	2fc1a <download_client_connect+0x30e>
	verify = REQUIRED;
   2fbd2:	2302      	movs	r3, #2
		err = socket_sectag_set(*fd, dl->config.sec_tag);
   2fbd4:	f8d4 a000 	ldr.w	sl, [r4]
	sec_tag_t sec_tag_list[] = { sec_tag };
   2fbd8:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
	verify = REQUIRED;
   2fbdc:	931c      	str	r3, [sp, #112]	; 0x70
   2fbde:	f04f 0b04 	mov.w	fp, #4
   2fbe2:	ab1c      	add	r3, sp, #112	; 0x70
   2fbe4:	2205      	movs	r2, #5
   2fbe6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2fbea:	4650      	mov	r0, sl
   2fbec:	f8cd b000 	str.w	fp, [sp]
   2fbf0:	f012 fa65 	bl	420be <z_impl_zsock_setsockopt>
	if (err) {
   2fbf4:	9b03      	ldr	r3, [sp, #12]
   2fbf6:	019f      	lsls	r7, r3, #6
   2fbf8:	2800      	cmp	r0, #0
   2fbfa:	d03f      	beq.n	2fc7c <download_client_connect+0x370>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   2fbfc:	f012 fd39 	bl	42672 <__errno>
   2fc00:	491c      	ldr	r1, [pc, #112]	; (2fc74 <download_client_connect+0x368>)
   2fc02:	6802      	ldr	r2, [r0, #0]
   2fc04:	f047 0701 	orr.w	r7, r7, #1
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   2fc08:	4638      	mov	r0, r7
   2fc0a:	f011 fe09 	bl	41820 <log_string_sync>
		return -errno;
   2fc0e:	f012 fd30 	bl	42672 <__errno>
   2fc12:	6807      	ldr	r7, [r0, #0]
   2fc14:	427f      	negs	r7, r7
		if (err) {
   2fc16:	2f00      	cmp	r7, #0
   2fc18:	d1a2      	bne.n	2fb60 <download_client_connect+0x254>
	LOG_INF("Connecting to %s", log_strdup(host));
   2fc1a:	4640      	mov	r0, r8
   2fc1c:	f011 fe13 	bl	41846 <log_strdup>
   2fc20:	f046 0703 	orr.w	r7, r6, #3
   2fc24:	4602      	mov	r2, r0
   2fc26:	4914      	ldr	r1, [pc, #80]	; (2fc78 <download_client_connect+0x36c>)
   2fc28:	4638      	mov	r0, r7
   2fc2a:	f011 fdf9 	bl	41820 <log_string_sync>
	err = connect(*fd, sa, addrlen);
   2fc2e:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   2fc30:	9a02      	ldr	r2, [sp, #8]
   2fc32:	a906      	add	r1, sp, #24
   2fc34:	f012 f9c2 	bl	41fbc <z_impl_zsock_connect>
	if (err) {
   2fc38:	2800      	cmp	r0, #0
   2fc3a:	d137      	bne.n	2fcac <download_client_connect+0x3a0>
			return -EINVAL;
   2fc3c:	2700      	movs	r7, #0
   2fc3e:	e70d      	b.n	2fa5c <download_client_connect+0x150>
   2fc40:	000463bc 	.word	0x000463bc
   2fc44:	0004643c 	.word	0x0004643c
   2fc48:	0004cf6e 	.word	0x0004cf6e
   2fc4c:	0004cfa1 	.word	0x0004cfa1
   2fc50:	0004cfa6 	.word	0x0004cfa6
   2fc54:	0004cfca 	.word	0x0004cfca
   2fc58:	0004cff0 	.word	0x0004cff0
   2fc5c:	0004b127 	.word	0x0004b127
   2fc60:	00048156 	.word	0x00048156
   2fc64:	0004ceff 	.word	0x0004ceff
   2fc68:	0004d010 	.word	0x0004d010
   2fc6c:	0004d02f 	.word	0x0004d02f
   2fc70:	0004d042 	.word	0x0004d042
   2fc74:	0004d070 	.word	0x0004d070
   2fc78:	0004d0ed 	.word	0x0004d0ed
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   2fc7c:	464a      	mov	r2, r9
   2fc7e:	4919      	ldr	r1, [pc, #100]	; (2fce4 <download_client_connect+0x3d8>)
   2fc80:	f047 0003 	orr.w	r0, r7, #3
   2fc84:	f011 fdcc 	bl	41820 <log_string_sync>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2fc88:	2201      	movs	r2, #1
   2fc8a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2fc8e:	4650      	mov	r0, sl
   2fc90:	f8cd b000 	str.w	fp, [sp]
   2fc94:	ab30      	add	r3, sp, #192	; 0xc0
   2fc96:	f012 fa12 	bl	420be <z_impl_zsock_setsockopt>
	if (err) {
   2fc9a:	2800      	cmp	r0, #0
   2fc9c:	d0bd      	beq.n	2fc1a <download_client_connect+0x30e>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   2fc9e:	f012 fce8 	bl	42672 <__errno>
   2fca2:	f047 0701 	orr.w	r7, r7, #1
   2fca6:	6802      	ldr	r2, [r0, #0]
   2fca8:	490f      	ldr	r1, [pc, #60]	; (2fce8 <download_client_connect+0x3dc>)
   2fcaa:	e7ad      	b.n	2fc08 <download_client_connect+0x2fc>
		LOG_ERR("Unable to connect, errno %d", errno);
   2fcac:	f012 fce1 	bl	42672 <__errno>
   2fcb0:	f046 0601 	orr.w	r6, r6, #1
   2fcb4:	6802      	ldr	r2, [r0, #0]
   2fcb6:	490d      	ldr	r1, [pc, #52]	; (2fcec <download_client_connect+0x3e0>)
   2fcb8:	4630      	mov	r0, r6
   2fcba:	f011 fdb1 	bl	41820 <log_string_sync>
		err = -errno;
   2fcbe:	f012 fcd8 	bl	42672 <__errno>
   2fcc2:	6803      	ldr	r3, [r0, #0]
   2fcc4:	425f      	negs	r7, r3
	if (err) {
   2fcc6:	2b00      	cmp	r3, #0
   2fcc8:	f47f af4a 	bne.w	2fb60 <download_client_connect+0x254>
   2fccc:	e7b6      	b.n	2fc3c <download_client_connect+0x330>
			return -EPROTONOSUPPORT;
   2fcce:	f06f 077a 	mvn.w	r7, #122	; 0x7a
   2fcd2:	e6c3      	b.n	2fa5c <download_client_connect+0x150>
	switch (sa->sa_family) {
   2fcd4:	f06f 0769 	mvn.w	r7, #105	; 0x69
   2fcd8:	e6c0      	b.n	2fa5c <download_client_connect+0x150>
		return -EINVAL;
   2fcda:	f06f 0515 	mvn.w	r5, #21
   2fcde:	e638      	b.n	2f952 <download_client_connect+0x46>
		return 0;
   2fce0:	2500      	movs	r5, #0
   2fce2:	e636      	b.n	2f952 <download_client_connect+0x46>
   2fce4:	0004d09c 	.word	0x0004d09c
   2fce8:	0004d0bf 	.word	0x0004d0bf
   2fcec:	0004d0fe 	.word	0x0004d0fe

0002fcf0 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   2fcf0:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   2fcf2:	4604      	mov	r4, r0
   2fcf4:	b1e0      	cbz	r0, 2fd30 <download_client_disconnect+0x40>
   2fcf6:	6800      	ldr	r0, [r0, #0]
   2fcf8:	2800      	cmp	r0, #0
   2fcfa:	db19      	blt.n	2fd30 <download_client_disconnect+0x40>
	return z_impl_zsock_close(sock);
   2fcfc:	f012 f947 	bl	41f8e <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   2fd00:	b190      	cbz	r0, 2fd28 <download_client_disconnect+0x38>
   2fd02:	4b0d      	ldr	r3, [pc, #52]	; (2fd38 <download_client_disconnect+0x48>)
   2fd04:	4c0d      	ldr	r4, [pc, #52]	; (2fd3c <download_client_disconnect+0x4c>)
   2fd06:	1ae4      	subs	r4, r4, r3
		LOG_ERR("Failed to close socket, errno %d", errno);
   2fd08:	f012 fcb3 	bl	42672 <__errno>
   2fd0c:	08e4      	lsrs	r4, r4, #3
   2fd0e:	01a4      	lsls	r4, r4, #6
   2fd10:	f044 0401 	orr.w	r4, r4, #1
   2fd14:	6802      	ldr	r2, [r0, #0]
   2fd16:	490a      	ldr	r1, [pc, #40]	; (2fd40 <download_client_disconnect+0x50>)
   2fd18:	4620      	mov	r0, r4
   2fd1a:	f011 fd81 	bl	41820 <log_string_sync>
		return -errno;
   2fd1e:	f012 fca8 	bl	42672 <__errno>
   2fd22:	6800      	ldr	r0, [r0, #0]
   2fd24:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   2fd26:	bd10      	pop	{r4, pc}
	client->fd = -1;
   2fd28:	f04f 33ff 	mov.w	r3, #4294967295
   2fd2c:	6023      	str	r3, [r4, #0]
	return 0;
   2fd2e:	e7fa      	b.n	2fd26 <download_client_disconnect+0x36>
		return -EINVAL;
   2fd30:	f06f 0015 	mvn.w	r0, #21
   2fd34:	e7f7      	b.n	2fd26 <download_client_disconnect+0x36>
   2fd36:	bf00      	nop
   2fd38:	000463bc 	.word	0x000463bc
   2fd3c:	0004643c 	.word	0x0004643c
   2fd40:	0004d11a 	.word	0x0004d11a

0002fd44 <reconnect>:
{
   2fd44:	b510      	push	{r4, lr}
   2fd46:	4604      	mov	r4, r0
   2fd48:	4b0b      	ldr	r3, [pc, #44]	; (2fd78 <reconnect+0x34>)
   2fd4a:	480c      	ldr	r0, [pc, #48]	; (2fd7c <reconnect+0x38>)
	LOG_INF("Reconnecting..");
   2fd4c:	490c      	ldr	r1, [pc, #48]	; (2fd80 <reconnect+0x3c>)
   2fd4e:	1a1b      	subs	r3, r3, r0
   2fd50:	08db      	lsrs	r3, r3, #3
   2fd52:	019b      	lsls	r3, r3, #6
   2fd54:	f043 0003 	orr.w	r0, r3, #3
   2fd58:	f011 fd62 	bl	41820 <log_string_sync>
	err = download_client_disconnect(dl);
   2fd5c:	4620      	mov	r0, r4
   2fd5e:	f7ff ffc7 	bl	2fcf0 <download_client_disconnect>
	if (err) {
   2fd62:	b940      	cbnz	r0, 2fd76 <reconnect+0x32>
	err = download_client_connect(dl, dl->host, &dl->config);
   2fd64:	4620      	mov	r0, r4
   2fd66:	f8d4 1810 	ldr.w	r1, [r4, #2064]	; 0x810
   2fd6a:	f604 0218 	addw	r2, r4, #2072	; 0x818
}
   2fd6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   2fd72:	f7ff bdcb 	b.w	2f90c <download_client_connect>
}
   2fd76:	bd10      	pop	{r4, pc}
   2fd78:	0004643c 	.word	0x0004643c
   2fd7c:	000463bc 	.word	0x000463bc
   2fd80:	0004d13b 	.word	0x0004d13b

0002fd84 <download_thread>:
{
   2fd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd88:	4605      	mov	r5, r0
	int rc = 0;
   2fd8a:	2400      	movs	r4, #0
   2fd8c:	4e78      	ldr	r6, [pc, #480]	; (2ff70 <download_thread+0x1ec>)
   2fd8e:	4b79      	ldr	r3, [pc, #484]	; (2ff74 <download_thread+0x1f0>)
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   2fd90:	f8df 8204 	ldr.w	r8, [pc, #516]	; 2ff98 <download_thread+0x214>
   2fd94:	1af6      	subs	r6, r6, r3
   2fd96:	f8df 9204 	ldr.w	r9, [pc, #516]	; 2ff9c <download_thread+0x218>
   2fd9a:	f8df a204 	ldr.w	sl, [pc, #516]	; 2ffa0 <download_thread+0x21c>
{
   2fd9e:	b087      	sub	sp, #28
   2fda0:	08f6      	lsrs	r6, r6, #3
	k_thread_suspend(dl->tid);
   2fda2:	f8d5 0838 	ldr.w	r0, [r5, #2104]	; 0x838
	z_impl_k_thread_suspend(thread);
   2fda6:	f00d f9f5 	bl	3d194 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   2fdaa:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   2fdae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2fdb2:	d30e      	bcc.n	2fdd2 <download_thread+0x4e>
   2fdb4:	4649      	mov	r1, r9
   2fdb6:	f240 136f 	movw	r3, #367	; 0x16f
   2fdba:	4642      	mov	r2, r8
   2fdbc:	4650      	mov	r0, sl
   2fdbe:	f011 fb01 	bl	413c4 <printk>
   2fdc2:	486d      	ldr	r0, [pc, #436]	; (2ff78 <download_thread+0x1f4>)
   2fdc4:	f011 fafe 	bl	413c4 <printk>
   2fdc8:	f240 116f 	movw	r1, #367	; 0x16f
   2fdcc:	4640      	mov	r0, r8
   2fdce:	f011 fd16 	bl	417fe <assert_post_action>
		if (sizeof(dl->buf) - dl->offset == 0) {
   2fdd2:	f8d5 1804 	ldr.w	r1, [r5, #2052]	; 0x804
   2fdd6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   2fdda:	d10b      	bne.n	2fdf4 <download_thread+0x70>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   2fddc:	01b0      	lsls	r0, r6, #6
   2fdde:	460a      	mov	r2, r1
   2fde0:	f040 0001 	orr.w	r0, r0, #1
   2fde4:	4965      	ldr	r1, [pc, #404]	; (2ff7c <download_thread+0x1f8>)
   2fde6:	f011 fd1b 	bl	41820 <log_string_sync>
			error_evt_send(dl, E2BIG);
   2fdea:	2107      	movs	r1, #7
			error_evt_send(dl, EBADMSG);
   2fdec:	f505 50c8 	add.w	r0, r5, #6400	; 0x1900
   2fdf0:	3008      	adds	r0, #8
   2fdf2:	e043      	b.n	2fe7c <download_thread+0xf8>
		len = recv(dl->fd, dl->buf + dl->offset,
   2fdf4:	462f      	mov	r7, r5
   2fdf6:	f857 0b04 	ldr.w	r0, [r7], #4
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2fdfa:	2300      	movs	r3, #0
   2fdfc:	f5c1 6200 	rsb	r2, r1, #2048	; 0x800
   2fe00:	e9cd 3300 	strd	r3, r3, [sp]
   2fe04:	4439      	add	r1, r7
   2fe06:	f012 f922 	bl	4204e <z_impl_zsock_recvfrom>
		if ((len == 0) || (len == -1)) {
   2fe0a:	1e43      	subs	r3, r0, #1
   2fe0c:	3303      	adds	r3, #3
   2fe0e:	4607      	mov	r7, r0
   2fe10:	d93e      	bls.n	2fe90 <download_thread+0x10c>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   2fe12:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   2fe16:	b173      	cbz	r3, 2fe36 <download_thread+0xb2>
   2fe18:	f895 3828 	ldrb.w	r3, [r5, #2088]	; 0x828
   2fe1c:	b15b      	cbz	r3, 2fe36 <download_thread+0xb2>
				rc = fragment_evt_send(dl);
   2fe1e:	4628      	mov	r0, r5
   2fe20:	f7ff fd1c 	bl	2f85c <fragment_evt_send>
				if (rc) {
   2fe24:	4604      	mov	r4, r0
   2fe26:	b130      	cbz	r0, 2fe36 <download_thread+0xb2>
					LOG_INF("Fragment refused, download stopped.");
   2fe28:	01b0      	lsls	r0, r6, #6
   2fe2a:	4955      	ldr	r1, [pc, #340]	; (2ff80 <download_thread+0x1fc>)
   2fe2c:	f040 0003 	orr.w	r0, r0, #3
			LOG_INF("Fragment refused, download stopped.");
   2fe30:	f011 fcf6 	bl	41820 <log_string_sync>
   2fe34:	e7b5      	b.n	2fda2 <download_thread+0x1e>
			if (len == -1) {
   2fe36:	3701      	adds	r7, #1
   2fe38:	d123      	bne.n	2fe82 <download_thread+0xfe>
				if (errno == ETIMEDOUT) {
   2fe3a:	f012 fc1a 	bl	42672 <__errno>
   2fe3e:	6803      	ldr	r3, [r0, #0]
   2fe40:	2b74      	cmp	r3, #116	; 0x74
   2fe42:	d075      	beq.n	2ff30 <download_thread+0x1ac>
				LOG_ERR("Error in recv(), errno %d", errno);
   2fe44:	f012 fc15 	bl	42672 <__errno>
   2fe48:	01b4      	lsls	r4, r6, #6
   2fe4a:	f044 0401 	orr.w	r4, r4, #1
   2fe4e:	6802      	ldr	r2, [r0, #0]
   2fe50:	494c      	ldr	r1, [pc, #304]	; (2ff84 <download_thread+0x200>)
   2fe52:	4620      	mov	r0, r4
   2fe54:	f011 fce4 	bl	41820 <log_string_sync>
			rc = error_evt_send(dl, ECONNRESET);
   2fe58:	f505 57c8 	add.w	r7, r5, #6400	; 0x1900
   2fe5c:	3708      	adds	r7, #8
   2fe5e:	2168      	movs	r1, #104	; 0x68
   2fe60:	4638      	mov	r0, r7
   2fe62:	f014 fc47 	bl	446f4 <error_evt_send.isra.0>
			if (rc) {
   2fe66:	4604      	mov	r4, r0
   2fe68:	2800      	cmp	r0, #0
   2fe6a:	d19a      	bne.n	2fda2 <download_thread+0x1e>
			rc = reconnect(dl);
   2fe6c:	4628      	mov	r0, r5
   2fe6e:	f7ff ff69 	bl	2fd44 <reconnect>
			if (rc) {
   2fe72:	4604      	mov	r4, r0
   2fe74:	2800      	cmp	r0, #0
   2fe76:	d05b      	beq.n	2ff30 <download_thread+0x1ac>
				error_evt_send(dl, EHOSTDOWN);
   2fe78:	2175      	movs	r1, #117	; 0x75
   2fe7a:	4638      	mov	r0, r7
   2fe7c:	f014 fc3a 	bl	446f4 <error_evt_send.isra.0>
				break;
   2fe80:	e78f      	b.n	2fda2 <download_thread+0x1e>
				LOG_WRN("Peer closed connection!");
   2fe82:	01b0      	lsls	r0, r6, #6
   2fe84:	4940      	ldr	r1, [pc, #256]	; (2ff88 <download_thread+0x204>)
   2fe86:	f040 0002 	orr.w	r0, r0, #2
   2fe8a:	f011 fcc9 	bl	41820 <log_string_sync>
   2fe8e:	e7e3      	b.n	2fe58 <download_thread+0xd4>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   2fe90:	f8d5 3824 	ldr.w	r3, [r5, #2084]	; 0x824
   2fe94:	2b06      	cmp	r3, #6
   2fe96:	d002      	beq.n	2fe9e <download_thread+0x11a>
   2fe98:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2fe9c:	d106      	bne.n	2feac <download_thread+0x128>
			rc = http_parse(client, len);
   2fe9e:	4639      	mov	r1, r7
   2fea0:	4628      	mov	r0, r5
   2fea2:	f000 f9f3 	bl	3028c <http_parse>
			if (rc > 0) {
   2fea6:	1e04      	subs	r4, r0, #0
   2fea8:	f73f af7f 	bgt.w	2fdaa <download_thread+0x26>
		if (rc < 0) {
   2feac:	2c00      	cmp	r4, #0
   2feae:	da01      	bge.n	2feb4 <download_thread+0x130>
			error_evt_send(dl, EBADMSG);
   2feb0:	214d      	movs	r1, #77	; 0x4d
   2feb2:	e79b      	b.n	2fdec <download_thread+0x68>
		if (dl->file_size) {
   2feb4:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   2feb8:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   2febc:	01b7      	lsls	r7, r6, #6
   2febe:	b193      	cbz	r3, 2fee6 <download_thread+0x162>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   2fec0:	2164      	movs	r1, #100	; 0x64
   2fec2:	4351      	muls	r1, r2
   2fec4:	fbb1 f1f3 	udiv	r1, r1, r3
   2fec8:	f047 0003 	orr.w	r0, r7, #3
   2fecc:	9100      	str	r1, [sp, #0]
   2fece:	492f      	ldr	r1, [pc, #188]	; (2ff8c <download_thread+0x208>)
   2fed0:	f011 fca6 	bl	41820 <log_string_sync>
		rc = fragment_evt_send(dl);
   2fed4:	4628      	mov	r0, r5
   2fed6:	f7ff fcc1 	bl	2f85c <fragment_evt_send>
		if (rc) {
   2feda:	4604      	mov	r4, r0
   2fedc:	b148      	cbz	r0, 2fef2 <download_thread+0x16e>
			LOG_INF("Fragment refused, download stopped.");
   2fede:	4928      	ldr	r1, [pc, #160]	; (2ff80 <download_thread+0x1fc>)
   2fee0:	f047 0003 	orr.w	r0, r7, #3
   2fee4:	e7a4      	b.n	2fe30 <download_thread+0xac>
			LOG_INF("Downloaded %u bytes", dl->progress);
   2fee6:	492a      	ldr	r1, [pc, #168]	; (2ff90 <download_thread+0x20c>)
   2fee8:	f047 0003 	orr.w	r0, r7, #3
   2feec:	f011 fc98 	bl	41820 <log_string_sync>
   2fef0:	e7f0      	b.n	2fed4 <download_thread+0x150>
		if (dl->progress == dl->file_size) {
   2fef2:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   2fef6:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   2fefa:	429a      	cmp	r2, r3
   2fefc:	d110      	bne.n	2ff20 <download_thread+0x19c>
			LOG_INF("Download complete");
   2fefe:	f047 0003 	orr.w	r0, r7, #3
   2ff02:	4924      	ldr	r1, [pc, #144]	; (2ff94 <download_thread+0x210>)
   2ff04:	f011 fc8c 	bl	41820 <log_string_sync>
			const struct download_client_evt evt = {
   2ff08:	2302      	movs	r3, #2
   2ff0a:	e9cd 4403 	strd	r4, r4, [sp, #12]
   2ff0e:	f88d 300c 	strb.w	r3, [sp, #12]
			dl->callback(&evt);
   2ff12:	f641 1308 	movw	r3, #6408	; 0x1908
			const struct download_client_evt evt = {
   2ff16:	9405      	str	r4, [sp, #20]
			dl->callback(&evt);
   2ff18:	58eb      	ldr	r3, [r5, r3]
   2ff1a:	a803      	add	r0, sp, #12
   2ff1c:	4798      	blx	r3
			break;
   2ff1e:	e740      	b.n	2fda2 <download_thread+0x1e>
		if (dl->http.connection_close) {
   2ff20:	f895 3829 	ldrb.w	r3, [r5, #2089]	; 0x829
   2ff24:	b123      	cbz	r3, 2ff30 <download_thread+0x1ac>
			dl->http.connection_close = false;
   2ff26:	f885 0829 	strb.w	r0, [r5, #2089]	; 0x829
			reconnect(dl);
   2ff2a:	4628      	mov	r0, r5
   2ff2c:	f7ff ff0a 	bl	2fd44 <reconnect>
		dl->offset = 0;
   2ff30:	f04f 0b00 	mov.w	fp, #0
   2ff34:	f505 57c8 	add.w	r7, r5, #6400	; 0x1900
   2ff38:	3708      	adds	r7, #8
			rc = request_send(dl);
   2ff3a:	4628      	mov	r0, r5
		dl->offset = 0;
   2ff3c:	f8c5 b804 	str.w	fp, [r5, #2052]	; 0x804
			dl->http.has_header = false;
   2ff40:	f885 b828 	strb.w	fp, [r5, #2088]	; 0x828
			rc = request_send(dl);
   2ff44:	f014 fbcb 	bl	446de <request_send>
			if (rc) {
   2ff48:	4604      	mov	r4, r0
   2ff4a:	2800      	cmp	r0, #0
   2ff4c:	f43f af2d 	beq.w	2fdaa <download_thread+0x26>
				rc = error_evt_send(dl, ECONNRESET);
   2ff50:	2168      	movs	r1, #104	; 0x68
   2ff52:	4638      	mov	r0, r7
   2ff54:	f014 fbce 	bl	446f4 <error_evt_send.isra.0>
				if (rc) {
   2ff58:	4604      	mov	r4, r0
   2ff5a:	2800      	cmp	r0, #0
   2ff5c:	f47f af21 	bne.w	2fda2 <download_thread+0x1e>
				rc = reconnect(dl);
   2ff60:	4628      	mov	r0, r5
   2ff62:	f7ff feef 	bl	2fd44 <reconnect>
				if (rc) {
   2ff66:	4604      	mov	r4, r0
   2ff68:	2800      	cmp	r0, #0
   2ff6a:	d0e6      	beq.n	2ff3a <download_thread+0x1b6>
   2ff6c:	e784      	b.n	2fe78 <download_thread+0xf4>
   2ff6e:	bf00      	nop
   2ff70:	0004643c 	.word	0x0004643c
   2ff74:	000463bc 	.word	0x000463bc
   2ff78:	0004d167 	.word	0x0004d167
   2ff7c:	0004d179 	.word	0x0004d179
   2ff80:	0004d1a6 	.word	0x0004d1a6
   2ff84:	0004d1ca 	.word	0x0004d1ca
   2ff88:	0004d1e4 	.word	0x0004d1e4
   2ff8c:	0004d1fc 	.word	0x0004d1fc
   2ff90:	0004d21a 	.word	0x0004d21a
   2ff94:	0004d22e 	.word	0x0004d22e
   2ff98:	0004ceff 	.word	0x0004ceff
   2ff9c:	0004d14a 	.word	0x0004d14a
   2ffa0:	00048156 	.word	0x00048156

0002ffa4 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   2ffa4:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL) {
   2ffa6:	4604      	mov	r4, r0
   2ffa8:	b348      	cbz	r0, 2fffe <download_client_start+0x5a>
		return -EINVAL;
	}

	if (client->fd < 0) {
   2ffaa:	6803      	ldr	r3, [r0, #0]
   2ffac:	2b00      	cmp	r3, #0
   2ffae:	db29      	blt.n	30004 <CONFIG_FLASH_LOAD_SIZE+0x4>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   2ffb0:	2300      	movs	r3, #0
	client->file = file;
   2ffb2:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
	client->file_size = 0;
   2ffb6:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
	client->progress = from;
   2ffba:	f8c0 280c 	str.w	r2, [r0, #2060]	; 0x80c

	client->offset = 0;
   2ffbe:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
	client->http.has_header = false;
   2ffc2:	f880 3828 	strb.w	r3, [r0, #2088]	; 0x828
		if (err) {
			return err;
		}
	}

	err = request_send(client);
   2ffc6:	f014 fb8a 	bl	446de <request_send>
	if (err) {
   2ffca:	4606      	mov	r6, r0
   2ffcc:	b9a8      	cbnz	r0, 2fffa <download_client_start+0x56>
   2ffce:	4b0f      	ldr	r3, [pc, #60]	; (3000c <CONFIG_FLASH_LOAD_SIZE+0xc>)
   2ffd0:	4d0f      	ldr	r5, [pc, #60]	; (30010 <CONFIG_FLASH_LOAD_SIZE+0x10>)
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   2ffd2:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   2ffd6:	1aed      	subs	r5, r5, r3
   2ffd8:	f011 fc35 	bl	41846 <log_strdup>
   2ffdc:	08ed      	lsrs	r5, r5, #3
   2ffde:	01ad      	lsls	r5, r5, #6
   2ffe0:	f045 0503 	orr.w	r5, r5, #3
   2ffe4:	4602      	mov	r2, r0
   2ffe6:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
   2ffea:	4628      	mov	r0, r5
   2ffec:	4909      	ldr	r1, [pc, #36]	; (30014 <CONFIG_FLASH_LOAD_SIZE+0x14>)
   2ffee:	f011 fc17 	bl	41820 <log_string_sync>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   2fff2:	f8d4 0838 	ldr.w	r0, [r4, #2104]	; 0x838
	z_impl_k_thread_resume(thread);
   2fff6:	f00c ff77 	bl	3cee8 <z_impl_k_thread_resume>

	return 0;
}
   2fffa:	4630      	mov	r0, r6
   2fffc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2fffe:	f06f 0615 	mvn.w	r6, #21
   30002:	e7fa      	b.n	2fffa <download_client_start+0x56>
		return -ENOTCONN;
   30004:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   30008:	e7f7      	b.n	2fffa <download_client_start+0x56>
   3000a:	bf00      	nop
   3000c:	000463bc 	.word	0x000463bc
   30010:	0004643c 	.word	0x0004643c
   30014:	0004d240 	.word	0x0004d240

00030018 <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   30018:	b570      	push	{r4, r5, r6, lr}
   3001a:	460d      	mov	r5, r1
   3001c:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   3001e:	4915      	ldr	r1, [pc, #84]	; (30074 <url_parse_proto+0x5c>)
   30020:	2205      	movs	r2, #5
{
   30022:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   30024:	f015 f85f 	bl	450e6 <strncmp>
   30028:	b928      	cbnz	r0, 30036 <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   3002a:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   3002e:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   30030:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   30032:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   30034:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   30036:	2204      	movs	r2, #4
   30038:	4630      	mov	r0, r6
   3003a:	490f      	ldr	r1, [pc, #60]	; (30078 <url_parse_proto+0x60>)
   3003c:	f015 f853 	bl	450e6 <strncmp>
   30040:	b908      	cbnz	r0, 30046 <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   30042:	2306      	movs	r3, #6
   30044:	e7f3      	b.n	3002e <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   30046:	2205      	movs	r2, #5
   30048:	4630      	mov	r0, r6
   3004a:	490c      	ldr	r1, [pc, #48]	; (3007c <url_parse_proto+0x64>)
   3004c:	f015 f84b 	bl	450e6 <strncmp>
   30050:	b920      	cbnz	r0, 3005c <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   30052:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   30056:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   30058:	2302      	movs	r3, #2
   3005a:	e7ea      	b.n	30032 <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   3005c:	2204      	movs	r2, #4
   3005e:	4630      	mov	r0, r6
   30060:	4907      	ldr	r1, [pc, #28]	; (30080 <url_parse_proto+0x68>)
   30062:	f015 f840 	bl	450e6 <strncmp>
   30066:	b908      	cbnz	r0, 3006c <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   30068:	2311      	movs	r3, #17
   3006a:	e7f4      	b.n	30056 <url_parse_proto+0x3e>
		return -EINVAL;
   3006c:	f06f 0015 	mvn.w	r0, #21
   30070:	e7e0      	b.n	30034 <url_parse_proto+0x1c>
   30072:	bf00      	nop
   30074:	0004d265 	.word	0x0004d265
   30078:	0004d26b 	.word	0x0004d26b
   3007c:	0004d270 	.word	0x0004d270
   30080:	0004d276 	.word	0x0004d276

00030084 <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   30084:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30086:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   30088:	9001      	str	r0, [sp, #4]
{
   3008a:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   3008c:	a801      	add	r0, sp, #4
   3008e:	4911      	ldr	r1, [pc, #68]	; (300d4 <url_parse_host+0x50>)
{
   30090:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   30092:	f014 fb68 	bl	44766 <swallow>

	end = strchr(cur, ':');
   30096:	213a      	movs	r1, #58	; 0x3a
   30098:	9801      	ldr	r0, [sp, #4]
   3009a:	f014 fff3 	bl	45084 <strchr>
	if (!end) {
   3009e:	b948      	cbnz	r0, 300b4 <url_parse_host+0x30>
		end = strchr(cur, '/');
   300a0:	212f      	movs	r1, #47	; 0x2f
   300a2:	9801      	ldr	r0, [sp, #4]
   300a4:	f014 ffee 	bl	45084 <strchr>
		if (!end) {
   300a8:	b920      	cbnz	r0, 300b4 <url_parse_host+0x30>
			end = url + strlen(url) + 1;
   300aa:	4620      	mov	r0, r4
   300ac:	f7ed f8d6 	bl	1d25c <strlen>
   300b0:	1c43      	adds	r3, r0, #1
   300b2:	18e0      	adds	r0, r4, r3
		}
	}

	if (end - cur + 1 > len) {
   300b4:	9901      	ldr	r1, [sp, #4]
   300b6:	1a44      	subs	r4, r0, r1
   300b8:	1c63      	adds	r3, r4, #1
   300ba:	42b3      	cmp	r3, r6
   300bc:	d807      	bhi.n	300ce <url_parse_host+0x4a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   300be:	4622      	mov	r2, r4
   300c0:	4628      	mov	r0, r5
   300c2:	f014 fe10 	bl	44ce6 <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   300c6:	2000      	movs	r0, #0
   300c8:	5528      	strb	r0, [r5, r4]

	return 0;
}
   300ca:	b002      	add	sp, #8
   300cc:	bd70      	pop	{r4, r5, r6, pc}
		return -E2BIG;
   300ce:	f06f 0006 	mvn.w	r0, #6
   300d2:	e7fa      	b.n	300ca <url_parse_host+0x46>
   300d4:	0004d27b 	.word	0x0004d27b

000300d8 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   300d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   300da:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   300dc:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   300de:	4917      	ldr	r1, [pc, #92]	; (3013c <url_parse_port+0x64>)
   300e0:	a801      	add	r0, sp, #4
   300e2:	f014 fb40 	bl	44766 <swallow>

	err = swallow(&cur, ":");
   300e6:	4916      	ldr	r1, [pc, #88]	; (30140 <url_parse_port+0x68>)
   300e8:	a801      	add	r0, sp, #4
   300ea:	f014 fb3c 	bl	44766 <swallow>
	if (err) {
   300ee:	4605      	mov	r5, r0
   300f0:	bb08      	cbnz	r0, 30136 <url_parse_port+0x5e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   300f2:	212f      	movs	r1, #47	; 0x2f
   300f4:	9801      	ldr	r0, [sp, #4]
   300f6:	f014 ffc5 	bl	45084 <strchr>
	if (!end) {
   300fa:	4604      	mov	r4, r0
		len = strlen(cur);
   300fc:	9801      	ldr	r0, [sp, #4]
	if (!end) {
   300fe:	b9c4      	cbnz	r4, 30132 <url_parse_port+0x5a>
		len = strlen(cur);
   30100:	f7ed f8ac 	bl	1d25c <strlen>
   30104:	4604      	mov	r4, r0
	} else {
		len = end - cur;
	}

	len = MAX(len, sizeof(aport) - 1);
   30106:	2c07      	cmp	r4, #7
   30108:	bf38      	it	cc
   3010a:	2407      	movcc	r4, #7

	memcpy(aport, cur, len);
   3010c:	2308      	movs	r3, #8
   3010e:	4622      	mov	r2, r4
   30110:	9901      	ldr	r1, [sp, #4]
   30112:	eb0d 0003 	add.w	r0, sp, r3
   30116:	f014 fdf3 	bl	44d00 <__memcpy_chk>
	aport[len] = '\0';
   3011a:	ab04      	add	r3, sp, #16
   3011c:	441c      	add	r4, r3
   3011e:	2300      	movs	r3, #0

	*port = atoi(aport);
   30120:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   30122:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   30126:	f014 fdbe 	bl	44ca6 <atoi>
   3012a:	8030      	strh	r0, [r6, #0]

	return 0;
}
   3012c:	4628      	mov	r0, r5
   3012e:	b004      	add	sp, #16
   30130:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   30132:	1a24      	subs	r4, r4, r0
   30134:	e7e7      	b.n	30106 <url_parse_port+0x2e>
		return -EINVAL;
   30136:	f06f 0515 	mvn.w	r5, #21
   3013a:	e7f7      	b.n	3012c <url_parse_port+0x54>
   3013c:	0004d27b 	.word	0x0004d27b
   30140:	0004a553 	.word	0x0004a553

00030144 <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   30144:	b537      	push	{r0, r1, r2, r4, r5, lr}
   30146:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   30148:	4915      	ldr	r1, [pc, #84]	; (301a0 <url_parse_file+0x5c>)
{
   3014a:	4614      	mov	r4, r2
	cur = url;
   3014c:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   3014e:	f014 fffc 	bl	4514a <strstr>
   30152:	b940      	cbnz	r0, 30166 <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   30154:	9801      	ldr	r0, [sp, #4]
   30156:	f7ed f881 	bl	1d25c <strlen>
   3015a:	3001      	adds	r0, #1
   3015c:	42a0      	cmp	r0, r4
   3015e:	d912      	bls.n	30186 <url_parse_file+0x42>
		return -E2BIG;
   30160:	f06f 0006 	mvn.w	r0, #6
   30164:	e006      	b.n	30174 <url_parse_file+0x30>
		err = swallow(&cur, "://");
   30166:	490f      	ldr	r1, [pc, #60]	; (301a4 <url_parse_file+0x60>)
   30168:	a801      	add	r0, sp, #4
   3016a:	f014 fafc 	bl	44766 <swallow>
		if (err) {
   3016e:	b118      	cbz	r0, 30178 <url_parse_file+0x34>
			return -EINVAL;
   30170:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   30174:	b003      	add	sp, #12
   30176:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   30178:	490b      	ldr	r1, [pc, #44]	; (301a8 <url_parse_file+0x64>)
   3017a:	a801      	add	r0, sp, #4
   3017c:	f014 faf3 	bl	44766 <swallow>
		if (err) {
   30180:	2800      	cmp	r0, #0
   30182:	d0e7      	beq.n	30154 <url_parse_file+0x10>
   30184:	e7f4      	b.n	30170 <url_parse_file+0x2c>
	len = strlen(cur);
   30186:	9801      	ldr	r0, [sp, #4]
   30188:	f7ed f868 	bl	1d25c <strlen>
   3018c:	9901      	ldr	r1, [sp, #4]
   3018e:	4604      	mov	r4, r0
   30190:	4602      	mov	r2, r0
   30192:	4628      	mov	r0, r5
   30194:	f014 fda7 	bl	44ce6 <memcpy>
	file[len] = '\0';
   30198:	2300      	movs	r3, #0
	return 0;
   3019a:	4618      	mov	r0, r3
	file[len] = '\0';
   3019c:	552b      	strb	r3, [r5, r4]
	return 0;
   3019e:	e7e9      	b.n	30174 <url_parse_file+0x30>
   301a0:	0004d27c 	.word	0x0004d27c
   301a4:	0004d27b 	.word	0x0004d27b
   301a8:	0004d27d 	.word	0x0004d27d

000301ac <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len);

int http_get_request_send(struct download_client *client)
{
   301ac:	b570      	push	{r4, r5, r6, lr}
	int len;
	size_t off;
	char host[HOSTNAME_SIZE];
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
   301ae:	f8d0 3810 	ldr.w	r3, [r0, #2064]	; 0x810
{
   301b2:	4605      	mov	r5, r0
   301b4:	b0c4      	sub	sp, #272	; 0x110
	__ASSERT_NO_MSG(client->host);
   301b6:	b94b      	cbnz	r3, 301cc <http_get_request_send+0x20>
   301b8:	492c      	ldr	r1, [pc, #176]	; (3026c <http_get_request_send+0xc0>)
   301ba:	482d      	ldr	r0, [pc, #180]	; (30270 <http_get_request_send+0xc4>)
   301bc:	232e      	movs	r3, #46	; 0x2e
   301be:	4a2d      	ldr	r2, [pc, #180]	; (30274 <http_get_request_send+0xc8>)
   301c0:	f011 f900 	bl	413c4 <printk>
   301c4:	212e      	movs	r1, #46	; 0x2e
   301c6:	482b      	ldr	r0, [pc, #172]	; (30274 <http_get_request_send+0xc8>)
   301c8:	f011 fb19 	bl	417fe <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   301cc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
   301d0:	b94b      	cbnz	r3, 301e6 <http_get_request_send+0x3a>
   301d2:	4929      	ldr	r1, [pc, #164]	; (30278 <http_get_request_send+0xcc>)
   301d4:	4826      	ldr	r0, [pc, #152]	; (30270 <http_get_request_send+0xc4>)
   301d6:	232f      	movs	r3, #47	; 0x2f
   301d8:	4a26      	ldr	r2, [pc, #152]	; (30274 <http_get_request_send+0xc8>)
   301da:	f011 f8f3 	bl	413c4 <printk>
   301de:	212f      	movs	r1, #47	; 0x2f
   301e0:	4824      	ldr	r0, [pc, #144]	; (30274 <http_get_request_send+0xc8>)
   301e2:	f011 fb0c 	bl	417fe <assert_post_action>

	err = url_parse_host(client->host, host, sizeof(host));
   301e6:	ae04      	add	r6, sp, #16
   301e8:	2240      	movs	r2, #64	; 0x40
   301ea:	4631      	mov	r1, r6
   301ec:	f8d5 0810 	ldr.w	r0, [r5, #2064]	; 0x810
   301f0:	f7ff ff48 	bl	30084 <url_parse_host>
	if (err) {
   301f4:	4604      	mov	r4, r0
   301f6:	bb90      	cbnz	r0, 3025e <http_get_request_send+0xb2>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   301f8:	22c0      	movs	r2, #192	; 0xc0
   301fa:	f8d5 0814 	ldr.w	r0, [r5, #2068]	; 0x814
   301fe:	a914      	add	r1, sp, #80	; 0x50
   30200:	f7ff ffa0 	bl	30144 <url_parse_file>
	if (err) {
   30204:	4604      	mov	r4, r0
   30206:	bb50      	cbnz	r0, 3025e <http_get_request_send+0xb2>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   30208:	f8d5 3820 	ldr.w	r3, [r5, #2080]	; 0x820
   3020c:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   30210:	b343      	cbz	r3, 30264 <http_get_request_send+0xb8>
		off = client->progress + client->config.frag_size_override - 1;
   30212:	4413      	add	r3, r2
   30214:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   30216:	f8d5 1808 	ldr.w	r1, [r5, #2056]	; 0x808
   3021a:	b111      	cbz	r1, 30222 <http_get_request_send+0x76>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size);
   3021c:	428b      	cmp	r3, r1
   3021e:	bf28      	it	cs
   30220:	460b      	movcs	r3, r1
	 * When using HTTP, we request the whole resource to minimize
	 * network usage (only one request/response are sent).
	 */
	if (client->proto == IPPROTO_TLS_1_2
	   || IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS)) {
		len = snprintf(client->buf,
   30222:	e9cd 2301 	strd	r2, r3, [sp, #4]
   30226:	f44f 6100 	mov.w	r1, #2048	; 0x800
   3022a:	4a14      	ldr	r2, [pc, #80]	; (3027c <http_get_request_send+0xd0>)
   3022c:	ab14      	add	r3, sp, #80	; 0x50
   3022e:	9600      	str	r6, [sp, #0]
   30230:	1d28      	adds	r0, r5, #4
   30232:	f00f fcab 	bl	3fb8c <sniprintf>
   30236:	4601      	mov	r1, r0

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len);
   30238:	4628      	mov	r0, r5
   3023a:	f014 fa6a 	bl	44712 <socket_send>
	if (err) {
   3023e:	4604      	mov	r4, r0
   30240:	b168      	cbz	r0, 3025e <http_get_request_send+0xb2>
   30242:	4b0f      	ldr	r3, [pc, #60]	; (30280 <http_get_request_send+0xd4>)
   30244:	4d0f      	ldr	r5, [pc, #60]	; (30284 <http_get_request_send+0xd8>)
   30246:	1aed      	subs	r5, r5, r3
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   30248:	f012 fa13 	bl	42672 <__errno>
   3024c:	08ed      	lsrs	r5, r5, #3
   3024e:	01ad      	lsls	r5, r5, #6
   30250:	f045 0501 	orr.w	r5, r5, #1
   30254:	6802      	ldr	r2, [r0, #0]
   30256:	490c      	ldr	r1, [pc, #48]	; (30288 <http_get_request_send+0xdc>)
   30258:	4628      	mov	r0, r5
   3025a:	f011 fae1 	bl	41820 <log_string_sync>
		return err;
	}

	return 0;
}
   3025e:	4620      	mov	r0, r4
   30260:	b044      	add	sp, #272	; 0x110
   30262:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   30264:	f202 73ff 	addw	r3, r2, #2047	; 0x7ff
   30268:	e7d5      	b.n	30216 <http_get_request_send+0x6a>
   3026a:	bf00      	nop
   3026c:	0004d2b9 	.word	0x0004d2b9
   30270:	00048156 	.word	0x00048156
   30274:	0004d27f 	.word	0x0004d27f
   30278:	0004d2c6 	.word	0x0004d2c6
   3027c:	0004d2d3 	.word	0x0004d2d3
   30280:	000463bc 	.word	0x000463bc
   30284:	0004643c 	.word	0x0004643c
   30288:	0004d31e 	.word	0x0004d31e

0003028c <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   3028c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   30290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	client->offset += len;
   30294:	440b      	add	r3, r1
   30296:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

	if (!client->http.has_header) {
   3029a:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
{
   3029e:	4604      	mov	r4, r0
   302a0:	460f      	mov	r7, r1
	if (!client->http.has_header) {
   302a2:	2b00      	cmp	r3, #0
   302a4:	d179      	bne.n	3039a <http_parse+0x10e>
	p = strstr(client->buf, "\r\n\r\n");
   302a6:	1d06      	adds	r6, r0, #4
   302a8:	4630      	mov	r0, r6
   302aa:	494b      	ldr	r1, [pc, #300]	; (303d8 <http_parse+0x14c>)
   302ac:	f014 ff4d 	bl	4514a <strstr>
	if (!p) {
   302b0:	4605      	mov	r5, r0
   302b2:	2800      	cmp	r0, #0
   302b4:	f000 808c 	beq.w	303d0 <http_parse+0x144>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   302b8:	4847      	ldr	r0, [pc, #284]	; (303d8 <http_parse+0x14c>)
   302ba:	f7ec ffcf 	bl	1d25c <strlen>
   302be:	4405      	add	r5, r0
   302c0:	4633      	mov	r3, r6
   302c2:	4628      	mov	r0, r5
		client->buf[i] = tolower(client->buf[i]);
   302c4:	f8df c13c 	ldr.w	ip, [pc, #316]	; 30404 <http_parse+0x178>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   302c8:	eba5 0806 	sub.w	r8, r5, r6
	for (size_t i = 0; i < *hdr_len; i++) {
   302cc:	4298      	cmp	r0, r3
   302ce:	d112      	bne.n	302f6 <http_parse+0x6a>
	p = strstr(client->buf, "http/1.1 206");
   302d0:	4630      	mov	r0, r6
   302d2:	4942      	ldr	r1, [pc, #264]	; (303dc <http_parse+0x150>)
   302d4:	f014 ff39 	bl	4514a <strstr>
	if (!p) {
   302d8:	b9c0      	cbnz	r0, 3030c <http_parse+0x80>
   302da:	4841      	ldr	r0, [pc, #260]	; (303e0 <http_parse+0x154>)
   302dc:	4b41      	ldr	r3, [pc, #260]	; (303e4 <http_parse+0x158>)
			LOG_ERR("Server did not honor partial content request");
   302de:	4942      	ldr	r1, [pc, #264]	; (303e8 <http_parse+0x15c>)
   302e0:	1ac0      	subs	r0, r0, r3
   302e2:	08c0      	lsrs	r0, r0, #3
   302e4:	0180      	lsls	r0, r0, #6
				LOG_ERR("Server did not send "
   302e6:	f040 0001 	orr.w	r0, r0, #1
   302ea:	f011 fa99 	bl	41820 <log_string_sync>
			/* Wait for header */
			return 1;
		}
		if (rc < 0) {
			/* Something is wrong with the header */
			return -1;
   302ee:	f04f 30ff 	mov.w	r0, #4294967295
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
}
   302f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		client->buf[i] = tolower(client->buf[i]);
   302f6:	781a      	ldrb	r2, [r3, #0]
   302f8:	f812 100c 	ldrb.w	r1, [r2, ip]
   302fc:	f001 0103 	and.w	r1, r1, #3
   30300:	2901      	cmp	r1, #1
   30302:	bf08      	it	eq
   30304:	3220      	addeq	r2, #32
   30306:	f803 2b01 	strb.w	r2, [r3], #1
	for (size_t i = 0; i < *hdr_len; i++) {
   3030a:	e7df      	b.n	302cc <http_parse+0x40>
	if (client->file_size == 0) {
   3030c:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   30310:	b9f3      	cbnz	r3, 30350 <http_parse+0xc4>
			p = strstr(client->buf, "content-range");
   30312:	4630      	mov	r0, r6
   30314:	4935      	ldr	r1, [pc, #212]	; (303ec <http_parse+0x160>)
   30316:	f014 ff18 	bl	4514a <strstr>
			if (!p) {
   3031a:	b930      	cbnz	r0, 3032a <http_parse+0x9e>
   3031c:	4830      	ldr	r0, [pc, #192]	; (303e0 <http_parse+0x154>)
   3031e:	4b31      	ldr	r3, [pc, #196]	; (303e4 <http_parse+0x158>)
				LOG_ERR("Server did not send "
   30320:	4933      	ldr	r1, [pc, #204]	; (303f0 <http_parse+0x164>)
   30322:	1ac0      	subs	r0, r0, r3
   30324:	08c0      	lsrs	r0, r0, #3
   30326:	0180      	lsls	r0, r0, #6
   30328:	e7dd      	b.n	302e6 <http_parse+0x5a>
			p = strstr(p, "/");
   3032a:	4932      	ldr	r1, [pc, #200]	; (303f4 <http_parse+0x168>)
   3032c:	f014 ff0d 	bl	4514a <strstr>
			if (!p) {
   30330:	b930      	cbnz	r0, 30340 <http_parse+0xb4>
   30332:	482b      	ldr	r0, [pc, #172]	; (303e0 <http_parse+0x154>)
   30334:	4b2b      	ldr	r3, [pc, #172]	; (303e4 <http_parse+0x158>)
				LOG_ERR("No file size in response");
   30336:	4930      	ldr	r1, [pc, #192]	; (303f8 <http_parse+0x16c>)
   30338:	1ac0      	subs	r0, r0, r3
   3033a:	08c0      	lsrs	r0, r0, #3
   3033c:	0180      	lsls	r0, r0, #6
   3033e:	e7d2      	b.n	302e6 <http_parse+0x5a>
		client->file_size += atoi(p + 1);
   30340:	3001      	adds	r0, #1
   30342:	f014 fcb0 	bl	44ca6 <atoi>
   30346:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   3034a:	4418      	add	r0, r3
   3034c:	f8c4 0808 	str.w	r0, [r4, #2056]	; 0x808
	p = strstr(client->buf, "connection: close");
   30350:	4630      	mov	r0, r6
   30352:	492a      	ldr	r1, [pc, #168]	; (303fc <http_parse+0x170>)
   30354:	f014 fef9 	bl	4514a <strstr>
	if (p) {
   30358:	b160      	cbz	r0, 30374 <http_parse+0xe8>
   3035a:	4b22      	ldr	r3, [pc, #136]	; (303e4 <http_parse+0x158>)
   3035c:	4820      	ldr	r0, [pc, #128]	; (303e0 <http_parse+0x154>)
		LOG_WRN("Peer closed connection, will re-connect");
   3035e:	4928      	ldr	r1, [pc, #160]	; (30400 <http_parse+0x174>)
   30360:	1ac0      	subs	r0, r0, r3
   30362:	08c0      	lsrs	r0, r0, #3
   30364:	0180      	lsls	r0, r0, #6
   30366:	f040 0002 	orr.w	r0, r0, #2
   3036a:	f011 fa59 	bl	41820 <log_string_sync>
		client->http.connection_close = true;
   3036e:	2301      	movs	r3, #1
   30370:	f884 3829 	strb.w	r3, [r4, #2089]	; 0x829
	client->http.has_header = true;
   30374:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   30376:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
	client->http.has_header = true;
   3037a:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
		if (client->offset != hdr_len) {
   3037e:	4542      	cmp	r2, r8
   30380:	d024      	beq.n	303cc <http_parse+0x140>
   30382:	4629      	mov	r1, r5
   30384:	4630      	mov	r0, r6
   30386:	eba2 0208 	sub.w	r2, r2, r8
   3038a:	f014 fcac 	bl	44ce6 <memcpy>
			client->offset -= hdr_len;
   3038e:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   30392:	eba3 0308 	sub.w	r3, r3, r8
			client->offset = 0;
   30396:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
	client->progress += MIN(client->offset, len);
   3039a:	f8d4 180c 	ldr.w	r1, [r4, #2060]	; 0x80c
   3039e:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
	if (client->progress != client->file_size &&
   303a2:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
	client->progress += MIN(client->offset, len);
   303a6:	429f      	cmp	r7, r3
   303a8:	bf94      	ite	ls
   303aa:	19cf      	addls	r7, r1, r7
   303ac:	18cf      	addhi	r7, r1, r3
	if (client->progress != client->file_size &&
   303ae:	4297      	cmp	r7, r2
	client->progress += MIN(client->offset, len);
   303b0:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
	if (client->progress != client->file_size &&
   303b4:	d00e      	beq.n	303d4 <http_parse+0x148>
	    client->offset < (client->config.frag_size_override != 0 ?
   303b6:	f8d4 0820 	ldr.w	r0, [r4, #2080]	; 0x820
			      client->config.frag_size_override :
   303ba:	2800      	cmp	r0, #0
   303bc:	bf08      	it	eq
   303be:	f44f 6000 	moveq.w	r0, #2048	; 0x800
	if (client->progress != client->file_size &&
   303c2:	4298      	cmp	r0, r3
   303c4:	bf94      	ite	ls
   303c6:	2000      	movls	r0, #0
   303c8:	2001      	movhi	r0, #1
   303ca:	e792      	b.n	302f2 <http_parse+0x66>
			client->offset = 0;
   303cc:	2300      	movs	r3, #0
   303ce:	e7e2      	b.n	30396 <http_parse+0x10a>
			return 1;
   303d0:	2001      	movs	r0, #1
   303d2:	e78e      	b.n	302f2 <http_parse+0x66>
	return 0;
   303d4:	2000      	movs	r0, #0
   303d6:	e78c      	b.n	302f2 <http_parse+0x66>
   303d8:	0004d319 	.word	0x0004d319
   303dc:	0004d344 	.word	0x0004d344
   303e0:	0004643c 	.word	0x0004643c
   303e4:	000463bc 	.word	0x000463bc
   303e8:	0004d351 	.word	0x0004d351
   303ec:	0004d37e 	.word	0x0004d37e
   303f0:	0004d38c 	.word	0x0004d38c
   303f4:	0004d27d 	.word	0x0004d27d
   303f8:	0004d3bc 	.word	0x0004d3bc
   303fc:	0004d3d5 	.word	0x0004d3d5
   30400:	0004d3e7 	.word	0x0004d3e7
   30404:	0004f35b 	.word	0x0004f35b

00030408 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   30408:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   3040a:	a801      	add	r0, sp, #4
   3040c:	f001 f87c 	bl	31508 <dfu_target_offset_get>
	if (err != 0) {
   30410:	4c16      	ldr	r4, [pc, #88]	; (3046c <download_with_offset+0x64>)
   30412:	4b17      	ldr	r3, [pc, #92]	; (30470 <download_with_offset+0x68>)
   30414:	1ae4      	subs	r4, r4, r3
   30416:	08e4      	lsrs	r4, r4, #3
   30418:	4603      	mov	r3, r0
   3041a:	01a4      	lsls	r4, r4, #6
   3041c:	b138      	cbz	r0, 3042e <download_with_offset+0x26>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   3041e:	4a15      	ldr	r2, [pc, #84]	; (30474 <download_with_offset+0x6c>)
   30420:	4915      	ldr	r1, [pc, #84]	; (30478 <download_with_offset+0x70>)
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   30422:	f044 0001 	orr.w	r0, r4, #1
   30426:	f011 f9fb 	bl	41820 <log_string_sync>
			err);
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	return;
}
   3042a:	b003      	add	sp, #12
   3042c:	bd30      	pop	{r4, r5, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   3042e:	4d13      	ldr	r5, [pc, #76]	; (3047c <download_with_offset+0x74>)
   30430:	4628      	mov	r0, r5
   30432:	f8d5 1810 	ldr.w	r1, [r5, #2064]	; 0x810
   30436:	f605 0218 	addw	r2, r5, #2072	; 0x818
   3043a:	f7ff fa67 	bl	2f90c <download_client_connect>
	if (err != 0) {
   3043e:	4603      	mov	r3, r0
   30440:	b110      	cbz	r0, 30448 <download_with_offset+0x40>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   30442:	4a0c      	ldr	r2, [pc, #48]	; (30474 <download_with_offset+0x6c>)
   30444:	490e      	ldr	r1, [pc, #56]	; (30480 <download_with_offset+0x78>)
   30446:	e7ec      	b.n	30422 <download_with_offset+0x1a>
	err = download_client_start(&dlc, dlc.file, offset);
   30448:	4628      	mov	r0, r5
   3044a:	9a01      	ldr	r2, [sp, #4]
   3044c:	f8d5 1814 	ldr.w	r1, [r5, #2068]	; 0x814
   30450:	f7ff fda8 	bl	2ffa4 <download_client_start>
	if (err != 0) {
   30454:	4603      	mov	r3, r0
   30456:	b110      	cbz	r0, 3045e <download_with_offset+0x56>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   30458:	4a06      	ldr	r2, [pc, #24]	; (30474 <download_with_offset+0x6c>)
   3045a:	490a      	ldr	r1, [pc, #40]	; (30484 <download_with_offset+0x7c>)
   3045c:	e7e1      	b.n	30422 <download_with_offset+0x1a>
	LOG_INF("Downloading from offset: 0x%x", offset);
   3045e:	9a01      	ldr	r2, [sp, #4]
   30460:	4909      	ldr	r1, [pc, #36]	; (30488 <download_with_offset+0x80>)
   30462:	f044 0003 	orr.w	r0, r4, #3
   30466:	f011 f9db 	bl	41820 <log_string_sync>
   3046a:	e7de      	b.n	3042a <download_with_offset+0x22>
   3046c:	0004644c 	.word	0x0004644c
   30470:	000463bc 	.word	0x000463bc
   30474:	0004d5d4 	.word	0x0004d5d4
   30478:	0004d40f 	.word	0x0004d40f
   3047c:	20021d48 	.word	0x20021d48
   30480:	0004d435 	.word	0x0004d435
   30484:	0004d458 	.word	0x0004d458
   30488:	0004d483 	.word	0x0004d483

0003048c <send_error_evt>:
	const struct fota_download_evt evt = {
   3048c:	2300      	movs	r3, #0
{
   3048e:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   30490:	e9cd 3300 	strd	r3, r3, [sp]
   30494:	2304      	movs	r3, #4
   30496:	f88d 3000 	strb.w	r3, [sp]
	callback(&evt);
   3049a:	4b04      	ldr	r3, [pc, #16]	; (304ac <send_error_evt+0x20>)
	const struct fota_download_evt evt = {
   3049c:	f88d 0004 	strb.w	r0, [sp, #4]
	callback(&evt);
   304a0:	681b      	ldr	r3, [r3, #0]
   304a2:	4668      	mov	r0, sp
   304a4:	4798      	blx	r3
}
   304a6:	b003      	add	sp, #12
   304a8:	f85d fb04 	ldr.w	pc, [sp], #4
   304ac:	20025500 	.word	0x20025500

000304b0 <download_client_callback>:
{
   304b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (event == NULL) {
   304b2:	4605      	mov	r5, r0
   304b4:	2800      	cmp	r0, #0
   304b6:	f000 80dd 	beq.w	30674 <download_client_callback+0x1c4>
	switch (event->id) {
   304ba:	7803      	ldrb	r3, [r0, #0]
   304bc:	2b01      	cmp	r3, #1
   304be:	f000 80a3 	beq.w	30608 <download_client_callback+0x158>
   304c2:	2b02      	cmp	r3, #2
   304c4:	d07c      	beq.n	305c0 <download_client_callback+0x110>
   304c6:	2b00      	cmp	r3, #0
   304c8:	f040 80b4 	bne.w	30634 <download_client_callback+0x184>
		if (first_fragment) {
   304cc:	4e6b      	ldr	r6, [pc, #428]	; (3067c <download_client_callback+0x1cc>)
   304ce:	7833      	ldrb	r3, [r6, #0]
   304d0:	2b00      	cmp	r3, #0
   304d2:	d051      	beq.n	30578 <download_client_callback+0xc8>
			err = download_client_file_size_get(&dlc, &file_size);
   304d4:	4f6a      	ldr	r7, [pc, #424]	; (30680 <download_client_callback+0x1d0>)
   304d6:	486b      	ldr	r0, [pc, #428]	; (30684 <download_client_callback+0x1d4>)
   304d8:	4639      	mov	r1, r7
   304da:	f014 f93a 	bl	44752 <download_client_file_size_get>
			if (err != 0) {
   304de:	4604      	mov	r4, r0
   304e0:	b108      	cbz	r0, 304e6 <download_client_callback+0x36>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   304e2:	2001      	movs	r0, #1
   304e4:	e069      	b.n	305ba <download_client_callback+0x10a>
			first_fragment = false;
   304e6:	7030      	strb	r0, [r6, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   304e8:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   304ec:	f000 ffb4 	bl	31458 <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size,
   304f0:	4a65      	ldr	r2, [pc, #404]	; (30688 <download_client_callback+0x1d8>)
   304f2:	6839      	ldr	r1, [r7, #0]
   304f4:	f000 ffd6 	bl	314a4 <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   304f8:	1e04      	subs	r4, r0, #0
   304fa:	da1d      	bge.n	30538 <download_client_callback+0x88>
   304fc:	f114 0f10 	cmn.w	r4, #16
   30500:	d01a      	beq.n	30538 <download_client_callback+0x88>
   30502:	4b62      	ldr	r3, [pc, #392]	; (3068c <download_client_callback+0x1dc>)
   30504:	4d62      	ldr	r5, [pc, #392]	; (30690 <download_client_callback+0x1e0>)
				LOG_ERR("dfu_target_init error %d", err);
   30506:	4622      	mov	r2, r4
   30508:	1aed      	subs	r5, r5, r3
   3050a:	08ed      	lsrs	r5, r5, #3
   3050c:	01ad      	lsls	r5, r5, #6
   3050e:	f045 0501 	orr.w	r5, r5, #1
   30512:	4628      	mov	r0, r5
   30514:	495f      	ldr	r1, [pc, #380]	; (30694 <download_client_callback+0x1e4>)
   30516:	f011 f983 	bl	41820 <log_string_sync>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   3051a:	2001      	movs	r0, #1
   3051c:	f7ff ffb6 	bl	3048c <send_error_evt>
				int res = dfu_target_reset();
   30520:	f001 f82c 	bl	3157c <dfu_target_reset>
				if (res != 0) {
   30524:	b118      	cbz	r0, 3052e <download_client_callback+0x7e>
					LOG_ERR("Unable to reset DFU target");
   30526:	4628      	mov	r0, r5
   30528:	495b      	ldr	r1, [pc, #364]	; (30698 <download_client_callback+0x1e8>)
   3052a:	f011 f979 	bl	41820 <log_string_sync>
				first_fragment = true;
   3052e:	2301      	movs	r3, #1
   30530:	7033      	strb	r3, [r6, #0]
}
   30532:	4620      	mov	r0, r4
   30534:	b003      	add	sp, #12
   30536:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = dfu_target_offset_get(&offset);
   30538:	4668      	mov	r0, sp
   3053a:	f000 ffe5 	bl	31508 <dfu_target_offset_get>
			if (err != 0) {
   3053e:	b110      	cbz	r0, 30546 <download_client_callback+0x96>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30540:	2001      	movs	r0, #1
   30542:	f7ff ffa3 	bl	3048c <send_error_evt>
			if (offset != 0) {
   30546:	9b00      	ldr	r3, [sp, #0]
   30548:	b1b3      	cbz	r3, 30578 <download_client_callback+0xc8>
				(void)download_client_disconnect(&dlc);
   3054a:	484e      	ldr	r0, [pc, #312]	; (30684 <download_client_callback+0x1d4>)
   3054c:	f7ff fbd0 	bl	2fcf0 <download_client_disconnect>
   30550:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   30554:	2300      	movs	r3, #0
   30556:	4951      	ldr	r1, [pc, #324]	; (3069c <download_client_callback+0x1ec>)
   30558:	4851      	ldr	r0, [pc, #324]	; (306a0 <download_client_callback+0x1f0>)
   3055a:	f00d fd3b 	bl	3dfd4 <k_delayed_work_submit_to_queue>
   3055e:	4b4b      	ldr	r3, [pc, #300]	; (3068c <download_client_callback+0x1dc>)
   30560:	484b      	ldr	r0, [pc, #300]	; (30690 <download_client_callback+0x1e0>)
				LOG_INF("Refuse fragment, restart with offset");
   30562:	4950      	ldr	r1, [pc, #320]	; (306a4 <download_client_callback+0x1f4>)
   30564:	1ac0      	subs	r0, r0, r3
   30566:	08c0      	lsrs	r0, r0, #3
   30568:	0180      	lsls	r0, r0, #6
   3056a:	f040 0003 	orr.w	r0, r0, #3
   3056e:	f011 f957 	bl	41820 <log_string_sync>
				return -1;
   30572:	f04f 34ff 	mov.w	r4, #4294967295
   30576:	e7dc      	b.n	30532 <download_client_callback+0x82>
		err = dfu_target_write(event->fragment.buf,
   30578:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   3057c:	f000 ffce 	bl	3151c <dfu_target_write>
		if (err != 0) {
   30580:	4604      	mov	r4, r0
   30582:	2800      	cmp	r0, #0
   30584:	d0d5      	beq.n	30532 <download_client_callback+0x82>
   30586:	4b41      	ldr	r3, [pc, #260]	; (3068c <download_client_callback+0x1dc>)
   30588:	4d41      	ldr	r5, [pc, #260]	; (30690 <download_client_callback+0x1e0>)
			LOG_ERR("dfu_target_write error %d", err);
   3058a:	4602      	mov	r2, r0
   3058c:	1aed      	subs	r5, r5, r3
   3058e:	08ed      	lsrs	r5, r5, #3
   30590:	01ad      	lsls	r5, r5, #6
   30592:	f045 0501 	orr.w	r5, r5, #1
   30596:	4628      	mov	r0, r5
   30598:	4943      	ldr	r1, [pc, #268]	; (306a8 <download_client_callback+0x1f8>)
   3059a:	f011 f941 	bl	41820 <log_string_sync>
			int res = dfu_target_done(false);
   3059e:	2000      	movs	r0, #0
   305a0:	f000 ffc8 	bl	31534 <dfu_target_done>
			if (res != 0) {
   305a4:	b118      	cbz	r0, 305ae <download_client_callback+0xfe>
				LOG_ERR("Unable to free DFU target resources");
   305a6:	4628      	mov	r0, r5
   305a8:	4940      	ldr	r1, [pc, #256]	; (306ac <download_client_callback+0x1fc>)
   305aa:	f011 f939 	bl	41820 <log_string_sync>
			first_fragment = true;
   305ae:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   305b0:	4834      	ldr	r0, [pc, #208]	; (30684 <download_client_callback+0x1d4>)
			first_fragment = true;
   305b2:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   305b4:	f7ff fb9c 	bl	2fcf0 <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   305b8:	2002      	movs	r0, #2
   305ba:	f7ff ff67 	bl	3048c <send_error_evt>
			return err;
   305be:	e7b8      	b.n	30532 <download_client_callback+0x82>
		err = dfu_target_done(true);
   305c0:	2001      	movs	r0, #1
   305c2:	f000 ffb7 	bl	31534 <dfu_target_done>
		if (err != 0) {
   305c6:	4604      	mov	r4, r0
   305c8:	b158      	cbz	r0, 305e2 <download_client_callback+0x132>
   305ca:	4b30      	ldr	r3, [pc, #192]	; (3068c <download_client_callback+0x1dc>)
   305cc:	4830      	ldr	r0, [pc, #192]	; (30690 <download_client_callback+0x1e0>)
			LOG_ERR("dfu_target_done error: %d", err);
   305ce:	4622      	mov	r2, r4
   305d0:	1ac0      	subs	r0, r0, r3
   305d2:	08c0      	lsrs	r0, r0, #3
   305d4:	0180      	lsls	r0, r0, #6
   305d6:	4936      	ldr	r1, [pc, #216]	; (306b0 <download_client_callback+0x200>)
   305d8:	f040 0001 	orr.w	r0, r0, #1
   305dc:	f011 f920 	bl	41820 <log_string_sync>
   305e0:	e77f      	b.n	304e2 <download_client_callback+0x32>
		err = download_client_disconnect(&dlc);
   305e2:	4828      	ldr	r0, [pc, #160]	; (30684 <download_client_callback+0x1d4>)
   305e4:	f7ff fb84 	bl	2fcf0 <download_client_disconnect>
		if (err != 0) {
   305e8:	4604      	mov	r4, r0
   305ea:	2800      	cmp	r0, #0
   305ec:	f47f af79 	bne.w	304e2 <download_client_callback+0x32>
	const struct fota_download_evt evt = {
   305f0:	2501      	movs	r5, #1
	callback(&evt);
   305f2:	4b30      	ldr	r3, [pc, #192]	; (306b4 <download_client_callback+0x204>)
	const struct fota_download_evt evt = {
   305f4:	e9cd 0000 	strd	r0, r0, [sp]
	callback(&evt);
   305f8:	681b      	ldr	r3, [r3, #0]
   305fa:	4668      	mov	r0, sp
	const struct fota_download_evt evt = {
   305fc:	f88d 5000 	strb.w	r5, [sp]
	callback(&evt);
   30600:	4798      	blx	r3
		first_fragment = true;
   30602:	4b1e      	ldr	r3, [pc, #120]	; (3067c <download_client_callback+0x1cc>)
   30604:	701d      	strb	r5, [r3, #0]
		break;
   30606:	e794      	b.n	30532 <download_client_callback+0x82>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   30608:	4e2b      	ldr	r6, [pc, #172]	; (306b8 <download_client_callback+0x208>)
   3060a:	4c21      	ldr	r4, [pc, #132]	; (30690 <download_client_callback+0x1e0>)
   3060c:	6832      	ldr	r2, [r6, #0]
   3060e:	4f1f      	ldr	r7, [pc, #124]	; (3068c <download_client_callback+0x1dc>)
   30610:	b192      	cbz	r2, 30638 <download_client_callback+0x188>
   30612:	6843      	ldr	r3, [r0, #4]
   30614:	f113 0f80 	cmn.w	r3, #128	; 0x80
   30618:	d001      	beq.n	3061e <download_client_callback+0x16e>
   3061a:	3368      	adds	r3, #104	; 0x68
   3061c:	d10c      	bne.n	30638 <download_client_callback+0x188>
   3061e:	1be0      	subs	r0, r4, r7
   30620:	08c0      	lsrs	r0, r0, #3
			LOG_WRN("Download socket error. %d retries left...",
   30622:	0180      	lsls	r0, r0, #6
   30624:	4925      	ldr	r1, [pc, #148]	; (306bc <download_client_callback+0x20c>)
   30626:	f040 0002 	orr.w	r0, r0, #2
   3062a:	f011 f8f9 	bl	41820 <log_string_sync>
			socket_retries_left--;
   3062e:	6833      	ldr	r3, [r6, #0]
   30630:	3b01      	subs	r3, #1
   30632:	6033      	str	r3, [r6, #0]
	switch (event->id) {
   30634:	2400      	movs	r4, #0
   30636:	e77c      	b.n	30532 <download_client_callback+0x82>
   30638:	1be4      	subs	r4, r4, r7
   3063a:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("Download client error");
   3063c:	01a4      	lsls	r4, r4, #6
			download_client_disconnect(&dlc);
   3063e:	4811      	ldr	r0, [pc, #68]	; (30684 <download_client_callback+0x1d4>)
			LOG_ERR("Download client error");
   30640:	f044 0401 	orr.w	r4, r4, #1
			download_client_disconnect(&dlc);
   30644:	f7ff fb54 	bl	2fcf0 <download_client_disconnect>
			LOG_ERR("Download client error");
   30648:	4620      	mov	r0, r4
   3064a:	491d      	ldr	r1, [pc, #116]	; (306c0 <download_client_callback+0x210>)
   3064c:	f011 f8e8 	bl	41820 <log_string_sync>
			err = dfu_target_done(false);
   30650:	2000      	movs	r0, #0
   30652:	f000 ff6f 	bl	31534 <dfu_target_done>
			if (err == -EACCES) {
   30656:	f110 0f0d 	cmn.w	r0, #13
   3065a:	d004      	beq.n	30666 <download_client_callback+0x1b6>
			} else if (err != 0) {
   3065c:	b118      	cbz	r0, 30666 <download_client_callback+0x1b6>
				LOG_ERR("Unable to deinitialze resources "
   3065e:	4620      	mov	r0, r4
   30660:	4918      	ldr	r1, [pc, #96]	; (306c4 <download_client_callback+0x214>)
   30662:	f011 f8dd 	bl	41820 <log_string_sync>
			first_fragment = true;
   30666:	2001      	movs	r0, #1
   30668:	4b04      	ldr	r3, [pc, #16]	; (3067c <download_client_callback+0x1cc>)
   3066a:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   3066c:	f7ff ff0e 	bl	3048c <send_error_evt>
			return event->error;
   30670:	686c      	ldr	r4, [r5, #4]
   30672:	e75e      	b.n	30532 <download_client_callback+0x82>
		return -EINVAL;
   30674:	f06f 0415 	mvn.w	r4, #21
   30678:	e75b      	b.n	30532 <download_client_callback+0x82>
   3067a:	bf00      	nop
   3067c:	200209d9 	.word	0x200209d9
   30680:	20025504 	.word	0x20025504
   30684:	20021d48 	.word	0x20021d48
   30688:	000306c9 	.word	0x000306c9
   3068c:	000463bc 	.word	0x000463bc
   30690:	0004644c 	.word	0x0004644c
   30694:	0004d4a1 	.word	0x0004d4a1
   30698:	0004d4ba 	.word	0x0004d4ba
   3069c:	20023658 	.word	0x20023658
   306a0:	200244f8 	.word	0x200244f8
   306a4:	0004d4d5 	.word	0x0004d4d5
   306a8:	0004d4fa 	.word	0x0004d4fa
   306ac:	0004d514 	.word	0x0004d514
   306b0:	0004d538 	.word	0x0004d538
   306b4:	20025500 	.word	0x20025500
   306b8:	20025508 	.word	0x20025508
   306bc:	0004d552 	.word	0x0004d552
   306c0:	0004d57c 	.word	0x0004d57c
   306c4:	0004d592 	.word	0x0004d592

000306c8 <dfu_target_callback_handler>:
{
   306c8:	b507      	push	{r0, r1, r2, lr}
	switch (evt) {
   306ca:	b128      	cbz	r0, 306d8 <dfu_target_callback_handler+0x10>
   306cc:	2801      	cmp	r0, #1
   306ce:	d00f      	beq.n	306f0 <dfu_target_callback_handler+0x28>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   306d0:	2001      	movs	r0, #1
   306d2:	f7ff fedb 	bl	3048c <send_error_evt>
}
   306d6:	e008      	b.n	306ea <dfu_target_callback_handler+0x22>
	const struct fota_download_evt evt = {
   306d8:	2302      	movs	r3, #2
   306da:	e9cd 0000 	strd	r0, r0, [sp]
   306de:	f88d 3000 	strb.w	r3, [sp]
	callback(&evt);
   306e2:	4b06      	ldr	r3, [pc, #24]	; (306fc <dfu_target_callback_handler+0x34>)
   306e4:	4668      	mov	r0, sp
   306e6:	681b      	ldr	r3, [r3, #0]
   306e8:	4798      	blx	r3
}
   306ea:	b003      	add	sp, #12
   306ec:	f85d fb04 	ldr.w	pc, [sp], #4
	const struct fota_download_evt evt = {
   306f0:	2300      	movs	r3, #0
   306f2:	e9cd 3300 	strd	r3, r3, [sp]
   306f6:	2303      	movs	r3, #3
   306f8:	e7f1      	b.n	306de <dfu_target_callback_handler+0x16>
   306fa:	bf00      	nop
   306fc:	20025500 	.word	0x20025500

00030700 <fota_download_start>:

int fota_download_start(const char *host, const char *file, int sec_tag,
			const char *apn, size_t fragment_size)
{
   30700:	b530      	push	{r4, r5, lr}
   30702:	b085      	sub	sp, #20
	int err = -1;

	struct download_client_cfg config = {
   30704:	e9cd 2301 	strd	r2, r3, [sp, #4]
   30708:	9b08      	ldr	r3, [sp, #32]
{
   3070a:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   3070c:	9303      	str	r3, [sp, #12]
		.sec_tag = sec_tag,
		.apn = apn,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   3070e:	4601      	mov	r1, r0
   30710:	b1c8      	cbz	r0, 30746 <fota_download_start+0x46>
   30712:	b1c5      	cbz	r5, 30746 <fota_download_start+0x46>
   30714:	4b0d      	ldr	r3, [pc, #52]	; (3074c <fota_download_start+0x4c>)
   30716:	681b      	ldr	r3, [r3, #0]
   30718:	b1ab      	cbz	r3, 30746 <fota_download_start+0x46>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   3071a:	2202      	movs	r2, #2
   3071c:	4b0c      	ldr	r3, [pc, #48]	; (30750 <fota_download_start+0x50>)
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   3071e:	480d      	ldr	r0, [pc, #52]	; (30754 <fota_download_start+0x54>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   30720:	601a      	str	r2, [r3, #0]
	err = download_client_connect(&dlc, host, &config);
   30722:	aa01      	add	r2, sp, #4
   30724:	f7ff f8f2 	bl	2f90c <download_client_connect>
	if (err != 0) {
   30728:	4604      	mov	r4, r0
   3072a:	b948      	cbnz	r0, 30740 <fota_download_start+0x40>
		return err;
	}

	err = download_client_start(&dlc, file, 0);
   3072c:	4602      	mov	r2, r0
   3072e:	4629      	mov	r1, r5
   30730:	4808      	ldr	r0, [pc, #32]	; (30754 <fota_download_start+0x54>)
   30732:	f7ff fc37 	bl	2ffa4 <download_client_start>
	if (err != 0) {
   30736:	4604      	mov	r4, r0
   30738:	b110      	cbz	r0, 30740 <fota_download_start+0x40>
		download_client_disconnect(&dlc);
   3073a:	4806      	ldr	r0, [pc, #24]	; (30754 <fota_download_start+0x54>)
   3073c:	f7ff fad8 	bl	2fcf0 <download_client_disconnect>
		return err;
	}

	return 0;
}
   30740:	4620      	mov	r0, r4
   30742:	b005      	add	sp, #20
   30744:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   30746:	f06f 0415 	mvn.w	r4, #21
   3074a:	e7f9      	b.n	30740 <fota_download_start+0x40>
   3074c:	20025500 	.word	0x20025500
   30750:	20025508 	.word	0x20025508
   30754:	20021d48 	.word	0x20021d48

00030758 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   30758:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   3075a:	b158      	cbz	r0, 30774 <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   3075c:	4b07      	ldr	r3, [pc, #28]	; (3077c <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   3075e:	4908      	ldr	r1, [pc, #32]	; (30780 <fota_download_init+0x28>)
	callback = client_callback;
   30760:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   30762:	4808      	ldr	r0, [pc, #32]	; (30784 <fota_download_init+0x2c>)
   30764:	f014 f9d9 	bl	44b1a <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   30768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   3076c:	4906      	ldr	r1, [pc, #24]	; (30788 <fota_download_init+0x30>)
   3076e:	4807      	ldr	r0, [pc, #28]	; (3078c <fota_download_init+0x34>)
   30770:	f7ff b8a2 	b.w	2f8b8 <download_client_init>
}
   30774:	f06f 0015 	mvn.w	r0, #21
   30778:	bd08      	pop	{r3, pc}
   3077a:	bf00      	nop
   3077c:	20025500 	.word	0x20025500
   30780:	00030409 	.word	0x00030409
   30784:	20023658 	.word	0x20023658
   30788:	000304b1 	.word	0x000304b1
   3078c:	20021d48 	.word	0x20021d48

00030790 <construct_topic>:
 */
#define TOPIC_TEMPLATE "$aws/things/%s/jobs/%s%s%s%s"
static int construct_topic(const uint8_t *client_id, const uint8_t *job_id,
			   const struct topic_conf *conf, uint8_t *out_buf,
			   struct mqtt_topic *topic, bool remove_suffix)
{
   30790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   30794:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   30798:	460c      	mov	r4, r1
   3079a:	4616      	mov	r6, r2
   3079c:	461d      	mov	r5, r3
	if (client_id == NULL || job_id == NULL || conf == NULL ||
   3079e:	4607      	mov	r7, r0
   307a0:	2800      	cmp	r0, #0
   307a2:	d058      	beq.n	30856 <construct_topic+0xc6>
   307a4:	2900      	cmp	r1, #0
   307a6:	d056      	beq.n	30856 <construct_topic+0xc6>
   307a8:	6853      	ldr	r3, [r2, #4]
   307aa:	2b00      	cmp	r3, #0
   307ac:	d053      	beq.n	30856 <construct_topic+0xc6>
	    conf->name == NULL || conf->suffix == NULL ||
   307ae:	f8d2 8008 	ldr.w	r8, [r2, #8]
   307b2:	f1b8 0f00 	cmp.w	r8, #0
   307b6:	d04e      	beq.n	30856 <construct_topic+0xc6>
   307b8:	2d00      	cmp	r5, #0
   307ba:	d04c      	beq.n	30856 <construct_topic+0xc6>
	    out_buf == NULL || topic == NULL) {
		return -EINVAL;
	}

	const char *suffix = remove_suffix  ? "" : conf->suffix;
   307bc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   307c0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 30874 <construct_topic+0xe4>
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   307c4:	4608      	mov	r0, r1
	const char *suffix = remove_suffix  ? "" : conf->suffix;
   307c6:	2b00      	cmp	r3, #0
   307c8:	bf18      	it	ne
   307ca:	46d0      	movne	r8, sl
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   307cc:	f7ec fd46 	bl	1d25c <strlen>
   307d0:	4b22      	ldr	r3, [pc, #136]	; (3085c <construct_topic+0xcc>)
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   307d2:	9400      	str	r4, [sp, #0]
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   307d4:	2800      	cmp	r0, #0
   307d6:	bf14      	ite	ne
   307d8:	4618      	movne	r0, r3
   307da:	4650      	moveq	r0, sl
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   307dc:	6873      	ldr	r3, [r6, #4]
   307de:	2195      	movs	r1, #149	; 0x95
   307e0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   307e4:	4a1e      	ldr	r2, [pc, #120]	; (30860 <construct_topic+0xd0>)
   307e6:	463b      	mov	r3, r7
   307e8:	4628      	mov	r0, r5
   307ea:	f8cd 800c 	str.w	r8, [sp, #12]
   307ee:	f00f f9cd 	bl	3fb8c <sniprintf>
			client_id, job_id, slash_after_job_id, conf->name,
			suffix);

	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   307f2:	2894      	cmp	r0, #148	; 0x94
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   307f4:	4604      	mov	r4, r0
	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   307f6:	dd14      	ble.n	30822 <construct_topic+0x92>
   307f8:	4b1a      	ldr	r3, [pc, #104]	; (30864 <construct_topic+0xd4>)
   307fa:	4c1b      	ldr	r4, [pc, #108]	; (30868 <construct_topic+0xd8>)
		LOG_ERR("Unable to fit formated string into to allocate "
   307fc:	6870      	ldr	r0, [r6, #4]
   307fe:	1ae4      	subs	r4, r4, r3
   30800:	f011 f821 	bl	41846 <log_strdup>
   30804:	08e4      	lsrs	r4, r4, #3
   30806:	01a4      	lsls	r4, r4, #6
   30808:	f044 0401 	orr.w	r4, r4, #1
   3080c:	4602      	mov	r2, r0
   3080e:	4917      	ldr	r1, [pc, #92]	; (3086c <construct_topic+0xdc>)
   30810:	4620      	mov	r0, r4
   30812:	f011 f805 	bl	41820 <log_string_sync>
			"memory for %s", log_strdup(conf->name));
		return -ENOMEM;
   30816:	f06f 040b 	mvn.w	r4, #11

	topic->topic.size = ret;
	topic->topic.utf8 = out_buf;
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
	return 0;
}
   3081a:	4620      	mov	r0, r4
   3081c:	b004      	add	sp, #16
   3081e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (ret < 0) {
   30822:	2800      	cmp	r0, #0
   30824:	da10      	bge.n	30848 <construct_topic+0xb8>
   30826:	4b0f      	ldr	r3, [pc, #60]	; (30864 <construct_topic+0xd4>)
   30828:	4d0f      	ldr	r5, [pc, #60]	; (30868 <construct_topic+0xd8>)
		LOG_ERR("Output error for %s was encountered with return value "
   3082a:	6870      	ldr	r0, [r6, #4]
   3082c:	1aed      	subs	r5, r5, r3
   3082e:	f011 f80a 	bl	41846 <log_strdup>
   30832:	08ed      	lsrs	r5, r5, #3
   30834:	01ad      	lsls	r5, r5, #6
   30836:	f045 0501 	orr.w	r5, r5, #1
   3083a:	4602      	mov	r2, r0
   3083c:	4623      	mov	r3, r4
   3083e:	4628      	mov	r0, r5
   30840:	490b      	ldr	r1, [pc, #44]	; (30870 <construct_topic+0xe0>)
   30842:	f010 ffed 	bl	41820 <log_string_sync>
		return ret;
   30846:	e7e8      	b.n	3081a <construct_topic+0x8a>
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   30848:	2301      	movs	r3, #1
	return 0;
   3084a:	2400      	movs	r4, #0
	topic->topic.utf8 = out_buf;
   3084c:	e9c9 5000 	strd	r5, r0, [r9]
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   30850:	f889 3008 	strb.w	r3, [r9, #8]
	return 0;
   30854:	e7e1      	b.n	3081a <construct_topic+0x8a>
		return -EINVAL;
   30856:	f06f 0415 	mvn.w	r4, #21
   3085a:	e7de      	b.n	3081a <construct_topic+0x8a>
   3085c:	0004d27d 	.word	0x0004d27d
   30860:	0004d5e9 	.word	0x0004d5e9
   30864:	000463bc 	.word	0x000463bc
   30868:	000463f4 	.word	0x000463f4
   3086c:	0004d606 	.word	0x0004d606
   30870:	0004d643 	.word	0x0004d643
   30874:	00049048 	.word	0x00049048

00030878 <reg_topic>:

static int reg_topic(struct mqtt_client *const client, uint8_t *topic_buf,
		     struct topic_conf const *conf, const uint8_t *job_id,
		     bool subscribe)
{
   30878:	b5f0      	push	{r4, r5, r6, r7, lr}
   3087a:	b089      	sub	sp, #36	; 0x24
   3087c:	468c      	mov	ip, r1
   3087e:	4617      	mov	r7, r2
   30880:	4619      	mov	r1, r3
	if (client == NULL) {
   30882:	4605      	mov	r5, r0
{
   30884:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	if (client == NULL) {
   30888:	2800      	cmp	r0, #0
   3088a:	d035      	beq.n	308f8 <reg_topic+0x80>
		return -EINVAL;
	}

	struct mqtt_topic topic;
	int err = construct_topic(client->client_id.utf8, job_id, conf,
   3088c:	2300      	movs	r3, #0
   3088e:	ae05      	add	r6, sp, #20
   30890:	9301      	str	r3, [sp, #4]
   30892:	9600      	str	r6, [sp, #0]
   30894:	4663      	mov	r3, ip
   30896:	6c80      	ldr	r0, [r0, #72]	; 0x48
   30898:	f7ff ff7a 	bl	30790 <construct_topic>
				  topic_buf, &topic, false);

	const struct mqtt_subscription_list subscription_list = {
   3089c:	2301      	movs	r3, #1
   3089e:	f8ad 3010 	strh.w	r3, [sp, #16]
   308a2:	683b      	ldr	r3, [r7, #0]
   308a4:	9603      	str	r6, [sp, #12]
   308a6:	f8ad 3012 	strh.w	r3, [sp, #18]
		.list = &topic,
		.list_count = 1,
		.message_id = conf->msg_id
	};

	if (err) {
   308aa:	b9a0      	cbnz	r0, 308d6 <reg_topic+0x5e>
		return err;
	}

	if (subscribe) {
   308ac:	4b14      	ldr	r3, [pc, #80]	; (30900 <reg_topic+0x88>)
   308ae:	4a15      	ldr	r2, [pc, #84]	; (30904 <reg_topic+0x8c>)
   308b0:	9805      	ldr	r0, [sp, #20]
   308b2:	1a9b      	subs	r3, r3, r2
   308b4:	08db      	lsrs	r3, r3, #3
   308b6:	019b      	lsls	r3, r3, #6
   308b8:	b17c      	cbz	r4, 308da <reg_topic+0x62>
		LOG_DBG("Subscribe: %s", log_strdup(topic.topic.utf8));
   308ba:	f043 0404 	orr.w	r4, r3, #4
   308be:	f010 ffc2 	bl	41846 <log_strdup>
   308c2:	4911      	ldr	r1, [pc, #68]	; (30908 <reg_topic+0x90>)
   308c4:	4603      	mov	r3, r0
   308c6:	4a11      	ldr	r2, [pc, #68]	; (3090c <reg_topic+0x94>)
   308c8:	4620      	mov	r0, r4
   308ca:	f010 ffa9 	bl	41820 <log_string_sync>
		return mqtt_subscribe(client, &subscription_list);
   308ce:	4628      	mov	r0, r5
   308d0:	a903      	add	r1, sp, #12
   308d2:	f012 fbb8 	bl	43046 <mqtt_subscribe>
	}

	LOG_DBG("Unsubscribe: %s", log_strdup(topic.topic.utf8));
	return mqtt_unsubscribe(client, &subscription_list);
}
   308d6:	b009      	add	sp, #36	; 0x24
   308d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_DBG("Unsubscribe: %s", log_strdup(topic.topic.utf8));
   308da:	f043 0404 	orr.w	r4, r3, #4
   308de:	f010 ffb2 	bl	41846 <log_strdup>
   308e2:	4a0a      	ldr	r2, [pc, #40]	; (3090c <reg_topic+0x94>)
   308e4:	4603      	mov	r3, r0
   308e6:	490a      	ldr	r1, [pc, #40]	; (30910 <reg_topic+0x98>)
   308e8:	4620      	mov	r0, r4
   308ea:	f010 ff99 	bl	41820 <log_string_sync>
	return mqtt_unsubscribe(client, &subscription_list);
   308ee:	4628      	mov	r0, r5
   308f0:	a903      	add	r1, sp, #12
   308f2:	f012 fbcf 	bl	43094 <mqtt_unsubscribe>
   308f6:	e7ee      	b.n	308d6 <reg_topic+0x5e>
		return -EINVAL;
   308f8:	f06f 0015 	mvn.w	r0, #21
   308fc:	e7eb      	b.n	308d6 <reg_topic+0x5e>
   308fe:	bf00      	nop
   30900:	000463f4 	.word	0x000463f4
   30904:	000463bc 	.word	0x000463bc
   30908:	0004d67c 	.word	0x0004d67c
   3090c:	0004d7eb 	.word	0x0004d7eb
   30910:	0004d68e 	.word	0x0004d68e

00030914 <publish>:
}

static int publish(struct mqtt_client *const client, const uint8_t *job_id,
		   const struct topic_conf *conf, uint8_t *payload_data,
		   size_t payload_data_len, uint8_t *topic_buf)
{
   30914:	b5f0      	push	{r4, r5, r6, r7, lr}
   30916:	461e      	mov	r6, r3
	struct mqtt_topic topic;

	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   30918:	2301      	movs	r3, #1
{
   3091a:	b08d      	sub	sp, #52	; 0x34
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   3091c:	af03      	add	r7, sp, #12
   3091e:	9301      	str	r3, [sp, #4]
   30920:	9700      	str	r7, [sp, #0]
{
   30922:	4605      	mov	r5, r0
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   30924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   30926:	6c80      	ldr	r0, [r0, #72]	; 0x48
   30928:	f7ff ff32 	bl	30790 <construct_topic>
				  topic_buf, &topic, true);

	if (ret) {
   3092c:	bb70      	cbnz	r0, 3098c <publish+0x78>
   3092e:	4b18      	ldr	r3, [pc, #96]	; (30990 <publish+0x7c>)
   30930:	4c18      	ldr	r4, [pc, #96]	; (30994 <publish+0x80>)
		return ret;
	}

	LOG_DBG("Publish topic: %s", log_strdup(topic.topic.utf8));
   30932:	9803      	ldr	r0, [sp, #12]
   30934:	1ae4      	subs	r4, r4, r3
   30936:	f010 ff86 	bl	41846 <log_strdup>
   3093a:	08e4      	lsrs	r4, r4, #3
   3093c:	01a4      	lsls	r4, r4, #6
   3093e:	f044 0404 	orr.w	r4, r4, #4
   30942:	4603      	mov	r3, r0
   30944:	4a14      	ldr	r2, [pc, #80]	; (30998 <publish+0x84>)
   30946:	4620      	mov	r0, r4
   30948:	4914      	ldr	r1, [pc, #80]	; (3099c <publish+0x88>)
   3094a:	f010 ff69 	bl	41820 <log_string_sync>
	LOG_DBG("Publish payload %s", log_strdup(payload_data));
   3094e:	4630      	mov	r0, r6
   30950:	f010 ff79 	bl	41846 <log_strdup>
   30954:	4a10      	ldr	r2, [pc, #64]	; (30998 <publish+0x84>)
   30956:	4603      	mov	r3, r0
   30958:	4911      	ldr	r1, [pc, #68]	; (309a0 <publish+0x8c>)
   3095a:	4620      	mov	r0, r4
   3095c:	f010 ff60 	bl	41820 <log_string_sync>

	struct mqtt_publish_param param = {
   30960:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   30964:	9b12      	ldr	r3, [sp, #72]	; 0x48
   30966:	ac06      	add	r4, sp, #24
   30968:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   3096c:	930a      	str	r3, [sp, #40]	; 0x28
   3096e:	9609      	str	r6, [sp, #36]	; 0x24
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   30970:	f7f6 f84c 	bl	26a0c <z_timer_cycle_get_32>
   30974:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   30978:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   3097c:	f023 0303 	bic.w	r3, r3, #3
		.message_id = k_cycle_get_32(),
		.dup_flag = 0,
		.retain_flag = 0,
	};

	return mqtt_publish(client, &param);
   30980:	4621      	mov	r1, r4
   30982:	4628      	mov	r0, r5
	struct mqtt_publish_param param = {
   30984:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	return mqtt_publish(client, &param);
   30988:	f012 fac8 	bl	42f1c <mqtt_publish>
}
   3098c:	b00d      	add	sp, #52	; 0x34
   3098e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30990:	000463bc 	.word	0x000463bc
   30994:	000463f4 	.word	0x000463f4
   30998:	0004d7f5 	.word	0x0004d7f5
   3099c:	0004d6a2 	.word	0x0004d6a2
   309a0:	0004d6b8 	.word	0x0004d6b8

000309a4 <aws_jobs_create_topic_notify_next>:
{
   309a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return construct_topic(client->client_id.utf8, "",
   309a6:	2200      	movs	r2, #0
   309a8:	9201      	str	r2, [sp, #4]
   309aa:	aa03      	add	r2, sp, #12
   309ac:	9200      	str	r2, [sp, #0]
{
   309ae:	460b      	mov	r3, r1
	return construct_topic(client->client_id.utf8, "",
   309b0:	4a03      	ldr	r2, [pc, #12]	; (309c0 <aws_jobs_create_topic_notify_next+0x1c>)
   309b2:	4904      	ldr	r1, [pc, #16]	; (309c4 <aws_jobs_create_topic_notify_next+0x20>)
   309b4:	6c80      	ldr	r0, [r0, #72]	; 0x48
   309b6:	f7ff feeb 	bl	30790 <construct_topic>
}
   309ba:	b007      	add	sp, #28
   309bc:	f85d fb04 	ldr.w	pc, [sp], #4
   309c0:	00046ed0 	.word	0x00046ed0
   309c4:	00049048 	.word	0x00049048

000309c8 <aws_jobs_subscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   309c8:	2301      	movs	r3, #1
{
   309ca:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   309cc:	4a03      	ldr	r2, [pc, #12]	; (309dc <aws_jobs_subscribe_topic_notify_next+0x14>)
   309ce:	9300      	str	r3, [sp, #0]
   309d0:	4b03      	ldr	r3, [pc, #12]	; (309e0 <aws_jobs_subscribe_topic_notify_next+0x18>)
   309d2:	f7ff ff51 	bl	30878 <reg_topic>
}
   309d6:	b003      	add	sp, #12
   309d8:	f85d fb04 	ldr.w	pc, [sp], #4
   309dc:	00046ed0 	.word	0x00046ed0
   309e0:	00049048 	.word	0x00049048

000309e4 <aws_jobs_create_topic_get>:
{
   309e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   309e6:	4613      	mov	r3, r2
	return construct_topic(client->client_id.utf8, job_id,
   309e8:	2200      	movs	r2, #0
   309ea:	9201      	str	r2, [sp, #4]
   309ec:	aa03      	add	r2, sp, #12
   309ee:	9200      	str	r2, [sp, #0]
   309f0:	6c80      	ldr	r0, [r0, #72]	; 0x48
   309f2:	4a03      	ldr	r2, [pc, #12]	; (30a00 <aws_jobs_create_topic_get+0x1c>)
   309f4:	f7ff fecc 	bl	30790 <construct_topic>
}
   309f8:	b007      	add	sp, #28
   309fa:	f85d fb04 	ldr.w	pc, [sp], #4
   309fe:	bf00      	nop
   30a00:	00046ec4 	.word	0x00046ec4

00030a04 <aws_jobs_subscribe_topic_get>:
{
   30a04:	b507      	push	{r0, r1, r2, lr}
   30a06:	460b      	mov	r3, r1
   30a08:	4611      	mov	r1, r2
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   30a0a:	2201      	movs	r2, #1
   30a0c:	9200      	str	r2, [sp, #0]
   30a0e:	4a03      	ldr	r2, [pc, #12]	; (30a1c <aws_jobs_subscribe_topic_get+0x18>)
   30a10:	f7ff ff32 	bl	30878 <reg_topic>
}
   30a14:	b003      	add	sp, #12
   30a16:	f85d fb04 	ldr.w	pc, [sp], #4
   30a1a:	bf00      	nop
   30a1c:	00046ec4 	.word	0x00046ec4

00030a20 <aws_jobs_subscribe_topic_update>:
{
   30a20:	b507      	push	{r0, r1, r2, lr}
   30a22:	460b      	mov	r3, r1
   30a24:	4611      	mov	r1, r2
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   30a26:	2201      	movs	r2, #1
   30a28:	9200      	str	r2, [sp, #0]
   30a2a:	4a03      	ldr	r2, [pc, #12]	; (30a38 <aws_jobs_subscribe_topic_update+0x18>)
   30a2c:	f7ff ff24 	bl	30878 <reg_topic>
}
   30a30:	b003      	add	sp, #12
   30a32:	f85d fb04 	ldr.w	pc, [sp], #4
   30a36:	bf00      	nop
   30a38:	00046edc 	.word	0x00046edc

00030a3c <aws_jobs_update_job_execution>:
				  const uint8_t *job_id,
				  enum execution_status status,
				  const uint8_t *status_details,
				  int expected_version,
				  const uint8_t *client_token, uint8_t *topic_buf)
{
   30a3c:	b570      	push	{r4, r5, r6, lr}
   30a3e:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
   30a42:	460e      	mov	r6, r1
   30a44:	f8dd 156c 	ldr.w	r1, [sp, #1388]	; 0x56c
   30a48:	4605      	mov	r5, r0
	/* The rest of the parameters are checked later */
	if (client_token == NULL) {
   30a4a:	2900      	cmp	r1, #0
   30a4c:	d040      	beq.n	30ad0 <aws_jobs_update_job_execution+0x94>
	 * is actually 32kb set it to what is the limiting factor which is the
	 * MQTT buffer size for reception.
	 */
	uint8_t update_job_payload[CONFIG_UPDATE_JOB_PAYLOAD_LEN];

	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   30a4e:	4822      	ldr	r0, [pc, #136]	; (30ad8 <aws_jobs_update_job_execution+0x9c>)
   30a50:	9102      	str	r1, [sp, #8]
   30a52:	2b00      	cmp	r3, #0
   30a54:	bf08      	it	eq
   30a56:	4603      	moveq	r3, r0
   30a58:	f8dd 1568 	ldr.w	r1, [sp, #1384]	; 0x568
   30a5c:	a804      	add	r0, sp, #16
   30a5e:	e9cd 3100 	strd	r3, r1, [sp]
   30a62:	4b1e      	ldr	r3, [pc, #120]	; (30adc <aws_jobs_update_job_execution+0xa0>)
   30a64:	f240 5146 	movw	r1, #1350	; 0x546
   30a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   30a6c:	4a1c      	ldr	r2, [pc, #112]	; (30ae0 <aws_jobs_update_job_execution+0xa4>)
   30a6e:	f00f f88d 	bl	3fb8c <sniprintf>
			   UPDATE_JOB_PAYLOAD, execution_status_strings[status],
			   (status_details ? (char *)status_details : "null"),
			   expected_version, client_token);

	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   30a72:	f240 5345 	movw	r3, #1349	; 0x545
   30a76:	4298      	cmp	r0, r3
	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   30a78:	4604      	mov	r4, r0
	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   30a7a:	dd0f      	ble.n	30a9c <aws_jobs_update_job_execution+0x60>
   30a7c:	4b19      	ldr	r3, [pc, #100]	; (30ae4 <aws_jobs_update_job_execution+0xa8>)
   30a7e:	481a      	ldr	r0, [pc, #104]	; (30ae8 <aws_jobs_update_job_execution+0xac>)
		LOG_ERR("Unable to fit formated string in provided buffer.");
   30a80:	491a      	ldr	r1, [pc, #104]	; (30aec <aws_jobs_update_job_execution+0xb0>)
   30a82:	1ac0      	subs	r0, r0, r3
   30a84:	08c0      	lsrs	r0, r0, #3
   30a86:	0180      	lsls	r0, r0, #6
   30a88:	f040 0001 	orr.w	r0, r0, #1
   30a8c:	f010 fec8 	bl	41820 <log_string_sync>
		return -ENOMEM;
   30a90:	f06f 040b 	mvn.w	r4, #11
	}

	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
		       ret, topic_buf);

}
   30a94:	4620      	mov	r0, r4
   30a96:	f50d 6dab 	add.w	sp, sp, #1368	; 0x558
   30a9a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (ret < 0) {
   30a9c:	2800      	cmp	r0, #0
   30a9e:	da0b      	bge.n	30ab8 <aws_jobs_update_job_execution+0x7c>
   30aa0:	4b10      	ldr	r3, [pc, #64]	; (30ae4 <aws_jobs_update_job_execution+0xa8>)
   30aa2:	4811      	ldr	r0, [pc, #68]	; (30ae8 <aws_jobs_update_job_execution+0xac>)
		LOG_ERR("Error when creating payload %d", ret);
   30aa4:	4622      	mov	r2, r4
   30aa6:	1ac0      	subs	r0, r0, r3
   30aa8:	08c0      	lsrs	r0, r0, #3
   30aaa:	0180      	lsls	r0, r0, #6
   30aac:	4910      	ldr	r1, [pc, #64]	; (30af0 <aws_jobs_update_job_execution+0xb4>)
   30aae:	f040 0001 	orr.w	r0, r0, #1
   30ab2:	f010 feb5 	bl	41820 <log_string_sync>
		return ret;
   30ab6:	e7ed      	b.n	30a94 <aws_jobs_update_job_execution+0x58>
	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
   30ab8:	f8dd 3570 	ldr.w	r3, [sp, #1392]	; 0x570
   30abc:	4631      	mov	r1, r6
   30abe:	e9cd 0300 	strd	r0, r3, [sp]
   30ac2:	4a0c      	ldr	r2, [pc, #48]	; (30af4 <aws_jobs_update_job_execution+0xb8>)
   30ac4:	4628      	mov	r0, r5
   30ac6:	ab04      	add	r3, sp, #16
   30ac8:	f7ff ff24 	bl	30914 <publish>
   30acc:	4604      	mov	r4, r0
   30ace:	e7e1      	b.n	30a94 <aws_jobs_update_job_execution+0x58>
		return -EINVAL;
   30ad0:	f06f 0415 	mvn.w	r4, #21
   30ad4:	e7de      	b.n	30a94 <aws_jobs_update_job_execution+0x58>
   30ad6:	bf00      	nop
   30ad8:	00049f21 	.word	0x00049f21
   30adc:	00046ee8 	.word	0x00046ee8
   30ae0:	0004d6cf 	.word	0x0004d6cf
   30ae4:	000463bc 	.word	0x000463bc
   30ae8:	000463f4 	.word	0x000463f4
   30aec:	0004d71f 	.word	0x0004d71f
   30af0:	0004d751 	.word	0x0004d751
   30af4:	00046edc 	.word	0x00046edc

00030af8 <aws_jobs_get_job_execution>:

#define JOB_ID_GET_PAYLOAD "{\"clientToken\": \"\"}"
int aws_jobs_get_job_execution(struct mqtt_client *const client,
			       const char *job_id, uint8_t *topic_buf)
{
   30af8:	b530      	push	{r4, r5, lr}
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   30afa:	4b09      	ldr	r3, [pc, #36]	; (30b20 <aws_jobs_get_job_execution+0x28>)
{
   30afc:	b085      	sub	sp, #20
   30afe:	4604      	mov	r4, r0
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   30b00:	4618      	mov	r0, r3
{
   30b02:	4615      	mov	r5, r2
   30b04:	9103      	str	r1, [sp, #12]
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   30b06:	f7ec fba9 	bl	1d25c <strlen>
   30b0a:	4b05      	ldr	r3, [pc, #20]	; (30b20 <aws_jobs_get_job_execution+0x28>)
   30b0c:	e9cd 0500 	strd	r0, r5, [sp]
   30b10:	4a04      	ldr	r2, [pc, #16]	; (30b24 <aws_jobs_get_job_execution+0x2c>)
   30b12:	4620      	mov	r0, r4
   30b14:	9903      	ldr	r1, [sp, #12]
   30b16:	f7ff fefd 	bl	30914 <publish>
		       strlen(JOB_ID_GET_PAYLOAD), topic_buf);
}
   30b1a:	b005      	add	sp, #20
   30b1c:	bd30      	pop	{r4, r5, pc}
   30b1e:	bf00      	nop
   30b20:	0004d770 	.word	0x0004d770
   30b24:	00046ec4 	.word	0x00046ec4

00030b28 <update_job_execution.constprop.0>:
 * @param[in] client_token  Client identifier which will be repeated in the
 *			    respone of the update.
 *
 * @return 0 If successful otherwise a negative error code is returned.
 */
static int update_job_execution(struct mqtt_client *const client,
   30b28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30b2c:	4606      	mov	r6, r0
   30b2e:	460d      	mov	r5, r1
	while (!accepted) {
   30b30:	4c19      	ldr	r4, [pc, #100]	; (30b98 <update_job_execution.constprop.0+0x70>)
   30b32:	7823      	ldrb	r3, [r4, #0]
   30b34:	b363      	cbz	r3, 30b90 <update_job_execution.constprop.0+0x68>
{
	int ret;

	/* Waiting for the previous call to this function to be accepted. */
	wait_for_update_accepted();
	accepted = false;
   30b36:	2700      	movs	r7, #0
   30b38:	4b18      	ldr	r3, [pc, #96]	; (30b9c <update_job_execution.constprop.0+0x74>)
   30b3a:	7027      	strb	r7, [r4, #0]
	LOG_DBG("%s, state: %d, version_number: %d", __func__,
   30b3c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 30bbc <update_job_execution.constprop.0+0x94>
   30b40:	4c17      	ldr	r4, [pc, #92]	; (30ba0 <update_job_execution.constprop.0+0x78>)
   30b42:	4918      	ldr	r1, [pc, #96]	; (30ba4 <update_job_execution.constprop.0+0x7c>)
   30b44:	1ae4      	subs	r4, r4, r3
   30b46:	f8d8 3000 	ldr.w	r3, [r8]
   30b4a:	08e4      	lsrs	r4, r4, #3
   30b4c:	e9cd 5300 	strd	r5, r3, [sp]
   30b50:	4b15      	ldr	r3, [pc, #84]	; (30ba8 <update_job_execution.constprop.0+0x80>)
   30b52:	01a4      	lsls	r4, r4, #6
   30b54:	461a      	mov	r2, r3
   30b56:	f044 0004 	orr.w	r0, r4, #4
   30b5a:	f010 fe61 	bl	41820 <log_string_sync>
		state, execution_version_number);

	ret = aws_jobs_update_job_execution(client, job_id, state,
   30b5e:	4b13      	ldr	r3, [pc, #76]	; (30bac <update_job_execution.constprop.0+0x84>)
   30b60:	462a      	mov	r2, r5
   30b62:	9302      	str	r3, [sp, #8]
   30b64:	4b12      	ldr	r3, [pc, #72]	; (30bb0 <update_job_execution.constprop.0+0x88>)
   30b66:	4630      	mov	r0, r6
   30b68:	9301      	str	r3, [sp, #4]
   30b6a:	f8d8 3000 	ldr.w	r3, [r8]
   30b6e:	4911      	ldr	r1, [pc, #68]	; (30bb4 <update_job_execution.constprop.0+0x8c>)
   30b70:	9300      	str	r3, [sp, #0]
   30b72:	463b      	mov	r3, r7
   30b74:	f7ff ff62 	bl	30a3c <aws_jobs_update_job_execution>
						 NULL,
					     execution_version_number,
					     client_token, update_topic);

	if (ret < 0) {
   30b78:	1e05      	subs	r5, r0, #0
   30b7a:	da05      	bge.n	30b88 <update_job_execution.constprop.0+0x60>
		LOG_ERR("aws_jobs_update_job_execution failed: %d", ret);
   30b7c:	462a      	mov	r2, r5
   30b7e:	490e      	ldr	r1, [pc, #56]	; (30bb8 <update_job_execution.constprop.0+0x90>)
   30b80:	f044 0001 	orr.w	r0, r4, #1
   30b84:	f010 fe4c 	bl	41820 <log_string_sync>
	}

	return ret;
}
   30b88:	4628      	mov	r0, r5
   30b8a:	b004      	add	sp, #16
   30b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   30b90:	f00c fe2e 	bl	3d7f0 <z_impl_k_yield>
}
   30b94:	e7cd      	b.n	30b32 <update_job_execution.constprop.0+0xa>
   30b96:	bf00      	nop
   30b98:	200209da 	.word	0x200209da
   30b9c:	000463bc 	.word	0x000463bc
   30ba0:	000463ec 	.word	0x000463ec
   30ba4:	0004d7fd 	.word	0x0004d7fd
   30ba8:	0004dd47 	.word	0x0004dd47
   30bac:	2002d61b 	.word	0x2002d61b
   30bb0:	00049048 	.word	0x00049048
   30bb4:	2002cfff 	.word	0x2002cfff
   30bb8:	0004d823 	.word	0x0004d823
   30bbc:	20025514 	.word	0x20025514

00030bc0 <http_fota_handler>:
		return 1;
	}
}

static void http_fota_handler(const struct fota_download_evt *evt)
{
   30bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__ASSERT_NO_MSG(c != NULL);
   30bc2:	4c2f      	ldr	r4, [pc, #188]	; (30c80 <http_fota_handler+0xc0>)
{
   30bc4:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(c != NULL);
   30bc6:	6823      	ldr	r3, [r4, #0]
   30bc8:	b95b      	cbnz	r3, 30be2 <http_fota_handler+0x22>
   30bca:	492e      	ldr	r1, [pc, #184]	; (30c84 <http_fota_handler+0xc4>)
   30bcc:	482e      	ldr	r0, [pc, #184]	; (30c88 <http_fota_handler+0xc8>)
   30bce:	f240 2305 	movw	r3, #517	; 0x205
   30bd2:	4a2e      	ldr	r2, [pc, #184]	; (30c8c <http_fota_handler+0xcc>)
   30bd4:	f010 fbf6 	bl	413c4 <printk>
   30bd8:	f240 2105 	movw	r1, #517	; 0x205
   30bdc:	482b      	ldr	r0, [pc, #172]	; (30c8c <http_fota_handler+0xcc>)
   30bde:	f010 fe0e 	bl	417fe <assert_post_action>

	int err = 0;
	struct aws_fota_event aws_fota_evt;

	switch (evt->id) {
   30be2:	782b      	ldrb	r3, [r5, #0]
   30be4:	2b04      	cmp	r3, #4
   30be6:	d825      	bhi.n	30c34 <http_fota_handler+0x74>
   30be8:	e8df f003 	tbb	[pc, r3]
   30bec:	2c260343 	.word	0x2c260343
   30bf0:	2e          	.byte	0x2e
   30bf1:	00          	.byte	0x00
   30bf2:	4b27      	ldr	r3, [pc, #156]	; (30c90 <http_fota_handler+0xd0>)
   30bf4:	4827      	ldr	r0, [pc, #156]	; (30c94 <http_fota_handler+0xd4>)
	case FOTA_DOWNLOAD_EVT_FINISHED:
		LOG_DBG("FOTA download completed evt received");
   30bf6:	4928      	ldr	r1, [pc, #160]	; (30c98 <http_fota_handler+0xd8>)
   30bf8:	1ac0      	subs	r0, r0, r3
   30bfa:	08c0      	lsrs	r0, r0, #3
   30bfc:	0180      	lsls	r0, r0, #6
   30bfe:	4a27      	ldr	r2, [pc, #156]	; (30c9c <http_fota_handler+0xdc>)
   30c00:	f040 0004 	orr.w	r0, r0, #4
   30c04:	f010 fe0c 	bl	41820 <log_string_sync>

		/* Always send download complete progress */
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
   30c08:	2305      	movs	r3, #5
   30c0a:	f88d 3000 	strb.w	r3, [sp]
		aws_fota_evt.dl.progress = AWS_FOTA_EVT_DL_COMPLETE_VAL;
   30c0e:	2364      	movs	r3, #100	; 0x64
		callback(&aws_fota_evt);

		fota_state = APPLY_UPDATE;
   30c10:	2602      	movs	r6, #2
		callback(&aws_fota_evt);
   30c12:	4d23      	ldr	r5, [pc, #140]	; (30ca0 <http_fota_handler+0xe0>)
   30c14:	4668      	mov	r0, sp
		aws_fota_evt.dl.progress = AWS_FOTA_EVT_DL_COMPLETE_VAL;
   30c16:	9301      	str	r3, [sp, #4]
		callback(&aws_fota_evt);
   30c18:	682b      	ldr	r3, [r5, #0]
   30c1a:	4798      	blx	r3
		fota_state = APPLY_UPDATE;
   30c1c:	4b21      	ldr	r3, [pc, #132]	; (30ca4 <http_fota_handler+0xe4>)
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS, "");
   30c1e:	2101      	movs	r1, #1
   30c20:	6820      	ldr	r0, [r4, #0]
		fota_state = APPLY_UPDATE;
   30c22:	701e      	strb	r6, [r3, #0]
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS, "");
   30c24:	f7ff ff80 	bl	30b28 <update_job_execution.constprop.0>
		if (err != 0) {
   30c28:	b120      	cbz	r0, 30c34 <http_fota_handler+0x74>
			aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
			callback(&aws_fota_evt);
   30c2a:	682b      	ldr	r3, [r5, #0]
			aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
   30c2c:	f88d 6000 	strb.w	r6, [sp]
	case FOTA_DOWNLOAD_EVT_PROGRESS:
		/* Only if CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT is enabled */
		download_progress = evt->progress;
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
		aws_fota_evt.dl.progress = download_progress;
		callback(&aws_fota_evt);
   30c30:	4668      	mov	r0, sp
   30c32:	4798      	blx	r3
		break;
	}
}
   30c34:	b002      	add	sp, #8
   30c36:	bd70      	pop	{r4, r5, r6, pc}
		aws_fota_evt.id = AWS_FOTA_EVT_ERASE_PENDING;
   30c38:	2303      	movs	r3, #3
		aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
   30c3a:	f88d 3000 	strb.w	r3, [sp]
		callback(&aws_fota_evt);
   30c3e:	4b18      	ldr	r3, [pc, #96]	; (30ca0 <http_fota_handler+0xe0>)
   30c40:	681b      	ldr	r3, [r3, #0]
   30c42:	e7f5      	b.n	30c30 <http_fota_handler+0x70>
		aws_fota_evt.id = AWS_FOTA_EVT_ERASE_DONE;
   30c44:	2304      	movs	r3, #4
   30c46:	e7f8      	b.n	30c3a <http_fota_handler+0x7a>
   30c48:	4b11      	ldr	r3, [pc, #68]	; (30c90 <http_fota_handler+0xd0>)
   30c4a:	4812      	ldr	r0, [pc, #72]	; (30c94 <http_fota_handler+0xd4>)
		LOG_ERR("FOTA download failed, report back");
   30c4c:	4916      	ldr	r1, [pc, #88]	; (30ca8 <http_fota_handler+0xe8>)
   30c4e:	1ac0      	subs	r0, r0, r3
   30c50:	08c0      	lsrs	r0, r0, #3
   30c52:	0180      	lsls	r0, r0, #6
   30c54:	f040 0001 	orr.w	r0, r0, #1
   30c58:	f010 fde2 	bl	41820 <log_string_sync>
		fota_state = NONE;
   30c5c:	2300      	movs	r3, #0
   30c5e:	4a11      	ldr	r2, [pc, #68]	; (30ca4 <http_fota_handler+0xe4>)
		(void)update_job_execution(c, job_id, AWS_JOBS_FAILED, "");
   30c60:	2103      	movs	r1, #3
		fota_state = NONE;
   30c62:	7013      	strb	r3, [r2, #0]
		execution_state = AWS_JOBS_QUEUED;
   30c64:	4a11      	ldr	r2, [pc, #68]	; (30cac <http_fota_handler+0xec>)
		(void)update_job_execution(c, job_id, AWS_JOBS_FAILED, "");
   30c66:	6820      	ldr	r0, [r4, #0]
		execution_state = AWS_JOBS_QUEUED;
   30c68:	7013      	strb	r3, [r2, #0]
		(void)update_job_execution(c, job_id, AWS_JOBS_FAILED, "");
   30c6a:	f7ff ff5d 	bl	30b28 <update_job_execution.constprop.0>
		aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
   30c6e:	2302      	movs	r3, #2
   30c70:	e7e3      	b.n	30c3a <http_fota_handler+0x7a>
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
   30c72:	2205      	movs	r2, #5
		download_progress = evt->progress;
   30c74:	686b      	ldr	r3, [r5, #4]
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
   30c76:	f88d 2000 	strb.w	r2, [sp]
		aws_fota_evt.dl.progress = download_progress;
   30c7a:	9301      	str	r3, [sp, #4]
   30c7c:	e7df      	b.n	30c3e <http_fota_handler+0x7e>
   30c7e:	bf00      	nop
   30c80:	2002550c 	.word	0x2002550c
   30c84:	0004d883 	.word	0x0004d883
   30c88:	00048156 	.word	0x00048156
   30c8c:	0004d84c 	.word	0x0004d84c
   30c90:	000463bc 	.word	0x000463bc
   30c94:	000463ec 	.word	0x000463ec
   30c98:	0004d894 	.word	0x0004d894
   30c9c:	0004ddab 	.word	0x0004ddab
   30ca0:	20025510 	.word	0x20025510
   30ca4:	2002ce6a 	.word	0x2002ce6a
   30ca8:	0004d8bd 	.word	0x0004d8bd
   30cac:	2002cd6a 	.word	0x2002cd6a

00030cb0 <get_published_payload.constprop.0>:
	if (length > sizeof(payload_buf)) {
   30cb0:	f240 5346 	movw	r3, #1350	; 0x546
static int get_published_payload(struct mqtt_client *client, uint8_t *write_buf,
   30cb4:	b570      	push	{r4, r5, r6, lr}
	uint8_t *end = buf + length;
   30cb6:	4c0d      	ldr	r4, [pc, #52]	; (30cec <get_published_payload.constprop.0+0x3c>)
	if (length > sizeof(payload_buf)) {
   30cb8:	4299      	cmp	r1, r3
static int get_published_payload(struct mqtt_client *client, uint8_t *write_buf,
   30cba:	4605      	mov	r5, r0
	uint8_t *end = buf + length;
   30cbc:	eb04 0601 	add.w	r6, r4, r1
	if (length > sizeof(payload_buf)) {
   30cc0:	d80d      	bhi.n	30cde <get_published_payload.constprop.0+0x2e>
	while (buf < end) {
   30cc2:	42a6      	cmp	r6, r4
   30cc4:	d801      	bhi.n	30cca <get_published_payload.constprop.0+0x1a>
	return 0;
   30cc6:	2000      	movs	r0, #0
}
   30cc8:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buf,
   30cca:	4621      	mov	r1, r4
   30ccc:	4628      	mov	r0, r5
   30cce:	1b32      	subs	r2, r6, r4
   30cd0:	f012 fa91 	bl	431f6 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   30cd4:	2800      	cmp	r0, #0
   30cd6:	dbf7      	blt.n	30cc8 <get_published_payload.constprop.0+0x18>
		} else if (ret == 0) {
   30cd8:	d004      	beq.n	30ce4 <get_published_payload.constprop.0+0x34>
		buf += ret;
   30cda:	4404      	add	r4, r0
   30cdc:	e7f1      	b.n	30cc2 <get_published_payload.constprop.0+0x12>
		return -EMSGSIZE;
   30cde:	f06f 0079 	mvn.w	r0, #121	; 0x79
   30ce2:	e7f1      	b.n	30cc8 <get_published_payload.constprop.0+0x18>
			return -EIO;
   30ce4:	f06f 0004 	mvn.w	r0, #4
   30ce8:	e7ee      	b.n	30cc8 <get_published_payload.constprop.0+0x18>
   30cea:	bf00      	nop
   30cec:	2002d0d5 	.word	0x2002d0d5

00030cf0 <aws_fota_mqtt_evt_handler>:
{
   30cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30cf4:	b08b      	sub	sp, #44	; 0x2c
   30cf6:	780b      	ldrb	r3, [r1, #0]
   30cf8:	4605      	mov	r5, r0
   30cfa:	468a      	mov	sl, r1
   30cfc:	af02      	add	r7, sp, #8
   30cfe:	2b07      	cmp	r3, #7
   30d00:	d80b      	bhi.n	30d1a <aws_fota_mqtt_evt_handler+0x2a>
   30d02:	e8df f013 	tbh	[pc, r3, lsl #1]
   30d06:	0008      	.short	0x0008
   30d08:	0074000a 	.word	0x0074000a
   30d0c:	000a0275 	.word	0x000a0275
   30d10:	000a000a 	.word	0x000a000a
   30d14:	0285      	.short	0x0285
		if (evt->result != 0) {
   30d16:	69cb      	ldr	r3, [r1, #28]
   30d18:	b10b      	cbz	r3, 30d1e <aws_fota_mqtt_evt_handler+0x2e>
			return err;
   30d1a:	2401      	movs	r4, #1
   30d1c:	e010      	b.n	30d40 <aws_fota_mqtt_evt_handler+0x50>
		if (IS_ENABLED(CONFIG_MQTT_CLEAN_SESSION) ||
   30d1e:	790b      	ldrb	r3, [r1, #4]
   30d20:	bb13      	cbnz	r3, 30d68 <aws_fota_mqtt_evt_handler+0x78>
			err = aws_jobs_subscribe_topic_notify_next(client,
   30d22:	49b0      	ldr	r1, [pc, #704]	; (30fe4 <aws_fota_mqtt_evt_handler+0x2f4>)
   30d24:	f7ff fe50 	bl	309c8 <aws_jobs_subscribe_topic_notify_next>
			if (err) {
   30d28:	4604      	mov	r4, r0
   30d2a:	b170      	cbz	r0, 30d4a <aws_fota_mqtt_evt_handler+0x5a>
   30d2c:	48ae      	ldr	r0, [pc, #696]	; (30fe8 <aws_fota_mqtt_evt_handler+0x2f8>)
   30d2e:	4baf      	ldr	r3, [pc, #700]	; (30fec <aws_fota_mqtt_evt_handler+0x2fc>)
				LOG_ERR("Unable to subscribe to"
   30d30:	49af      	ldr	r1, [pc, #700]	; (30ff0 <aws_fota_mqtt_evt_handler+0x300>)
   30d32:	1ac0      	subs	r0, r0, r3
   30d34:	08c0      	lsrs	r0, r0, #3
   30d36:	0180      	lsls	r0, r0, #6
				LOG_ERR("Unable to subscribe to"
   30d38:	f040 0001 	orr.w	r0, r0, #1
   30d3c:	f010 fd70 	bl	41820 <log_string_sync>
}
   30d40:	4620      	mov	r0, r4
   30d42:	3724      	adds	r7, #36	; 0x24
   30d44:	46bd      	mov	sp, r7
   30d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			err = aws_jobs_subscribe_topic_get(client, "$next",
   30d4a:	4628      	mov	r0, r5
   30d4c:	4aa9      	ldr	r2, [pc, #676]	; (30ff4 <aws_fota_mqtt_evt_handler+0x304>)
   30d4e:	49aa      	ldr	r1, [pc, #680]	; (30ff8 <aws_fota_mqtt_evt_handler+0x308>)
   30d50:	f7ff fe58 	bl	30a04 <aws_jobs_subscribe_topic_get>
			if (err) {
   30d54:	4604      	mov	r4, r0
   30d56:	2800      	cmp	r0, #0
   30d58:	d0df      	beq.n	30d1a <aws_fota_mqtt_evt_handler+0x2a>
   30d5a:	48a3      	ldr	r0, [pc, #652]	; (30fe8 <aws_fota_mqtt_evt_handler+0x2f8>)
   30d5c:	4ba3      	ldr	r3, [pc, #652]	; (30fec <aws_fota_mqtt_evt_handler+0x2fc>)
				LOG_ERR("Unable to subscribe to"
   30d5e:	49a7      	ldr	r1, [pc, #668]	; (30ffc <aws_fota_mqtt_evt_handler+0x30c>)
   30d60:	1ac0      	subs	r0, r0, r3
   30d62:	08c0      	lsrs	r0, r0, #3
   30d64:	0180      	lsls	r0, r0, #6
   30d66:	e7e7      	b.n	30d38 <aws_fota_mqtt_evt_handler+0x48>
   30d68:	4ba0      	ldr	r3, [pc, #640]	; (30fec <aws_fota_mqtt_evt_handler+0x2fc>)
   30d6a:	4e9f      	ldr	r6, [pc, #636]	; (30fe8 <aws_fota_mqtt_evt_handler+0x2f8>)
			LOG_DBG("Previous session valid;"
   30d6c:	4aa4      	ldr	r2, [pc, #656]	; (31000 <aws_fota_mqtt_evt_handler+0x310>)
   30d6e:	1af6      	subs	r6, r6, r3
   30d70:	08f6      	lsrs	r6, r6, #3
   30d72:	01b6      	lsls	r6, r6, #6
   30d74:	f046 0804 	orr.w	r8, r6, #4
   30d78:	4640      	mov	r0, r8
   30d7a:	49a2      	ldr	r1, [pc, #648]	; (31004 <aws_fota_mqtt_evt_handler+0x314>)
   30d7c:	f010 fd50 	bl	41820 <log_string_sync>
			err = aws_jobs_create_topic_notify_next(client,
   30d80:	4628      	mov	r0, r5
   30d82:	4998      	ldr	r1, [pc, #608]	; (30fe4 <aws_fota_mqtt_evt_handler+0x2f4>)
   30d84:	f7ff fe0e 	bl	309a4 <aws_jobs_create_topic_notify_next>
			if (err) {
   30d88:	4604      	mov	r4, r0
   30d8a:	b130      	cbz	r0, 30d9a <aws_fota_mqtt_evt_handler+0xaa>
				LOG_ERR("Error when creating topic: %d", err);
   30d8c:	4622      	mov	r2, r4
   30d8e:	499e      	ldr	r1, [pc, #632]	; (31008 <aws_fota_mqtt_evt_handler+0x318>)
				LOG_ERR("Error when publishing: %d", err);
   30d90:	f046 0001 	orr.w	r0, r6, #1
			LOG_DBG("subscribed to get topic");
   30d94:	f010 fd44 	bl	41820 <log_string_sync>
			return 0;
   30d98:	e7d2      	b.n	30d40 <aws_fota_mqtt_evt_handler+0x50>
			LOG_DBG("Created notify_next_topic %s",
   30d9a:	4892      	ldr	r0, [pc, #584]	; (30fe4 <aws_fota_mqtt_evt_handler+0x2f4>)
   30d9c:	f010 fd53 	bl	41846 <log_strdup>
   30da0:	4a97      	ldr	r2, [pc, #604]	; (31000 <aws_fota_mqtt_evt_handler+0x310>)
   30da2:	4603      	mov	r3, r0
   30da4:	4999      	ldr	r1, [pc, #612]	; (3100c <aws_fota_mqtt_evt_handler+0x31c>)
   30da6:	4640      	mov	r0, r8
   30da8:	f010 fd3a 	bl	41820 <log_string_sync>
			err = aws_jobs_create_topic_get(client, "$next",
   30dac:	4628      	mov	r0, r5
   30dae:	4a91      	ldr	r2, [pc, #580]	; (30ff4 <aws_fota_mqtt_evt_handler+0x304>)
   30db0:	4991      	ldr	r1, [pc, #580]	; (30ff8 <aws_fota_mqtt_evt_handler+0x308>)
   30db2:	f7ff fe17 	bl	309e4 <aws_jobs_create_topic_get>
			if (err) {
   30db6:	4604      	mov	r4, r0
   30db8:	2800      	cmp	r0, #0
   30dba:	d1e7      	bne.n	30d8c <aws_fota_mqtt_evt_handler+0x9c>
			LOG_DBG("Created get_topic %s", log_strdup(get_topic));
   30dbc:	488d      	ldr	r0, [pc, #564]	; (30ff4 <aws_fota_mqtt_evt_handler+0x304>)
   30dbe:	f010 fd42 	bl	41846 <log_strdup>
   30dc2:	4a8f      	ldr	r2, [pc, #572]	; (31000 <aws_fota_mqtt_evt_handler+0x310>)
   30dc4:	4603      	mov	r3, r0
   30dc6:	4992      	ldr	r1, [pc, #584]	; (31010 <aws_fota_mqtt_evt_handler+0x320>)
   30dc8:	4640      	mov	r0, r8
   30dca:	f010 fd29 	bl	41820 <log_string_sync>
			LOG_DBG("previously subscribed to notify-next topic");
   30dce:	4640      	mov	r0, r8
   30dd0:	4a8b      	ldr	r2, [pc, #556]	; (31000 <aws_fota_mqtt_evt_handler+0x310>)
   30dd2:	4990      	ldr	r1, [pc, #576]	; (31014 <aws_fota_mqtt_evt_handler+0x324>)
   30dd4:	f010 fd24 	bl	41820 <log_string_sync>
			err = aws_jobs_get_job_execution(client, "$next",
   30dd8:	4628      	mov	r0, r5
   30dda:	4a86      	ldr	r2, [pc, #536]	; (30ff4 <aws_fota_mqtt_evt_handler+0x304>)
   30ddc:	4986      	ldr	r1, [pc, #536]	; (30ff8 <aws_fota_mqtt_evt_handler+0x308>)
   30dde:	f7ff fe8b 	bl	30af8 <aws_jobs_get_job_execution>
			if (err) {
   30de2:	4604      	mov	r4, r0
   30de4:	2800      	cmp	r0, #0
   30de6:	d098      	beq.n	30d1a <aws_fota_mqtt_evt_handler+0x2a>
				LOG_ERR("Error when publishing: %d", err);
   30de8:	4602      	mov	r2, r0
   30dea:	498b      	ldr	r1, [pc, #556]	; (31018 <aws_fota_mqtt_evt_handler+0x328>)
   30dec:	e7d0      	b.n	30d90 <aws_fota_mqtt_evt_handler+0xa0>
		err = on_publish_evt(client,
   30dee:	e9d1 1601 	ldrd	r1, r6, [r1, #4]
		aws_jobs_cmp(get_topic, topic, topic_len, "");
   30df2:	4b8a      	ldr	r3, [pc, #552]	; (3101c <aws_fota_mqtt_evt_handler+0x32c>)
   30df4:	4632      	mov	r2, r6
   30df6:	487f      	ldr	r0, [pc, #508]	; (30ff4 <aws_fota_mqtt_evt_handler+0x304>)
   30df8:	6179      	str	r1, [r7, #20]
		err = on_publish_evt(client,
   30dfa:	f8da 8014 	ldr.w	r8, [sl, #20]
		aws_jobs_cmp(get_topic, topic, topic_len, "");
   30dfe:	f013 fcc3 	bl	44788 <aws_jobs_cmp>
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   30e02:	4632      	mov	r2, r6
   30e04:	4b86      	ldr	r3, [pc, #536]	; (31020 <aws_fota_mqtt_evt_handler+0x330>)
   30e06:	6979      	ldr	r1, [r7, #20]
		aws_jobs_cmp(get_topic, topic, topic_len, "");
   30e08:	6138      	str	r0, [r7, #16]
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   30e0a:	487a      	ldr	r0, [pc, #488]	; (30ff4 <aws_fota_mqtt_evt_handler+0x304>)
   30e0c:	f013 fcbc 	bl	44788 <aws_jobs_cmp>
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   30e10:	4632      	mov	r2, r6
   30e12:	4b82      	ldr	r3, [pc, #520]	; (3101c <aws_fota_mqtt_evt_handler+0x32c>)
   30e14:	6979      	ldr	r1, [r7, #20]
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   30e16:	60f8      	str	r0, [r7, #12]
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   30e18:	4872      	ldr	r0, [pc, #456]	; (30fe4 <aws_fota_mqtt_evt_handler+0x2f4>)
   30e1a:	f013 fcb5 	bl	44788 <aws_jobs_cmp>
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   30e1e:	4632      	mov	r2, r6
   30e20:	4b7f      	ldr	r3, [pc, #508]	; (31020 <aws_fota_mqtt_evt_handler+0x330>)
   30e22:	6979      	ldr	r1, [r7, #20]
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   30e24:	60b8      	str	r0, [r7, #8]
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   30e26:	487f      	ldr	r0, [pc, #508]	; (31024 <aws_fota_mqtt_evt_handler+0x334>)
   30e28:	f013 fcae 	bl	44788 <aws_jobs_cmp>
		aws_jobs_cmp(update_topic, topic, topic_len, "rejected");
   30e2c:	4632      	mov	r2, r6
   30e2e:	4b7e      	ldr	r3, [pc, #504]	; (31028 <aws_fota_mqtt_evt_handler+0x338>)
   30e30:	6979      	ldr	r1, [r7, #20]
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   30e32:	4681      	mov	r9, r0
		aws_jobs_cmp(update_topic, topic, topic_len, "rejected");
   30e34:	487b      	ldr	r0, [pc, #492]	; (31024 <aws_fota_mqtt_evt_handler+0x334>)
   30e36:	f013 fca7 	bl	44788 <aws_jobs_cmp>
	char debug_log[topic_len + 1];
   30e3a:	f106 0308 	add.w	r3, r6, #8
   30e3e:	f023 0307 	bic.w	r3, r3, #7
{
   30e42:	46eb      	mov	fp, sp
	char debug_log[topic_len + 1];
   30e44:	ebad 0d03 	sub.w	sp, sp, r3
   30e48:	ac02      	add	r4, sp, #8
   30e4a:	4632      	mov	r2, r6
   30e4c:	6979      	ldr	r1, [r7, #20]
		aws_jobs_cmp(update_topic, topic, topic_len, "rejected");
   30e4e:	6078      	str	r0, [r7, #4]
   30e50:	4620      	mov	r0, r4
   30e52:	f013 ff48 	bl	44ce6 <memcpy>
	debug_log[topic_len] = '\0';
   30e56:	2300      	movs	r3, #0
   30e58:	4a64      	ldr	r2, [pc, #400]	; (30fec <aws_fota_mqtt_evt_handler+0x2fc>)
   30e5a:	55a3      	strb	r3, [r4, r6]
   30e5c:	4b62      	ldr	r3, [pc, #392]	; (30fe8 <aws_fota_mqtt_evt_handler+0x2f8>)
	LOG_DBG("Received topic: %s", log_strdup(debug_log));
   30e5e:	4620      	mov	r0, r4
   30e60:	1a9b      	subs	r3, r3, r2
   30e62:	08db      	lsrs	r3, r3, #3
   30e64:	019b      	lsls	r3, r3, #6
   30e66:	f043 0604 	orr.w	r6, r3, #4
   30e6a:	617b      	str	r3, [r7, #20]
   30e6c:	f010 fceb 	bl	41846 <log_strdup>
   30e70:	4a6e      	ldr	r2, [pc, #440]	; (3102c <aws_fota_mqtt_evt_handler+0x33c>)
   30e72:	4603      	mov	r3, r0
   30e74:	496e      	ldr	r1, [pc, #440]	; (31030 <aws_fota_mqtt_evt_handler+0x340>)
   30e76:	4630      	mov	r0, r6
   30e78:	f010 fcd2 	bl	41820 <log_string_sync>
	if (is_notify_next_topic || is_get_next_topic || is_get_accepted) {
   30e7c:	68bb      	ldr	r3, [r7, #8]
   30e7e:	b92b      	cbnz	r3, 30e8c <aws_fota_mqtt_evt_handler+0x19c>
   30e80:	693b      	ldr	r3, [r7, #16]
   30e82:	b91b      	cbnz	r3, 30e8c <aws_fota_mqtt_evt_handler+0x19c>
   30e84:	68fb      	ldr	r3, [r7, #12]
   30e86:	2b00      	cmp	r3, #0
   30e88:	f000 8098 	beq.w	30fbc <aws_fota_mqtt_evt_handler+0x2cc>
		LOG_DBG("Checking for an available job");
   30e8c:	697b      	ldr	r3, [r7, #20]
   30e8e:	4a67      	ldr	r2, [pc, #412]	; (3102c <aws_fota_mqtt_evt_handler+0x33c>)
   30e90:	f043 0604 	orr.w	r6, r3, #4
   30e94:	4630      	mov	r0, r6
   30e96:	4967      	ldr	r1, [pc, #412]	; (31034 <aws_fota_mqtt_evt_handler+0x344>)
   30e98:	f010 fcc2 	bl	41820 <log_string_sync>
	int err = get_published_payload(client, payload_buf, payload_len);
   30e9c:	4641      	mov	r1, r8
   30e9e:	4628      	mov	r0, r5
   30ea0:	f7ff ff06 	bl	30cb0 <get_published_payload.constprop.0>
{
   30ea4:	46e9      	mov	r9, sp
	if (err) {
   30ea6:	4604      	mov	r4, r0
   30ea8:	b170      	cbz	r0, 30ec8 <aws_fota_mqtt_evt_handler+0x1d8>
		LOG_ERR("Error when getting the payload: %d", err);
   30eaa:	4602      	mov	r2, r0
   30eac:	4962      	ldr	r1, [pc, #392]	; (31038 <aws_fota_mqtt_evt_handler+0x348>)
		LOG_ERR("Error when subscribing job_id_update: "
   30eae:	697b      	ldr	r3, [r7, #20]
   30eb0:	f043 0001 	orr.w	r0, r3, #1
   30eb4:	f010 fcb4 	bl	41820 <log_string_sync>
		return err;
   30eb8:	46cd      	mov	sp, r9
		if (err < 0) {
   30eba:	2c00      	cmp	r4, #0
   30ebc:	46dd      	mov	sp, fp
   30ebe:	f6ff af3f 	blt.w	30d40 <aws_fota_mqtt_evt_handler+0x50>
		} else if (err == 1) {
   30ec2:	2c01      	cmp	r4, #1
   30ec4:	d16a      	bne.n	30f9c <aws_fota_mqtt_evt_handler+0x2ac>
   30ec6:	e728      	b.n	30d1a <aws_fota_mqtt_evt_handler+0x2a>
	char job_doc[payload_len + 1];
   30ec8:	f108 0308 	add.w	r3, r8, #8
   30ecc:	f023 0307 	bic.w	r3, r3, #7
   30ed0:	ebad 0d03 	sub.w	sp, sp, r3
   30ed4:	ab02      	add	r3, sp, #8
   30ed6:	4642      	mov	r2, r8
   30ed8:	4618      	mov	r0, r3
   30eda:	4958      	ldr	r1, [pc, #352]	; (3103c <aws_fota_mqtt_evt_handler+0x34c>)
   30edc:	f013 ff03 	bl	44ce6 <memcpy>
	job_doc[payload_len] = '\0';
   30ee0:	f800 4008 	strb.w	r4, [r0, r8]
	LOG_DBG("Job doc: %s", log_strdup(job_doc));
   30ee4:	f010 fcaf 	bl	41846 <log_strdup>
   30ee8:	4a55      	ldr	r2, [pc, #340]	; (31040 <aws_fota_mqtt_evt_handler+0x350>)
   30eea:	4603      	mov	r3, r0
   30eec:	4955      	ldr	r1, [pc, #340]	; (31044 <aws_fota_mqtt_evt_handler+0x354>)
   30eee:	4630      	mov	r0, r6
   30ef0:	f010 fc96 	bl	41820 <log_string_sync>
	err = aws_fota_parse_DescribeJobExecution_rsp(payload_buf, payload_len,
   30ef4:	4b54      	ldr	r3, [pc, #336]	; (31048 <aws_fota_mqtt_evt_handler+0x358>)
   30ef6:	4641      	mov	r1, r8
   30ef8:	9301      	str	r3, [sp, #4]
   30efa:	4b54      	ldr	r3, [pc, #336]	; (3104c <aws_fota_mqtt_evt_handler+0x35c>)
   30efc:	4a54      	ldr	r2, [pc, #336]	; (31050 <aws_fota_mqtt_evt_handler+0x360>)
   30efe:	9300      	str	r3, [sp, #0]
   30f00:	484e      	ldr	r0, [pc, #312]	; (3103c <aws_fota_mqtt_evt_handler+0x34c>)
   30f02:	4b54      	ldr	r3, [pc, #336]	; (31054 <aws_fota_mqtt_evt_handler+0x364>)
   30f04:	f000 fa26 	bl	31354 <aws_fota_parse_DescribeJobExecution_rsp>
	if (err < 0) {
   30f08:	1e04      	subs	r4, r0, #0
   30f0a:	da02      	bge.n	30f12 <aws_fota_mqtt_evt_handler+0x222>
		LOG_ERR("Error when parsing the json: %d", err);
   30f0c:	4622      	mov	r2, r4
   30f0e:	4952      	ldr	r1, [pc, #328]	; (31058 <aws_fota_mqtt_evt_handler+0x368>)
   30f10:	e7cd      	b.n	30eae <aws_fota_mqtt_evt_handler+0x1be>
	} else if (err == 0) {
   30f12:	d10a      	bne.n	30f2a <aws_fota_mqtt_evt_handler+0x23a>
		LOG_DBG("Got only one field");
   30f14:	4a4a      	ldr	r2, [pc, #296]	; (31040 <aws_fota_mqtt_evt_handler+0x350>)
   30f16:	4951      	ldr	r1, [pc, #324]	; (3105c <aws_fota_mqtt_evt_handler+0x36c>)
   30f18:	4630      	mov	r0, r6
   30f1a:	f010 fc81 	bl	41820 <log_string_sync>
		LOG_DBG("No queued jobs for this device");
   30f1e:	4a48      	ldr	r2, [pc, #288]	; (31040 <aws_fota_mqtt_evt_handler+0x350>)
   30f20:	494f      	ldr	r1, [pc, #316]	; (31060 <aws_fota_mqtt_evt_handler+0x370>)
		LOG_DBG("Ready to reboot");
   30f22:	4630      	mov	r0, r6
   30f24:	f010 fc7c 	bl	41820 <log_string_sync>
   30f28:	e037      	b.n	30f9a <aws_fota_mqtt_evt_handler+0x2aa>
	LOG_DBG("Job ID: %s", log_strdup(job_id));
   30f2a:	4849      	ldr	r0, [pc, #292]	; (31050 <aws_fota_mqtt_evt_handler+0x360>)
   30f2c:	f010 fc8b 	bl	41846 <log_strdup>
   30f30:	4a43      	ldr	r2, [pc, #268]	; (31040 <aws_fota_mqtt_evt_handler+0x350>)
   30f32:	4603      	mov	r3, r0
   30f34:	494b      	ldr	r1, [pc, #300]	; (31064 <aws_fota_mqtt_evt_handler+0x374>)
   30f36:	4630      	mov	r0, r6
   30f38:	f010 fc72 	bl	41820 <log_string_sync>
	LOG_DBG("hostname: %s", log_strdup(hostname));
   30f3c:	4845      	ldr	r0, [pc, #276]	; (31054 <aws_fota_mqtt_evt_handler+0x364>)
   30f3e:	f010 fc82 	bl	41846 <log_strdup>
   30f42:	4a3f      	ldr	r2, [pc, #252]	; (31040 <aws_fota_mqtt_evt_handler+0x350>)
   30f44:	4603      	mov	r3, r0
   30f46:	4948      	ldr	r1, [pc, #288]	; (31068 <aws_fota_mqtt_evt_handler+0x378>)
   30f48:	4630      	mov	r0, r6
   30f4a:	f010 fc69 	bl	41820 <log_string_sync>
	LOG_DBG("file_path %s", log_strdup(file_path));
   30f4e:	483f      	ldr	r0, [pc, #252]	; (3104c <aws_fota_mqtt_evt_handler+0x35c>)
   30f50:	f010 fc79 	bl	41846 <log_strdup>
   30f54:	4a3a      	ldr	r2, [pc, #232]	; (31040 <aws_fota_mqtt_evt_handler+0x350>)
   30f56:	4603      	mov	r3, r0
   30f58:	4944      	ldr	r1, [pc, #272]	; (3106c <aws_fota_mqtt_evt_handler+0x37c>)
   30f5a:	4630      	mov	r0, r6
   30f5c:	f010 fc60 	bl	41820 <log_string_sync>
	LOG_DBG("execution_version_number: %d ", execution_version_number);
   30f60:	4b39      	ldr	r3, [pc, #228]	; (31048 <aws_fota_mqtt_evt_handler+0x358>)
   30f62:	4630      	mov	r0, r6
   30f64:	681b      	ldr	r3, [r3, #0]
   30f66:	4a36      	ldr	r2, [pc, #216]	; (31040 <aws_fota_mqtt_evt_handler+0x350>)
   30f68:	4941      	ldr	r1, [pc, #260]	; (31070 <aws_fota_mqtt_evt_handler+0x380>)
   30f6a:	f010 fc59 	bl	41820 <log_string_sync>
	err = aws_jobs_subscribe_topic_update(client, job_id, update_topic);
   30f6e:	4628      	mov	r0, r5
   30f70:	4a2c      	ldr	r2, [pc, #176]	; (31024 <aws_fota_mqtt_evt_handler+0x334>)
   30f72:	4937      	ldr	r1, [pc, #220]	; (31050 <aws_fota_mqtt_evt_handler+0x360>)
   30f74:	f7ff fd54 	bl	30a20 <aws_jobs_subscribe_topic_update>
	if (err) {
   30f78:	4604      	mov	r4, r0
   30f7a:	b110      	cbz	r0, 30f82 <aws_fota_mqtt_evt_handler+0x292>
		LOG_ERR("Error when subscribing job_id_update: "
   30f7c:	4602      	mov	r2, r0
   30f7e:	493d      	ldr	r1, [pc, #244]	; (31074 <aws_fota_mqtt_evt_handler+0x384>)
   30f80:	e795      	b.n	30eae <aws_fota_mqtt_evt_handler+0x1be>
	LOG_DBG("Subscribed to FOTA update topic %s", log_strdup(update_topic));
   30f82:	4828      	ldr	r0, [pc, #160]	; (31024 <aws_fota_mqtt_evt_handler+0x334>)
   30f84:	f010 fc5f 	bl	41846 <log_strdup>
   30f88:	4a2d      	ldr	r2, [pc, #180]	; (31040 <aws_fota_mqtt_evt_handler+0x350>)
   30f8a:	4603      	mov	r3, r0
   30f8c:	493a      	ldr	r1, [pc, #232]	; (31078 <aws_fota_mqtt_evt_handler+0x388>)
   30f8e:	4630      	mov	r0, r6
   30f90:	f010 fc46 	bl	41820 <log_string_sync>
	fota_state = DOWNLOAD_FIRMWARE;
   30f94:	2201      	movs	r2, #1
   30f96:	4b39      	ldr	r3, [pc, #228]	; (3107c <aws_fota_mqtt_evt_handler+0x38c>)
   30f98:	701a      	strb	r2, [r3, #0]
		LOG_DBG("Ready to reboot");
   30f9a:	46dd      	mov	sp, fp
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   30f9c:	f89a 300c 	ldrb.w	r3, [sl, #12]
   30fa0:	2b01      	cmp	r3, #1
   30fa2:	f040 8133 	bne.w	3120c <aws_fota_mqtt_evt_handler+0x51c>
			const struct mqtt_puback_param ack = {
   30fa6:	f8ba 3018 	ldrh.w	r3, [sl, #24]
			err = mqtt_publish_qos1_ack(c, &ack);
   30faa:	f107 0118 	add.w	r1, r7, #24
			const struct mqtt_puback_param ack = {
   30fae:	833b      	strh	r3, [r7, #24]
			err = mqtt_publish_qos1_ack(c, &ack);
   30fb0:	4b33      	ldr	r3, [pc, #204]	; (31080 <aws_fota_mqtt_evt_handler+0x390>)
   30fb2:	6818      	ldr	r0, [r3, #0]
   30fb4:	f011 fff7 	bl	42fa6 <mqtt_publish_qos1_ack>
			err = update_job_execution(client, job_id,
   30fb8:	4604      	mov	r4, r0
			if (err) {
   30fba:	e6c1      	b.n	30d40 <aws_fota_mqtt_evt_handler+0x50>
	} else if (doc_update_accepted) {
   30fbc:	f1b9 0f00 	cmp.w	r9, #0
   30fc0:	f000 80db 	beq.w	3117a <aws_fota_mqtt_evt_handler+0x48a>
	int err = get_published_payload(client, payload_buf, payload_len);
   30fc4:	4641      	mov	r1, r8
   30fc6:	4628      	mov	r0, r5
   30fc8:	f7ff fe72 	bl	30cb0 <get_published_payload.constprop.0>
	if (err) {
   30fcc:	4604      	mov	r4, r0
   30fce:	2800      	cmp	r0, #0
   30fd0:	d058      	beq.n	31084 <aws_fota_mqtt_evt_handler+0x394>
		LOG_ERR("Error when getting the payload: %d", err);
   30fd2:	697b      	ldr	r3, [r7, #20]
   30fd4:	4918      	ldr	r1, [pc, #96]	; (31038 <aws_fota_mqtt_evt_handler+0x348>)
   30fd6:	4602      	mov	r2, r0
   30fd8:	f043 0001 	orr.w	r0, r3, #1
		LOG_ERR("Error %d when getting the payload", err);
   30fdc:	f010 fc20 	bl	41820 <log_string_sync>
		return job_update_rejected(client, payload_len);
   30fe0:	e76b      	b.n	30eba <aws_fota_mqtt_evt_handler+0x1ca>
   30fe2:	bf00      	nop
   30fe4:	2002d040 	.word	0x2002d040
   30fe8:	000463ec 	.word	0x000463ec
   30fec:	000463bc 	.word	0x000463bc
   30ff0:	0004d8df 	.word	0x0004d8df
   30ff4:	2002ce6b 	.word	0x2002ce6b
   30ff8:	0004d908 	.word	0x0004d908
   30ffc:	0004d90e 	.word	0x0004d90e
   31000:	0004dd91 	.word	0x0004dd91
   31004:	0004d934 	.word	0x0004d934
   31008:	0004d96c 	.word	0x0004d96c
   3100c:	0004d98a 	.word	0x0004d98a
   31010:	0004d9ab 	.word	0x0004d9ab
   31014:	0004d9c4 	.word	0x0004d9c4
   31018:	0004d9f3 	.word	0x0004d9f3
   3101c:	00049048 	.word	0x00049048
   31020:	0004c4c1 	.word	0x0004c4c1
   31024:	2002d61b 	.word	0x2002d61b
   31028:	0004dc68 	.word	0x0004dc68
   3102c:	0004dd82 	.word	0x0004dd82
   31030:	0004da0d 	.word	0x0004da0d
   31034:	0004da24 	.word	0x0004da24
   31038:	0004da46 	.word	0x0004da46
   3103c:	2002d0d5 	.word	0x2002d0d5
   31040:	0004dd5c 	.word	0x0004dd5c
   31044:	0004da69 	.word	0x0004da69
   31048:	20025514 	.word	0x20025514
   3104c:	2002cd6b 	.word	0x2002cd6b
   31050:	2002cfff 	.word	0x2002cfff
   31054:	2002cf00 	.word	0x2002cf00
   31058:	0004da79 	.word	0x0004da79
   3105c:	0004da99 	.word	0x0004da99
   31060:	0004dab0 	.word	0x0004dab0
   31064:	0004dad3 	.word	0x0004dad3
   31068:	0004dae2 	.word	0x0004dae2
   3106c:	0004daf3 	.word	0x0004daf3
   31070:	0004db04 	.word	0x0004db04
   31074:	0004db26 	.word	0x0004db26
   31078:	0004db4f 	.word	0x0004db4f
   3107c:	2002ce6a 	.word	0x2002ce6a
   31080:	2002550c 	.word	0x2002550c
	accepted = true;
   31084:	2101      	movs	r1, #1
	execution_version_number++;
   31086:	487c      	ldr	r0, [pc, #496]	; (31278 <aws_fota_mqtt_evt_handler+0x588>)
	if (execution_state != AWS_JOBS_IN_PROGRESS
   31088:	f8df 8258 	ldr.w	r8, [pc, #600]	; 312e4 <aws_fota_mqtt_evt_handler+0x5f4>
	execution_version_number++;
   3108c:	6803      	ldr	r3, [r0, #0]
	accepted = true;
   3108e:	4a7b      	ldr	r2, [pc, #492]	; (3127c <aws_fota_mqtt_evt_handler+0x58c>)
	execution_version_number++;
   31090:	440b      	add	r3, r1
   31092:	6003      	str	r3, [r0, #0]
	if (execution_state != AWS_JOBS_IN_PROGRESS
   31094:	f898 3000 	ldrb.w	r3, [r8]
   31098:	4879      	ldr	r0, [pc, #484]	; (31280 <aws_fota_mqtt_evt_handler+0x590>)
   3109a:	428b      	cmp	r3, r1
   3109c:	f890 9000 	ldrb.w	r9, [r0]
	accepted = true;
   310a0:	7011      	strb	r1, [r2, #0]
	if (execution_state != AWS_JOBS_IN_PROGRESS
   310a2:	d033      	beq.n	3110c <aws_fota_mqtt_evt_handler+0x41c>
	    && fota_state == DOWNLOAD_FIRMWARE) {
   310a4:	4589      	cmp	r9, r1
   310a6:	d14b      	bne.n	31140 <aws_fota_mqtt_evt_handler+0x450>
		LOG_DBG("Start downloading firmware from %s/%s",
   310a8:	4876      	ldr	r0, [pc, #472]	; (31284 <aws_fota_mqtt_evt_handler+0x594>)
		struct aws_fota_event aws_fota_evt = {
   310aa:	e9c7 4406 	strd	r4, r4, [r7, #24]
		execution_state = AWS_JOBS_IN_PROGRESS;
   310ae:	f888 9000 	strb.w	r9, [r8]
		LOG_DBG("Start downloading firmware from %s/%s",
   310b2:	f010 fbc8 	bl	41846 <log_strdup>
   310b6:	6138      	str	r0, [r7, #16]
   310b8:	4873      	ldr	r0, [pc, #460]	; (31288 <aws_fota_mqtt_evt_handler+0x598>)
   310ba:	f010 fbc4 	bl	41846 <log_strdup>
   310be:	9000      	str	r0, [sp, #0]
   310c0:	693b      	ldr	r3, [r7, #16]
   310c2:	4630      	mov	r0, r6
   310c4:	4a71      	ldr	r2, [pc, #452]	; (3128c <aws_fota_mqtt_evt_handler+0x59c>)
   310c6:	4972      	ldr	r1, [pc, #456]	; (31290 <aws_fota_mqtt_evt_handler+0x5a0>)
   310c8:	f010 fbaa 	bl	41820 <log_string_sync>
		err = fota_download_start(hostname, file_path, sec_tag, apn, 0);
   310cc:	f04f 32ff 	mov.w	r2, #4294967295
   310d0:	4623      	mov	r3, r4
   310d2:	496d      	ldr	r1, [pc, #436]	; (31288 <aws_fota_mqtt_evt_handler+0x598>)
   310d4:	486b      	ldr	r0, [pc, #428]	; (31284 <aws_fota_mqtt_evt_handler+0x594>)
   310d6:	9400      	str	r4, [sp, #0]
   310d8:	f7ff fb12 	bl	30700 <fota_download_start>
		if (err) {
   310dc:	4602      	mov	r2, r0
   310de:	b178      	cbz	r0, 31100 <aws_fota_mqtt_evt_handler+0x410>
			LOG_ERR("Error (%d) when trying to start firmware "
   310e0:	697b      	ldr	r3, [r7, #20]
   310e2:	496c      	ldr	r1, [pc, #432]	; (31294 <aws_fota_mqtt_evt_handler+0x5a4>)
   310e4:	f043 0001 	orr.w	r0, r3, #1
   310e8:	f010 fb9a 	bl	41820 <log_string_sync>
			execution_state = AWS_JOBS_FAILED;
   310ec:	2103      	movs	r1, #3
			err = update_job_execution(client, job_id,
   310ee:	4628      	mov	r0, r5
			execution_state = AWS_JOBS_FAILED;
   310f0:	f888 1000 	strb.w	r1, [r8]
			err = update_job_execution(client, job_id,
   310f4:	f7ff fd18 	bl	30b28 <update_job_execution.constprop.0>
			if (err) {
   310f8:	4604      	mov	r4, r0
   310fa:	2800      	cmp	r0, #0
   310fc:	f47f aedd 	bne.w	30eba <aws_fota_mqtt_evt_handler+0x1ca>
		callback(&aws_fota_evt);
   31100:	4b65      	ldr	r3, [pc, #404]	; (31298 <aws_fota_mqtt_evt_handler+0x5a8>)
   31102:	f107 0018 	add.w	r0, r7, #24
   31106:	681b      	ldr	r3, [r3, #0]
   31108:	4798      	blx	r3
   3110a:	e746      	b.n	30f9a <aws_fota_mqtt_evt_handler+0x2aa>
		   && fota_state == APPLY_UPDATE) {
   3110c:	f1b9 0f02 	cmp.w	r9, #2
   31110:	f47f af43 	bne.w	30f9a <aws_fota_mqtt_evt_handler+0x2aa>
		LOG_DBG("Firmware download completed");
   31114:	4630      	mov	r0, r6
   31116:	4a5d      	ldr	r2, [pc, #372]	; (3128c <aws_fota_mqtt_evt_handler+0x59c>)
   31118:	4960      	ldr	r1, [pc, #384]	; (3129c <aws_fota_mqtt_evt_handler+0x5ac>)
   3111a:	f010 fb81 	bl	41820 <log_string_sync>
		err = update_job_execution(client, job_id, execution_state, "");
   3111e:	4649      	mov	r1, r9
   31120:	4628      	mov	r0, r5
		execution_state = AWS_JOBS_SUCCEEDED;
   31122:	f888 9000 	strb.w	r9, [r8]
		err = update_job_execution(client, job_id, execution_state, "");
   31126:	f7ff fcff 	bl	30b28 <update_job_execution.constprop.0>
		if (err) {
   3112a:	4604      	mov	r4, r0
   3112c:	2800      	cmp	r0, #0
   3112e:	f43f af34 	beq.w	30f9a <aws_fota_mqtt_evt_handler+0x2aa>
			LOG_ERR("Unable to update the job execution");
   31132:	697b      	ldr	r3, [r7, #20]
   31134:	495a      	ldr	r1, [pc, #360]	; (312a0 <aws_fota_mqtt_evt_handler+0x5b0>)
   31136:	f043 0001 	orr.w	r0, r3, #1
   3113a:	f010 fb71 	bl	41820 <log_string_sync>
			return err;
   3113e:	e6bc      	b.n	30eba <aws_fota_mqtt_evt_handler+0x1ca>
	} else if (execution_state == AWS_JOBS_SUCCEEDED &&
   31140:	2b02      	cmp	r3, #2
   31142:	d113      	bne.n	3116c <aws_fota_mqtt_evt_handler+0x47c>
   31144:	f1b9 0f02 	cmp.w	r9, #2
   31148:	f47f af27 	bne.w	30f9a <aws_fota_mqtt_evt_handler+0x2aa>
		callback(&aws_fota_evt);
   3114c:	4b52      	ldr	r3, [pc, #328]	; (31298 <aws_fota_mqtt_evt_handler+0x5a8>)
		struct aws_fota_event aws_fota_evt = {
   3114e:	e9c7 4406 	strd	r4, r4, [r7, #24]
		callback(&aws_fota_evt);
   31152:	681b      	ldr	r3, [r3, #0]
		struct aws_fota_event aws_fota_evt = {
   31154:	7639      	strb	r1, [r7, #24]
		callback(&aws_fota_evt);
   31156:	f107 0018 	add.w	r0, r7, #24
   3115a:	4798      	blx	r3
		LOG_DBG("Job document updated with SUCCEDED");
   3115c:	4a4b      	ldr	r2, [pc, #300]	; (3128c <aws_fota_mqtt_evt_handler+0x59c>)
   3115e:	4951      	ldr	r1, [pc, #324]	; (312a4 <aws_fota_mqtt_evt_handler+0x5b4>)
   31160:	4630      	mov	r0, r6
   31162:	f010 fb5d 	bl	41820 <log_string_sync>
		LOG_DBG("Ready to reboot");
   31166:	4a49      	ldr	r2, [pc, #292]	; (3128c <aws_fota_mqtt_evt_handler+0x59c>)
   31168:	494f      	ldr	r1, [pc, #316]	; (312a8 <aws_fota_mqtt_evt_handler+0x5b8>)
   3116a:	e6da      	b.n	30f22 <aws_fota_mqtt_evt_handler+0x232>
	} else if (execution_state == AWS_JOBS_FAILED) {
   3116c:	2b03      	cmp	r3, #3
		fota_state = NONE;
   3116e:	bf02      	ittt	eq
   31170:	7004      	strbeq	r4, [r0, #0]
		execution_state = AWS_JOBS_QUEUED;
   31172:	f888 4000 	strbeq.w	r4, [r8]
		accepted = false;
   31176:	7014      	strbeq	r4, [r2, #0]
   31178:	e70f      	b.n	30f9a <aws_fota_mqtt_evt_handler+0x2aa>
	} else if (doc_update_rejected) {
   3117a:	687b      	ldr	r3, [r7, #4]
   3117c:	b36b      	cbz	r3, 311da <aws_fota_mqtt_evt_handler+0x4ea>
		LOG_ERR("Job document update was rejected");
   3117e:	697b      	ldr	r3, [r7, #20]
   31180:	494a      	ldr	r1, [pc, #296]	; (312ac <aws_fota_mqtt_evt_handler+0x5bc>)
   31182:	f043 0601 	orr.w	r6, r3, #1
   31186:	4630      	mov	r0, r6
   31188:	f010 fb4a 	bl	41820 <log_string_sync>
	struct aws_fota_event aws_fota_evt = { .id = AWS_FOTA_EVT_ERROR };
   3118c:	2302      	movs	r3, #2
	LOG_ERR("Job document update was rejected");
   3118e:	4630      	mov	r0, r6
   31190:	4946      	ldr	r1, [pc, #280]	; (312ac <aws_fota_mqtt_evt_handler+0x5bc>)
	struct aws_fota_event aws_fota_evt = { .id = AWS_FOTA_EVT_ERROR };
   31192:	e9c7 9906 	strd	r9, r9, [r7, #24]
   31196:	763b      	strb	r3, [r7, #24]
	LOG_ERR("Job document update was rejected");
   31198:	f010 fb42 	bl	41820 <log_string_sync>
	execution_version_number--;
   3119c:	4a36      	ldr	r2, [pc, #216]	; (31278 <aws_fota_mqtt_evt_handler+0x588>)
	int err = get_published_payload(client, payload_buf, payload_len);
   3119e:	4641      	mov	r1, r8
	execution_version_number--;
   311a0:	6813      	ldr	r3, [r2, #0]
	int err = get_published_payload(client, payload_buf, payload_len);
   311a2:	4628      	mov	r0, r5
	execution_version_number--;
   311a4:	3b01      	subs	r3, #1
   311a6:	6013      	str	r3, [r2, #0]
	int err = get_published_payload(client, payload_buf, payload_len);
   311a8:	f7ff fd82 	bl	30cb0 <get_published_payload.constprop.0>
	if (err) {
   311ac:	4604      	mov	r4, r0
   311ae:	b118      	cbz	r0, 311b8 <aws_fota_mqtt_evt_handler+0x4c8>
		LOG_ERR("Error %d when getting the payload", err);
   311b0:	4602      	mov	r2, r0
   311b2:	493f      	ldr	r1, [pc, #252]	; (312b0 <aws_fota_mqtt_evt_handler+0x5c0>)
   311b4:	4630      	mov	r0, r6
   311b6:	e711      	b.n	30fdc <aws_fota_mqtt_evt_handler+0x2ec>
	LOG_ERR("%s", log_strdup(payload_buf));
   311b8:	483e      	ldr	r0, [pc, #248]	; (312b4 <aws_fota_mqtt_evt_handler+0x5c4>)
   311ba:	f010 fb44 	bl	41846 <log_strdup>
   311be:	493e      	ldr	r1, [pc, #248]	; (312b8 <aws_fota_mqtt_evt_handler+0x5c8>)
   311c0:	4602      	mov	r2, r0
   311c2:	4630      	mov	r0, r6
   311c4:	f010 fb2c 	bl	41820 <log_string_sync>
	callback(&aws_fota_evt);
   311c8:	4b33      	ldr	r3, [pc, #204]	; (31298 <aws_fota_mqtt_evt_handler+0x5a8>)
   311ca:	f107 0018 	add.w	r0, r7, #24
   311ce:	681b      	ldr	r3, [r3, #0]
   311d0:	4798      	blx	r3
	return -EFAULT;
   311d2:	f06f 040d 	mvn.w	r4, #13
   311d6:	46dd      	mov	sp, fp
		if (err < 0) {
   311d8:	e5b2      	b.n	30d40 <aws_fota_mqtt_evt_handler+0x50>
	LOG_DBG("received an unhandled MQTT publish event on topic: %s",
   311da:	4620      	mov	r0, r4
   311dc:	f010 fb33 	bl	41846 <log_strdup>
   311e0:	4a36      	ldr	r2, [pc, #216]	; (312bc <aws_fota_mqtt_evt_handler+0x5cc>)
   311e2:	4603      	mov	r3, r0
   311e4:	4936      	ldr	r1, [pc, #216]	; (312c0 <aws_fota_mqtt_evt_handler+0x5d0>)
   311e6:	4630      	mov	r0, r6
   311e8:	f010 fb1a 	bl	41820 <log_string_sync>
	return 1;
   311ec:	46dd      	mov	sp, fp
   311ee:	e594      	b.n	30d1a <aws_fota_mqtt_evt_handler+0x2a>
		if (evt->result != 0) {
   311f0:	69ca      	ldr	r2, [r1, #28]
   311f2:	2a00      	cmp	r2, #0
   311f4:	f43f ad91 	beq.w	30d1a <aws_fota_mqtt_evt_handler+0x2a>
   311f8:	4832      	ldr	r0, [pc, #200]	; (312c4 <aws_fota_mqtt_evt_handler+0x5d4>)
   311fa:	4b33      	ldr	r3, [pc, #204]	; (312c8 <aws_fota_mqtt_evt_handler+0x5d8>)
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   311fc:	4933      	ldr	r1, [pc, #204]	; (312cc <aws_fota_mqtt_evt_handler+0x5dc>)
   311fe:	1ac0      	subs	r0, r0, r3
   31200:	08c0      	lsrs	r0, r0, #3
   31202:	0180      	lsls	r0, r0, #6
   31204:	f040 0001 	orr.w	r0, r0, #1
   31208:	f010 fb0a 	bl	41820 <log_string_sync>
		return 0;
   3120c:	2400      	movs	r4, #0
   3120e:	e597      	b.n	30d40 <aws_fota_mqtt_evt_handler+0x50>
		if (evt->result != 0) {
   31210:	69cc      	ldr	r4, [r1, #28]
   31212:	2c00      	cmp	r4, #0
   31214:	f47f ad94 	bne.w	30d40 <aws_fota_mqtt_evt_handler+0x50>
		if (evt->param.suback.message_id == SUBSCRIBE_NOTIFY_NEXT) {
   31218:	888b      	ldrh	r3, [r1, #4]
   3121a:	f5b3 6f04 	cmp.w	r3, #2112	; 0x840
   3121e:	d110      	bne.n	31242 <aws_fota_mqtt_evt_handler+0x552>
   31220:	4b29      	ldr	r3, [pc, #164]	; (312c8 <aws_fota_mqtt_evt_handler+0x5d8>)
   31222:	4828      	ldr	r0, [pc, #160]	; (312c4 <aws_fota_mqtt_evt_handler+0x5d4>)
			LOG_DBG("subscribed to notify-next topic");
   31224:	4a2a      	ldr	r2, [pc, #168]	; (312d0 <aws_fota_mqtt_evt_handler+0x5e0>)
   31226:	1ac0      	subs	r0, r0, r3
   31228:	08c0      	lsrs	r0, r0, #3
   3122a:	0180      	lsls	r0, r0, #6
   3122c:	4929      	ldr	r1, [pc, #164]	; (312d4 <aws_fota_mqtt_evt_handler+0x5e4>)
   3122e:	f040 0004 	orr.w	r0, r0, #4
   31232:	f010 faf5 	bl	41820 <log_string_sync>
			err = aws_jobs_get_job_execution(client, "$next",
   31236:	4628      	mov	r0, r5
   31238:	4a27      	ldr	r2, [pc, #156]	; (312d8 <aws_fota_mqtt_evt_handler+0x5e8>)
   3123a:	4928      	ldr	r1, [pc, #160]	; (312dc <aws_fota_mqtt_evt_handler+0x5ec>)
   3123c:	f7ff fc5c 	bl	30af8 <aws_jobs_get_job_execution>
   31240:	e6ba      	b.n	30fb8 <aws_fota_mqtt_evt_handler+0x2c8>
		if (evt->param.suback.message_id == SUBSCRIBE_GET) {
   31242:	f640 0241 	movw	r2, #2113	; 0x841
   31246:	4293      	cmp	r3, r2
   31248:	d109      	bne.n	3125e <aws_fota_mqtt_evt_handler+0x56e>
   3124a:	481e      	ldr	r0, [pc, #120]	; (312c4 <aws_fota_mqtt_evt_handler+0x5d4>)
   3124c:	4b1e      	ldr	r3, [pc, #120]	; (312c8 <aws_fota_mqtt_evt_handler+0x5d8>)
			LOG_DBG("subscribed to get topic");
   3124e:	4a20      	ldr	r2, [pc, #128]	; (312d0 <aws_fota_mqtt_evt_handler+0x5e0>)
   31250:	1ac0      	subs	r0, r0, r3
   31252:	08c0      	lsrs	r0, r0, #3
   31254:	0180      	lsls	r0, r0, #6
   31256:	4922      	ldr	r1, [pc, #136]	; (312e0 <aws_fota_mqtt_evt_handler+0x5f0>)
   31258:	f040 0004 	orr.w	r0, r0, #4
   3125c:	e59a      	b.n	30d94 <aws_fota_mqtt_evt_handler+0xa4>
		if ((fota_state == DOWNLOAD_FIRMWARE) &&
   3125e:	4a08      	ldr	r2, [pc, #32]	; (31280 <aws_fota_mqtt_evt_handler+0x590>)
   31260:	7811      	ldrb	r1, [r2, #0]
   31262:	2901      	cmp	r1, #1
   31264:	f47f ad59 	bne.w	30d1a <aws_fota_mqtt_evt_handler+0x2a>
   31268:	f640 0243 	movw	r2, #2115	; 0x843
   3126c:	4293      	cmp	r3, r2
   3126e:	f47f ad54 	bne.w	30d1a <aws_fota_mqtt_evt_handler+0x2a>
			err = update_job_execution(client, job_id,
   31272:	f7ff fc59 	bl	30b28 <update_job_execution.constprop.0>
   31276:	e69f      	b.n	30fb8 <aws_fota_mqtt_evt_handler+0x2c8>
   31278:	20025514 	.word	0x20025514
   3127c:	200209da 	.word	0x200209da
   31280:	2002ce6a 	.word	0x2002ce6a
   31284:	2002cf00 	.word	0x2002cf00
   31288:	2002cd6b 	.word	0x2002cd6b
   3128c:	0004dd6e 	.word	0x0004dd6e
   31290:	0004db76 	.word	0x0004db76
   31294:	0004dba0 	.word	0x0004dba0
   31298:	20025510 	.word	0x20025510
   3129c:	0004dbd2 	.word	0x0004dbd2
   312a0:	0004dbf2 	.word	0x0004dbf2
   312a4:	0004dc15 	.word	0x0004dc15
   312a8:	0004dc3c 	.word	0x0004dc3c
   312ac:	0004dc50 	.word	0x0004dc50
   312b0:	0004dc71 	.word	0x0004dc71
   312b4:	2002d0d5 	.word	0x2002d0d5
   312b8:	0004e84f 	.word	0x0004e84f
   312bc:	0004dd82 	.word	0x0004dd82
   312c0:	0004dc93 	.word	0x0004dc93
   312c4:	000463ec 	.word	0x000463ec
   312c8:	000463bc 	.word	0x000463bc
   312cc:	0004dccd 	.word	0x0004dccd
   312d0:	0004dd91 	.word	0x0004dd91
   312d4:	0004dce2 	.word	0x0004dce2
   312d8:	2002ce6b 	.word	0x2002ce6b
   312dc:	0004d908 	.word	0x0004d908
   312e0:	0004dd06 	.word	0x0004dd06
   312e4:	2002cd6a 	.word	0x2002cd6a

000312e8 <aws_fota_init>:

int aws_fota_init(struct mqtt_client *const client,
		  aws_fota_callback_t evt_handler)
{
   312e8:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || evt_handler == NULL) {
   312ea:	b1b0      	cbz	r0, 3131a <aws_fota_init+0x32>
   312ec:	b1a9      	cbz	r1, 3131a <aws_fota_init+0x32>
		return -EINVAL;
	}

	/* Store client to make it available in event handlers. */
	c = client;
   312ee:	4b0c      	ldr	r3, [pc, #48]	; (31320 <aws_fota_init+0x38>)
   312f0:	6018      	str	r0, [r3, #0]
	callback = evt_handler;
   312f2:	4b0c      	ldr	r3, [pc, #48]	; (31324 <aws_fota_init+0x3c>)

	err = fota_download_init(http_fota_handler);
   312f4:	480c      	ldr	r0, [pc, #48]	; (31328 <aws_fota_init+0x40>)
	callback = evt_handler;
   312f6:	6019      	str	r1, [r3, #0]
	err = fota_download_init(http_fota_handler);
   312f8:	f7ff fa2e 	bl	30758 <fota_download_init>
	if (err != 0) {
   312fc:	4604      	mov	r4, r0
   312fe:	b150      	cbz	r0, 31316 <aws_fota_init+0x2e>
   31300:	480a      	ldr	r0, [pc, #40]	; (3132c <aws_fota_init+0x44>)
   31302:	4b0b      	ldr	r3, [pc, #44]	; (31330 <aws_fota_init+0x48>)
		LOG_ERR("fota_download_init error %d", err);
   31304:	4622      	mov	r2, r4
   31306:	1ac0      	subs	r0, r0, r3
   31308:	08c0      	lsrs	r0, r0, #3
   3130a:	0180      	lsls	r0, r0, #6
   3130c:	4909      	ldr	r1, [pc, #36]	; (31334 <aws_fota_init+0x4c>)
   3130e:	f040 0001 	orr.w	r0, r0, #1
   31312:	f010 fa85 	bl	41820 <log_string_sync>
		return err;
	}

	return 0;
}
   31316:	4620      	mov	r0, r4
   31318:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3131a:	f06f 0415 	mvn.w	r4, #21
   3131e:	e7fa      	b.n	31316 <aws_fota_init+0x2e>
   31320:	2002550c 	.word	0x2002550c
   31324:	20025510 	.word	0x20025510
   31328:	00030bc1 	.word	0x00030bc1
   3132c:	000463ec 	.word	0x000463ec
   31330:	000463bc 	.word	0x000463bc
   31334:	0004dd22 	.word	0x0004dd22

00031338 <aws_fota_get_job_id>:

int aws_fota_get_job_id(uint8_t *const job_id_buf, size_t buf_size)
{
	if ((job_id_buf == NULL) || (buf_size == 0)) {
   31338:	b120      	cbz	r0, 31344 <aws_fota_get_job_id+0xc>
   3133a:	b119      	cbz	r1, 31344 <aws_fota_get_job_id+0xc>
		return -EINVAL;
	}
	return snprintf(job_id_buf, buf_size, "%s", job_id);
   3133c:	4b03      	ldr	r3, [pc, #12]	; (3134c <aws_fota_get_job_id+0x14>)
   3133e:	4a04      	ldr	r2, [pc, #16]	; (31350 <aws_fota_get_job_id+0x18>)
   31340:	f00e bc24 	b.w	3fb8c <sniprintf>
}
   31344:	f06f 0015 	mvn.w	r0, #21
   31348:	4770      	bx	lr
   3134a:	bf00      	nop
   3134c:	2002cfff 	.word	0x2002cfff
   31350:	0004e84f 	.word	0x0004e84f

00031354 <aws_fota_parse_DescribeJobExecution_rsp>:
					   uint32_t payload_len,
					   char *job_id_buf,
					   char *hostname_buf,
					   char *file_path_buf,
					   int *execution_version_number)
{
   31354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31358:	4616      	mov	r6, r2
   3135a:	e9dd a908 	ldrd	sl, r9, [sp, #32]
   3135e:	461f      	mov	r7, r3
	if (job_document == NULL
   31360:	2800      	cmp	r0, #0
   31362:	d068      	beq.n	31436 <aws_fota_parse_DescribeJobExecution_rsp+0xe2>
	    || job_id_buf == NULL
   31364:	2a00      	cmp	r2, #0
   31366:	d066      	beq.n	31436 <aws_fota_parse_DescribeJobExecution_rsp+0xe2>
	    || hostname_buf == NULL
   31368:	2b00      	cmp	r3, #0
   3136a:	d064      	beq.n	31436 <aws_fota_parse_DescribeJobExecution_rsp+0xe2>
	    || file_path_buf == NULL
   3136c:	f1ba 0f00 	cmp.w	sl, #0
   31370:	d061      	beq.n	31436 <aws_fota_parse_DescribeJobExecution_rsp+0xe2>
	    || execution_version_number == NULL) {
   31372:	f1b9 0f00 	cmp.w	r9, #0
   31376:	d05e      	beq.n	31436 <aws_fota_parse_DescribeJobExecution_rsp+0xe2>
		return -EINVAL;
	}

	int ret;

	cJSON *json_data = cJSON_Parse(job_document);
   31378:	f012 fb23 	bl	439c2 <cJSON_Parse>

	if (json_data == NULL) {
   3137c:	4605      	mov	r5, r0
   3137e:	b938      	cbnz	r0, 31390 <aws_fota_parse_DescribeJobExecution_rsp+0x3c>
		ret = -ENODATA;
   31380:	f06f 043c 	mvn.w	r4, #60	; 0x3c
		goto cleanup;
	}

	ret = 1;
cleanup:
	cJSON_Delete(json_data);
   31384:	4628      	mov	r0, r5
   31386:	f7f7 fee7 	bl	29158 <cJSON_Delete>
	return ret;
}
   3138a:	4620      	mov	r0, r4
   3138c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *execution = cJSON_GetObjectItemCaseSensitive(json_data,
   31390:	492a      	ldr	r1, [pc, #168]	; (3143c <aws_fota_parse_DescribeJobExecution_rsp+0xe8>)
   31392:	f012 fb28 	bl	439e6 <cJSON_GetObjectItemCaseSensitive>
	if (execution == NULL) {
   31396:	4604      	mov	r4, r0
   31398:	2800      	cmp	r0, #0
   3139a:	d0f3      	beq.n	31384 <aws_fota_parse_DescribeJobExecution_rsp+0x30>
	cJSON *job_id = cJSON_GetObjectItemCaseSensitive(execution, "jobId");
   3139c:	4928      	ldr	r1, [pc, #160]	; (31440 <aws_fota_parse_DescribeJobExecution_rsp+0xec>)
   3139e:	f012 fb22 	bl	439e6 <cJSON_GetObjectItemCaseSensitive>
   313a2:	4680      	mov	r8, r0
	if (cJSON_GetStringValue(job_id) != NULL) {
   313a4:	f012 fb6d 	bl	43a82 <cJSON_GetStringValue>
   313a8:	2800      	cmp	r0, #0
   313aa:	d0e9      	beq.n	31380 <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
		strncpy_nullterm(job_id_buf, job_id->valuestring,
   313ac:	4630      	mov	r0, r6
   313ae:	2241      	movs	r2, #65	; 0x41
   313b0:	f8d8 1010 	ldr.w	r1, [r8, #16]
   313b4:	f013 fa1d 	bl	447f2 <strncpy_nullterm>
	cJSON *job_data = cJSON_GetObjectItemCaseSensitive(execution,
   313b8:	4620      	mov	r0, r4
   313ba:	4922      	ldr	r1, [pc, #136]	; (31444 <aws_fota_parse_DescribeJobExecution_rsp+0xf0>)
   313bc:	f012 fb13 	bl	439e6 <cJSON_GetObjectItemCaseSensitive>
   313c0:	4606      	mov	r6, r0
	if (!cJSON_IsObject(job_data)) {
   313c2:	f012 fb65 	bl	43a90 <cJSON_IsObject>
   313c6:	2800      	cmp	r0, #0
   313c8:	d0da      	beq.n	31380 <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
	cJSON *location = cJSON_GetObjectItemCaseSensitive(job_data,
   313ca:	4630      	mov	r0, r6
   313cc:	491e      	ldr	r1, [pc, #120]	; (31448 <aws_fota_parse_DescribeJobExecution_rsp+0xf4>)
   313ce:	f012 fb0a 	bl	439e6 <cJSON_GetObjectItemCaseSensitive>
   313d2:	4606      	mov	r6, r0
	if (!cJSON_IsObject(location)) {
   313d4:	f012 fb5c 	bl	43a90 <cJSON_IsObject>
   313d8:	2800      	cmp	r0, #0
   313da:	d0d1      	beq.n	31380 <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
	cJSON *hostname = cJSON_GetObjectItemCaseSensitive(location, "host");
   313dc:	4630      	mov	r0, r6
   313de:	491b      	ldr	r1, [pc, #108]	; (3144c <aws_fota_parse_DescribeJobExecution_rsp+0xf8>)
   313e0:	f012 fb01 	bl	439e6 <cJSON_GetObjectItemCaseSensitive>
	cJSON *path = cJSON_GetObjectItemCaseSensitive(location, "path");
   313e4:	491a      	ldr	r1, [pc, #104]	; (31450 <aws_fota_parse_DescribeJobExecution_rsp+0xfc>)
	cJSON *hostname = cJSON_GetObjectItemCaseSensitive(location, "host");
   313e6:	4680      	mov	r8, r0
	cJSON *path = cJSON_GetObjectItemCaseSensitive(location, "path");
   313e8:	4630      	mov	r0, r6
   313ea:	f012 fafc 	bl	439e6 <cJSON_GetObjectItemCaseSensitive>
   313ee:	4606      	mov	r6, r0
	if ((cJSON_GetStringValue(hostname) != NULL)
   313f0:	4640      	mov	r0, r8
   313f2:	f012 fb46 	bl	43a82 <cJSON_GetStringValue>
   313f6:	2800      	cmp	r0, #0
   313f8:	d0c2      	beq.n	31380 <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
	   && (cJSON_GetStringValue(path) != NULL)) {
   313fa:	4630      	mov	r0, r6
   313fc:	f012 fb41 	bl	43a82 <cJSON_GetStringValue>
   31400:	2800      	cmp	r0, #0
   31402:	d0bd      	beq.n	31380 <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
		strncpy_nullterm(hostname_buf, hostname->valuestring,
   31404:	22ff      	movs	r2, #255	; 0xff
   31406:	4638      	mov	r0, r7
   31408:	f8d8 1010 	ldr.w	r1, [r8, #16]
   3140c:	f013 f9f1 	bl	447f2 <strncpy_nullterm>
		strncpy_nullterm(file_path_buf, path->valuestring,
   31410:	22ff      	movs	r2, #255	; 0xff
   31412:	4650      	mov	r0, sl
   31414:	6931      	ldr	r1, [r6, #16]
   31416:	f013 f9ec 	bl	447f2 <strncpy_nullterm>
	cJSON *version_number = cJSON_GetObjectItemCaseSensitive(
   3141a:	4620      	mov	r0, r4
   3141c:	490d      	ldr	r1, [pc, #52]	; (31454 <aws_fota_parse_DescribeJobExecution_rsp+0x100>)
   3141e:	f012 fae2 	bl	439e6 <cJSON_GetObjectItemCaseSensitive>
   31422:	4604      	mov	r4, r0
	if (cJSON_IsNumber(version_number)) {
   31424:	f012 fb1f 	bl	43a66 <cJSON_IsNumber>
   31428:	2800      	cmp	r0, #0
   3142a:	d0a9      	beq.n	31380 <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
		*execution_version_number = version_number->valueint;
   3142c:	6963      	ldr	r3, [r4, #20]
	ret = 1;
   3142e:	2401      	movs	r4, #1
		*execution_version_number = version_number->valueint;
   31430:	f8c9 3000 	str.w	r3, [r9]
	ret = 1;
   31434:	e7a6      	b.n	31384 <aws_fota_parse_DescribeJobExecution_rsp+0x30>
		return -EINVAL;
   31436:	f06f 0415 	mvn.w	r4, #21
   3143a:	e7a6      	b.n	3138a <aws_fota_parse_DescribeJobExecution_rsp+0x36>
   3143c:	0004dc0b 	.word	0x0004dc0b
   31440:	0004ddbd 	.word	0x0004ddbd
   31444:	0004ddc3 	.word	0x0004ddc3
   31448:	0004ddcf 	.word	0x0004ddcf
   3144c:	0004d2c1 	.word	0x0004d2c1
   31450:	0004ddd8 	.word	0x0004ddd8
   31454:	0004dddd 	.word	0x0004dddd

00031458 <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   31458:	b538      	push	{r3, r4, r5, lr}
   3145a:	4605      	mov	r5, r0
   3145c:	460c      	mov	r4, r1
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   3145e:	f000 faf7 	bl	31a50 <dfu_target_mcuboot_identify>
   31462:	b990      	cbnz	r0, 3148a <dfu_target_img_type+0x32>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (dfu_target_modem_identify(buf)) {
   31464:	4628      	mov	r0, r5
   31466:	f000 f947 	bl	316f8 <dfu_target_modem_identify>
   3146a:	b980      	cbnz	r0, 3148e <dfu_target_img_type+0x36>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}
#endif
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   3146c:	2c1f      	cmp	r4, #31
   3146e:	d910      	bls.n	31492 <dfu_target_img_type+0x3a>
   31470:	4b09      	ldr	r3, [pc, #36]	; (31498 <dfu_target_img_type+0x40>)
   31472:	480a      	ldr	r0, [pc, #40]	; (3149c <dfu_target_img_type+0x44>)
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   31474:	490a      	ldr	r1, [pc, #40]	; (314a0 <dfu_target_img_type+0x48>)
   31476:	1ac0      	subs	r0, r0, r3
   31478:	08c0      	lsrs	r0, r0, #3
   3147a:	0180      	lsls	r0, r0, #6
   3147c:	f040 0001 	orr.w	r0, r0, #1
   31480:	f010 f9ce 	bl	41820 <log_string_sync>
	return -ENOTSUP;
   31484:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   31488:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   3148a:	2001      	movs	r0, #1
   3148c:	e7fc      	b.n	31488 <dfu_target_img_type+0x30>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   3148e:	2002      	movs	r0, #2
   31490:	e7fa      	b.n	31488 <dfu_target_img_type+0x30>
		return -EAGAIN;
   31492:	f06f 000a 	mvn.w	r0, #10
   31496:	e7f7      	b.n	31488 <dfu_target_img_type+0x30>
   31498:	000463bc 	.word	0x000463bc
   3149c:	0004641c 	.word	0x0004641c
   314a0:	0004ddeb 	.word	0x0004ddeb

000314a4 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
   314a4:	4603      	mov	r3, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   314a6:	2b01      	cmp	r3, #1
{
   314a8:	4608      	mov	r0, r1
   314aa:	b570      	push	{r4, r5, r6, lr}
   314ac:	4611      	mov	r1, r2
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   314ae:	d00e      	beq.n	314ce <dfu_target_init+0x2a>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   314b0:	2b02      	cmp	r3, #2
   314b2:	d018      	beq.n	314e6 <dfu_target_init+0x42>
   314b4:	4b0e      	ldr	r3, [pc, #56]	; (314f0 <dfu_target_init+0x4c>)
   314b6:	480f      	ldr	r0, [pc, #60]	; (314f4 <dfu_target_init+0x50>)
		new_target = &dfu_target_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   314b8:	490f      	ldr	r1, [pc, #60]	; (314f8 <dfu_target_init+0x54>)
   314ba:	1ac0      	subs	r0, r0, r3
   314bc:	08c0      	lsrs	r0, r0, #3
   314be:	0180      	lsls	r0, r0, #6
   314c0:	f040 0001 	orr.w	r0, r0, #1
   314c4:	f010 f9ac 	bl	41820 <log_string_sync>
		return -ENOTSUP;
   314c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size, cb);
}
   314cc:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   314ce:	4c0b      	ldr	r4, [pc, #44]	; (314fc <dfu_target_init+0x58>)
	if (new_target == current_target
   314d0:	4d0b      	ldr	r5, [pc, #44]	; (31500 <dfu_target_init+0x5c>)
   314d2:	682a      	ldr	r2, [r5, #0]
   314d4:	42a2      	cmp	r2, r4
   314d6:	d101      	bne.n	314dc <dfu_target_init+0x38>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   314d8:	2b02      	cmp	r3, #2
   314da:	d106      	bne.n	314ea <dfu_target_init+0x46>
	return current_target->init(file_size, cb);
   314dc:	6823      	ldr	r3, [r4, #0]
	current_target = new_target;
   314de:	602c      	str	r4, [r5, #0]
}
   314e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, cb);
   314e4:	4718      	bx	r3
		new_target = &dfu_target_modem;
   314e6:	4c07      	ldr	r4, [pc, #28]	; (31504 <dfu_target_init+0x60>)
   314e8:	e7f2      	b.n	314d0 <dfu_target_init+0x2c>
		return 0;
   314ea:	2000      	movs	r0, #0
   314ec:	e7ee      	b.n	314cc <dfu_target_init+0x28>
   314ee:	bf00      	nop
   314f0:	000463bc 	.word	0x000463bc
   314f4:	0004641c 	.word	0x0004641c
   314f8:	0004de09 	.word	0x0004de09
   314fc:	00046f08 	.word	0x00046f08
   31500:	20025518 	.word	0x20025518
   31504:	00046f18 	.word	0x00046f18

00031508 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   31508:	4b03      	ldr	r3, [pc, #12]	; (31518 <dfu_target_offset_get+0x10>)
   3150a:	681b      	ldr	r3, [r3, #0]
   3150c:	b10b      	cbz	r3, 31512 <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   3150e:	685b      	ldr	r3, [r3, #4]
   31510:	4718      	bx	r3
}
   31512:	f06f 000c 	mvn.w	r0, #12
   31516:	4770      	bx	lr
   31518:	20025518 	.word	0x20025518

0003151c <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   3151c:	4a04      	ldr	r2, [pc, #16]	; (31530 <dfu_target_write+0x14>)
   3151e:	6812      	ldr	r2, [r2, #0]
   31520:	b112      	cbz	r2, 31528 <dfu_target_write+0xc>
   31522:	b108      	cbz	r0, 31528 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   31524:	6893      	ldr	r3, [r2, #8]
   31526:	4718      	bx	r3
}
   31528:	f06f 000c 	mvn.w	r0, #12
   3152c:	4770      	bx	lr
   3152e:	bf00      	nop
   31530:	20025518 	.word	0x20025518

00031534 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   31534:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   31536:	4e0d      	ldr	r6, [pc, #52]	; (3156c <dfu_target_done+0x38>)
{
   31538:	4605      	mov	r5, r0
	if (current_target == NULL) {
   3153a:	6833      	ldr	r3, [r6, #0]
   3153c:	b19b      	cbz	r3, 31566 <dfu_target_done+0x32>
		return -EACCES;
	}

	err = current_target->done(successful);
   3153e:	68db      	ldr	r3, [r3, #12]
   31540:	4798      	blx	r3
	if (err != 0) {
   31542:	4604      	mov	r4, r0
   31544:	b158      	cbz	r0, 3155e <dfu_target_done+0x2a>
   31546:	480a      	ldr	r0, [pc, #40]	; (31570 <dfu_target_done+0x3c>)
   31548:	4b0a      	ldr	r3, [pc, #40]	; (31574 <dfu_target_done+0x40>)
		LOG_ERR("Unable to clean up dfu_target");
   3154a:	490b      	ldr	r1, [pc, #44]	; (31578 <dfu_target_done+0x44>)
   3154c:	1a1b      	subs	r3, r3, r0
   3154e:	08db      	lsrs	r3, r3, #3
   31550:	019b      	lsls	r3, r3, #6
   31552:	f043 0001 	orr.w	r0, r3, #1
   31556:	f010 f963 	bl	41820 <log_string_sync>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   3155a:	4620      	mov	r0, r4
   3155c:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   3155e:	2d00      	cmp	r5, #0
   31560:	d0fb      	beq.n	3155a <dfu_target_done+0x26>
		current_target = NULL;
   31562:	6030      	str	r0, [r6, #0]
   31564:	e7f9      	b.n	3155a <dfu_target_done+0x26>
		return -EACCES;
   31566:	f06f 040c 	mvn.w	r4, #12
   3156a:	e7f6      	b.n	3155a <dfu_target_done+0x26>
   3156c:	20025518 	.word	0x20025518
   31570:	000463bc 	.word	0x000463bc
   31574:	0004641c 	.word	0x0004641c
   31578:	0004de1c 	.word	0x0004de1c

0003157c <dfu_target_reset>:

int dfu_target_reset(void)
{
   3157c:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   3157e:	4d0b      	ldr	r5, [pc, #44]	; (315ac <dfu_target_reset+0x30>)
   31580:	682a      	ldr	r2, [r5, #0]
   31582:	b182      	cbz	r2, 315a6 <dfu_target_reset+0x2a>
		int err = current_target->done(false);
   31584:	2000      	movs	r0, #0
   31586:	68d3      	ldr	r3, [r2, #12]
   31588:	4798      	blx	r3

		if (err != 0) {
   3158a:	4604      	mov	r4, r0
   3158c:	b158      	cbz	r0, 315a6 <dfu_target_reset+0x2a>
   3158e:	4808      	ldr	r0, [pc, #32]	; (315b0 <dfu_target_reset+0x34>)
   31590:	4b08      	ldr	r3, [pc, #32]	; (315b4 <dfu_target_reset+0x38>)
			LOG_ERR("Unable to clean up dfu_target");
   31592:	4909      	ldr	r1, [pc, #36]	; (315b8 <dfu_target_reset+0x3c>)
   31594:	1ac0      	subs	r0, r0, r3
   31596:	08c0      	lsrs	r0, r0, #3
   31598:	0180      	lsls	r0, r0, #6
   3159a:	f040 0001 	orr.w	r0, r0, #1
   3159e:	f010 f93f 	bl	41820 <log_string_sync>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   315a2:	4620      	mov	r0, r4
   315a4:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   315a6:	2400      	movs	r4, #0
   315a8:	602c      	str	r4, [r5, #0]
	return 0;
   315aa:	e7fa      	b.n	315a2 <dfu_target_reset+0x26>
   315ac:	20025518 	.word	0x20025518
   315b0:	0004641c 	.word	0x0004641c
   315b4:	000463bc 	.word	0x000463bc
   315b8:	0004de1c 	.word	0x0004de1c

000315bc <get_modem_error>:
static int  fd;
static int  offset;
static dfu_target_callback_t callback;

static int get_modem_error(void)
{
   315bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   315be:	2200      	movs	r2, #0
   315c0:	2304      	movs	r3, #4
   315c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   315c6:	4b0e      	ldr	r3, [pc, #56]	; (31600 <get_modem_error+0x44>)
   315c8:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   315ca:	ab03      	add	r3, sp, #12
   315cc:	9300      	str	r3, [sp, #0]
   315ce:	2214      	movs	r2, #20
   315d0:	f240 2103 	movw	r1, #515	; 0x203
   315d4:	ab02      	add	r3, sp, #8
   315d6:	f010 fd57 	bl	42088 <z_impl_zsock_getsockopt>
	if (rc) {
   315da:	b168      	cbz	r0, 315f8 <get_modem_error+0x3c>
   315dc:	4b09      	ldr	r3, [pc, #36]	; (31604 <get_modem_error+0x48>)
   315de:	4c0a      	ldr	r4, [pc, #40]	; (31608 <get_modem_error+0x4c>)
   315e0:	1ae4      	subs	r4, r4, r3
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   315e2:	f011 f846 	bl	42672 <__errno>
   315e6:	08e4      	lsrs	r4, r4, #3
   315e8:	01a4      	lsls	r4, r4, #6
   315ea:	f044 0401 	orr.w	r4, r4, #1
   315ee:	6802      	ldr	r2, [r0, #0]
   315f0:	4906      	ldr	r1, [pc, #24]	; (3160c <get_modem_error+0x50>)
   315f2:	4620      	mov	r0, r4
   315f4:	f010 f914 	bl	41820 <log_string_sync>
	}

	return err;
}
   315f8:	9802      	ldr	r0, [sp, #8]
   315fa:	b004      	add	sp, #16
   315fc:	bd10      	pop	{r4, pc}
   315fe:	bf00      	nop
   31600:	20025520 	.word	0x20025520
   31604:	000463bc 	.word	0x000463bc
   31608:	0004642c 	.word	0x0004642c
   3160c:	0004de3a 	.word	0x0004de3a

00031610 <delete_banked_modem_fw>:
}
#define SLEEP_TIME 1
static int delete_banked_modem_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   31610:	2304      	movs	r3, #4
{
   31612:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31616:	b085      	sub	sp, #20
	socklen_t len = sizeof(offset);
   31618:	9303      	str	r3, [sp, #12]
   3161a:	4c2e      	ldr	r4, [pc, #184]	; (316d4 <delete_banked_modem_fw+0xc4>)
   3161c:	4b2e      	ldr	r3, [pc, #184]	; (316d8 <delete_banked_modem_fw+0xc8>)
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   3161e:	4e2f      	ldr	r6, [pc, #188]	; (316dc <delete_banked_modem_fw+0xcc>)
   31620:	1ae4      	subs	r4, r4, r3
   31622:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Deleting firmware image, this can take several minutes");
   31624:	01a4      	lsls	r4, r4, #6
   31626:	f044 0003 	orr.w	r0, r4, #3
   3162a:	492d      	ldr	r1, [pc, #180]	; (316e0 <delete_banked_modem_fw+0xd0>)
   3162c:	f010 f8f8 	bl	41820 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   31630:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   31632:	2300      	movs	r3, #0
   31634:	2206      	movs	r2, #6
   31636:	f240 2103 	movw	r1, #515	; 0x203
   3163a:	9300      	str	r3, [sp, #0]
   3163c:	f010 fd3f 	bl	420be <z_impl_zsock_setsockopt>
	if (err < 0) {
   31640:	2800      	cmp	r0, #0
   31642:	da0d      	bge.n	31660 <delete_banked_modem_fw+0x50>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   31644:	f011 f815 	bl	42672 <__errno>
   31648:	f044 0401 	orr.w	r4, r4, #1
   3164c:	6802      	ldr	r2, [r0, #0]
   3164e:	4925      	ldr	r1, [pc, #148]	; (316e4 <delete_banked_modem_fw+0xd4>)
   31650:	4620      	mov	r0, r4
   31652:	f010 f8e5 	bl	41820 <log_string_sync>
		return -EFAULT;
   31656:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   3165a:	b005      	add	sp, #20
   3165c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   31660:	253c      	movs	r5, #60	; 0x3c
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   31662:	4f21      	ldr	r7, [pc, #132]	; (316e8 <delete_banked_modem_fw+0xd8>)
				callback(DFU_TARGET_EVT_TIMEOUT);
   31664:	f8df 8084 	ldr.w	r8, [pc, #132]	; 316ec <delete_banked_modem_fw+0xdc>
					LOG_ERR("DFU error: %d", err);
   31668:	f8df 9088 	ldr.w	r9, [pc, #136]	; 316f4 <delete_banked_modem_fw+0xe4>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   3166c:	6830      	ldr	r0, [r6, #0]
   3166e:	ab03      	add	r3, sp, #12
   31670:	9300      	str	r3, [sp, #0]
   31672:	2207      	movs	r2, #7
   31674:	463b      	mov	r3, r7
   31676:	f240 2103 	movw	r1, #515	; 0x203
   3167a:	f010 fd05 	bl	42088 <z_impl_zsock_getsockopt>
		if (err < 0) {
   3167e:	2800      	cmp	r0, #0
   31680:	da1d      	bge.n	316be <delete_banked_modem_fw+0xae>
			if (timeout < 0) {
   31682:	2d00      	cmp	r5, #0
   31684:	da04      	bge.n	31690 <delete_banked_modem_fw+0x80>
				callback(DFU_TARGET_EVT_TIMEOUT);
   31686:	2000      	movs	r0, #0
   31688:	f8d8 3000 	ldr.w	r3, [r8]
   3168c:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   3168e:	253c      	movs	r5, #60	; 0x3c
			if (errno == ENOEXEC) {
   31690:	f010 ffef 	bl	42672 <__errno>
   31694:	6803      	ldr	r3, [r0, #0]
   31696:	2b08      	cmp	r3, #8
   31698:	d10f      	bne.n	316ba <delete_banked_modem_fw+0xaa>
				err = get_modem_error();
   3169a:	f7ff ff8f 	bl	315bc <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   3169e:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   316a2:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   316a4:	d004      	beq.n	316b0 <delete_banked_modem_fw+0xa0>
					LOG_ERR("DFU error: %d", err);
   316a6:	4649      	mov	r1, r9
   316a8:	f044 0001 	orr.w	r0, r4, #1
   316ac:	f010 f8b8 	bl	41820 <log_string_sync>
	return z_impl_k_sleep(timeout);
   316b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   316b4:	2100      	movs	r1, #0
   316b6:	f00c f9e3 	bl	3da80 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   316ba:	3d01      	subs	r5, #1
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   316bc:	e7d6      	b.n	3166c <delete_banked_modem_fw+0x5c>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   316be:	4b0b      	ldr	r3, [pc, #44]	; (316ec <delete_banked_modem_fw+0xdc>)
   316c0:	2001      	movs	r0, #1
   316c2:	681b      	ldr	r3, [r3, #0]
   316c4:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   316c6:	f044 0003 	orr.w	r0, r4, #3
   316ca:	4909      	ldr	r1, [pc, #36]	; (316f0 <delete_banked_modem_fw+0xe0>)
   316cc:	f010 f8a8 	bl	41820 <log_string_sync>
	return 0;
   316d0:	2000      	movs	r0, #0
   316d2:	e7c2      	b.n	3165a <delete_banked_modem_fw+0x4a>
   316d4:	0004642c 	.word	0x0004642c
   316d8:	000463bc 	.word	0x000463bc
   316dc:	20025520 	.word	0x20025520
   316e0:	0004de60 	.word	0x0004de60
   316e4:	0004de97 	.word	0x0004de97
   316e8:	20025524 	.word	0x20025524
   316ec:	2002551c 	.word	0x2002551c
   316f0:	0004dec7 	.word	0x0004dec7
   316f4:	0004deb9 	.word	0x0004deb9

000316f8 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   316f8:	6840      	ldr	r0, [r0, #4]

}
   316fa:	4b02      	ldr	r3, [pc, #8]	; (31704 <dfu_target_modem_identify+0xc>)
   316fc:	1ac3      	subs	r3, r0, r3
   316fe:	4258      	negs	r0, r3
   31700:	4158      	adcs	r0, r3
   31702:	4770      	bx	lr
   31704:	7544656d 	.word	0x7544656d

00031708 <dfu_target_modem_init>:

int dfu_target_modem_init(size_t file_size, dfu_target_callback_t cb)
{
	int err;
	size_t scratch_space;
	socklen_t len = sizeof(offset);
   31708:	2304      	movs	r3, #4
{
   3170a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3170e:	b099      	sub	sp, #100	; 0x64
	socklen_t len = sizeof(offset);
   31710:	9303      	str	r3, [sp, #12]

	callback = cb;
   31712:	4b5d      	ldr	r3, [pc, #372]	; (31888 <dfu_target_modem_init+0x180>)
{
   31714:	4606      	mov	r6, r0
	callback = cb;
   31716:	6019      	str	r1, [r3, #0]
	return z_impl_zsock_socket(family, type, proto);
   31718:	f240 2203 	movw	r2, #515	; 0x203
   3171c:	2101      	movs	r1, #1
   3171e:	2006      	movs	r0, #6
   31720:	f7f3 fda6 	bl	25270 <z_impl_zsock_socket>
   31724:	4c59      	ldr	r4, [pc, #356]	; (3188c <dfu_target_modem_init+0x184>)
   31726:	4b5a      	ldr	r3, [pc, #360]	; (31890 <dfu_target_modem_init+0x188>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   31728:	4f5a      	ldr	r7, [pc, #360]	; (31894 <dfu_target_modem_init+0x18c>)
   3172a:	1ae4      	subs	r4, r4, r3
   3172c:	08e4      	lsrs	r4, r4, #3
	if (fd < 0) {
   3172e:	2800      	cmp	r0, #0
   31730:	463d      	mov	r5, r7
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   31732:	6038      	str	r0, [r7, #0]
	if (fd < 0) {
   31734:	ea4f 1484 	mov.w	r4, r4, lsl #6
   31738:	da2c      	bge.n	31794 <dfu_target_modem_init+0x8c>
		LOG_ERR("Failed to open Modem DFU socket.");
   3173a:	f044 0001 	orr.w	r0, r4, #1
   3173e:	4956      	ldr	r1, [pc, #344]	; (31898 <dfu_target_modem_init+0x190>)
   31740:	f010 f86e 	bl	41820 <log_string_sync>
		return fd;
   31744:	6838      	ldr	r0, [r7, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   31746:	2800      	cmp	r0, #0
   31748:	db45      	blt.n	317d6 <dfu_target_modem_init+0xce>
		return err;
	}

	err = getsockopt(fd, SOL_DFU, SO_DFU_RESOURCES, &scratch_space, &len);
   3174a:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   3174c:	af03      	add	r7, sp, #12
   3174e:	2202      	movs	r2, #2
   31750:	f240 2103 	movw	r1, #515	; 0x203
   31754:	9700      	str	r7, [sp, #0]
   31756:	ab0e      	add	r3, sp, #56	; 0x38
   31758:	f010 fc96 	bl	42088 <z_impl_zsock_getsockopt>
	if (err < 0) {
   3175c:	2800      	cmp	r0, #0
   3175e:	da0d      	bge.n	3177c <dfu_target_modem_init+0x74>
		if (errno == ENOEXEC) {
   31760:	f010 ff87 	bl	42672 <__errno>
   31764:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   31766:	f044 0801 	orr.w	r8, r4, #1
		if (errno == ENOEXEC) {
   3176a:	2b08      	cmp	r3, #8
   3176c:	d146      	bne.n	317fc <dfu_target_modem_init+0xf4>
			LOG_ERR("Modem error: %d", get_modem_error());
   3176e:	f7ff ff25 	bl	315bc <get_modem_error>
   31772:	4602      	mov	r2, r0
   31774:	4949      	ldr	r1, [pc, #292]	; (3189c <dfu_target_modem_init+0x194>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   31776:	4640      	mov	r0, r8
   31778:	f010 f852 	bl	41820 <log_string_sync>
		}
	}

	if (file_size > scratch_space) {
   3177c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3177e:	42b3      	cmp	r3, r6
   31780:	d241      	bcs.n	31806 <dfu_target_modem_init+0xfe>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   31782:	f044 0001 	orr.w	r0, r4, #1
   31786:	4632      	mov	r2, r6
   31788:	4945      	ldr	r1, [pc, #276]	; (318a0 <dfu_target_modem_init+0x198>)
   3178a:	f010 f849 	bl	41820 <log_string_sync>
			file_size, scratch_space);
		return -EFBIG;
   3178e:	f06f 001a 	mvn.w	r0, #26
   31792:	e020      	b.n	317d6 <dfu_target_modem_init+0xce>
	len = sizeof(version);
   31794:	f04f 0924 	mov.w	r9, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   31798:	f044 0803 	orr.w	r8, r4, #3
   3179c:	4640      	mov	r0, r8
   3179e:	4941      	ldr	r1, [pc, #260]	; (318a4 <dfu_target_modem_init+0x19c>)
   317a0:	f010 f83e 	bl	41820 <log_string_sync>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   317a4:	6838      	ldr	r0, [r7, #0]
	len = sizeof(version);
   317a6:	f8cd 9010 	str.w	r9, [sp, #16]
   317aa:	ab04      	add	r3, sp, #16
   317ac:	af05      	add	r7, sp, #20
   317ae:	9300      	str	r3, [sp, #0]
   317b0:	2201      	movs	r2, #1
   317b2:	463b      	mov	r3, r7
   317b4:	f240 2103 	movw	r1, #515	; 0x203
   317b8:	f010 fc66 	bl	42088 <z_impl_zsock_getsockopt>
	if (err < 0) {
   317bc:	2800      	cmp	r0, #0
   317be:	da0d      	bge.n	317dc <dfu_target_modem_init+0xd4>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   317c0:	f010 ff57 	bl	42672 <__errno>
   317c4:	f044 0401 	orr.w	r4, r4, #1
   317c8:	6802      	ldr	r2, [r0, #0]
   317ca:	4937      	ldr	r1, [pc, #220]	; (318a8 <dfu_target_modem_init+0x1a0>)
   317cc:	4620      	mov	r0, r4
   317ce:	f010 f827 	bl	41820 <log_string_sync>
		return -1;
   317d2:	f04f 30ff 	mov.w	r0, #4294967295
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
}
   317d6:	b019      	add	sp, #100	; 0x64
   317d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   317dc:	464b      	mov	r3, r9
   317de:	2125      	movs	r1, #37	; 0x25
   317e0:	4a32      	ldr	r2, [pc, #200]	; (318ac <dfu_target_modem_init+0x1a4>)
   317e2:	9700      	str	r7, [sp, #0]
   317e4:	a80e      	add	r0, sp, #56	; 0x38
   317e6:	f00e f9d1 	bl	3fb8c <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   317ea:	a80e      	add	r0, sp, #56	; 0x38
   317ec:	f010 f82b 	bl	41846 <log_strdup>
   317f0:	492f      	ldr	r1, [pc, #188]	; (318b0 <dfu_target_modem_init+0x1a8>)
   317f2:	4602      	mov	r2, r0
   317f4:	4640      	mov	r0, r8
   317f6:	f010 f813 	bl	41820 <log_string_sync>
	if (err < 0) {
   317fa:	e7a6      	b.n	3174a <dfu_target_modem_init+0x42>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   317fc:	f010 ff39 	bl	42672 <__errno>
   31800:	492c      	ldr	r1, [pc, #176]	; (318b4 <dfu_target_modem_init+0x1ac>)
   31802:	6802      	ldr	r2, [r0, #0]
   31804:	e7b7      	b.n	31776 <dfu_target_modem_init+0x6e>
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   31806:	6828      	ldr	r0, [r5, #0]
   31808:	2207      	movs	r2, #7
   3180a:	f240 2103 	movw	r1, #515	; 0x203
   3180e:	4b2a      	ldr	r3, [pc, #168]	; (318b8 <dfu_target_modem_init+0x1b0>)
   31810:	9700      	str	r7, [sp, #0]
   31812:	f010 fc39 	bl	42088 <z_impl_zsock_getsockopt>
	if (err < 0) {
   31816:	2800      	cmp	r0, #0
   31818:	da0d      	bge.n	31836 <dfu_target_modem_init+0x12e>
		if (errno == ENOEXEC) {
   3181a:	f010 ff2a 	bl	42672 <__errno>
   3181e:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   31820:	f044 0601 	orr.w	r6, r4, #1
		if (errno == ENOEXEC) {
   31824:	2b08      	cmp	r3, #8
   31826:	d10f      	bne.n	31848 <dfu_target_modem_init+0x140>
			LOG_ERR("Modem error: %d", get_modem_error());
   31828:	f7ff fec8 	bl	315bc <get_modem_error>
   3182c:	4602      	mov	r2, r0
   3182e:	491b      	ldr	r1, [pc, #108]	; (3189c <dfu_target_modem_init+0x194>)
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   31830:	4630      	mov	r0, r6
   31832:	f00f fff5 	bl	41820 <log_string_sync>
	if (offset == DIRTY_IMAGE) {
   31836:	4e20      	ldr	r6, [pc, #128]	; (318b8 <dfu_target_modem_init+0x1b0>)
   31838:	6832      	ldr	r2, [r6, #0]
   3183a:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   3183e:	d108      	bne.n	31852 <dfu_target_modem_init+0x14a>
		delete_banked_modem_fw();
   31840:	f7ff fee6 	bl	31610 <delete_banked_modem_fw>
	return 0;
   31844:	2000      	movs	r0, #0
   31846:	e7c6      	b.n	317d6 <dfu_target_modem_init+0xce>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   31848:	f010 ff13 	bl	42672 <__errno>
   3184c:	4919      	ldr	r1, [pc, #100]	; (318b4 <dfu_target_modem_init+0x1ac>)
   3184e:	6802      	ldr	r2, [r0, #0]
   31850:	e7ee      	b.n	31830 <dfu_target_modem_init+0x128>
	} else if (offset != 0) {
   31852:	2a00      	cmp	r2, #0
   31854:	d0f6      	beq.n	31844 <dfu_target_modem_init+0x13c>
		LOG_INF("Setting offset to 0x%x", offset);
   31856:	f044 0403 	orr.w	r4, r4, #3
   3185a:	4620      	mov	r0, r4
   3185c:	4917      	ldr	r1, [pc, #92]	; (318bc <dfu_target_modem_init+0x1b4>)
   3185e:	f00f ffdf 	bl	41820 <log_string_sync>
		len = sizeof(offset);
   31862:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   31864:	6828      	ldr	r0, [r5, #0]
		len = sizeof(offset);
   31866:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   31868:	2207      	movs	r2, #7
   3186a:	9300      	str	r3, [sp, #0]
   3186c:	f240 2103 	movw	r1, #515	; 0x203
   31870:	4633      	mov	r3, r6
   31872:	f010 fc24 	bl	420be <z_impl_zsock_setsockopt>
		if (err != 0) {
   31876:	2800      	cmp	r0, #0
   31878:	d0e4      	beq.n	31844 <dfu_target_modem_init+0x13c>
			LOG_INF("Error while setting offset: %d", offset);
   3187a:	4620      	mov	r0, r4
   3187c:	6832      	ldr	r2, [r6, #0]
   3187e:	4910      	ldr	r1, [pc, #64]	; (318c0 <dfu_target_modem_init+0x1b8>)
   31880:	f00f ffce 	bl	41820 <log_string_sync>
   31884:	e7de      	b.n	31844 <dfu_target_modem_init+0x13c>
   31886:	bf00      	nop
   31888:	2002551c 	.word	0x2002551c
   3188c:	0004642c 	.word	0x0004642c
   31890:	000463bc 	.word	0x000463bc
   31894:	20025520 	.word	0x20025520
   31898:	0004dee0 	.word	0x0004dee0
   3189c:	0004df64 	.word	0x0004df64
   318a0:	0004df91 	.word	0x0004df91
   318a4:	0004df01 	.word	0x0004df01
   318a8:	0004df1a 	.word	0x0004df1a
   318ac:	0004df44 	.word	0x0004df44
   318b0:	0004df49 	.word	0x0004df49
   318b4:	0004df74 	.word	0x0004df74
   318b8:	20025524 	.word	0x20025524
   318bc:	0004dfc0 	.word	0x0004dfc0
   318c0:	0004dfd7 	.word	0x0004dfd7

000318c4 <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   318c4:	4b02      	ldr	r3, [pc, #8]	; (318d0 <dfu_target_modem_offset_get+0xc>)
   318c6:	681b      	ldr	r3, [r3, #0]
   318c8:	6003      	str	r3, [r0, #0]
	return 0;
}
   318ca:	2000      	movs	r0, #0
   318cc:	4770      	bx	lr
   318ce:	bf00      	nop
   318d0:	20025524 	.word	0x20025524

000318d4 <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   318d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int err = 0;
	int sent = 0;
   318d8:	2400      	movs	r4, #0
{
   318da:	4607      	mov	r7, r0
   318dc:	460d      	mov	r5, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   318de:	4626      	mov	r6, r4
	int modem_error = 0;
	int send_result = 0;

	while (send_result >= 0) {
		send_result = send(fd, (((uint8_t *)buf) + sent),
   318e0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 31984 <dfu_target_modem_write+0xb0>
   318e4:	f8d8 0000 	ldr.w	r0, [r8]
   318e8:	2300      	movs	r3, #0
   318ea:	e9cd 6600 	strd	r6, r6, [sp]
   318ee:	1b2a      	subs	r2, r5, r4
   318f0:	1939      	adds	r1, r7, r4
   318f2:	f010 fb79 	bl	41fe8 <z_impl_zsock_sendto>
				   (len - sent), 0);
		if (send_result > 0) {
   318f6:	2800      	cmp	r0, #0
   318f8:	dd0a      	ble.n	31910 <dfu_target_modem_write+0x3c>
			sent += send_result;
   318fa:	4404      	add	r4, r0
			if (sent >= len) {
   318fc:	42ac      	cmp	r4, r5
   318fe:	d3f1      	bcc.n	318e4 <dfu_target_modem_write+0x10>
				offset += len;
				return 0;
   31900:	2000      	movs	r0, #0
				offset += len;
   31902:	4b1c      	ldr	r3, [pc, #112]	; (31974 <dfu_target_modem_write+0xa0>)
   31904:	6819      	ldr	r1, [r3, #0]
   31906:	4429      	add	r1, r5
   31908:	6019      	str	r1, [r3, #0]
			return 0;
		}
	default:
		return -EFAULT;
	}
}
   3190a:	b002      	add	sp, #8
   3190c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (send_result >= 0) {
   31910:	d0e8      	beq.n	318e4 <dfu_target_modem_write+0x10>
	if (errno != ENOEXEC) {
   31912:	f010 feae 	bl	42672 <__errno>
   31916:	6803      	ldr	r3, [r0, #0]
   31918:	2b08      	cmp	r3, #8
   3191a:	d128      	bne.n	3196e <dfu_target_modem_write+0x9a>
	modem_error = get_modem_error();
   3191c:	f7ff fe4e 	bl	315bc <get_modem_error>
   31920:	4c15      	ldr	r4, [pc, #84]	; (31978 <dfu_target_modem_write+0xa4>)
   31922:	4b16      	ldr	r3, [pc, #88]	; (3197c <dfu_target_modem_write+0xa8>)
   31924:	4606      	mov	r6, r0
   31926:	1ae4      	subs	r4, r4, r3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   31928:	f010 fea3 	bl	42672 <__errno>
   3192c:	08e4      	lsrs	r4, r4, #3
   3192e:	01a4      	lsls	r4, r4, #6
   31930:	f044 0401 	orr.w	r4, r4, #1
   31934:	6802      	ldr	r2, [r0, #0]
   31936:	4633      	mov	r3, r6
   31938:	4620      	mov	r0, r4
   3193a:	4911      	ldr	r1, [pc, #68]	; (31980 <dfu_target_modem_write+0xac>)
   3193c:	f00f ff70 	bl	41820 <log_string_sync>
	switch (modem_error) {
   31940:	f116 0f0b 	cmn.w	r6, #11
   31944:	d004      	beq.n	31950 <dfu_target_modem_write+0x7c>
   31946:	f116 0f09 	cmn.w	r6, #9
   3194a:	d00d      	beq.n	31968 <dfu_target_modem_write+0x94>
   3194c:	360e      	adds	r6, #14
   3194e:	d10e      	bne.n	3196e <dfu_target_modem_write+0x9a>
		delete_banked_modem_fw();
   31950:	f7ff fe5e 	bl	31610 <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   31954:	4629      	mov	r1, r5
   31956:	4638      	mov	r0, r7
   31958:	f7ff ffbc 	bl	318d4 <dfu_target_modem_write>
			return 0;
   3195c:	2800      	cmp	r0, #0
   3195e:	bfb4      	ite	lt
   31960:	f06f 0015 	mvnlt.w	r0, #21
   31964:	2000      	movge	r0, #0
   31966:	e7d0      	b.n	3190a <dfu_target_modem_write+0x36>
		return -EINVAL;
   31968:	f06f 0015 	mvn.w	r0, #21
   3196c:	e7cd      	b.n	3190a <dfu_target_modem_write+0x36>
	switch (modem_error) {
   3196e:	f06f 000d 	mvn.w	r0, #13
   31972:	e7ca      	b.n	3190a <dfu_target_modem_write+0x36>
   31974:	20025524 	.word	0x20025524
   31978:	0004642c 	.word	0x0004642c
   3197c:	000463bc 	.word	0x000463bc
   31980:	0004dff6 	.word	0x0004dff6
   31984:	20025520 	.word	0x20025520

00031988 <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   31988:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3198a:	4c1d      	ldr	r4, [pc, #116]	; (31a00 <dfu_target_modem_done+0x78>)
   3198c:	4b1d      	ldr	r3, [pc, #116]	; (31a04 <dfu_target_modem_done+0x7c>)
   3198e:	4d1e      	ldr	r5, [pc, #120]	; (31a08 <dfu_target_modem_done+0x80>)
   31990:	1ae4      	subs	r4, r4, r3
   31992:	08e4      	lsrs	r4, r4, #3
   31994:	01a4      	lsls	r4, r4, #6
	int err = 0;

	if (successful) {
   31996:	b358      	cbz	r0, 319f0 <dfu_target_modem_done+0x68>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   31998:	f044 0003 	orr.w	r0, r4, #3
   3199c:	491b      	ldr	r1, [pc, #108]	; (31a0c <dfu_target_modem_done+0x84>)
   3199e:	f00f ff3f 	bl	41820 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   319a2:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   319a4:	2300      	movs	r3, #0
   319a6:	2204      	movs	r2, #4
   319a8:	f240 2103 	movw	r1, #515	; 0x203
   319ac:	9300      	str	r3, [sp, #0]
   319ae:	f010 fb86 	bl	420be <z_impl_zsock_setsockopt>
	if (err < 0) {
   319b2:	1e02      	subs	r2, r0, #0
   319b4:	da0f      	bge.n	319d6 <dfu_target_modem_done+0x4e>
   319b6:	9203      	str	r2, [sp, #12]
		if (errno == ENOEXEC) {
   319b8:	f010 fe5b 	bl	42672 <__errno>
   319bc:	6803      	ldr	r3, [r0, #0]
   319be:	9a03      	ldr	r2, [sp, #12]
   319c0:	2b08      	cmp	r3, #8
   319c2:	f044 0601 	orr.w	r6, r4, #1
   319c6:	d102      	bne.n	319ce <dfu_target_modem_done+0x46>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   319c8:	f7ff fdf8 	bl	315bc <get_modem_error>
   319cc:	4602      	mov	r2, r0
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   319ce:	4630      	mov	r0, r6
   319d0:	490f      	ldr	r1, [pc, #60]	; (31a10 <dfu_target_modem_done+0x88>)
   319d2:	f00f ff25 	bl	41820 <log_string_sync>
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   319d6:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   319d8:	f010 fad9 	bl	41f8e <z_impl_zsock_close>
	if (err < 0) {
   319dc:	1e05      	subs	r5, r0, #0
   319de:	da0d      	bge.n	319fc <dfu_target_modem_done+0x74>
		LOG_ERR("Failed to close modem DFU socket.");
   319e0:	490c      	ldr	r1, [pc, #48]	; (31a14 <dfu_target_modem_done+0x8c>)
   319e2:	f044 0001 	orr.w	r0, r4, #1
   319e6:	f00f ff1b 	bl	41820 <log_string_sync>
		return err;
	}

	return 0;
}
   319ea:	4628      	mov	r0, r5
   319ec:	b004      	add	sp, #16
   319ee:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Modem upgrade aborted.");
   319f0:	4909      	ldr	r1, [pc, #36]	; (31a18 <dfu_target_modem_done+0x90>)
   319f2:	f044 0003 	orr.w	r0, r4, #3
   319f6:	f00f ff13 	bl	41820 <log_string_sync>
   319fa:	e7ec      	b.n	319d6 <dfu_target_modem_done+0x4e>
	return 0;
   319fc:	2500      	movs	r5, #0
   319fe:	e7f4      	b.n	319ea <dfu_target_modem_done+0x62>
   31a00:	0004642c 	.word	0x0004642c
   31a04:	000463bc 	.word	0x000463bc
   31a08:	20025520 	.word	0x20025520
   31a0c:	0004e01e 	.word	0x0004e01e
   31a10:	0004e04d 	.word	0x0004e04d
   31a14:	0004e088 	.word	0x0004e088
   31a18:	0004e071 	.word	0x0004e071

00031a1c <reset_flash_context>:

	return 0;
}

static void reset_flash_context(void)
{
   31a1c:	b508      	push	{r3, lr}
	/* Need to set bytes_written to 0 */
	int err = flash_img_init(&flash_img);
   31a1e:	4808      	ldr	r0, [pc, #32]	; (31a40 <reset_flash_context+0x24>)
   31a20:	f010 fa6b 	bl	41efa <flash_img_init>

	if (err) {
   31a24:	b158      	cbz	r0, 31a3e <reset_flash_context+0x22>
   31a26:	4b07      	ldr	r3, [pc, #28]	; (31a44 <reset_flash_context+0x28>)
   31a28:	4807      	ldr	r0, [pc, #28]	; (31a48 <reset_flash_context+0x2c>)
		LOG_ERR("Unable to re-initialize flash_img");
   31a2a:	4908      	ldr	r1, [pc, #32]	; (31a4c <reset_flash_context+0x30>)
   31a2c:	1ac0      	subs	r0, r0, r3
   31a2e:	08c0      	lsrs	r0, r0, #3
   31a30:	0180      	lsls	r0, r0, #6
   31a32:	f040 0001 	orr.w	r0, r0, #1
	}
	err = store_flash_img_context();
	if (err != 0) {
		LOG_ERR("Unable to reset write progress: %d", err);
	}
}
   31a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Unable to re-initialize flash_img");
   31a3a:	f00f bef1 	b.w	41820 <log_string_sync>
}
   31a3e:	bd08      	pop	{r3, pc}
   31a40:	20025528 	.word	0x20025528
   31a44:	000463bc 	.word	0x000463bc
   31a48:	00046424 	.word	0x00046424
   31a4c:	0004e0bb 	.word	0x0004e0bb

00031a50 <dfu_target_mcuboot_identify>:
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   31a50:	6800      	ldr	r0, [r0, #0]
}
   31a52:	4b02      	ldr	r3, [pc, #8]	; (31a5c <dfu_target_mcuboot_identify+0xc>)
   31a54:	1ac3      	subs	r3, r0, r3
   31a56:	4258      	negs	r0, r3
   31a58:	4158      	adcs	r0, r3
   31a5a:	4770      	bx	lr
   31a5c:	96f3b83d 	.word	0x96f3b83d

00031a60 <dfu_target_mcuboot_init>:
{
   31a60:	b538      	push	{r3, r4, r5, lr}
   31a62:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   31a64:	4812      	ldr	r0, [pc, #72]	; (31ab0 <dfu_target_mcuboot_init+0x50>)
   31a66:	f010 fa48 	bl	41efa <flash_img_init>
	if (err != 0) {
   31a6a:	4604      	mov	r4, r0
   31a6c:	b160      	cbz	r0, 31a88 <dfu_target_mcuboot_init+0x28>
   31a6e:	4811      	ldr	r0, [pc, #68]	; (31ab4 <dfu_target_mcuboot_init+0x54>)
   31a70:	4b11      	ldr	r3, [pc, #68]	; (31ab8 <dfu_target_mcuboot_init+0x58>)
		LOG_ERR("flash_img_init error %d", err);
   31a72:	4622      	mov	r2, r4
   31a74:	1a1b      	subs	r3, r3, r0
   31a76:	08db      	lsrs	r3, r3, #3
   31a78:	019b      	lsls	r3, r3, #6
   31a7a:	4910      	ldr	r1, [pc, #64]	; (31abc <dfu_target_mcuboot_init+0x5c>)
   31a7c:	f043 0001 	orr.w	r0, r3, #1
   31a80:	f00f fece 	bl	41820 <log_string_sync>
}
   31a84:	4620      	mov	r0, r4
   31a86:	bd38      	pop	{r3, r4, r5, pc}
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   31a88:	f5b5 2fee 	cmp.w	r5, #487424	; 0x77000
   31a8c:	d9fa      	bls.n	31a84 <dfu_target_mcuboot_init+0x24>
   31a8e:	4809      	ldr	r0, [pc, #36]	; (31ab4 <dfu_target_mcuboot_init+0x54>)
   31a90:	4c09      	ldr	r4, [pc, #36]	; (31ab8 <dfu_target_mcuboot_init+0x58>)
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   31a92:	f44f 23ee 	mov.w	r3, #487424	; 0x77000
   31a96:	1a24      	subs	r4, r4, r0
   31a98:	08e4      	lsrs	r4, r4, #3
   31a9a:	01a4      	lsls	r4, r4, #6
   31a9c:	f044 0001 	orr.w	r0, r4, #1
   31aa0:	462a      	mov	r2, r5
   31aa2:	4907      	ldr	r1, [pc, #28]	; (31ac0 <dfu_target_mcuboot_init+0x60>)
   31aa4:	f00f febc 	bl	41820 <log_string_sync>
		return -EFBIG;
   31aa8:	f06f 041a 	mvn.w	r4, #26
   31aac:	e7ea      	b.n	31a84 <dfu_target_mcuboot_init+0x24>
   31aae:	bf00      	nop
   31ab0:	20025528 	.word	0x20025528
   31ab4:	000463bc 	.word	0x000463bc
   31ab8:	00046424 	.word	0x00046424
   31abc:	0004e0dd 	.word	0x0004e0dd
   31ac0:	0004e0f5 	.word	0x0004e0f5

00031ac4 <dfu_target_mcuboot_offset_get>:
{
   31ac4:	b510      	push	{r4, lr}
   31ac6:	4604      	mov	r4, r0
	*out = flash_img_bytes_written(&flash_img);
   31ac8:	4802      	ldr	r0, [pc, #8]	; (31ad4 <dfu_target_mcuboot_offset_get+0x10>)
   31aca:	f010 f9f1 	bl	41eb0 <flash_img_bytes_written>
   31ace:	6020      	str	r0, [r4, #0]
}
   31ad0:	2000      	movs	r0, #0
   31ad2:	bd10      	pop	{r4, pc}
   31ad4:	20025528 	.word	0x20025528

00031ad8 <dfu_target_mcuboot_write>:
{
   31ad8:	460a      	mov	r2, r1
   31ada:	b510      	push	{r4, lr}
	int err = flash_img_buffered_write(&flash_img, (uint8_t *)buf, len, false);
   31adc:	4601      	mov	r1, r0
   31ade:	2300      	movs	r3, #0
   31ae0:	4808      	ldr	r0, [pc, #32]	; (31b04 <dfu_target_mcuboot_write+0x2c>)
   31ae2:	f010 f9c8 	bl	41e76 <flash_img_buffered_write>
	if (err != 0) {
   31ae6:	4604      	mov	r4, r0
   31ae8:	b150      	cbz	r0, 31b00 <dfu_target_mcuboot_write+0x28>
   31aea:	4807      	ldr	r0, [pc, #28]	; (31b08 <dfu_target_mcuboot_write+0x30>)
   31aec:	4b07      	ldr	r3, [pc, #28]	; (31b0c <dfu_target_mcuboot_write+0x34>)
		LOG_ERR("flash_img_buffered_write error %d", err);
   31aee:	4622      	mov	r2, r4
   31af0:	1a1b      	subs	r3, r3, r0
   31af2:	08db      	lsrs	r3, r3, #3
   31af4:	019b      	lsls	r3, r3, #6
   31af6:	4906      	ldr	r1, [pc, #24]	; (31b10 <dfu_target_mcuboot_write+0x38>)
   31af8:	f043 0001 	orr.w	r0, r3, #1
   31afc:	f00f fe90 	bl	41820 <log_string_sync>
}
   31b00:	4620      	mov	r0, r4
   31b02:	bd10      	pop	{r4, pc}
   31b04:	20025528 	.word	0x20025528
   31b08:	000463bc 	.word	0x000463bc
   31b0c:	00046424 	.word	0x00046424
   31b10:	0004e127 	.word	0x0004e127

00031b14 <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   31b14:	b538      	push	{r3, r4, r5, lr}
   31b16:	4d15      	ldr	r5, [pc, #84]	; (31b6c <dfu_target_mcuboot_done+0x58>)
   31b18:	4b15      	ldr	r3, [pc, #84]	; (31b70 <dfu_target_mcuboot_done+0x5c>)
   31b1a:	1aed      	subs	r5, r5, r3
   31b1c:	08ed      	lsrs	r5, r5, #3
   31b1e:	01ad      	lsls	r5, r5, #6
	int err = 0;

	if (successful) {
   31b20:	b308      	cbz	r0, 31b66 <dfu_target_mcuboot_done+0x52>
		err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   31b22:	2200      	movs	r2, #0
   31b24:	2301      	movs	r3, #1
   31b26:	4611      	mov	r1, r2
   31b28:	4812      	ldr	r0, [pc, #72]	; (31b74 <dfu_target_mcuboot_done+0x60>)
   31b2a:	f010 f9a4 	bl	41e76 <flash_img_buffered_write>
		if (err != 0) {
   31b2e:	4604      	mov	r4, r0
   31b30:	b148      	cbz	r0, 31b46 <dfu_target_mcuboot_done+0x32>
			LOG_ERR("flash_img_buffered_write error %d", err);
   31b32:	4602      	mov	r2, r0
   31b34:	4910      	ldr	r1, [pc, #64]	; (31b78 <dfu_target_mcuboot_done+0x64>)
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   31b36:	f045 0001 	orr.w	r0, r5, #1
   31b3a:	f00f fe71 	bl	41820 <log_string_sync>
			reset_flash_context();
   31b3e:	f7ff ff6d 	bl	31a1c <reset_flash_context>
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	reset_flash_context();
	return err;
}
   31b42:	4620      	mov	r0, r4
   31b44:	bd38      	pop	{r3, r4, r5, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   31b46:	f7f3 fb61 	bl	2520c <boot_request_upgrade>
		if (err != 0) {
   31b4a:	4604      	mov	r4, r0
   31b4c:	b110      	cbz	r0, 31b54 <dfu_target_mcuboot_done+0x40>
			LOG_ERR("boot_request_upgrade error %d", err);
   31b4e:	4602      	mov	r2, r0
   31b50:	490a      	ldr	r1, [pc, #40]	; (31b7c <dfu_target_mcuboot_done+0x68>)
   31b52:	e7f0      	b.n	31b36 <dfu_target_mcuboot_done+0x22>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   31b54:	490a      	ldr	r1, [pc, #40]	; (31b80 <dfu_target_mcuboot_done+0x6c>)
		LOG_INF("MCUBoot image upgrade aborted.");
   31b56:	f045 0003 	orr.w	r0, r5, #3
   31b5a:	f00f fe61 	bl	41820 <log_string_sync>
	return err;
   31b5e:	2400      	movs	r4, #0
	reset_flash_context();
   31b60:	f7ff ff5c 	bl	31a1c <reset_flash_context>
	return err;
   31b64:	e7ed      	b.n	31b42 <dfu_target_mcuboot_done+0x2e>
		LOG_INF("MCUBoot image upgrade aborted.");
   31b66:	4907      	ldr	r1, [pc, #28]	; (31b84 <dfu_target_mcuboot_done+0x70>)
   31b68:	e7f5      	b.n	31b56 <dfu_target_mcuboot_done+0x42>
   31b6a:	bf00      	nop
   31b6c:	00046424 	.word	0x00046424
   31b70:	000463bc 	.word	0x000463bc
   31b74:	20025528 	.word	0x20025528
   31b78:	0004e127 	.word	0x0004e127
   31b7c:	0004e149 	.word	0x0004e149
   31b80:	0004e167 	.word	0x0004e167
   31b84:	0004e1a2 	.word	0x0004e1a2

00031b88 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   31b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31b8c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   31b8e:	4c21      	ldr	r4, [pc, #132]	; (31c14 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   31b90:	4e21      	ldr	r6, [pc, #132]	; (31c18 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31b92:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   31b96:	f8df 9088 	ldr.w	r9, [pc, #136]	; 31c20 <check_ext_api_requests+0x98>
{
   31b9a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31b9c:	45a8      	cmp	r8, r5
   31b9e:	d803      	bhi.n	31ba8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   31ba0:	2000      	movs	r0, #0
   31ba2:	b005      	add	sp, #20
   31ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   31ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   31baa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   31bae:	681f      	ldr	r7, [r3, #0]
   31bb0:	ab01      	add	r3, sp, #4
   31bb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   31bb6:	220c      	movs	r2, #12
   31bb8:	4619      	mov	r1, r3
   31bba:	4638      	mov	r0, r7
   31bbc:	f013 f885 	bl	44cca <memcmp>
   31bc0:	b990      	cbnz	r0, 31be8 <check_ext_api_requests+0x60>
   31bc2:	b18f      	cbz	r7, 31be8 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   31bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   31bc6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   31bc8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   31bca:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   31bcc:	4291      	cmp	r1, r2
   31bce:	d10b      	bne.n	31be8 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   31bd0:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   31bd2:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   31bd4:	4291      	cmp	r1, r2
   31bd6:	d807      	bhi.n	31be8 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   31bd8:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   31bda:	4291      	cmp	r1, r2
   31bdc:	d904      	bls.n	31be8 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   31bde:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   31be0:	695b      	ldr	r3, [r3, #20]
   31be2:	ea32 0303 	bics.w	r3, r2, r3
   31be6:	d00a      	beq.n	31bfe <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   31be8:	6a27      	ldr	r7, [r4, #32]
   31bea:	b167      	cbz	r7, 31c06 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   31bec:	480b      	ldr	r0, [pc, #44]	; (31c1c <check_ext_api_requests+0x94>)
   31bee:	f00f fbe9 	bl	413c4 <printk>
			k_panic();
   31bf2:	4040      	eors	r0, r0
   31bf4:	f380 8811 	msr	BASEPRI, r0
   31bf8:	f04f 0004 	mov.w	r0, #4
   31bfc:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   31bfe:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31c00:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   31c02:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31c04:	e7ca      	b.n	31b9c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   31c06:	4648      	mov	r0, r9
   31c08:	f00f fbdc 	bl	413c4 <printk>
			*ext_api_req->ext_api = NULL;
   31c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   31c0e:	601f      	str	r7, [r3, #0]
   31c10:	e7f5      	b.n	31bfe <check_ext_api_requests+0x76>
   31c12:	bf00      	nop
   31c14:	0001c43c 	.word	0x0001c43c
   31c18:	00046580 	.word	0x00046580
   31c1c:	0004e1d4 	.word	0x0004e1d4
   31c20:	0004e1fd 	.word	0x0004e1fd

00031c24 <sensor_sim_channel_get>:

static int sensor_sim_channel_get(const struct device *dev,
				  enum sensor_channel chan,
				  struct sensor_value *sample)
{
   31c24:	b538      	push	{r3, r4, r5, lr}
   31c26:	4614      	mov	r4, r2
   31c28:	2910      	cmp	r1, #16
   31c2a:	d82f      	bhi.n	31c8c <sensor_sim_channel_get+0x68>
   31c2c:	e8df f001 	tbb	[pc, r1]
   31c30:	18140d09 	.word	0x18140d09
   31c34:	2e2e2e2e 	.word	0x2e2e2e2e
   31c38:	2e2e2e2e 	.word	0x2e2e2e2e
   31c3c:	2e2c282e 	.word	0x2e2c282e
   31c40:	2a          	.byte	0x2a
   31c41:	00          	.byte	0x00
	switch (chan) {
	case SENSOR_CHAN_ACCEL_X:
		double_to_sensor_value(accel_samples[0], sample);
   31c42:	4b14      	ldr	r3, [pc, #80]	; (31c94 <sensor_sim_channel_get+0x70>)
		break;
	case SENSOR_CHAN_HUMIDITY:
		double_to_sensor_value(humidity_sample, sample);
		break;
	case SENSOR_CHAN_PRESS:
		double_to_sensor_value(pressure_sample, sample);
   31c44:	e9d3 0100 	ldrd	r0, r1, [r3]
   31c48:	e002      	b.n	31c50 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[1], sample);
   31c4a:	4b12      	ldr	r3, [pc, #72]	; (31c94 <sensor_sim_channel_get+0x70>)
   31c4c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
		double_to_sensor_value(pressure_sample, sample);
   31c50:	f7ec f9b2 	bl	1dfb8 <double_to_sensor_value>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   31c54:	2000      	movs	r0, #0
}
   31c56:	bd38      	pop	{r3, r4, r5, pc}
		double_to_sensor_value(accel_samples[2], sample);
   31c58:	4b0e      	ldr	r3, [pc, #56]	; (31c94 <sensor_sim_channel_get+0x70>)
   31c5a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   31c5e:	e7f7      	b.n	31c50 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[0], sample);
   31c60:	4d0c      	ldr	r5, [pc, #48]	; (31c94 <sensor_sim_channel_get+0x70>)
   31c62:	e9d5 0100 	ldrd	r0, r1, [r5]
   31c66:	f7ec f9a7 	bl	1dfb8 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[1], ++sample);
   31c6a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   31c6e:	f104 0208 	add.w	r2, r4, #8
   31c72:	f7ec f9a1 	bl	1dfb8 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[2], ++sample);
   31c76:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   31c7a:	f104 0210 	add.w	r2, r4, #16
   31c7e:	e7e7      	b.n	31c50 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(temp_sample, sample);
   31c80:	4b05      	ldr	r3, [pc, #20]	; (31c98 <sensor_sim_channel_get+0x74>)
   31c82:	e7df      	b.n	31c44 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(humidity_sample, sample);
   31c84:	4b05      	ldr	r3, [pc, #20]	; (31c9c <sensor_sim_channel_get+0x78>)
   31c86:	e7dd      	b.n	31c44 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(pressure_sample, sample);
   31c88:	4b05      	ldr	r3, [pc, #20]	; (31ca0 <sensor_sim_channel_get+0x7c>)
   31c8a:	e7db      	b.n	31c44 <sensor_sim_channel_get+0x20>
	return 0;
   31c8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   31c90:	e7e1      	b.n	31c56 <sensor_sim_channel_get+0x32>
   31c92:	bf00      	nop
   31c94:	20023688 	.word	0x20023688
   31c98:	200239b0 	.word	0x200239b0
   31c9c:	200236a0 	.word	0x200236a0
   31ca0:	200236a8 	.word	0x200236a8

00031ca4 <sensor_sim_trigger_set>:
{
   31ca4:	b508      	push	{r3, lr}
	struct sensor_sim_data *drv_data = dev->data;
   31ca6:	68c3      	ldr	r3, [r0, #12]
	switch (trig->type) {
   31ca8:	8808      	ldrh	r0, [r1, #0]
   31caa:	2801      	cmp	r0, #1
   31cac:	d104      	bne.n	31cb8 <sensor_sim_trigger_set+0x14>
		drv_data->drdy_trigger = *trig;
   31cae:	6808      	ldr	r0, [r1, #0]
		drv_data->drdy_handler = handler;
   31cb0:	631a      	str	r2, [r3, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   31cb2:	6358      	str	r0, [r3, #52]	; 0x34
	int ret = 0;
   31cb4:	2000      	movs	r0, #0
}
   31cb6:	bd08      	pop	{r3, pc}
   31cb8:	4b06      	ldr	r3, [pc, #24]	; (31cd4 <sensor_sim_trigger_set+0x30>)
   31cba:	4807      	ldr	r0, [pc, #28]	; (31cd8 <sensor_sim_trigger_set+0x34>)
		LOG_ERR("Unsupported sensor trigger");
   31cbc:	4907      	ldr	r1, [pc, #28]	; (31cdc <sensor_sim_trigger_set+0x38>)
   31cbe:	1ac0      	subs	r0, r0, r3
   31cc0:	08c0      	lsrs	r0, r0, #3
   31cc2:	0180      	lsls	r0, r0, #6
   31cc4:	f040 0001 	orr.w	r0, r0, #1
   31cc8:	f00f fdaa 	bl	41820 <log_string_sync>
	return ret;
   31ccc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   31cd0:	e7f1      	b.n	31cb6 <sensor_sim_trigger_set+0x12>
   31cd2:	bf00      	nop
   31cd4:	000463bc 	.word	0x000463bc
   31cd8:	000464dc 	.word	0x000464dc
   31cdc:	0004e230 	.word	0x0004e230

00031ce0 <generate_sine.constprop.0>:
static double generate_sine(double offset, double amplitude)
   31ce0:	e92d 4800 	stmdb	sp!, {fp, lr}
	return z_impl_k_uptime_ticks();
   31ce4:	f012 ff25 	bl	44b32 <z_impl_k_uptime_ticks>
   31ce8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   31cec:	fba0 bc03 	umull	fp, ip, r0, r3
   31cf0:	fb03 cc01 	mla	ip, r3, r1, ip
	return offset + amplitude * sin(time % 65535);
   31cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   31cf8:	ea4f 30db 	mov.w	r0, fp, lsr #15
   31cfc:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
   31d00:	fbb0 f3f3 	udiv	r3, r0, r3
   31d04:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
   31d08:	1ac0      	subs	r0, r0, r3
   31d0a:	f7ea fcdb 	bl	1c6c4 <__aeabi_ui2d>
   31d0e:	ec41 0b10 	vmov	d0, r0, r1
   31d12:	f7ec fa39 	bl	1e188 <sin>
   31d16:	2200      	movs	r2, #0
   31d18:	ec51 0b10 	vmov	r0, r1, d0
   31d1c:	4b04      	ldr	r3, [pc, #16]	; (31d30 <generate_sine.constprop.0+0x50>)
   31d1e:	f7ea fd4b 	bl	1c7b8 <__aeabi_dmul>
   31d22:	2200      	movs	r2, #0
   31d24:	2300      	movs	r3, #0
   31d26:	f7ea fb91 	bl	1c44c <__adddf3>
}
   31d2a:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
   31d2e:	bf00      	nop
   31d30:	40340000 	.word	0x40340000

00031d34 <sensor_sim_init>:
{
   31d34:	b530      	push	{r4, r5, lr}
	struct sensor_sim_data *drv_data = dev->data;
   31d36:	68c5      	ldr	r5, [r0, #12]
{
   31d38:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   31d3a:	2200      	movs	r2, #0
   31d3c:	2300      	movs	r3, #0
   31d3e:	2400      	movs	r4, #0
   31d40:	e9cd 2306 	strd	r2, r3, [sp, #24]
   31d44:	f06f 0305 	mvn.w	r3, #5
   31d48:	f44f 7200 	mov.w	r2, #512	; 0x200
   31d4c:	f105 0138 	add.w	r1, r5, #56	; 0x38
   31d50:	e9cd 3403 	strd	r3, r4, [sp, #12]
   31d54:	9000      	str	r0, [sp, #0]
   31d56:	4b07      	ldr	r3, [pc, #28]	; (31d74 <sensor_sim_init+0x40>)
   31d58:	e9cd 4401 	strd	r4, r4, [sp, #4]
   31d5c:	f505 700e 	add.w	r0, r5, #568	; 0x238
   31d60:	f00c f80c 	bl	3dd7c <z_impl_k_thread_create>
   31d64:	f7f4 fe52 	bl	26a0c <z_timer_cycle_get_32>
	srand(k_cycle_get_32());
   31d68:	f00d fea0 	bl	3faac <srand>
}
   31d6c:	4620      	mov	r0, r4
   31d6e:	b009      	add	sp, #36	; 0x24
   31d70:	bd30      	pop	{r4, r5, pc}
   31d72:	bf00      	nop
   31d74:	00044827 	.word	0x00044827

00031d78 <gps_priority_set.isra.0>:
{
	k_delayed_work_cancel(&drv_data->timeout_work);
	k_delayed_work_cancel(&drv_data->blocked_work);
}

static int gps_priority_set(struct gps_drv_data *drv_data, bool enable)
   31d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	int retval;
	nrf_gnss_delete_mask_t delete_mask = 0;
   31d7a:	2300      	movs	r3, #0
static int gps_priority_set(struct gps_drv_data *drv_data, bool enable)
   31d7c:	4604      	mov	r4, r0
	nrf_gnss_delete_mask_t delete_mask = 0;
   31d7e:	9303      	str	r3, [sp, #12]

	if (enable) {
   31d80:	6800      	ldr	r0, [r0, #0]
   31d82:	b359      	cbz	r1, 31ddc <gps_priority_set.isra.0+0x64>
		retval = nrf_setsockopt(drv_data->socket,
   31d84:	220a      	movs	r2, #10
   31d86:	f44f 7101 	mov.w	r1, #516	; 0x204
   31d8a:	9300      	str	r3, [sp, #0]
   31d8c:	f007 fcca 	bl	39724 <nrf_setsockopt>
					NRF_SOL_GNSS,
					NRF_SO_GNSS_ENABLE_PRIORITY, NULL, 0);
		if (retval != 0) {
   31d90:	b118      	cbz	r0, 31d9a <gps_priority_set.isra.0+0x22>
				NRF_SO_GNSS_START,
				&delete_mask,
				sizeof(delete_mask));
	if (retval != 0) {
		LOG_ERR("Failed to start GPS");
		return -EIO;
   31d92:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   31d96:	b004      	add	sp, #16
   31d98:	bd10      	pop	{r4, pc}
   31d9a:	4b19      	ldr	r3, [pc, #100]	; (31e00 <gps_priority_set.isra.0+0x88>)
   31d9c:	4819      	ldr	r0, [pc, #100]	; (31e04 <gps_priority_set.isra.0+0x8c>)
		LOG_DBG("GPS priority enabled");
   31d9e:	4a1a      	ldr	r2, [pc, #104]	; (31e08 <gps_priority_set.isra.0+0x90>)
   31da0:	1a1b      	subs	r3, r3, r0
   31da2:	08db      	lsrs	r3, r3, #3
   31da4:	4919      	ldr	r1, [pc, #100]	; (31e0c <gps_priority_set.isra.0+0x94>)
   31da6:	019b      	lsls	r3, r3, #6
		LOG_DBG("GPS priority disabled");
   31da8:	f043 0004 	orr.w	r0, r3, #4
   31dac:	f00f fd38 	bl	41820 <log_string_sync>
	retval = nrf_setsockopt(drv_data->socket,
   31db0:	2304      	movs	r3, #4
   31db2:	2207      	movs	r2, #7
   31db4:	9300      	str	r3, [sp, #0]
   31db6:	f44f 7101 	mov.w	r1, #516	; 0x204
   31dba:	6820      	ldr	r0, [r4, #0]
   31dbc:	ab03      	add	r3, sp, #12
   31dbe:	f007 fcb1 	bl	39724 <nrf_setsockopt>
	if (retval != 0) {
   31dc2:	2800      	cmp	r0, #0
   31dc4:	d0e7      	beq.n	31d96 <gps_priority_set.isra.0+0x1e>
   31dc6:	4b0f      	ldr	r3, [pc, #60]	; (31e04 <gps_priority_set.isra.0+0x8c>)
   31dc8:	480d      	ldr	r0, [pc, #52]	; (31e00 <gps_priority_set.isra.0+0x88>)
		LOG_ERR("Failed to start GPS");
   31dca:	4911      	ldr	r1, [pc, #68]	; (31e10 <gps_priority_set.isra.0+0x98>)
   31dcc:	1ac0      	subs	r0, r0, r3
   31dce:	08c0      	lsrs	r0, r0, #3
   31dd0:	0180      	lsls	r0, r0, #6
   31dd2:	f040 0001 	orr.w	r0, r0, #1
   31dd6:	f00f fd23 	bl	41820 <log_string_sync>
   31dda:	e7da      	b.n	31d92 <gps_priority_set.isra.0+0x1a>
		retval = nrf_setsockopt(drv_data->socket,
   31ddc:	460b      	mov	r3, r1
   31dde:	9100      	str	r1, [sp, #0]
   31de0:	220b      	movs	r2, #11
   31de2:	f44f 7101 	mov.w	r1, #516	; 0x204
   31de6:	f007 fc9d 	bl	39724 <nrf_setsockopt>
		if (retval != 0) {
   31dea:	2800      	cmp	r0, #0
   31dec:	d1d1      	bne.n	31d92 <gps_priority_set.isra.0+0x1a>
   31dee:	4b04      	ldr	r3, [pc, #16]	; (31e00 <gps_priority_set.isra.0+0x88>)
   31df0:	4804      	ldr	r0, [pc, #16]	; (31e04 <gps_priority_set.isra.0+0x8c>)
		LOG_DBG("GPS priority disabled");
   31df2:	4a05      	ldr	r2, [pc, #20]	; (31e08 <gps_priority_set.isra.0+0x90>)
   31df4:	1a1b      	subs	r3, r3, r0
   31df6:	08db      	lsrs	r3, r3, #3
   31df8:	4906      	ldr	r1, [pc, #24]	; (31e14 <gps_priority_set.isra.0+0x9c>)
   31dfa:	019b      	lsls	r3, r3, #6
   31dfc:	e7d4      	b.n	31da8 <gps_priority_set.isra.0+0x30>
   31dfe:	bf00      	nop
   31e00:	0004649c 	.word	0x0004649c
   31e04:	000463bc 	.word	0x000463bc
   31e08:	0004e921 	.word	0x0004e921
   31e0c:	0004e256 	.word	0x0004e256
   31e10:	0004e289 	.word	0x0004e289
   31e14:	0004e26f 	.word	0x0004e26f

00031e18 <blocked_work_fn>:
	atomic_set(&drv_data->timeout_occurred, 1);
	notify_event(dev, &evt);
}

static void blocked_work_fn(struct k_work *work)
{
   31e18:	b508      	push	{r3, lr}
	int retval;
	struct gps_drv_data *drv_data =
		CONTAINER_OF(work, struct gps_drv_data, blocked_work);

	retval = gps_priority_set(drv_data, true);
   31e1a:	2101      	movs	r1, #1
   31e1c:	f5a0 6015 	sub.w	r0, r0, #2384	; 0x950
   31e20:	f7ff ffaa 	bl	31d78 <gps_priority_set.isra.0>
	if (retval != 0) {
   31e24:	b160      	cbz	r0, 31e40 <blocked_work_fn+0x28>
   31e26:	4a07      	ldr	r2, [pc, #28]	; (31e44 <blocked_work_fn+0x2c>)
   31e28:	4b07      	ldr	r3, [pc, #28]	; (31e48 <blocked_work_fn+0x30>)
		LOG_ERR("Failed to set GPS priority, error: %d", retval);
   31e2a:	4908      	ldr	r1, [pc, #32]	; (31e4c <blocked_work_fn+0x34>)
   31e2c:	1a9b      	subs	r3, r3, r2
   31e2e:	08db      	lsrs	r3, r3, #3
   31e30:	019b      	lsls	r3, r3, #6
   31e32:	4602      	mov	r2, r0
   31e34:	f043 0001 	orr.w	r0, r3, #1
	}
}
   31e38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Failed to set GPS priority, error: %d", retval);
   31e3c:	f00f bcf0 	b.w	41820 <log_string_sync>
}
   31e40:	bd08      	pop	{r3, pc}
   31e42:	bf00      	nop
   31e44:	000463bc 	.word	0x000463bc
   31e48:	0004649c 	.word	0x0004649c
   31e4c:	0004e29d 	.word	0x0004e29d

00031e50 <open_socket.isra.0>:
static int open_socket(struct gps_drv_data *drv_data)
   31e50:	b510      	push	{r4, lr}
	drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   31e52:	f44f 7201 	mov.w	r2, #516	; 0x204
static int open_socket(struct gps_drv_data *drv_data)
   31e56:	4604      	mov	r4, r0
	drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   31e58:	2102      	movs	r1, #2
   31e5a:	2001      	movs	r0, #1
   31e5c:	f007 fb7a 	bl	39554 <nrf_socket>
   31e60:	4603      	mov	r3, r0
   31e62:	6020      	str	r0, [r4, #0]
	if (drv_data->socket >= 0) {
   31e64:	4c0e      	ldr	r4, [pc, #56]	; (31ea0 <open_socket.isra.0+0x50>)
   31e66:	480f      	ldr	r0, [pc, #60]	; (31ea4 <open_socket.isra.0+0x54>)
   31e68:	2b00      	cmp	r3, #0
   31e6a:	eba4 0400 	sub.w	r4, r4, r0
   31e6e:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   31e72:	ea4f 1484 	mov.w	r4, r4, lsl #6
   31e76:	db07      	blt.n	31e88 <open_socket.isra.0+0x38>
		LOG_DBG("GPS socket created, fd: %d", drv_data->socket);
   31e78:	f044 0004 	orr.w	r0, r4, #4
   31e7c:	4a0a      	ldr	r2, [pc, #40]	; (31ea8 <open_socket.isra.0+0x58>)
   31e7e:	490b      	ldr	r1, [pc, #44]	; (31eac <open_socket.isra.0+0x5c>)
   31e80:	f00f fcce 	bl	41820 <log_string_sync>
	return 0;
   31e84:	2000      	movs	r0, #0
}
   31e86:	bd10      	pop	{r4, pc}
		LOG_ERR("Could not initialize socket, error: %d)",
   31e88:	f010 fbf3 	bl	42672 <__errno>
   31e8c:	f044 0401 	orr.w	r4, r4, #1
   31e90:	6802      	ldr	r2, [r0, #0]
   31e92:	4907      	ldr	r1, [pc, #28]	; (31eb0 <open_socket.isra.0+0x60>)
   31e94:	4620      	mov	r0, r4
   31e96:	f00f fcc3 	bl	41820 <log_string_sync>
		return -EIO;
   31e9a:	f06f 0004 	mvn.w	r0, #4
   31e9e:	e7f2      	b.n	31e86 <open_socket.isra.0+0x36>
   31ea0:	0004649c 	.word	0x0004649c
   31ea4:	000463bc 	.word	0x000463bc
   31ea8:	0004e915 	.word	0x0004e915
   31eac:	0004e2c3 	.word	0x0004e2c3
   31eb0:	0004e2e2 	.word	0x0004e2e2

00031eb4 <agps_write>:

static int agps_write(const struct device *dev, enum gps_agps_type type,
		      void *data, size_t data_len)
{
   31eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   31eb6:	460c      	mov	r4, r1
   31eb8:	4611      	mov	r1, r2
   31eba:	461a      	mov	r2, r3
	int err;
	struct gps_drv_data *drv_data = dev->data;
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   31ebc:	4b18      	ldr	r3, [pc, #96]	; (31f20 <agps_write+0x6c>)
	struct gps_drv_data *drv_data = dev->data;
   31ebe:	68c0      	ldr	r0, [r0, #12]
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   31ec0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   31ec4:	f8ad 300e 	strh.w	r3, [sp, #14]

	err = nrf_sendto(drv_data->socket, data, data_len, 0, &data_type,
   31ec8:	2302      	movs	r3, #2
   31eca:	9301      	str	r3, [sp, #4]
   31ecc:	f10d 030e 	add.w	r3, sp, #14
   31ed0:	9300      	str	r3, [sp, #0]
   31ed2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   31ed4:	2300      	movs	r3, #0
   31ed6:	f007 fb5d 	bl	39594 <nrf_sendto>
			 sizeof(data_type));
	if (err < 0) {
   31eda:	4b12      	ldr	r3, [pc, #72]	; (31f24 <agps_write+0x70>)
   31edc:	4a12      	ldr	r2, [pc, #72]	; (31f28 <agps_write+0x74>)
   31ede:	2800      	cmp	r0, #0
   31ee0:	eba3 0302 	sub.w	r3, r3, r2
   31ee4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   31ee8:	ea4f 1083 	mov.w	r0, r3, lsl #6
   31eec:	da0e      	bge.n	31f0c <agps_write+0x58>
		LOG_ERR("Failed to send A-GPS data to modem, errno: %d", errno);
   31eee:	f040 0401 	orr.w	r4, r0, #1
   31ef2:	f010 fbbe 	bl	42672 <__errno>
   31ef6:	490d      	ldr	r1, [pc, #52]	; (31f2c <agps_write+0x78>)
   31ef8:	6802      	ldr	r2, [r0, #0]
   31efa:	4620      	mov	r0, r4
   31efc:	f00f fc90 	bl	41820 <log_string_sync>
		return -errno;
   31f00:	f010 fbb7 	bl	42672 <__errno>
   31f04:	6800      	ldr	r0, [r0, #0]
   31f06:	4240      	negs	r0, r0
	}

	LOG_DBG("Sent A-GPS data to modem, type: %d", type);

	return 0;
}
   31f08:	b004      	add	sp, #16
   31f0a:	bd10      	pop	{r4, pc}
	LOG_DBG("Sent A-GPS data to modem, type: %d", type);
   31f0c:	f040 0004 	orr.w	r0, r0, #4
   31f10:	4623      	mov	r3, r4
   31f12:	4a07      	ldr	r2, [pc, #28]	; (31f30 <agps_write+0x7c>)
   31f14:	4907      	ldr	r1, [pc, #28]	; (31f34 <agps_write+0x80>)
   31f16:	f00f fc83 	bl	41820 <log_string_sync>
	return 0;
   31f1a:	2000      	movs	r0, #0
   31f1c:	e7f4      	b.n	31f08 <agps_write+0x54>
   31f1e:	bf00      	nop
   31f20:	00047518 	.word	0x00047518
   31f24:	0004649c 	.word	0x0004649c
   31f28:	000463bc 	.word	0x000463bc
   31f2c:	0004e30a 	.word	0x0004e30a
   31f30:	0004e969 	.word	0x0004e969
   31f34:	0004e338 	.word	0x0004e338

00031f38 <start>:
	struct nrf9160_gps_config gps_cfg = { 0 };
   31f38:	2210      	movs	r2, #16
{
   31f3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gps_drv_data *drv_data = dev->data;
   31f3e:	68c6      	ldr	r6, [r0, #12]
{
   31f40:	b089      	sub	sp, #36	; 0x24
	struct nrf9160_gps_config gps_cfg = { 0 };
   31f42:	eb0d 0002 	add.w	r0, sp, r2
{
   31f46:	460d      	mov	r5, r1
	struct nrf9160_gps_config gps_cfg = { 0 };
   31f48:	2100      	movs	r1, #0
   31f4a:	f012 feec 	bl	44d26 <memset>
	if (atomic_get(&drv_data->is_shutdown) == 1) {
   31f4e:	f106 0020 	add.w	r0, r6, #32
   31f52:	f012 fc91 	bl	44878 <atomic_get>
   31f56:	2801      	cmp	r0, #1
   31f58:	f000 8151 	beq.w	321fe <start+0x2c6>
	if (atomic_get(&drv_data->is_active)) {
   31f5c:	f106 071c 	add.w	r7, r6, #28
   31f60:	4638      	mov	r0, r7
   31f62:	f012 fc89 	bl	44878 <atomic_get>
   31f66:	4ca7      	ldr	r4, [pc, #668]	; (32204 <start+0x2cc>)
   31f68:	4ba7      	ldr	r3, [pc, #668]	; (32208 <start+0x2d0>)
   31f6a:	1ae4      	subs	r4, r4, r3
   31f6c:	08e4      	lsrs	r4, r4, #3
   31f6e:	b170      	cbz	r0, 31f8e <start+0x56>
		LOG_DBG("GPS is already active. Clean up before restart");
   31f70:	01a0      	lsls	r0, r4, #6
   31f72:	4aa6      	ldr	r2, [pc, #664]	; (3220c <start+0x2d4>)
   31f74:	49a6      	ldr	r1, [pc, #664]	; (32210 <start+0x2d8>)
   31f76:	f040 0004 	orr.w	r0, r0, #4
   31f7a:	f00f fc51 	bl	41820 <log_string_sync>
	k_delayed_work_cancel(&drv_data->timeout_work);
   31f7e:	f606 1048 	addw	r0, r6, #2376	; 0x948
   31f82:	f00c f8b1 	bl	3e0e8 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   31f86:	f606 1078 	addw	r0, r6, #2424	; 0x978
   31f8a:	f00c f8ad 	bl	3e0e8 <k_delayed_work_cancel>
	if (atomic_get(&drv_data->is_init) != 1) {
   31f8e:	f106 0018 	add.w	r0, r6, #24
   31f92:	f012 fc71 	bl	44878 <atomic_get>
   31f96:	2801      	cmp	r0, #1
   31f98:	d00b      	beq.n	31fb2 <start+0x7a>
		LOG_WRN("GPS must be initialized first");
   31f9a:	01a4      	lsls	r4, r4, #6
   31f9c:	499d      	ldr	r1, [pc, #628]	; (32214 <start+0x2dc>)
   31f9e:	f044 0002 	orr.w	r0, r4, #2
   31fa2:	f00f fc3d 	bl	41820 <log_string_sync>
		return -ENODEV;
   31fa6:	f06f 0512 	mvn.w	r5, #18
}
   31faa:	4628      	mov	r0, r5
   31fac:	b009      	add	sp, #36	; 0x24
   31fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (cfg_src->nav_mode) {
   31fb2:	782a      	ldrb	r2, [r5, #0]
   31fb4:	2a01      	cmp	r2, #1
   31fb6:	d016      	beq.n	31fe6 <start+0xae>
   31fb8:	2a02      	cmp	r2, #2
   31fba:	d018      	beq.n	31fee <start+0xb6>
   31fbc:	bb7a      	cbnz	r2, 3201e <start+0xe6>
		cfg_dst->retry = cfg_src->timeout < 0 ? 0 : cfg_src->timeout;
   31fbe:	68ab      	ldr	r3, [r5, #8]
		cfg_dst->interval = 0;
   31fc0:	f8ad 2012 	strh.w	r2, [sp, #18]
		cfg_dst->retry = cfg_src->timeout < 0 ? 0 : cfg_src->timeout;
   31fc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   31fc8:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (cfg_src->delete_agps_data) {
   31fcc:	7b2b      	ldrb	r3, [r5, #12]
   31fce:	b10b      	cbz	r3, 31fd4 <start+0x9c>
		cfg_dst->delete_mask = 0xFF;
   31fd0:	23ff      	movs	r3, #255	; 0xff
   31fd2:	9306      	str	r3, [sp, #24]
	*nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   31fd4:	2301      	movs	r3, #1
   31fd6:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (cfg_src->power_mode == GPS_POWER_MODE_PERFORMANCE) {
   31fda:	786b      	ldrb	r3, [r5, #1]
   31fdc:	2b01      	cmp	r3, #1
   31fde:	d125      	bne.n	3202c <start+0xf4>
		cfg_dst->power_mode = NRF_GNSS_PSM_DUTY_CYCLING_POWER;
   31fe0:	f88d 301c 	strb.w	r3, [sp, #28]
   31fe4:	e024      	b.n	32030 <start+0xf8>
		cfg_dst->retry = 0;
   31fe6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   31fea:	9304      	str	r3, [sp, #16]
		break;
   31fec:	e7ee      	b.n	31fcc <start+0x94>
		if (cfg_src->interval < 10) {
   31fee:	686b      	ldr	r3, [r5, #4]
   31ff0:	2b09      	cmp	r3, #9
   31ff2:	d80e      	bhi.n	32012 <start+0xda>
			LOG_ERR("Minimum periodic interval is 10 sec");
   31ff4:	01a0      	lsls	r0, r4, #6
   31ff6:	4988      	ldr	r1, [pc, #544]	; (32218 <start+0x2e0>)
   31ff8:	f040 0001 	orr.w	r0, r0, #1
   31ffc:	f00f fc10 	bl	41820 <log_string_sync>
		LOG_ERR("Invalid GPS configuration");
   32000:	01a4      	lsls	r4, r4, #6
   32002:	4986      	ldr	r1, [pc, #536]	; (3221c <start+0x2e4>)
   32004:	f044 0001 	orr.w	r0, r4, #1
   32008:	f00f fc0a 	bl	41820 <log_string_sync>
		return err;
   3200c:	f06f 0515 	mvn.w	r5, #21
   32010:	e7cb      	b.n	31faa <start+0x72>
		cfg_dst->retry = cfg_src->timeout;
   32012:	68aa      	ldr	r2, [r5, #8]
		cfg_dst->interval = cfg_src->interval;
   32014:	f8ad 3012 	strh.w	r3, [sp, #18]
		cfg_dst->retry = cfg_src->timeout;
   32018:	f8ad 2010 	strh.w	r2, [sp, #16]
		break;
   3201c:	e7d6      	b.n	31fcc <start+0x94>
		LOG_ERR("Invalid operation mode (%d), GPS will not start",
   3201e:	01a0      	lsls	r0, r4, #6
   32020:	497f      	ldr	r1, [pc, #508]	; (32220 <start+0x2e8>)
   32022:	f040 0001 	orr.w	r0, r0, #1
   32026:	f00f fbfb 	bl	41820 <log_string_sync>
	if (err) {
   3202a:	e7e9      	b.n	32000 <start+0xc8>
	} else if (cfg_src->power_mode == GPS_POWER_MODE_SAVE) {
   3202c:	2b02      	cmp	r3, #2
   3202e:	d0d7      	beq.n	31fe0 <start+0xa8>
	cfg_dst->priority = cfg_src->priority;
   32030:	7b6b      	ldrb	r3, [r5, #13]
   32032:	f88d 301d 	strb.w	r3, [sp, #29]
	if (cfg != &drv_data->current_cfg) {
   32036:	f106 0308 	add.w	r3, r6, #8
   3203a:	42ab      	cmp	r3, r5
   3203c:	d10f      	bne.n	3205e <start+0x126>
	err = lte_lc_system_mode_get(&system_mode);
   3203e:	f10d 000e 	add.w	r0, sp, #14
   32042:	f7f9 fd23 	bl	2ba8c <lte_lc_system_mode_get>
	if (err) {
   32046:	01a4      	lsls	r4, r4, #6
   32048:	4602      	mov	r2, r0
   3204a:	b188      	cbz	r0, 32070 <start+0x138>
		LOG_ERR("Could not get modem system mode, error: %d", err);
   3204c:	4975      	ldr	r1, [pc, #468]	; (32224 <start+0x2ec>)
		LOG_ERR("Could not get modem's functional mode, error: %d",
   3204e:	f044 0001 	orr.w	r0, r4, #1
   32052:	f00f fbe5 	bl	41820 <log_string_sync>
		LOG_ERR("Failed to enable GPS");
   32056:	4974      	ldr	r1, [pc, #464]	; (32228 <start+0x2f0>)
		LOG_ERR("Failed to set fix interval value");
   32058:	f044 0001 	orr.w	r0, r4, #1
   3205c:	e062      	b.n	32124 <start+0x1ec>
   3205e:	f105 0210 	add.w	r2, r5, #16
   32062:	f855 1b04 	ldr.w	r1, [r5], #4
   32066:	4295      	cmp	r5, r2
   32068:	f843 1b04 	str.w	r1, [r3], #4
   3206c:	d1f9      	bne.n	32062 <start+0x12a>
   3206e:	e7e6      	b.n	3203e <start+0x106>
	    (system_mode != LTE_LC_SYSTEM_MODE_LTEM_GPS) &&
   32070:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((system_mode != LTE_LC_SYSTEM_MODE_GPS) &&
   32074:	1eda      	subs	r2, r3, #3
   32076:	2a02      	cmp	r2, #2
   32078:	d914      	bls.n	320a4 <start+0x16c>
		if (system_mode == LTE_LC_SYSTEM_MODE_LTEM) {
   3207a:	2b01      	cmp	r3, #1
   3207c:	d010      	beq.n	320a0 <start+0x168>
			new_mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   3207e:	2b02      	cmp	r3, #2
   32080:	bf14      	ite	ne
   32082:	2503      	movne	r5, #3
   32084:	2505      	moveq	r5, #5
		LOG_DBG("GPS mode is not enabled, attempting to enable it");
   32086:	4a69      	ldr	r2, [pc, #420]	; (3222c <start+0x2f4>)
   32088:	4969      	ldr	r1, [pc, #420]	; (32230 <start+0x2f8>)
   3208a:	f044 0004 	orr.w	r0, r4, #4
   3208e:	f00f fbc7 	bl	41820 <log_string_sync>
		err = lte_lc_system_mode_set(new_mode);
   32092:	4628      	mov	r0, r5
   32094:	f7f9 fc46 	bl	2b924 <lte_lc_system_mode_set>
		if (err) {
   32098:	4602      	mov	r2, r0
   3209a:	b118      	cbz	r0, 320a4 <start+0x16c>
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   3209c:	4965      	ldr	r1, [pc, #404]	; (32234 <start+0x2fc>)
   3209e:	e7d6      	b.n	3204e <start+0x116>
			new_mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   320a0:	2504      	movs	r5, #4
   320a2:	e7f0      	b.n	32086 <start+0x14e>
	LOG_DBG("GPS mode is enabled");
   320a4:	4a61      	ldr	r2, [pc, #388]	; (3222c <start+0x2f4>)
   320a6:	4964      	ldr	r1, [pc, #400]	; (32238 <start+0x300>)
   320a8:	f044 0004 	orr.w	r0, r4, #4
   320ac:	f00f fbb8 	bl	41820 <log_string_sync>
	err = lte_lc_func_mode_get(&functional_mode);
   320b0:	f10d 000f 	add.w	r0, sp, #15
   320b4:	f7f9 fe78 	bl	2bda8 <lte_lc_func_mode_get>
	if (err) {
   320b8:	4602      	mov	r2, r0
   320ba:	b108      	cbz	r0, 320c0 <start+0x188>
		LOG_ERR("Could not get modem's functional mode, error: %d",
   320bc:	495f      	ldr	r1, [pc, #380]	; (3223c <start+0x304>)
   320be:	e7c6      	b.n	3204e <start+0x116>
	if (functional_mode != LTE_LC_FUNC_MODE_NORMAL) {
   320c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   320c4:	2b01      	cmp	r3, #1
   320c6:	d005      	beq.n	320d4 <start+0x19c>
		LOG_ERR("GPS is not supported in current functional mode");
   320c8:	495d      	ldr	r1, [pc, #372]	; (32240 <start+0x308>)
   320ca:	f044 0001 	orr.w	r0, r4, #1
   320ce:	f00f fba7 	bl	41820 <log_string_sync>
		return -EIO;
   320d2:	e7c0      	b.n	32056 <start+0x11e>
	retval = nrf_setsockopt(drv_data->socket,
   320d4:	2502      	movs	r5, #2
		LOG_DBG("Failed to set fix retry value, "
   320d6:	f8df 8134 	ldr.w	r8, [pc, #308]	; 3220c <start+0x2d4>
   320da:	f8df 9188 	ldr.w	r9, [pc, #392]	; 32264 <start+0x32c>
	retval = nrf_setsockopt(drv_data->socket,
   320de:	9500      	str	r5, [sp, #0]
   320e0:	ab04      	add	r3, sp, #16
   320e2:	2202      	movs	r2, #2
   320e4:	f44f 7101 	mov.w	r1, #516	; 0x204
   320e8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   320ea:	f007 fb1b 	bl	39724 <nrf_setsockopt>
	if ((retval == -1) && ((errno == EFAULT) || (errno == EBADF))) {
   320ee:	1c43      	adds	r3, r0, #1
   320f0:	d12a      	bne.n	32148 <start+0x210>
   320f2:	f010 fabe 	bl	42672 <__errno>
   320f6:	6803      	ldr	r3, [r0, #0]
   320f8:	2b0e      	cmp	r3, #14
   320fa:	d116      	bne.n	3212a <start+0x1f2>
		nrf_close(drv_data->socket);
   320fc:	46b2      	mov	sl, r6
		LOG_DBG("Failed to set fix retry value, "
   320fe:	4642      	mov	r2, r8
   32100:	4649      	mov	r1, r9
   32102:	f044 0004 	orr.w	r0, r4, #4
   32106:	f00f fb8b 	bl	41820 <log_string_sync>
		nrf_close(drv_data->socket);
   3210a:	f85a 0f28 	ldr.w	r0, [sl, #40]!
   3210e:	f007 fa33 	bl	39578 <nrf_close>
		if (open_socket(drv_data) != 0) {
   32112:	4650      	mov	r0, sl
		LOG_DBG("Failed to set fix retry value, "
   32114:	46a3      	mov	fp, r4
		if (open_socket(drv_data) != 0) {
   32116:	f7ff fe9b 	bl	31e50 <open_socket.isra.0>
   3211a:	2800      	cmp	r0, #0
   3211c:	d0df      	beq.n	320de <start+0x1a6>
			LOG_ERR("Failed to re-init GPS service");
   3211e:	4949      	ldr	r1, [pc, #292]	; (32244 <start+0x30c>)
   32120:	f04b 0001 	orr.w	r0, fp, #1
   32124:	f00f fb7c 	bl	41820 <log_string_sync>
			return -EIO;
   32128:	e00b      	b.n	32142 <start+0x20a>
	if ((retval == -1) && ((errno == EFAULT) || (errno == EBADF))) {
   3212a:	f010 faa2 	bl	42672 <__errno>
   3212e:	6803      	ldr	r3, [r0, #0]
   32130:	2b09      	cmp	r3, #9
   32132:	d0e3      	beq.n	320fc <start+0x1c4>
		LOG_ERR("Failed to set fix retry value: %d", gps_cfg.retry);
   32134:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   32138:	4943      	ldr	r1, [pc, #268]	; (32248 <start+0x310>)
   3213a:	f044 0001 	orr.w	r0, r4, #1
   3213e:	f00f fb6f 	bl	41820 <log_string_sync>
		return -EIO;
   32142:	f06f 0504 	mvn.w	r5, #4
   32146:	e730      	b.n	31faa <start+0x72>
	} else if (retval != 0) {
   32148:	2800      	cmp	r0, #0
   3214a:	d1f3      	bne.n	32134 <start+0x1fc>
	retval = nrf_setsockopt(drv_data->socket,
   3214c:	9500      	str	r5, [sp, #0]
   3214e:	2201      	movs	r2, #1
   32150:	f44f 7101 	mov.w	r1, #516	; 0x204
   32154:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   32156:	f10d 0312 	add.w	r3, sp, #18
   3215a:	f007 fae3 	bl	39724 <nrf_setsockopt>
	if (retval != 0) {
   3215e:	b108      	cbz	r0, 32164 <start+0x22c>
		LOG_ERR("Failed to set fix interval value");
   32160:	493a      	ldr	r1, [pc, #232]	; (3224c <start+0x314>)
   32162:	e779      	b.n	32058 <start+0x120>
	retval = nrf_setsockopt(drv_data->socket,
   32164:	9500      	str	r5, [sp, #0]
   32166:	2204      	movs	r2, #4
   32168:	f44f 7101 	mov.w	r1, #516	; 0x204
   3216c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3216e:	ab05      	add	r3, sp, #20
   32170:	f007 fad8 	bl	39724 <nrf_setsockopt>
	if (retval != 0) {
   32174:	b108      	cbz	r0, 3217a <start+0x242>
		LOG_ERR("Failed to set nmea mask");
   32176:	4936      	ldr	r1, [pc, #216]	; (32250 <start+0x318>)
   32178:	e76e      	b.n	32058 <start+0x120>
	if (gps_cfg.power_mode != NRF_GNSS_PSM_DISABLED) {
   3217a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   3217e:	b15b      	cbz	r3, 32198 <start+0x260>
		retval = nrf_setsockopt(drv_data->socket,
   32180:	2301      	movs	r3, #1
   32182:	9300      	str	r3, [sp, #0]
   32184:	2209      	movs	r2, #9
   32186:	f44f 7101 	mov.w	r1, #516	; 0x204
   3218a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3218c:	ab07      	add	r3, sp, #28
   3218e:	f007 fac9 	bl	39724 <nrf_setsockopt>
		if (retval != 0) {
   32192:	b108      	cbz	r0, 32198 <start+0x260>
			LOG_ERR("Failed to set GPS power mode");
   32194:	492f      	ldr	r1, [pc, #188]	; (32254 <start+0x31c>)
   32196:	e75f      	b.n	32058 <start+0x120>
	retval = nrf_setsockopt(drv_data->socket,
   32198:	2304      	movs	r3, #4
   3219a:	9300      	str	r3, [sp, #0]
   3219c:	2207      	movs	r2, #7
   3219e:	f44f 7101 	mov.w	r1, #516	; 0x204
   321a2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   321a4:	ab06      	add	r3, sp, #24
   321a6:	f007 fabd 	bl	39724 <nrf_setsockopt>
	if (retval != 0) {
   321aa:	4605      	mov	r5, r0
   321ac:	b108      	cbz	r0, 321b2 <start+0x27a>
		LOG_ERR("Failed to start GPS");
   321ae:	492a      	ldr	r1, [pc, #168]	; (32258 <start+0x320>)
   321b0:	e752      	b.n	32058 <start+0x120>
	if (!gps_cfg.priority) {
   321b2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   321b6:	b973      	cbnz	r3, 321d6 <start+0x29e>
		retval = gps_priority_set(drv_data, false);
   321b8:	4601      	mov	r1, r0
   321ba:	f106 0028 	add.w	r0, r6, #40	; 0x28
   321be:	f7ff fddb 	bl	31d78 <gps_priority_set.isra.0>
		if (retval != 0) {
   321c2:	4680      	mov	r8, r0
   321c4:	b138      	cbz	r0, 321d6 <start+0x29e>
			LOG_ERR("Failed to set GPS priority, error: %d",
   321c6:	4602      	mov	r2, r0
   321c8:	4924      	ldr	r1, [pc, #144]	; (3225c <start+0x324>)
   321ca:	f044 0001 	orr.w	r0, r4, #1
   321ce:	f00f fb27 	bl	41820 <log_string_sync>
			return retval;
   321d2:	4645      	mov	r5, r8
   321d4:	e6e9      	b.n	31faa <start+0x72>
	atomic_set(&drv_data->is_active, 1);
   321d6:	2101      	movs	r1, #1
   321d8:	4638      	mov	r0, r7
   321da:	f012 fb50 	bl	4487e <atomic_set>
	atomic_set(&drv_data->timeout_occurred, 0);
   321de:	2100      	movs	r1, #0
   321e0:	f106 0024 	add.w	r0, r6, #36	; 0x24
   321e4:	f012 fb4b 	bl	4487e <atomic_set>
	z_impl_k_sem_give(sem);
   321e8:	f606 00fc 	addw	r0, r6, #2300	; 0x8fc
   321ec:	f00b fc84 	bl	3daf8 <z_impl_k_sem_give>
	LOG_DBG("GPS operational");
   321f0:	4a06      	ldr	r2, [pc, #24]	; (3220c <start+0x2d4>)
   321f2:	491b      	ldr	r1, [pc, #108]	; (32260 <start+0x328>)
   321f4:	f044 0004 	orr.w	r0, r4, #4
   321f8:	f00f fb12 	bl	41820 <log_string_sync>
	return retval;
   321fc:	e6d5      	b.n	31faa <start+0x72>
		return -EHOSTDOWN;
   321fe:	f06f 0574 	mvn.w	r5, #116	; 0x74
   32202:	e6d2      	b.n	31faa <start+0x72>
   32204:	0004649c 	.word	0x0004649c
   32208:	000463bc 	.word	0x000463bc
   3220c:	0004e948 	.word	0x0004e948
   32210:	0004e35f 	.word	0x0004e35f
   32214:	0004e392 	.word	0x0004e392
   32218:	0004e3b0 	.word	0x0004e3b0
   3221c:	0004e404 	.word	0x0004e404
   32220:	0004e3d4 	.word	0x0004e3d4
   32224:	0004e41e 	.word	0x0004e41e
   32228:	0004e51c 	.word	0x0004e51c
   3222c:	0004e93d 	.word	0x0004e93d
   32230:	0004e449 	.word	0x0004e449
   32234:	0004e47e 	.word	0x0004e47e
   32238:	0004e4a3 	.word	0x0004e4a3
   3223c:	0004e4bb 	.word	0x0004e4bb
   32240:	0004e4ec 	.word	0x0004e4ec
   32244:	0004e596 	.word	0x0004e596
   32248:	0004e574 	.word	0x0004e574
   3224c:	0004e5b4 	.word	0x0004e5b4
   32250:	0004e5d5 	.word	0x0004e5d5
   32254:	0004e5ed 	.word	0x0004e5ed
   32258:	0004e289 	.word	0x0004e289
   3225c:	0004e29d 	.word	0x0004e29d
   32260:	0004e60a 	.word	0x0004e60a
   32264:	0004e531 	.word	0x0004e531

00032268 <init>:

static int init(const struct device *dev, gps_event_handler_t handler)
{
   32268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct gps_drv_data *drv_data = dev->data;
   3226c:	68c6      	ldr	r6, [r0, #12]
{
   3226e:	4607      	mov	r7, r0
	int err;

	if (atomic_get(&drv_data->is_init)) {
   32270:	f106 0818 	add.w	r8, r6, #24
   32274:	4640      	mov	r0, r8
{
   32276:	b089      	sub	sp, #36	; 0x24
	if (atomic_get(&drv_data->is_init)) {
   32278:	f012 fafe 	bl	44878 <atomic_get>
   3227c:	4d42      	ldr	r5, [pc, #264]	; (32388 <init+0x120>)
   3227e:	4b43      	ldr	r3, [pc, #268]	; (3238c <init+0x124>)
   32280:	1aed      	subs	r5, r5, r3
   32282:	08ed      	lsrs	r5, r5, #3
   32284:	4603      	mov	r3, r0
   32286:	01ad      	lsls	r5, r5, #6
   32288:	b150      	cbz	r0, 322a0 <init+0x38>
		LOG_WRN("GPS is already initialized");
   3228a:	4941      	ldr	r1, [pc, #260]	; (32390 <init+0x128>)
   3228c:	f045 0002 	orr.w	r0, r5, #2
   32290:	f00f fac6 	bl	41820 <log_string_sync>

		return -EALREADY;
   32294:	f06f 0477 	mvn.w	r4, #119	; 0x77
	}

	atomic_set(&drv_data->is_init, 1);

	return 0;
}
   32298:	4620      	mov	r0, r4
   3229a:	b009      	add	sp, #36	; 0x24
   3229c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (handler == NULL) {
   322a0:	b939      	cbnz	r1, 322b2 <init+0x4a>
		LOG_ERR("No event handler provided");
   322a2:	493c      	ldr	r1, [pc, #240]	; (32394 <init+0x12c>)
   322a4:	f045 0001 	orr.w	r0, r5, #1
   322a8:	f00f faba 	bl	41820 <log_string_sync>
		return -EINVAL;
   322ac:	f06f 0415 	mvn.w	r4, #21
   322b0:	e7f2      	b.n	32298 <init+0x30>
	err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   322b2:	4602      	mov	r2, r0
	drv_data->handler = handler;
   322b4:	6071      	str	r1, [r6, #4]
	err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   322b6:	4601      	mov	r1, r0
   322b8:	4837      	ldr	r0, [pc, #220]	; (32398 <init+0x130>)
   322ba:	f7f8 fbd7 	bl	2aa6c <at_cmd_write>
	if (err) {
   322be:	4604      	mov	r4, r0
   322c0:	b130      	cbz	r0, 322d0 <init+0x68>
		LOG_ERR("Could not configure MAGPIO, error: %d", err);
   322c2:	4602      	mov	r2, r0
   322c4:	4935      	ldr	r1, [pc, #212]	; (3239c <init+0x134>)
		LOG_ERR("Could not configure COEX0, error: %d", err);
   322c6:	f045 0001 	orr.w	r0, r5, #1
   322ca:	f00f faa9 	bl	41820 <log_string_sync>
		return err;
   322ce:	e7e3      	b.n	32298 <init+0x30>
	LOG_DBG("MAGPIO set: %s",
   322d0:	4831      	ldr	r0, [pc, #196]	; (32398 <init+0x130>)
   322d2:	f00f fab8 	bl	41846 <log_strdup>
   322d6:	f045 0904 	orr.w	r9, r5, #4
   322da:	4603      	mov	r3, r0
   322dc:	4a30      	ldr	r2, [pc, #192]	; (323a0 <init+0x138>)
   322de:	4648      	mov	r0, r9
   322e0:	4930      	ldr	r1, [pc, #192]	; (323a4 <init+0x13c>)
   322e2:	f00f fa9d 	bl	41820 <log_string_sync>
	err = at_cmd_write(CONFIG_NRF9160_GPS_COEX0_STRING,
   322e6:	4623      	mov	r3, r4
   322e8:	4622      	mov	r2, r4
   322ea:	4621      	mov	r1, r4
   322ec:	482e      	ldr	r0, [pc, #184]	; (323a8 <init+0x140>)
   322ee:	f7f8 fbbd 	bl	2aa6c <at_cmd_write>
	if (err) {
   322f2:	4604      	mov	r4, r0
   322f4:	b110      	cbz	r0, 322fc <init+0x94>
		LOG_ERR("Could not configure COEX0, error: %d", err);
   322f6:	4602      	mov	r2, r0
   322f8:	492c      	ldr	r1, [pc, #176]	; (323ac <init+0x144>)
   322fa:	e7e4      	b.n	322c6 <init+0x5e>
	LOG_DBG("COEX0 set: %s",
   322fc:	482a      	ldr	r0, [pc, #168]	; (323a8 <init+0x140>)
   322fe:	f00f faa2 	bl	41846 <log_strdup>
   32302:	4a27      	ldr	r2, [pc, #156]	; (323a0 <init+0x138>)
   32304:	4603      	mov	r3, r0
   32306:	492a      	ldr	r1, [pc, #168]	; (323b0 <init+0x148>)
   32308:	4648      	mov	r0, r9
   3230a:	f00f fa89 	bl	41820 <log_string_sync>
	if (drv_data->socket < 0) {
   3230e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   32310:	2b00      	cmp	r3, #0
   32312:	db30      	blt.n	32376 <init+0x10e>
	k_delayed_work_init(&drv_data->stop_work, stop_work_fn);
   32314:	f606 1018 	addw	r0, r6, #2328	; 0x918
   32318:	4926      	ldr	r1, [pc, #152]	; (323b4 <init+0x14c>)
   3231a:	f012 fbfe 	bl	44b1a <k_delayed_work_init>
	k_delayed_work_init(&drv_data->timeout_work, timeout_work_fn);
   3231e:	f606 1048 	addw	r0, r6, #2376	; 0x948
   32322:	4925      	ldr	r1, [pc, #148]	; (323b8 <init+0x150>)
   32324:	f012 fbf9 	bl	44b1a <k_delayed_work_init>
	k_delayed_work_init(&drv_data->blocked_work, blocked_work_fn);
   32328:	4924      	ldr	r1, [pc, #144]	; (323bc <init+0x154>)
   3232a:	f606 1078 	addw	r0, r6, #2424	; 0x978
   3232e:	f012 fbf4 	bl	44b1a <k_delayed_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   32332:	2201      	movs	r2, #1
   32334:	2100      	movs	r1, #0
   32336:	f606 00fc 	addw	r0, r6, #2300	; 0x8fc
   3233a:	f012 fb75 	bl	44a28 <z_impl_k_sem_init>
	struct gps_drv_data *drv_data = dev->data;
   3233e:	68fd      	ldr	r5, [r7, #12]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   32340:	2200      	movs	r2, #0
   32342:	2300      	movs	r3, #0
   32344:	e9cd 2306 	strd	r2, r3, [sp, #24]
   32348:	2300      	movs	r3, #0
   3234a:	220a      	movs	r2, #10
   3234c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   32350:	e9cd 2303 	strd	r2, r3, [sp, #12]
   32354:	f105 0130 	add.w	r1, r5, #48	; 0x30
   32358:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3235c:	4b18      	ldr	r3, [pc, #96]	; (323c0 <init+0x158>)
   3235e:	9700      	str	r7, [sp, #0]
   32360:	f505 6003 	add.w	r0, r5, #2096	; 0x830
   32364:	f00b fd0a 	bl	3dd7c <z_impl_k_thread_create>
	atomic_set(&drv_data->is_init, 1);
   32368:	2101      	movs	r1, #1
	drv_data->thread_id = k_thread_create(
   3236a:	f8c5 08f8 	str.w	r0, [r5, #2296]	; 0x8f8
	atomic_set(&drv_data->is_init, 1);
   3236e:	4640      	mov	r0, r8
   32370:	f012 fa85 	bl	4487e <atomic_set>
	return 0;
   32374:	e790      	b.n	32298 <init+0x30>
		int ret = open_socket(drv_data);
   32376:	f106 0028 	add.w	r0, r6, #40	; 0x28
   3237a:	f7ff fd69 	bl	31e50 <open_socket.isra.0>
		if (ret != 0) {
   3237e:	2800      	cmp	r0, #0
   32380:	d0c8      	beq.n	32314 <init+0xac>
   32382:	4604      	mov	r4, r0
   32384:	e788      	b.n	32298 <init+0x30>
   32386:	bf00      	nop
   32388:	0004649c 	.word	0x0004649c
   3238c:	000463bc 	.word	0x000463bc
   32390:	0004e61e 	.word	0x0004e61e
   32394:	0004e639 	.word	0x0004e639
   32398:	0004e653 	.word	0x0004e653
   3239c:	0004e672 	.word	0x0004e672
   323a0:	0004e94e 	.word	0x0004e94e
   323a4:	0004e698 	.word	0x0004e698
   323a8:	0004e6ab 	.word	0x0004e6ab
   323ac:	0004e6c3 	.word	0x0004e6c3
   323b0:	0004e6e8 	.word	0x0004e6e8
   323b4:	00044853 	.word	0x00044853
   323b8:	0004488f 	.word	0x0004488f
   323bc:	00031e19 	.word	0x00031e19
   323c0:	000323c5 	.word	0x000323c5

000323c4 <gps_thread>:
{
   323c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool has_fix = false;
   323c8:	2600      	movs	r6, #0
	bool operation_blocked = false;
   323ca:	46b1      	mov	r9, r6
{
   323cc:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
	struct gps_drv_data *drv_data = dev->data;
   323d0:	68c4      	ldr	r4, [r0, #12]
{
   323d2:	4607      	mov	r7, r0
	struct gps_event evt = {
   323d4:	22c0      	movs	r2, #192	; 0xc0
   323d6:	2100      	movs	r1, #0
   323d8:	a804      	add	r0, sp, #16
   323da:	f012 fca4 	bl	44d26 <memset>
   323de:	4d66      	ldr	r5, [pc, #408]	; (32578 <gps_thread+0x1b4>)
   323e0:	4b66      	ldr	r3, [pc, #408]	; (3257c <gps_thread+0x1b8>)
   323e2:	1aed      	subs	r5, r5, r3
   323e4:	08ed      	lsrs	r5, r5, #3
	return z_impl_k_sem_take(sem, timeout);
   323e6:	f04f 33ff 	mov.w	r3, #4294967295
   323ea:	f04f 32ff 	mov.w	r2, #4294967295
   323ee:	f604 00fc 	addw	r0, r4, #2300	; 0x8fc
   323f2:	f00b fbc5 	bl	3db80 <z_impl_k_sem_take>
	evt.type = GPS_EVT_SEARCH_STARTED;
   323f6:	f04f 0300 	mov.w	r3, #0
	notify_event(dev, &evt);
   323fa:	a904      	add	r1, sp, #16
	evt.type = GPS_EVT_SEARCH_STARTED;
   323fc:	f88d 3010 	strb.w	r3, [sp, #16]
	notify_event(dev, &evt);
   32400:	4638      	mov	r0, r7
   32402:	f012 fa21 	bl	44848 <notify_event>
		nrf_gnss_data_frame_t raw_gps_data = {0};
   32406:	22d8      	movs	r2, #216	; 0xd8
   32408:	2100      	movs	r1, #0
   3240a:	a864      	add	r0, sp, #400	; 0x190
   3240c:	f012 fc8b 	bl	44d26 <memset>
		struct gps_event evt = {0};
   32410:	22c0      	movs	r2, #192	; 0xc0
   32412:	2100      	movs	r1, #0
   32414:	a834      	add	r0, sp, #208	; 0xd0
   32416:	f012 fc86 	bl	44d26 <memset>
		if (!has_fix) {
   3241a:	f604 1a48 	addw	sl, r4, #2376	; 0x948
   3241e:	b936      	cbnz	r6, 3242e <gps_thread+0x6a>
   32420:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   32424:	2300      	movs	r3, #0
   32426:	4651      	mov	r1, sl
   32428:	4855      	ldr	r0, [pc, #340]	; (32580 <gps_thread+0x1bc>)
   3242a:	f00b fdd3 	bl	3dfd4 <k_delayed_work_submit_to_queue>
		len = nrf_recv(drv_data->socket, &raw_gps_data,
   3242e:	2300      	movs	r3, #0
   32430:	22d8      	movs	r2, #216	; 0xd8
   32432:	a964      	add	r1, sp, #400	; 0x190
   32434:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   32436:	f007 f8fb 	bl	39630 <nrf_recv>
   3243a:	4680      	mov	r8, r0
		k_delayed_work_cancel(&drv_data->timeout_work);
   3243c:	4650      	mov	r0, sl
   3243e:	f00b fe53 	bl	3e0e8 <k_delayed_work_cancel>
		if (len <= 0) {
   32442:	f1b8 0f00 	cmp.w	r8, #0
   32446:	dc4c      	bgt.n	324e2 <gps_thread+0x11e>
   32448:	f104 0b1c 	add.w	fp, r4, #28
			if (!atomic_get(&drv_data->is_active)) {
   3244c:	4658      	mov	r0, fp
   3244e:	f012 fa13 	bl	44878 <atomic_get>
   32452:	2800      	cmp	r0, #0
   32454:	d0c7      	beq.n	323e6 <gps_thread+0x22>
			if (errno == EHOSTDOWN) {
   32456:	f010 f90c 	bl	42672 <__errno>
   3245a:	6803      	ldr	r3, [r0, #0]
   3245c:	01a8      	lsls	r0, r5, #6
   3245e:	2b75      	cmp	r3, #117	; 0x75
   32460:	d138      	bne.n	324d4 <gps_thread+0x110>
				LOG_DBG("GPS host is going down, sleeping");
   32462:	4603      	mov	r3, r0
   32464:	f040 0804 	orr.w	r8, r0, #4
   32468:	4a46      	ldr	r2, [pc, #280]	; (32584 <gps_thread+0x1c0>)
   3246a:	4947      	ldr	r1, [pc, #284]	; (32588 <gps_thread+0x1c4>)
   3246c:	4640      	mov	r0, r8
   3246e:	9302      	str	r3, [sp, #8]
   32470:	f00f f9d6 	bl	41820 <log_string_sync>
	k_delayed_work_cancel(&drv_data->timeout_work);
   32474:	4650      	mov	r0, sl
   32476:	f00b fe37 	bl	3e0e8 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   3247a:	f604 1078 	addw	r0, r4, #2424	; 0x978
   3247e:	f00b fe33 	bl	3e0e8 <k_delayed_work_cancel>
	return atomic_set(target, 0);
   32482:	4658      	mov	r0, fp
				nrf_close(drv_data->socket);
   32484:	46a3      	mov	fp, r4
   32486:	2100      	movs	r1, #0
				atomic_set(&drv_data->is_shutdown, 1);
   32488:	f104 0a20 	add.w	sl, r4, #32
   3248c:	f012 f9f7 	bl	4487e <atomic_set>
   32490:	2101      	movs	r1, #1
   32492:	4650      	mov	r0, sl
   32494:	f012 f9f3 	bl	4487e <atomic_set>
				nrf_close(drv_data->socket);
   32498:	f85b 0f28 	ldr.w	r0, [fp, #40]!
   3249c:	f007 f86c 	bl	39578 <nrf_close>
				bsdlib_shutdown_wait();
   324a0:	f7f6 ff8c 	bl	293bc <bsdlib_shutdown_wait>
				if (open_socket(drv_data) != 0) {
   324a4:	4658      	mov	r0, fp
   324a6:	f7ff fcd3 	bl	31e50 <open_socket.isra.0>
   324aa:	9b02      	ldr	r3, [sp, #8]
   324ac:	4601      	mov	r1, r0
   324ae:	b140      	cbz	r0, 324c2 <gps_thread+0xfe>
					LOG_ERR("Failed to open socket after "
   324b0:	4936      	ldr	r1, [pc, #216]	; (3258c <gps_thread+0x1c8>)
   324b2:	f043 0001 	orr.w	r0, r3, #1
   324b6:	f00f f9b3 	bl	41820 <log_string_sync>
}
   324ba:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   324be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   324c2:	4650      	mov	r0, sl
   324c4:	f012 f9db 	bl	4487e <atomic_set>
				LOG_DBG("GPS host available, going back to "
   324c8:	4640      	mov	r0, r8
   324ca:	4a2e      	ldr	r2, [pc, #184]	; (32584 <gps_thread+0x1c0>)
   324cc:	4930      	ldr	r1, [pc, #192]	; (32590 <gps_thread+0x1cc>)
   324ce:	f00f f9a7 	bl	41820 <log_string_sync>
				goto wait;
   324d2:	e788      	b.n	323e6 <gps_thread+0x22>
				LOG_ERR("recv() returned error: %d", len);
   324d4:	4642      	mov	r2, r8
   324d6:	492f      	ldr	r1, [pc, #188]	; (32594 <gps_thread+0x1d0>)
   324d8:	f040 0001 	orr.w	r0, r0, #1
   324dc:	f00f f9a0 	bl	41820 <log_string_sync>
			continue;
   324e0:	e791      	b.n	32406 <gps_thread+0x42>
		switch (raw_gps_data.data_id) {
   324e2:	f89d 3190 	ldrb.w	r3, [sp, #400]	; 0x190
   324e6:	2b02      	cmp	r3, #2
   324e8:	f000 814b 	beq.w	32782 <gps_thread+0x3be>
   324ec:	2b03      	cmp	r3, #3
   324ee:	f000 8168 	beq.w	327c2 <gps_thread+0x3fe>
   324f2:	2b01      	cmp	r3, #1
   324f4:	d187      	bne.n	32406 <gps_thread+0x42>
			if (atomic_get(&drv_data->timeout_occurred) ||
   324f6:	f104 0324 	add.w	r3, r4, #36	; 0x24
   324fa:	4618      	mov	r0, r3
   324fc:	f012 f9bc 	bl	44878 <atomic_get>
   32500:	b918      	cbnz	r0, 3250a <gps_thread+0x146>
   32502:	7a22      	ldrb	r2, [r4, #8]
   32504:	2a01      	cmp	r2, #1
   32506:	d00c      	beq.n	32522 <gps_thread+0x15e>
			    ((drv_data->current_cfg.nav_mode != GPS_NAV_MODE_CONTINUOUS) &&
   32508:	b15e      	cbz	r6, 32522 <gps_thread+0x15e>
				atomic_set(&drv_data->timeout_occurred, 0);
   3250a:	2100      	movs	r1, #0
   3250c:	4618      	mov	r0, r3
   3250e:	f012 f9b6 	bl	4487e <atomic_set>
				evt.type = GPS_EVT_SEARCH_STARTED;
   32512:	f04f 0300 	mov.w	r3, #0
				notify_event(dev, &evt);
   32516:	4638      	mov	r0, r7
   32518:	a934      	add	r1, sp, #208	; 0xd0
				evt.type = GPS_EVT_SEARCH_STARTED;
   3251a:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
				notify_event(dev, &evt);
   3251e:	f012 f993 	bl	44848 <notify_event>
	return ((pvt->flags & NRF_GNSS_PVT_FLAG_DEADLINE_MISSED)
   32522:	f89d a1d4 	ldrb.w	sl, [sp, #468]	; 0x1d4
			if (has_no_time_window(&raw_gps_data.pvt) ||
   32526:	f01a 0a18 	ands.w	sl, sl, #24
   3252a:	d037      	beq.n	3259c <gps_thread+0x1d8>
				if (operation_blocked) {
   3252c:	f1b9 0f00 	cmp.w	r9, #0
   32530:	d003      	beq.n	3253a <gps_thread+0x176>
			has_fix = false;
   32532:	2600      	movs	r6, #0
   32534:	f04f 0901 	mov.w	r9, #1
   32538:	e765      	b.n	32406 <gps_thread+0x42>
				LOG_DBG("Waiting for time window to operate");
   3253a:	01a8      	lsls	r0, r5, #6
   3253c:	4a11      	ldr	r2, [pc, #68]	; (32584 <gps_thread+0x1c0>)
   3253e:	4916      	ldr	r1, [pc, #88]	; (32598 <gps_thread+0x1d4>)
   32540:	f040 0004 	orr.w	r0, r0, #4
   32544:	f00f f96c 	bl	41820 <log_string_sync>
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   32548:	2307      	movs	r3, #7
				notify_event(dev, &evt);
   3254a:	4638      	mov	r0, r7
   3254c:	a934      	add	r1, sp, #208	; 0xd0
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   3254e:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
				notify_event(dev, &evt);
   32552:	f012 f979 	bl	44848 <notify_event>
				if (drv_data->current_cfg.priority) {
   32556:	f894 8015 	ldrb.w	r8, [r4, #21]
   3255a:	f1b8 0f00 	cmp.w	r8, #0
   3255e:	d0e8      	beq.n	32532 <gps_thread+0x16e>
   32560:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   32564:	2300      	movs	r3, #0
   32566:	4806      	ldr	r0, [pc, #24]	; (32580 <gps_thread+0x1bc>)
   32568:	f604 1178 	addw	r1, r4, #2424	; 0x978
			has_fix = false;
   3256c:	464e      	mov	r6, r9
   3256e:	f00b fd31 	bl	3dfd4 <k_delayed_work_submit_to_queue>
				operation_blocked = true;
   32572:	46c1      	mov	r9, r8
   32574:	e747      	b.n	32406 <gps_thread+0x42>
   32576:	bf00      	nop
   32578:	0004649c 	.word	0x0004649c
   3257c:	000463bc 	.word	0x000463bc
   32580:	200244f8 	.word	0x200244f8
   32584:	0004e932 	.word	0x0004e932
   32588:	0004e724 	.word	0x0004e724
   3258c:	0004e749 	.word	0x0004e749
   32590:	0004e784 	.word	0x0004e784
   32594:	0004e7bc 	.word	0x0004e7bc
   32598:	0004e7d6 	.word	0x0004e7d6
			} else if (operation_blocked) {
   3259c:	f1b9 0f00 	cmp.w	r9, #0
   325a0:	d011      	beq.n	325c6 <gps_thread+0x202>
				LOG_DBG("GPS has time window to operate");
   325a2:	01a8      	lsls	r0, r5, #6
   325a4:	4a94      	ldr	r2, [pc, #592]	; (327f8 <gps_thread+0x434>)
   325a6:	4995      	ldr	r1, [pc, #596]	; (327fc <gps_thread+0x438>)
   325a8:	f040 0004 	orr.w	r0, r0, #4
   325ac:	f00f f938 	bl	41820 <log_string_sync>
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   325b0:	2308      	movs	r3, #8
				notify_event(dev, &evt);
   325b2:	4638      	mov	r0, r7
   325b4:	a934      	add	r1, sp, #208	; 0xd0
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   325b6:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
				notify_event(dev, &evt);
   325ba:	f012 f945 	bl	44848 <notify_event>
				k_delayed_work_cancel(&drv_data->blocked_work);
   325be:	f604 1078 	addw	r0, r4, #2424	; 0x978
   325c2:	f00b fd91 	bl	3e0e8 <k_delayed_work_cancel>
	dest->latitude = src->latitude;
   325c6:	e9dd 2366 	ldrd	r2, r3, [sp, #408]	; 0x198
   325ca:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
	dest->longitude = src->longitude;
   325ce:	e9dd 2368 	ldrd	r2, r3, [sp, #416]	; 0x1a0
   325d2:	e9cd 2338 	strd	r2, r3, [sp, #224]	; 0xe0
	dest->datetime.year = src->datetime.year;
   325d6:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   325d8:	f50d 78c8 	add.w	r8, sp, #400	; 0x190
   325dc:	9243      	str	r2, [sp, #268]	; 0x10c
	dest->datetime.hour = src->datetime.hour;
   325de:	f8bd 21bc 	ldrh.w	r2, [sp, #444]	; 0x1bc
	for (size_t i = 0;
   325e2:	2100      	movs	r1, #0
	dest->datetime.hour = src->datetime.hour;
   325e4:	f8ad 2110 	strh.w	r2, [sp, #272]	; 0x110
	dest->tdop = src->tdop;
   325e8:	4642      	mov	r2, r8
	dest->altitude = src->altitude;
   325ea:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
   325ec:	933a      	str	r3, [sp, #232]	; 0xe8
	dest->accuracy = src->accuracy;
   325ee:	9b6b      	ldr	r3, [sp, #428]	; 0x1ac
   325f0:	933b      	str	r3, [sp, #236]	; 0xec
	dest->speed = src->speed;
   325f2:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
   325f4:	933c      	str	r3, [sp, #240]	; 0xf0
	dest->heading = src->heading;
   325f6:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
   325f8:	933d      	str	r3, [sp, #244]	; 0xf4
	dest->datetime.seconds = src->datetime.seconds;
   325fa:	f89d 31be 	ldrb.w	r3, [sp, #446]	; 0x1be
   325fe:	f88d 3112 	strb.w	r3, [sp, #274]	; 0x112
	dest->datetime.ms = src->datetime.ms;
   32602:	f8bd 31c0 	ldrh.w	r3, [sp, #448]	; 0x1c0
   32606:	f8ad 3114 	strh.w	r3, [sp, #276]	; 0x114
	dest->pdop = src->pdop;
   3260a:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
   3260c:	933e      	str	r3, [sp, #248]	; 0xf8
	dest->hdop = src->hdop;
   3260e:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
   32610:	933f      	str	r3, [sp, #252]	; 0xfc
	dest->vdop = src->vdop;
   32612:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
   32614:	9340      	str	r3, [sp, #256]	; 0x100
	dest->tdop = src->tdop;
   32616:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
   32618:	9341      	str	r3, [sp, #260]	; 0x104
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_PVT_MAX_SV_COUNT); i++) {
   3261a:	ab34      	add	r3, sp, #208	; 0xd0
		dest->sv[i].sv = src->sv[i].sv;
   3261c:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_PVT_MAX_SV_COUNT); i++) {
   32620:	3101      	adds	r1, #1
		dest->sv[i].sv = src->sv[i].sv;
   32622:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
		dest->sv[i].cn0 = src->sv[i].cn0;
   32626:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
	for (size_t i = 0;
   3262a:	290c      	cmp	r1, #12
		dest->sv[i].cn0 = src->sv[i].cn0;
   3262c:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
		dest->sv[i].elevation = src->sv[i].elevation;
   32630:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
   32634:	f103 030a 	add.w	r3, r3, #10
   32638:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
		dest->sv[i].azimuth = src->sv[i].azimuth;
   3263c:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
   32640:	f102 020c 	add.w	r2, r2, #12
   32644:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
		dest->sv[i].signal = src->sv[i].signal;
   32648:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
   3264c:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
	for (size_t i = 0;
   32650:	d1e4      	bne.n	3261c <gps_thread+0x258>
		== NRF_GNSS_PVT_FLAG_FIX_VALID_BIT);
   32652:	f89d 61d4 	ldrb.w	r6, [sp, #468]	; 0x1d4
			if (is_fix(&raw_gps_data.pvt)) {
   32656:	f016 0601 	ands.w	r6, r6, #1
   3265a:	f000 808e 	beq.w	3277a <gps_thread+0x3b6>
				LOG_DBG("PVT: Position fix");
   3265e:	01a8      	lsls	r0, r5, #6
   32660:	4a65      	ldr	r2, [pc, #404]	; (327f8 <gps_thread+0x434>)
   32662:	4967      	ldr	r1, [pc, #412]	; (32800 <gps_thread+0x43c>)
   32664:	f040 0004 	orr.w	r0, r0, #4
   32668:	f00f f8da 	bl	41820 <log_string_sync>
				evt.type = GPS_EVT_PVT_FIX;
   3266c:	2304      	movs	r3, #4
   3266e:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
	return z_impl_k_uptime_ticks();
   32672:	f012 fa5e 	bl	44b32 <z_impl_k_uptime_ticks>
   32676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3267a:	468c      	mov	ip, r1
   3267c:	fba0 0103 	umull	r0, r1, r0, r3
   32680:	fb03 110c 	mla	r1, r3, ip, r1
				fix_timestamp = k_uptime_get();
   32684:	4a5f      	ldr	r2, [pc, #380]	; (32804 <gps_thread+0x440>)
   32686:	0bc3      	lsrs	r3, r0, #15
   32688:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   3268c:	0bc9      	lsrs	r1, r1, #15
   3268e:	e9c2 3100 	strd	r3, r1, [r2]
	uint8_t  n_unhealthy = 0;
   32692:	f04f 0900 	mov.w	r9, #0
	uint8_t  n_used = 0;
   32696:	46cb      	mov	fp, r9
			notify_event(dev, &evt);
   32698:	4638      	mov	r0, r7
   3269a:	a934      	add	r1, sp, #208	; 0xd0
   3269c:	f012 f8d4 	bl	44848 <notify_event>
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   326a0:	01ab      	lsls	r3, r5, #6
   326a2:	f043 0304 	orr.w	r3, r3, #4
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   326a6:	f8cd 9008 	str.w	r9, [sp, #8]
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   326aa:	9303      	str	r3, [sp, #12]
		uint8_t sv = pvt_data->pvt.sv[i].sv;
   326ac:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
		if (sv) { /* SV number 0 indicates no satellite */
   326b0:	b353      	cbz	r3, 32708 <gps_thread+0x344>
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   326b2:	f898 2050 	ldrb.w	r2, [r8, #80]	; 0x50
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   326b6:	f8df c174 	ldr.w	ip, [pc, #372]	; 3282c <gps_thread+0x468>
			if (used) {
   326ba:	0790      	lsls	r0, r2, #30
				n_used++;
   326bc:	bf48      	it	mi
   326be:	f10b 0b01 	addmi.w	fp, fp, #1
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   326c2:	f3c2 0140 	ubfx	r1, r2, #1, #1
				  NRF_GNSS_SV_FLAG_UNHEALTHY) ? true : false;
   326c6:	f3c2 0ec0 	ubfx	lr, r2, #3, #1
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   326ca:	484f      	ldr	r0, [pc, #316]	; (32808 <gps_thread+0x444>)
				n_used++;
   326cc:	bf48      	it	mi
   326ce:	fa5f fb8b 	uxtbmi.w	fp, fp
			if (unhealthy) {
   326d2:	0712      	lsls	r2, r2, #28
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   326d4:	4a4d      	ldr	r2, [pc, #308]	; (3280c <gps_thread+0x448>)
				n_unhealthy++;
   326d6:	bf44      	itt	mi
   326d8:	f109 0901 	addmi.w	r9, r9, #1
   326dc:	fa5f f989 	uxtbmi.w	r9, r9
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   326e0:	2900      	cmp	r1, #0
   326e2:	bf18      	it	ne
   326e4:	4602      	movne	r2, r0
   326e6:	494a      	ldr	r1, [pc, #296]	; (32810 <gps_thread+0x44c>)
			n_tracked++;
   326e8:	f10a 0a01 	add.w	sl, sl, #1
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   326ec:	f1be 0f00 	cmp.w	lr, #0
   326f0:	bf08      	it	eq
   326f2:	4661      	moveq	r1, ip
   326f4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   326f8:	e9cd 2100 	strd	r2, r1, [sp]
   326fc:	4a45      	ldr	r2, [pc, #276]	; (32814 <gps_thread+0x450>)
   326fe:	4946      	ldr	r1, [pc, #280]	; (32818 <gps_thread+0x454>)
			n_tracked++;
   32700:	fa5f fa8a 	uxtb.w	sl, sl
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   32704:	f00f f88c 	bl	41820 <log_string_sync>
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   32708:	9b02      	ldr	r3, [sp, #8]
   3270a:	f108 080c 	add.w	r8, r8, #12
   3270e:	3301      	adds	r3, #1
   32710:	2b0c      	cmp	r3, #12
   32712:	9302      	str	r3, [sp, #8]
   32714:	d1ca      	bne.n	326ac <gps_thread+0x2e8>
	LOG_DBG("Tracking: %d Using: %d Unhealthy: %d", n_tracked,
   32716:	ea4f 1885 	mov.w	r8, r5, lsl #6
   3271a:	f048 0804 	orr.w	r8, r8, #4
   3271e:	4653      	mov	r3, sl
   32720:	4640      	mov	r0, r8
   32722:	e9cd b900 	strd	fp, r9, [sp]
   32726:	4a3b      	ldr	r2, [pc, #236]	; (32814 <gps_thread+0x450>)
   32728:	493c      	ldr	r1, [pc, #240]	; (3281c <gps_thread+0x458>)
   3272a:	f00f f879 	bl	41820 <log_string_sync>
   3272e:	f012 fa00 	bl	44b32 <z_impl_k_uptime_ticks>
   32732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   32736:	460a      	mov	r2, r1
   32738:	fba0 0103 	umull	r0, r1, r0, r3
   3273c:	fb03 1102 	mla	r1, r3, r2, r1
   32740:	ea4f 3cd0 	mov.w	ip, r0, lsr #15
	LOG_DBG("Seconds since last fix %lld",
   32744:	4b2f      	ldr	r3, [pc, #188]	; (32804 <gps_thread+0x440>)
   32746:	ea4c 4c41 	orr.w	ip, ip, r1, lsl #17
   3274a:	ea4f 3ed1 	mov.w	lr, r1, lsr #15
   3274e:	e9d3 0100 	ldrd	r0, r1, [r3]
   32752:	ebbc 0000 	subs.w	r0, ip, r0
   32756:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3275a:	f04f 0300 	mov.w	r3, #0
   3275e:	eb6e 0101 	sbc.w	r1, lr, r1
   32762:	f7ea fbab 	bl	1cebc <__aeabi_uldivmod>
   32766:	4a2b      	ldr	r2, [pc, #172]	; (32814 <gps_thread+0x450>)
   32768:	e9cd 0100 	strd	r0, r1, [sp]
   3276c:	4640      	mov	r0, r8
   3276e:	492c      	ldr	r1, [pc, #176]	; (32820 <gps_thread+0x45c>)
   32770:	f00f f856 	bl	41820 <log_string_sync>
   32774:	f04f 0900 	mov.w	r9, #0
   32778:	e645      	b.n	32406 <gps_thread+0x42>
				evt.type = GPS_EVT_PVT;
   3277a:	2303      	movs	r3, #3
   3277c:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
   32780:	e787      	b.n	32692 <gps_thread+0x2ce>
			if (operation_blocked) {
   32782:	f1b9 0f00 	cmp.w	r9, #0
   32786:	f47f ae3e 	bne.w	32406 <gps_thread+0x42>
			memcpy(evt.nmea.buf, raw_gps_data.nmea, len);
   3278a:	4642      	mov	r2, r8
   3278c:	23b8      	movs	r3, #184	; 0xb8
   3278e:	a966      	add	r1, sp, #408	; 0x198
   32790:	a836      	add	r0, sp, #216	; 0xd8
			evt.nmea.len = len - 1;
   32792:	f108 38ff 	add.w	r8, r8, #4294967295
			memcpy(evt.nmea.buf, raw_gps_data.nmea, len);
   32796:	f012 fab3 	bl	44d00 <__memcpy_chk>
			evt.nmea.len = len - 1;
   3279a:	f88d 812b 	strb.w	r8, [sp, #299]	; 0x12b
			if (has_fix) {
   3279e:	b176      	cbz	r6, 327be <gps_thread+0x3fa>
				LOG_DBG("NMEA: Position fix");
   327a0:	01a8      	lsls	r0, r5, #6
   327a2:	4a15      	ldr	r2, [pc, #84]	; (327f8 <gps_thread+0x434>)
   327a4:	491f      	ldr	r1, [pc, #124]	; (32824 <gps_thread+0x460>)
   327a6:	f040 0004 	orr.w	r0, r0, #4
   327aa:	f00f f839 	bl	41820 <log_string_sync>
				evt.type = GPS_EVT_NMEA_FIX;
   327ae:	2306      	movs	r3, #6
			notify_event(dev, &evt);
   327b0:	4638      	mov	r0, r7
   327b2:	a934      	add	r1, sp, #208	; 0xd0
				evt.type = GPS_EVT_NMEA;
   327b4:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
			notify_event(dev, &evt);
   327b8:	f012 f846 	bl	44848 <notify_event>
			break;
   327bc:	e7da      	b.n	32774 <gps_thread+0x3b0>
				evt.type = GPS_EVT_NMEA;
   327be:	2305      	movs	r3, #5
   327c0:	e7f6      	b.n	327b0 <gps_thread+0x3ec>
			LOG_DBG("A-GPS data update needed");
   327c2:	01a8      	lsls	r0, r5, #6
   327c4:	4a0c      	ldr	r2, [pc, #48]	; (327f8 <gps_thread+0x434>)
   327c6:	4918      	ldr	r1, [pc, #96]	; (32828 <gps_thread+0x464>)
   327c8:	f040 0004 	orr.w	r0, r0, #4
   327cc:	f00f f828 	bl	41820 <log_string_sync>
			evt.type = GPS_EVT_AGPS_DATA_NEEDED;
   327d0:	2309      	movs	r3, #9
   327d2:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
			evt.agps_request.sv_mask_ephe =
   327d6:	9b66      	ldr	r3, [sp, #408]	; 0x198
			evt.agps_request.utc =
   327d8:	f89d 20e0 	ldrb.w	r2, [sp, #224]	; 0xe0
			evt.agps_request.sv_mask_ephe =
   327dc:	9336      	str	r3, [sp, #216]	; 0xd8
			evt.agps_request.sv_mask_alm =
   327de:	9b67      	ldr	r3, [sp, #412]	; 0x19c
			evt.agps_request.utc =
   327e0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
			evt.agps_request.sv_mask_alm =
   327e4:	9337      	str	r3, [sp, #220]	; 0xdc
			evt.agps_request.utc =
   327e6:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
			notify_event(dev, &evt);
   327e8:	a934      	add	r1, sp, #208	; 0xd0
			evt.agps_request.utc =
   327ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   327ee:	4313      	orrs	r3, r2
   327f0:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
			notify_event(dev, &evt);
   327f4:	e604      	b.n	32400 <gps_thread+0x3c>
   327f6:	bf00      	nop
   327f8:	0004e932 	.word	0x0004e932
   327fc:	0004e7fd 	.word	0x0004e7fd
   32800:	0004e820 	.word	0x0004e820
   32804:	200239b8 	.word	0x200239b8
   32808:	0004e6fa 	.word	0x0004e6fa
   3280c:	0004e703 	.word	0x0004e703
   32810:	0004e70c 	.word	0x0004e70c
   32814:	0004e8ff 	.word	0x0004e8ff
   32818:	0004e836 	.word	0x0004e836
   3281c:	0004e852 	.word	0x0004e852
   32820:	0004e87b 	.word	0x0004e87b
   32824:	0004e89b 	.word	0x0004e89b
   32828:	0004e8b2 	.word	0x0004e8b2
   3282c:	0004e718 	.word	0x0004e718

00032830 <stop>:
{
   32830:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct gps_drv_data *drv_data = dev->data;
   32832:	68c5      	ldr	r5, [r0, #12]
{
   32834:	4604      	mov	r4, r0
   32836:	b085      	sub	sp, #20
	if (atomic_get(&drv_data->is_shutdown) == 1) {
   32838:	f105 0020 	add.w	r0, r5, #32
   3283c:	f012 f81c 	bl	44878 <atomic_get>
   32840:	2801      	cmp	r0, #1
   32842:	d03b      	beq.n	328bc <stop+0x8c>
	k_delayed_work_cancel(&drv_data->timeout_work);
   32844:	f605 1048 	addw	r0, r5, #2376	; 0x948
   32848:	f00b fc4e 	bl	3e0e8 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   3284c:	f605 1078 	addw	r0, r5, #2424	; 0x978
   32850:	f00b fc4a 	bl	3e0e8 <k_delayed_work_cancel>
	if (atomic_get(&drv_data->is_active) == 0) {
   32854:	f105 001c 	add.w	r0, r5, #28
   32858:	f012 f80e 	bl	44878 <atomic_get>
   3285c:	b328      	cbz	r0, 328aa <stop+0x7a>
	nrf_gnss_delete_mask_t delete_mask = 0;
   3285e:	2700      	movs	r7, #0
	err = stop_gps(dev, false);
   32860:	68e6      	ldr	r6, [r4, #12]
   32862:	4b18      	ldr	r3, [pc, #96]	; (328c4 <stop+0x94>)
   32864:	4c18      	ldr	r4, [pc, #96]	; (328c8 <stop+0x98>)
		LOG_DBG("Stopping GPS");
   32866:	4a19      	ldr	r2, [pc, #100]	; (328cc <stop+0x9c>)
   32868:	1ae4      	subs	r4, r4, r3
   3286a:	08e4      	lsrs	r4, r4, #3
   3286c:	01a4      	lsls	r4, r4, #6
   3286e:	4918      	ldr	r1, [pc, #96]	; (328d0 <stop+0xa0>)
   32870:	f044 0004 	orr.w	r0, r4, #4
	nrf_gnss_delete_mask_t delete_mask = 0;
   32874:	9703      	str	r7, [sp, #12]
		LOG_DBG("Stopping GPS");
   32876:	f00e ffd3 	bl	41820 <log_string_sync>
	atomic_set(&drv_data->is_active, 0);
   3287a:	4639      	mov	r1, r7
   3287c:	f106 001c 	add.w	r0, r6, #28
   32880:	f011 fffd 	bl	4487e <atomic_set>
	retval = nrf_setsockopt(drv_data->socket,
   32884:	2304      	movs	r3, #4
   32886:	9300      	str	r3, [sp, #0]
   32888:	2208      	movs	r2, #8
   3288a:	f44f 7101 	mov.w	r1, #516	; 0x204
   3288e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   32890:	ab03      	add	r3, sp, #12
   32892:	f006 ff47 	bl	39724 <nrf_setsockopt>
	if (retval != 0) {
   32896:	b140      	cbz	r0, 328aa <stop+0x7a>
		LOG_ERR("Failed to stop GPS");
   32898:	f044 0001 	orr.w	r0, r4, #1
   3289c:	490d      	ldr	r1, [pc, #52]	; (328d4 <stop+0xa4>)
   3289e:	f00e ffbf 	bl	41820 <log_string_sync>
		return -EIO;
   328a2:	f06f 0004 	mvn.w	r0, #4
}
   328a6:	b005      	add	sp, #20
   328a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   328aa:	2200      	movs	r2, #0
   328ac:	2300      	movs	r3, #0
   328ae:	480a      	ldr	r0, [pc, #40]	; (328d8 <stop+0xa8>)
   328b0:	f605 1118 	addw	r1, r5, #2328	; 0x918
   328b4:	f00b fb8e 	bl	3dfd4 <k_delayed_work_submit_to_queue>
	return 0;
   328b8:	2000      	movs	r0, #0
   328ba:	e7f4      	b.n	328a6 <stop+0x76>
		return -EHOSTDOWN;
   328bc:	f06f 0074 	mvn.w	r0, #116	; 0x74
   328c0:	e7f1      	b.n	328a6 <stop+0x76>
   328c2:	bf00      	nop
   328c4:	000463bc 	.word	0x000463bc
   328c8:	0004649c 	.word	0x0004649c
   328cc:	0004e960 	.word	0x0004e960
   328d0:	0004e8cf 	.word	0x0004e8cf
   328d4:	0004e8e0 	.word	0x0004e8e0
   328d8:	200244f8 	.word	0x200244f8

000328dc <packet_free_cb>:
   328dc:	b510      	push	{r4, lr}
   328de:	4604      	mov	r4, r0
   328e0:	6800      	ldr	r0, [r0, #0]
   328e2:	f004 ffc5 	bl	37870 <rpc_logobj_client_data_free>
   328e6:	68a0      	ldr	r0, [r4, #8]
   328e8:	b118      	cbz	r0, 328f2 <packet_free_cb+0x16>
   328ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   328ee:	f007 bec3 	b.w	3a678 <nrf_free>
   328f2:	bd10      	pop	{r4, pc}

000328f4 <logobj_event_handler>:
   328f4:	b530      	push	{r4, r5, lr}
   328f6:	4b3b      	ldr	r3, [pc, #236]	; (329e4 <logobj_event_handler+0xf0>)
   328f8:	b085      	sub	sp, #20
   328fa:	681d      	ldr	r5, [r3, #0]
   328fc:	2d00      	cmp	r5, #0
   328fe:	d04c      	beq.n	3299a <logobj_event_handler+0xa6>
   32900:	f248 0302 	movw	r3, #32770	; 0x8002
   32904:	4299      	cmp	r1, r3
   32906:	d053      	beq.n	329b0 <logobj_event_handler+0xbc>
   32908:	d91c      	bls.n	32944 <logobj_event_handler+0x50>
   3290a:	f248 0303 	movw	r3, #32771	; 0x8003
   3290e:	4299      	cmp	r1, r3
   32910:	d05a      	beq.n	329c8 <logobj_event_handler+0xd4>
   32912:	f249 0301 	movw	r3, #36865	; 0x9001
   32916:	4299      	cmp	r1, r3
   32918:	d147      	bne.n	329aa <logobj_event_handler+0xb6>
   3291a:	2400      	movs	r4, #0
   3291c:	6843      	ldr	r3, [r0, #4]
   3291e:	6802      	ldr	r2, [r0, #0]
   32920:	e9cd 4402 	strd	r4, r4, [sp, #8]
   32924:	e9cd 2300 	strd	r2, r3, [sp]
   32928:	69e8      	ldr	r0, [r5, #28]
   3292a:	4669      	mov	r1, sp
   3292c:	6803      	ldr	r3, [r0, #0]
   3292e:	685b      	ldr	r3, [r3, #4]
   32930:	4798      	blx	r3
   32932:	3001      	adds	r0, #1
   32934:	d04e      	beq.n	329d4 <logobj_event_handler+0xe0>
   32936:	4620      	mov	r0, r4
   32938:	682b      	ldr	r3, [r5, #0]
   3293a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3293e:	602b      	str	r3, [r5, #0]
   32940:	b005      	add	sp, #20
   32942:	bd30      	pop	{r4, r5, pc}
   32944:	f248 0301 	movw	r3, #32769	; 0x8001
   32948:	4299      	cmp	r1, r3
   3294a:	d12e      	bne.n	329aa <logobj_event_handler+0xb6>
   3294c:	68c3      	ldr	r3, [r0, #12]
   3294e:	2b00      	cmp	r3, #0
   32950:	d135      	bne.n	329be <logobj_event_handler+0xca>
   32952:	6828      	ldr	r0, [r5, #0]
   32954:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   32958:	d03e      	beq.n	329d8 <logobj_event_handler+0xe4>
   3295a:	682b      	ldr	r3, [r5, #0]
   3295c:	b29b      	uxth	r3, r3
   3295e:	2b01      	cmp	r3, #1
   32960:	d105      	bne.n	3296e <logobj_event_handler+0x7a>
   32962:	682b      	ldr	r3, [r5, #0]
   32964:	0c1b      	lsrs	r3, r3, #16
   32966:	041b      	lsls	r3, r3, #16
   32968:	f043 0302 	orr.w	r3, r3, #2
   3296c:	602b      	str	r3, [r5, #0]
   3296e:	4b1e      	ldr	r3, [pc, #120]	; (329e8 <logobj_event_handler+0xf4>)
   32970:	781a      	ldrb	r2, [r3, #0]
   32972:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   32976:	2a00      	cmp	r2, #0
   32978:	d031      	beq.n	329de <logobj_event_handler+0xea>
   3297a:	4a1c      	ldr	r2, [pc, #112]	; (329ec <logobj_event_handler+0xf8>)
   3297c:	7811      	ldrb	r1, [r2, #0]
   3297e:	b909      	cbnz	r1, 32984 <logobj_event_handler+0x90>
   32980:	2101      	movs	r1, #1
   32982:	7011      	strb	r1, [r2, #0]
   32984:	2000      	movs	r0, #0
   32986:	7018      	strb	r0, [r3, #0]
   32988:	682b      	ldr	r3, [r5, #0]
   3298a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   3298e:	602b      	str	r3, [r5, #0]
   32990:	682b      	ldr	r3, [r5, #0]
   32992:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   32996:	602b      	str	r3, [r5, #0]
   32998:	e7d2      	b.n	32940 <logobj_event_handler+0x4c>
   3299a:	6800      	ldr	r0, [r0, #0]
   3299c:	2800      	cmp	r0, #0
   3299e:	d0cf      	beq.n	32940 <logobj_event_handler+0x4c>
   329a0:	f004 ff66 	bl	37870 <rpc_logobj_client_data_free>
   329a4:	4628      	mov	r0, r5
   329a6:	b005      	add	sp, #20
   329a8:	bd30      	pop	{r4, r5, pc}
   329aa:	2000      	movs	r0, #0
   329ac:	b005      	add	sp, #20
   329ae:	bd30      	pop	{r4, r5, pc}
   329b0:	682b      	ldr	r3, [r5, #0]
   329b2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   329b6:	d00b      	beq.n	329d0 <logobj_event_handler+0xdc>
   329b8:	68c0      	ldr	r0, [r0, #12]
   329ba:	2800      	cmp	r0, #0
   329bc:	d0e4      	beq.n	32988 <logobj_event_handler+0x94>
   329be:	230e      	movs	r3, #14
   329c0:	2000      	movs	r0, #0
   329c2:	606b      	str	r3, [r5, #4]
   329c4:	b005      	add	sp, #20
   329c6:	bd30      	pop	{r4, r5, pc}
   329c8:	68c3      	ldr	r3, [r0, #12]
   329ca:	2b01      	cmp	r3, #1
   329cc:	d1a5      	bne.n	3291a <logobj_event_handler+0x26>
   329ce:	e7f6      	b.n	329be <logobj_event_handler+0xca>
   329d0:	4618      	mov	r0, r3
   329d2:	e7b5      	b.n	32940 <logobj_event_handler+0x4c>
   329d4:	2002      	movs	r0, #2
   329d6:	e7b3      	b.n	32940 <logobj_event_handler+0x4c>
   329d8:	230e      	movs	r3, #14
   329da:	606b      	str	r3, [r5, #4]
   329dc:	e7b0      	b.n	32940 <logobj_event_handler+0x4c>
   329de:	4a03      	ldr	r2, [pc, #12]	; (329ec <logobj_event_handler+0xf8>)
   329e0:	7011      	strb	r1, [r2, #0]
   329e2:	e7cf      	b.n	32984 <logobj_event_handler+0x90>
   329e4:	20025754 	.word	0x20025754
   329e8:	2002d6b0 	.word	0x2002d6b0
   329ec:	2002d6b1 	.word	0x2002d6b1

000329f0 <logobj_interface_init>:
   329f0:	2300      	movs	r3, #0
   329f2:	b510      	push	{r4, lr}
   329f4:	4808      	ldr	r0, [pc, #32]	; (32a18 <logobj_interface_init+0x28>)
   329f6:	4c09      	ldr	r4, [pc, #36]	; (32a1c <logobj_interface_init+0x2c>)
   329f8:	4909      	ldr	r1, [pc, #36]	; (32a20 <logobj_interface_init+0x30>)
   329fa:	4a0a      	ldr	r2, [pc, #40]	; (32a24 <logobj_interface_init+0x34>)
   329fc:	7023      	strb	r3, [r4, #0]
   329fe:	6003      	str	r3, [r0, #0]
   32a00:	700b      	strb	r3, [r1, #0]
   32a02:	6013      	str	r3, [r2, #0]
   32a04:	f004 fef4 	bl	377f0 <rpc_logobj_client_init>
   32a08:	b918      	cbnz	r0, 32a12 <logobj_interface_init+0x22>
   32a0a:	2201      	movs	r2, #1
   32a0c:	4b06      	ldr	r3, [pc, #24]	; (32a28 <logobj_interface_init+0x38>)
   32a0e:	701a      	strb	r2, [r3, #0]
   32a10:	bd10      	pop	{r4, pc}
   32a12:	f04f 30ff 	mov.w	r0, #4294967295
   32a16:	bd10      	pop	{r4, pc}
   32a18:	20025754 	.word	0x20025754
   32a1c:	2002d6b1 	.word	0x2002d6b1
   32a20:	2002d6b0 	.word	0x2002d6b0
   32a24:	20025750 	.word	0x20025750
   32a28:	2002d6b2 	.word	0x2002d6b2

00032a2c <logobj_interface_deinit>:
   32a2c:	b510      	push	{r4, lr}
   32a2e:	4c05      	ldr	r4, [pc, #20]	; (32a44 <logobj_interface_deinit+0x18>)
   32a30:	7820      	ldrb	r0, [r4, #0]
   32a32:	b900      	cbnz	r0, 32a36 <logobj_interface_deinit+0xa>
   32a34:	bd10      	pop	{r4, pc}
   32a36:	f004 fee1 	bl	377fc <rpc_logobj_client_deinit>
   32a3a:	b908      	cbnz	r0, 32a40 <logobj_interface_deinit+0x14>
   32a3c:	7020      	strb	r0, [r4, #0]
   32a3e:	bd10      	pop	{r4, pc}
   32a40:	2003      	movs	r0, #3
   32a42:	bd10      	pop	{r4, pc}
   32a44:	2002d6b2 	.word	0x2002d6b2

00032a48 <logobj_interface_open>:
   32a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32a4c:	2400      	movs	r4, #0
   32a4e:	4b5b      	ldr	r3, [pc, #364]	; (32bbc <logobj_interface_open+0x174>)
   32a50:	b084      	sub	sp, #16
   32a52:	781b      	ldrb	r3, [r3, #0]
   32a54:	9401      	str	r4, [sp, #4]
   32a56:	2b00      	cmp	r3, #0
   32a58:	f000 809f 	beq.w	32b9a <logobj_interface_open+0x152>
   32a5c:	2866      	cmp	r0, #102	; 0x66
   32a5e:	4680      	mov	r8, r0
   32a60:	f040 808f 	bne.w	32b82 <logobj_interface_open+0x13a>
   32a64:	2902      	cmp	r1, #2
   32a66:	4689      	mov	r9, r1
   32a68:	f040 808b 	bne.w	32b82 <logobj_interface_open+0x13a>
   32a6c:	f240 2305 	movw	r3, #517	; 0x205
   32a70:	429a      	cmp	r2, r3
   32a72:	4692      	mov	sl, r2
   32a74:	f040 8085 	bne.w	32b82 <logobj_interface_open+0x13a>
   32a78:	4f51      	ldr	r7, [pc, #324]	; (32bc0 <logobj_interface_open+0x178>)
   32a7a:	683d      	ldr	r5, [r7, #0]
   32a7c:	2d00      	cmp	r5, #0
   32a7e:	f040 8086 	bne.w	32b8e <logobj_interface_open+0x146>
   32a82:	4a50      	ldr	r2, [pc, #320]	; (32bc4 <logobj_interface_open+0x17c>)
   32a84:	a801      	add	r0, sp, #4
   32a86:	f008 f9df 	bl	3ae48 <interface_socket_allocate>
   32a8a:	9b01      	ldr	r3, [sp, #4]
   32a8c:	4606      	mov	r6, r0
   32a8e:	2b00      	cmp	r3, #0
   32a90:	f000 808d 	beq.w	32bae <logobj_interface_open+0x166>
   32a94:	4629      	mov	r1, r5
   32a96:	2204      	movs	r2, #4
   32a98:	484b      	ldr	r0, [pc, #300]	; (32bc8 <logobj_interface_open+0x180>)
   32a9a:	603b      	str	r3, [r7, #0]
   32a9c:	f012 f943 	bl	44d26 <memset>
   32aa0:	9c01      	ldr	r4, [sp, #4]
   32aa2:	4629      	mov	r1, r5
   32aa4:	e9c4 8903 	strd	r8, r9, [r4, #12]
   32aa8:	f8c4 a014 	str.w	sl, [r4, #20]
   32aac:	a802      	add	r0, sp, #8
   32aae:	f004 fea9 	bl	37804 <rpc_logobj_client_request_alloc>
   32ab2:	2800      	cmp	r0, #0
   32ab4:	d142      	bne.n	32b3c <logobj_interface_open+0xf4>
   32ab6:	2201      	movs	r2, #1
   32ab8:	2104      	movs	r1, #4
   32aba:	9b02      	ldr	r3, [sp, #8]
   32abc:	4d43      	ldr	r5, [pc, #268]	; (32bcc <logobj_interface_open+0x184>)
   32abe:	7358      	strb	r0, [r3, #13]
   32ac0:	7398      	strb	r0, [r3, #14]
   32ac2:	73d8      	strb	r0, [r3, #15]
   32ac4:	7258      	strb	r0, [r3, #9]
   32ac6:	7298      	strb	r0, [r3, #10]
   32ac8:	72d8      	strb	r0, [r3, #11]
   32aca:	7219      	strb	r1, [r3, #8]
   32acc:	702a      	strb	r2, [r5, #0]
   32ace:	731a      	strb	r2, [r3, #12]
   32ad0:	6822      	ldr	r2, [r4, #0]
   32ad2:	4618      	mov	r0, r3
   32ad4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   32ad8:	6022      	str	r2, [r4, #0]
   32ada:	f247 0101 	movw	r1, #28673	; 0x7001
   32ade:	f004 fea9 	bl	37834 <rpc_logobj_client_request_send>
   32ae2:	bb68      	cbnz	r0, 32b40 <logobj_interface_open+0xf8>
   32ae4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   32ae6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   32aea:	2900      	cmp	r1, #0
   32aec:	bf08      	it	eq
   32aee:	f04f 31ff 	moveq.w	r1, #4294967295
   32af2:	ab04      	add	r3, sp, #16
   32af4:	f843 1d04 	str.w	r1, [r3, #-4]!
   32af8:	4630      	mov	r0, r6
   32afa:	4611      	mov	r1, r2
   32afc:	f008 fa56 	bl	3afac <interface_socket_wait>
   32b00:	4604      	mov	r4, r0
   32b02:	b310      	cbz	r0, 32b4a <logobj_interface_open+0x102>
   32b04:	9a01      	ldr	r2, [sp, #4]
   32b06:	2e00      	cmp	r6, #0
   32b08:	6813      	ldr	r3, [r2, #0]
   32b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32b0e:	6013      	str	r3, [r2, #0]
   32b10:	9a01      	ldr	r2, [sp, #4]
   32b12:	6813      	ldr	r3, [r2, #0]
   32b14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   32b18:	6013      	str	r3, [r2, #0]
   32b1a:	9a01      	ldr	r2, [sp, #4]
   32b1c:	6813      	ldr	r3, [r2, #0]
   32b1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   32b22:	6013      	str	r3, [r2, #0]
   32b24:	da3f      	bge.n	32ba6 <logobj_interface_open+0x15e>
   32b26:	2300      	movs	r3, #0
   32b28:	4620      	mov	r0, r4
   32b2a:	603b      	str	r3, [r7, #0]
   32b2c:	f04f 36ff 	mov.w	r6, #4294967295
   32b30:	f7f6 fd94 	bl	2965c <bsd_os_errno_set>
   32b34:	4630      	mov	r0, r6
   32b36:	b004      	add	sp, #16
   32b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32b3c:	240c      	movs	r4, #12
   32b3e:	e7e1      	b.n	32b04 <logobj_interface_open+0xbc>
   32b40:	9802      	ldr	r0, [sp, #8]
   32b42:	f004 fe8d 	bl	37860 <rpc_logobj_client_message_free>
   32b46:	2405      	movs	r4, #5
   32b48:	e7dc      	b.n	32b04 <logobj_interface_open+0xbc>
   32b4a:	4630      	mov	r0, r6
   32b4c:	f008 faa2 	bl	3b094 <interface_socket_from_handle_get>
   32b50:	b120      	cbz	r0, 32b5c <logobj_interface_open+0x114>
   32b52:	6844      	ldr	r4, [r0, #4]
   32b54:	b114      	cbz	r4, 32b5c <logobj_interface_open+0x114>
   32b56:	2300      	movs	r3, #0
   32b58:	6043      	str	r3, [r0, #4]
   32b5a:	e7d3      	b.n	32b04 <logobj_interface_open+0xbc>
   32b5c:	4630      	mov	r0, r6
   32b5e:	9a01      	ldr	r2, [sp, #4]
   32b60:	6813      	ldr	r3, [r2, #0]
   32b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32b66:	6013      	str	r3, [r2, #0]
   32b68:	9a01      	ldr	r2, [sp, #4]
   32b6a:	6813      	ldr	r3, [r2, #0]
   32b6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   32b70:	6013      	str	r3, [r2, #0]
   32b72:	9a01      	ldr	r2, [sp, #4]
   32b74:	6813      	ldr	r3, [r2, #0]
   32b76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   32b7a:	6013      	str	r3, [r2, #0]
   32b7c:	b004      	add	sp, #16
   32b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32b82:	2016      	movs	r0, #22
   32b84:	f7f6 fd6a 	bl	2965c <bsd_os_errno_set>
   32b88:	f04f 36ff 	mov.w	r6, #4294967295
   32b8c:	e7d2      	b.n	32b34 <logobj_interface_open+0xec>
   32b8e:	2001      	movs	r0, #1
   32b90:	f7f6 fd64 	bl	2965c <bsd_os_errno_set>
   32b94:	f04f 36ff 	mov.w	r6, #4294967295
   32b98:	e7cc      	b.n	32b34 <logobj_interface_open+0xec>
   32b9a:	2070      	movs	r0, #112	; 0x70
   32b9c:	f7f6 fd5e 	bl	2965c <bsd_os_errno_set>
   32ba0:	f04f 36ff 	mov.w	r6, #4294967295
   32ba4:	e7c6      	b.n	32b34 <logobj_interface_open+0xec>
   32ba6:	4630      	mov	r0, r6
   32ba8:	f008 f9b2 	bl	3af10 <interface_socket_free>
   32bac:	e7bb      	b.n	32b26 <logobj_interface_open+0xde>
   32bae:	2018      	movs	r0, #24
   32bb0:	f7f6 fd54 	bl	2965c <bsd_os_errno_set>
   32bb4:	f04f 36ff 	mov.w	r6, #4294967295
   32bb8:	e7bc      	b.n	32b34 <logobj_interface_open+0xec>
   32bba:	bf00      	nop
   32bbc:	2002d6b2 	.word	0x2002d6b2
   32bc0:	20025754 	.word	0x20025754
   32bc4:	000328dd 	.word	0x000328dd
   32bc8:	20025750 	.word	0x20025750
   32bcc:	2002d6b0 	.word	0x2002d6b0

00032bd0 <logobj_interface_read>:
   32bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32bd4:	b087      	sub	sp, #28
   32bd6:	2900      	cmp	r1, #0
   32bd8:	d06b      	beq.n	32cb2 <logobj_interface_read+0xe2>
   32bda:	2a00      	cmp	r2, #0
   32bdc:	4617      	mov	r7, r2
   32bde:	dd68      	ble.n	32cb2 <logobj_interface_read+0xe2>
   32be0:	461d      	mov	r5, r3
   32be2:	4680      	mov	r8, r0
   32be4:	460e      	mov	r6, r1
   32be6:	f008 fa55 	bl	3b094 <interface_socket_from_handle_get>
   32bea:	4604      	mov	r4, r0
   32bec:	2800      	cmp	r0, #0
   32bee:	d066      	beq.n	32cbe <logobj_interface_read+0xee>
   32bf0:	bb4d      	cbnz	r5, 32c46 <logobj_interface_read+0x76>
   32bf2:	69e0      	ldr	r0, [r4, #28]
   32bf4:	07aa      	lsls	r2, r5, #30
   32bf6:	6803      	ldr	r3, [r0, #0]
   32bf8:	68db      	ldr	r3, [r3, #12]
   32bfa:	d52d      	bpl.n	32c58 <logobj_interface_read+0x88>
   32bfc:	4798      	blx	r3
   32bfe:	3001      	adds	r0, #1
   32c00:	d047      	beq.n	32c92 <logobj_interface_read+0xc2>
   32c02:	6823      	ldr	r3, [r4, #0]
   32c04:	69e0      	ldr	r0, [r4, #28]
   32c06:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   32c0a:	d044      	beq.n	32c96 <logobj_interface_read+0xc6>
   32c0c:	2100      	movs	r1, #0
   32c0e:	6823      	ldr	r3, [r4, #0]
   32c10:	462a      	mov	r2, r5
   32c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   32c16:	6023      	str	r3, [r4, #0]
   32c18:	e9cd 1104 	strd	r1, r1, [sp, #16]
   32c1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   32c20:	6803      	ldr	r3, [r0, #0]
   32c22:	a902      	add	r1, sp, #8
   32c24:	689b      	ldr	r3, [r3, #8]
   32c26:	4798      	blx	r3
   32c28:	4605      	mov	r5, r0
   32c2a:	69e0      	ldr	r0, [r4, #28]
   32c2c:	6803      	ldr	r3, [r0, #0]
   32c2e:	68db      	ldr	r3, [r3, #12]
   32c30:	4798      	blx	r3
   32c32:	3001      	adds	r0, #1
   32c34:	d003      	beq.n	32c3e <logobj_interface_read+0x6e>
   32c36:	6823      	ldr	r3, [r4, #0]
   32c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   32c3c:	6023      	str	r3, [r4, #0]
   32c3e:	4628      	mov	r0, r5
   32c40:	b007      	add	sp, #28
   32c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32c46:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   32c4a:	d1d2      	bne.n	32bf2 <logobj_interface_read+0x22>
   32c4c:	202d      	movs	r0, #45	; 0x2d
   32c4e:	f7f6 fd05 	bl	2965c <bsd_os_errno_set>
   32c52:	f04f 35ff 	mov.w	r5, #4294967295
   32c56:	e7f2      	b.n	32c3e <logobj_interface_read+0x6e>
   32c58:	6822      	ldr	r2, [r4, #0]
   32c5a:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   32c5e:	d1cd      	bne.n	32bfc <logobj_interface_read+0x2c>
   32c60:	4798      	blx	r3
   32c62:	1c43      	adds	r3, r0, #1
   32c64:	d1cd      	bne.n	32c02 <logobj_interface_read+0x32>
   32c66:	6a22      	ldr	r2, [r4, #32]
   32c68:	ab06      	add	r3, sp, #24
   32c6a:	2a00      	cmp	r2, #0
   32c6c:	bf18      	it	ne
   32c6e:	4610      	movne	r0, r2
   32c70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   32c74:	f843 0d14 	str.w	r0, [r3, #-20]!
   32c78:	4611      	mov	r1, r2
   32c7a:	4640      	mov	r0, r8
   32c7c:	f008 f996 	bl	3afac <interface_socket_wait>
   32c80:	b158      	cbz	r0, 32c9a <logobj_interface_read+0xca>
   32c82:	f04f 35ff 	mov.w	r5, #4294967295
   32c86:	f7f6 fce9 	bl	2965c <bsd_os_errno_set>
   32c8a:	4628      	mov	r0, r5
   32c8c:	b007      	add	sp, #28
   32c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32c92:	2023      	movs	r0, #35	; 0x23
   32c94:	e7f5      	b.n	32c82 <logobj_interface_read+0xb2>
   32c96:	461d      	mov	r5, r3
   32c98:	e7c8      	b.n	32c2c <logobj_interface_read+0x5c>
   32c9a:	4640      	mov	r0, r8
   32c9c:	f008 f9fa 	bl	3b094 <interface_socket_from_handle_get>
   32ca0:	4603      	mov	r3, r0
   32ca2:	2800      	cmp	r0, #0
   32ca4:	d0ad      	beq.n	32c02 <logobj_interface_read+0x32>
   32ca6:	6840      	ldr	r0, [r0, #4]
   32ca8:	2800      	cmp	r0, #0
   32caa:	d0aa      	beq.n	32c02 <logobj_interface_read+0x32>
   32cac:	f8c3 9004 	str.w	r9, [r3, #4]
   32cb0:	e7e7      	b.n	32c82 <logobj_interface_read+0xb2>
   32cb2:	2016      	movs	r0, #22
   32cb4:	f7f6 fcd2 	bl	2965c <bsd_os_errno_set>
   32cb8:	f04f 35ff 	mov.w	r5, #4294967295
   32cbc:	e7bf      	b.n	32c3e <logobj_interface_read+0x6e>
   32cbe:	2009      	movs	r0, #9
   32cc0:	f7f6 fccc 	bl	2965c <bsd_os_errno_set>
   32cc4:	f04f 35ff 	mov.w	r5, #4294967295
   32cc8:	e7b9      	b.n	32c3e <logobj_interface_read+0x6e>
   32cca:	bf00      	nop

00032ccc <logobj_interface_write>:
   32ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32cd0:	b082      	sub	sp, #8
   32cd2:	2900      	cmp	r1, #0
   32cd4:	d06b      	beq.n	32dae <logobj_interface_write+0xe2>
   32cd6:	2a04      	cmp	r2, #4
   32cd8:	d169      	bne.n	32dae <logobj_interface_write+0xe2>
   32cda:	461f      	mov	r7, r3
   32cdc:	4606      	mov	r6, r0
   32cde:	460d      	mov	r5, r1
   32ce0:	f008 f9d8 	bl	3b094 <interface_socket_from_handle_get>
   32ce4:	4604      	mov	r4, r0
   32ce6:	2800      	cmp	r0, #0
   32ce8:	d074      	beq.n	32dd4 <logobj_interface_write+0x108>
   32cea:	b1e7      	cbz	r7, 32d26 <logobj_interface_write+0x5a>
   32cec:	07b8      	lsls	r0, r7, #30
   32cee:	d56b      	bpl.n	32dc8 <logobj_interface_write+0xfc>
   32cf0:	6823      	ldr	r3, [r4, #0]
   32cf2:	039b      	lsls	r3, r3, #14
   32cf4:	d564      	bpl.n	32dc0 <logobj_interface_write+0xf4>
   32cf6:	2700      	movs	r7, #0
   32cf8:	6823      	ldr	r3, [r4, #0]
   32cfa:	2100      	movs	r1, #0
   32cfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   32d00:	6023      	str	r3, [r4, #0]
   32d02:	4668      	mov	r0, sp
   32d04:	f8d5 8000 	ldr.w	r8, [r5]
   32d08:	f004 fd7c 	bl	37804 <rpc_logobj_client_request_alloc>
   32d0c:	b198      	cbz	r0, 32d36 <logobj_interface_write+0x6a>
   32d0e:	200c      	movs	r0, #12
   32d10:	6823      	ldr	r3, [r4, #0]
   32d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32d16:	6023      	str	r3, [r4, #0]
   32d18:	f7f6 fca0 	bl	2965c <bsd_os_errno_set>
   32d1c:	f04f 30ff 	mov.w	r0, #4294967295
   32d20:	b002      	add	sp, #8
   32d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32d26:	6803      	ldr	r3, [r0, #0]
   32d28:	00d9      	lsls	r1, r3, #3
   32d2a:	d4e1      	bmi.n	32cf0 <logobj_interface_write+0x24>
   32d2c:	6803      	ldr	r3, [r0, #0]
   32d2e:	039a      	lsls	r2, r3, #14
   32d30:	d548      	bpl.n	32dc4 <logobj_interface_write+0xf8>
   32d32:	2701      	movs	r7, #1
   32d34:	e7e0      	b.n	32cf8 <logobj_interface_write+0x2c>
   32d36:	2504      	movs	r5, #4
   32d38:	9b00      	ldr	r3, [sp, #0]
   32d3a:	f247 0103 	movw	r1, #28675	; 0x7003
   32d3e:	f8c3 800c 	str.w	r8, [r3, #12]
   32d42:	7258      	strb	r0, [r3, #9]
   32d44:	7298      	strb	r0, [r3, #10]
   32d46:	72d8      	strb	r0, [r3, #11]
   32d48:	721d      	strb	r5, [r3, #8]
   32d4a:	4618      	mov	r0, r3
   32d4c:	f004 fd72 	bl	37834 <rpc_logobj_client_request_send>
   32d50:	4680      	mov	r8, r0
   32d52:	bb18      	cbnz	r0, 32d9c <logobj_interface_write+0xd0>
   32d54:	b1d7      	cbz	r7, 32d8c <logobj_interface_write+0xc0>
   32d56:	6a61      	ldr	r1, [r4, #36]	; 0x24
   32d58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   32d5c:	2900      	cmp	r1, #0
   32d5e:	bf08      	it	eq
   32d60:	f04f 31ff 	moveq.w	r1, #4294967295
   32d64:	ab02      	add	r3, sp, #8
   32d66:	f843 1d04 	str.w	r1, [r3, #-4]!
   32d6a:	4630      	mov	r0, r6
   32d6c:	4611      	mov	r1, r2
   32d6e:	f008 f91d 	bl	3afac <interface_socket_wait>
   32d72:	b120      	cbz	r0, 32d7e <logobj_interface_write+0xb2>
   32d74:	6823      	ldr	r3, [r4, #0]
   32d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32d7a:	6023      	str	r3, [r4, #0]
   32d7c:	e7cc      	b.n	32d18 <logobj_interface_write+0x4c>
   32d7e:	4630      	mov	r0, r6
   32d80:	f008 f988 	bl	3b094 <interface_socket_from_handle_get>
   32d84:	4603      	mov	r3, r0
   32d86:	b108      	cbz	r0, 32d8c <logobj_interface_write+0xc0>
   32d88:	6840      	ldr	r0, [r0, #4]
   32d8a:	b9b0      	cbnz	r0, 32dba <logobj_interface_write+0xee>
   32d8c:	4628      	mov	r0, r5
   32d8e:	6823      	ldr	r3, [r4, #0]
   32d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32d94:	6023      	str	r3, [r4, #0]
   32d96:	b002      	add	sp, #8
   32d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32d9c:	9800      	ldr	r0, [sp, #0]
   32d9e:	f004 fd5f 	bl	37860 <rpc_logobj_client_message_free>
   32da2:	6823      	ldr	r3, [r4, #0]
   32da4:	2005      	movs	r0, #5
   32da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   32daa:	6023      	str	r3, [r4, #0]
   32dac:	e7b4      	b.n	32d18 <logobj_interface_write+0x4c>
   32dae:	2016      	movs	r0, #22
   32db0:	f7f6 fc54 	bl	2965c <bsd_os_errno_set>
   32db4:	f04f 30ff 	mov.w	r0, #4294967295
   32db8:	e7b2      	b.n	32d20 <logobj_interface_write+0x54>
   32dba:	f8c3 8004 	str.w	r8, [r3, #4]
   32dbe:	e7d9      	b.n	32d74 <logobj_interface_write+0xa8>
   32dc0:	2073      	movs	r0, #115	; 0x73
   32dc2:	e7a9      	b.n	32d18 <logobj_interface_write+0x4c>
   32dc4:	2009      	movs	r0, #9
   32dc6:	e7a7      	b.n	32d18 <logobj_interface_write+0x4c>
   32dc8:	202d      	movs	r0, #45	; 0x2d
   32dca:	f7f6 fc47 	bl	2965c <bsd_os_errno_set>
   32dce:	f04f 30ff 	mov.w	r0, #4294967295
   32dd2:	e7a5      	b.n	32d20 <logobj_interface_write+0x54>
   32dd4:	2009      	movs	r0, #9
   32dd6:	f7f6 fc41 	bl	2965c <bsd_os_errno_set>
   32dda:	f04f 30ff 	mov.w	r0, #4294967295
   32dde:	e79f      	b.n	32d20 <logobj_interface_write+0x54>

00032de0 <logobj_interface_setopt>:
   32de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   32de2:	2901      	cmp	r1, #1
   32de4:	b085      	sub	sp, #20
   32de6:	d06d      	beq.n	32ec4 <logobj_interface_setopt+0xe4>
   32de8:	461e      	mov	r6, r3
   32dea:	f240 2305 	movw	r3, #517	; 0x205
   32dee:	4299      	cmp	r1, r3
   32df0:	f040 80a0 	bne.w	32f34 <logobj_interface_setopt+0x154>
   32df4:	4607      	mov	r7, r0
   32df6:	4615      	mov	r5, r2
   32df8:	f008 f94c 	bl	3b094 <interface_socket_from_handle_get>
   32dfc:	4604      	mov	r4, r0
   32dfe:	2800      	cmp	r0, #0
   32e00:	f000 80c3 	beq.w	32f8a <logobj_interface_setopt+0x1aa>
   32e04:	2d01      	cmp	r5, #1
   32e06:	d019      	beq.n	32e3c <logobj_interface_setopt+0x5c>
   32e08:	2d02      	cmp	r5, #2
   32e0a:	d010      	beq.n	32e2e <logobj_interface_setopt+0x4e>
   32e0c:	252a      	movs	r5, #42	; 0x2a
   32e0e:	6803      	ldr	r3, [r0, #0]
   32e10:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   32e14:	6023      	str	r3, [r4, #0]
   32e16:	6823      	ldr	r3, [r4, #0]
   32e18:	4628      	mov	r0, r5
   32e1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   32e1e:	6023      	str	r3, [r4, #0]
   32e20:	f7f6 fc1c 	bl	2965c <bsd_os_errno_set>
   32e24:	f04f 35ff 	mov.w	r5, #4294967295
   32e28:	4628      	mov	r0, r5
   32e2a:	b005      	add	sp, #20
   32e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32e2e:	b116      	cbz	r6, 32e36 <logobj_interface_setopt+0x56>
   32e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   32e32:	2b01      	cmp	r3, #1
   32e34:	d04e      	beq.n	32ed4 <logobj_interface_setopt+0xf4>
   32e36:	6823      	ldr	r3, [r4, #0]
   32e38:	2516      	movs	r5, #22
   32e3a:	e7e9      	b.n	32e10 <logobj_interface_setopt+0x30>
   32e3c:	2e00      	cmp	r6, #0
   32e3e:	d0fa      	beq.n	32e36 <logobj_interface_setopt+0x56>
   32e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   32e42:	2b04      	cmp	r3, #4
   32e44:	d1f7      	bne.n	32e36 <logobj_interface_setopt+0x56>
   32e46:	2100      	movs	r1, #0
   32e48:	a803      	add	r0, sp, #12
   32e4a:	f004 fcdb 	bl	37804 <rpc_logobj_client_request_alloc>
   32e4e:	4605      	mov	r5, r0
   32e50:	2800      	cmp	r0, #0
   32e52:	d175      	bne.n	32f40 <logobj_interface_setopt+0x160>
   32e54:	9803      	ldr	r0, [sp, #12]
   32e56:	2208      	movs	r2, #8
   32e58:	4629      	mov	r1, r5
   32e5a:	300c      	adds	r0, #12
   32e5c:	f011 ff63 	bl	44d26 <memset>
   32e60:	9803      	ldr	r0, [sp, #12]
   32e62:	4631      	mov	r1, r6
   32e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   32e66:	300c      	adds	r0, #12
   32e68:	f011 ff3d 	bl	44ce6 <memcpy>
   32e6c:	2308      	movs	r3, #8
   32e6e:	9803      	ldr	r0, [sp, #12]
   32e70:	f247 0102 	movw	r1, #28674	; 0x7002
   32e74:	7203      	strb	r3, [r0, #8]
   32e76:	7245      	strb	r5, [r0, #9]
   32e78:	7285      	strb	r5, [r0, #10]
   32e7a:	72c5      	strb	r5, [r0, #11]
   32e7c:	6823      	ldr	r3, [r4, #0]
   32e7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   32e82:	6023      	str	r3, [r4, #0]
   32e84:	f004 fcd6 	bl	37834 <rpc_logobj_client_request_send>
   32e88:	2800      	cmp	r0, #0
   32e8a:	d178      	bne.n	32f7e <logobj_interface_setopt+0x19e>
   32e8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   32e8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   32e92:	2900      	cmp	r1, #0
   32e94:	bf08      	it	eq
   32e96:	f04f 31ff 	moveq.w	r1, #4294967295
   32e9a:	ab04      	add	r3, sp, #16
   32e9c:	f843 1d08 	str.w	r1, [r3, #-8]!
   32ea0:	4638      	mov	r0, r7
   32ea2:	4611      	mov	r1, r2
   32ea4:	f008 f882 	bl	3afac <interface_socket_wait>
   32ea8:	4605      	mov	r5, r0
   32eaa:	2800      	cmp	r0, #0
   32eac:	d140      	bne.n	32f30 <logobj_interface_setopt+0x150>
   32eae:	4638      	mov	r0, r7
   32eb0:	f008 f8f0 	bl	3b094 <interface_socket_from_handle_get>
   32eb4:	2800      	cmp	r0, #0
   32eb6:	d04e      	beq.n	32f56 <logobj_interface_setopt+0x176>
   32eb8:	6843      	ldr	r3, [r0, #4]
   32eba:	2b00      	cmp	r3, #0
   32ebc:	d04b      	beq.n	32f56 <logobj_interface_setopt+0x176>
   32ebe:	6045      	str	r5, [r0, #4]
   32ec0:	461d      	mov	r5, r3
   32ec2:	e035      	b.n	32f30 <logobj_interface_setopt+0x150>
   32ec4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   32ec6:	9400      	str	r4, [sp, #0]
   32ec8:	f008 f90c 	bl	3b0e4 <interface_socket_setopt>
   32ecc:	4605      	mov	r5, r0
   32ece:	4628      	mov	r0, r5
   32ed0:	b005      	add	sp, #20
   32ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32ed4:	2100      	movs	r1, #0
   32ed6:	a802      	add	r0, sp, #8
   32ed8:	7835      	ldrb	r5, [r6, #0]
   32eda:	f004 fc93 	bl	37804 <rpc_logobj_client_request_alloc>
   32ede:	bb78      	cbnz	r0, 32f40 <logobj_interface_setopt+0x160>
   32ee0:	2d01      	cmp	r5, #1
   32ee2:	bf08      	it	eq
   32ee4:	4b2c      	ldreq	r3, [pc, #176]	; (32f98 <logobj_interface_setopt+0x1b8>)
   32ee6:	f04f 0204 	mov.w	r2, #4
   32eea:	bf08      	it	eq
   32eec:	701d      	strbeq	r5, [r3, #0]
   32eee:	2300      	movs	r3, #0
   32ef0:	9802      	ldr	r0, [sp, #8]
   32ef2:	f247 0101 	movw	r1, #28673	; 0x7001
   32ef6:	7243      	strb	r3, [r0, #9]
   32ef8:	60c5      	str	r5, [r0, #12]
   32efa:	7283      	strb	r3, [r0, #10]
   32efc:	72c3      	strb	r3, [r0, #11]
   32efe:	7202      	strb	r2, [r0, #8]
   32f00:	6823      	ldr	r3, [r4, #0]
   32f02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   32f06:	6023      	str	r3, [r4, #0]
   32f08:	f004 fc94 	bl	37834 <rpc_logobj_client_request_send>
   32f0c:	4606      	mov	r6, r0
   32f0e:	bb80      	cbnz	r0, 32f72 <logobj_interface_setopt+0x192>
   32f10:	6a61      	ldr	r1, [r4, #36]	; 0x24
   32f12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   32f16:	2900      	cmp	r1, #0
   32f18:	bf08      	it	eq
   32f1a:	f04f 31ff 	moveq.w	r1, #4294967295
   32f1e:	ab04      	add	r3, sp, #16
   32f20:	f843 1d04 	str.w	r1, [r3, #-4]!
   32f24:	4638      	mov	r0, r7
   32f26:	4611      	mov	r1, r2
   32f28:	f008 f840 	bl	3afac <interface_socket_wait>
   32f2c:	4605      	mov	r5, r0
   32f2e:	b150      	cbz	r0, 32f46 <logobj_interface_setopt+0x166>
   32f30:	6823      	ldr	r3, [r4, #0]
   32f32:	e76d      	b.n	32e10 <logobj_interface_setopt+0x30>
   32f34:	202a      	movs	r0, #42	; 0x2a
   32f36:	f7f6 fb91 	bl	2965c <bsd_os_errno_set>
   32f3a:	f04f 35ff 	mov.w	r5, #4294967295
   32f3e:	e773      	b.n	32e28 <logobj_interface_setopt+0x48>
   32f40:	6823      	ldr	r3, [r4, #0]
   32f42:	250c      	movs	r5, #12
   32f44:	e764      	b.n	32e10 <logobj_interface_setopt+0x30>
   32f46:	4638      	mov	r0, r7
   32f48:	f008 f8a4 	bl	3b094 <interface_socket_from_handle_get>
   32f4c:	b140      	cbz	r0, 32f60 <logobj_interface_setopt+0x180>
   32f4e:	6845      	ldr	r5, [r0, #4]
   32f50:	b135      	cbz	r5, 32f60 <logobj_interface_setopt+0x180>
   32f52:	6046      	str	r6, [r0, #4]
   32f54:	e7ec      	b.n	32f30 <logobj_interface_setopt+0x150>
   32f56:	4631      	mov	r1, r6
   32f58:	2204      	movs	r2, #4
   32f5a:	4810      	ldr	r0, [pc, #64]	; (32f9c <logobj_interface_setopt+0x1bc>)
   32f5c:	f011 fec3 	bl	44ce6 <memcpy>
   32f60:	6823      	ldr	r3, [r4, #0]
   32f62:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   32f66:	6023      	str	r3, [r4, #0]
   32f68:	6823      	ldr	r3, [r4, #0]
   32f6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   32f6e:	6023      	str	r3, [r4, #0]
   32f70:	e75a      	b.n	32e28 <logobj_interface_setopt+0x48>
   32f72:	9802      	ldr	r0, [sp, #8]
   32f74:	f004 fc74 	bl	37860 <rpc_logobj_client_message_free>
   32f78:	2505      	movs	r5, #5
   32f7a:	6823      	ldr	r3, [r4, #0]
   32f7c:	e748      	b.n	32e10 <logobj_interface_setopt+0x30>
   32f7e:	9803      	ldr	r0, [sp, #12]
   32f80:	f004 fc6e 	bl	37860 <rpc_logobj_client_message_free>
   32f84:	2505      	movs	r5, #5
   32f86:	6823      	ldr	r3, [r4, #0]
   32f88:	e742      	b.n	32e10 <logobj_interface_setopt+0x30>
   32f8a:	2009      	movs	r0, #9
   32f8c:	f7f6 fb66 	bl	2965c <bsd_os_errno_set>
   32f90:	f04f 35ff 	mov.w	r5, #4294967295
   32f94:	e748      	b.n	32e28 <logobj_interface_setopt+0x48>
   32f96:	bf00      	nop
   32f98:	2002d6b0 	.word	0x2002d6b0
   32f9c:	20025750 	.word	0x20025750

00032fa0 <logobj_interface_getopt>:
   32fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   32fa2:	2901      	cmp	r1, #1
   32fa4:	b083      	sub	sp, #12
   32fa6:	9e08      	ldr	r6, [sp, #32]
   32fa8:	d030      	beq.n	3300c <logobj_interface_getopt+0x6c>
   32faa:	461f      	mov	r7, r3
   32fac:	f240 2305 	movw	r3, #517	; 0x205
   32fb0:	4299      	cmp	r1, r3
   32fb2:	d134      	bne.n	3301e <logobj_interface_getopt+0x7e>
   32fb4:	4615      	mov	r5, r2
   32fb6:	f008 f86d 	bl	3b094 <interface_socket_from_handle_get>
   32fba:	2800      	cmp	r0, #0
   32fbc:	d037      	beq.n	3302e <logobj_interface_getopt+0x8e>
   32fbe:	2d01      	cmp	r5, #1
   32fc0:	d015      	beq.n	32fee <logobj_interface_getopt+0x4e>
   32fc2:	2d02      	cmp	r5, #2
   32fc4:	d10b      	bne.n	32fde <logobj_interface_getopt+0x3e>
   32fc6:	b387      	cbz	r7, 3302a <logobj_interface_getopt+0x8a>
   32fc8:	6833      	ldr	r3, [r6, #0]
   32fca:	b373      	cbz	r3, 3302a <logobj_interface_getopt+0x8a>
   32fcc:	2300      	movs	r3, #0
   32fce:	2201      	movs	r2, #1
   32fd0:	4618      	mov	r0, r3
   32fd2:	491a      	ldr	r1, [pc, #104]	; (3303c <logobj_interface_getopt+0x9c>)
   32fd4:	7809      	ldrb	r1, [r1, #0]
   32fd6:	7039      	strb	r1, [r7, #0]
   32fd8:	6032      	str	r2, [r6, #0]
   32fda:	b003      	add	sp, #12
   32fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32fde:	2009      	movs	r0, #9
   32fe0:	f7f6 fb3c 	bl	2965c <bsd_os_errno_set>
   32fe4:	f04f 33ff 	mov.w	r3, #4294967295
   32fe8:	4618      	mov	r0, r3
   32fea:	b003      	add	sp, #12
   32fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32fee:	b1e7      	cbz	r7, 3302a <logobj_interface_getopt+0x8a>
   32ff0:	6833      	ldr	r3, [r6, #0]
   32ff2:	2b03      	cmp	r3, #3
   32ff4:	d919      	bls.n	3302a <logobj_interface_getopt+0x8a>
   32ff6:	4638      	mov	r0, r7
   32ff8:	2204      	movs	r2, #4
   32ffa:	4911      	ldr	r1, [pc, #68]	; (33040 <logobj_interface_getopt+0xa0>)
   32ffc:	f011 fe73 	bl	44ce6 <memcpy>
   33000:	2300      	movs	r3, #0
   33002:	2204      	movs	r2, #4
   33004:	4618      	mov	r0, r3
   33006:	6032      	str	r2, [r6, #0]
   33008:	b003      	add	sp, #12
   3300a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3300c:	9600      	str	r6, [sp, #0]
   3300e:	f008 f8af 	bl	3b170 <interface_socket_getopt>
   33012:	4603      	mov	r3, r0
   33014:	2800      	cmp	r0, #0
   33016:	d1e3      	bne.n	32fe0 <logobj_interface_getopt+0x40>
   33018:	4618      	mov	r0, r3
   3301a:	b003      	add	sp, #12
   3301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3301e:	202a      	movs	r0, #42	; 0x2a
   33020:	f7f6 fb1c 	bl	2965c <bsd_os_errno_set>
   33024:	f04f 33ff 	mov.w	r3, #4294967295
   33028:	e7de      	b.n	32fe8 <logobj_interface_getopt+0x48>
   3302a:	2016      	movs	r0, #22
   3302c:	e7d8      	b.n	32fe0 <logobj_interface_getopt+0x40>
   3302e:	2009      	movs	r0, #9
   33030:	f7f6 fb14 	bl	2965c <bsd_os_errno_set>
   33034:	f04f 33ff 	mov.w	r3, #4294967295
   33038:	e7d6      	b.n	32fe8 <logobj_interface_getopt+0x48>
   3303a:	bf00      	nop
   3303c:	2002d6b1 	.word	0x2002d6b1
   33040:	20025750 	.word	0x20025750

00033044 <logobj_interface_close>:
   33044:	b510      	push	{r4, lr}
   33046:	4604      	mov	r4, r0
   33048:	f008 f824 	bl	3b094 <interface_socket_from_handle_get>
   3304c:	b138      	cbz	r0, 3305e <logobj_interface_close+0x1a>
   3304e:	4620      	mov	r0, r4
   33050:	f007 ff5e 	bl	3af10 <interface_socket_free>
   33054:	2300      	movs	r3, #0
   33056:	4a05      	ldr	r2, [pc, #20]	; (3306c <logobj_interface_close+0x28>)
   33058:	4618      	mov	r0, r3
   3305a:	6013      	str	r3, [r2, #0]
   3305c:	bd10      	pop	{r4, pc}
   3305e:	2009      	movs	r0, #9
   33060:	f7f6 fafc 	bl	2965c <bsd_os_errno_set>
   33064:	f04f 30ff 	mov.w	r0, #4294967295
   33068:	bd10      	pop	{r4, pc}
   3306a:	bf00      	nop
   3306c:	20025754 	.word	0x20025754

00033070 <rpc_transport_send>:
   33070:	f000 bee2 	b.w	33e38 <rpc_transport_ipc_send>

00033074 <rpc_transport_rpc_alloc>:
   33074:	f000 bf62 	b.w	33f3c <rpc_transport_ipc_tx_rpc_data_alloc>

00033078 <rpc_transport_data_alloc>:
   33078:	f000 bfc8 	b.w	3400c <rpc_transport_ipc_tx_data_alloc>

0003307c <rpc_transport_rpc_free>:
   3307c:	f000 bdb6 	b.w	33bec <rpc_transport_ipc_msg_free>

00033080 <rpc_transport_data_free>:
   33080:	f000 ba64 	b.w	3354c <rpc_transport_ipc_data_free>

00033084 <ipc_trace_init>:
   33084:	4b01      	ldr	r3, [pc, #4]	; (3308c <ipc_trace_init+0x8>)
   33086:	6018      	str	r0, [r3, #0]
   33088:	4770      	bx	lr
   3308a:	bf00      	nop
   3308c:	20025764 	.word	0x20025764

00033090 <bsd_os_trace_irq_handler>:
   33090:	b5f0      	push	{r4, r5, r6, r7, lr}
   33092:	4b6e      	ldr	r3, [pc, #440]	; (3324c <bsd_os_trace_irq_handler+0x1bc>)
   33094:	b083      	sub	sp, #12
   33096:	781b      	ldrb	r3, [r3, #0]
   33098:	2b00      	cmp	r3, #0
   3309a:	f000 80d3 	beq.w	33244 <bsd_os_trace_irq_handler+0x1b4>
   3309e:	4b6c      	ldr	r3, [pc, #432]	; (33250 <bsd_os_trace_irq_handler+0x1c0>)
   330a0:	681c      	ldr	r4, [r3, #0]
   330a2:	b124      	cbz	r4, 330ae <bsd_os_trace_irq_handler+0x1e>
   330a4:	68a3      	ldr	r3, [r4, #8]
   330a6:	6862      	ldr	r2, [r4, #4]
   330a8:	4293      	cmp	r3, r2
   330aa:	f040 808c 	bne.w	331c6 <bsd_os_trace_irq_handler+0x136>
   330ae:	4b69      	ldr	r3, [pc, #420]	; (33254 <bsd_os_trace_irq_handler+0x1c4>)
   330b0:	681c      	ldr	r4, [r3, #0]
   330b2:	b11c      	cbz	r4, 330bc <bsd_os_trace_irq_handler+0x2c>
   330b4:	68a3      	ldr	r3, [r4, #8]
   330b6:	6862      	ldr	r2, [r4, #4]
   330b8:	4293      	cmp	r3, r2
   330ba:	d146      	bne.n	3314a <bsd_os_trace_irq_handler+0xba>
   330bc:	4b66      	ldr	r3, [pc, #408]	; (33258 <bsd_os_trace_irq_handler+0x1c8>)
   330be:	681c      	ldr	r4, [r3, #0]
   330c0:	b11c      	cbz	r4, 330ca <bsd_os_trace_irq_handler+0x3a>
   330c2:	68a3      	ldr	r3, [r4, #8]
   330c4:	6862      	ldr	r2, [r4, #4]
   330c6:	4293      	cmp	r3, r2
   330c8:	d101      	bne.n	330ce <bsd_os_trace_irq_handler+0x3e>
   330ca:	b003      	add	sp, #12
   330cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   330ce:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   330d2:	f8ad 2000 	strh.w	r2, [sp]
   330d6:	7822      	ldrb	r2, [r4, #0]
   330d8:	466e      	mov	r6, sp
   330da:	f88d 2004 	strb.w	r2, [sp, #4]
   330de:	6862      	ldr	r2, [r4, #4]
   330e0:	2105      	movs	r1, #5
   330e2:	4293      	cmp	r3, r2
   330e4:	bf2a      	itet	cs
   330e6:	6927      	ldrcs	r7, [r4, #16]
   330e8:	1ad7      	subcc	r7, r2, r3
   330ea:	1aff      	subcs	r7, r7, r3
   330ec:	4293      	cmp	r3, r2
   330ee:	bf94      	ite	ls
   330f0:	2500      	movls	r5, #0
   330f2:	68e5      	ldrhi	r5, [r4, #12]
   330f4:	b2bf      	uxth	r7, r7
   330f6:	bf88      	it	hi
   330f8:	1b52      	subhi	r2, r2, r5
   330fa:	4630      	mov	r0, r6
   330fc:	bf88      	it	hi
   330fe:	b295      	uxthhi	r5, r2
   33100:	f8ad 7002 	strh.w	r7, [sp, #2]
   33104:	f010 fd0a 	bl	43b1c <bsd_os_trace_put>
   33108:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3310c:	68a0      	ldr	r0, [r4, #8]
   3310e:	f010 fd05 	bl	43b1c <bsd_os_trace_put>
   33112:	68a3      	ldr	r3, [r4, #8]
   33114:	6922      	ldr	r2, [r4, #16]
   33116:	441f      	add	r7, r3
   33118:	4297      	cmp	r7, r2
   3311a:	bf08      	it	eq
   3311c:	68e3      	ldreq	r3, [r4, #12]
   3311e:	60a7      	str	r7, [r4, #8]
   33120:	bf08      	it	eq
   33122:	60a3      	streq	r3, [r4, #8]
   33124:	2d00      	cmp	r5, #0
   33126:	d0d0      	beq.n	330ca <bsd_os_trace_irq_handler+0x3a>
   33128:	2105      	movs	r1, #5
   3312a:	4630      	mov	r0, r6
   3312c:	f8ad 5002 	strh.w	r5, [sp, #2]
   33130:	f010 fcf4 	bl	43b1c <bsd_os_trace_put>
   33134:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33138:	68e0      	ldr	r0, [r4, #12]
   3313a:	f010 fcef 	bl	43b1c <bsd_os_trace_put>
   3313e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   33142:	68e3      	ldr	r3, [r4, #12]
   33144:	4413      	add	r3, r2
   33146:	60a3      	str	r3, [r4, #8]
   33148:	e7bf      	b.n	330ca <bsd_os_trace_irq_handler+0x3a>
   3314a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   3314e:	f8ad 2000 	strh.w	r2, [sp]
   33152:	7822      	ldrb	r2, [r4, #0]
   33154:	466e      	mov	r6, sp
   33156:	f88d 2004 	strb.w	r2, [sp, #4]
   3315a:	6862      	ldr	r2, [r4, #4]
   3315c:	2105      	movs	r1, #5
   3315e:	4293      	cmp	r3, r2
   33160:	bf2a      	itet	cs
   33162:	6927      	ldrcs	r7, [r4, #16]
   33164:	1ad7      	subcc	r7, r2, r3
   33166:	1aff      	subcs	r7, r7, r3
   33168:	4293      	cmp	r3, r2
   3316a:	bf94      	ite	ls
   3316c:	2500      	movls	r5, #0
   3316e:	68e5      	ldrhi	r5, [r4, #12]
   33170:	b2bf      	uxth	r7, r7
   33172:	bf88      	it	hi
   33174:	1b52      	subhi	r2, r2, r5
   33176:	4630      	mov	r0, r6
   33178:	bf88      	it	hi
   3317a:	b295      	uxthhi	r5, r2
   3317c:	f8ad 7002 	strh.w	r7, [sp, #2]
   33180:	f010 fccc 	bl	43b1c <bsd_os_trace_put>
   33184:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33188:	68a0      	ldr	r0, [r4, #8]
   3318a:	f010 fcc7 	bl	43b1c <bsd_os_trace_put>
   3318e:	68a3      	ldr	r3, [r4, #8]
   33190:	6922      	ldr	r2, [r4, #16]
   33192:	441f      	add	r7, r3
   33194:	4297      	cmp	r7, r2
   33196:	bf08      	it	eq
   33198:	68e3      	ldreq	r3, [r4, #12]
   3319a:	60a7      	str	r7, [r4, #8]
   3319c:	bf08      	it	eq
   3319e:	60a3      	streq	r3, [r4, #8]
   331a0:	2d00      	cmp	r5, #0
   331a2:	d08b      	beq.n	330bc <bsd_os_trace_irq_handler+0x2c>
   331a4:	2105      	movs	r1, #5
   331a6:	4630      	mov	r0, r6
   331a8:	f8ad 5002 	strh.w	r5, [sp, #2]
   331ac:	f010 fcb6 	bl	43b1c <bsd_os_trace_put>
   331b0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   331b4:	68e0      	ldr	r0, [r4, #12]
   331b6:	f010 fcb1 	bl	43b1c <bsd_os_trace_put>
   331ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   331be:	68e3      	ldr	r3, [r4, #12]
   331c0:	4413      	add	r3, r2
   331c2:	60a3      	str	r3, [r4, #8]
   331c4:	e77a      	b.n	330bc <bsd_os_trace_irq_handler+0x2c>
   331c6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   331ca:	f8ad 2000 	strh.w	r2, [sp]
   331ce:	7822      	ldrb	r2, [r4, #0]
   331d0:	466e      	mov	r6, sp
   331d2:	f88d 2004 	strb.w	r2, [sp, #4]
   331d6:	6862      	ldr	r2, [r4, #4]
   331d8:	2105      	movs	r1, #5
   331da:	4293      	cmp	r3, r2
   331dc:	bf2a      	itet	cs
   331de:	6927      	ldrcs	r7, [r4, #16]
   331e0:	1ad7      	subcc	r7, r2, r3
   331e2:	1aff      	subcs	r7, r7, r3
   331e4:	4293      	cmp	r3, r2
   331e6:	bf94      	ite	ls
   331e8:	2500      	movls	r5, #0
   331ea:	68e5      	ldrhi	r5, [r4, #12]
   331ec:	b2bf      	uxth	r7, r7
   331ee:	bf88      	it	hi
   331f0:	1b52      	subhi	r2, r2, r5
   331f2:	4630      	mov	r0, r6
   331f4:	bf88      	it	hi
   331f6:	b295      	uxthhi	r5, r2
   331f8:	f8ad 7002 	strh.w	r7, [sp, #2]
   331fc:	f010 fc8e 	bl	43b1c <bsd_os_trace_put>
   33200:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33204:	68a0      	ldr	r0, [r4, #8]
   33206:	f010 fc89 	bl	43b1c <bsd_os_trace_put>
   3320a:	68a3      	ldr	r3, [r4, #8]
   3320c:	6922      	ldr	r2, [r4, #16]
   3320e:	441f      	add	r7, r3
   33210:	4297      	cmp	r7, r2
   33212:	bf08      	it	eq
   33214:	68e3      	ldreq	r3, [r4, #12]
   33216:	60a7      	str	r7, [r4, #8]
   33218:	bf08      	it	eq
   3321a:	60a3      	streq	r3, [r4, #8]
   3321c:	2d00      	cmp	r5, #0
   3321e:	f43f af46 	beq.w	330ae <bsd_os_trace_irq_handler+0x1e>
   33222:	2105      	movs	r1, #5
   33224:	4630      	mov	r0, r6
   33226:	f8ad 5002 	strh.w	r5, [sp, #2]
   3322a:	f010 fc77 	bl	43b1c <bsd_os_trace_put>
   3322e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33232:	68e0      	ldr	r0, [r4, #12]
   33234:	f010 fc72 	bl	43b1c <bsd_os_trace_put>
   33238:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   3323c:	68e3      	ldr	r3, [r4, #12]
   3323e:	4413      	add	r3, r2
   33240:	60a3      	str	r3, [r4, #8]
   33242:	e734      	b.n	330ae <bsd_os_trace_irq_handler+0x1e>
   33244:	f7f6 fbae 	bl	299a4 <bsd_os_trace_irq_clear>
   33248:	e729      	b.n	3309e <bsd_os_trace_irq_handler+0xe>
   3324a:	bf00      	nop
   3324c:	2002d6b3 	.word	0x2002d6b3
   33250:	20025760 	.word	0x20025760
   33254:	20025758 	.word	0x20025758
   33258:	2002575c 	.word	0x2002575c

0003325c <ipc_trace_handle>:
   3325c:	2200      	movs	r2, #0
   3325e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33262:	4bb2      	ldr	r3, [pc, #712]	; (3352c <ipc_trace_handle+0x2d0>)
   33264:	b083      	sub	sp, #12
   33266:	681b      	ldr	r3, [r3, #0]
   33268:	6919      	ldr	r1, [r3, #16]
   3326a:	695c      	ldr	r4, [r3, #20]
   3326c:	7c18      	ldrb	r0, [r3, #16]
   3326e:	741a      	strb	r2, [r3, #16]
   33270:	7c58      	ldrb	r0, [r3, #17]
   33272:	745a      	strb	r2, [r3, #17]
   33274:	7c98      	ldrb	r0, [r3, #18]
   33276:	749a      	strb	r2, [r3, #18]
   33278:	7cd8      	ldrb	r0, [r3, #19]
   3327a:	74da      	strb	r2, [r3, #19]
   3327c:	7d18      	ldrb	r0, [r3, #20]
   3327e:	751a      	strb	r2, [r3, #20]
   33280:	7d58      	ldrb	r0, [r3, #21]
   33282:	755a      	strb	r2, [r3, #21]
   33284:	7d98      	ldrb	r0, [r3, #22]
   33286:	759a      	strb	r2, [r3, #22]
   33288:	7dd8      	ldrb	r0, [r3, #23]
   3328a:	75da      	strb	r2, [r3, #23]
   3328c:	b1a9      	cbz	r1, 332ba <ipc_trace_handle+0x5e>
   3328e:	3901      	subs	r1, #1
   33290:	2903      	cmp	r1, #3
   33292:	d812      	bhi.n	332ba <ipc_trace_handle+0x5e>
   33294:	e8df f001 	tbb	[pc, r1]
   33298:	1402a97c 	.word	0x1402a97c
   3329c:	2501      	movs	r5, #1
   3329e:	2003      	movs	r0, #3
   332a0:	2200      	movs	r2, #0
   332a2:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   332a6:	4ca2      	ldr	r4, [pc, #648]	; (33530 <ipc_trace_handle+0x2d4>)
   332a8:	7025      	strb	r5, [r4, #0]
   332aa:	7a1c      	ldrb	r4, [r3, #8]
   332ac:	7218      	strb	r0, [r3, #8]
   332ae:	7a58      	ldrb	r0, [r3, #9]
   332b0:	725a      	strb	r2, [r3, #9]
   332b2:	7a98      	ldrb	r0, [r3, #10]
   332b4:	729a      	strb	r2, [r3, #10]
   332b6:	7ada      	ldrb	r2, [r3, #11]
   332b8:	72d9      	strb	r1, [r3, #11]
   332ba:	b003      	add	sp, #12
   332bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   332c0:	2104      	movs	r1, #4
   332c2:	2200      	movs	r2, #0
   332c4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   332c8:	7a1c      	ldrb	r4, [r3, #8]
   332ca:	7219      	strb	r1, [r3, #8]
   332cc:	7a59      	ldrb	r1, [r3, #9]
   332ce:	725a      	strb	r2, [r3, #9]
   332d0:	4997      	ldr	r1, [pc, #604]	; (33530 <ipc_trace_handle+0x2d4>)
   332d2:	7a9c      	ldrb	r4, [r3, #10]
   332d4:	729a      	strb	r2, [r3, #10]
   332d6:	7adc      	ldrb	r4, [r3, #11]
   332d8:	72d8      	strb	r0, [r3, #11]
   332da:	700a      	strb	r2, [r1, #0]
   332dc:	780b      	ldrb	r3, [r1, #0]
   332de:	2b00      	cmp	r3, #0
   332e0:	f000 809f 	beq.w	33422 <ipc_trace_handle+0x1c6>
   332e4:	4b93      	ldr	r3, [pc, #588]	; (33534 <ipc_trace_handle+0x2d8>)
   332e6:	681c      	ldr	r4, [r3, #0]
   332e8:	b124      	cbz	r4, 332f4 <ipc_trace_handle+0x98>
   332ea:	68a3      	ldr	r3, [r4, #8]
   332ec:	6862      	ldr	r2, [r4, #4]
   332ee:	4293      	cmp	r3, r2
   332f0:	f040 80d9 	bne.w	334a6 <ipc_trace_handle+0x24a>
   332f4:	4b90      	ldr	r3, [pc, #576]	; (33538 <ipc_trace_handle+0x2dc>)
   332f6:	681c      	ldr	r4, [r3, #0]
   332f8:	b124      	cbz	r4, 33304 <ipc_trace_handle+0xa8>
   332fa:	68a3      	ldr	r3, [r4, #8]
   332fc:	6862      	ldr	r2, [r4, #4]
   332fe:	4293      	cmp	r3, r2
   33300:	f040 8092 	bne.w	33428 <ipc_trace_handle+0x1cc>
   33304:	4b8d      	ldr	r3, [pc, #564]	; (3353c <ipc_trace_handle+0x2e0>)
   33306:	681c      	ldr	r4, [r3, #0]
   33308:	2c00      	cmp	r4, #0
   3330a:	d0d6      	beq.n	332ba <ipc_trace_handle+0x5e>
   3330c:	68a3      	ldr	r3, [r4, #8]
   3330e:	6862      	ldr	r2, [r4, #4]
   33310:	4293      	cmp	r3, r2
   33312:	d0d2      	beq.n	332ba <ipc_trace_handle+0x5e>
   33314:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   33318:	f8ad 2000 	strh.w	r2, [sp]
   3331c:	7822      	ldrb	r2, [r4, #0]
   3331e:	466e      	mov	r6, sp
   33320:	f88d 2004 	strb.w	r2, [sp, #4]
   33324:	6862      	ldr	r2, [r4, #4]
   33326:	2105      	movs	r1, #5
   33328:	4293      	cmp	r3, r2
   3332a:	bf2a      	itet	cs
   3332c:	6927      	ldrcs	r7, [r4, #16]
   3332e:	1ad7      	subcc	r7, r2, r3
   33330:	1aff      	subcs	r7, r7, r3
   33332:	4293      	cmp	r3, r2
   33334:	bf94      	ite	ls
   33336:	2500      	movls	r5, #0
   33338:	68e5      	ldrhi	r5, [r4, #12]
   3333a:	b2bf      	uxth	r7, r7
   3333c:	bf88      	it	hi
   3333e:	1b52      	subhi	r2, r2, r5
   33340:	4630      	mov	r0, r6
   33342:	bf88      	it	hi
   33344:	b295      	uxthhi	r5, r2
   33346:	f8ad 7002 	strh.w	r7, [sp, #2]
   3334a:	f010 fbe7 	bl	43b1c <bsd_os_trace_put>
   3334e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33352:	68a0      	ldr	r0, [r4, #8]
   33354:	f010 fbe2 	bl	43b1c <bsd_os_trace_put>
   33358:	68a3      	ldr	r3, [r4, #8]
   3335a:	6922      	ldr	r2, [r4, #16]
   3335c:	441f      	add	r7, r3
   3335e:	4297      	cmp	r7, r2
   33360:	bf08      	it	eq
   33362:	68e3      	ldreq	r3, [r4, #12]
   33364:	60a7      	str	r7, [r4, #8]
   33366:	bf08      	it	eq
   33368:	60a3      	streq	r3, [r4, #8]
   3336a:	2d00      	cmp	r5, #0
   3336c:	d0a5      	beq.n	332ba <ipc_trace_handle+0x5e>
   3336e:	2105      	movs	r1, #5
   33370:	4630      	mov	r0, r6
   33372:	f8ad 5002 	strh.w	r5, [sp, #2]
   33376:	f010 fbd1 	bl	43b1c <bsd_os_trace_put>
   3337a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3337e:	68e0      	ldr	r0, [r4, #12]
   33380:	f010 fbcc 	bl	43b1c <bsd_os_trace_put>
   33384:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   33388:	68e3      	ldr	r3, [r4, #12]
   3338a:	4413      	add	r3, r2
   3338c:	60a3      	str	r3, [r4, #8]
   3338e:	e794      	b.n	332ba <ipc_trace_handle+0x5e>
   33390:	4a67      	ldr	r2, [pc, #412]	; (33530 <ipc_trace_handle+0x2d4>)
   33392:	7811      	ldrb	r1, [r2, #0]
   33394:	b109      	cbz	r1, 3339a <ipc_trace_handle+0x13e>
   33396:	2100      	movs	r1, #0
   33398:	7011      	strb	r1, [r2, #0]
   3339a:	68a5      	ldr	r5, [r4, #8]
   3339c:	2d00      	cmp	r5, #0
   3339e:	d03b      	beq.n	33418 <ipc_trace_handle+0x1bc>
   333a0:	f04f 0c00 	mov.w	ip, #0
   333a4:	f8df a190 	ldr.w	sl, [pc, #400]	; 33538 <ipc_trace_handle+0x2dc>
   333a8:	f8df b188 	ldr.w	fp, [pc, #392]	; 33534 <ipc_trace_handle+0x2d8>
   333ac:	4963      	ldr	r1, [pc, #396]	; (3353c <ipc_trace_handle+0x2e0>)
   333ae:	46e1      	mov	r9, ip
   333b0:	4666      	mov	r6, ip
   333b2:	4662      	mov	r2, ip
   333b4:	f8d1 e000 	ldr.w	lr, [r1]
   333b8:	f8da 8000 	ldr.w	r8, [sl]
   333bc:	f8db 7000 	ldr.w	r7, [fp]
   333c0:	e008      	b.n	333d4 <ipc_trace_handle+0x178>
   333c2:	2963      	cmp	r1, #99	; 0x63
   333c4:	d016      	beq.n	333f4 <ipc_trace_handle+0x198>
   333c6:	2961      	cmp	r1, #97	; 0x61
   333c8:	bf04      	itt	eq
   333ca:	4607      	moveq	r7, r0
   333cc:	2601      	moveq	r6, #1
   333ce:	3201      	adds	r2, #1
   333d0:	42aa      	cmp	r2, r5
   333d2:	d013      	beq.n	333fc <ipc_trace_handle+0x1a0>
   333d4:	1c91      	adds	r1, r2, #2
   333d6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   333da:	6848      	ldr	r0, [r1, #4]
   333dc:	7801      	ldrb	r1, [r0, #0]
   333de:	2962      	cmp	r1, #98	; 0x62
   333e0:	d1ef      	bne.n	333c2 <ipc_trace_handle+0x166>
   333e2:	4680      	mov	r8, r0
   333e4:	f04f 0901 	mov.w	r9, #1
   333e8:	e7f1      	b.n	333ce <ipc_trace_handle+0x172>
   333ea:	f7f6 fad3 	bl	29994 <bsd_os_trace_irq_set>
   333ee:	b003      	add	sp, #12
   333f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   333f4:	4686      	mov	lr, r0
   333f6:	f04f 0c01 	mov.w	ip, #1
   333fa:	e7e8      	b.n	333ce <ipc_trace_handle+0x172>
   333fc:	2e00      	cmp	r6, #0
   333fe:	f040 8091 	bne.w	33524 <ipc_trace_handle+0x2c8>
   33402:	f1b9 0f00 	cmp.w	r9, #0
   33406:	d001      	beq.n	3340c <ipc_trace_handle+0x1b0>
   33408:	f8ca 8000 	str.w	r8, [sl]
   3340c:	f1bc 0f00 	cmp.w	ip, #0
   33410:	d002      	beq.n	33418 <ipc_trace_handle+0x1bc>
   33412:	4a4a      	ldr	r2, [pc, #296]	; (3353c <ipc_trace_handle+0x2e0>)
   33414:	f8c2 e000 	str.w	lr, [r2]
   33418:	2001      	movs	r0, #1
   3341a:	2200      	movs	r2, #0
   3341c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   33420:	e743      	b.n	332aa <ipc_trace_handle+0x4e>
   33422:	f7f6 fabf 	bl	299a4 <bsd_os_trace_irq_clear>
   33426:	e75d      	b.n	332e4 <ipc_trace_handle+0x88>
   33428:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   3342c:	f8ad 2000 	strh.w	r2, [sp]
   33430:	7822      	ldrb	r2, [r4, #0]
   33432:	466e      	mov	r6, sp
   33434:	f88d 2004 	strb.w	r2, [sp, #4]
   33438:	6862      	ldr	r2, [r4, #4]
   3343a:	2105      	movs	r1, #5
   3343c:	4293      	cmp	r3, r2
   3343e:	bf2a      	itet	cs
   33440:	6927      	ldrcs	r7, [r4, #16]
   33442:	1ad7      	subcc	r7, r2, r3
   33444:	1aff      	subcs	r7, r7, r3
   33446:	4293      	cmp	r3, r2
   33448:	bf94      	ite	ls
   3344a:	2500      	movls	r5, #0
   3344c:	68e5      	ldrhi	r5, [r4, #12]
   3344e:	b2bf      	uxth	r7, r7
   33450:	bf88      	it	hi
   33452:	1b52      	subhi	r2, r2, r5
   33454:	4630      	mov	r0, r6
   33456:	bf88      	it	hi
   33458:	b295      	uxthhi	r5, r2
   3345a:	f8ad 7002 	strh.w	r7, [sp, #2]
   3345e:	f010 fb5d 	bl	43b1c <bsd_os_trace_put>
   33462:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33466:	68a0      	ldr	r0, [r4, #8]
   33468:	f010 fb58 	bl	43b1c <bsd_os_trace_put>
   3346c:	68a3      	ldr	r3, [r4, #8]
   3346e:	6922      	ldr	r2, [r4, #16]
   33470:	441f      	add	r7, r3
   33472:	4297      	cmp	r7, r2
   33474:	bf08      	it	eq
   33476:	68e3      	ldreq	r3, [r4, #12]
   33478:	60a7      	str	r7, [r4, #8]
   3347a:	bf08      	it	eq
   3347c:	60a3      	streq	r3, [r4, #8]
   3347e:	2d00      	cmp	r5, #0
   33480:	f43f af40 	beq.w	33304 <ipc_trace_handle+0xa8>
   33484:	2105      	movs	r1, #5
   33486:	4630      	mov	r0, r6
   33488:	f8ad 5002 	strh.w	r5, [sp, #2]
   3348c:	f010 fb46 	bl	43b1c <bsd_os_trace_put>
   33490:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33494:	68e0      	ldr	r0, [r4, #12]
   33496:	f010 fb41 	bl	43b1c <bsd_os_trace_put>
   3349a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   3349e:	68e3      	ldr	r3, [r4, #12]
   334a0:	4413      	add	r3, r2
   334a2:	60a3      	str	r3, [r4, #8]
   334a4:	e72e      	b.n	33304 <ipc_trace_handle+0xa8>
   334a6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   334aa:	f8ad 2000 	strh.w	r2, [sp]
   334ae:	7822      	ldrb	r2, [r4, #0]
   334b0:	466e      	mov	r6, sp
   334b2:	f88d 2004 	strb.w	r2, [sp, #4]
   334b6:	6862      	ldr	r2, [r4, #4]
   334b8:	2105      	movs	r1, #5
   334ba:	4293      	cmp	r3, r2
   334bc:	bf2a      	itet	cs
   334be:	6927      	ldrcs	r7, [r4, #16]
   334c0:	1ad7      	subcc	r7, r2, r3
   334c2:	1aff      	subcs	r7, r7, r3
   334c4:	4293      	cmp	r3, r2
   334c6:	bf94      	ite	ls
   334c8:	2500      	movls	r5, #0
   334ca:	68e5      	ldrhi	r5, [r4, #12]
   334cc:	b2bf      	uxth	r7, r7
   334ce:	bf88      	it	hi
   334d0:	1b52      	subhi	r2, r2, r5
   334d2:	4630      	mov	r0, r6
   334d4:	bf88      	it	hi
   334d6:	b295      	uxthhi	r5, r2
   334d8:	f8ad 7002 	strh.w	r7, [sp, #2]
   334dc:	f010 fb1e 	bl	43b1c <bsd_os_trace_put>
   334e0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   334e4:	68a0      	ldr	r0, [r4, #8]
   334e6:	f010 fb19 	bl	43b1c <bsd_os_trace_put>
   334ea:	68a3      	ldr	r3, [r4, #8]
   334ec:	6922      	ldr	r2, [r4, #16]
   334ee:	441f      	add	r7, r3
   334f0:	4297      	cmp	r7, r2
   334f2:	bf08      	it	eq
   334f4:	68e3      	ldreq	r3, [r4, #12]
   334f6:	60a7      	str	r7, [r4, #8]
   334f8:	bf08      	it	eq
   334fa:	60a3      	streq	r3, [r4, #8]
   334fc:	2d00      	cmp	r5, #0
   334fe:	f43f aef9 	beq.w	332f4 <ipc_trace_handle+0x98>
   33502:	2105      	movs	r1, #5
   33504:	4630      	mov	r0, r6
   33506:	f8ad 5002 	strh.w	r5, [sp, #2]
   3350a:	f010 fb07 	bl	43b1c <bsd_os_trace_put>
   3350e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33512:	68e0      	ldr	r0, [r4, #12]
   33514:	f010 fb02 	bl	43b1c <bsd_os_trace_put>
   33518:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   3351c:	68e3      	ldr	r3, [r4, #12]
   3351e:	4413      	add	r3, r2
   33520:	60a3      	str	r3, [r4, #8]
   33522:	e6e7      	b.n	332f4 <ipc_trace_handle+0x98>
   33524:	f8cb 7000 	str.w	r7, [fp]
   33528:	e76b      	b.n	33402 <ipc_trace_handle+0x1a6>
   3352a:	bf00      	nop
   3352c:	20025764 	.word	0x20025764
   33530:	2002d6b3 	.word	0x2002d6b3
   33534:	20025760 	.word	0x20025760
   33538:	20025758 	.word	0x20025758
   3353c:	2002575c 	.word	0x2002575c

00033540 <rpc_trace_coredump_in_progress>:
   33540:	4b01      	ldr	r3, [pc, #4]	; (33548 <rpc_trace_coredump_in_progress+0x8>)
   33542:	7818      	ldrb	r0, [r3, #0]
   33544:	4770      	bx	lr
   33546:	bf00      	nop
   33548:	2002d6b3 	.word	0x2002d6b3

0003354c <rpc_transport_ipc_data_free>:
   3354c:	b510      	push	{r4, lr}
   3354e:	4b0e      	ldr	r3, [pc, #56]	; (33588 <rpc_transport_ipc_data_free+0x3c>)
   33550:	4604      	mov	r4, r0
   33552:	e9d3 2300 	ldrd	r2, r3, [r3]
   33556:	4413      	add	r3, r2
   33558:	4298      	cmp	r0, r3
   3355a:	d20d      	bcs.n	33578 <rpc_transport_ipc_data_free+0x2c>
   3355c:	4282      	cmp	r2, r0
   3355e:	d80b      	bhi.n	33578 <rpc_transport_ipc_data_free+0x2c>
   33560:	f000 fd24 	bl	33fac <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   33564:	b158      	cbz	r0, 3357e <rpc_transport_ipc_data_free+0x32>
   33566:	4a09      	ldr	r2, [pc, #36]	; (3358c <rpc_transport_ipc_data_free+0x40>)
   33568:	6084      	str	r4, [r0, #8]
   3356a:	6002      	str	r2, [r0, #0]
   3356c:	f7ff fd80 	bl	33070 <rpc_transport_send>
   33570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33574:	f7f6 b9fe 	b.w	29974 <bsd_os_application_irq_set>
   33578:	4620      	mov	r0, r4
   3357a:	f007 f943 	bl	3a804 <nrf_shared_free>
   3357e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33582:	f7f6 b9f7 	b.w	29974 <bsd_os_application_irq_set>
   33586:	bf00      	nop
   33588:	20025768 	.word	0x20025768
   3358c:	00020001 	.word	0x00020001

00033590 <rpc_transport_ipc_init>:
   33590:	b188      	cbz	r0, 335b6 <rpc_transport_ipc_init+0x26>
   33592:	b510      	push	{r4, lr}
   33594:	b082      	sub	sp, #8
   33596:	aa01      	add	r2, sp, #4
   33598:	4669      	mov	r1, sp
   3359a:	4604      	mov	r4, r0
   3359c:	f000 fb62 	bl	33c64 <rpc_transport_ipc_tx_init>
   335a0:	4602      	mov	r2, r0
   335a2:	b148      	cbz	r0, 335b8 <rpc_transport_ipc_init+0x28>
   335a4:	4b12      	ldr	r3, [pc, #72]	; (335f0 <rpc_transport_ipc_init+0x60>)
   335a6:	3428      	adds	r4, #40	; 0x28
   335a8:	e894 0003 	ldmia.w	r4, {r0, r1}
   335ac:	e883 0003 	stmia.w	r3, {r0, r1}
   335b0:	4610      	mov	r0, r2
   335b2:	b002      	add	sp, #8
   335b4:	bd10      	pop	{r4, pc}
   335b6:	e7fe      	b.n	335b6 <rpc_transport_ipc_init+0x26>
   335b8:	e9dd 1200 	ldrd	r1, r2, [sp]
   335bc:	4620      	mov	r0, r4
   335be:	f000 f9ef 	bl	339a0 <rpc_transport_ipc_rx_init>
   335c2:	4602      	mov	r2, r0
   335c4:	4b0a      	ldr	r3, [pc, #40]	; (335f0 <rpc_transport_ipc_init+0x60>)
   335c6:	f104 0128 	add.w	r1, r4, #40	; 0x28
   335ca:	c903      	ldmia	r1, {r0, r1}
   335cc:	e883 0003 	stmia.w	r3, {r0, r1}
   335d0:	2a00      	cmp	r2, #0
   335d2:	d1ed      	bne.n	335b0 <rpc_transport_ipc_init+0x20>
   335d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   335d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   335da:	4906      	ldr	r1, [pc, #24]	; (335f4 <rpc_transport_ipc_init+0x64>)
   335dc:	015b      	lsls	r3, r3, #5
   335de:	b2db      	uxtb	r3, r3
   335e0:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   335e4:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   335e8:	6048      	str	r0, [r1, #4]
   335ea:	4610      	mov	r0, r2
   335ec:	b002      	add	sp, #8
   335ee:	bd10      	pop	{r4, pc}
   335f0:	20025768 	.word	0x20025768
   335f4:	e000e100 	.word	0xe000e100

000335f8 <rpc_transport_ipc_shutdown>:
   335f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   335fc:	b08c      	sub	sp, #48	; 0x30
   335fe:	f000 fd0f 	bl	34020 <rpc_transport_ipc_tx_suspend>
   33602:	2200      	movs	r2, #0
   33604:	2010      	movs	r0, #16
   33606:	4b31      	ldr	r3, [pc, #196]	; (336cc <rpc_transport_ipc_shutdown+0xd4>)
   33608:	f04f 0c01 	mov.w	ip, #1
   3360c:	4c30      	ldr	r4, [pc, #192]	; (336d0 <rpc_transport_ipc_shutdown+0xd8>)
   3360e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   33612:	6821      	ldr	r1, [r4, #0]
   33614:	2704      	movs	r7, #4
   33616:	910a      	str	r1, [sp, #40]	; 0x28
   33618:	492e      	ldr	r1, [pc, #184]	; (336d4 <rpc_transport_ipc_shutdown+0xdc>)
   3361a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   3361c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   33620:	680d      	ldr	r5, [r1, #0]
   33622:	950b      	str	r5, [sp, #44]	; 0x2c
   33624:	4d2c      	ldr	r5, [pc, #176]	; (336d8 <rpc_transport_ipc_shutdown+0xe0>)
   33626:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   33628:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   3362c:	682d      	ldr	r5, [r5, #0]
   3362e:	2640      	movs	r6, #64	; 0x40
   33630:	9509      	str	r5, [sp, #36]	; 0x24
   33632:	4d2a      	ldr	r5, [pc, #168]	; (336dc <rpc_transport_ipc_shutdown+0xe4>)
   33634:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   33638:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   3363c:	f8d5 e000 	ldr.w	lr, [r5]
   33640:	2580      	movs	r5, #128	; 0x80
   33642:	f8cd e020 	str.w	lr, [sp, #32]
   33646:	f8dd e020 	ldr.w	lr, [sp, #32]
   3364a:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   3364e:	f8d4 e000 	ldr.w	lr, [r4]
   33652:	2405      	movs	r4, #5
   33654:	f8cd e01c 	str.w	lr, [sp, #28]
   33658:	f8df e08c 	ldr.w	lr, [pc, #140]	; 336e8 <rpc_transport_ipc_shutdown+0xf0>
   3365c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   33660:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   33664:	f8de e000 	ldr.w	lr, [lr]
   33668:	f8cd e018 	str.w	lr, [sp, #24]
   3366c:	f8df e07c 	ldr.w	lr, [pc, #124]	; 336ec <rpc_transport_ipc_shutdown+0xf4>
   33670:	f8dd 8018 	ldr.w	r8, [sp, #24]
   33674:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   33678:	f8de e000 	ldr.w	lr, [lr]
   3367c:	f8cd e014 	str.w	lr, [sp, #20]
   33680:	f8dd e014 	ldr.w	lr, [sp, #20]
   33684:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   33688:	f8d1 c000 	ldr.w	ip, [r1]
   3368c:	f8cd c010 	str.w	ip, [sp, #16]
   33690:	f8dd c010 	ldr.w	ip, [sp, #16]
   33694:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   33698:	680f      	ldr	r7, [r1, #0]
   3369a:	9703      	str	r7, [sp, #12]
   3369c:	9f03      	ldr	r7, [sp, #12]
   3369e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   336a2:	6808      	ldr	r0, [r1, #0]
   336a4:	9002      	str	r0, [sp, #8]
   336a6:	9802      	ldr	r0, [sp, #8]
   336a8:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   336ac:	680e      	ldr	r6, [r1, #0]
   336ae:	480c      	ldr	r0, [pc, #48]	; (336e0 <rpc_transport_ipc_shutdown+0xe8>)
   336b0:	9601      	str	r6, [sp, #4]
   336b2:	9e01      	ldr	r6, [sp, #4]
   336b4:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   336b8:	6809      	ldr	r1, [r1, #0]
   336ba:	4b0a      	ldr	r3, [pc, #40]	; (336e4 <rpc_transport_ipc_shutdown+0xec>)
   336bc:	9100      	str	r1, [sp, #0]
   336be:	9900      	ldr	r1, [sp, #0]
   336c0:	8002      	strh	r2, [r0, #0]
   336c2:	601c      	str	r4, [r3, #0]
   336c4:	b00c      	add	sp, #48	; 0x30
   336c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   336ca:	bf00      	nop
   336cc:	4002a000 	.word	0x4002a000
   336d0:	4002a5a0 	.word	0x4002a5a0
   336d4:	4002a308 	.word	0x4002a308
   336d8:	4002a590 	.word	0x4002a590
   336dc:	4002a598 	.word	0x4002a598
   336e0:	2002a5e8 	.word	0x2002a5e8
   336e4:	20025780 	.word	0x20025780
   336e8:	4002a5a8 	.word	0x4002a5a8
   336ec:	4002a5ac 	.word	0x4002a5ac

000336f0 <bsd_os_application_irq_handler>:
   336f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   336f4:	f7f6 f946 	bl	29984 <bsd_os_application_irq_clear>
   336f8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 337d0 <bsd_os_application_irq_handler+0xe0>
   336fc:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 337d4 <bsd_os_application_irq_handler+0xe4>
   33700:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 337d8 <bsd_os_application_irq_handler+0xe8>
   33704:	f108 0908 	add.w	r9, r8, #8
   33708:	f858 7b04 	ldr.w	r7, [r8], #4
   3370c:	6839      	ldr	r1, [r7, #0]
   3370e:	b361      	cbz	r1, 3376a <bsd_os_application_irq_handler+0x7a>
   33710:	2400      	movs	r4, #0
   33712:	e002      	b.n	3371a <bsd_os_application_irq_handler+0x2a>
   33714:	3401      	adds	r4, #1
   33716:	428c      	cmp	r4, r1
   33718:	d227      	bcs.n	3376a <bsd_os_application_irq_handler+0x7a>
   3371a:	00e6      	lsls	r6, r4, #3
   3371c:	19bd      	adds	r5, r7, r6
   3371e:	68aa      	ldr	r2, [r5, #8]
   33720:	2a00      	cmp	r2, #0
   33722:	d0f7      	beq.n	33714 <bsd_os_application_irq_handler+0x24>
   33724:	686a      	ldr	r2, [r5, #4]
   33726:	b2d2      	uxtb	r2, r2
   33728:	2a01      	cmp	r2, #1
   3372a:	d1f3      	bne.n	33714 <bsd_os_application_irq_handler+0x24>
   3372c:	6868      	ldr	r0, [r5, #4]
   3372e:	f8bb 2000 	ldrh.w	r2, [fp]
   33732:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   33736:	d1ed      	bne.n	33714 <bsd_os_application_irq_handler+0x24>
   33738:	68a8      	ldr	r0, [r5, #8]
   3373a:	6841      	ldr	r1, [r0, #4]
   3373c:	b2c9      	uxtb	r1, r1
   3373e:	2902      	cmp	r1, #2
   33740:	d02c      	beq.n	3379c <bsd_os_application_irq_handler+0xac>
   33742:	2901      	cmp	r1, #1
   33744:	d015      	beq.n	33772 <bsd_os_application_irq_handler+0x82>
   33746:	3604      	adds	r6, #4
   33748:	59b9      	ldr	r1, [r7, r6]
   3374a:	3201      	adds	r2, #1
   3374c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   33750:	f041 0103 	orr.w	r1, r1, #3
   33754:	51b9      	str	r1, [r7, r6]
   33756:	f8ab 2000 	strh.w	r2, [fp]
   3375a:	f7f6 f90b 	bl	29974 <bsd_os_application_irq_set>
   3375e:	f858 7c04 	ldr.w	r7, [r8, #-4]
   33762:	3401      	adds	r4, #1
   33764:	6839      	ldr	r1, [r7, #0]
   33766:	428c      	cmp	r4, r1
   33768:	d3d7      	bcc.n	3371a <bsd_os_application_irq_handler+0x2a>
   3376a:	45c1      	cmp	r9, r8
   3376c:	d1cc      	bne.n	33708 <bsd_os_application_irq_handler+0x18>
   3376e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33772:	6801      	ldr	r1, [r0, #0]
   33774:	0c09      	lsrs	r1, r1, #16
   33776:	f002 ff9d 	bl	366b4 <rpc_handle_ctrl_message>
   3377a:	2801      	cmp	r0, #1
   3377c:	d014      	beq.n	337a8 <bsd_os_application_irq_handler+0xb8>
   3377e:	d310      	bcc.n	337a2 <bsd_os_application_irq_handler+0xb2>
   33780:	2802      	cmp	r0, #2
   33782:	d007      	beq.n	33794 <bsd_os_application_irq_handler+0xa4>
   33784:	2203      	movs	r2, #3
   33786:	4b11      	ldr	r3, [pc, #68]	; (337cc <bsd_os_application_irq_handler+0xdc>)
   33788:	4610      	mov	r0, r2
   3378a:	f8ca 2000 	str.w	r2, [sl]
   3378e:	601a      	str	r2, [r3, #0]
   33790:	f005 fc5c 	bl	3904c <rpc_transport_ipc_fault_handler>
   33794:	f858 7c04 	ldr.w	r7, [r8, #-4]
   33798:	6839      	ldr	r1, [r7, #0]
   3379a:	e7bb      	b.n	33714 <bsd_os_application_irq_handler+0x24>
   3379c:	f002 ffa2 	bl	366e4 <rpc_handle_data_message>
   337a0:	e7eb      	b.n	3377a <bsd_os_application_irq_handler+0x8a>
   337a2:	f8bb 2000 	ldrh.w	r2, [fp]
   337a6:	e7ce      	b.n	33746 <bsd_os_application_irq_handler+0x56>
   337a8:	686a      	ldr	r2, [r5, #4]
   337aa:	f8bb 1000 	ldrh.w	r1, [fp]
   337ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   337b2:	f042 0202 	orr.w	r2, r2, #2
   337b6:	606a      	str	r2, [r5, #4]
   337b8:	1c4a      	adds	r2, r1, #1
   337ba:	f8ab 2000 	strh.w	r2, [fp]
   337be:	f7f6 f8d9 	bl	29974 <bsd_os_application_irq_set>
   337c2:	f858 7c04 	ldr.w	r7, [r8, #-4]
   337c6:	6839      	ldr	r1, [r7, #0]
   337c8:	e7a4      	b.n	33714 <bsd_os_application_irq_handler+0x24>
   337ca:	bf00      	nop
   337cc:	20025770 	.word	0x20025770
   337d0:	20025778 	.word	0x20025778
   337d4:	2002a5e8 	.word	0x2002a5e8
   337d8:	20025780 	.word	0x20025780

000337dc <IPC_IRQHandler>:
   337dc:	b570      	push	{r4, r5, r6, lr}
   337de:	f44f 6680 	mov.w	r6, #1024	; 0x400
   337e2:	4d62      	ldr	r5, [pc, #392]	; (3396c <IPC_IRQHandler+0x190>)
   337e4:	4c62      	ldr	r4, [pc, #392]	; (33970 <IPC_IRQHandler+0x194>)
   337e6:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   337ea:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   337ee:	b086      	sub	sp, #24
   337f0:	061b      	lsls	r3, r3, #24
   337f2:	d50b      	bpl.n	3380c <IPC_IRQHandler+0x30>
   337f4:	f7ff fd32 	bl	3325c <ipc_trace_handle>
   337f8:	f7ff fea2 	bl	33540 <rpc_trace_coredump_in_progress>
   337fc:	2800      	cmp	r0, #0
   337fe:	d151      	bne.n	338a4 <IPC_IRQHandler+0xc8>
   33800:	4b5c      	ldr	r3, [pc, #368]	; (33974 <IPC_IRQHandler+0x198>)
   33802:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   33806:	681b      	ldr	r3, [r3, #0]
   33808:	9301      	str	r3, [sp, #4]
   3380a:	9b01      	ldr	r3, [sp, #4]
   3380c:	4b58      	ldr	r3, [pc, #352]	; (33970 <IPC_IRQHandler+0x194>)
   3380e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   33812:	f012 0201 	ands.w	r2, r2, #1
   33816:	d11c      	bne.n	33852 <IPC_IRQHandler+0x76>
   33818:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   3381c:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   33820:	d145      	bne.n	338ae <IPC_IRQHandler+0xd2>
   33822:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   33826:	0750      	lsls	r0, r2, #29
   33828:	d50c      	bpl.n	33844 <IPC_IRQHandler+0x68>
   3382a:	4a53      	ldr	r2, [pc, #332]	; (33978 <IPC_IRQHandler+0x19c>)
   3382c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   33830:	6812      	ldr	r2, [r2, #0]
   33832:	4b52      	ldr	r3, [pc, #328]	; (3397c <IPC_IRQHandler+0x1a0>)
   33834:	9204      	str	r2, [sp, #16]
   33836:	9a04      	ldr	r2, [sp, #16]
   33838:	681a      	ldr	r2, [r3, #0]
   3383a:	2a02      	cmp	r2, #2
   3383c:	d079      	beq.n	33932 <IPC_IRQHandler+0x156>
   3383e:	681a      	ldr	r2, [r3, #0]
   33840:	2a01      	cmp	r2, #1
   33842:	d05b      	beq.n	338fc <IPC_IRQHandler+0x120>
   33844:	4b4a      	ldr	r3, [pc, #296]	; (33970 <IPC_IRQHandler+0x194>)
   33846:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   3384a:	06d2      	lsls	r2, r2, #27
   3384c:	d41e      	bmi.n	3388c <IPC_IRQHandler+0xb0>
   3384e:	b006      	add	sp, #24
   33850:	bd70      	pop	{r4, r5, r6, pc}
   33852:	2000      	movs	r0, #0
   33854:	f248 0202 	movw	r2, #32770	; 0x8002
   33858:	4949      	ldr	r1, [pc, #292]	; (33980 <IPC_IRQHandler+0x1a4>)
   3385a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   3385e:	6809      	ldr	r1, [r1, #0]
   33860:	9102      	str	r1, [sp, #8]
   33862:	9902      	ldr	r1, [sp, #8]
   33864:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   33868:	4293      	cmp	r3, r2
   3386a:	d06b      	beq.n	33944 <IPC_IRQHandler+0x168>
   3386c:	d82a      	bhi.n	338c4 <IPC_IRQHandler+0xe8>
   3386e:	2b00      	cmp	r3, #0
   33870:	d062      	beq.n	33938 <IPC_IRQHandler+0x15c>
   33872:	2b02      	cmp	r3, #2
   33874:	d937      	bls.n	338e6 <IPC_IRQHandler+0x10a>
   33876:	f248 0201 	movw	r2, #32769	; 0x8001
   3387a:	4293      	cmp	r3, r2
   3387c:	d15c      	bne.n	33938 <IPC_IRQHandler+0x15c>
   3387e:	2003      	movs	r0, #3
   33880:	2207      	movs	r2, #7
   33882:	493e      	ldr	r1, [pc, #248]	; (3397c <IPC_IRQHandler+0x1a0>)
   33884:	4b3f      	ldr	r3, [pc, #252]	; (33984 <IPC_IRQHandler+0x1a8>)
   33886:	6008      	str	r0, [r1, #0]
   33888:	601a      	str	r2, [r3, #0]
   3388a:	e7e0      	b.n	3384e <IPC_IRQHandler+0x72>
   3388c:	2100      	movs	r1, #0
   3388e:	4a3e      	ldr	r2, [pc, #248]	; (33988 <IPC_IRQHandler+0x1ac>)
   33890:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   33894:	6813      	ldr	r3, [r2, #0]
   33896:	9305      	str	r3, [sp, #20]
   33898:	9b05      	ldr	r3, [sp, #20]
   3389a:	b006      	add	sp, #24
   3389c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   338a0:	f7f6 b868 	b.w	29974 <bsd_os_application_irq_set>
   338a4:	23e0      	movs	r3, #224	; 0xe0
   338a6:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   338aa:	606e      	str	r6, [r5, #4]
   338ac:	e7cf      	b.n	3384e <IPC_IRQHandler+0x72>
   338ae:	4937      	ldr	r1, [pc, #220]	; (3398c <IPC_IRQHandler+0x1b0>)
   338b0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   338b4:	680b      	ldr	r3, [r1, #0]
   338b6:	9303      	str	r3, [sp, #12]
   338b8:	9b03      	ldr	r3, [sp, #12]
   338ba:	b006      	add	sp, #24
   338bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   338c0:	f7ff be9a 	b.w	335f8 <rpc_transport_ipc_shutdown>
   338c4:	4a32      	ldr	r2, [pc, #200]	; (33990 <IPC_IRQHandler+0x1b4>)
   338c6:	4293      	cmp	r3, r2
   338c8:	d82a      	bhi.n	33920 <IPC_IRQHandler+0x144>
   338ca:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   338ce:	d82a      	bhi.n	33926 <IPC_IRQHandler+0x14a>
   338d0:	f248 0203 	movw	r2, #32771	; 0x8003
   338d4:	4293      	cmp	r3, r2
   338d6:	d12f      	bne.n	33938 <IPC_IRQHandler+0x15c>
   338d8:	2003      	movs	r0, #3
   338da:	2204      	movs	r2, #4
   338dc:	4927      	ldr	r1, [pc, #156]	; (3397c <IPC_IRQHandler+0x1a0>)
   338de:	4b29      	ldr	r3, [pc, #164]	; (33984 <IPC_IRQHandler+0x1a8>)
   338e0:	6008      	str	r0, [r1, #0]
   338e2:	601a      	str	r2, [r3, #0]
   338e4:	e7b3      	b.n	3384e <IPC_IRQHandler+0x72>
   338e6:	2303      	movs	r3, #3
   338e8:	4618      	mov	r0, r3
   338ea:	4924      	ldr	r1, [pc, #144]	; (3397c <IPC_IRQHandler+0x1a0>)
   338ec:	4a25      	ldr	r2, [pc, #148]	; (33984 <IPC_IRQHandler+0x1a8>)
   338ee:	600b      	str	r3, [r1, #0]
   338f0:	6013      	str	r3, [r2, #0]
   338f2:	b006      	add	sp, #24
   338f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   338f8:	f005 bba8 	b.w	3904c <rpc_transport_ipc_fault_handler>
   338fc:	4a25      	ldr	r2, [pc, #148]	; (33994 <IPC_IRQHandler+0x1b8>)
   338fe:	4826      	ldr	r0, [pc, #152]	; (33998 <IPC_IRQHandler+0x1bc>)
   33900:	6811      	ldr	r1, [r2, #0]
   33902:	688a      	ldr	r2, [r1, #8]
   33904:	6002      	str	r2, [r0, #0]
   33906:	6849      	ldr	r1, [r1, #4]
   33908:	6041      	str	r1, [r0, #4]
   3390a:	b312      	cbz	r2, 33952 <IPC_IRQHandler+0x176>
   3390c:	b309      	cbz	r1, 33952 <IPC_IRQHandler+0x176>
   3390e:	6812      	ldr	r2, [r2, #0]
   33910:	2a10      	cmp	r2, #16
   33912:	d824      	bhi.n	3395e <IPC_IRQHandler+0x182>
   33914:	680a      	ldr	r2, [r1, #0]
   33916:	2a10      	cmp	r2, #16
   33918:	d821      	bhi.n	3395e <IPC_IRQHandler+0x182>
   3391a:	2202      	movs	r2, #2
   3391c:	601a      	str	r2, [r3, #0]
   3391e:	e791      	b.n	33844 <IPC_IRQHandler+0x68>
   33920:	4a1e      	ldr	r2, [pc, #120]	; (3399c <IPC_IRQHandler+0x1c0>)
   33922:	4293      	cmp	r3, r2
   33924:	d108      	bne.n	33938 <IPC_IRQHandler+0x15c>
   33926:	2003      	movs	r0, #3
   33928:	4914      	ldr	r1, [pc, #80]	; (3397c <IPC_IRQHandler+0x1a0>)
   3392a:	4a16      	ldr	r2, [pc, #88]	; (33984 <IPC_IRQHandler+0x1a8>)
   3392c:	6008      	str	r0, [r1, #0]
   3392e:	6013      	str	r3, [r2, #0]
   33930:	e78d      	b.n	3384e <IPC_IRQHandler+0x72>
   33932:	f7f6 f81f 	bl	29974 <bsd_os_application_irq_set>
   33936:	e785      	b.n	33844 <IPC_IRQHandler+0x68>
   33938:	2303      	movs	r3, #3
   3393a:	4910      	ldr	r1, [pc, #64]	; (3397c <IPC_IRQHandler+0x1a0>)
   3393c:	4a11      	ldr	r2, [pc, #68]	; (33984 <IPC_IRQHandler+0x1a8>)
   3393e:	600b      	str	r3, [r1, #0]
   33940:	6013      	str	r3, [r2, #0]
   33942:	e784      	b.n	3384e <IPC_IRQHandler+0x72>
   33944:	2003      	movs	r0, #3
   33946:	2206      	movs	r2, #6
   33948:	490c      	ldr	r1, [pc, #48]	; (3397c <IPC_IRQHandler+0x1a0>)
   3394a:	4b0e      	ldr	r3, [pc, #56]	; (33984 <IPC_IRQHandler+0x1a8>)
   3394c:	6008      	str	r0, [r1, #0]
   3394e:	601a      	str	r2, [r3, #0]
   33950:	e77d      	b.n	3384e <IPC_IRQHandler+0x72>
   33952:	2003      	movs	r0, #3
   33954:	2110      	movs	r1, #16
   33956:	4a0b      	ldr	r2, [pc, #44]	; (33984 <IPC_IRQHandler+0x1a8>)
   33958:	6018      	str	r0, [r3, #0]
   3395a:	6011      	str	r1, [r2, #0]
   3395c:	e772      	b.n	33844 <IPC_IRQHandler+0x68>
   3395e:	2003      	movs	r0, #3
   33960:	f24c 0106 	movw	r1, #49158	; 0xc006
   33964:	4a07      	ldr	r2, [pc, #28]	; (33984 <IPC_IRQHandler+0x1a8>)
   33966:	6018      	str	r0, [r3, #0]
   33968:	6011      	str	r1, [r2, #0]
   3396a:	e76b      	b.n	33844 <IPC_IRQHandler+0x68>
   3396c:	e000e100 	.word	0xe000e100
   33970:	4002a000 	.word	0x4002a000
   33974:	4002a11c 	.word	0x4002a11c
   33978:	4002a108 	.word	0x4002a108
   3397c:	20025780 	.word	0x20025780
   33980:	4002a100 	.word	0x4002a100
   33984:	20025770 	.word	0x20025770
   33988:	4002a110 	.word	0x4002a110
   3398c:	4002a118 	.word	0x4002a118
   33990:	04400004 	.word	0x04400004
   33994:	20025784 	.word	0x20025784
   33998:	20025778 	.word	0x20025778
   3399c:	05500001 	.word	0x05500001

000339a0 <rpc_transport_ipc_rx_init>:
   339a0:	2800      	cmp	r0, #0
   339a2:	f000 8109 	beq.w	33bb8 <rpc_transport_ipc_rx_init+0x218>
   339a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   339aa:	6805      	ldr	r5, [r0, #0]
   339ac:	b097      	sub	sp, #92	; 0x5c
   339ae:	2d00      	cmp	r5, #0
   339b0:	f000 80f8 	beq.w	33ba4 <rpc_transport_ipc_rx_init+0x204>
   339b4:	6883      	ldr	r3, [r0, #8]
   339b6:	2b00      	cmp	r3, #0
   339b8:	f000 80f4 	beq.w	33ba4 <rpc_transport_ipc_rx_init+0x204>
   339bc:	6906      	ldr	r6, [r0, #16]
   339be:	2e00      	cmp	r6, #0
   339c0:	f000 80f0 	beq.w	33ba4 <rpc_transport_ipc_rx_init+0x204>
   339c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
   339c6:	2c00      	cmp	r4, #0
   339c8:	f000 80ec 	beq.w	33ba4 <rpc_transport_ipc_rx_init+0x204>
   339cc:	6844      	ldr	r4, [r0, #4]
   339ce:	2c1b      	cmp	r4, #27
   339d0:	f240 80ed 	bls.w	33bae <rpc_transport_ipc_rx_init+0x20e>
   339d4:	68c4      	ldr	r4, [r0, #12]
   339d6:	2c0b      	cmp	r4, #11
   339d8:	f240 80e9 	bls.w	33bae <rpc_transport_ipc_rx_init+0x20e>
   339dc:	f8d0 e014 	ldr.w	lr, [r0, #20]
   339e0:	f1be 0f17 	cmp.w	lr, #23
   339e4:	f240 80e3 	bls.w	33bae <rpc_transport_ipc_rx_init+0x20e>
   339e8:	4604      	mov	r4, r0
   339ea:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 33be0 <rpc_transport_ipc_rx_init+0x240>
   339ee:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   339f0:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 33be4 <rpc_transport_ipc_rx_init+0x244>
   339f4:	4690      	mov	r8, r2
   339f6:	9101      	str	r1, [sp, #4]
   339f8:	4672      	mov	r2, lr
   339fa:	2100      	movs	r1, #0
   339fc:	4630      	mov	r0, r6
   339fe:	f8ca 7000 	str.w	r7, [sl]
   33a02:	f8cb 3000 	str.w	r3, [fp]
   33a06:	f011 f98e 	bl	44d26 <memset>
   33a0a:	69e3      	ldr	r3, [r4, #28]
   33a0c:	4630      	mov	r0, r6
   33a0e:	6033      	str	r3, [r6, #0]
   33a10:	69a3      	ldr	r3, [r4, #24]
   33a12:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 33be8 <rpc_transport_ipc_rx_init+0x248>
   33a16:	6073      	str	r3, [r6, #4]
   33a18:	f7ff fb34 	bl	33084 <ipc_trace_init>
   33a1c:	2200      	movs	r2, #0
   33a1e:	2001      	movs	r0, #1
   33a20:	4b67      	ldr	r3, [pc, #412]	; (33bc0 <rpc_transport_ipc_rx_init+0x220>)
   33a22:	4968      	ldr	r1, [pc, #416]	; (33bc4 <rpc_transport_ipc_rx_init+0x224>)
   33a24:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   33a28:	6809      	ldr	r1, [r1, #0]
   33a2a:	f04f 0c80 	mov.w	ip, #128	; 0x80
   33a2e:	9106      	str	r1, [sp, #24]
   33a30:	4965      	ldr	r1, [pc, #404]	; (33bc8 <rpc_transport_ipc_rx_init+0x228>)
   33a32:	f8dd e018 	ldr.w	lr, [sp, #24]
   33a36:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   33a3a:	6809      	ldr	r1, [r1, #0]
   33a3c:	702a      	strb	r2, [r5, #0]
   33a3e:	9105      	str	r1, [sp, #20]
   33a40:	706a      	strb	r2, [r5, #1]
   33a42:	70ea      	strb	r2, [r5, #3]
   33a44:	70a8      	strb	r0, [r5, #2]
   33a46:	9905      	ldr	r1, [sp, #20]
   33a48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   33a4a:	f8db e000 	ldr.w	lr, [fp]
   33a4e:	6069      	str	r1, [r5, #4]
   33a50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   33a52:	61ae      	str	r6, [r5, #24]
   33a54:	60a9      	str	r1, [r5, #8]
   33a56:	9901      	ldr	r1, [sp, #4]
   33a58:	f8c5 e014 	str.w	lr, [r5, #20]
   33a5c:	6129      	str	r1, [r5, #16]
   33a5e:	495b      	ldr	r1, [pc, #364]	; (33bcc <rpc_transport_ipc_rx_init+0x22c>)
   33a60:	f8c5 800c 	str.w	r8, [r5, #12]
   33a64:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   33a68:	680c      	ldr	r4, [r1, #0]
   33a6a:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   33a6e:	9407      	str	r4, [sp, #28]
   33a70:	9c07      	ldr	r4, [sp, #28]
   33a72:	2404      	movs	r4, #4
   33a74:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   33a78:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   33a7c:	4f54      	ldr	r7, [pc, #336]	; (33bd0 <rpc_transport_ipc_rx_init+0x230>)
   33a7e:	9408      	str	r4, [sp, #32]
   33a80:	9c08      	ldr	r4, [sp, #32]
   33a82:	2410      	movs	r4, #16
   33a84:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   33a88:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   33a8c:	9409      	str	r4, [sp, #36]	; 0x24
   33a8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   33a90:	2440      	movs	r4, #64	; 0x40
   33a92:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   33a96:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   33a9a:	940a      	str	r4, [sp, #40]	; 0x28
   33a9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   33a9e:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   33aa2:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   33aa6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   33aaa:	940b      	str	r4, [sp, #44]	; 0x2c
   33aac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   33aae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   33ab2:	680c      	ldr	r4, [r1, #0]
   33ab4:	940c      	str	r4, [sp, #48]	; 0x30
   33ab6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   33ab8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   33abc:	688c      	ldr	r4, [r1, #8]
   33abe:	940d      	str	r4, [sp, #52]	; 0x34
   33ac0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   33ac2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   33ac6:	690c      	ldr	r4, [r1, #16]
   33ac8:	940e      	str	r4, [sp, #56]	; 0x38
   33aca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   33acc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   33ad0:	698c      	ldr	r4, [r1, #24]
   33ad2:	940f      	str	r4, [sp, #60]	; 0x3c
   33ad4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   33ad6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   33ada:	69cc      	ldr	r4, [r1, #28]
   33adc:	f501 7101 	add.w	r1, r1, #516	; 0x204
   33ae0:	9410      	str	r4, [sp, #64]	; 0x40
   33ae2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   33ae4:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   33ae8:	4304      	orrs	r4, r0
   33aea:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   33aee:	680d      	ldr	r5, [r1, #0]
   33af0:	4c38      	ldr	r4, [pc, #224]	; (33bd4 <rpc_transport_ipc_rx_init+0x234>)
   33af2:	9511      	str	r5, [sp, #68]	; 0x44
   33af4:	9d11      	ldr	r5, [sp, #68]	; 0x44
   33af6:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   33afa:	4d37      	ldr	r5, [pc, #220]	; (33bd8 <rpc_transport_ipc_rx_init+0x238>)
   33afc:	f046 0604 	orr.w	r6, r6, #4
   33b00:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   33b04:	680e      	ldr	r6, [r1, #0]
   33b06:	9612      	str	r6, [sp, #72]	; 0x48
   33b08:	9e12      	ldr	r6, [sp, #72]	; 0x48
   33b0a:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   33b0e:	f046 0610 	orr.w	r6, r6, #16
   33b12:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   33b16:	680e      	ldr	r6, [r1, #0]
   33b18:	9613      	str	r6, [sp, #76]	; 0x4c
   33b1a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   33b1c:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   33b20:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   33b24:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   33b28:	680e      	ldr	r6, [r1, #0]
   33b2a:	9614      	str	r6, [sp, #80]	; 0x50
   33b2c:	9e14      	ldr	r6, [sp, #80]	; 0x50
   33b2e:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   33b32:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   33b36:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   33b3a:	f8da 3000 	ldr.w	r3, [sl]
   33b3e:	6809      	ldr	r1, [r1, #0]
   33b40:	015b      	lsls	r3, r3, #5
   33b42:	9115      	str	r1, [sp, #84]	; 0x54
   33b44:	b2db      	uxtb	r3, r3
   33b46:	9915      	ldr	r1, [sp, #84]	; 0x54
   33b48:	6022      	str	r2, [r4, #0]
   33b4a:	f8c9 0000 	str.w	r0, [r9]
   33b4e:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   33b52:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   33b56:	f8c5 c004 	str.w	ip, [r5, #4]
   33b5a:	9204      	str	r2, [sp, #16]
   33b5c:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   33b60:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   33b64:	9304      	str	r3, [sp, #16]
   33b66:	9b04      	ldr	r3, [sp, #16]
   33b68:	f8d9 3000 	ldr.w	r3, [r9]
   33b6c:	4283      	cmp	r3, r0
   33b6e:	d10f      	bne.n	33b90 <rpc_transport_ipc_rx_init+0x1f0>
   33b70:	2614      	movs	r6, #20
   33b72:	4d1a      	ldr	r5, [pc, #104]	; (33bdc <rpc_transport_ipc_rx_init+0x23c>)
   33b74:	e000      	b.n	33b78 <rpc_transport_ipc_rx_init+0x1d8>
   33b76:	b15d      	cbz	r5, 33b90 <rpc_transport_ipc_rx_init+0x1f0>
   33b78:	a903      	add	r1, sp, #12
   33b7a:	2000      	movs	r0, #0
   33b7c:	9603      	str	r6, [sp, #12]
   33b7e:	f7f5 fcb5 	bl	294ec <bsd_os_timedwait>
   33b82:	9b03      	ldr	r3, [sp, #12]
   33b84:	f8d9 2000 	ldr.w	r2, [r9]
   33b88:	3b14      	subs	r3, #20
   33b8a:	2a01      	cmp	r2, #1
   33b8c:	441d      	add	r5, r3
   33b8e:	d0f2      	beq.n	33b76 <rpc_transport_ipc_rx_init+0x1d6>
   33b90:	f8d9 3000 	ldr.w	r3, [r9]
   33b94:	2b01      	cmp	r3, #1
   33b96:	bf0a      	itet	eq
   33b98:	200d      	moveq	r0, #13
   33b9a:	6820      	ldrne	r0, [r4, #0]
   33b9c:	6020      	streq	r0, [r4, #0]
   33b9e:	b017      	add	sp, #92	; 0x5c
   33ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33ba4:	f24c 000e 	movw	r0, #49166	; 0xc00e
   33ba8:	b017      	add	sp, #92	; 0x5c
   33baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33bae:	f24c 0009 	movw	r0, #49161	; 0xc009
   33bb2:	b017      	add	sp, #92	; 0x5c
   33bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33bb8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   33bbc:	4770      	bx	lr
   33bbe:	bf00      	nop
   33bc0:	4002a000 	.word	0x4002a000
   33bc4:	4002a610 	.word	0x4002a610
   33bc8:	4002a614 	.word	0x4002a614
   33bcc:	4002a590 	.word	0x4002a590
   33bd0:	40005000 	.word	0x40005000
   33bd4:	20025770 	.word	0x20025770
   33bd8:	e000e100 	.word	0xe000e100
   33bdc:	000249f0 	.word	0x000249f0
   33be0:	20025774 	.word	0x20025774
   33be4:	20025784 	.word	0x20025784
   33be8:	20025780 	.word	0x20025780

00033bec <rpc_transport_ipc_msg_free>:
   33bec:	b470      	push	{r4, r5, r6}
   33bee:	4e17      	ldr	r6, [pc, #92]	; (33c4c <rpc_transport_ipc_msg_free+0x60>)
   33bf0:	6831      	ldr	r1, [r6, #0]
   33bf2:	680d      	ldr	r5, [r1, #0]
   33bf4:	b1ad      	cbz	r5, 33c22 <rpc_transport_ipc_msg_free+0x36>
   33bf6:	688b      	ldr	r3, [r1, #8]
   33bf8:	4283      	cmp	r3, r0
   33bfa:	d024      	beq.n	33c46 <rpc_transport_ipc_msg_free+0x5a>
   33bfc:	2300      	movs	r3, #0
   33bfe:	3301      	adds	r3, #1
   33c00:	00da      	lsls	r2, r3, #3
   33c02:	429d      	cmp	r5, r3
   33c04:	eb01 0402 	add.w	r4, r1, r2
   33c08:	d00b      	beq.n	33c22 <rpc_transport_ipc_msg_free+0x36>
   33c0a:	68a4      	ldr	r4, [r4, #8]
   33c0c:	42a0      	cmp	r0, r4
   33c0e:	d1f6      	bne.n	33bfe <rpc_transport_ipc_msg_free+0x12>
   33c10:	3204      	adds	r2, #4
   33c12:	588b      	ldr	r3, [r1, r2]
   33c14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33c18:	f043 0303 	orr.w	r3, r3, #3
   33c1c:	508b      	str	r3, [r1, r2]
   33c1e:	bc70      	pop	{r4, r5, r6}
   33c20:	4770      	bx	lr
   33c22:	6871      	ldr	r1, [r6, #4]
   33c24:	680d      	ldr	r5, [r1, #0]
   33c26:	2d00      	cmp	r5, #0
   33c28:	d0f9      	beq.n	33c1e <rpc_transport_ipc_msg_free+0x32>
   33c2a:	688b      	ldr	r3, [r1, #8]
   33c2c:	4283      	cmp	r3, r0
   33c2e:	d00a      	beq.n	33c46 <rpc_transport_ipc_msg_free+0x5a>
   33c30:	2300      	movs	r3, #0
   33c32:	3301      	adds	r3, #1
   33c34:	00da      	lsls	r2, r3, #3
   33c36:	429d      	cmp	r5, r3
   33c38:	eb01 0402 	add.w	r4, r1, r2
   33c3c:	d0ef      	beq.n	33c1e <rpc_transport_ipc_msg_free+0x32>
   33c3e:	68a4      	ldr	r4, [r4, #8]
   33c40:	42a0      	cmp	r0, r4
   33c42:	d1f6      	bne.n	33c32 <rpc_transport_ipc_msg_free+0x46>
   33c44:	e7e4      	b.n	33c10 <rpc_transport_ipc_msg_free+0x24>
   33c46:	2204      	movs	r2, #4
   33c48:	e7e3      	b.n	33c12 <rpc_transport_ipc_msg_free+0x26>
   33c4a:	bf00      	nop
   33c4c:	20025778 	.word	0x20025778

00033c50 <rpc_transport_ipc_shutdown_done>:
   33c50:	4b03      	ldr	r3, [pc, #12]	; (33c60 <rpc_transport_ipc_shutdown_done+0x10>)
   33c52:	6818      	ldr	r0, [r3, #0]
   33c54:	f1a0 0005 	sub.w	r0, r0, #5
   33c58:	fab0 f080 	clz	r0, r0
   33c5c:	0940      	lsrs	r0, r0, #5
   33c5e:	4770      	bx	lr
   33c60:	20025780 	.word	0x20025780

00033c64 <rpc_transport_ipc_tx_init>:
   33c64:	2800      	cmp	r0, #0
   33c66:	f000 80b8 	beq.w	33dda <rpc_transport_ipc_tx_init+0x176>
   33c6a:	2900      	cmp	r1, #0
   33c6c:	f000 80b5 	beq.w	33dda <rpc_transport_ipc_tx_init+0x176>
   33c70:	2a00      	cmp	r2, #0
   33c72:	f000 80b2 	beq.w	33dda <rpc_transport_ipc_tx_init+0x176>
   33c76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33c7a:	6a04      	ldr	r4, [r0, #32]
   33c7c:	b085      	sub	sp, #20
   33c7e:	2c00      	cmp	r4, #0
   33c80:	f000 80a6 	beq.w	33dd0 <rpc_transport_ipc_tx_init+0x16c>
   33c84:	6a40      	ldr	r0, [r0, #36]	; 0x24
   33c86:	2800      	cmp	r0, #0
   33c88:	f000 80a2 	beq.w	33dd0 <rpc_transport_ipc_tx_init+0x16c>
   33c8c:	f642 4587 	movw	r5, #11399	; 0x2c87
   33c90:	f04f 0a00 	mov.w	sl, #0
   33c94:	4e55      	ldr	r6, [pc, #340]	; (33dec <rpc_transport_ipc_tx_init+0x188>)
   33c96:	42a8      	cmp	r0, r5
   33c98:	f886 a000 	strb.w	sl, [r6]
   33c9c:	f240 80a0 	bls.w	33de0 <rpc_transport_ipc_tx_init+0x17c>
   33ca0:	2708      	movs	r7, #8
   33ca2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 33e24 <rpc_transport_ipc_tx_init+0x1c0>
   33ca6:	4620      	mov	r0, r4
   33ca8:	4616      	mov	r6, r2
   33caa:	460d      	mov	r5, r1
   33cac:	2244      	movs	r2, #68	; 0x44
   33cae:	4651      	mov	r1, sl
   33cb0:	f8c9 4000 	str.w	r4, [r9]
   33cb4:	f011 f837 	bl	44d26 <memset>
   33cb8:	f8d9 2000 	ldr.w	r2, [r9]
   33cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   33cc0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 33e28 <rpc_transport_ipc_tx_init+0x1c4>
   33cc4:	f882 a001 	strb.w	sl, [r2, #1]
   33cc8:	f882 a002 	strb.w	sl, [r2, #2]
   33ccc:	f882 a003 	strb.w	sl, [r2, #3]
   33cd0:	7017      	strb	r7, [r2, #0]
   33cd2:	4618      	mov	r0, r3
   33cd4:	2244      	movs	r2, #68	; 0x44
   33cd6:	4651      	mov	r1, sl
   33cd8:	f8c8 3000 	str.w	r3, [r8]
   33cdc:	f011 f823 	bl	44d26 <memset>
   33ce0:	f8d8 2000 	ldr.w	r2, [r8]
   33ce4:	f104 0388 	add.w	r3, r4, #136	; 0x88
   33ce8:	f8df b140 	ldr.w	fp, [pc, #320]	; 33e2c <rpc_transport_ipc_tx_init+0x1c8>
   33cec:	7017      	strb	r7, [r2, #0]
   33cee:	f882 a001 	strb.w	sl, [r2, #1]
   33cf2:	f882 a002 	strb.w	sl, [r2, #2]
   33cf6:	f882 a003 	strb.w	sl, [r2, #3]
   33cfa:	4618      	mov	r0, r3
   33cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
   33d00:	4651      	mov	r1, sl
   33d02:	f8cb 3000 	str.w	r3, [fp]
   33d06:	f011 f80e 	bl	44d26 <memset>
   33d0a:	4b39      	ldr	r3, [pc, #228]	; (33df0 <rpc_transport_ipc_tx_init+0x18c>)
   33d0c:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   33d10:	f8c3 c000 	str.w	ip, [r3]
   33d14:	4651      	mov	r1, sl
   33d16:	4660      	mov	r0, ip
   33d18:	f44f 7200 	mov.w	r2, #512	; 0x200
   33d1c:	f011 f803 	bl	44d26 <memset>
   33d20:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   33d24:	2106      	movs	r1, #6
   33d26:	f04f 0e01 	mov.w	lr, #1
   33d2a:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   33d2e:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   33d32:	4b30      	ldr	r3, [pc, #192]	; (33df4 <rpc_transport_ipc_tx_init+0x190>)
   33d34:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   33d38:	605c      	str	r4, [r3, #4]
   33d3a:	4c2f      	ldr	r4, [pc, #188]	; (33df8 <rpc_transport_ipc_tx_init+0x194>)
   33d3c:	f8c3 c008 	str.w	ip, [r3, #8]
   33d40:	8199      	strh	r1, [r3, #12]
   33d42:	f8a3 e000 	strh.w	lr, [r3]
   33d46:	4619      	mov	r1, r3
   33d48:	611c      	str	r4, [r3, #16]
   33d4a:	4b2c      	ldr	r3, [pc, #176]	; (33dfc <rpc_transport_ipc_tx_init+0x198>)
   33d4c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 33e30 <rpc_transport_ipc_tx_init+0x1cc>
   33d50:	6120      	str	r0, [r4, #16]
   33d52:	482b      	ldr	r0, [pc, #172]	; (33e00 <rpc_transport_ipc_tx_init+0x19c>)
   33d54:	6063      	str	r3, [r4, #4]
   33d56:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   33d5a:	60a0      	str	r0, [r4, #8]
   33d5c:	f8c4 c000 	str.w	ip, [r4]
   33d60:	4828      	ldr	r0, [pc, #160]	; (33e04 <rpc_transport_ipc_tx_init+0x1a0>)
   33d62:	60e3      	str	r3, [r4, #12]
   33d64:	6162      	str	r2, [r4, #20]
   33d66:	f006 fb63 	bl	3a430 <nrf_mem_register>
   33d6a:	2800      	cmp	r0, #0
   33d6c:	d132      	bne.n	33dd4 <rpc_transport_ipc_tx_init+0x170>
   33d6e:	f04f 0c02 	mov.w	ip, #2
   33d72:	2420      	movs	r4, #32
   33d74:	f8d9 1000 	ldr.w	r1, [r9]
   33d78:	f8db 2000 	ldr.w	r2, [fp]
   33d7c:	6029      	str	r1, [r5, #0]
   33d7e:	4b1c      	ldr	r3, [pc, #112]	; (33df0 <rpc_transport_ipc_tx_init+0x18c>)
   33d80:	f8d8 1000 	ldr.w	r1, [r8]
   33d84:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 33e34 <rpc_transport_ipc_tx_init+0x1d0>
   33d88:	4d1f      	ldr	r5, [pc, #124]	; (33e08 <rpc_transport_ipc_tx_init+0x1a4>)
   33d8a:	6031      	str	r1, [r6, #0]
   33d8c:	f8ce 2000 	str.w	r2, [lr]
   33d90:	681b      	ldr	r3, [r3, #0]
   33d92:	491e      	ldr	r1, [pc, #120]	; (33e0c <rpc_transport_ipc_tx_init+0x1a8>)
   33d94:	f502 7200 	add.w	r2, r2, #512	; 0x200
   33d98:	602a      	str	r2, [r5, #0]
   33d9a:	4e1d      	ldr	r6, [pc, #116]	; (33e10 <rpc_transport_ipc_tx_init+0x1ac>)
   33d9c:	4a1d      	ldr	r2, [pc, #116]	; (33e14 <rpc_transport_ipc_tx_init+0x1b0>)
   33d9e:	4d1e      	ldr	r5, [pc, #120]	; (33e18 <rpc_transport_ipc_tx_init+0x1b4>)
   33da0:	600b      	str	r3, [r1, #0]
   33da2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   33da6:	491d      	ldr	r1, [pc, #116]	; (33e1c <rpc_transport_ipc_tx_init+0x1b8>)
   33da8:	6033      	str	r3, [r6, #0]
   33daa:	8028      	strh	r0, [r5, #0]
   33dac:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   33db0:	6809      	ldr	r1, [r1, #0]
   33db2:	4b1b      	ldr	r3, [pc, #108]	; (33e20 <rpc_transport_ipc_tx_init+0x1bc>)
   33db4:	9103      	str	r1, [sp, #12]
   33db6:	9903      	ldr	r1, [sp, #12]
   33db8:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   33dbc:	6819      	ldr	r1, [r3, #0]
   33dbe:	443b      	add	r3, r7
   33dc0:	9102      	str	r1, [sp, #8]
   33dc2:	9902      	ldr	r1, [sp, #8]
   33dc4:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   33dc8:	681b      	ldr	r3, [r3, #0]
   33dca:	9301      	str	r3, [sp, #4]
   33dcc:	9b01      	ldr	r3, [sp, #4]
   33dce:	e001      	b.n	33dd4 <rpc_transport_ipc_tx_init+0x170>
   33dd0:	f24c 0007 	movw	r0, #49159	; 0xc007
   33dd4:	b005      	add	sp, #20
   33dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33dda:	f24c 000e 	movw	r0, #49166	; 0xc00e
   33dde:	4770      	bx	lr
   33de0:	f24c 0004 	movw	r0, #49156	; 0xc004
   33de4:	b005      	add	sp, #20
   33de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33dea:	bf00      	nop
   33dec:	2002d6b4 	.word	0x2002d6b4
   33df0:	200257b0 	.word	0x200257b0
   33df4:	2002579c 	.word	0x2002579c
   33df8:	200257c0 	.word	0x200257c0
   33dfc:	00040080 	.word	0x00040080
   33e00:	00040100 	.word	0x00040100
   33e04:	20025788 	.word	0x20025788
   33e08:	20025794 	.word	0x20025794
   33e0c:	20025790 	.word	0x20025790
   33e10:	2002578c 	.word	0x2002578c
   33e14:	4002a000 	.word	0x4002a000
   33e18:	2002a5ea 	.word	0x2002a5ea
   33e1c:	4002a514 	.word	0x4002a514
   33e20:	4002a51c 	.word	0x4002a51c
   33e24:	200257bc 	.word	0x200257bc
   33e28:	200257b4 	.word	0x200257b4
   33e2c:	200257b8 	.word	0x200257b8
   33e30:	00080040 	.word	0x00080040
   33e34:	20025798 	.word	0x20025798

00033e38 <rpc_transport_ipc_send>:
   33e38:	2800      	cmp	r0, #0
   33e3a:	d061      	beq.n	33f00 <rpc_transport_ipc_send+0xc8>
   33e3c:	b4f0      	push	{r4, r5, r6, r7}
   33e3e:	4b34      	ldr	r3, [pc, #208]	; (33f10 <rpc_transport_ipc_send+0xd8>)
   33e40:	b082      	sub	sp, #8
   33e42:	681a      	ldr	r2, [r3, #0]
   33e44:	4b33      	ldr	r3, [pc, #204]	; (33f14 <rpc_transport_ipc_send+0xdc>)
   33e46:	4282      	cmp	r2, r0
   33e48:	d81e      	bhi.n	33e88 <rpc_transport_ipc_send+0x50>
   33e4a:	681b      	ldr	r3, [r3, #0]
   33e4c:	4932      	ldr	r1, [pc, #200]	; (33f18 <rpc_transport_ipc_send+0xe0>)
   33e4e:	4283      	cmp	r3, r0
   33e50:	6809      	ldr	r1, [r1, #0]
   33e52:	d803      	bhi.n	33e5c <rpc_transport_ipc_send+0x24>
   33e54:	4c31      	ldr	r4, [pc, #196]	; (33f1c <rpc_transport_ipc_send+0xe4>)
   33e56:	6824      	ldr	r4, [r4, #0]
   33e58:	4284      	cmp	r4, r0
   33e5a:	d849      	bhi.n	33ef0 <rpc_transport_ipc_send+0xb8>
   33e5c:	4281      	cmp	r1, r0
   33e5e:	d90e      	bls.n	33e7e <rpc_transport_ipc_send+0x46>
   33e60:	4b2f      	ldr	r3, [pc, #188]	; (33f20 <rpc_transport_ipc_send+0xe8>)
   33e62:	781b      	ldrb	r3, [r3, #0]
   33e64:	2b00      	cmp	r3, #0
   33e66:	d14e      	bne.n	33f06 <rpc_transport_ipc_send+0xce>
   33e68:	1a83      	subs	r3, r0, r2
   33e6a:	492e      	ldr	r1, [pc, #184]	; (33f24 <rpc_transport_ipc_send+0xec>)
   33e6c:	099f      	lsrs	r7, r3, #6
   33e6e:	069b      	lsls	r3, r3, #26
   33e70:	680a      	ldr	r2, [r1, #0]
   33e72:	4d2d      	ldr	r5, [pc, #180]	; (33f28 <rpc_transport_ipc_send+0xf0>)
   33e74:	f04f 0403 	mov.w	r4, #3
   33e78:	f04f 0602 	mov.w	r6, #2
   33e7c:	d014      	beq.n	33ea8 <rpc_transport_ipc_send+0x70>
   33e7e:	f24c 0010 	movw	r0, #49168	; 0xc010
   33e82:	b002      	add	sp, #8
   33e84:	bcf0      	pop	{r4, r5, r6, r7}
   33e86:	4770      	bx	lr
   33e88:	681b      	ldr	r3, [r3, #0]
   33e8a:	4298      	cmp	r0, r3
   33e8c:	d3f7      	bcc.n	33e7e <rpc_transport_ipc_send+0x46>
   33e8e:	4a23      	ldr	r2, [pc, #140]	; (33f1c <rpc_transport_ipc_send+0xe4>)
   33e90:	6812      	ldr	r2, [r2, #0]
   33e92:	4290      	cmp	r0, r2
   33e94:	d2f3      	bcs.n	33e7e <rpc_transport_ipc_send+0x46>
   33e96:	2401      	movs	r4, #1
   33e98:	1ac3      	subs	r3, r0, r3
   33e9a:	4a24      	ldr	r2, [pc, #144]	; (33f2c <rpc_transport_ipc_send+0xf4>)
   33e9c:	099f      	lsrs	r7, r3, #6
   33e9e:	069b      	lsls	r3, r3, #26
   33ea0:	4626      	mov	r6, r4
   33ea2:	6812      	ldr	r2, [r2, #0]
   33ea4:	4d22      	ldr	r5, [pc, #136]	; (33f30 <rpc_transport_ipc_send+0xf8>)
   33ea6:	d1ea      	bne.n	33e7e <rpc_transport_ipc_send+0x46>
   33ea8:	6841      	ldr	r1, [r0, #4]
   33eaa:	b2c9      	uxtb	r1, r1
   33eac:	428e      	cmp	r6, r1
   33eae:	d122      	bne.n	33ef6 <rpc_transport_ipc_send+0xbe>
   33eb0:	2020      	movs	r0, #32
   33eb2:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   33eb6:	491f      	ldr	r1, [pc, #124]	; (33f34 <rpc_transport_ipc_send+0xfc>)
   33eb8:	685a      	ldr	r2, [r3, #4]
   33eba:	880e      	ldrh	r6, [r1, #0]
   33ebc:	b292      	uxth	r2, r2
   33ebe:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   33ec2:	605a      	str	r2, [r3, #4]
   33ec4:	685a      	ldr	r2, [r3, #4]
   33ec6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   33eca:	f042 0201 	orr.w	r2, r2, #1
   33ece:	605a      	str	r2, [r3, #4]
   33ed0:	bf00      	nop
   33ed2:	3801      	subs	r0, #1
   33ed4:	d1fc      	bne.n	33ed0 <rpc_transport_ipc_send+0x98>
   33ed6:	2201      	movs	r2, #1
   33ed8:	4b17      	ldr	r3, [pc, #92]	; (33f38 <rpc_transport_ipc_send+0x100>)
   33eda:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   33ede:	682a      	ldr	r2, [r5, #0]
   33ee0:	880b      	ldrh	r3, [r1, #0]
   33ee2:	9201      	str	r2, [sp, #4]
   33ee4:	9a01      	ldr	r2, [sp, #4]
   33ee6:	3301      	adds	r3, #1
   33ee8:	800b      	strh	r3, [r1, #0]
   33eea:	b002      	add	sp, #8
   33eec:	bcf0      	pop	{r4, r5, r6, r7}
   33eee:	4770      	bx	lr
   33ef0:	4281      	cmp	r1, r0
   33ef2:	d9d0      	bls.n	33e96 <rpc_transport_ipc_send+0x5e>
   33ef4:	e7b4      	b.n	33e60 <rpc_transport_ipc_send+0x28>
   33ef6:	f24c 0007 	movw	r0, #49159	; 0xc007
   33efa:	b002      	add	sp, #8
   33efc:	bcf0      	pop	{r4, r5, r6, r7}
   33efe:	4770      	bx	lr
   33f00:	f24c 000e 	movw	r0, #49166	; 0xc00e
   33f04:	4770      	bx	lr
   33f06:	f24c 000f 	movw	r0, #49167	; 0xc00f
   33f0a:	b002      	add	sp, #8
   33f0c:	bcf0      	pop	{r4, r5, r6, r7}
   33f0e:	4770      	bx	lr
   33f10:	20025798 	.word	0x20025798
   33f14:	20025790 	.word	0x20025790
   33f18:	20025794 	.word	0x20025794
   33f1c:	2002578c 	.word	0x2002578c
   33f20:	2002d6b4 	.word	0x2002d6b4
   33f24:	200257bc 	.word	0x200257bc
   33f28:	4002a00c 	.word	0x4002a00c
   33f2c:	200257b4 	.word	0x200257b4
   33f30:	4002a004 	.word	0x4002a004
   33f34:	2002a5ea 	.word	0x2002a5ea
   33f38:	4002a000 	.word	0x4002a000

00033f3c <rpc_transport_ipc_tx_rpc_data_alloc>:
   33f3c:	4b18      	ldr	r3, [pc, #96]	; (33fa0 <_flash_used+0x14>)
   33f3e:	781b      	ldrb	r3, [r3, #0]
   33f40:	bb63      	cbnz	r3, 33f9c <_flash_used+0x10>
   33f42:	b4f0      	push	{r4, r5, r6, r7}
   33f44:	4a17      	ldr	r2, [pc, #92]	; (33fa4 <_flash_used+0x18>)
   33f46:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   33f4a:	6814      	ldr	r4, [r2, #0]
   33f4c:	4b16      	ldr	r3, [pc, #88]	; (33fa8 <_flash_used+0x1c>)
   33f4e:	6825      	ldr	r5, [r4, #0]
   33f50:	681e      	ldr	r6, [r3, #0]
   33f52:	b1a5      	cbz	r5, 33f7e <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   33f54:	4607      	mov	r7, r0
   33f56:	00c1      	lsls	r1, r0, #3
   33f58:	1863      	adds	r3, r4, r1
   33f5a:	685a      	ldr	r2, [r3, #4]
   33f5c:	b2d2      	uxtb	r2, r2
   33f5e:	2a03      	cmp	r2, #3
   33f60:	d104      	bne.n	33f6c <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   33f62:	609f      	str	r7, [r3, #8]
   33f64:	685a      	ldr	r2, [r3, #4]
   33f66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   33f6a:	605a      	str	r2, [r3, #4]
   33f6c:	685a      	ldr	r2, [r3, #4]
   33f6e:	f012 0fff 	tst.w	r2, #255	; 0xff
   33f72:	d101      	bne.n	33f78 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   33f74:	689b      	ldr	r3, [r3, #8]
   33f76:	b12b      	cbz	r3, 33f84 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   33f78:	3001      	adds	r0, #1
   33f7a:	42a8      	cmp	r0, r5
   33f7c:	d1eb      	bne.n	33f56 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   33f7e:	2000      	movs	r0, #0
   33f80:	bcf0      	pop	{r4, r5, r6, r7}
   33f82:	4770      	bx	lr
   33f84:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   33f88:	4421      	add	r1, r4
   33f8a:	6088      	str	r0, [r1, #8]
   33f8c:	6843      	ldr	r3, [r0, #4]
   33f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33f92:	f043 0302 	orr.w	r3, r3, #2
   33f96:	6043      	str	r3, [r0, #4]
   33f98:	bcf0      	pop	{r4, r5, r6, r7}
   33f9a:	4770      	bx	lr
   33f9c:	2000      	movs	r0, #0
   33f9e:	4770      	bx	lr
   33fa0:	2002d6b4 	.word	0x2002d6b4
   33fa4:	200257bc 	.word	0x200257bc
   33fa8:	200257b8 	.word	0x200257b8

00033fac <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   33fac:	b4f0      	push	{r4, r5, r6, r7}
   33fae:	4a15      	ldr	r2, [pc, #84]	; (34004 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   33fb0:	4b15      	ldr	r3, [pc, #84]	; (34008 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   33fb2:	6814      	ldr	r4, [r2, #0]
   33fb4:	681e      	ldr	r6, [r3, #0]
   33fb6:	6825      	ldr	r5, [r4, #0]
   33fb8:	b1ad      	cbz	r5, 33fe6 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   33fba:	2000      	movs	r0, #0
   33fbc:	4607      	mov	r7, r0
   33fbe:	00c1      	lsls	r1, r0, #3
   33fc0:	1863      	adds	r3, r4, r1
   33fc2:	685a      	ldr	r2, [r3, #4]
   33fc4:	b2d2      	uxtb	r2, r2
   33fc6:	2a03      	cmp	r2, #3
   33fc8:	d104      	bne.n	33fd4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   33fca:	609f      	str	r7, [r3, #8]
   33fcc:	685a      	ldr	r2, [r3, #4]
   33fce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   33fd2:	605a      	str	r2, [r3, #4]
   33fd4:	685a      	ldr	r2, [r3, #4]
   33fd6:	f012 0fff 	tst.w	r2, #255	; 0xff
   33fda:	d101      	bne.n	33fe0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   33fdc:	689b      	ldr	r3, [r3, #8]
   33fde:	b12b      	cbz	r3, 33fec <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   33fe0:	3001      	adds	r0, #1
   33fe2:	4285      	cmp	r5, r0
   33fe4:	d1eb      	bne.n	33fbe <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   33fe6:	2000      	movs	r0, #0
   33fe8:	bcf0      	pop	{r4, r5, r6, r7}
   33fea:	4770      	bx	lr
   33fec:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   33ff0:	4421      	add	r1, r4
   33ff2:	6088      	str	r0, [r1, #8]
   33ff4:	6843      	ldr	r3, [r0, #4]
   33ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33ffa:	f043 0301 	orr.w	r3, r3, #1
   33ffe:	6043      	str	r3, [r0, #4]
   34000:	bcf0      	pop	{r4, r5, r6, r7}
   34002:	4770      	bx	lr
   34004:	200257b4 	.word	0x200257b4
   34008:	200257b0 	.word	0x200257b0

0003400c <rpc_transport_ipc_tx_data_alloc>:
   3400c:	4b03      	ldr	r3, [pc, #12]	; (3401c <rpc_transport_ipc_tx_data_alloc+0x10>)
   3400e:	781b      	ldrb	r3, [r3, #0]
   34010:	b90b      	cbnz	r3, 34016 <rpc_transport_ipc_tx_data_alloc+0xa>
   34012:	f006 bbed 	b.w	3a7f0 <nrf_shared_malloc>
   34016:	2000      	movs	r0, #0
   34018:	4770      	bx	lr
   3401a:	bf00      	nop
   3401c:	2002d6b4 	.word	0x2002d6b4

00034020 <rpc_transport_ipc_tx_suspend>:
   34020:	2201      	movs	r2, #1
   34022:	4b01      	ldr	r3, [pc, #4]	; (34028 <rpc_transport_ipc_tx_suspend+0x8>)
   34024:	701a      	strb	r2, [r3, #0]
   34026:	4770      	bx	lr
   34028:	2002d6b4 	.word	0x2002d6b4

0003402c <rpc_transport_ipc_request_shutdown>:
   3402c:	b4f0      	push	{r4, r5, r6, r7}
   3402e:	4a16      	ldr	r2, [pc, #88]	; (34088 <rpc_transport_ipc_request_shutdown+0x5c>)
   34030:	4b16      	ldr	r3, [pc, #88]	; (3408c <rpc_transport_ipc_request_shutdown+0x60>)
   34032:	6814      	ldr	r4, [r2, #0]
   34034:	681e      	ldr	r6, [r3, #0]
   34036:	6825      	ldr	r5, [r4, #0]
   34038:	b1ad      	cbz	r5, 34066 <rpc_transport_ipc_request_shutdown+0x3a>
   3403a:	2200      	movs	r2, #0
   3403c:	4617      	mov	r7, r2
   3403e:	00d0      	lsls	r0, r2, #3
   34040:	1823      	adds	r3, r4, r0
   34042:	6859      	ldr	r1, [r3, #4]
   34044:	b2c9      	uxtb	r1, r1
   34046:	2903      	cmp	r1, #3
   34048:	d104      	bne.n	34054 <rpc_transport_ipc_request_shutdown+0x28>
   3404a:	609f      	str	r7, [r3, #8]
   3404c:	6859      	ldr	r1, [r3, #4]
   3404e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   34052:	6059      	str	r1, [r3, #4]
   34054:	6859      	ldr	r1, [r3, #4]
   34056:	f011 0fff 	tst.w	r1, #255	; 0xff
   3405a:	d101      	bne.n	34060 <rpc_transport_ipc_request_shutdown+0x34>
   3405c:	689b      	ldr	r3, [r3, #8]
   3405e:	b123      	cbz	r3, 3406a <rpc_transport_ipc_request_shutdown+0x3e>
   34060:	3201      	adds	r2, #1
   34062:	42aa      	cmp	r2, r5
   34064:	d1eb      	bne.n	3403e <rpc_transport_ipc_request_shutdown+0x12>
   34066:	bcf0      	pop	{r4, r5, r6, r7}
   34068:	4770      	bx	lr
   3406a:	0192      	lsls	r2, r2, #6
   3406c:	4404      	add	r4, r0
   3406e:	18b0      	adds	r0, r6, r2
   34070:	60a0      	str	r0, [r4, #8]
   34072:	6843      	ldr	r3, [r0, #4]
   34074:	4906      	ldr	r1, [pc, #24]	; (34090 <rpc_transport_ipc_request_shutdown+0x64>)
   34076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3407a:	f043 0301 	orr.w	r3, r3, #1
   3407e:	6043      	str	r3, [r0, #4]
   34080:	50b1      	str	r1, [r6, r2]
   34082:	bcf0      	pop	{r4, r5, r6, r7}
   34084:	f7ff bed8 	b.w	33e38 <rpc_transport_ipc_send>
   34088:	200257b4 	.word	0x200257b4
   3408c:	200257b0 	.word	0x200257b0
   34090:	00030001 	.word	0x00030001

00034094 <secure_client_socket>:
   34094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34098:	f04f 3cff 	mov.w	ip, #4294967295
   3409c:	460c      	mov	r4, r1
   3409e:	680b      	ldr	r3, [r1, #0]
   340a0:	4f45      	ldr	r7, [pc, #276]	; (341b8 <secure_client_socket+0x124>)
   340a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   340a6:	600b      	str	r3, [r1, #0]
   340a8:	680b      	ldr	r3, [r1, #0]
   340aa:	00c6      	lsls	r6, r0, #3
   340ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   340b0:	600b      	str	r3, [r1, #0]
   340b2:	eb07 0a06 	add.w	sl, r7, r6
   340b6:	b084      	sub	sp, #16
   340b8:	f8da 3004 	ldr.w	r3, [sl, #4]
   340bc:	6989      	ldr	r1, [r1, #24]
   340be:	f247 0281 	movw	r2, #28801	; 0x7081
   340c2:	4605      	mov	r5, r0
   340c4:	f8d4 8000 	ldr.w	r8, [r4]
   340c8:	e9cd cc02 	strd	ip, ip, [sp, #8]
   340cc:	f000 fd82 	bl	34bd4 <ip_interface_request_create>
   340d0:	2800      	cmp	r0, #0
   340d2:	d06c      	beq.n	341ae <secure_client_socket+0x11a>
   340d4:	f8da 2004 	ldr.w	r2, [sl, #4]
   340d8:	4681      	mov	r9, r0
   340da:	2a00      	cmp	r2, #0
   340dc:	d15c      	bne.n	34198 <secure_client_socket+0x104>
   340de:	4b37      	ldr	r3, [pc, #220]	; (341bc <secure_client_socket+0x128>)
   340e0:	1971      	adds	r1, r6, r5
   340e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   340e6:	2224      	movs	r2, #36	; 0x24
   340e8:	f109 0014 	add.w	r0, r9, #20
   340ec:	f010 fdfb 	bl	44ce6 <memcpy>
   340f0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   340f4:	4649      	mov	r1, r9
   340f6:	3324      	adds	r3, #36	; 0x24
   340f8:	f8c9 3008 	str.w	r3, [r9, #8]
   340fc:	6822      	ldr	r2, [r4, #0]
   340fe:	4643      	mov	r3, r8
   34100:	0c12      	lsrs	r2, r2, #16
   34102:	0412      	lsls	r2, r2, #16
   34104:	f042 020a 	orr.w	r2, r2, #10
   34108:	6022      	str	r2, [r4, #0]
   3410a:	4620      	mov	r0, r4
   3410c:	f247 0281 	movw	r2, #28801	; 0x7081
   34110:	f000 fd80 	bl	34c14 <ip_interface_request_send>
   34114:	4603      	mov	r3, r0
   34116:	b968      	cbnz	r0, 34134 <secure_client_socket+0xa0>
   34118:	6823      	ldr	r3, [r4, #0]
   3411a:	00db      	lsls	r3, r3, #3
   3411c:	d40e      	bmi.n	3413c <secure_client_socket+0xa8>
   3411e:	ab03      	add	r3, sp, #12
   34120:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34124:	210b      	movs	r1, #11
   34126:	4628      	mov	r0, r5
   34128:	f000 fd88 	bl	34c3c <ip_interface_wait>
   3412c:	4603      	mov	r3, r0
   3412e:	b150      	cbz	r0, 34146 <secure_client_socket+0xb2>
   34130:	f8c4 8000 	str.w	r8, [r4]
   34134:	4618      	mov	r0, r3
   34136:	b004      	add	sp, #16
   34138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3413c:	2373      	movs	r3, #115	; 0x73
   3413e:	4618      	mov	r0, r3
   34140:	b004      	add	sp, #16
   34142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34146:	220c      	movs	r2, #12
   34148:	ab02      	add	r3, sp, #8
   3414a:	4611      	mov	r1, r2
   3414c:	4628      	mov	r0, r5
   3414e:	f000 fd75 	bl	34c3c <ip_interface_wait>
   34152:	4603      	mov	r3, r0
   34154:	bb30      	cbnz	r0, 341a4 <secure_client_socket+0x110>
   34156:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   3415a:	b138      	cbz	r0, 3416c <secure_client_socket+0xd8>
   3415c:	9301      	str	r3, [sp, #4]
   3415e:	f006 fa8b 	bl	3a678 <nrf_free>
   34162:	9b01      	ldr	r3, [sp, #4]
   34164:	443e      	add	r6, r7
   34166:	6073      	str	r3, [r6, #4]
   34168:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   3416c:	4618      	mov	r0, r3
   3416e:	6822      	ldr	r2, [r4, #0]
   34170:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   34174:	6022      	str	r2, [r4, #0]
   34176:	6822      	ldr	r2, [r4, #0]
   34178:	0c12      	lsrs	r2, r2, #16
   3417a:	0412      	lsls	r2, r2, #16
   3417c:	f042 020c 	orr.w	r2, r2, #12
   34180:	6022      	str	r2, [r4, #0]
   34182:	6822      	ldr	r2, [r4, #0]
   34184:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   34188:	6022      	str	r2, [r4, #0]
   3418a:	6822      	ldr	r2, [r4, #0]
   3418c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   34190:	6022      	str	r2, [r4, #0]
   34192:	b004      	add	sp, #16
   34194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34198:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   3419c:	6800      	ldr	r0, [r0, #0]
   3419e:	f010 fda2 	bl	44ce6 <memcpy>
   341a2:	e79c      	b.n	340de <secure_client_socket+0x4a>
   341a4:	2b73      	cmp	r3, #115	; 0x73
   341a6:	d0c5      	beq.n	34134 <secure_client_socket+0xa0>
   341a8:	f8c4 8000 	str.w	r8, [r4]
   341ac:	e7c2      	b.n	34134 <secure_client_socket+0xa0>
   341ae:	230c      	movs	r3, #12
   341b0:	4618      	mov	r0, r3
   341b2:	b004      	add	sp, #16
   341b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   341b8:	2002591c 	.word	0x2002591c
   341bc:	200257d8 	.word	0x200257d8

000341c0 <tls_interface_init>:
   341c0:	2201      	movs	r2, #1
   341c2:	4b02      	ldr	r3, [pc, #8]	; (341cc <tls_interface_init+0xc>)
   341c4:	2000      	movs	r0, #0
   341c6:	701a      	strb	r2, [r3, #0]
   341c8:	4770      	bx	lr
   341ca:	bf00      	nop
   341cc:	2002d6b5 	.word	0x2002d6b5

000341d0 <tls_interface_deinit>:
   341d0:	2300      	movs	r3, #0
   341d2:	4a02      	ldr	r2, [pc, #8]	; (341dc <tls_interface_deinit+0xc>)
   341d4:	4618      	mov	r0, r3
   341d6:	7013      	strb	r3, [r2, #0]
   341d8:	4770      	bx	lr
   341da:	bf00      	nop
   341dc:	2002d6b5 	.word	0x2002d6b5

000341e0 <tls_interface_open>:
   341e0:	b538      	push	{r3, r4, r5, lr}
   341e2:	4b23      	ldr	r3, [pc, #140]	; (34270 <tls_interface_open+0x90>)
   341e4:	781b      	ldrb	r3, [r3, #0]
   341e6:	2b00      	cmp	r3, #0
   341e8:	d03c      	beq.n	34264 <tls_interface_open+0x84>
   341ea:	1e4b      	subs	r3, r1, #1
   341ec:	2b01      	cmp	r3, #1
   341ee:	d808      	bhi.n	34202 <tls_interface_open+0x22>
   341f0:	4614      	mov	r4, r2
   341f2:	b162      	cbz	r2, 3420e <tls_interface_open+0x2e>
   341f4:	2901      	cmp	r1, #1
   341f6:	d02d      	beq.n	34254 <tls_interface_open+0x74>
   341f8:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   341fc:	bf08      	it	eq
   341fe:	2202      	moveq	r2, #2
   34200:	d00d      	beq.n	3421e <tls_interface_open+0x3e>
   34202:	2029      	movs	r0, #41	; 0x29
   34204:	f7f5 fa2a 	bl	2965c <bsd_os_errno_set>
   34208:	f04f 35ff 	mov.w	r5, #4294967295
   3420c:	e020      	b.n	34250 <tls_interface_open+0x70>
   3420e:	2901      	cmp	r1, #1
   34210:	bf0b      	itete	eq
   34212:	2201      	moveq	r2, #1
   34214:	2202      	movne	r2, #2
   34216:	f44f 7482 	moveq.w	r4, #260	; 0x104
   3421a:	f44f 7487 	movne.w	r4, #270	; 0x10e
   3421e:	f000 fd4d 	bl	34cbc <ip_interface_open>
   34222:	1e05      	subs	r5, r0, #0
   34224:	db1b      	blt.n	3425e <tls_interface_open+0x7e>
   34226:	4b13      	ldr	r3, [pc, #76]	; (34274 <tls_interface_open+0x94>)
   34228:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   3422c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   34230:	2224      	movs	r2, #36	; 0x24
   34232:	4911      	ldr	r1, [pc, #68]	; (34278 <tls_interface_open+0x98>)
   34234:	f010 fd57 	bl	44ce6 <memcpy>
   34238:	4628      	mov	r0, r5
   3423a:	f006 ff2b 	bl	3b094 <interface_socket_from_handle_get>
   3423e:	6803      	ldr	r3, [r0, #0]
   34240:	6144      	str	r4, [r0, #20]
   34242:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   34246:	6003      	str	r3, [r0, #0]
   34248:	6803      	ldr	r3, [r0, #0]
   3424a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3424e:	6003      	str	r3, [r0, #0]
   34250:	4628      	mov	r0, r5
   34252:	bd38      	pop	{r3, r4, r5, pc}
   34254:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   34258:	d1d3      	bne.n	34202 <tls_interface_open+0x22>
   3425a:	460a      	mov	r2, r1
   3425c:	e7df      	b.n	3421e <tls_interface_open+0x3e>
   3425e:	f04f 35ff 	mov.w	r5, #4294967295
   34262:	e7f5      	b.n	34250 <tls_interface_open+0x70>
   34264:	2070      	movs	r0, #112	; 0x70
   34266:	f7f5 f9f9 	bl	2965c <bsd_os_errno_set>
   3426a:	f04f 35ff 	mov.w	r5, #4294967295
   3426e:	e7ef      	b.n	34250 <tls_interface_open+0x70>
   34270:	2002d6b5 	.word	0x2002d6b5
   34274:	200257d8 	.word	0x200257d8
   34278:	00046f50 	.word	0x00046f50

0003427c <tls_interface_close>:
   3427c:	b538      	push	{r3, r4, r5, lr}
   3427e:	4604      	mov	r4, r0
   34280:	f006 ff08 	bl	3b094 <interface_socket_from_handle_get>
   34284:	b180      	cbz	r0, 342a8 <tls_interface_close+0x2c>
   34286:	4d0b      	ldr	r5, [pc, #44]	; (342b4 <tls_interface_close+0x38>)
   34288:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   3428c:	b138      	cbz	r0, 3429e <tls_interface_close+0x22>
   3428e:	f006 f9f3 	bl	3a678 <nrf_free>
   34292:	2300      	movs	r3, #0
   34294:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   34298:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   3429c:	6053      	str	r3, [r2, #4]
   3429e:	4620      	mov	r0, r4
   342a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   342a4:	f000 bdd0 	b.w	34e48 <ip_interface_close>
   342a8:	2009      	movs	r0, #9
   342aa:	f7f5 f9d7 	bl	2965c <bsd_os_errno_set>
   342ae:	f04f 30ff 	mov.w	r0, #4294967295
   342b2:	bd38      	pop	{r3, r4, r5, pc}
   342b4:	2002591c 	.word	0x2002591c

000342b8 <tls_interface_sendto>:
   342b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   342bc:	b087      	sub	sp, #28
   342be:	9103      	str	r1, [sp, #12]
   342c0:	4616      	mov	r6, r2
   342c2:	469b      	mov	fp, r3
   342c4:	4682      	mov	sl, r0
   342c6:	f006 fee5 	bl	3b094 <interface_socket_from_handle_get>
   342ca:	2800      	cmp	r0, #0
   342cc:	f000 8082 	beq.w	343d4 <tls_interface_sendto+0x11c>
   342d0:	2400      	movs	r4, #0
   342d2:	f01b 0f02 	tst.w	fp, #2
   342d6:	bf08      	it	eq
   342d8:	6807      	ldreq	r7, [r0, #0]
   342da:	4a40      	ldr	r2, [pc, #256]	; (343dc <tls_interface_sendto+0x124>)
   342dc:	bf08      	it	eq
   342de:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   342e2:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   342e6:	4605      	mov	r5, r0
   342e8:	bf0c      	ite	eq
   342ea:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   342ee:	2700      	movne	r7, #0
   342f0:	46a0      	mov	r8, r4
   342f2:	f04f 33ff 	mov.w	r3, #4294967295
   342f6:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   342fa:	e00f      	b.n	3431c <tls_interface_sendto+0x64>
   342fc:	f899 2000 	ldrb.w	r2, [r9]
   34300:	2a02      	cmp	r2, #2
   34302:	d061      	beq.n	343c8 <tls_interface_sendto+0x110>
   34304:	692a      	ldr	r2, [r5, #16]
   34306:	2a01      	cmp	r2, #1
   34308:	d061      	beq.n	343ce <tls_interface_sendto+0x116>
   3430a:	2b00      	cmp	r3, #0
   3430c:	db30      	blt.n	34370 <tls_interface_sendto+0xb8>
   3430e:	f1b8 0f00 	cmp.w	r8, #0
   34312:	dc18      	bgt.n	34346 <tls_interface_sendto+0x8e>
   34314:	441c      	add	r4, r3
   34316:	b1df      	cbz	r7, 34350 <tls_interface_sendto+0x98>
   34318:	42a6      	cmp	r6, r4
   3431a:	dd19      	ble.n	34350 <tls_interface_sendto+0x98>
   3431c:	6829      	ldr	r1, [r5, #0]
   3431e:	1b32      	subs	r2, r6, r4
   34320:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   34324:	b289      	uxth	r1, r1
   34326:	bfa8      	it	ge
   34328:	f44f 6200 	movge.w	r2, #2048	; 0x800
   3432c:	290c      	cmp	r1, #12
   3432e:	d013      	beq.n	34358 <tls_interface_sendto+0xa0>
   34330:	6829      	ldr	r1, [r5, #0]
   34332:	b289      	uxth	r1, r1
   34334:	290b      	cmp	r1, #11
   34336:	d0e1      	beq.n	342fc <tls_interface_sendto+0x44>
   34338:	6929      	ldr	r1, [r5, #16]
   3433a:	2901      	cmp	r1, #1
   3433c:	d024      	beq.n	34388 <tls_interface_sendto+0xd0>
   3433e:	2902      	cmp	r1, #2
   34340:	d01a      	beq.n	34378 <tls_interface_sendto+0xc0>
   34342:	f04f 0839 	mov.w	r8, #57	; 0x39
   34346:	4640      	mov	r0, r8
   34348:	f7f5 f988 	bl	2965c <bsd_os_errno_set>
   3434c:	f04f 34ff 	mov.w	r4, #4294967295
   34350:	4620      	mov	r0, r4
   34352:	b007      	add	sp, #28
   34354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34358:	9b11      	ldr	r3, [sp, #68]	; 0x44
   3435a:	9903      	ldr	r1, [sp, #12]
   3435c:	9301      	str	r3, [sp, #4]
   3435e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   34360:	4421      	add	r1, r4
   34362:	9300      	str	r3, [sp, #0]
   34364:	4650      	mov	r0, sl
   34366:	465b      	mov	r3, fp
   34368:	f000 fde0 	bl	34f2c <ip_interface_sendto>
   3436c:	1e03      	subs	r3, r0, #0
   3436e:	dad1      	bge.n	34314 <tls_interface_sendto+0x5c>
   34370:	f1b8 0f00 	cmp.w	r8, #0
   34374:	ddea      	ble.n	3434c <tls_interface_sendto+0x94>
   34376:	e7e6      	b.n	34346 <tls_interface_sendto+0x8e>
   34378:	6829      	ldr	r1, [r5, #0]
   3437a:	b289      	uxth	r1, r1
   3437c:	2902      	cmp	r1, #2
   3437e:	d007      	beq.n	34390 <tls_interface_sendto+0xd8>
   34380:	6829      	ldr	r1, [r5, #0]
   34382:	b289      	uxth	r1, r1
   34384:	2904      	cmp	r1, #4
   34386:	d003      	beq.n	34390 <tls_interface_sendto+0xd8>
   34388:	6829      	ldr	r1, [r5, #0]
   3438a:	b289      	uxth	r1, r1
   3438c:	2905      	cmp	r1, #5
   3438e:	d1d8      	bne.n	34342 <tls_interface_sendto+0x8a>
   34390:	f899 1000 	ldrb.w	r1, [r9]
   34394:	2902      	cmp	r1, #2
   34396:	d1b8      	bne.n	3430a <tls_interface_sendto+0x52>
   34398:	4629      	mov	r1, r5
   3439a:	4650      	mov	r0, sl
   3439c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   343a0:	f7ff fe78 	bl	34094 <secure_client_socket>
   343a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   343a8:	4680      	mov	r8, r0
   343aa:	2800      	cmp	r0, #0
   343ac:	d1ad      	bne.n	3430a <tls_interface_sendto+0x52>
   343ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
   343b0:	9903      	ldr	r1, [sp, #12]
   343b2:	9301      	str	r3, [sp, #4]
   343b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   343b6:	4421      	add	r1, r4
   343b8:	9300      	str	r3, [sp, #0]
   343ba:	4650      	mov	r0, sl
   343bc:	465b      	mov	r3, fp
   343be:	f000 fdb5 	bl	34f2c <ip_interface_sendto>
   343c2:	1e03      	subs	r3, r0, #0
   343c4:	daa6      	bge.n	34314 <tls_interface_sendto+0x5c>
   343c6:	e7c1      	b.n	3434c <tls_interface_sendto+0x94>
   343c8:	f04f 0823 	mov.w	r8, #35	; 0x23
   343cc:	e7bb      	b.n	34346 <tls_interface_sendto+0x8e>
   343ce:	f04f 082a 	mov.w	r8, #42	; 0x2a
   343d2:	e7b8      	b.n	34346 <tls_interface_sendto+0x8e>
   343d4:	f04f 0809 	mov.w	r8, #9
   343d8:	e7b5      	b.n	34346 <tls_interface_sendto+0x8e>
   343da:	bf00      	nop
   343dc:	200257d8 	.word	0x200257d8

000343e0 <tls_interface_recvfrom>:
   343e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   343e4:	460d      	mov	r5, r1
   343e6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   343ea:	4616      	mov	r6, r2
   343ec:	461f      	mov	r7, r3
   343ee:	4604      	mov	r4, r0
   343f0:	f006 fe50 	bl	3b094 <interface_socket_from_handle_get>
   343f4:	2800      	cmp	r0, #0
   343f6:	d038      	beq.n	3446a <tls_interface_recvfrom+0x8a>
   343f8:	6803      	ldr	r3, [r0, #0]
   343fa:	b29b      	uxth	r3, r3
   343fc:	2b0c      	cmp	r3, #12
   343fe:	d00f      	beq.n	34420 <tls_interface_recvfrom+0x40>
   34400:	6803      	ldr	r3, [r0, #0]
   34402:	b29b      	uxth	r3, r3
   34404:	2b0d      	cmp	r3, #13
   34406:	d00b      	beq.n	34420 <tls_interface_recvfrom+0x40>
   34408:	6903      	ldr	r3, [r0, #16]
   3440a:	2b01      	cmp	r3, #1
   3440c:	d01a      	beq.n	34444 <tls_interface_recvfrom+0x64>
   3440e:	2b02      	cmp	r3, #2
   34410:	d010      	beq.n	34434 <tls_interface_recvfrom+0x54>
   34412:	2023      	movs	r0, #35	; 0x23
   34414:	f7f5 f922 	bl	2965c <bsd_os_errno_set>
   34418:	f04f 30ff 	mov.w	r0, #4294967295
   3441c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34420:	e9cd 8908 	strd	r8, r9, [sp, #32]
   34424:	463b      	mov	r3, r7
   34426:	4632      	mov	r2, r6
   34428:	4629      	mov	r1, r5
   3442a:	4620      	mov	r0, r4
   3442c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34430:	f000 bef8 	b.w	35224 <ip_interface_recvfrom>
   34434:	6803      	ldr	r3, [r0, #0]
   34436:	b29b      	uxth	r3, r3
   34438:	2b02      	cmp	r3, #2
   3443a:	d007      	beq.n	3444c <tls_interface_recvfrom+0x6c>
   3443c:	6803      	ldr	r3, [r0, #0]
   3443e:	b29b      	uxth	r3, r3
   34440:	2b04      	cmp	r3, #4
   34442:	d003      	beq.n	3444c <tls_interface_recvfrom+0x6c>
   34444:	6803      	ldr	r3, [r0, #0]
   34446:	b29b      	uxth	r3, r3
   34448:	2b05      	cmp	r3, #5
   3444a:	d1e2      	bne.n	34412 <tls_interface_recvfrom+0x32>
   3444c:	4b08      	ldr	r3, [pc, #32]	; (34470 <tls_interface_recvfrom+0x90>)
   3444e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   34452:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   34456:	2b02      	cmp	r3, #2
   34458:	d1db      	bne.n	34412 <tls_interface_recvfrom+0x32>
   3445a:	4601      	mov	r1, r0
   3445c:	4620      	mov	r0, r4
   3445e:	f7ff fe19 	bl	34094 <secure_client_socket>
   34462:	2800      	cmp	r0, #0
   34464:	d0dc      	beq.n	34420 <tls_interface_recvfrom+0x40>
   34466:	dcd5      	bgt.n	34414 <tls_interface_recvfrom+0x34>
   34468:	e7d6      	b.n	34418 <tls_interface_recvfrom+0x38>
   3446a:	2009      	movs	r0, #9
   3446c:	e7d2      	b.n	34414 <tls_interface_recvfrom+0x34>
   3446e:	bf00      	nop
   34470:	200257d8 	.word	0x200257d8

00034474 <tls_interface_bind>:
   34474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34478:	b082      	sub	sp, #8
   3447a:	460e      	mov	r6, r1
   3447c:	4617      	mov	r7, r2
   3447e:	4605      	mov	r5, r0
   34480:	f006 fe08 	bl	3b094 <interface_socket_from_handle_get>
   34484:	2800      	cmp	r0, #0
   34486:	d069      	beq.n	3455c <tls_interface_bind+0xe8>
   34488:	6803      	ldr	r3, [r0, #0]
   3448a:	4604      	mov	r4, r0
   3448c:	b29b      	uxth	r3, r3
   3448e:	2b02      	cmp	r3, #2
   34490:	d158      	bne.n	34544 <tls_interface_bind+0xd0>
   34492:	463a      	mov	r2, r7
   34494:	4631      	mov	r1, r6
   34496:	4628      	mov	r0, r5
   34498:	f001 f9d4 	bl	35844 <ip_interface_bind>
   3449c:	2800      	cmp	r0, #0
   3449e:	d148      	bne.n	34532 <tls_interface_bind+0xbe>
   344a0:	00ee      	lsls	r6, r5, #3
   344a2:	4f2f      	ldr	r7, [pc, #188]	; (34560 <tls_interface_bind+0xec>)
   344a4:	1973      	adds	r3, r6, r5
   344a6:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   344aa:	2b01      	cmp	r3, #1
   344ac:	d002      	beq.n	344b4 <tls_interface_bind+0x40>
   344ae:	b002      	add	sp, #8
   344b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   344b4:	f04f 3cff 	mov.w	ip, #4294967295
   344b8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 34564 <tls_interface_bind+0xf0>
   344bc:	f247 0281 	movw	r2, #28801	; 0x7081
   344c0:	eb0a 0906 	add.w	r9, sl, r6
   344c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   344c8:	69a1      	ldr	r1, [r4, #24]
   344ca:	4628      	mov	r0, r5
   344cc:	f8cd c004 	str.w	ip, [sp, #4]
   344d0:	f000 fb80 	bl	34bd4 <ip_interface_request_create>
   344d4:	4680      	mov	r8, r0
   344d6:	2800      	cmp	r0, #0
   344d8:	d03e      	beq.n	34558 <tls_interface_bind+0xe4>
   344da:	f8d9 2004 	ldr.w	r2, [r9, #4]
   344de:	bbaa      	cbnz	r2, 3454c <tls_interface_bind+0xd8>
   344e0:	1971      	adds	r1, r6, r5
   344e2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   344e6:	2224      	movs	r2, #36	; 0x24
   344e8:	f108 0014 	add.w	r0, r8, #20
   344ec:	f010 fbfb 	bl	44ce6 <memcpy>
   344f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   344f4:	4641      	mov	r1, r8
   344f6:	3324      	adds	r3, #36	; 0x24
   344f8:	f8c8 3008 	str.w	r3, [r8, #8]
   344fc:	6822      	ldr	r2, [r4, #0]
   344fe:	2304      	movs	r3, #4
   34500:	0c12      	lsrs	r2, r2, #16
   34502:	0412      	lsls	r2, r2, #16
   34504:	f042 020a 	orr.w	r2, r2, #10
   34508:	6022      	str	r2, [r4, #0]
   3450a:	4620      	mov	r0, r4
   3450c:	f247 0281 	movw	r2, #28801	; 0x7081
   34510:	f000 fb80 	bl	34c14 <ip_interface_request_send>
   34514:	b968      	cbnz	r0, 34532 <tls_interface_bind+0xbe>
   34516:	6823      	ldr	r3, [r4, #0]
   34518:	00db      	lsls	r3, r3, #3
   3451a:	d415      	bmi.n	34548 <tls_interface_bind+0xd4>
   3451c:	4628      	mov	r0, r5
   3451e:	ab01      	add	r3, sp, #4
   34520:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34524:	210b      	movs	r1, #11
   34526:	f000 fb89 	bl	34c3c <ip_interface_wait>
   3452a:	2800      	cmp	r0, #0
   3452c:	d0bf      	beq.n	344ae <tls_interface_bind+0x3a>
   3452e:	2304      	movs	r3, #4
   34530:	6023      	str	r3, [r4, #0]
   34532:	2800      	cmp	r0, #0
   34534:	ddbb      	ble.n	344ae <tls_interface_bind+0x3a>
   34536:	f7f5 f891 	bl	2965c <bsd_os_errno_set>
   3453a:	f04f 30ff 	mov.w	r0, #4294967295
   3453e:	b002      	add	sp, #8
   34540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34544:	202d      	movs	r0, #45	; 0x2d
   34546:	e7f6      	b.n	34536 <tls_interface_bind+0xc2>
   34548:	2073      	movs	r0, #115	; 0x73
   3454a:	e7f4      	b.n	34536 <tls_interface_bind+0xc2>
   3454c:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   34550:	6800      	ldr	r0, [r0, #0]
   34552:	f010 fbc8 	bl	44ce6 <memcpy>
   34556:	e7c3      	b.n	344e0 <tls_interface_bind+0x6c>
   34558:	200c      	movs	r0, #12
   3455a:	e7ec      	b.n	34536 <tls_interface_bind+0xc2>
   3455c:	2009      	movs	r0, #9
   3455e:	e7ea      	b.n	34536 <tls_interface_bind+0xc2>
   34560:	200257d8 	.word	0x200257d8
   34564:	2002591c 	.word	0x2002591c

00034568 <tls_interface_connect>:
   34568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3456a:	460e      	mov	r6, r1
   3456c:	4617      	mov	r7, r2
   3456e:	4604      	mov	r4, r0
   34570:	f006 fd90 	bl	3b094 <interface_socket_from_handle_get>
   34574:	b1e8      	cbz	r0, 345b2 <tls_interface_connect+0x4a>
   34576:	4b13      	ldr	r3, [pc, #76]	; (345c4 <tls_interface_connect+0x5c>)
   34578:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   3457c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   34580:	2b02      	cmp	r3, #2
   34582:	d11c      	bne.n	345be <tls_interface_connect+0x56>
   34584:	6803      	ldr	r3, [r0, #0]
   34586:	4605      	mov	r5, r0
   34588:	b29b      	uxth	r3, r3
   3458a:	2b02      	cmp	r3, #2
   3458c:	d003      	beq.n	34596 <tls_interface_connect+0x2e>
   3458e:	6803      	ldr	r3, [r0, #0]
   34590:	b29b      	uxth	r3, r3
   34592:	2b04      	cmp	r3, #4
   34594:	d113      	bne.n	345be <tls_interface_connect+0x56>
   34596:	463a      	mov	r2, r7
   34598:	4631      	mov	r1, r6
   3459a:	4620      	mov	r0, r4
   3459c:	f000 ff6a 	bl	35474 <ip_interface_connect>
   345a0:	b110      	cbz	r0, 345a8 <tls_interface_connect+0x40>
   345a2:	2800      	cmp	r0, #0
   345a4:	dc06      	bgt.n	345b4 <tls_interface_connect+0x4c>
   345a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   345a8:	4629      	mov	r1, r5
   345aa:	4620      	mov	r0, r4
   345ac:	f7ff fd72 	bl	34094 <secure_client_socket>
   345b0:	e7f7      	b.n	345a2 <tls_interface_connect+0x3a>
   345b2:	2009      	movs	r0, #9
   345b4:	f7f5 f852 	bl	2965c <bsd_os_errno_set>
   345b8:	f04f 30ff 	mov.w	r0, #4294967295
   345bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   345be:	202d      	movs	r0, #45	; 0x2d
   345c0:	e7f8      	b.n	345b4 <tls_interface_connect+0x4c>
   345c2:	bf00      	nop
   345c4:	200257d8 	.word	0x200257d8

000345c8 <tls_interface_listen>:
   345c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   345cc:	b085      	sub	sp, #20
   345ce:	4689      	mov	r9, r1
   345d0:	4605      	mov	r5, r0
   345d2:	f006 fd5f 	bl	3b094 <interface_socket_from_handle_get>
   345d6:	2800      	cmp	r0, #0
   345d8:	f000 8084 	beq.w	346e4 <tls_interface_listen+0x11c>
   345dc:	6803      	ldr	r3, [r0, #0]
   345de:	4604      	mov	r4, r0
   345e0:	00da      	lsls	r2, r3, #3
   345e2:	d47d      	bmi.n	346e0 <tls_interface_listen+0x118>
   345e4:	6903      	ldr	r3, [r0, #16]
   345e6:	2b01      	cmp	r3, #1
   345e8:	d17a      	bne.n	346e0 <tls_interface_listen+0x118>
   345ea:	6803      	ldr	r3, [r0, #0]
   345ec:	b29b      	uxth	r3, r3
   345ee:	2b04      	cmp	r3, #4
   345f0:	d05d      	beq.n	346ae <tls_interface_listen+0xe6>
   345f2:	6823      	ldr	r3, [r4, #0]
   345f4:	b29b      	uxth	r3, r3
   345f6:	2b0b      	cmp	r3, #11
   345f8:	d172      	bne.n	346e0 <tls_interface_listen+0x118>
   345fa:	4a3b      	ldr	r2, [pc, #236]	; (346e8 <tls_interface_listen+0x120>)
   345fc:	00ee      	lsls	r6, r5, #3
   345fe:	1973      	adds	r3, r6, r5
   34600:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   34604:	9201      	str	r2, [sp, #4]
   34606:	2b01      	cmp	r3, #1
   34608:	d16a      	bne.n	346e0 <tls_interface_listen+0x118>
   3460a:	2201      	movs	r2, #1
   3460c:	9901      	ldr	r1, [sp, #4]
   3460e:	1973      	adds	r3, r6, r5
   34610:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   34614:	6823      	ldr	r3, [r4, #0]
   34616:	2b0b      	cmp	r3, #11
   34618:	d040      	beq.n	3469c <tls_interface_listen+0xd4>
   3461a:	f04f 3cff 	mov.w	ip, #4294967295
   3461e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 346ec <tls_interface_listen+0x124>
   34622:	f247 0281 	movw	r2, #28801	; 0x7081
   34626:	eb0a 0806 	add.w	r8, sl, r6
   3462a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3462e:	69a1      	ldr	r1, [r4, #24]
   34630:	4628      	mov	r0, r5
   34632:	6827      	ldr	r7, [r4, #0]
   34634:	f8cd c00c 	str.w	ip, [sp, #12]
   34638:	f000 facc 	bl	34bd4 <ip_interface_request_create>
   3463c:	4683      	mov	fp, r0
   3463e:	2800      	cmp	r0, #0
   34640:	d046      	beq.n	346d0 <tls_interface_listen+0x108>
   34642:	f8d8 2004 	ldr.w	r2, [r8, #4]
   34646:	2a00      	cmp	r2, #0
   34648:	d144      	bne.n	346d4 <tls_interface_listen+0x10c>
   3464a:	9b01      	ldr	r3, [sp, #4]
   3464c:	1971      	adds	r1, r6, r5
   3464e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   34652:	2224      	movs	r2, #36	; 0x24
   34654:	f10b 0014 	add.w	r0, fp, #20
   34658:	f010 fb45 	bl	44ce6 <memcpy>
   3465c:	f8db 2008 	ldr.w	r2, [fp, #8]
   34660:	4659      	mov	r1, fp
   34662:	3224      	adds	r2, #36	; 0x24
   34664:	f8cb 2008 	str.w	r2, [fp, #8]
   34668:	6822      	ldr	r2, [r4, #0]
   3466a:	463b      	mov	r3, r7
   3466c:	0c12      	lsrs	r2, r2, #16
   3466e:	0412      	lsls	r2, r2, #16
   34670:	f042 020a 	orr.w	r2, r2, #10
   34674:	6022      	str	r2, [r4, #0]
   34676:	4620      	mov	r0, r4
   34678:	f247 0281 	movw	r2, #28801	; 0x7081
   3467c:	f000 faca 	bl	34c14 <ip_interface_request_send>
   34680:	b980      	cbnz	r0, 346a4 <tls_interface_listen+0xdc>
   34682:	6823      	ldr	r3, [r4, #0]
   34684:	00db      	lsls	r3, r3, #3
   34686:	d41b      	bmi.n	346c0 <tls_interface_listen+0xf8>
   34688:	ab03      	add	r3, sp, #12
   3468a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3468e:	210b      	movs	r1, #11
   34690:	4628      	mov	r0, r5
   34692:	f000 fad3 	bl	34c3c <ip_interface_wait>
   34696:	b108      	cbz	r0, 3469c <tls_interface_listen+0xd4>
   34698:	6027      	str	r7, [r4, #0]
   3469a:	e003      	b.n	346a4 <tls_interface_listen+0xdc>
   3469c:	4649      	mov	r1, r9
   3469e:	4628      	mov	r0, r5
   346a0:	f001 f972 	bl	35988 <ip_interface_listen>
   346a4:	2800      	cmp	r0, #0
   346a6:	dc0c      	bgt.n	346c2 <tls_interface_listen+0xfa>
   346a8:	b005      	add	sp, #20
   346aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   346ae:	4a0e      	ldr	r2, [pc, #56]	; (346e8 <tls_interface_listen+0x120>)
   346b0:	00ee      	lsls	r6, r5, #3
   346b2:	1973      	adds	r3, r6, r5
   346b4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   346b8:	9201      	str	r2, [sp, #4]
   346ba:	2b02      	cmp	r3, #2
   346bc:	d199      	bne.n	345f2 <tls_interface_listen+0x2a>
   346be:	e7a4      	b.n	3460a <tls_interface_listen+0x42>
   346c0:	2073      	movs	r0, #115	; 0x73
   346c2:	f7f4 ffcb 	bl	2965c <bsd_os_errno_set>
   346c6:	f04f 30ff 	mov.w	r0, #4294967295
   346ca:	b005      	add	sp, #20
   346cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   346d0:	200c      	movs	r0, #12
   346d2:	e7f6      	b.n	346c2 <tls_interface_listen+0xfa>
   346d4:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   346d8:	6800      	ldr	r0, [r0, #0]
   346da:	f010 fb04 	bl	44ce6 <memcpy>
   346de:	e7b4      	b.n	3464a <tls_interface_listen+0x82>
   346e0:	202d      	movs	r0, #45	; 0x2d
   346e2:	e7ee      	b.n	346c2 <tls_interface_listen+0xfa>
   346e4:	2009      	movs	r0, #9
   346e6:	e7ec      	b.n	346c2 <tls_interface_listen+0xfa>
   346e8:	200257d8 	.word	0x200257d8
   346ec:	2002591c 	.word	0x2002591c

000346f0 <tls_interface_accept>:
   346f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   346f4:	b083      	sub	sp, #12
   346f6:	460f      	mov	r7, r1
   346f8:	4690      	mov	r8, r2
   346fa:	4699      	mov	r9, r3
   346fc:	4606      	mov	r6, r0
   346fe:	f04f 34ff 	mov.w	r4, #4294967295
   34702:	f006 fcc7 	bl	3b094 <interface_socket_from_handle_get>
   34706:	9401      	str	r4, [sp, #4]
   34708:	2800      	cmp	r0, #0
   3470a:	d048      	beq.n	3479e <tls_interface_accept+0xae>
   3470c:	6805      	ldr	r5, [r0, #0]
   3470e:	b2ad      	uxth	r5, r5
   34710:	2d07      	cmp	r5, #7
   34712:	d144      	bne.n	3479e <tls_interface_accept+0xae>
   34714:	6803      	ldr	r3, [r0, #0]
   34716:	00db      	lsls	r3, r3, #3
   34718:	d443      	bmi.n	347a2 <tls_interface_accept+0xb2>
   3471a:	464b      	mov	r3, r9
   3471c:	4642      	mov	r2, r8
   3471e:	4639      	mov	r1, r7
   34720:	4630      	mov	r0, r6
   34722:	f001 f9ad 	bl	35a80 <ip_interface_accept>
   34726:	1e04      	subs	r4, r0, #0
   34728:	da08      	bge.n	3473c <tls_interface_accept+0x4c>
   3472a:	4620      	mov	r0, r4
   3472c:	f7f4 ff96 	bl	2965c <bsd_os_errno_set>
   34730:	f04f 34ff 	mov.w	r4, #4294967295
   34734:	4620      	mov	r0, r4
   34736:	b003      	add	sp, #12
   34738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3473c:	f006 fcaa 	bl	3b094 <interface_socket_from_handle_get>
   34740:	6803      	ldr	r3, [r0, #0]
   34742:	f8df 8068 	ldr.w	r8, [pc, #104]	; 347ac <tls_interface_accept+0xbc>
   34746:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3474a:	6003      	str	r3, [r0, #0]
   3474c:	6803      	ldr	r3, [r0, #0]
   3474e:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   34752:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   34756:	00bf      	lsls	r7, r7, #2
   34758:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   3475c:	4605      	mov	r5, r0
   3475e:	6003      	str	r3, [r0, #0]
   34760:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   34764:	2224      	movs	r2, #36	; 0x24
   34766:	eb08 0007 	add.w	r0, r8, r7
   3476a:	f010 fabc 	bl	44ce6 <memcpy>
   3476e:	2302      	movs	r3, #2
   34770:	f808 3007 	strb.w	r3, [r8, r7]
   34774:	682a      	ldr	r2, [r5, #0]
   34776:	ab01      	add	r3, sp, #4
   34778:	0c12      	lsrs	r2, r2, #16
   3477a:	0412      	lsls	r2, r2, #16
   3477c:	f042 020b 	orr.w	r2, r2, #11
   34780:	602a      	str	r2, [r5, #0]
   34782:	210c      	movs	r1, #12
   34784:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34788:	4620      	mov	r0, r4
   3478a:	f000 fa57 	bl	34c3c <ip_interface_wait>
   3478e:	4605      	mov	r5, r0
   34790:	2800      	cmp	r0, #0
   34792:	d0cf      	beq.n	34734 <tls_interface_accept+0x44>
   34794:	4620      	mov	r0, r4
   34796:	f000 fb57 	bl	34e48 <ip_interface_close>
   3479a:	462c      	mov	r4, r5
   3479c:	e7c5      	b.n	3472a <tls_interface_accept+0x3a>
   3479e:	2409      	movs	r4, #9
   347a0:	e7c3      	b.n	3472a <tls_interface_accept+0x3a>
   347a2:	202d      	movs	r0, #45	; 0x2d
   347a4:	f7f4 ff5a 	bl	2965c <bsd_os_errno_set>
   347a8:	e7c4      	b.n	34734 <tls_interface_accept+0x44>
   347aa:	bf00      	nop
   347ac:	200257d8 	.word	0x200257d8

000347b0 <tls_interface_setopt>:
   347b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   347b4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   347b8:	b082      	sub	sp, #8
   347ba:	9e08      	ldr	r6, [sp, #32]
   347bc:	d120      	bne.n	34800 <tls_interface_setopt+0x50>
   347be:	4698      	mov	r8, r3
   347c0:	4617      	mov	r7, r2
   347c2:	4605      	mov	r5, r0
   347c4:	2b00      	cmp	r3, #0
   347c6:	f000 80a0 	beq.w	3490a <tls_interface_setopt+0x15a>
   347ca:	f006 fc63 	bl	3b094 <interface_socket_from_handle_get>
   347ce:	2800      	cmp	r0, #0
   347d0:	f000 8097 	beq.w	34902 <tls_interface_setopt+0x152>
   347d4:	6804      	ldr	r4, [r0, #0]
   347d6:	b2a4      	uxth	r4, r4
   347d8:	2c02      	cmp	r4, #2
   347da:	d008      	beq.n	347ee <tls_interface_setopt+0x3e>
   347dc:	6803      	ldr	r3, [r0, #0]
   347de:	b29b      	uxth	r3, r3
   347e0:	2b04      	cmp	r3, #4
   347e2:	d004      	beq.n	347ee <tls_interface_setopt+0x3e>
   347e4:	6803      	ldr	r3, [r0, #0]
   347e6:	b29b      	uxth	r3, r3
   347e8:	2b05      	cmp	r3, #5
   347ea:	f040 808a 	bne.w	34902 <tls_interface_setopt+0x152>
   347ee:	1e7a      	subs	r2, r7, #1
   347f0:	2a05      	cmp	r2, #5
   347f2:	f200 8090 	bhi.w	34916 <tls_interface_setopt+0x166>
   347f6:	e8df f002 	tbb	[pc, r2]
   347fa:	2718      	.short	0x2718
   347fc:	08594b3c 	.word	0x08594b3c
   34800:	b002      	add	sp, #8
   34802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   34806:	f001 ba7d 	b.w	35d04 <ip_interface_setopt>
   3480a:	4601      	mov	r1, r0
   3480c:	e9cd 8600 	strd	r8, r6, [sp]
   34810:	4628      	mov	r0, r5
   34812:	f247 0301 	movw	r3, #28673	; 0x7001
   34816:	f44f 7280 	mov.w	r2, #256	; 0x100
   3481a:	f000 ff9d 	bl	35758 <ip_interface_socketoption_send>
   3481e:	2800      	cmp	r0, #0
   34820:	d161      	bne.n	348e6 <tls_interface_setopt+0x136>
   34822:	2000      	movs	r0, #0
   34824:	b002      	add	sp, #8
   34826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3482a:	2e04      	cmp	r6, #4
   3482c:	d15a      	bne.n	348e4 <tls_interface_setopt+0x134>
   3482e:	f8d8 0000 	ldr.w	r0, [r8]
   34832:	2800      	cmp	r0, #0
   34834:	d05e      	beq.n	348f4 <tls_interface_setopt+0x144>
   34836:	2801      	cmp	r0, #1
   34838:	d154      	bne.n	348e4 <tls_interface_setopt+0x134>
   3483a:	4b38      	ldr	r3, [pc, #224]	; (3491c <tls_interface_setopt+0x16c>)
   3483c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   34840:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   34844:	2000      	movs	r0, #0
   34846:	e7ed      	b.n	34824 <tls_interface_setopt+0x74>
   34848:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   3484c:	d04a      	beq.n	348e4 <tls_interface_setopt+0x134>
   3484e:	f016 0703 	ands.w	r7, r6, #3
   34852:	d147      	bne.n	348e4 <tls_interface_setopt+0x134>
   34854:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   34858:	00a4      	lsls	r4, r4, #2
   3485a:	4b30      	ldr	r3, [pc, #192]	; (3491c <tls_interface_setopt+0x16c>)
   3485c:	1d20      	adds	r0, r4, #4
   3485e:	4418      	add	r0, r3
   34860:	4423      	add	r3, r4
   34862:	4632      	mov	r2, r6
   34864:	4641      	mov	r1, r8
   34866:	f883 c003 	strb.w	ip, [r3, #3]
   3486a:	f010 fa3c 	bl	44ce6 <memcpy>
   3486e:	4638      	mov	r0, r7
   34870:	e7d8      	b.n	34824 <tls_interface_setopt+0x74>
   34872:	2e01      	cmp	r6, #1
   34874:	d136      	bne.n	348e4 <tls_interface_setopt+0x134>
   34876:	f898 2000 	ldrb.w	r2, [r8]
   3487a:	4b28      	ldr	r3, [pc, #160]	; (3491c <tls_interface_setopt+0x16c>)
   3487c:	3200      	adds	r2, #0
   3487e:	bf18      	it	ne
   34880:	2201      	movne	r2, #1
   34882:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   34886:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   3488a:	7062      	strb	r2, [r4, #1]
   3488c:	2000      	movs	r0, #0
   3488e:	e7c9      	b.n	34824 <tls_interface_setopt+0x74>
   34890:	2e04      	cmp	r6, #4
   34892:	d127      	bne.n	348e4 <tls_interface_setopt+0x134>
   34894:	f8d8 2000 	ldr.w	r2, [r8]
   34898:	2a02      	cmp	r2, #2
   3489a:	d823      	bhi.n	348e4 <tls_interface_setopt+0x134>
   3489c:	4b1f      	ldr	r3, [pc, #124]	; (3491c <tls_interface_setopt+0x16c>)
   3489e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   348a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   348a6:	70a2      	strb	r2, [r4, #2]
   348a8:	2000      	movs	r0, #0
   348aa:	e7bb      	b.n	34824 <tls_interface_setopt+0x74>
   348ac:	4c1c      	ldr	r4, [pc, #112]	; (34920 <tls_interface_setopt+0x170>)
   348ae:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   348b2:	b138      	cbz	r0, 348c4 <tls_interface_setopt+0x114>
   348b4:	f005 fee0 	bl	3a678 <nrf_free>
   348b8:	2200      	movs	r2, #0
   348ba:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   348be:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   348c2:	605a      	str	r2, [r3, #4]
   348c4:	2e00      	cmp	r6, #0
   348c6:	d0ac      	beq.n	34822 <tls_interface_setopt+0x72>
   348c8:	4630      	mov	r0, r6
   348ca:	f005 fecb 	bl	3a664 <nrf_malloc>
   348ce:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   348d2:	b1c0      	cbz	r0, 34906 <tls_interface_setopt+0x156>
   348d4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   348d8:	4632      	mov	r2, r6
   348da:	4641      	mov	r1, r8
   348dc:	6066      	str	r6, [r4, #4]
   348de:	f010 fa02 	bl	44ce6 <memcpy>
   348e2:	e79e      	b.n	34822 <tls_interface_setopt+0x72>
   348e4:	2016      	movs	r0, #22
   348e6:	f7f4 feb9 	bl	2965c <bsd_os_errno_set>
   348ea:	f04f 30ff 	mov.w	r0, #4294967295
   348ee:	b002      	add	sp, #8
   348f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   348f4:	2202      	movs	r2, #2
   348f6:	4b09      	ldr	r3, [pc, #36]	; (3491c <tls_interface_setopt+0x16c>)
   348f8:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   348fc:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   34900:	e790      	b.n	34824 <tls_interface_setopt+0x74>
   34902:	2009      	movs	r0, #9
   34904:	e7ef      	b.n	348e6 <tls_interface_setopt+0x136>
   34906:	200c      	movs	r0, #12
   34908:	e7ed      	b.n	348e6 <tls_interface_setopt+0x136>
   3490a:	200e      	movs	r0, #14
   3490c:	f7f4 fea6 	bl	2965c <bsd_os_errno_set>
   34910:	f04f 30ff 	mov.w	r0, #4294967295
   34914:	e786      	b.n	34824 <tls_interface_setopt+0x74>
   34916:	202a      	movs	r0, #42	; 0x2a
   34918:	e7e5      	b.n	348e6 <tls_interface_setopt+0x136>
   3491a:	bf00      	nop
   3491c:	200257d8 	.word	0x200257d8
   34920:	2002591c 	.word	0x2002591c

00034924 <tls_interface_getopt>:
   34924:	b5f0      	push	{r4, r5, r6, r7, lr}
   34926:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3492a:	b083      	sub	sp, #12
   3492c:	9f08      	ldr	r7, [sp, #32]
   3492e:	d112      	bne.n	34956 <tls_interface_getopt+0x32>
   34930:	461d      	mov	r5, r3
   34932:	b16b      	cbz	r3, 34950 <tls_interface_getopt+0x2c>
   34934:	b167      	cbz	r7, 34950 <tls_interface_getopt+0x2c>
   34936:	4606      	mov	r6, r0
   34938:	4614      	mov	r4, r2
   3493a:	f006 fbab 	bl	3b094 <interface_socket_from_handle_get>
   3493e:	b178      	cbz	r0, 34960 <tls_interface_getopt+0x3c>
   34940:	3c01      	subs	r4, #1
   34942:	2c05      	cmp	r4, #5
   34944:	d859      	bhi.n	349fa <tls_interface_getopt+0xd6>
   34946:	e8df f004 	tbb	[pc, r4]
   3494a:	2818      	.short	0x2818
   3494c:	0d584c40 	.word	0x0d584c40
   34950:	200e      	movs	r0, #14
   34952:	b003      	add	sp, #12
   34954:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34956:	b003      	add	sp, #12
   34958:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   3495c:	f001 ba74 	b.w	35e48 <ip_interface_getopt>
   34960:	2009      	movs	r0, #9
   34962:	e7f6      	b.n	34952 <tls_interface_getopt+0x2e>
   34964:	4601      	mov	r1, r0
   34966:	e9cd 5700 	strd	r5, r7, [sp]
   3496a:	4630      	mov	r0, r6
   3496c:	f247 0301 	movw	r3, #28673	; 0x7001
   34970:	f44f 7280 	mov.w	r2, #256	; 0x100
   34974:	f000 fe40 	bl	355f8 <ip_interface_socketoption_get>
   34978:	e7eb      	b.n	34952 <tls_interface_getopt+0x2e>
   3497a:	683b      	ldr	r3, [r7, #0]
   3497c:	2b04      	cmp	r3, #4
   3497e:	d13e      	bne.n	349fe <tls_interface_getopt+0xda>
   34980:	4b22      	ldr	r3, [pc, #136]	; (34a0c <tls_interface_getopt+0xe8>)
   34982:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   34986:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   3498a:	2000      	movs	r0, #0
   3498c:	f1a3 0301 	sub.w	r3, r3, #1
   34990:	fab3 f383 	clz	r3, r3
   34994:	095b      	lsrs	r3, r3, #5
   34996:	602b      	str	r3, [r5, #0]
   34998:	e7db      	b.n	34952 <tls_interface_getopt+0x2e>
   3499a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   3499e:	491b      	ldr	r1, [pc, #108]	; (34a0c <tls_interface_getopt+0xe8>)
   349a0:	683b      	ldr	r3, [r7, #0]
   349a2:	00b6      	lsls	r6, r6, #2
   349a4:	198a      	adds	r2, r1, r6
   349a6:	f013 0403 	ands.w	r4, r3, #3
   349aa:	78d0      	ldrb	r0, [r2, #3]
   349ac:	d129      	bne.n	34a02 <tls_interface_getopt+0xde>
   349ae:	089b      	lsrs	r3, r3, #2
   349b0:	4283      	cmp	r3, r0
   349b2:	bf28      	it	cs
   349b4:	4603      	movcs	r3, r0
   349b6:	009a      	lsls	r2, r3, #2
   349b8:	b31b      	cbz	r3, 34a02 <tls_interface_getopt+0xde>
   349ba:	3604      	adds	r6, #4
   349bc:	4431      	add	r1, r6
   349be:	603a      	str	r2, [r7, #0]
   349c0:	4628      	mov	r0, r5
   349c2:	f010 f990 	bl	44ce6 <memcpy>
   349c6:	4620      	mov	r0, r4
   349c8:	e7c3      	b.n	34952 <tls_interface_getopt+0x2e>
   349ca:	683b      	ldr	r3, [r7, #0]
   349cc:	2b01      	cmp	r3, #1
   349ce:	d116      	bne.n	349fe <tls_interface_getopt+0xda>
   349d0:	4b0e      	ldr	r3, [pc, #56]	; (34a0c <tls_interface_getopt+0xe8>)
   349d2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   349d6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   349da:	7873      	ldrb	r3, [r6, #1]
   349dc:	2000      	movs	r0, #0
   349de:	702b      	strb	r3, [r5, #0]
   349e0:	e7b7      	b.n	34952 <tls_interface_getopt+0x2e>
   349e2:	683b      	ldr	r3, [r7, #0]
   349e4:	2b04      	cmp	r3, #4
   349e6:	d10a      	bne.n	349fe <tls_interface_getopt+0xda>
   349e8:	4b08      	ldr	r3, [pc, #32]	; (34a0c <tls_interface_getopt+0xe8>)
   349ea:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   349ee:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   349f2:	78b3      	ldrb	r3, [r6, #2]
   349f4:	2000      	movs	r0, #0
   349f6:	602b      	str	r3, [r5, #0]
   349f8:	e7ab      	b.n	34952 <tls_interface_getopt+0x2e>
   349fa:	202a      	movs	r0, #42	; 0x2a
   349fc:	e7a9      	b.n	34952 <tls_interface_getopt+0x2e>
   349fe:	2016      	movs	r0, #22
   34a00:	e7a7      	b.n	34952 <tls_interface_getopt+0x2e>
   34a02:	2800      	cmp	r0, #0
   34a04:	d1fb      	bne.n	349fe <tls_interface_getopt+0xda>
   34a06:	6038      	str	r0, [r7, #0]
   34a08:	e7a3      	b.n	34952 <tls_interface_getopt+0x2e>
   34a0a:	bf00      	nop
   34a0c:	200257d8 	.word	0x200257d8

00034a10 <tls_rpc_ip_event_handler>:
   34a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34a12:	f248 0581 	movw	r5, #32897	; 0x8081
   34a16:	42ab      	cmp	r3, r5
   34a18:	460c      	mov	r4, r1
   34a1a:	d044      	beq.n	34aa6 <tls_rpc_ip_event_handler+0x96>
   34a1c:	f249 0182 	movw	r1, #36994	; 0x9082
   34a20:	428b      	cmp	r3, r1
   34a22:	4606      	mov	r6, r0
   34a24:	d02d      	beq.n	34a82 <tls_rpc_ip_event_handler+0x72>
   34a26:	f248 0102 	movw	r1, #32770	; 0x8002
   34a2a:	428b      	cmp	r3, r1
   34a2c:	d001      	beq.n	34a32 <tls_rpc_ip_event_handler+0x22>
   34a2e:	2001      	movs	r0, #1
   34a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34a32:	2c00      	cmp	r4, #0
   34a34:	d0fb      	beq.n	34a2e <tls_rpc_ip_event_handler+0x1e>
   34a36:	6963      	ldr	r3, [r4, #20]
   34a38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   34a3c:	d002      	beq.n	34a44 <tls_rpc_ip_event_handler+0x34>
   34a3e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   34a42:	d1f4      	bne.n	34a2e <tls_rpc_ip_event_handler+0x1e>
   34a44:	6823      	ldr	r3, [r4, #0]
   34a46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   34a4a:	6023      	str	r3, [r4, #0]
   34a4c:	6955      	ldr	r5, [r2, #20]
   34a4e:	bb05      	cbnz	r5, 34a92 <tls_rpc_ip_event_handler+0x82>
   34a50:	6823      	ldr	r3, [r4, #0]
   34a52:	0c1b      	lsrs	r3, r3, #16
   34a54:	041b      	lsls	r3, r3, #16
   34a56:	f043 0305 	orr.w	r3, r3, #5
   34a5a:	6023      	str	r3, [r4, #0]
   34a5c:	6823      	ldr	r3, [r4, #0]
   34a5e:	00db      	lsls	r3, r3, #3
   34a60:	d50d      	bpl.n	34a7e <tls_rpc_ip_event_handler+0x6e>
   34a62:	4b2a      	ldr	r3, [pc, #168]	; (34b0c <tls_rpc_ip_event_handler+0xfc>)
   34a64:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   34a68:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   34a6c:	2b02      	cmp	r3, #2
   34a6e:	d106      	bne.n	34a7e <tls_rpc_ip_event_handler+0x6e>
   34a70:	4630      	mov	r0, r6
   34a72:	4621      	mov	r1, r4
   34a74:	f7ff fb0e 	bl	34094 <secure_client_socket>
   34a78:	b108      	cbz	r0, 34a7e <tls_rpc_ip_event_handler+0x6e>
   34a7a:	2873      	cmp	r0, #115	; 0x73
   34a7c:	d10c      	bne.n	34a98 <tls_rpc_ip_event_handler+0x88>
   34a7e:	2000      	movs	r0, #0
   34a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34a82:	2c00      	cmp	r4, #0
   34a84:	d0fb      	beq.n	34a7e <tls_rpc_ip_event_handler+0x6e>
   34a86:	6823      	ldr	r3, [r4, #0]
   34a88:	b29b      	uxth	r3, r3
   34a8a:	2b0b      	cmp	r3, #11
   34a8c:	d1f7      	bne.n	34a7e <tls_rpc_ip_event_handler+0x6e>
   34a8e:	6915      	ldr	r5, [r2, #16]
   34a90:	b1cd      	cbz	r5, 34ac6 <tls_rpc_ip_event_handler+0xb6>
   34a92:	4628      	mov	r0, r5
   34a94:	f000 f894 	bl	34bc0 <rpc_error_to_nrf_bsd_error>
   34a98:	6060      	str	r0, [r4, #4]
   34a9a:	6823      	ldr	r3, [r4, #0]
   34a9c:	2000      	movs	r0, #0
   34a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   34aa2:	6023      	str	r3, [r4, #0]
   34aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34aa6:	2900      	cmp	r1, #0
   34aa8:	d0e9      	beq.n	34a7e <tls_rpc_ip_event_handler+0x6e>
   34aaa:	680b      	ldr	r3, [r1, #0]
   34aac:	b29b      	uxth	r3, r3
   34aae:	2b0a      	cmp	r3, #10
   34ab0:	d1e5      	bne.n	34a7e <tls_rpc_ip_event_handler+0x6e>
   34ab2:	6950      	ldr	r0, [r2, #20]
   34ab4:	2800      	cmp	r0, #0
   34ab6:	d1ed      	bne.n	34a94 <tls_rpc_ip_event_handler+0x84>
   34ab8:	680b      	ldr	r3, [r1, #0]
   34aba:	0c1b      	lsrs	r3, r3, #16
   34abc:	041b      	lsls	r3, r3, #16
   34abe:	f043 030b 	orr.w	r3, r3, #11
   34ac2:	600b      	str	r3, [r1, #0]
   34ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34ac6:	6823      	ldr	r3, [r4, #0]
   34ac8:	4f11      	ldr	r7, [pc, #68]	; (34b10 <tls_rpc_ip_event_handler+0x100>)
   34aca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   34ace:	6023      	str	r3, [r4, #0]
   34ad0:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   34ad4:	b130      	cbz	r0, 34ae4 <tls_rpc_ip_event_handler+0xd4>
   34ad6:	f005 fdcf 	bl	3a678 <nrf_free>
   34ada:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   34ade:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   34ae2:	605d      	str	r5, [r3, #4]
   34ae4:	6823      	ldr	r3, [r4, #0]
   34ae6:	2000      	movs	r0, #0
   34ae8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   34aec:	6023      	str	r3, [r4, #0]
   34aee:	6823      	ldr	r3, [r4, #0]
   34af0:	0c1b      	lsrs	r3, r3, #16
   34af2:	041b      	lsls	r3, r3, #16
   34af4:	f043 030c 	orr.w	r3, r3, #12
   34af8:	6023      	str	r3, [r4, #0]
   34afa:	6823      	ldr	r3, [r4, #0]
   34afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34b00:	6023      	str	r3, [r4, #0]
   34b02:	6823      	ldr	r3, [r4, #0]
   34b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   34b08:	6023      	str	r3, [r4, #0]
   34b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34b0c:	200257d8 	.word	0x200257d8
   34b10:	2002591c 	.word	0x2002591c

00034b14 <ip_client_event_handler>:
   34b14:	f850 1b08 	ldr.w	r1, [r0], #8
   34b18:	0c09      	lsrs	r1, r1, #16
   34b1a:	f001 bb35 	b.w	36188 <rpc_ip_event_handler>
   34b1e:	bf00      	nop

00034b20 <rpc_ip_client_init>:
   34b20:	4801      	ldr	r0, [pc, #4]	; (34b28 <rpc_ip_client_init+0x8>)
   34b22:	f001 be33 	b.w	3678c <rpc_client_register>
   34b26:	bf00      	nop
   34b28:	00046f74 	.word	0x00046f74

00034b2c <rpc_ip_client_deinit>:
   34b2c:	2004      	movs	r0, #4
   34b2e:	f001 be97 	b.w	36860 <rpc_client_unregister>
   34b32:	bf00      	nop

00034b34 <rpc_ip_client_request_alloc>:
   34b34:	2300      	movs	r3, #0
   34b36:	b510      	push	{r4, lr}
   34b38:	b082      	sub	sp, #8
   34b3a:	9301      	str	r3, [sp, #4]
   34b3c:	b158      	cbz	r0, 34b56 <rpc_ip_client_request_alloc+0x22>
   34b3e:	4604      	mov	r4, r0
   34b40:	aa01      	add	r2, sp, #4
   34b42:	2004      	movs	r0, #4
   34b44:	f001 fee2 	bl	3690c <rpc_message_alloc>
   34b48:	b918      	cbnz	r0, 34b52 <rpc_ip_client_request_alloc+0x1e>
   34b4a:	9b01      	ldr	r3, [sp, #4]
   34b4c:	b10b      	cbz	r3, 34b52 <rpc_ip_client_request_alloc+0x1e>
   34b4e:	3308      	adds	r3, #8
   34b50:	6023      	str	r3, [r4, #0]
   34b52:	b002      	add	sp, #8
   34b54:	bd10      	pop	{r4, pc}
   34b56:	2007      	movs	r0, #7
   34b58:	b002      	add	sp, #8
   34b5a:	bd10      	pop	{r4, pc}

00034b5c <rpc_ip_client_request_send>:
   34b5c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   34b60:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   34b64:	d10b      	bne.n	34b7e <rpc_ip_client_request_send+0x22>
   34b66:	b160      	cbz	r0, 34b82 <rpc_ip_client_request_send+0x26>
   34b68:	4603      	mov	r3, r0
   34b6a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   34b6e:	2004      	movs	r0, #4
   34b70:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   34b74:	f843 1d08 	str.w	r1, [r3, #-8]!
   34b78:	4619      	mov	r1, r3
   34b7a:	f001 beb7 	b.w	368ec <rpc_message_send>
   34b7e:	200f      	movs	r0, #15
   34b80:	4770      	bx	lr
   34b82:	2007      	movs	r0, #7
   34b84:	4770      	bx	lr
   34b86:	bf00      	nop

00034b88 <rpc_ip_client_message_free>:
   34b88:	b120      	cbz	r0, 34b94 <rpc_ip_client_message_free+0xc>
   34b8a:	f1a0 0108 	sub.w	r1, r0, #8
   34b8e:	2004      	movs	r0, #4
   34b90:	f001 bee8 	b.w	36964 <rpc_message_free>
   34b94:	2007      	movs	r0, #7
   34b96:	4770      	bx	lr

00034b98 <rpc_ip_client_data_free>:
   34b98:	b118      	cbz	r0, 34ba2 <rpc_ip_client_data_free+0xa>
   34b9a:	4601      	mov	r1, r0
   34b9c:	2004      	movs	r0, #4
   34b9e:	f001 beed 	b.w	3697c <rpc_message_data_free>
   34ba2:	2007      	movs	r0, #7
   34ba4:	4770      	bx	lr
   34ba6:	bf00      	nop

00034ba8 <ip_recvd_packet_free_cb>:
   34ba8:	b510      	push	{r4, lr}
   34baa:	4604      	mov	r4, r0
   34bac:	6800      	ldr	r0, [r0, #0]
   34bae:	f7ff fff3 	bl	34b98 <rpc_ip_client_data_free>
   34bb2:	68a0      	ldr	r0, [r4, #8]
   34bb4:	b118      	cbz	r0, 34bbe <ip_recvd_packet_free_cb+0x16>
   34bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34bba:	f005 bd5d 	b.w	3a678 <nrf_free>
   34bbe:	bd10      	pop	{r4, pc}

00034bc0 <rpc_error_to_nrf_bsd_error>:
   34bc0:	2810      	cmp	r0, #16
   34bc2:	bf9a      	itte	ls
   34bc4:	4b02      	ldrls	r3, [pc, #8]	; (34bd0 <rpc_error_to_nrf_bsd_error+0x10>)
   34bc6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   34bca:	202d      	movhi	r0, #45	; 0x2d
   34bcc:	4770      	bx	lr
   34bce:	bf00      	nop
   34bd0:	00046f84 	.word	0x00046f84

00034bd4 <ip_interface_request_create>:
   34bd4:	b570      	push	{r4, r5, r6, lr}
   34bd6:	2500      	movs	r5, #0
   34bd8:	b082      	sub	sp, #8
   34bda:	ac02      	add	r4, sp, #8
   34bdc:	f844 5d04 	str.w	r5, [r4, #-4]!
   34be0:	4606      	mov	r6, r0
   34be2:	460d      	mov	r5, r1
   34be4:	4620      	mov	r0, r4
   34be6:	4619      	mov	r1, r3
   34be8:	4614      	mov	r4, r2
   34bea:	f7ff ffa3 	bl	34b34 <rpc_ip_client_request_alloc>
   34bee:	b960      	cbnz	r0, 34c0a <ip_interface_request_create+0x36>
   34bf0:	9b01      	ldr	r3, [sp, #4]
   34bf2:	2208      	movs	r2, #8
   34bf4:	7258      	strb	r0, [r3, #9]
   34bf6:	7298      	strb	r0, [r3, #10]
   34bf8:	72d8      	strb	r0, [r3, #11]
   34bfa:	4618      	mov	r0, r3
   34bfc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   34c00:	60dc      	str	r4, [r3, #12]
   34c02:	611d      	str	r5, [r3, #16]
   34c04:	721a      	strb	r2, [r3, #8]
   34c06:	b002      	add	sp, #8
   34c08:	bd70      	pop	{r4, r5, r6, pc}
   34c0a:	9b01      	ldr	r3, [sp, #4]
   34c0c:	4618      	mov	r0, r3
   34c0e:	b002      	add	sp, #8
   34c10:	bd70      	pop	{r4, r5, r6, pc}
   34c12:	bf00      	nop

00034c14 <ip_interface_request_send>:
   34c14:	b570      	push	{r4, r5, r6, lr}
   34c16:	460c      	mov	r4, r1
   34c18:	4605      	mov	r5, r0
   34c1a:	4611      	mov	r1, r2
   34c1c:	4620      	mov	r0, r4
   34c1e:	461e      	mov	r6, r3
   34c20:	f7ff ff9c 	bl	34b5c <rpc_ip_client_request_send>
   34c24:	b900      	cbnz	r0, 34c28 <ip_interface_request_send+0x14>
   34c26:	bd70      	pop	{r4, r5, r6, pc}
   34c28:	6820      	ldr	r0, [r4, #0]
   34c2a:	b108      	cbz	r0, 34c30 <ip_interface_request_send+0x1c>
   34c2c:	f7ff ffb4 	bl	34b98 <rpc_ip_client_data_free>
   34c30:	4620      	mov	r0, r4
   34c32:	f7ff ffa9 	bl	34b88 <rpc_ip_client_message_free>
   34c36:	602e      	str	r6, [r5, #0]
   34c38:	2023      	movs	r0, #35	; 0x23
   34c3a:	bd70      	pop	{r4, r5, r6, pc}

00034c3c <ip_interface_wait>:
   34c3c:	b538      	push	{r3, r4, r5, lr}
   34c3e:	4605      	mov	r5, r0
   34c40:	f006 f9b4 	bl	3afac <interface_socket_wait>
   34c44:	4604      	mov	r4, r0
   34c46:	b108      	cbz	r0, 34c4c <ip_interface_wait+0x10>
   34c48:	4620      	mov	r0, r4
   34c4a:	bd38      	pop	{r3, r4, r5, pc}
   34c4c:	4628      	mov	r0, r5
   34c4e:	f006 fa21 	bl	3b094 <interface_socket_from_handle_get>
   34c52:	2800      	cmp	r0, #0
   34c54:	d0f8      	beq.n	34c48 <ip_interface_wait+0xc>
   34c56:	6844      	ldr	r4, [r0, #4]
   34c58:	2c00      	cmp	r4, #0
   34c5a:	d0f5      	beq.n	34c48 <ip_interface_wait+0xc>
   34c5c:	2300      	movs	r3, #0
   34c5e:	6043      	str	r3, [r0, #4]
   34c60:	4620      	mov	r0, r4
   34c62:	bd38      	pop	{r3, r4, r5, pc}

00034c64 <ip_interface_init>:
   34c64:	b538      	push	{r3, r4, r5, lr}
   34c66:	2300      	movs	r3, #0
   34c68:	4d09      	ldr	r5, [pc, #36]	; (34c90 <ip_interface_init+0x2c>)
   34c6a:	4c0a      	ldr	r4, [pc, #40]	; (34c94 <ip_interface_init+0x30>)
   34c6c:	4619      	mov	r1, r3
   34c6e:	2224      	movs	r2, #36	; 0x24
   34c70:	4809      	ldr	r0, [pc, #36]	; (34c98 <ip_interface_init+0x34>)
   34c72:	602b      	str	r3, [r5, #0]
   34c74:	6023      	str	r3, [r4, #0]
   34c76:	f010 f856 	bl	44d26 <memset>
   34c7a:	f7ff ff51 	bl	34b20 <rpc_ip_client_init>
   34c7e:	b918      	cbnz	r0, 34c88 <ip_interface_init+0x24>
   34c80:	2201      	movs	r2, #1
   34c82:	4b06      	ldr	r3, [pc, #24]	; (34c9c <ip_interface_init+0x38>)
   34c84:	701a      	strb	r2, [r3, #0]
   34c86:	bd38      	pop	{r3, r4, r5, pc}
   34c88:	f04f 30ff 	mov.w	r0, #4294967295
   34c8c:	bd38      	pop	{r3, r4, r5, pc}
   34c8e:	bf00      	nop
   34c90:	2002596c 	.word	0x2002596c
   34c94:	20025968 	.word	0x20025968
   34c98:	20025970 	.word	0x20025970
   34c9c:	2002d6b6 	.word	0x2002d6b6

00034ca0 <ip_interface_deinit>:
   34ca0:	b510      	push	{r4, lr}
   34ca2:	4c05      	ldr	r4, [pc, #20]	; (34cb8 <ip_interface_deinit+0x18>)
   34ca4:	7820      	ldrb	r0, [r4, #0]
   34ca6:	b900      	cbnz	r0, 34caa <ip_interface_deinit+0xa>
   34ca8:	bd10      	pop	{r4, pc}
   34caa:	f7ff ff3f 	bl	34b2c <rpc_ip_client_deinit>
   34cae:	b908      	cbnz	r0, 34cb4 <ip_interface_deinit+0x14>
   34cb0:	7020      	strb	r0, [r4, #0]
   34cb2:	bd10      	pop	{r4, pc}
   34cb4:	2003      	movs	r0, #3
   34cb6:	bd10      	pop	{r4, pc}
   34cb8:	2002d6b6 	.word	0x2002d6b6

00034cbc <ip_interface_open>:
   34cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34cc0:	2500      	movs	r5, #0
   34cc2:	f04f 37ff 	mov.w	r7, #4294967295
   34cc6:	4c5e      	ldr	r4, [pc, #376]	; (34e40 <ip_interface_open+0x184>)
   34cc8:	4606      	mov	r6, r0
   34cca:	7820      	ldrb	r0, [r4, #0]
   34ccc:	b084      	sub	sp, #16
   34cce:	e9cd 5701 	strd	r5, r7, [sp, #4]
   34cd2:	2800      	cmp	r0, #0
   34cd4:	f000 80b0 	beq.w	34e38 <ip_interface_open+0x17c>
   34cd8:	4690      	mov	r8, r2
   34cda:	f026 0208 	bic.w	r2, r6, #8
   34cde:	2a02      	cmp	r2, #2
   34ce0:	460c      	mov	r4, r1
   34ce2:	d002      	beq.n	34cea <ip_interface_open+0x2e>
   34ce4:	2e05      	cmp	r6, #5
   34ce6:	f040 808d 	bne.w	34e04 <ip_interface_open+0x148>
   34cea:	1e63      	subs	r3, r4, #1
   34cec:	2b02      	cmp	r3, #2
   34cee:	f200 809d 	bhi.w	34e2c <ip_interface_open+0x170>
   34cf2:	f1b8 0f00 	cmp.w	r8, #0
   34cf6:	d159      	bne.n	34dac <ip_interface_open+0xf0>
   34cf8:	2c01      	cmp	r4, #1
   34cfa:	d06f      	beq.n	34ddc <ip_interface_open+0x120>
   34cfc:	2c03      	cmp	r4, #3
   34cfe:	bf18      	it	ne
   34d00:	f04f 0802 	movne.w	r8, #2
   34d04:	4a4f      	ldr	r2, [pc, #316]	; (34e44 <ip_interface_open+0x188>)
   34d06:	4621      	mov	r1, r4
   34d08:	a801      	add	r0, sp, #4
   34d0a:	f006 f89d 	bl	3ae48 <interface_socket_allocate>
   34d0e:	9b01      	ldr	r3, [sp, #4]
   34d10:	4607      	mov	r7, r0
   34d12:	2b00      	cmp	r3, #0
   34d14:	d060      	beq.n	34dd8 <ip_interface_open+0x11c>
   34d16:	2100      	movs	r1, #0
   34d18:	a804      	add	r0, sp, #16
   34d1a:	f840 1d04 	str.w	r1, [r0, #-4]!
   34d1e:	e9c3 6403 	strd	r6, r4, [r3, #12]
   34d22:	f8c3 8014 	str.w	r8, [r3, #20]
   34d26:	f7ff ff05 	bl	34b34 <rpc_ip_client_request_alloc>
   34d2a:	2800      	cmp	r0, #0
   34d2c:	d151      	bne.n	34dd2 <ip_interface_open+0x116>
   34d2e:	f247 0201 	movw	r2, #28673	; 0x7001
   34d32:	f04f 33ff 	mov.w	r3, #4294967295
   34d36:	2108      	movs	r1, #8
   34d38:	9d03      	ldr	r5, [sp, #12]
   34d3a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   34d3e:	60ea      	str	r2, [r5, #12]
   34d40:	7268      	strb	r0, [r5, #9]
   34d42:	72a8      	strb	r0, [r5, #10]
   34d44:	72e8      	strb	r0, [r5, #11]
   34d46:	7229      	strb	r1, [r5, #8]
   34d48:	742b      	strb	r3, [r5, #16]
   34d4a:	746b      	strb	r3, [r5, #17]
   34d4c:	74ab      	strb	r3, [r5, #18]
   34d4e:	74eb      	strb	r3, [r5, #19]
   34d50:	68ab      	ldr	r3, [r5, #8]
   34d52:	2e05      	cmp	r6, #5
   34d54:	f103 030c 	add.w	r3, r3, #12
   34d58:	60ab      	str	r3, [r5, #8]
   34d5a:	d003      	beq.n	34d64 <ip_interface_open+0xa8>
   34d5c:	2e0a      	cmp	r6, #10
   34d5e:	bf14      	ite	ne
   34d60:	2601      	movne	r6, #1
   34d62:	2602      	moveq	r6, #2
   34d64:	616e      	str	r6, [r5, #20]
   34d66:	f8c5 801c 	str.w	r8, [r5, #28]
   34d6a:	61ac      	str	r4, [r5, #24]
   34d6c:	f247 0101 	movw	r1, #28673	; 0x7001
   34d70:	4628      	mov	r0, r5
   34d72:	f8dd 8004 	ldr.w	r8, [sp, #4]
   34d76:	f7ff fef1 	bl	34b5c <rpc_ip_client_request_send>
   34d7a:	4606      	mov	r6, r0
   34d7c:	b380      	cbz	r0, 34de0 <ip_interface_open+0x124>
   34d7e:	6828      	ldr	r0, [r5, #0]
   34d80:	b108      	cbz	r0, 34d86 <ip_interface_open+0xca>
   34d82:	f7ff ff09 	bl	34b98 <rpc_ip_client_data_free>
   34d86:	4628      	mov	r0, r5
   34d88:	f7ff fefe 	bl	34b88 <rpc_ip_client_message_free>
   34d8c:	2301      	movs	r3, #1
   34d8e:	2523      	movs	r5, #35	; 0x23
   34d90:	f8c8 3000 	str.w	r3, [r8]
   34d94:	4638      	mov	r0, r7
   34d96:	f006 f8bb 	bl	3af10 <interface_socket_free>
   34d9a:	4628      	mov	r0, r5
   34d9c:	f7f4 fc5e 	bl	2965c <bsd_os_errno_set>
   34da0:	f04f 37ff 	mov.w	r7, #4294967295
   34da4:	4638      	mov	r0, r7
   34da6:	b004      	add	sp, #16
   34da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34dac:	2c01      	cmp	r4, #1
   34dae:	d00a      	beq.n	34dc6 <ip_interface_open+0x10a>
   34db0:	2c02      	cmp	r4, #2
   34db2:	d10b      	bne.n	34dcc <ip_interface_open+0x110>
   34db4:	f1b8 0f02 	cmp.w	r8, #2
   34db8:	d0a4      	beq.n	34d04 <ip_interface_open+0x48>
   34dba:	2029      	movs	r0, #41	; 0x29
   34dbc:	f7f4 fc4e 	bl	2965c <bsd_os_errno_set>
   34dc0:	f04f 37ff 	mov.w	r7, #4294967295
   34dc4:	e7ee      	b.n	34da4 <ip_interface_open+0xe8>
   34dc6:	f1b8 0f01 	cmp.w	r8, #1
   34dca:	d1f6      	bne.n	34dba <ip_interface_open+0xfe>
   34dcc:	f04f 0802 	mov.w	r8, #2
   34dd0:	e798      	b.n	34d04 <ip_interface_open+0x48>
   34dd2:	9d03      	ldr	r5, [sp, #12]
   34dd4:	2d00      	cmp	r5, #0
   34dd6:	d1bb      	bne.n	34d50 <ip_interface_open+0x94>
   34dd8:	2569      	movs	r5, #105	; 0x69
   34dda:	e7db      	b.n	34d94 <ip_interface_open+0xd8>
   34ddc:	46a0      	mov	r8, r4
   34dde:	e791      	b.n	34d04 <ip_interface_open+0x48>
   34de0:	ab02      	add	r3, sp, #8
   34de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34de6:	2102      	movs	r1, #2
   34de8:	4638      	mov	r0, r7
   34dea:	f006 f8df 	bl	3afac <interface_socket_wait>
   34dee:	4605      	mov	r5, r0
   34df0:	2800      	cmp	r0, #0
   34df2:	d1cf      	bne.n	34d94 <ip_interface_open+0xd8>
   34df4:	4638      	mov	r0, r7
   34df6:	f006 f94d 	bl	3b094 <interface_socket_from_handle_get>
   34dfa:	b138      	cbz	r0, 34e0c <ip_interface_open+0x150>
   34dfc:	6845      	ldr	r5, [r0, #4]
   34dfe:	b12d      	cbz	r5, 34e0c <ip_interface_open+0x150>
   34e00:	6046      	str	r6, [r0, #4]
   34e02:	e7c7      	b.n	34d94 <ip_interface_open+0xd8>
   34e04:	202f      	movs	r0, #47	; 0x2f
   34e06:	f7f4 fc29 	bl	2965c <bsd_os_errno_set>
   34e0a:	e7cb      	b.n	34da4 <ip_interface_open+0xe8>
   34e0c:	3c02      	subs	r4, #2
   34e0e:	2c01      	cmp	r4, #1
   34e10:	d8c8      	bhi.n	34da4 <ip_interface_open+0xe8>
   34e12:	4638      	mov	r0, r7
   34e14:	9b01      	ldr	r3, [sp, #4]
   34e16:	681a      	ldr	r2, [r3, #0]
   34e18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   34e1c:	601a      	str	r2, [r3, #0]
   34e1e:	681a      	ldr	r2, [r3, #0]
   34e20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   34e24:	601a      	str	r2, [r3, #0]
   34e26:	b004      	add	sp, #16
   34e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34e2c:	2016      	movs	r0, #22
   34e2e:	f7f4 fc15 	bl	2965c <bsd_os_errno_set>
   34e32:	f04f 37ff 	mov.w	r7, #4294967295
   34e36:	e7b5      	b.n	34da4 <ip_interface_open+0xe8>
   34e38:	2070      	movs	r0, #112	; 0x70
   34e3a:	f7f4 fc0f 	bl	2965c <bsd_os_errno_set>
   34e3e:	e7b1      	b.n	34da4 <ip_interface_open+0xe8>
   34e40:	2002d6b6 	.word	0x2002d6b6
   34e44:	00034ba9 	.word	0x00034ba9

00034e48 <ip_interface_close>:
   34e48:	f04f 33ff 	mov.w	r3, #4294967295
   34e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34e50:	b082      	sub	sp, #8
   34e52:	4606      	mov	r6, r0
   34e54:	9300      	str	r3, [sp, #0]
   34e56:	f006 f91d 	bl	3b094 <interface_socket_from_handle_get>
   34e5a:	2800      	cmp	r0, #0
   34e5c:	d062      	beq.n	34f24 <ip_interface_close+0xdc>
   34e5e:	4604      	mov	r4, r0
   34e60:	2100      	movs	r1, #0
   34e62:	a802      	add	r0, sp, #8
   34e64:	6827      	ldr	r7, [r4, #0]
   34e66:	f840 1d04 	str.w	r1, [r0, #-4]!
   34e6a:	f8d4 8018 	ldr.w	r8, [r4, #24]
   34e6e:	f7ff fe61 	bl	34b34 <rpc_ip_client_request_alloc>
   34e72:	2800      	cmp	r0, #0
   34e74:	d139      	bne.n	34eea <ip_interface_close+0xa2>
   34e76:	f247 0309 	movw	r3, #28681	; 0x7009
   34e7a:	2208      	movs	r2, #8
   34e7c:	9d01      	ldr	r5, [sp, #4]
   34e7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   34e82:	60eb      	str	r3, [r5, #12]
   34e84:	f8c5 8010 	str.w	r8, [r5, #16]
   34e88:	7268      	strb	r0, [r5, #9]
   34e8a:	72a8      	strb	r0, [r5, #10]
   34e8c:	72e8      	strb	r0, [r5, #11]
   34e8e:	722a      	strb	r2, [r5, #8]
   34e90:	6823      	ldr	r3, [r4, #0]
   34e92:	f247 0109 	movw	r1, #28681	; 0x7009
   34e96:	0c1b      	lsrs	r3, r3, #16
   34e98:	041b      	lsls	r3, r3, #16
   34e9a:	f043 030d 	orr.w	r3, r3, #13
   34e9e:	6023      	str	r3, [r4, #0]
   34ea0:	6823      	ldr	r3, [r4, #0]
   34ea2:	4628      	mov	r0, r5
   34ea4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   34ea8:	6023      	str	r3, [r4, #0]
   34eaa:	6823      	ldr	r3, [r4, #0]
   34eac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   34eb0:	6023      	str	r3, [r4, #0]
   34eb2:	f7ff fe53 	bl	34b5c <rpc_ip_client_request_send>
   34eb6:	bb38      	cbnz	r0, 34f08 <ip_interface_close+0xc0>
   34eb8:	466b      	mov	r3, sp
   34eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34ebe:	210e      	movs	r1, #14
   34ec0:	4630      	mov	r0, r6
   34ec2:	f006 f873 	bl	3afac <interface_socket_wait>
   34ec6:	4604      	mov	r4, r0
   34ec8:	b1a0      	cbz	r0, 34ef4 <ip_interface_close+0xac>
   34eca:	4c17      	ldr	r4, [pc, #92]	; (34f28 <ip_interface_close+0xe0>)
   34ecc:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   34ed0:	b120      	cbz	r0, 34edc <ip_interface_close+0x94>
   34ed2:	f7ff fe59 	bl	34b88 <rpc_ip_client_message_free>
   34ed6:	2300      	movs	r3, #0
   34ed8:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   34edc:	4630      	mov	r0, r6
   34ede:	f006 f817 	bl	3af10 <interface_socket_free>
   34ee2:	2000      	movs	r0, #0
   34ee4:	b002      	add	sp, #8
   34ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34eea:	9d01      	ldr	r5, [sp, #4]
   34eec:	200c      	movs	r0, #12
   34eee:	2d00      	cmp	r5, #0
   34ef0:	d1ce      	bne.n	34e90 <ip_interface_close+0x48>
   34ef2:	e012      	b.n	34f1a <ip_interface_close+0xd2>
   34ef4:	4630      	mov	r0, r6
   34ef6:	f006 f8cd 	bl	3b094 <interface_socket_from_handle_get>
   34efa:	2800      	cmp	r0, #0
   34efc:	d0e5      	beq.n	34eca <ip_interface_close+0x82>
   34efe:	6843      	ldr	r3, [r0, #4]
   34f00:	2b00      	cmp	r3, #0
   34f02:	d0e2      	beq.n	34eca <ip_interface_close+0x82>
   34f04:	6044      	str	r4, [r0, #4]
   34f06:	e7e0      	b.n	34eca <ip_interface_close+0x82>
   34f08:	6828      	ldr	r0, [r5, #0]
   34f0a:	b108      	cbz	r0, 34f10 <ip_interface_close+0xc8>
   34f0c:	f7ff fe44 	bl	34b98 <rpc_ip_client_data_free>
   34f10:	4628      	mov	r0, r5
   34f12:	f7ff fe39 	bl	34b88 <rpc_ip_client_message_free>
   34f16:	2023      	movs	r0, #35	; 0x23
   34f18:	6027      	str	r7, [r4, #0]
   34f1a:	f7f4 fb9f 	bl	2965c <bsd_os_errno_set>
   34f1e:	f04f 30ff 	mov.w	r0, #4294967295
   34f22:	e7df      	b.n	34ee4 <ip_interface_close+0x9c>
   34f24:	2009      	movs	r0, #9
   34f26:	e7f8      	b.n	34f1a <ip_interface_close+0xd2>
   34f28:	20025970 	.word	0x20025970

00034f2c <ip_interface_sendto>:
   34f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34f30:	2400      	movs	r4, #0
   34f32:	b08b      	sub	sp, #44	; 0x2c
   34f34:	9102      	str	r1, [sp, #8]
   34f36:	4615      	mov	r5, r2
   34f38:	4699      	mov	r9, r3
   34f3a:	9407      	str	r4, [sp, #28]
   34f3c:	4607      	mov	r7, r0
   34f3e:	9e14      	ldr	r6, [sp, #80]	; 0x50
   34f40:	f006 f8a8 	bl	3b094 <interface_socket_from_handle_get>
   34f44:	2800      	cmp	r0, #0
   34f46:	f000 8163 	beq.w	35210 <ip_interface_sendto+0x2e4>
   34f4a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   34f4e:	f300 8150 	bgt.w	351f2 <ip_interface_sendto+0x2c6>
   34f52:	6903      	ldr	r3, [r0, #16]
   34f54:	4604      	mov	r4, r0
   34f56:	2b01      	cmp	r3, #1
   34f58:	f000 8109 	beq.w	3516e <ip_interface_sendto+0x242>
   34f5c:	6822      	ldr	r2, [r4, #0]
   34f5e:	0391      	lsls	r1, r2, #14
   34f60:	d569      	bpl.n	35036 <ip_interface_sendto+0x10a>
   34f62:	f1b9 0f00 	cmp.w	r9, #0
   34f66:	f000 8112 	beq.w	3518e <ip_interface_sendto+0x262>
   34f6a:	f019 0f02 	tst.w	r9, #2
   34f6e:	f000 814a 	beq.w	35206 <ip_interface_sendto+0x2da>
   34f72:	2300      	movs	r3, #0
   34f74:	9303      	str	r3, [sp, #12]
   34f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34f78:	f247 0806 	movw	r8, #28678	; 0x7006
   34f7c:	2b00      	cmp	r3, #0
   34f7e:	bf08      	it	eq
   34f80:	f04f 33ff 	moveq.w	r3, #4294967295
   34f84:	f04f 0b0c 	mov.w	fp, #12
   34f88:	4aa5      	ldr	r2, [pc, #660]	; (35220 <ip_interface_sendto+0x2f4>)
   34f8a:	9308      	str	r3, [sp, #32]
   34f8c:	043b      	lsls	r3, r7, #16
   34f8e:	9200      	str	r2, [sp, #0]
   34f90:	9304      	str	r3, [sp, #16]
   34f92:	4629      	mov	r1, r5
   34f94:	a807      	add	r0, sp, #28
   34f96:	f7ff fdcd 	bl	34b34 <rpc_ip_client_request_alloc>
   34f9a:	2804      	cmp	r0, #4
   34f9c:	d05e      	beq.n	3505c <ip_interface_sendto+0x130>
   34f9e:	2800      	cmp	r0, #0
   34fa0:	f040 813b 	bne.w	3521a <ip_interface_sendto+0x2ee>
   34fa4:	9b07      	ldr	r3, [sp, #28]
   34fa6:	f883 b008 	strb.w	fp, [r3, #8]
   34faa:	7258      	strb	r0, [r3, #9]
   34fac:	7298      	strb	r0, [r3, #10]
   34fae:	72d8      	strb	r0, [r3, #11]
   34fb0:	2e00      	cmp	r6, #0
   34fb2:	d06b      	beq.n	3508c <ip_interface_sendto+0x160>
   34fb4:	68e2      	ldr	r2, [r4, #12]
   34fb6:	6871      	ldr	r1, [r6, #4]
   34fb8:	428a      	cmp	r2, r1
   34fba:	f040 80a8 	bne.w	3510e <ip_interface_sendto+0x1e2>
   34fbe:	7831      	ldrb	r1, [r6, #0]
   34fc0:	9815      	ldr	r0, [sp, #84]	; 0x54
   34fc2:	4288      	cmp	r0, r1
   34fc4:	d10a      	bne.n	34fdc <ip_interface_sendto+0xb0>
   34fc6:	2a02      	cmp	r2, #2
   34fc8:	f103 001c 	add.w	r0, r3, #28
   34fcc:	f000 80ff 	beq.w	351ce <ip_interface_sendto+0x2a2>
   34fd0:	2a0a      	cmp	r2, #10
   34fd2:	d103      	bne.n	34fdc <ip_interface_sendto+0xb0>
   34fd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   34fd6:	2a24      	cmp	r2, #36	; 0x24
   34fd8:	f000 80e6 	beq.w	351a8 <ip_interface_sendto+0x27c>
   34fdc:	f04f 0a16 	mov.w	sl, #22
   34fe0:	6818      	ldr	r0, [r3, #0]
   34fe2:	b110      	cbz	r0, 34fea <ip_interface_sendto+0xbe>
   34fe4:	f7ff fdd8 	bl	34b98 <rpc_ip_client_data_free>
   34fe8:	9b07      	ldr	r3, [sp, #28]
   34fea:	4618      	mov	r0, r3
   34fec:	f7ff fdcc 	bl	34b88 <rpc_ip_client_message_free>
   34ff0:	6823      	ldr	r3, [r4, #0]
   34ff2:	0318      	lsls	r0, r3, #12
   34ff4:	d40b      	bmi.n	3500e <ip_interface_sendto+0xe2>
   34ff6:	6823      	ldr	r3, [r4, #0]
   34ff8:	b29b      	uxth	r3, r3
   34ffa:	2b0d      	cmp	r3, #13
   34ffc:	d007      	beq.n	3500e <ip_interface_sendto+0xe2>
   34ffe:	6823      	ldr	r3, [r4, #0]
   35000:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   35004:	6023      	str	r3, [r4, #0]
   35006:	6823      	ldr	r3, [r4, #0]
   35008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3500c:	6023      	str	r3, [r4, #0]
   3500e:	f1ba 0f00 	cmp.w	sl, #0
   35012:	f040 80b3 	bne.w	3517c <ip_interface_sendto+0x250>
   35016:	6823      	ldr	r3, [r4, #0]
   35018:	0119      	lsls	r1, r3, #4
   3501a:	d57b      	bpl.n	35114 <ip_interface_sendto+0x1e8>
   3501c:	6823      	ldr	r3, [r4, #0]
   3501e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   35022:	6023      	str	r3, [r4, #0]
   35024:	9b00      	ldr	r3, [sp, #0]
   35026:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   3502a:	2800      	cmp	r0, #0
   3502c:	d176      	bne.n	3511c <ip_interface_sendto+0x1f0>
   3502e:	4628      	mov	r0, r5
   35030:	b00b      	add	sp, #44	; 0x2c
   35032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35036:	6822      	ldr	r2, [r4, #0]
   35038:	0092      	lsls	r2, r2, #2
   3503a:	d406      	bmi.n	3504a <ip_interface_sendto+0x11e>
   3503c:	2b01      	cmp	r3, #1
   3503e:	f000 80ad 	beq.w	3519c <ip_interface_sendto+0x270>
   35042:	6823      	ldr	r3, [r4, #0]
   35044:	031b      	lsls	r3, r3, #12
   35046:	f140 80cf 	bpl.w	351e8 <ip_interface_sendto+0x2bc>
   3504a:	6823      	ldr	r3, [r4, #0]
   3504c:	031e      	lsls	r6, r3, #12
   3504e:	f140 80d5 	bpl.w	351fc <ip_interface_sendto+0x2d0>
   35052:	4b73      	ldr	r3, [pc, #460]	; (35220 <ip_interface_sendto+0x2f4>)
   35054:	f8d4 a008 	ldr.w	sl, [r4, #8]
   35058:	9300      	str	r3, [sp, #0]
   3505a:	e7d8      	b.n	3500e <ip_interface_sendto+0xe2>
   3505c:	9b03      	ldr	r3, [sp, #12]
   3505e:	2b00      	cmp	r3, #0
   35060:	d052      	beq.n	35108 <ip_interface_sendto+0x1dc>
   35062:	9b08      	ldr	r3, [sp, #32]
   35064:	3301      	adds	r3, #1
   35066:	d094      	beq.n	34f92 <ip_interface_sendto+0x66>
   35068:	230a      	movs	r3, #10
   3506a:	a90a      	add	r1, sp, #40	; 0x28
   3506c:	f841 3d04 	str.w	r3, [r1, #-4]!
   35070:	2000      	movs	r0, #0
   35072:	f7f4 fa3b 	bl	294ec <bsd_os_timedwait>
   35076:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   3507a:	f1c2 020a 	rsb	r2, r2, #10
   3507e:	1a9b      	subs	r3, r3, r2
   35080:	2b00      	cmp	r3, #0
   35082:	9308      	str	r3, [sp, #32]
   35084:	dc85      	bgt.n	34f92 <ip_interface_sendto+0x66>
   35086:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   3508a:	e7b1      	b.n	34ff0 <ip_interface_sendto+0xc4>
   3508c:	4642      	mov	r2, r8
   3508e:	f8c3 9014 	str.w	r9, [r3, #20]
   35092:	69a1      	ldr	r1, [r4, #24]
   35094:	9804      	ldr	r0, [sp, #16]
   35096:	6119      	str	r1, [r3, #16]
   35098:	9902      	ldr	r1, [sp, #8]
   3509a:	4302      	orrs	r2, r0
   3509c:	60da      	str	r2, [r3, #12]
   3509e:	605d      	str	r5, [r3, #4]
   350a0:	b119      	cbz	r1, 350aa <ip_interface_sendto+0x17e>
   350a2:	6818      	ldr	r0, [r3, #0]
   350a4:	462a      	mov	r2, r5
   350a6:	f00f fe1e 	bl	44ce6 <memcpy>
   350aa:	6823      	ldr	r3, [r4, #0]
   350ac:	4641      	mov	r1, r8
   350ae:	9305      	str	r3, [sp, #20]
   350b0:	6823      	ldr	r3, [r4, #0]
   350b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   350b6:	6023      	str	r3, [r4, #0]
   350b8:	6823      	ldr	r3, [r4, #0]
   350ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   350be:	6023      	str	r3, [r4, #0]
   350c0:	9b07      	ldr	r3, [sp, #28]
   350c2:	4618      	mov	r0, r3
   350c4:	9301      	str	r3, [sp, #4]
   350c6:	f7ff fd49 	bl	34b5c <rpc_ip_client_request_send>
   350ca:	9b01      	ldr	r3, [sp, #4]
   350cc:	4682      	mov	sl, r0
   350ce:	bb78      	cbnz	r0, 35130 <ip_interface_sendto+0x204>
   350d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   350d4:	ab08      	add	r3, sp, #32
   350d6:	4611      	mov	r1, r2
   350d8:	4638      	mov	r0, r7
   350da:	f005 ff67 	bl	3afac <interface_socket_wait>
   350de:	4603      	mov	r3, r0
   350e0:	b398      	cbz	r0, 3514a <ip_interface_sendto+0x21e>
   350e2:	6822      	ldr	r2, [r4, #0]
   350e4:	0312      	lsls	r2, r2, #12
   350e6:	d43f      	bmi.n	35168 <ip_interface_sendto+0x23c>
   350e8:	2b3c      	cmp	r3, #60	; 0x3c
   350ea:	d001      	beq.n	350f0 <ip_interface_sendto+0x1c4>
   350ec:	2b0c      	cmp	r3, #12
   350ee:	d001      	beq.n	350f4 <ip_interface_sendto+0x1c8>
   350f0:	469a      	mov	sl, r3
   350f2:	e77d      	b.n	34ff0 <ip_interface_sendto+0xc4>
   350f4:	9b00      	ldr	r3, [sp, #0]
   350f6:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   350fa:	b108      	cbz	r0, 35100 <ip_interface_sendto+0x1d4>
   350fc:	f7ff fd44 	bl	34b88 <rpc_ip_client_message_free>
   35100:	9b03      	ldr	r3, [sp, #12]
   35102:	2b00      	cmp	r3, #0
   35104:	f47f af45 	bne.w	34f92 <ip_interface_sendto+0x66>
   35108:	f04f 0a23 	mov.w	sl, #35	; 0x23
   3510c:	e770      	b.n	34ff0 <ip_interface_sendto+0xc4>
   3510e:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   35112:	e765      	b.n	34fe0 <ip_interface_sendto+0xb4>
   35114:	9b00      	ldr	r3, [sp, #0]
   35116:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   3511a:	6985      	ldr	r5, [r0, #24]
   3511c:	f7ff fd34 	bl	34b88 <rpc_ip_client_message_free>
   35120:	2300      	movs	r3, #0
   35122:	4628      	mov	r0, r5
   35124:	9a00      	ldr	r2, [sp, #0]
   35126:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   3512a:	b00b      	add	sp, #44	; 0x2c
   3512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35130:	6818      	ldr	r0, [r3, #0]
   35132:	469a      	mov	sl, r3
   35134:	b108      	cbz	r0, 3513a <ip_interface_sendto+0x20e>
   35136:	f7ff fd2f 	bl	34b98 <rpc_ip_client_data_free>
   3513a:	4650      	mov	r0, sl
   3513c:	f7ff fd24 	bl	34b88 <rpc_ip_client_message_free>
   35140:	9b05      	ldr	r3, [sp, #20]
   35142:	f04f 0a23 	mov.w	sl, #35	; 0x23
   35146:	6023      	str	r3, [r4, #0]
   35148:	e752      	b.n	34ff0 <ip_interface_sendto+0xc4>
   3514a:	9001      	str	r0, [sp, #4]
   3514c:	4638      	mov	r0, r7
   3514e:	f005 ffa1 	bl	3b094 <interface_socket_from_handle_get>
   35152:	9b01      	ldr	r3, [sp, #4]
   35154:	2800      	cmp	r0, #0
   35156:	d0cb      	beq.n	350f0 <ip_interface_sendto+0x1c4>
   35158:	6843      	ldr	r3, [r0, #4]
   3515a:	2b00      	cmp	r3, #0
   3515c:	d0c8      	beq.n	350f0 <ip_interface_sendto+0x1c4>
   3515e:	f8c0 a004 	str.w	sl, [r0, #4]
   35162:	6822      	ldr	r2, [r4, #0]
   35164:	0312      	lsls	r2, r2, #12
   35166:	d5bf      	bpl.n	350e8 <ip_interface_sendto+0x1bc>
   35168:	f8d4 a008 	ldr.w	sl, [r4, #8]
   3516c:	e740      	b.n	34ff0 <ip_interface_sendto+0xc4>
   3516e:	2e00      	cmp	r6, #0
   35170:	f43f aef4 	beq.w	34f5c <ip_interface_sendto+0x30>
   35174:	f04f 0a38 	mov.w	sl, #56	; 0x38
   35178:	4b29      	ldr	r3, [pc, #164]	; (35220 <ip_interface_sendto+0x2f4>)
   3517a:	9300      	str	r3, [sp, #0]
   3517c:	4650      	mov	r0, sl
   3517e:	f7f4 fa6d 	bl	2965c <bsd_os_errno_set>
   35182:	9b00      	ldr	r3, [sp, #0]
   35184:	f04f 35ff 	mov.w	r5, #4294967295
   35188:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   3518c:	e74d      	b.n	3502a <ip_interface_sendto+0xfe>
   3518e:	6823      	ldr	r3, [r4, #0]
   35190:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   35194:	f3c3 7300 	ubfx	r3, r3, #28, #1
   35198:	9303      	str	r3, [sp, #12]
   3519a:	e6ec      	b.n	34f76 <ip_interface_sendto+0x4a>
   3519c:	6823      	ldr	r3, [r4, #0]
   3519e:	b29b      	uxth	r3, r3
   351a0:	2b05      	cmp	r3, #5
   351a2:	f47f af52 	bne.w	3504a <ip_interface_sendto+0x11e>
   351a6:	e74c      	b.n	35042 <ip_interface_sendto+0x116>
   351a8:	2210      	movs	r2, #16
   351aa:	8931      	ldrh	r1, [r6, #8]
   351ac:	835a      	strh	r2, [r3, #26]
   351ae:	8319      	strh	r1, [r3, #24]
   351b0:	18b1      	adds	r1, r6, r2
   351b2:	f00f fd98 	bl	44ce6 <memcpy>
   351b6:	f247 0207 	movw	r2, #28679	; 0x7007
   351ba:	9b07      	ldr	r3, [sp, #28]
   351bc:	4690      	mov	r8, r2
   351be:	6899      	ldr	r1, [r3, #8]
   351c0:	8b58      	ldrh	r0, [r3, #26]
   351c2:	3104      	adds	r1, #4
   351c4:	4401      	add	r1, r0
   351c6:	f8c3 9014 	str.w	r9, [r3, #20]
   351ca:	6099      	str	r1, [r3, #8]
   351cc:	e761      	b.n	35092 <ip_interface_sendto+0x166>
   351ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
   351d0:	2a10      	cmp	r2, #16
   351d2:	f47f af03 	bne.w	34fdc <ip_interface_sendto+0xb0>
   351d6:	2204      	movs	r2, #4
   351d8:	8931      	ldrh	r1, [r6, #8]
   351da:	835a      	strh	r2, [r3, #26]
   351dc:	8319      	strh	r1, [r3, #24]
   351de:	f106 010c 	add.w	r1, r6, #12
   351e2:	f00f fd80 	bl	44ce6 <memcpy>
   351e6:	e7e6      	b.n	351b6 <ip_interface_sendto+0x28a>
   351e8:	4b0d      	ldr	r3, [pc, #52]	; (35220 <ip_interface_sendto+0x2f4>)
   351ea:	f04f 0a23 	mov.w	sl, #35	; 0x23
   351ee:	9300      	str	r3, [sp, #0]
   351f0:	e7c4      	b.n	3517c <ip_interface_sendto+0x250>
   351f2:	4b0b      	ldr	r3, [pc, #44]	; (35220 <ip_interface_sendto+0x2f4>)
   351f4:	f04f 0a28 	mov.w	sl, #40	; 0x28
   351f8:	9300      	str	r3, [sp, #0]
   351fa:	e7bf      	b.n	3517c <ip_interface_sendto+0x250>
   351fc:	4b08      	ldr	r3, [pc, #32]	; (35220 <ip_interface_sendto+0x2f4>)
   351fe:	f04f 0a39 	mov.w	sl, #57	; 0x39
   35202:	9300      	str	r3, [sp, #0]
   35204:	e7ba      	b.n	3517c <ip_interface_sendto+0x250>
   35206:	4b06      	ldr	r3, [pc, #24]	; (35220 <ip_interface_sendto+0x2f4>)
   35208:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   3520c:	9300      	str	r3, [sp, #0]
   3520e:	e7b5      	b.n	3517c <ip_interface_sendto+0x250>
   35210:	4b03      	ldr	r3, [pc, #12]	; (35220 <ip_interface_sendto+0x2f4>)
   35212:	f04f 0a09 	mov.w	sl, #9
   35216:	9300      	str	r3, [sp, #0]
   35218:	e7b0      	b.n	3517c <ip_interface_sendto+0x250>
   3521a:	f04f 0a0c 	mov.w	sl, #12
   3521e:	e6e7      	b.n	34ff0 <ip_interface_sendto+0xc4>
   35220:	20025970 	.word	0x20025970

00035224 <ip_interface_recvfrom>:
   35224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35228:	b087      	sub	sp, #28
   3522a:	2a00      	cmp	r2, #0
   3522c:	f000 8112 	beq.w	35454 <ip_interface_recvfrom+0x230>
   35230:	4680      	mov	r8, r0
   35232:	468b      	mov	fp, r1
   35234:	469a      	mov	sl, r3
   35236:	4691      	mov	r9, r2
   35238:	b11b      	cbz	r3, 35242 <ip_interface_recvfrom+0x1e>
   3523a:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   3523e:	f000 8107 	beq.w	35450 <ip_interface_recvfrom+0x22c>
   35242:	4640      	mov	r0, r8
   35244:	f005 ff26 	bl	3b094 <interface_socket_from_handle_get>
   35248:	4604      	mov	r4, r0
   3524a:	2800      	cmp	r0, #0
   3524c:	f000 8104 	beq.w	35458 <ip_interface_recvfrom+0x234>
   35250:	6803      	ldr	r3, [r0, #0]
   35252:	02db      	lsls	r3, r3, #11
   35254:	d562      	bpl.n	3531c <ip_interface_recvfrom+0xf8>
   35256:	f01a 0f02 	tst.w	sl, #2
   3525a:	bf18      	it	ne
   3525c:	2600      	movne	r6, #0
   3525e:	f04f 35ff 	mov.w	r5, #4294967295
   35262:	bf08      	it	eq
   35264:	6806      	ldreq	r6, [r0, #0]
   35266:	f00a 0310 	and.w	r3, sl, #16
   3526a:	bf04      	itt	eq
   3526c:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   35270:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   35274:	9301      	str	r3, [sp, #4]
   35276:	6823      	ldr	r3, [r4, #0]
   35278:	03df      	lsls	r7, r3, #15
   3527a:	d567      	bpl.n	3534c <ip_interface_recvfrom+0x128>
   3527c:	6823      	ldr	r3, [r4, #0]
   3527e:	69e0      	ldr	r0, [r4, #28]
   35280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   35284:	6023      	str	r3, [r4, #0]
   35286:	6803      	ldr	r3, [r0, #0]
   35288:	68db      	ldr	r3, [r3, #12]
   3528a:	4798      	blx	r3
   3528c:	4605      	mov	r5, r0
   3528e:	3001      	adds	r0, #1
   35290:	d07d      	beq.n	3538e <ip_interface_recvfrom+0x16a>
   35292:	45a9      	cmp	r9, r5
   35294:	dd03      	ble.n	3529e <ip_interface_recvfrom+0x7a>
   35296:	6923      	ldr	r3, [r4, #16]
   35298:	2b01      	cmp	r3, #1
   3529a:	f000 80a3 	beq.w	353e4 <ip_interface_recvfrom+0x1c0>
   3529e:	f04f 0800 	mov.w	r8, #0
   352a2:	af02      	add	r7, sp, #8
   352a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   352a6:	b103      	cbz	r3, 352aa <ip_interface_recvfrom+0x86>
   352a8:	681b      	ldr	r3, [r3, #0]
   352aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   352ac:	e9cd b902 	strd	fp, r9, [sp, #8]
   352b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   352b4:	69e0      	ldr	r0, [r4, #28]
   352b6:	4639      	mov	r1, r7
   352b8:	6803      	ldr	r3, [r0, #0]
   352ba:	4652      	mov	r2, sl
   352bc:	689b      	ldr	r3, [r3, #8]
   352be:	4798      	blx	r3
   352c0:	4605      	mov	r5, r0
   352c2:	69e0      	ldr	r0, [r4, #28]
   352c4:	1c6b      	adds	r3, r5, #1
   352c6:	6803      	ldr	r3, [r0, #0]
   352c8:	bf18      	it	ne
   352ca:	2701      	movne	r7, #1
   352cc:	68db      	ldr	r3, [r3, #12]
   352ce:	bf0a      	itet	eq
   352d0:	2700      	moveq	r7, #0
   352d2:	2600      	movne	r6, #0
   352d4:	2623      	moveq	r6, #35	; 0x23
   352d6:	4798      	blx	r3
   352d8:	3001      	adds	r0, #1
   352da:	d132      	bne.n	35342 <ip_interface_recvfrom+0x11e>
   352dc:	f1b8 0f00 	cmp.w	r8, #0
   352e0:	f000 80b0 	beq.w	35444 <ip_interface_recvfrom+0x220>
   352e4:	2f00      	cmp	r7, #0
   352e6:	f000 80a1 	beq.w	3542c <ip_interface_recvfrom+0x208>
   352ea:	6823      	ldr	r3, [r4, #0]
   352ec:	0318      	lsls	r0, r3, #12
   352ee:	d506      	bpl.n	352fe <ip_interface_recvfrom+0xda>
   352f0:	6823      	ldr	r3, [r4, #0]
   352f2:	b29b      	uxth	r3, r3
   352f4:	2b0d      	cmp	r3, #13
   352f6:	d002      	beq.n	352fe <ip_interface_recvfrom+0xda>
   352f8:	6923      	ldr	r3, [r4, #16]
   352fa:	2b01      	cmp	r3, #1
   352fc:	d021      	beq.n	35342 <ip_interface_recvfrom+0x11e>
   352fe:	6823      	ldr	r3, [r4, #0]
   35300:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   35304:	6823      	ldr	r3, [r4, #0]
   35306:	f040 80a9 	bne.w	3545c <ip_interface_recvfrom+0x238>
   3530a:	0319      	lsls	r1, r3, #12
   3530c:	d473      	bmi.n	353f6 <ip_interface_recvfrom+0x1d2>
   3530e:	2e00      	cmp	r6, #0
   35310:	f040 8086 	bne.w	35420 <ip_interface_recvfrom+0x1fc>
   35314:	4628      	mov	r0, r5
   35316:	b007      	add	sp, #28
   35318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3531c:	6803      	ldr	r3, [r0, #0]
   3531e:	b29b      	uxth	r3, r3
   35320:	2b06      	cmp	r3, #6
   35322:	d071      	beq.n	35408 <ip_interface_recvfrom+0x1e4>
   35324:	6803      	ldr	r3, [r0, #0]
   35326:	b29b      	uxth	r3, r3
   35328:	2b07      	cmp	r3, #7
   3532a:	bf0c      	ite	eq
   3532c:	2609      	moveq	r6, #9
   3532e:	2639      	movne	r6, #57	; 0x39
   35330:	69e0      	ldr	r0, [r4, #28]
   35332:	6803      	ldr	r3, [r0, #0]
   35334:	68db      	ldr	r3, [r3, #12]
   35336:	4798      	blx	r3
   35338:	1c43      	adds	r3, r0, #1
   3533a:	4605      	mov	r5, r0
   3533c:	d0df      	beq.n	352fe <ip_interface_recvfrom+0xda>
   3533e:	f04f 35ff 	mov.w	r5, #4294967295
   35342:	6823      	ldr	r3, [r4, #0]
   35344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   35348:	6023      	str	r3, [r4, #0]
   3534a:	e7e0      	b.n	3530e <ip_interface_recvfrom+0xea>
   3534c:	2e00      	cmp	r6, #0
   3534e:	d07d      	beq.n	3544c <ip_interface_recvfrom+0x228>
   35350:	6a26      	ldr	r6, [r4, #32]
   35352:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   35356:	2e00      	cmp	r6, #0
   35358:	bf08      	it	eq
   3535a:	f04f 36ff 	moveq.w	r6, #4294967295
   3535e:	af02      	add	r7, sp, #8
   35360:	463b      	mov	r3, r7
   35362:	4611      	mov	r1, r2
   35364:	4640      	mov	r0, r8
   35366:	9602      	str	r6, [sp, #8]
   35368:	f005 fe20 	bl	3afac <interface_socket_wait>
   3536c:	4606      	mov	r6, r0
   3536e:	b350      	cbz	r0, 353c6 <ip_interface_recvfrom+0x1a2>
   35370:	6823      	ldr	r3, [r4, #0]
   35372:	031a      	lsls	r2, r3, #12
   35374:	d532      	bpl.n	353dc <ip_interface_recvfrom+0x1b8>
   35376:	6823      	ldr	r3, [r4, #0]
   35378:	b29b      	uxth	r3, r3
   3537a:	2b0d      	cmp	r3, #13
   3537c:	d02e      	beq.n	353dc <ip_interface_recvfrom+0x1b8>
   3537e:	6923      	ldr	r3, [r4, #16]
   35380:	f1a3 0801 	sub.w	r8, r3, #1
   35384:	fab8 f888 	clz	r8, r8
   35388:	ea4f 1858 	mov.w	r8, r8, lsr #5
   3538c:	e78a      	b.n	352a4 <ip_interface_recvfrom+0x80>
   3538e:	6823      	ldr	r3, [r4, #0]
   35390:	031a      	lsls	r2, r3, #12
   35392:	d5db      	bpl.n	3534c <ip_interface_recvfrom+0x128>
   35394:	6823      	ldr	r3, [r4, #0]
   35396:	b29b      	uxth	r3, r3
   35398:	2b0d      	cmp	r3, #13
   3539a:	d0d7      	beq.n	3534c <ip_interface_recvfrom+0x128>
   3539c:	6923      	ldr	r3, [r4, #16]
   3539e:	69e0      	ldr	r0, [r4, #28]
   353a0:	2b01      	cmp	r3, #1
   353a2:	d033      	beq.n	3540c <ip_interface_recvfrom+0x1e8>
   353a4:	2639      	movs	r6, #57	; 0x39
   353a6:	6823      	ldr	r3, [r4, #0]
   353a8:	0c1b      	lsrs	r3, r3, #16
   353aa:	041b      	lsls	r3, r3, #16
   353ac:	f043 030d 	orr.w	r3, r3, #13
   353b0:	6023      	str	r3, [r4, #0]
   353b2:	6823      	ldr	r3, [r4, #0]
   353b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   353b8:	6023      	str	r3, [r4, #0]
   353ba:	6803      	ldr	r3, [r0, #0]
   353bc:	68db      	ldr	r3, [r3, #12]
   353be:	4798      	blx	r3
   353c0:	3001      	adds	r0, #1
   353c2:	d1be      	bne.n	35342 <ip_interface_recvfrom+0x11e>
   353c4:	e79b      	b.n	352fe <ip_interface_recvfrom+0xda>
   353c6:	4640      	mov	r0, r8
   353c8:	f005 fe64 	bl	3b094 <interface_socket_from_handle_get>
   353cc:	b140      	cbz	r0, 353e0 <ip_interface_recvfrom+0x1bc>
   353ce:	6846      	ldr	r6, [r0, #4]
   353d0:	b136      	cbz	r6, 353e0 <ip_interface_recvfrom+0x1bc>
   353d2:	2300      	movs	r3, #0
   353d4:	6043      	str	r3, [r0, #4]
   353d6:	6823      	ldr	r3, [r4, #0]
   353d8:	031a      	lsls	r2, r3, #12
   353da:	d4cc      	bmi.n	35376 <ip_interface_recvfrom+0x152>
   353dc:	69e0      	ldr	r0, [r4, #28]
   353de:	e7ec      	b.n	353ba <ip_interface_recvfrom+0x196>
   353e0:	2601      	movs	r6, #1
   353e2:	e748      	b.n	35276 <ip_interface_recvfrom+0x52>
   353e4:	9b01      	ldr	r3, [sp, #4]
   353e6:	b11b      	cbz	r3, 353f0 <ip_interface_recvfrom+0x1cc>
   353e8:	6823      	ldr	r3, [r4, #0]
   353ea:	00d9      	lsls	r1, r3, #3
   353ec:	d5b0      	bpl.n	35350 <ip_interface_recvfrom+0x12c>
   353ee:	e756      	b.n	3529e <ip_interface_recvfrom+0x7a>
   353f0:	4698      	mov	r8, r3
   353f2:	af02      	add	r7, sp, #8
   353f4:	e756      	b.n	352a4 <ip_interface_recvfrom+0x80>
   353f6:	6823      	ldr	r3, [r4, #0]
   353f8:	b29b      	uxth	r3, r3
   353fa:	2b0d      	cmp	r3, #13
   353fc:	d187      	bne.n	3530e <ip_interface_recvfrom+0xea>
   353fe:	68a3      	ldr	r3, [r4, #8]
   35400:	2b00      	cmp	r3, #0
   35402:	d084      	beq.n	3530e <ip_interface_recvfrom+0xea>
   35404:	68a6      	ldr	r6, [r4, #8]
   35406:	e782      	b.n	3530e <ip_interface_recvfrom+0xea>
   35408:	2609      	movs	r6, #9
   3540a:	e791      	b.n	35330 <ip_interface_recvfrom+0x10c>
   3540c:	6803      	ldr	r3, [r0, #0]
   3540e:	68db      	ldr	r3, [r3, #12]
   35410:	4798      	blx	r3
   35412:	3001      	adds	r0, #1
   35414:	d00a      	beq.n	3542c <ip_interface_recvfrom+0x208>
   35416:	2623      	movs	r6, #35	; 0x23
   35418:	6823      	ldr	r3, [r4, #0]
   3541a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3541e:	6023      	str	r3, [r4, #0]
   35420:	4630      	mov	r0, r6
   35422:	f7f4 f91b 	bl	2965c <bsd_os_errno_set>
   35426:	f04f 35ff 	mov.w	r5, #4294967295
   3542a:	e773      	b.n	35314 <ip_interface_recvfrom+0xf0>
   3542c:	6823      	ldr	r3, [r4, #0]
   3542e:	2500      	movs	r5, #0
   35430:	0c1b      	lsrs	r3, r3, #16
   35432:	041b      	lsls	r3, r3, #16
   35434:	f043 030d 	orr.w	r3, r3, #13
   35438:	6023      	str	r3, [r4, #0]
   3543a:	6823      	ldr	r3, [r4, #0]
   3543c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   35440:	6023      	str	r3, [r4, #0]
   35442:	e767      	b.n	35314 <ip_interface_recvfrom+0xf0>
   35444:	2f00      	cmp	r7, #0
   35446:	f47f af50 	bne.w	352ea <ip_interface_recvfrom+0xc6>
   3544a:	e758      	b.n	352fe <ip_interface_recvfrom+0xda>
   3544c:	2623      	movs	r6, #35	; 0x23
   3544e:	e7c5      	b.n	353dc <ip_interface_recvfrom+0x1b8>
   35450:	262d      	movs	r6, #45	; 0x2d
   35452:	e7e5      	b.n	35420 <ip_interface_recvfrom+0x1fc>
   35454:	2616      	movs	r6, #22
   35456:	e7e3      	b.n	35420 <ip_interface_recvfrom+0x1fc>
   35458:	2609      	movs	r6, #9
   3545a:	e7e1      	b.n	35420 <ip_interface_recvfrom+0x1fc>
   3545c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   35460:	6023      	str	r3, [r4, #0]
   35462:	6823      	ldr	r3, [r4, #0]
   35464:	2669      	movs	r6, #105	; 0x69
   35466:	0c1b      	lsrs	r3, r3, #16
   35468:	041b      	lsls	r3, r3, #16
   3546a:	f043 030d 	orr.w	r3, r3, #13
   3546e:	6023      	str	r3, [r4, #0]
   35470:	e7d6      	b.n	35420 <ip_interface_recvfrom+0x1fc>
   35472:	bf00      	nop

00035474 <ip_interface_connect>:
   35474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35478:	b082      	sub	sp, #8
   3547a:	2900      	cmp	r1, #0
   3547c:	d04b      	beq.n	35516 <ip_interface_connect+0xa2>
   3547e:	4617      	mov	r7, r2
   35480:	2a00      	cmp	r2, #0
   35482:	d048      	beq.n	35516 <ip_interface_connect+0xa2>
   35484:	4680      	mov	r8, r0
   35486:	4689      	mov	r9, r1
   35488:	f005 fe04 	bl	3b094 <interface_socket_from_handle_get>
   3548c:	4605      	mov	r5, r0
   3548e:	2800      	cmp	r0, #0
   35490:	f000 80af 	beq.w	355f2 <ip_interface_connect+0x17e>
   35494:	6803      	ldr	r3, [r0, #0]
   35496:	b29b      	uxth	r3, r3
   35498:	2b02      	cmp	r3, #2
   3549a:	d004      	beq.n	354a6 <ip_interface_connect+0x32>
   3549c:	6803      	ldr	r3, [r0, #0]
   3549e:	b29b      	uxth	r3, r3
   354a0:	2b04      	cmp	r3, #4
   354a2:	f040 809d 	bne.w	355e0 <ip_interface_connect+0x16c>
   354a6:	6829      	ldr	r1, [r5, #0]
   354a8:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   354ac:	f040 8089 	bne.w	355c2 <ip_interface_connect+0x14e>
   354b0:	ae02      	add	r6, sp, #8
   354b2:	f8d5 a018 	ldr.w	sl, [r5, #24]
   354b6:	f846 1d04 	str.w	r1, [r6, #-4]!
   354ba:	4630      	mov	r0, r6
   354bc:	f7ff fb3a 	bl	34b34 <rpc_ip_client_request_alloc>
   354c0:	bb98      	cbnz	r0, 3552a <ip_interface_connect+0xb6>
   354c2:	2108      	movs	r1, #8
   354c4:	ea4f 4208 	mov.w	r2, r8, lsl #16
   354c8:	9c01      	ldr	r4, [sp, #4]
   354ca:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   354ce:	f043 0302 	orr.w	r3, r3, #2
   354d2:	60e3      	str	r3, [r4, #12]
   354d4:	f8c4 a010 	str.w	sl, [r4, #16]
   354d8:	7260      	strb	r0, [r4, #9]
   354da:	72a0      	strb	r0, [r4, #10]
   354dc:	72e0      	strb	r0, [r4, #11]
   354de:	7221      	strb	r1, [r4, #8]
   354e0:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   354e4:	f042 0202 	orr.w	r2, r2, #2
   354e8:	60e2      	str	r2, [r4, #12]
   354ea:	68a3      	ldr	r3, [r4, #8]
   354ec:	69aa      	ldr	r2, [r5, #24]
   354ee:	3304      	adds	r3, #4
   354f0:	6122      	str	r2, [r4, #16]
   354f2:	60a3      	str	r3, [r4, #8]
   354f4:	68eb      	ldr	r3, [r5, #12]
   354f6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   354fa:	4293      	cmp	r3, r2
   354fc:	d11b      	bne.n	35536 <ip_interface_connect+0xc2>
   354fe:	f899 2000 	ldrb.w	r2, [r9]
   35502:	4297      	cmp	r7, r2
   35504:	d107      	bne.n	35516 <ip_interface_connect+0xa2>
   35506:	2b02      	cmp	r3, #2
   35508:	f104 0018 	add.w	r0, r4, #24
   3550c:	d015      	beq.n	3553a <ip_interface_connect+0xc6>
   3550e:	2b0a      	cmp	r3, #10
   35510:	d101      	bne.n	35516 <ip_interface_connect+0xa2>
   35512:	2f24      	cmp	r7, #36	; 0x24
   35514:	d01d      	beq.n	35552 <ip_interface_connect+0xde>
   35516:	2416      	movs	r4, #22
   35518:	4620      	mov	r0, r4
   3551a:	f7f4 f89f 	bl	2965c <bsd_os_errno_set>
   3551e:	f04f 34ff 	mov.w	r4, #4294967295
   35522:	4620      	mov	r0, r4
   35524:	b002      	add	sp, #8
   35526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3552a:	9c01      	ldr	r4, [sp, #4]
   3552c:	2c00      	cmp	r4, #0
   3552e:	d05e      	beq.n	355ee <ip_interface_connect+0x17a>
   35530:	ea4f 4208 	mov.w	r2, r8, lsl #16
   35534:	e7d4      	b.n	354e0 <ip_interface_connect+0x6c>
   35536:	242f      	movs	r4, #47	; 0x2f
   35538:	e7ee      	b.n	35518 <ip_interface_connect+0xa4>
   3553a:	2f10      	cmp	r7, #16
   3553c:	d1eb      	bne.n	35516 <ip_interface_connect+0xa2>
   3553e:	2204      	movs	r2, #4
   35540:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   35544:	f109 010c 	add.w	r1, r9, #12
   35548:	82e2      	strh	r2, [r4, #22]
   3554a:	82a3      	strh	r3, [r4, #20]
   3554c:	f00f fbcb 	bl	44ce6 <memcpy>
   35550:	e008      	b.n	35564 <ip_interface_connect+0xf0>
   35552:	2210      	movs	r2, #16
   35554:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   35558:	eb09 0102 	add.w	r1, r9, r2
   3555c:	82e2      	strh	r2, [r4, #22]
   3555e:	82a3      	strh	r3, [r4, #20]
   35560:	f00f fbc1 	bl	44ce6 <memcpy>
   35564:	68a3      	ldr	r3, [r4, #8]
   35566:	8ae2      	ldrh	r2, [r4, #22]
   35568:	f247 0102 	movw	r1, #28674	; 0x7002
   3556c:	4413      	add	r3, r2
   3556e:	60a3      	str	r3, [r4, #8]
   35570:	682f      	ldr	r7, [r5, #0]
   35572:	682b      	ldr	r3, [r5, #0]
   35574:	4620      	mov	r0, r4
   35576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   3557a:	602b      	str	r3, [r5, #0]
   3557c:	f7ff faee 	bl	34b5c <rpc_ip_client_request_send>
   35580:	b9a8      	cbnz	r0, 355ae <ip_interface_connect+0x13a>
   35582:	682b      	ldr	r3, [r5, #0]
   35584:	00db      	lsls	r3, r3, #3
   35586:	d429      	bmi.n	355dc <ip_interface_connect+0x168>
   35588:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   3558a:	4633      	mov	r3, r6
   3558c:	2c00      	cmp	r4, #0
   3558e:	bf08      	it	eq
   35590:	f04f 34ff 	moveq.w	r4, #4294967295
   35594:	f64f 72ff 	movw	r2, #65535	; 0xffff
   35598:	2105      	movs	r1, #5
   3559a:	4640      	mov	r0, r8
   3559c:	9401      	str	r4, [sp, #4]
   3559e:	f005 fd05 	bl	3afac <interface_socket_wait>
   355a2:	4604      	mov	r4, r0
   355a4:	b178      	cbz	r0, 355c6 <ip_interface_connect+0x152>
   355a6:	2c73      	cmp	r4, #115	; 0x73
   355a8:	d0b6      	beq.n	35518 <ip_interface_connect+0xa4>
   355aa:	602f      	str	r7, [r5, #0]
   355ac:	e7b4      	b.n	35518 <ip_interface_connect+0xa4>
   355ae:	6820      	ldr	r0, [r4, #0]
   355b0:	b108      	cbz	r0, 355b6 <ip_interface_connect+0x142>
   355b2:	f7ff faf1 	bl	34b98 <rpc_ip_client_data_free>
   355b6:	4620      	mov	r0, r4
   355b8:	f7ff fae6 	bl	34b88 <rpc_ip_client_message_free>
   355bc:	2423      	movs	r4, #35	; 0x23
   355be:	602f      	str	r7, [r5, #0]
   355c0:	e7aa      	b.n	35518 <ip_interface_connect+0xa4>
   355c2:	2472      	movs	r4, #114	; 0x72
   355c4:	e7a8      	b.n	35518 <ip_interface_connect+0xa4>
   355c6:	4640      	mov	r0, r8
   355c8:	f005 fd64 	bl	3b094 <interface_socket_from_handle_get>
   355cc:	2800      	cmp	r0, #0
   355ce:	d0a8      	beq.n	35522 <ip_interface_connect+0xae>
   355d0:	6843      	ldr	r3, [r0, #4]
   355d2:	2b00      	cmp	r3, #0
   355d4:	d0a5      	beq.n	35522 <ip_interface_connect+0xae>
   355d6:	6044      	str	r4, [r0, #4]
   355d8:	461c      	mov	r4, r3
   355da:	e7e4      	b.n	355a6 <ip_interface_connect+0x132>
   355dc:	2473      	movs	r4, #115	; 0x73
   355de:	e79b      	b.n	35518 <ip_interface_connect+0xa4>
   355e0:	6803      	ldr	r3, [r0, #0]
   355e2:	b29b      	uxth	r3, r3
   355e4:	2b05      	cmp	r3, #5
   355e6:	bf14      	ite	ne
   355e8:	2409      	movne	r4, #9
   355ea:	2438      	moveq	r4, #56	; 0x38
   355ec:	e794      	b.n	35518 <ip_interface_connect+0xa4>
   355ee:	240c      	movs	r4, #12
   355f0:	e792      	b.n	35518 <ip_interface_connect+0xa4>
   355f2:	2409      	movs	r4, #9
   355f4:	e790      	b.n	35518 <ip_interface_connect+0xa4>
   355f6:	bf00      	nop

000355f8 <ip_interface_socketoption_get>:
   355f8:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   355fc:	f04f 34ff 	mov.w	r4, #4294967295
   35600:	b082      	sub	sp, #8
   35602:	9400      	str	r4, [sp, #0]
   35604:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   35606:	2c00      	cmp	r4, #0
   35608:	d05b      	beq.n	356c2 <ip_interface_socketoption_get+0xca>
   3560a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   3560c:	6824      	ldr	r4, [r4, #0]
   3560e:	2c00      	cmp	r4, #0
   35610:	d057      	beq.n	356c2 <ip_interface_socketoption_get+0xca>
   35612:	680c      	ldr	r4, [r1, #0]
   35614:	0266      	lsls	r6, r4, #9
   35616:	d44f      	bmi.n	356b8 <ip_interface_socketoption_get+0xc0>
   35618:	680c      	ldr	r4, [r1, #0]
   3561a:	0225      	lsls	r5, r4, #8
   3561c:	d44c      	bmi.n	356b8 <ip_interface_socketoption_get+0xc0>
   3561e:	680c      	ldr	r4, [r1, #0]
   35620:	01e4      	lsls	r4, r4, #7
   35622:	d449      	bmi.n	356b8 <ip_interface_socketoption_get+0xc0>
   35624:	680c      	ldr	r4, [r1, #0]
   35626:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   3562a:	d145      	bne.n	356b8 <ip_interface_socketoption_get+0xc0>
   3562c:	460c      	mov	r4, r1
   3562e:	680e      	ldr	r6, [r1, #0]
   35630:	461f      	mov	r7, r3
   35632:	680b      	ldr	r3, [r1, #0]
   35634:	4681      	mov	r9, r0
   35636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   3563a:	600b      	str	r3, [r1, #0]
   3563c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3563e:	a802      	add	r0, sp, #8
   35640:	f840 cd04 	str.w	ip, [r0, #-4]!
   35644:	6819      	ldr	r1, [r3, #0]
   35646:	4615      	mov	r5, r2
   35648:	f8d4 b018 	ldr.w	fp, [r4, #24]
   3564c:	f7ff fa72 	bl	34b34 <rpc_ip_client_request_alloc>
   35650:	2800      	cmp	r0, #0
   35652:	d146      	bne.n	356e2 <ip_interface_socketoption_get+0xea>
   35654:	f247 0304 	movw	r3, #28676	; 0x7004
   35658:	2208      	movs	r2, #8
   3565a:	f8dd a004 	ldr.w	sl, [sp, #4]
   3565e:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   35662:	f8ca 300c 	str.w	r3, [sl, #12]
   35666:	f8ca b010 	str.w	fp, [sl, #16]
   3566a:	f88a 0009 	strb.w	r0, [sl, #9]
   3566e:	f88a 000a 	strb.w	r0, [sl, #10]
   35672:	f88a 000b 	strb.w	r0, [sl, #11]
   35676:	f88a 2008 	strb.w	r2, [sl, #8]
   3567a:	f8da 3008 	ldr.w	r3, [sl, #8]
   3567e:	f8ca 7018 	str.w	r7, [sl, #24]
   35682:	3308      	adds	r3, #8
   35684:	f8ca 5014 	str.w	r5, [sl, #20]
   35688:	f8ca 3008 	str.w	r3, [sl, #8]
   3568c:	f247 0104 	movw	r1, #28676	; 0x7004
   35690:	4650      	mov	r0, sl
   35692:	f8da 7000 	ldr.w	r7, [sl]
   35696:	f7ff fa61 	bl	34b5c <rpc_ip_client_request_send>
   3569a:	b9b8      	cbnz	r0, 356cc <ip_interface_socketoption_get+0xd4>
   3569c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   356a0:	466b      	mov	r3, sp
   356a2:	4611      	mov	r1, r2
   356a4:	4648      	mov	r0, r9
   356a6:	f005 fc81 	bl	3afac <interface_socket_wait>
   356aa:	4605      	mov	r5, r0
   356ac:	b300      	cbz	r0, 356f0 <ip_interface_socketoption_get+0xf8>
   356ae:	4638      	mov	r0, r7
   356b0:	f7ff fa72 	bl	34b98 <rpc_ip_client_data_free>
   356b4:	6026      	str	r6, [r4, #0]
   356b6:	e000      	b.n	356ba <ip_interface_socketoption_get+0xc2>
   356b8:	2523      	movs	r5, #35	; 0x23
   356ba:	4628      	mov	r0, r5
   356bc:	b002      	add	sp, #8
   356be:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   356c2:	2516      	movs	r5, #22
   356c4:	4628      	mov	r0, r5
   356c6:	b002      	add	sp, #8
   356c8:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   356cc:	f8da 0000 	ldr.w	r0, [sl]
   356d0:	b108      	cbz	r0, 356d6 <ip_interface_socketoption_get+0xde>
   356d2:	f7ff fa61 	bl	34b98 <rpc_ip_client_data_free>
   356d6:	4650      	mov	r0, sl
   356d8:	f7ff fa56 	bl	34b88 <rpc_ip_client_message_free>
   356dc:	2523      	movs	r5, #35	; 0x23
   356de:	6026      	str	r6, [r4, #0]
   356e0:	e7e5      	b.n	356ae <ip_interface_socketoption_get+0xb6>
   356e2:	f8dd a004 	ldr.w	sl, [sp, #4]
   356e6:	f1ba 0f00 	cmp.w	sl, #0
   356ea:	d1c6      	bne.n	3567a <ip_interface_socketoption_get+0x82>
   356ec:	250c      	movs	r5, #12
   356ee:	e7e1      	b.n	356b4 <ip_interface_socketoption_get+0xbc>
   356f0:	4648      	mov	r0, r9
   356f2:	f005 fccf 	bl	3b094 <interface_socket_from_handle_get>
   356f6:	b120      	cbz	r0, 35702 <ip_interface_socketoption_get+0x10a>
   356f8:	6843      	ldr	r3, [r0, #4]
   356fa:	b113      	cbz	r3, 35702 <ip_interface_socketoption_get+0x10a>
   356fc:	6045      	str	r5, [r0, #4]
   356fe:	461d      	mov	r5, r3
   35700:	e7d5      	b.n	356ae <ip_interface_socketoption_get+0xb6>
   35702:	f8df b050 	ldr.w	fp, [pc, #80]	; 35754 <ip_interface_socketoption_get+0x15c>
   35706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   35708:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   3570c:	681b      	ldr	r3, [r3, #0]
   3570e:	b1b0      	cbz	r0, 3573e <ip_interface_socketoption_get+0x146>
   35710:	6842      	ldr	r2, [r0, #4]
   35712:	429a      	cmp	r2, r3
   35714:	d811      	bhi.n	3573a <ip_interface_socketoption_get+0x142>
   35716:	6801      	ldr	r1, [r0, #0]
   35718:	b179      	cbz	r1, 3573a <ip_interface_socketoption_get+0x142>
   3571a:	980a      	ldr	r0, [sp, #40]	; 0x28
   3571c:	f00f fae3 	bl	44ce6 <memcpy>
   35720:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   35724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   35726:	685b      	ldr	r3, [r3, #4]
   35728:	6013      	str	r3, [r2, #0]
   3572a:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   3572e:	f7ff fa2b 	bl	34b88 <rpc_ip_client_message_free>
   35732:	2300      	movs	r3, #0
   35734:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   35738:	e7b9      	b.n	356ae <ip_interface_socketoption_get+0xb6>
   3573a:	2516      	movs	r5, #22
   3573c:	e7f7      	b.n	3572e <ip_interface_socketoption_get+0x136>
   3573e:	461a      	mov	r2, r3
   35740:	980a      	ldr	r0, [sp, #40]	; 0x28
   35742:	4639      	mov	r1, r7
   35744:	f00f facf 	bl	44ce6 <memcpy>
   35748:	f8da 3004 	ldr.w	r3, [sl, #4]
   3574c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3574e:	6013      	str	r3, [r2, #0]
   35750:	e7ad      	b.n	356ae <ip_interface_socketoption_get+0xb6>
   35752:	bf00      	nop
   35754:	20025970 	.word	0x20025970

00035758 <ip_interface_socketoption_send>:
   35758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3575c:	f04f 35ff 	mov.w	r5, #4294967295
   35760:	680c      	ldr	r4, [r1, #0]
   35762:	b082      	sub	sp, #8
   35764:	0266      	lsls	r6, r4, #9
   35766:	9500      	str	r5, [sp, #0]
   35768:	d44d      	bmi.n	35806 <ip_interface_socketoption_send+0xae>
   3576a:	680c      	ldr	r4, [r1, #0]
   3576c:	0225      	lsls	r5, r4, #8
   3576e:	d44a      	bmi.n	35806 <ip_interface_socketoption_send+0xae>
   35770:	680c      	ldr	r4, [r1, #0]
   35772:	01e4      	lsls	r4, r4, #7
   35774:	d447      	bmi.n	35806 <ip_interface_socketoption_send+0xae>
   35776:	680c      	ldr	r4, [r1, #0]
   35778:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   3577c:	d143      	bne.n	35806 <ip_interface_socketoption_send+0xae>
   3577e:	4688      	mov	r8, r1
   35780:	f8d1 9000 	ldr.w	r9, [r1]
   35784:	461f      	mov	r7, r3
   35786:	680b      	ldr	r3, [r1, #0]
   35788:	4605      	mov	r5, r0
   3578a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   3578e:	a802      	add	r0, sp, #8
   35790:	600b      	str	r3, [r1, #0]
   35792:	f840 4d04 	str.w	r4, [r0, #-4]!
   35796:	990b      	ldr	r1, [sp, #44]	; 0x2c
   35798:	4616      	mov	r6, r2
   3579a:	f8d8 a018 	ldr.w	sl, [r8, #24]
   3579e:	f7ff f9c9 	bl	34b34 <rpc_ip_client_request_alloc>
   357a2:	bba8      	cbnz	r0, 35810 <ip_interface_socketoption_send+0xb8>
   357a4:	f247 0303 	movw	r3, #28675	; 0x7003
   357a8:	2208      	movs	r2, #8
   357aa:	9c01      	ldr	r4, [sp, #4]
   357ac:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   357b0:	60e3      	str	r3, [r4, #12]
   357b2:	f8c4 a010 	str.w	sl, [r4, #16]
   357b6:	7260      	strb	r0, [r4, #9]
   357b8:	72a0      	strb	r0, [r4, #10]
   357ba:	72e0      	strb	r0, [r4, #11]
   357bc:	7222      	strb	r2, [r4, #8]
   357be:	68a3      	ldr	r3, [r4, #8]
   357c0:	6166      	str	r6, [r4, #20]
   357c2:	3308      	adds	r3, #8
   357c4:	60a3      	str	r3, [r4, #8]
   357c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   357c8:	61a7      	str	r7, [r4, #24]
   357ca:	b133      	cbz	r3, 357da <ip_interface_socketoption_send+0x82>
   357cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   357ce:	b123      	cbz	r3, 357da <ip_interface_socketoption_send+0x82>
   357d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   357d2:	4619      	mov	r1, r3
   357d4:	6820      	ldr	r0, [r4, #0]
   357d6:	f00f fa86 	bl	44ce6 <memcpy>
   357da:	f247 0103 	movw	r1, #28675	; 0x7003
   357de:	4620      	mov	r0, r4
   357e0:	f7ff f9bc 	bl	34b5c <rpc_ip_client_request_send>
   357e4:	4606      	mov	r6, r0
   357e6:	b9c0      	cbnz	r0, 3581a <ip_interface_socketoption_send+0xc2>
   357e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   357ec:	466b      	mov	r3, sp
   357ee:	4611      	mov	r1, r2
   357f0:	4628      	mov	r0, r5
   357f2:	f005 fbdb 	bl	3afac <interface_socket_wait>
   357f6:	4604      	mov	r4, r0
   357f8:	b1d0      	cbz	r0, 35830 <ip_interface_socketoption_send+0xd8>
   357fa:	4620      	mov	r0, r4
   357fc:	f8c8 9000 	str.w	r9, [r8]
   35800:	b002      	add	sp, #8
   35802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35806:	2423      	movs	r4, #35	; 0x23
   35808:	4620      	mov	r0, r4
   3580a:	b002      	add	sp, #8
   3580c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35810:	9c01      	ldr	r4, [sp, #4]
   35812:	2c00      	cmp	r4, #0
   35814:	d1d3      	bne.n	357be <ip_interface_socketoption_send+0x66>
   35816:	240c      	movs	r4, #12
   35818:	e7ef      	b.n	357fa <ip_interface_socketoption_send+0xa2>
   3581a:	6820      	ldr	r0, [r4, #0]
   3581c:	b108      	cbz	r0, 35822 <ip_interface_socketoption_send+0xca>
   3581e:	f7ff f9bb 	bl	34b98 <rpc_ip_client_data_free>
   35822:	4620      	mov	r0, r4
   35824:	f7ff f9b0 	bl	34b88 <rpc_ip_client_message_free>
   35828:	2423      	movs	r4, #35	; 0x23
   3582a:	f8c8 9000 	str.w	r9, [r8]
   3582e:	e7e4      	b.n	357fa <ip_interface_socketoption_send+0xa2>
   35830:	4628      	mov	r0, r5
   35832:	f005 fc2f 	bl	3b094 <interface_socket_from_handle_get>
   35836:	2800      	cmp	r0, #0
   35838:	d0df      	beq.n	357fa <ip_interface_socketoption_send+0xa2>
   3583a:	6844      	ldr	r4, [r0, #4]
   3583c:	2c00      	cmp	r4, #0
   3583e:	d0dc      	beq.n	357fa <ip_interface_socketoption_send+0xa2>
   35840:	6046      	str	r6, [r0, #4]
   35842:	e7da      	b.n	357fa <ip_interface_socketoption_send+0xa2>

00035844 <ip_interface_bind>:
   35844:	f04f 33ff 	mov.w	r3, #4294967295
   35848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3584c:	b083      	sub	sp, #12
   3584e:	9300      	str	r3, [sp, #0]
   35850:	b3b1      	cbz	r1, 358c0 <ip_interface_bind+0x7c>
   35852:	4616      	mov	r6, r2
   35854:	b3a2      	cbz	r2, 358c0 <ip_interface_bind+0x7c>
   35856:	4607      	mov	r7, r0
   35858:	4688      	mov	r8, r1
   3585a:	f005 fc1b 	bl	3b094 <interface_socket_from_handle_get>
   3585e:	4605      	mov	r5, r0
   35860:	2800      	cmp	r0, #0
   35862:	d04a      	beq.n	358fa <ip_interface_bind+0xb6>
   35864:	6803      	ldr	r3, [r0, #0]
   35866:	b29b      	uxth	r3, r3
   35868:	2b02      	cmp	r3, #2
   3586a:	d146      	bne.n	358fa <ip_interface_bind+0xb6>
   3586c:	2100      	movs	r1, #0
   3586e:	a802      	add	r0, sp, #8
   35870:	f840 1d04 	str.w	r1, [r0, #-4]!
   35874:	f8d5 9018 	ldr.w	r9, [r5, #24]
   35878:	f7ff f95c 	bl	34b34 <rpc_ip_client_request_alloc>
   3587c:	bb50      	cbnz	r0, 358d4 <ip_interface_bind+0x90>
   3587e:	f247 0305 	movw	r3, #28677	; 0x7005
   35882:	2208      	movs	r2, #8
   35884:	9c01      	ldr	r4, [sp, #4]
   35886:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   3588a:	60e3      	str	r3, [r4, #12]
   3588c:	f8c4 9010 	str.w	r9, [r4, #16]
   35890:	7260      	strb	r0, [r4, #9]
   35892:	72a0      	strb	r0, [r4, #10]
   35894:	72e0      	strb	r0, [r4, #11]
   35896:	7222      	strb	r2, [r4, #8]
   35898:	68a3      	ldr	r3, [r4, #8]
   3589a:	3304      	adds	r3, #4
   3589c:	60a3      	str	r3, [r4, #8]
   3589e:	68eb      	ldr	r3, [r5, #12]
   358a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   358a4:	4293      	cmp	r3, r2
   358a6:	d11a      	bne.n	358de <ip_interface_bind+0x9a>
   358a8:	f898 2000 	ldrb.w	r2, [r8]
   358ac:	4296      	cmp	r6, r2
   358ae:	d107      	bne.n	358c0 <ip_interface_bind+0x7c>
   358b0:	2b02      	cmp	r3, #2
   358b2:	f104 0018 	add.w	r0, r4, #24
   358b6:	d014      	beq.n	358e2 <ip_interface_bind+0x9e>
   358b8:	2b0a      	cmp	r3, #10
   358ba:	d101      	bne.n	358c0 <ip_interface_bind+0x7c>
   358bc:	2e24      	cmp	r6, #36	; 0x24
   358be:	d01e      	beq.n	358fe <ip_interface_bind+0xba>
   358c0:	2416      	movs	r4, #22
   358c2:	4620      	mov	r0, r4
   358c4:	f7f3 feca 	bl	2965c <bsd_os_errno_set>
   358c8:	f04f 34ff 	mov.w	r4, #4294967295
   358cc:	4620      	mov	r0, r4
   358ce:	b003      	add	sp, #12
   358d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   358d4:	9c01      	ldr	r4, [sp, #4]
   358d6:	2c00      	cmp	r4, #0
   358d8:	d1de      	bne.n	35898 <ip_interface_bind+0x54>
   358da:	240c      	movs	r4, #12
   358dc:	e7f1      	b.n	358c2 <ip_interface_bind+0x7e>
   358de:	242f      	movs	r4, #47	; 0x2f
   358e0:	e7ef      	b.n	358c2 <ip_interface_bind+0x7e>
   358e2:	2e10      	cmp	r6, #16
   358e4:	d1ec      	bne.n	358c0 <ip_interface_bind+0x7c>
   358e6:	2204      	movs	r2, #4
   358e8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   358ec:	f108 010c 	add.w	r1, r8, #12
   358f0:	82e2      	strh	r2, [r4, #22]
   358f2:	82a3      	strh	r3, [r4, #20]
   358f4:	f00f f9f7 	bl	44ce6 <memcpy>
   358f8:	e00a      	b.n	35910 <ip_interface_bind+0xcc>
   358fa:	2409      	movs	r4, #9
   358fc:	e7e1      	b.n	358c2 <ip_interface_bind+0x7e>
   358fe:	2210      	movs	r2, #16
   35900:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   35904:	eb08 0102 	add.w	r1, r8, r2
   35908:	82e2      	strh	r2, [r4, #22]
   3590a:	82a3      	strh	r3, [r4, #20]
   3590c:	f00f f9eb 	bl	44ce6 <memcpy>
   35910:	68a3      	ldr	r3, [r4, #8]
   35912:	8ae2      	ldrh	r2, [r4, #22]
   35914:	f247 0105 	movw	r1, #28677	; 0x7005
   35918:	4413      	add	r3, r2
   3591a:	60a3      	str	r3, [r4, #8]
   3591c:	682b      	ldr	r3, [r5, #0]
   3591e:	4620      	mov	r0, r4
   35920:	0c1b      	lsrs	r3, r3, #16
   35922:	041b      	lsls	r3, r3, #16
   35924:	f043 0303 	orr.w	r3, r3, #3
   35928:	602b      	str	r3, [r5, #0]
   3592a:	682e      	ldr	r6, [r5, #0]
   3592c:	f7ff f916 	bl	34b5c <rpc_ip_client_request_send>
   35930:	4680      	mov	r8, r0
   35932:	b978      	cbnz	r0, 35954 <ip_interface_bind+0x110>
   35934:	466b      	mov	r3, sp
   35936:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3593a:	2104      	movs	r1, #4
   3593c:	4638      	mov	r0, r7
   3593e:	f005 fb35 	bl	3afac <interface_socket_wait>
   35942:	4604      	mov	r4, r0
   35944:	b1a0      	cbz	r0, 35970 <ip_interface_bind+0x12c>
   35946:	682b      	ldr	r3, [r5, #0]
   35948:	0c1b      	lsrs	r3, r3, #16
   3594a:	041b      	lsls	r3, r3, #16
   3594c:	f043 0302 	orr.w	r3, r3, #2
   35950:	602b      	str	r3, [r5, #0]
   35952:	e7b6      	b.n	358c2 <ip_interface_bind+0x7e>
   35954:	6820      	ldr	r0, [r4, #0]
   35956:	b108      	cbz	r0, 3595c <ip_interface_bind+0x118>
   35958:	f7ff f91e 	bl	34b98 <rpc_ip_client_data_free>
   3595c:	0c36      	lsrs	r6, r6, #16
   3595e:	0436      	lsls	r6, r6, #16
   35960:	4620      	mov	r0, r4
   35962:	f046 0602 	orr.w	r6, r6, #2
   35966:	f7ff f90f 	bl	34b88 <rpc_ip_client_message_free>
   3596a:	2423      	movs	r4, #35	; 0x23
   3596c:	602e      	str	r6, [r5, #0]
   3596e:	e7a8      	b.n	358c2 <ip_interface_bind+0x7e>
   35970:	4638      	mov	r0, r7
   35972:	f005 fb8f 	bl	3b094 <interface_socket_from_handle_get>
   35976:	2800      	cmp	r0, #0
   35978:	d0a8      	beq.n	358cc <ip_interface_bind+0x88>
   3597a:	6844      	ldr	r4, [r0, #4]
   3597c:	2c00      	cmp	r4, #0
   3597e:	d0a5      	beq.n	358cc <ip_interface_bind+0x88>
   35980:	f8c0 8004 	str.w	r8, [r0, #4]
   35984:	e7df      	b.n	35946 <ip_interface_bind+0x102>
   35986:	bf00      	nop

00035988 <ip_interface_listen>:
   35988:	f04f 33ff 	mov.w	r3, #4294967295
   3598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35990:	b082      	sub	sp, #8
   35992:	4606      	mov	r6, r0
   35994:	9300      	str	r3, [sp, #0]
   35996:	f005 fb7d 	bl	3b094 <interface_socket_from_handle_get>
   3599a:	2800      	cmp	r0, #0
   3599c:	d06c      	beq.n	35a78 <ip_interface_listen+0xf0>
   3599e:	6803      	ldr	r3, [r0, #0]
   359a0:	4604      	mov	r4, r0
   359a2:	b29b      	uxth	r3, r3
   359a4:	2b04      	cmp	r3, #4
   359a6:	d003      	beq.n	359b0 <ip_interface_listen+0x28>
   359a8:	6803      	ldr	r3, [r0, #0]
   359aa:	b29b      	uxth	r3, r3
   359ac:	2b0b      	cmp	r3, #11
   359ae:	d163      	bne.n	35a78 <ip_interface_listen+0xf0>
   359b0:	2100      	movs	r1, #0
   359b2:	4a32      	ldr	r2, [pc, #200]	; (35a7c <ip_interface_listen+0xf4>)
   359b4:	4630      	mov	r0, r6
   359b6:	f005 fac1 	bl	3af3c <interface_socket_packet_handler_update>
   359ba:	4601      	mov	r1, r0
   359bc:	2800      	cmp	r0, #0
   359be:	d159      	bne.n	35a74 <ip_interface_listen+0xec>
   359c0:	a802      	add	r0, sp, #8
   359c2:	f840 1d04 	str.w	r1, [r0, #-4]!
   359c6:	69a7      	ldr	r7, [r4, #24]
   359c8:	f7ff f8b4 	bl	34b34 <rpc_ip_client_request_alloc>
   359cc:	bba0      	cbnz	r0, 35a38 <ip_interface_listen+0xb0>
   359ce:	f247 0308 	movw	r3, #28680	; 0x7008
   359d2:	2208      	movs	r2, #8
   359d4:	9d01      	ldr	r5, [sp, #4]
   359d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   359da:	60eb      	str	r3, [r5, #12]
   359dc:	612f      	str	r7, [r5, #16]
   359de:	7268      	strb	r0, [r5, #9]
   359e0:	72a8      	strb	r0, [r5, #10]
   359e2:	72e8      	strb	r0, [r5, #11]
   359e4:	722a      	strb	r2, [r5, #8]
   359e6:	68ab      	ldr	r3, [r5, #8]
   359e8:	f247 0108 	movw	r1, #28680	; 0x7008
   359ec:	3304      	adds	r3, #4
   359ee:	60ab      	str	r3, [r5, #8]
   359f0:	6823      	ldr	r3, [r4, #0]
   359f2:	4628      	mov	r0, r5
   359f4:	0c1b      	lsrs	r3, r3, #16
   359f6:	041b      	lsls	r3, r3, #16
   359f8:	f043 0306 	orr.w	r3, r3, #6
   359fc:	6023      	str	r3, [r4, #0]
   359fe:	6827      	ldr	r7, [r4, #0]
   35a00:	f7ff f8ac 	bl	34b5c <rpc_ip_client_request_send>
   35a04:	4680      	mov	r8, r0
   35a06:	b9e0      	cbnz	r0, 35a42 <ip_interface_listen+0xba>
   35a08:	466b      	mov	r3, sp
   35a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   35a0e:	2107      	movs	r1, #7
   35a10:	4630      	mov	r0, r6
   35a12:	f005 facb 	bl	3afac <interface_socket_wait>
   35a16:	4605      	mov	r5, r0
   35a18:	b308      	cbz	r0, 35a5e <ip_interface_listen+0xd6>
   35a1a:	6823      	ldr	r3, [r4, #0]
   35a1c:	0c1b      	lsrs	r3, r3, #16
   35a1e:	041b      	lsls	r3, r3, #16
   35a20:	f043 0304 	orr.w	r3, r3, #4
   35a24:	6023      	str	r3, [r4, #0]
   35a26:	4628      	mov	r0, r5
   35a28:	f7f3 fe18 	bl	2965c <bsd_os_errno_set>
   35a2c:	f04f 35ff 	mov.w	r5, #4294967295
   35a30:	4628      	mov	r0, r5
   35a32:	b002      	add	sp, #8
   35a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35a38:	9d01      	ldr	r5, [sp, #4]
   35a3a:	2d00      	cmp	r5, #0
   35a3c:	d1d3      	bne.n	359e6 <ip_interface_listen+0x5e>
   35a3e:	250c      	movs	r5, #12
   35a40:	e7f1      	b.n	35a26 <ip_interface_listen+0x9e>
   35a42:	6828      	ldr	r0, [r5, #0]
   35a44:	b108      	cbz	r0, 35a4a <ip_interface_listen+0xc2>
   35a46:	f7ff f8a7 	bl	34b98 <rpc_ip_client_data_free>
   35a4a:	0c3f      	lsrs	r7, r7, #16
   35a4c:	043f      	lsls	r7, r7, #16
   35a4e:	4628      	mov	r0, r5
   35a50:	f047 0704 	orr.w	r7, r7, #4
   35a54:	f7ff f898 	bl	34b88 <rpc_ip_client_message_free>
   35a58:	2523      	movs	r5, #35	; 0x23
   35a5a:	6027      	str	r7, [r4, #0]
   35a5c:	e7e3      	b.n	35a26 <ip_interface_listen+0x9e>
   35a5e:	4630      	mov	r0, r6
   35a60:	f005 fb18 	bl	3b094 <interface_socket_from_handle_get>
   35a64:	2800      	cmp	r0, #0
   35a66:	d0e3      	beq.n	35a30 <ip_interface_listen+0xa8>
   35a68:	6845      	ldr	r5, [r0, #4]
   35a6a:	2d00      	cmp	r5, #0
   35a6c:	d0e0      	beq.n	35a30 <ip_interface_listen+0xa8>
   35a6e:	f8c0 8004 	str.w	r8, [r0, #4]
   35a72:	e7d2      	b.n	35a1a <ip_interface_listen+0x92>
   35a74:	2523      	movs	r5, #35	; 0x23
   35a76:	e7d6      	b.n	35a26 <ip_interface_listen+0x9e>
   35a78:	2509      	movs	r5, #9
   35a7a:	e7d4      	b.n	35a26 <ip_interface_listen+0x9e>
   35a7c:	00034ba9 	.word	0x00034ba9

00035a80 <ip_interface_accept>:
   35a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35a84:	f04f 33ff 	mov.w	r3, #4294967295
   35a88:	2500      	movs	r5, #0
   35a8a:	b087      	sub	sp, #28
   35a8c:	460f      	mov	r7, r1
   35a8e:	4690      	mov	r8, r2
   35a90:	e9cd 5303 	strd	r5, r3, [sp, #12]
   35a94:	4606      	mov	r6, r0
   35a96:	f005 fafd 	bl	3b094 <interface_socket_from_handle_get>
   35a9a:	4604      	mov	r4, r0
   35a9c:	2800      	cmp	r0, #0
   35a9e:	f000 8123 	beq.w	35ce8 <ip_interface_accept+0x268>
   35aa2:	6803      	ldr	r3, [r0, #0]
   35aa4:	b29b      	uxth	r3, r3
   35aa6:	2b07      	cmp	r3, #7
   35aa8:	d10a      	bne.n	35ac0 <ip_interface_accept+0x40>
   35aaa:	6803      	ldr	r3, [r0, #0]
   35aac:	6805      	ldr	r5, [r0, #0]
   35aae:	00db      	lsls	r3, r3, #3
   35ab0:	d416      	bmi.n	35ae0 <ip_interface_accept+0x60>
   35ab2:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   35ab6:	d019      	beq.n	35aec <ip_interface_accept+0x6c>
   35ab8:	6805      	ldr	r5, [r0, #0]
   35aba:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   35abe:	d124      	bne.n	35b0a <ip_interface_accept+0x8a>
   35ac0:	f04f 0909 	mov.w	r9, #9
   35ac4:	9b03      	ldr	r3, [sp, #12]
   35ac6:	b113      	cbz	r3, 35ace <ip_interface_accept+0x4e>
   35ac8:	4628      	mov	r0, r5
   35aca:	f005 fa21 	bl	3af10 <interface_socket_free>
   35ace:	4648      	mov	r0, r9
   35ad0:	f04f 39ff 	mov.w	r9, #4294967295
   35ad4:	f7f3 fdc2 	bl	2965c <bsd_os_errno_set>
   35ad8:	4648      	mov	r0, r9
   35ada:	b007      	add	sp, #28
   35adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35ae0:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   35ae4:	d170      	bne.n	35bc8 <ip_interface_accept+0x148>
   35ae6:	f04f 0923 	mov.w	r9, #35	; 0x23
   35aea:	e7eb      	b.n	35ac4 <ip_interface_accept+0x44>
   35aec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   35af0:	ab04      	add	r3, sp, #16
   35af2:	4611      	mov	r1, r2
   35af4:	4630      	mov	r0, r6
   35af6:	f005 fa59 	bl	3afac <interface_socket_wait>
   35afa:	4681      	mov	r9, r0
   35afc:	2800      	cmp	r0, #0
   35afe:	f000 8082 	beq.w	35c06 <ip_interface_accept+0x186>
   35b02:	6825      	ldr	r5, [r4, #0]
   35b04:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   35b08:	d0dc      	beq.n	35ac4 <ip_interface_accept+0x44>
   35b0a:	f04f 30ff 	mov.w	r0, #4294967295
   35b0e:	2300      	movs	r3, #0
   35b10:	e9cd 0300 	strd	r0, r3, [sp]
   35b14:	4a78      	ldr	r2, [pc, #480]	; (35cf8 <ip_interface_accept+0x278>)
   35b16:	6921      	ldr	r1, [r4, #16]
   35b18:	a803      	add	r0, sp, #12
   35b1a:	f005 f995 	bl	3ae48 <interface_socket_allocate>
   35b1e:	9b03      	ldr	r3, [sp, #12]
   35b20:	4605      	mov	r5, r0
   35b22:	2b00      	cmp	r3, #0
   35b24:	f000 80e4 	beq.w	35cf0 <ip_interface_accept+0x270>
   35b28:	2100      	movs	r1, #0
   35b2a:	6962      	ldr	r2, [r4, #20]
   35b2c:	a806      	add	r0, sp, #24
   35b2e:	615a      	str	r2, [r3, #20]
   35b30:	68e2      	ldr	r2, [r4, #12]
   35b32:	f840 1d04 	str.w	r1, [r0, #-4]!
   35b36:	60da      	str	r2, [r3, #12]
   35b38:	6922      	ldr	r2, [r4, #16]
   35b3a:	611a      	str	r2, [r3, #16]
   35b3c:	f8d4 9018 	ldr.w	r9, [r4, #24]
   35b40:	f7fe fff8 	bl	34b34 <rpc_ip_client_request_alloc>
   35b44:	2800      	cmp	r0, #0
   35b46:	d146      	bne.n	35bd6 <ip_interface_accept+0x156>
   35b48:	f247 030c 	movw	r3, #28684	; 0x700c
   35b4c:	2108      	movs	r1, #8
   35b4e:	f8dd b014 	ldr.w	fp, [sp, #20]
   35b52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   35b56:	f8cb 300c 	str.w	r3, [fp, #12]
   35b5a:	f8cb 9010 	str.w	r9, [fp, #16]
   35b5e:	f88b 0009 	strb.w	r0, [fp, #9]
   35b62:	f88b 000a 	strb.w	r0, [fp, #10]
   35b66:	f88b 000b 	strb.w	r0, [fp, #11]
   35b6a:	f88b 1008 	strb.w	r1, [fp, #8]
   35b6e:	6823      	ldr	r3, [r4, #0]
   35b70:	f247 010c 	movw	r1, #28684	; 0x700c
   35b74:	0c1b      	lsrs	r3, r3, #16
   35b76:	041b      	lsls	r3, r3, #16
   35b78:	f043 0308 	orr.w	r3, r3, #8
   35b7c:	6023      	str	r3, [r4, #0]
   35b7e:	4658      	mov	r0, fp
   35b80:	f8d4 9000 	ldr.w	r9, [r4]
   35b84:	f7fe ffea 	bl	34b5c <rpc_ip_client_request_send>
   35b88:	4682      	mov	sl, r0
   35b8a:	bb60      	cbnz	r0, 35be6 <ip_interface_accept+0x166>
   35b8c:	6822      	ldr	r2, [r4, #0]
   35b8e:	9900      	ldr	r1, [sp, #0]
   35b90:	ab04      	add	r3, sp, #16
   35b92:	400a      	ands	r2, r1
   35b94:	6022      	str	r2, [r4, #0]
   35b96:	2109      	movs	r1, #9
   35b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
   35b9c:	4630      	mov	r0, r6
   35b9e:	f005 fa05 	bl	3afac <interface_socket_wait>
   35ba2:	4681      	mov	r9, r0
   35ba4:	2800      	cmp	r0, #0
   35ba6:	f000 808d 	beq.w	35cc4 <ip_interface_accept+0x244>
   35baa:	6823      	ldr	r3, [r4, #0]
   35bac:	9a01      	ldr	r2, [sp, #4]
   35bae:	431a      	orrs	r2, r3
   35bb0:	6022      	str	r2, [r4, #0]
   35bb2:	6823      	ldr	r3, [r4, #0]
   35bb4:	0c1b      	lsrs	r3, r3, #16
   35bb6:	041b      	lsls	r3, r3, #16
   35bb8:	f043 0307 	orr.w	r3, r3, #7
   35bbc:	6023      	str	r3, [r4, #0]
   35bbe:	6823      	ldr	r3, [r4, #0]
   35bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   35bc4:	6023      	str	r3, [r4, #0]
   35bc6:	e77d      	b.n	35ac4 <ip_interface_accept+0x44>
   35bc8:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   35bcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   35bd0:	e9cd 2300 	strd	r2, r3, [sp]
   35bd4:	e79e      	b.n	35b14 <ip_interface_accept+0x94>
   35bd6:	f8dd b014 	ldr.w	fp, [sp, #20]
   35bda:	f04f 090c 	mov.w	r9, #12
   35bde:	f1bb 0f00 	cmp.w	fp, #0
   35be2:	d1c4      	bne.n	35b6e <ip_interface_accept+0xee>
   35be4:	e76e      	b.n	35ac4 <ip_interface_accept+0x44>
   35be6:	f8db 0000 	ldr.w	r0, [fp]
   35bea:	b108      	cbz	r0, 35bf0 <ip_interface_accept+0x170>
   35bec:	f7fe ffd4 	bl	34b98 <rpc_ip_client_data_free>
   35bf0:	ea4f 4919 	mov.w	r9, r9, lsr #16
   35bf4:	4658      	mov	r0, fp
   35bf6:	ea4f 4909 	mov.w	r9, r9, lsl #16
   35bfa:	f7fe ffc5 	bl	34b88 <rpc_ip_client_message_free>
   35bfe:	f049 0307 	orr.w	r3, r9, #7
   35c02:	6023      	str	r3, [r4, #0]
   35c04:	e76f      	b.n	35ae6 <ip_interface_accept+0x66>
   35c06:	4630      	mov	r0, r6
   35c08:	f005 fa44 	bl	3b094 <interface_socket_from_handle_get>
   35c0c:	b130      	cbz	r0, 35c1c <ip_interface_accept+0x19c>
   35c0e:	f8d0 9004 	ldr.w	r9, [r0, #4]
   35c12:	f1b9 0f00 	cmp.w	r9, #0
   35c16:	d001      	beq.n	35c1c <ip_interface_accept+0x19c>
   35c18:	6045      	str	r5, [r0, #4]
   35c1a:	e772      	b.n	35b02 <ip_interface_accept+0x82>
   35c1c:	6823      	ldr	r3, [r4, #0]
   35c1e:	03d9      	lsls	r1, r3, #15
   35c20:	f53f af73 	bmi.w	35b0a <ip_interface_accept+0x8a>
   35c24:	4d35      	ldr	r5, [pc, #212]	; (35cfc <ip_interface_accept+0x27c>)
   35c26:	9903      	ldr	r1, [sp, #12]
   35c28:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   35c2c:	699b      	ldr	r3, [r3, #24]
   35c2e:	618b      	str	r3, [r1, #24]
   35c30:	b147      	cbz	r7, 35c44 <ip_interface_accept+0x1c4>
   35c32:	68cb      	ldr	r3, [r1, #12]
   35c34:	2b0a      	cmp	r3, #10
   35c36:	d028      	beq.n	35c8a <ip_interface_accept+0x20a>
   35c38:	2b02      	cmp	r3, #2
   35c3a:	d103      	bne.n	35c44 <ip_interface_accept+0x1c4>
   35c3c:	f8d8 2000 	ldr.w	r2, [r8]
   35c40:	2a10      	cmp	r2, #16
   35c42:	d036      	beq.n	35cb2 <ip_interface_accept+0x232>
   35c44:	680a      	ldr	r2, [r1, #0]
   35c46:	482e      	ldr	r0, [pc, #184]	; (35d00 <ip_interface_accept+0x280>)
   35c48:	4002      	ands	r2, r0
   35c4a:	f042 0205 	orr.w	r2, r2, #5
   35c4e:	600a      	str	r2, [r1, #0]
   35c50:	9a03      	ldr	r2, [sp, #12]
   35c52:	6811      	ldr	r1, [r2, #0]
   35c54:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   35c58:	6011      	str	r1, [r2, #0]
   35c5a:	6811      	ldr	r1, [r2, #0]
   35c5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   35c60:	6011      	str	r1, [r2, #0]
   35c62:	6823      	ldr	r3, [r4, #0]
   35c64:	4003      	ands	r3, r0
   35c66:	f043 0307 	orr.w	r3, r3, #7
   35c6a:	6023      	str	r3, [r4, #0]
   35c6c:	6823      	ldr	r3, [r4, #0]
   35c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   35c72:	6023      	str	r3, [r4, #0]
   35c74:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   35c78:	f7fe ff86 	bl	34b88 <rpc_ip_client_message_free>
   35c7c:	2300      	movs	r3, #0
   35c7e:	4648      	mov	r0, r9
   35c80:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   35c84:	b007      	add	sp, #28
   35c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35c8a:	f8d8 2000 	ldr.w	r2, [r8]
   35c8e:	2a24      	cmp	r2, #36	; 0x24
   35c90:	d1d8      	bne.n	35c44 <ip_interface_accept+0x1c4>
   35c92:	703a      	strb	r2, [r7, #0]
   35c94:	2210      	movs	r2, #16
   35c96:	607b      	str	r3, [r7, #4]
   35c98:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   35c9c:	f107 0010 	add.w	r0, r7, #16
   35ca0:	8b9b      	ldrh	r3, [r3, #28]
   35ca2:	813b      	strh	r3, [r7, #8]
   35ca4:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   35ca8:	3120      	adds	r1, #32
   35caa:	f00f f81c 	bl	44ce6 <memcpy>
   35cae:	9903      	ldr	r1, [sp, #12]
   35cb0:	e7c8      	b.n	35c44 <ip_interface_accept+0x1c4>
   35cb2:	703a      	strb	r2, [r7, #0]
   35cb4:	607b      	str	r3, [r7, #4]
   35cb6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   35cba:	f107 000c 	add.w	r0, r7, #12
   35cbe:	8b9b      	ldrh	r3, [r3, #28]
   35cc0:	2204      	movs	r2, #4
   35cc2:	e7ee      	b.n	35ca2 <ip_interface_accept+0x222>
   35cc4:	4630      	mov	r0, r6
   35cc6:	f005 f9e5 	bl	3b094 <interface_socket_from_handle_get>
   35cca:	b138      	cbz	r0, 35cdc <ip_interface_accept+0x25c>
   35ccc:	f8d0 9004 	ldr.w	r9, [r0, #4]
   35cd0:	f1b9 0f00 	cmp.w	r9, #0
   35cd4:	d002      	beq.n	35cdc <ip_interface_accept+0x25c>
   35cd6:	f8c0 a004 	str.w	sl, [r0, #4]
   35cda:	e766      	b.n	35baa <ip_interface_accept+0x12a>
   35cdc:	6823      	ldr	r3, [r4, #0]
   35cde:	9a01      	ldr	r2, [sp, #4]
   35ce0:	46a9      	mov	r9, r5
   35ce2:	4313      	orrs	r3, r2
   35ce4:	6023      	str	r3, [r4, #0]
   35ce6:	e79d      	b.n	35c24 <ip_interface_accept+0x1a4>
   35ce8:	4605      	mov	r5, r0
   35cea:	f04f 0909 	mov.w	r9, #9
   35cee:	e6e9      	b.n	35ac4 <ip_interface_accept+0x44>
   35cf0:	f04f 090c 	mov.w	r9, #12
   35cf4:	e6eb      	b.n	35ace <ip_interface_accept+0x4e>
   35cf6:	bf00      	nop
   35cf8:	00034ba9 	.word	0x00034ba9
   35cfc:	20025970 	.word	0x20025970
   35d00:	ffff0000 	.word	0xffff0000

00035d04 <ip_interface_setopt>:
   35d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35d08:	2901      	cmp	r1, #1
   35d0a:	b084      	sub	sp, #16
   35d0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   35d0e:	f040 808a 	bne.w	35e26 <ip_interface_setopt+0x122>
   35d12:	4617      	mov	r7, r2
   35d14:	461d      	mov	r5, r3
   35d16:	4680      	mov	r8, r0
   35d18:	f005 f9bc 	bl	3b094 <interface_socket_from_handle_get>
   35d1c:	4604      	mov	r4, r0
   35d1e:	2800      	cmp	r0, #0
   35d20:	f000 808d 	beq.w	35e3e <ip_interface_setopt+0x13a>
   35d24:	f1a7 0119 	sub.w	r1, r7, #25
   35d28:	290f      	cmp	r1, #15
   35d2a:	d872      	bhi.n	35e12 <ip_interface_setopt+0x10e>
   35d2c:	e8df f001 	tbb	[pc, r1]
   35d30:	7171711a 	.word	0x7171711a
   35d34:	61514071 	.word	0x61514071
   35d38:	71717171 	.word	0x71717171
   35d3c:	08717171 	.word	0x08717171
   35d40:	2e04      	cmp	r6, #4
   35d42:	d176      	bne.n	35e32 <ip_interface_setopt+0x12e>
   35d44:	2d00      	cmp	r5, #0
   35d46:	d074      	beq.n	35e32 <ip_interface_setopt+0x12e>
   35d48:	4601      	mov	r1, r0
   35d4a:	e9cd 5600 	strd	r5, r6, [sp]
   35d4e:	4640      	mov	r0, r8
   35d50:	f241 0304 	movw	r3, #4100	; 0x1004
   35d54:	2208      	movs	r2, #8
   35d56:	f7ff fcff 	bl	35758 <ip_interface_socketoption_send>
   35d5a:	bb20      	cbnz	r0, 35da6 <ip_interface_setopt+0xa2>
   35d5c:	2000      	movs	r0, #0
   35d5e:	b004      	add	sp, #16
   35d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35d64:	2d00      	cmp	r5, #0
   35d66:	d06c      	beq.n	35e42 <ip_interface_setopt+0x13e>
   35d68:	4628      	mov	r0, r5
   35d6a:	f7e7 fa77 	bl	1d25c <strlen>
   35d6e:	42b0      	cmp	r0, r6
   35d70:	d167      	bne.n	35e42 <ip_interface_setopt+0x13e>
   35d72:	6823      	ldr	r3, [r4, #0]
   35d74:	b29b      	uxth	r3, r3
   35d76:	2b02      	cmp	r3, #2
   35d78:	d161      	bne.n	35e3e <ip_interface_setopt+0x13a>
   35d7a:	4629      	mov	r1, r5
   35d7c:	68e0      	ldr	r0, [r4, #12]
   35d7e:	f002 fe4b 	bl	38a18 <pdn_interface_pdn_id_get>
   35d82:	9003      	str	r0, [sp, #12]
   35d84:	3001      	adds	r0, #1
   35d86:	bf08      	it	eq
   35d88:	2016      	moveq	r0, #22
   35d8a:	d00c      	beq.n	35da6 <ip_interface_setopt+0xa2>
   35d8c:	2204      	movs	r2, #4
   35d8e:	ab03      	add	r3, sp, #12
   35d90:	e9cd 3200 	strd	r3, r2, [sp]
   35d94:	4621      	mov	r1, r4
   35d96:	4640      	mov	r0, r8
   35d98:	f243 0310 	movw	r3, #12304	; 0x3010
   35d9c:	2208      	movs	r2, #8
   35d9e:	f7ff fcdb 	bl	35758 <ip_interface_socketoption_send>
   35da2:	2800      	cmp	r0, #0
   35da4:	d0da      	beq.n	35d5c <ip_interface_setopt+0x58>
   35da6:	f7f3 fc59 	bl	2965c <bsd_os_errno_set>
   35daa:	f04f 30ff 	mov.w	r0, #4294967295
   35dae:	e7d6      	b.n	35d5e <ip_interface_setopt+0x5a>
   35db0:	2e04      	cmp	r6, #4
   35db2:	d13e      	bne.n	35e32 <ip_interface_setopt+0x12e>
   35db4:	2d00      	cmp	r5, #0
   35db6:	d03c      	beq.n	35e32 <ip_interface_setopt+0x12e>
   35db8:	4601      	mov	r1, r0
   35dba:	e9cd 5600 	strd	r5, r6, [sp]
   35dbe:	4640      	mov	r0, r8
   35dc0:	f248 0301 	movw	r3, #32769	; 0x8001
   35dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
   35dc8:	f7ff fcc6 	bl	35758 <ip_interface_socketoption_send>
   35dcc:	2800      	cmp	r0, #0
   35dce:	d0c5      	beq.n	35d5c <ip_interface_setopt+0x58>
   35dd0:	e7e9      	b.n	35da6 <ip_interface_setopt+0xa2>
   35dd2:	2e04      	cmp	r6, #4
   35dd4:	d12d      	bne.n	35e32 <ip_interface_setopt+0x12e>
   35dd6:	b365      	cbz	r5, 35e32 <ip_interface_setopt+0x12e>
   35dd8:	4601      	mov	r1, r0
   35dda:	e9cd 5600 	strd	r5, r6, [sp]
   35dde:	4640      	mov	r0, r8
   35de0:	f244 0310 	movw	r3, #16400	; 0x4010
   35de4:	f44f 7200 	mov.w	r2, #512	; 0x200
   35de8:	f7ff fcb6 	bl	35758 <ip_interface_socketoption_send>
   35dec:	2800      	cmp	r0, #0
   35dee:	d0b5      	beq.n	35d5c <ip_interface_setopt+0x58>
   35df0:	e7d9      	b.n	35da6 <ip_interface_setopt+0xa2>
   35df2:	2e04      	cmp	r6, #4
   35df4:	d11d      	bne.n	35e32 <ip_interface_setopt+0x12e>
   35df6:	b1e5      	cbz	r5, 35e32 <ip_interface_setopt+0x12e>
   35df8:	4601      	mov	r1, r0
   35dfa:	e9cd 5600 	strd	r5, r6, [sp]
   35dfe:	4640      	mov	r0, r8
   35e00:	f246 0310 	movw	r3, #24592	; 0x6010
   35e04:	f44f 7200 	mov.w	r2, #512	; 0x200
   35e08:	f7ff fca6 	bl	35758 <ip_interface_socketoption_send>
   35e0c:	2800      	cmp	r0, #0
   35e0e:	d0a5      	beq.n	35d5c <ip_interface_setopt+0x58>
   35e10:	e7c9      	b.n	35da6 <ip_interface_setopt+0xa2>
   35e12:	9600      	str	r6, [sp, #0]
   35e14:	462b      	mov	r3, r5
   35e16:	463a      	mov	r2, r7
   35e18:	4640      	mov	r0, r8
   35e1a:	2101      	movs	r1, #1
   35e1c:	f005 f962 	bl	3b0e4 <interface_socket_setopt>
   35e20:	b004      	add	sp, #16
   35e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35e26:	202a      	movs	r0, #42	; 0x2a
   35e28:	f7f3 fc18 	bl	2965c <bsd_os_errno_set>
   35e2c:	f04f 30ff 	mov.w	r0, #4294967295
   35e30:	e795      	b.n	35d5e <ip_interface_setopt+0x5a>
   35e32:	2016      	movs	r0, #22
   35e34:	f7f3 fc12 	bl	2965c <bsd_os_errno_set>
   35e38:	f04f 30ff 	mov.w	r0, #4294967295
   35e3c:	e78f      	b.n	35d5e <ip_interface_setopt+0x5a>
   35e3e:	2009      	movs	r0, #9
   35e40:	e7b1      	b.n	35da6 <ip_interface_setopt+0xa2>
   35e42:	200e      	movs	r0, #14
   35e44:	e7af      	b.n	35da6 <ip_interface_setopt+0xa2>
   35e46:	bf00      	nop

00035e48 <ip_interface_getopt>:
   35e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35e4c:	2901      	cmp	r1, #1
   35e4e:	b082      	sub	sp, #8
   35e50:	9c08      	ldr	r4, [sp, #32]
   35e52:	d173      	bne.n	35f3c <ip_interface_getopt+0xf4>
   35e54:	4617      	mov	r7, r2
   35e56:	461e      	mov	r6, r3
   35e58:	4680      	mov	r8, r0
   35e5a:	f005 f91b 	bl	3b094 <interface_socket_from_handle_get>
   35e5e:	2800      	cmp	r0, #0
   35e60:	d072      	beq.n	35f48 <ip_interface_getopt+0x100>
   35e62:	f1a7 051e 	sub.w	r5, r7, #30
   35e66:	2d0a      	cmp	r5, #10
   35e68:	d858      	bhi.n	35f1c <ip_interface_getopt+0xd4>
   35e6a:	e8df f005 	tbb	[pc, r5]
   35e6e:	331b      	.short	0x331b
   35e70:	57575745 	.word	0x57575745
   35e74:	57575757 	.word	0x57575757
   35e78:	06          	.byte	0x06
   35e79:	00          	.byte	0x00
   35e7a:	2c00      	cmp	r4, #0
   35e7c:	d058      	beq.n	35f30 <ip_interface_getopt+0xe8>
   35e7e:	6823      	ldr	r3, [r4, #0]
   35e80:	2b04      	cmp	r3, #4
   35e82:	d155      	bne.n	35f30 <ip_interface_getopt+0xe8>
   35e84:	2e00      	cmp	r6, #0
   35e86:	d053      	beq.n	35f30 <ip_interface_getopt+0xe8>
   35e88:	4601      	mov	r1, r0
   35e8a:	e9cd 6400 	strd	r6, r4, [sp]
   35e8e:	4640      	mov	r0, r8
   35e90:	f241 0304 	movw	r3, #4100	; 0x1004
   35e94:	2208      	movs	r2, #8
   35e96:	f7ff fbaf 	bl	355f8 <ip_interface_socketoption_get>
   35e9a:	b9b0      	cbnz	r0, 35eca <ip_interface_getopt+0x82>
   35e9c:	2000      	movs	r0, #0
   35e9e:	b002      	add	sp, #8
   35ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35ea4:	2c00      	cmp	r4, #0
   35ea6:	d043      	beq.n	35f30 <ip_interface_getopt+0xe8>
   35ea8:	6823      	ldr	r3, [r4, #0]
   35eaa:	2b04      	cmp	r3, #4
   35eac:	d140      	bne.n	35f30 <ip_interface_getopt+0xe8>
   35eae:	2e00      	cmp	r6, #0
   35eb0:	d03e      	beq.n	35f30 <ip_interface_getopt+0xe8>
   35eb2:	4601      	mov	r1, r0
   35eb4:	e9cd 6400 	strd	r6, r4, [sp]
   35eb8:	4640      	mov	r0, r8
   35eba:	f248 0301 	movw	r3, #32769	; 0x8001
   35ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
   35ec2:	f7ff fb99 	bl	355f8 <ip_interface_socketoption_get>
   35ec6:	2800      	cmp	r0, #0
   35ec8:	d0e8      	beq.n	35e9c <ip_interface_getopt+0x54>
   35eca:	f7f3 fbc7 	bl	2965c <bsd_os_errno_set>
   35ece:	f04f 30ff 	mov.w	r0, #4294967295
   35ed2:	e7e4      	b.n	35e9e <ip_interface_getopt+0x56>
   35ed4:	b364      	cbz	r4, 35f30 <ip_interface_getopt+0xe8>
   35ed6:	6823      	ldr	r3, [r4, #0]
   35ed8:	2b04      	cmp	r3, #4
   35eda:	d129      	bne.n	35f30 <ip_interface_getopt+0xe8>
   35edc:	b346      	cbz	r6, 35f30 <ip_interface_getopt+0xe8>
   35ede:	4601      	mov	r1, r0
   35ee0:	e9cd 6400 	strd	r6, r4, [sp]
   35ee4:	4640      	mov	r0, r8
   35ee6:	f244 0310 	movw	r3, #16400	; 0x4010
   35eea:	f44f 7200 	mov.w	r2, #512	; 0x200
   35eee:	f7ff fb83 	bl	355f8 <ip_interface_socketoption_get>
   35ef2:	2800      	cmp	r0, #0
   35ef4:	d0d2      	beq.n	35e9c <ip_interface_getopt+0x54>
   35ef6:	e7e8      	b.n	35eca <ip_interface_getopt+0x82>
   35ef8:	b1d4      	cbz	r4, 35f30 <ip_interface_getopt+0xe8>
   35efa:	6823      	ldr	r3, [r4, #0]
   35efc:	2b04      	cmp	r3, #4
   35efe:	d117      	bne.n	35f30 <ip_interface_getopt+0xe8>
   35f00:	b1b6      	cbz	r6, 35f30 <ip_interface_getopt+0xe8>
   35f02:	4601      	mov	r1, r0
   35f04:	e9cd 6400 	strd	r6, r4, [sp]
   35f08:	4640      	mov	r0, r8
   35f0a:	f246 0310 	movw	r3, #24592	; 0x6010
   35f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
   35f12:	f7ff fb71 	bl	355f8 <ip_interface_socketoption_get>
   35f16:	2800      	cmp	r0, #0
   35f18:	d0c0      	beq.n	35e9c <ip_interface_getopt+0x54>
   35f1a:	e7d6      	b.n	35eca <ip_interface_getopt+0x82>
   35f1c:	4633      	mov	r3, r6
   35f1e:	463a      	mov	r2, r7
   35f20:	4640      	mov	r0, r8
   35f22:	2101      	movs	r1, #1
   35f24:	9408      	str	r4, [sp, #32]
   35f26:	b002      	add	sp, #8
   35f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   35f2c:	f005 b920 	b.w	3b170 <interface_socket_getopt>
   35f30:	2016      	movs	r0, #22
   35f32:	f7f3 fb93 	bl	2965c <bsd_os_errno_set>
   35f36:	f04f 30ff 	mov.w	r0, #4294967295
   35f3a:	e7b0      	b.n	35e9e <ip_interface_getopt+0x56>
   35f3c:	202a      	movs	r0, #42	; 0x2a
   35f3e:	f7f3 fb8d 	bl	2965c <bsd_os_errno_set>
   35f42:	f04f 30ff 	mov.w	r0, #4294967295
   35f46:	e7aa      	b.n	35e9e <ip_interface_getopt+0x56>
   35f48:	2009      	movs	r0, #9
   35f4a:	f7f3 fb87 	bl	2965c <bsd_os_errno_set>
   35f4e:	f04f 30ff 	mov.w	r0, #4294967295
   35f52:	e7a4      	b.n	35e9e <ip_interface_getopt+0x56>

00035f54 <ip_interface_getaddrinfo>:
   35f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35f58:	f04f 0c00 	mov.w	ip, #0
   35f5c:	2401      	movs	r4, #1
   35f5e:	4e75      	ldr	r6, [pc, #468]	; (36134 <ip_interface_getaddrinfo+0x1e0>)
   35f60:	4d75      	ldr	r5, [pc, #468]	; (36138 <ip_interface_getaddrinfo+0x1e4>)
   35f62:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 36148 <ip_interface_getaddrinfo+0x1f4>
   35f66:	4f75      	ldr	r7, [pc, #468]	; (3613c <ip_interface_getaddrinfo+0x1e8>)
   35f68:	7836      	ldrb	r6, [r6, #0]
   35f6a:	b085      	sub	sp, #20
   35f6c:	f8a5 c000 	strh.w	ip, [r5]
   35f70:	f8c8 4000 	str.w	r4, [r8]
   35f74:	603c      	str	r4, [r7, #0]
   35f76:	2e00      	cmp	r6, #0
   35f78:	d05b      	beq.n	36032 <ip_interface_getaddrinfo+0xde>
   35f7a:	9301      	str	r3, [sp, #4]
   35f7c:	4614      	mov	r4, r2
   35f7e:	460b      	mov	r3, r1
   35f80:	4606      	mov	r6, r0
   35f82:	b171      	cbz	r1, 35fa2 <ip_interface_getaddrinfo+0x4e>
   35f84:	4618      	mov	r0, r3
   35f86:	220a      	movs	r2, #10
   35f88:	4661      	mov	r1, ip
   35f8a:	f009 fee3 	bl	3fd54 <strtol>
   35f8e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   35f92:	1e42      	subs	r2, r0, #1
   35f94:	429a      	cmp	r2, r3
   35f96:	f200 8097 	bhi.w	360c8 <ip_interface_getaddrinfo+0x174>
   35f9a:	0203      	lsls	r3, r0, #8
   35f9c:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   35fa0:	8028      	strh	r0, [r5, #0]
   35fa2:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 3614c <ip_interface_getaddrinfo+0x1f8>
   35fa6:	f8da 3000 	ldr.w	r3, [sl]
   35faa:	2b00      	cmp	r3, #0
   35fac:	d145      	bne.n	3603a <ip_interface_getaddrinfo+0xe6>
   35fae:	4a64      	ldr	r2, [pc, #400]	; (36140 <ip_interface_getaddrinfo+0x1ec>)
   35fb0:	6013      	str	r3, [r2, #0]
   35fb2:	4a64      	ldr	r2, [pc, #400]	; (36144 <ip_interface_getaddrinfo+0x1f0>)
   35fb4:	6013      	str	r3, [r2, #0]
   35fb6:	2e00      	cmp	r6, #0
   35fb8:	d07a      	beq.n	360b0 <ip_interface_getaddrinfo+0x15c>
   35fba:	4630      	mov	r0, r6
   35fbc:	f7e7 f94e 	bl	1d25c <strlen>
   35fc0:	4683      	mov	fp, r0
   35fc2:	b144      	cbz	r4, 35fd6 <ip_interface_getaddrinfo+0x82>
   35fc4:	69e2      	ldr	r2, [r4, #28]
   35fc6:	b132      	cbz	r2, 35fd6 <ip_interface_getaddrinfo+0x82>
   35fc8:	6851      	ldr	r1, [r2, #4]
   35fca:	2966      	cmp	r1, #102	; 0x66
   35fcc:	d103      	bne.n	35fd6 <ip_interface_getaddrinfo+0x82>
   35fce:	6891      	ldr	r1, [r2, #8]
   35fd0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   35fd4:	d07e      	beq.n	360d4 <ip_interface_getaddrinfo+0x180>
   35fd6:	f04f 32ff 	mov.w	r2, #4294967295
   35fda:	2100      	movs	r1, #0
   35fdc:	f10d 0910 	add.w	r9, sp, #16
   35fe0:	f849 1d04 	str.w	r1, [r9, #-4]!
   35fe4:	4648      	mov	r0, r9
   35fe6:	4659      	mov	r1, fp
   35fe8:	9200      	str	r2, [sp, #0]
   35fea:	f7fe fda3 	bl	34b34 <rpc_ip_client_request_alloc>
   35fee:	9a00      	ldr	r2, [sp, #0]
   35ff0:	2800      	cmp	r0, #0
   35ff2:	d15f      	bne.n	360b4 <ip_interface_getaddrinfo+0x160>
   35ff4:	f247 010d 	movw	r1, #28685	; 0x700d
   35ff8:	f04f 0c08 	mov.w	ip, #8
   35ffc:	9d03      	ldr	r5, [sp, #12]
   35ffe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   36002:	60e9      	str	r1, [r5, #12]
   36004:	612a      	str	r2, [r5, #16]
   36006:	7268      	strb	r0, [r5, #9]
   36008:	72a8      	strb	r0, [r5, #10]
   3600a:	72e8      	strb	r0, [r5, #11]
   3600c:	f885 c008 	strb.w	ip, [r5, #8]
   36010:	2c00      	cmp	r4, #0
   36012:	d076      	beq.n	36102 <ip_interface_getaddrinfo+0x1ae>
   36014:	6862      	ldr	r2, [r4, #4]
   36016:	f022 0108 	bic.w	r1, r2, #8
   3601a:	2902      	cmp	r1, #2
   3601c:	d011      	beq.n	36042 <ip_interface_getaddrinfo+0xee>
   3601e:	2a05      	cmp	r2, #5
   36020:	d176      	bne.n	36110 <ip_interface_getaddrinfo+0x1bc>
   36022:	68a1      	ldr	r1, [r4, #8]
   36024:	2902      	cmp	r1, #2
   36026:	6039      	str	r1, [r7, #0]
   36028:	d115      	bne.n	36056 <ip_interface_getaddrinfo+0x102>
   3602a:	2102      	movs	r1, #2
   3602c:	f8c8 1000 	str.w	r1, [r8]
   36030:	e00b      	b.n	3604a <ip_interface_getaddrinfo+0xf6>
   36032:	2070      	movs	r0, #112	; 0x70
   36034:	b005      	add	sp, #20
   36036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3603a:	2073      	movs	r0, #115	; 0x73
   3603c:	b005      	add	sp, #20
   3603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36042:	68a1      	ldr	r1, [r4, #8]
   36044:	2902      	cmp	r1, #2
   36046:	6039      	str	r1, [r7, #0]
   36048:	d0ef      	beq.n	3602a <ip_interface_getaddrinfo+0xd6>
   3604a:	2a05      	cmp	r2, #5
   3604c:	d003      	beq.n	36056 <ip_interface_getaddrinfo+0x102>
   3604e:	2a0a      	cmp	r2, #10
   36050:	bf14      	ite	ne
   36052:	2201      	movne	r2, #1
   36054:	2202      	moveq	r2, #2
   36056:	61aa      	str	r2, [r5, #24]
   36058:	68e2      	ldr	r2, [r4, #12]
   3605a:	622a      	str	r2, [r5, #32]
   3605c:	68a2      	ldr	r2, [r4, #8]
   3605e:	61ea      	str	r2, [r5, #28]
   36060:	6822      	ldr	r2, [r4, #0]
   36062:	616a      	str	r2, [r5, #20]
   36064:	68aa      	ldr	r2, [r5, #8]
   36066:	3210      	adds	r2, #16
   36068:	60aa      	str	r2, [r5, #8]
   3606a:	b12e      	cbz	r6, 36078 <ip_interface_getaddrinfo+0x124>
   3606c:	6828      	ldr	r0, [r5, #0]
   3606e:	b118      	cbz	r0, 36078 <ip_interface_getaddrinfo+0x124>
   36070:	465a      	mov	r2, fp
   36072:	4631      	mov	r1, r6
   36074:	f00e fe37 	bl	44ce6 <memcpy>
   36078:	2301      	movs	r3, #1
   3607a:	f247 010d 	movw	r1, #28685	; 0x700d
   3607e:	4628      	mov	r0, r5
   36080:	f8ca 3000 	str.w	r3, [sl]
   36084:	f7fe fd6a 	bl	34b5c <rpc_ip_client_request_send>
   36088:	bb10      	cbnz	r0, 360d0 <ip_interface_getaddrinfo+0x17c>
   3608a:	f04f 33ff 	mov.w	r3, #4294967295
   3608e:	9303      	str	r3, [sp, #12]
   36090:	4649      	mov	r1, r9
   36092:	4628      	mov	r0, r5
   36094:	f7f3 fa2a 	bl	294ec <bsd_os_timedwait>
   36098:	f8da 3000 	ldr.w	r3, [sl]
   3609c:	2b01      	cmp	r3, #1
   3609e:	d0f7      	beq.n	36090 <ip_interface_getaddrinfo+0x13c>
   360a0:	4b28      	ldr	r3, [pc, #160]	; (36144 <ip_interface_getaddrinfo+0x1f0>)
   360a2:	6818      	ldr	r0, [r3, #0]
   360a4:	bb40      	cbnz	r0, 360f8 <ip_interface_getaddrinfo+0x1a4>
   360a6:	4b26      	ldr	r3, [pc, #152]	; (36140 <ip_interface_getaddrinfo+0x1ec>)
   360a8:	9a01      	ldr	r2, [sp, #4]
   360aa:	681b      	ldr	r3, [r3, #0]
   360ac:	6013      	str	r3, [r2, #0]
   360ae:	e7c1      	b.n	36034 <ip_interface_getaddrinfo+0xe0>
   360b0:	46b3      	mov	fp, r6
   360b2:	e786      	b.n	35fc2 <ip_interface_getaddrinfo+0x6e>
   360b4:	9d03      	ldr	r5, [sp, #12]
   360b6:	2d00      	cmp	r5, #0
   360b8:	d1aa      	bne.n	36010 <ip_interface_getaddrinfo+0xbc>
   360ba:	200c      	movs	r0, #12
   360bc:	2300      	movs	r3, #0
   360be:	f8ca 3000 	str.w	r3, [sl]
   360c2:	b005      	add	sp, #20
   360c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   360c8:	2016      	movs	r0, #22
   360ca:	b005      	add	sp, #20
   360cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   360d0:	2023      	movs	r0, #35	; 0x23
   360d2:	e7f3      	b.n	360bc <ip_interface_getaddrinfo+0x168>
   360d4:	f240 2002 	movw	r0, #514	; 0x202
   360d8:	68d1      	ldr	r1, [r2, #12]
   360da:	4281      	cmp	r1, r0
   360dc:	f47f af7b 	bne.w	35fd6 <ip_interface_getaddrinfo+0x82>
   360e0:	6991      	ldr	r1, [r2, #24]
   360e2:	2900      	cmp	r1, #0
   360e4:	f43f af77 	beq.w	35fd6 <ip_interface_getaddrinfo+0x82>
   360e8:	6860      	ldr	r0, [r4, #4]
   360ea:	f002 fc95 	bl	38a18 <pdn_interface_pdn_id_get>
   360ee:	1c43      	adds	r3, r0, #1
   360f0:	f43f af71 	beq.w	35fd6 <ip_interface_getaddrinfo+0x82>
   360f4:	4602      	mov	r2, r0
   360f6:	e770      	b.n	35fda <ip_interface_getaddrinfo+0x86>
   360f8:	4b12      	ldr	r3, [pc, #72]	; (36144 <ip_interface_getaddrinfo+0x1f0>)
   360fa:	6818      	ldr	r0, [r3, #0]
   360fc:	2800      	cmp	r0, #0
   360fe:	d099      	beq.n	36034 <ip_interface_getaddrinfo+0xe0>
   36100:	e7dc      	b.n	360bc <ip_interface_getaddrinfo+0x168>
   36102:	4621      	mov	r1, r4
   36104:	2210      	movs	r2, #16
   36106:	f105 0014 	add.w	r0, r5, #20
   3610a:	f00e fe0c 	bl	44d26 <memset>
   3610e:	e7a9      	b.n	36064 <ip_interface_getaddrinfo+0x110>
   36110:	202f      	movs	r0, #47	; 0x2f
   36112:	f7f3 faa3 	bl	2965c <bsd_os_errno_set>
   36116:	68aa      	ldr	r2, [r5, #8]
   36118:	3210      	adds	r2, #16
   3611a:	60aa      	str	r2, [r5, #8]
   3611c:	b916      	cbnz	r6, 36124 <ip_interface_getaddrinfo+0x1d0>
   3611e:	f04f 30ff 	mov.w	r0, #4294967295
   36122:	e7cb      	b.n	360bc <ip_interface_getaddrinfo+0x168>
   36124:	6828      	ldr	r0, [r5, #0]
   36126:	2800      	cmp	r0, #0
   36128:	d0f9      	beq.n	3611e <ip_interface_getaddrinfo+0x1ca>
   3612a:	465a      	mov	r2, fp
   3612c:	4631      	mov	r1, r6
   3612e:	f00e fdda 	bl	44ce6 <memcpy>
   36132:	e7f4      	b.n	3611e <ip_interface_getaddrinfo+0x1ca>
   36134:	2002d6b6 	.word	0x2002d6b6
   36138:	2002a5ec 	.word	0x2002a5ec
   3613c:	20025960 	.word	0x20025960
   36140:	2002596c 	.word	0x2002596c
   36144:	20025964 	.word	0x20025964
   36148:	2002595c 	.word	0x2002595c
   3614c:	20025968 	.word	0x20025968

00036150 <ip_interface_freeaddrinfo>:
   36150:	b538      	push	{r3, r4, r5, lr}
   36152:	4d0b      	ldr	r5, [pc, #44]	; (36180 <ip_interface_freeaddrinfo+0x30>)
   36154:	682b      	ldr	r3, [r5, #0]
   36156:	2b02      	cmp	r3, #2
   36158:	d000      	beq.n	3615c <ip_interface_freeaddrinfo+0xc>
   3615a:	bd38      	pop	{r3, r4, r5, pc}
   3615c:	b150      	cbz	r0, 36174 <ip_interface_freeaddrinfo+0x24>
   3615e:	4604      	mov	r4, r0
   36160:	6940      	ldr	r0, [r0, #20]
   36162:	f004 fa89 	bl	3a678 <nrf_free>
   36166:	69a0      	ldr	r0, [r4, #24]
   36168:	b108      	cbz	r0, 3616e <ip_interface_freeaddrinfo+0x1e>
   3616a:	f004 fa85 	bl	3a678 <nrf_free>
   3616e:	4620      	mov	r0, r4
   36170:	f004 fa82 	bl	3a678 <nrf_free>
   36174:	2300      	movs	r3, #0
   36176:	4a03      	ldr	r2, [pc, #12]	; (36184 <ip_interface_freeaddrinfo+0x34>)
   36178:	602b      	str	r3, [r5, #0]
   3617a:	6013      	str	r3, [r2, #0]
   3617c:	bd38      	pop	{r3, r4, r5, pc}
   3617e:	bf00      	nop
   36180:	20025968 	.word	0x20025968
   36184:	20025964 	.word	0x20025964

00036188 <rpc_ip_event_handler>:
   36188:	f248 030d 	movw	r3, #32781	; 0x800d
   3618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36190:	4299      	cmp	r1, r3
   36192:	b089      	sub	sp, #36	; 0x24
   36194:	4604      	mov	r4, r0
   36196:	d05c      	beq.n	36252 <rpc_ip_event_handler+0xca>
   36198:	f248 030f 	movw	r3, #32783	; 0x800f
   3619c:	4299      	cmp	r1, r3
   3619e:	460d      	mov	r5, r1
   361a0:	d045      	beq.n	3622e <rpc_ip_event_handler+0xa6>
   361a2:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   361a6:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   361aa:	68c0      	ldr	r0, [r0, #12]
   361ac:	d075      	beq.n	3629a <rpc_ip_event_handler+0x112>
   361ae:	0c06      	lsrs	r6, r0, #16
   361b0:	4630      	mov	r0, r6
   361b2:	f004 ff6f 	bl	3b094 <interface_socket_from_handle_get>
   361b6:	4607      	mov	r7, r0
   361b8:	2800      	cmp	r0, #0
   361ba:	d059      	beq.n	36270 <rpc_ip_event_handler+0xe8>
   361bc:	4601      	mov	r1, r0
   361be:	462b      	mov	r3, r5
   361c0:	4622      	mov	r2, r4
   361c2:	4630      	mov	r0, r6
   361c4:	f7fe fc24 	bl	34a10 <tls_rpc_ip_event_handler>
   361c8:	2800      	cmp	r0, #0
   361ca:	d04d      	beq.n	36268 <rpc_ip_event_handler+0xe0>
   361cc:	f248 0307 	movw	r3, #32775	; 0x8007
   361d0:	429d      	cmp	r5, r3
   361d2:	d866      	bhi.n	362a2 <rpc_ip_event_handler+0x11a>
   361d4:	f248 0306 	movw	r3, #32774	; 0x8006
   361d8:	429d      	cmp	r5, r3
   361da:	f080 81e7 	bcs.w	365ac <rpc_ip_event_handler+0x424>
   361de:	f248 0303 	movw	r3, #32771	; 0x8003
   361e2:	429d      	cmp	r5, r3
   361e4:	f000 81c5 	beq.w	36572 <rpc_ip_event_handler+0x3ea>
   361e8:	f200 811b 	bhi.w	36422 <rpc_ip_event_handler+0x29a>
   361ec:	f248 0301 	movw	r3, #32769	; 0x8001
   361f0:	429d      	cmp	r5, r3
   361f2:	f000 8154 	beq.w	3649e <rpc_ip_event_handler+0x316>
   361f6:	f248 0302 	movw	r3, #32770	; 0x8002
   361fa:	429d      	cmp	r5, r3
   361fc:	d138      	bne.n	36270 <rpc_ip_event_handler+0xe8>
   361fe:	683b      	ldr	r3, [r7, #0]
   36200:	0098      	lsls	r0, r3, #2
   36202:	d531      	bpl.n	36268 <rpc_ip_event_handler+0xe0>
   36204:	683b      	ldr	r3, [r7, #0]
   36206:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   3620a:	603b      	str	r3, [r7, #0]
   3620c:	6963      	ldr	r3, [r4, #20]
   3620e:	2b00      	cmp	r3, #0
   36210:	f000 81ea 	beq.w	365e8 <rpc_ip_event_handler+0x460>
   36214:	2b10      	cmp	r3, #16
   36216:	bf8e      	itee	hi
   36218:	232d      	movhi	r3, #45	; 0x2d
   3621a:	4ab9      	ldrls	r2, [pc, #740]	; (36500 <rpc_ip_event_handler+0x378>)
   3621c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   36220:	607b      	str	r3, [r7, #4]
   36222:	683b      	ldr	r3, [r7, #0]
   36224:	2000      	movs	r0, #0
   36226:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   3622a:	603b      	str	r3, [r7, #0]
   3622c:	e00e      	b.n	3624c <rpc_ip_event_handler+0xc4>
   3622e:	6943      	ldr	r3, [r0, #20]
   36230:	2001      	movs	r0, #1
   36232:	2b10      	cmp	r3, #16
   36234:	49b3      	ldr	r1, [pc, #716]	; (36504 <rpc_ip_event_handler+0x37c>)
   36236:	bf88      	it	hi
   36238:	222d      	movhi	r2, #45	; 0x2d
   3623a:	7008      	strb	r0, [r1, #0]
   3623c:	f04f 0000 	mov.w	r0, #0
   36240:	bf9c      	itt	ls
   36242:	4aaf      	ldrls	r2, [pc, #700]	; (36500 <rpc_ip_event_handler+0x378>)
   36244:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   36248:	4baf      	ldr	r3, [pc, #700]	; (36508 <rpc_ip_event_handler+0x380>)
   3624a:	601a      	str	r2, [r3, #0]
   3624c:	b009      	add	sp, #36	; 0x24
   3624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36252:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 3651c <rpc_ip_event_handler+0x394>
   36256:	6807      	ldr	r7, [r0, #0]
   36258:	f8da 2000 	ldr.w	r2, [sl]
   3625c:	2a01      	cmp	r2, #1
   3625e:	d00b      	beq.n	36278 <rpc_ip_event_handler+0xf0>
   36260:	b117      	cbz	r7, 36268 <rpc_ip_event_handler+0xe0>
   36262:	4638      	mov	r0, r7
   36264:	f7fe fc98 	bl	34b98 <rpc_ip_client_data_free>
   36268:	2000      	movs	r0, #0
   3626a:	b009      	add	sp, #36	; 0x24
   3626c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36270:	6820      	ldr	r0, [r4, #0]
   36272:	2800      	cmp	r0, #0
   36274:	d1f6      	bne.n	36264 <rpc_ip_event_handler+0xdc>
   36276:	e7f7      	b.n	36268 <rpc_ip_event_handler+0xe0>
   36278:	6942      	ldr	r2, [r0, #20]
   3627a:	2a00      	cmp	r2, #0
   3627c:	d045      	beq.n	3630a <rpc_ip_event_handler+0x182>
   3627e:	2a10      	cmp	r2, #16
   36280:	bf8e      	itee	hi
   36282:	222d      	movhi	r2, #45	; 0x2d
   36284:	499e      	ldrls	r1, [pc, #632]	; (36500 <rpc_ip_event_handler+0x378>)
   36286:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   3628a:	49a0      	ldr	r1, [pc, #640]	; (3650c <rpc_ip_event_handler+0x384>)
   3628c:	600a      	str	r2, [r1, #0]
   3628e:	2202      	movs	r2, #2
   36290:	f8ca 2000 	str.w	r2, [sl]
   36294:	2f00      	cmp	r7, #0
   36296:	d1e4      	bne.n	36262 <rpc_ip_event_handler+0xda>
   36298:	e7e6      	b.n	36268 <rpc_ip_event_handler+0xe0>
   3629a:	f004 fea9 	bl	3aff0 <interface_from_internal_id_search>
   3629e:	4606      	mov	r6, r0
   362a0:	e786      	b.n	361b0 <rpc_ip_event_handler+0x28>
   362a2:	f248 030c 	movw	r3, #32780	; 0x800c
   362a6:	429d      	cmp	r5, r3
   362a8:	f000 813c 	beq.w	36524 <rpc_ip_event_handler+0x39c>
   362ac:	f240 80d5 	bls.w	3645a <rpc_ip_event_handler+0x2d2>
   362b0:	f249 0302 	movw	r3, #36866	; 0x9002
   362b4:	429d      	cmp	r5, r3
   362b6:	f000 811d 	beq.w	364f4 <rpc_ip_event_handler+0x36c>
   362ba:	f249 0303 	movw	r3, #36867	; 0x9003
   362be:	429d      	cmp	r5, r3
   362c0:	f000 80f9 	beq.w	364b6 <rpc_ip_event_handler+0x32e>
   362c4:	f249 0301 	movw	r3, #36865	; 0x9001
   362c8:	429d      	cmp	r5, r3
   362ca:	d1d1      	bne.n	36270 <rpc_ip_event_handler+0xe8>
   362cc:	683d      	ldr	r5, [r7, #0]
   362ce:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   362d2:	f000 8184 	beq.w	365de <rpc_ip_event_handler+0x456>
   362d6:	68a3      	ldr	r3, [r4, #8]
   362d8:	2b04      	cmp	r3, #4
   362da:	f200 81af 	bhi.w	3663c <rpc_ip_event_handler+0x4b4>
   362de:	2500      	movs	r5, #0
   362e0:	462e      	mov	r6, r5
   362e2:	6821      	ldr	r1, [r4, #0]
   362e4:	6862      	ldr	r2, [r4, #4]
   362e6:	e9cd 6506 	strd	r6, r5, [sp, #24]
   362ea:	e9cd 1204 	strd	r1, r2, [sp, #16]
   362ee:	69f8      	ldr	r0, [r7, #28]
   362f0:	a904      	add	r1, sp, #16
   362f2:	6803      	ldr	r3, [r0, #0]
   362f4:	685b      	ldr	r3, [r3, #4]
   362f6:	4798      	blx	r3
   362f8:	3001      	adds	r0, #1
   362fa:	f000 818e 	beq.w	3661a <rpc_ip_event_handler+0x492>
   362fe:	683b      	ldr	r3, [r7, #0]
   36300:	2000      	movs	r0, #0
   36302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   36306:	603b      	str	r3, [r7, #0]
   36308:	e7a0      	b.n	3624c <rpc_ip_event_handler+0xc4>
   3630a:	6985      	ldr	r5, [r0, #24]
   3630c:	016b      	lsls	r3, r5, #5
   3630e:	4618      	mov	r0, r3
   36310:	9303      	str	r3, [sp, #12]
   36312:	f004 f9a7 	bl	3a664 <nrf_malloc>
   36316:	9002      	str	r0, [sp, #8]
   36318:	2800      	cmp	r0, #0
   3631a:	d078      	beq.n	3640e <rpc_ip_event_handler+0x286>
   3631c:	00ee      	lsls	r6, r5, #3
   3631e:	1970      	adds	r0, r6, r5
   36320:	0080      	lsls	r0, r0, #2
   36322:	f004 f99f 	bl	3a664 <nrf_malloc>
   36326:	2800      	cmp	r0, #0
   36328:	d073      	beq.n	36412 <rpc_ip_event_handler+0x28a>
   3632a:	2d00      	cmp	r5, #0
   3632c:	d074      	beq.n	36418 <rpc_ip_event_handler+0x290>
   3632e:	3610      	adds	r6, #16
   36330:	1983      	adds	r3, r0, r6
   36332:	9301      	str	r3, [sp, #4]
   36334:	9b02      	ldr	r3, [sp, #8]
   36336:	2204      	movs	r2, #4
   36338:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 36520 <rpc_ip_event_handler+0x398>
   3633c:	f100 0810 	add.w	r8, r0, #16
   36340:	f103 0520 	add.w	r5, r3, #32
   36344:	e013      	b.n	3636e <rpc_ip_event_handler+0x1e6>
   36346:	464a      	mov	r2, r9
   36348:	f00e fccd 	bl	44ce6 <memcpy>
   3634c:	2100      	movs	r1, #0
   3634e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   36352:	f108 0808 	add.w	r8, r8, #8
   36356:	eb09 0206 	add.w	r2, r9, r6
   3635a:	f803 1009 	strb.w	r1, [r3, r9]
   3635e:	9b01      	ldr	r3, [sp, #4]
   36360:	f845 5c04 	str.w	r5, [r5, #-4]
   36364:	4598      	cmp	r8, r3
   36366:	f105 0520 	add.w	r5, r5, #32
   3636a:	f000 8090 	beq.w	3648e <rpc_ip_event_handler+0x306>
   3636e:	58bb      	ldr	r3, [r7, r2]
   36370:	18b9      	adds	r1, r7, r2
   36372:	f845 3c20 	str.w	r3, [r5, #-32]
   36376:	684b      	ldr	r3, [r1, #4]
   36378:	f8db 0000 	ldr.w	r0, [fp]
   3637c:	2b02      	cmp	r3, #2
   3637e:	bf14      	ite	ne
   36380:	2602      	movne	r6, #2
   36382:	260a      	moveq	r6, #10
   36384:	4b62      	ldr	r3, [pc, #392]	; (36510 <rpc_ip_event_handler+0x388>)
   36386:	e945 6007 	strd	r6, r0, [r5, #-28]
   3638a:	681b      	ldr	r3, [r3, #0]
   3638c:	f102 0614 	add.w	r6, r2, #20
   36390:	f845 3c14 	str.w	r3, [r5, #-20]
   36394:	8a08      	ldrh	r0, [r1, #16]
   36396:	f1a8 0310 	sub.w	r3, r8, #16
   3639a:	f845 0c10 	str.w	r0, [r5, #-16]
   3639e:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   363a2:	f845 3c0c 	str.w	r3, [r5, #-12]
   363a6:	4b5b      	ldr	r3, [pc, #364]	; (36514 <rpc_ip_event_handler+0x38c>)
   363a8:	2804      	cmp	r0, #4
   363aa:	eb07 0106 	add.w	r1, r7, r6
   363ae:	881b      	ldrh	r3, [r3, #0]
   363b0:	d01e      	beq.n	363f0 <rpc_ip_event_handler+0x268>
   363b2:	220a      	movs	r2, #10
   363b4:	f848 2c0c 	str.w	r2, [r8, #-12]
   363b8:	f04f 0224 	mov.w	r2, #36	; 0x24
   363bc:	f828 3c08 	strh.w	r3, [r8, #-8]
   363c0:	f808 2c10 	strb.w	r2, [r8, #-16]
   363c4:	f855 2c10 	ldr.w	r2, [r5, #-16]
   363c8:	4640      	mov	r0, r8
   363ca:	f00e fc8c 	bl	44ce6 <memcpy>
   363ce:	f855 3c10 	ldr.w	r3, [r5, #-16]
   363d2:	f109 0001 	add.w	r0, r9, #1
   363d6:	441e      	add	r6, r3
   363d8:	f004 f944 	bl	3a664 <nrf_malloc>
   363dc:	19b9      	adds	r1, r7, r6
   363de:	eb09 0206 	add.w	r2, r9, r6
   363e2:	f845 0c08 	str.w	r0, [r5, #-8]
   363e6:	2800      	cmp	r0, #0
   363e8:	d1ad      	bne.n	36346 <rpc_ip_event_handler+0x1be>
   363ea:	f108 0808 	add.w	r8, r8, #8
   363ee:	e7b6      	b.n	3635e <rpc_ip_event_handler+0x1d6>
   363f0:	2210      	movs	r2, #16
   363f2:	2002      	movs	r0, #2
   363f4:	f828 3c08 	strh.w	r3, [r8, #-8]
   363f8:	f848 0c0c 	str.w	r0, [r8, #-12]
   363fc:	f808 2c10 	strb.w	r2, [r8, #-16]
   36400:	f855 2c10 	ldr.w	r2, [r5, #-16]
   36404:	f1a8 0004 	sub.w	r0, r8, #4
   36408:	f00e fc6d 	bl	44ce6 <memcpy>
   3640c:	e7df      	b.n	363ce <rpc_ip_event_handler+0x246>
   3640e:	f004 f933 	bl	3a678 <nrf_free>
   36412:	210c      	movs	r1, #12
   36414:	4a3d      	ldr	r2, [pc, #244]	; (3650c <rpc_ip_event_handler+0x384>)
   36416:	6011      	str	r1, [r2, #0]
   36418:	9b02      	ldr	r3, [sp, #8]
   3641a:	4a3f      	ldr	r2, [pc, #252]	; (36518 <rpc_ip_event_handler+0x390>)
   3641c:	6827      	ldr	r7, [r4, #0]
   3641e:	6013      	str	r3, [r2, #0]
   36420:	e735      	b.n	3628e <rpc_ip_event_handler+0x106>
   36422:	f248 0304 	movw	r3, #32772	; 0x8004
   36426:	429d      	cmp	r5, r3
   36428:	f000 808f 	beq.w	3654a <rpc_ip_event_handler+0x3c2>
   3642c:	f248 0305 	movw	r3, #32773	; 0x8005
   36430:	429d      	cmp	r5, r3
   36432:	f47f af1d 	bne.w	36270 <rpc_ip_event_handler+0xe8>
   36436:	683b      	ldr	r3, [r7, #0]
   36438:	b29b      	uxth	r3, r3
   3643a:	2b03      	cmp	r3, #3
   3643c:	f47f af14 	bne.w	36268 <rpc_ip_event_handler+0xe0>
   36440:	6963      	ldr	r3, [r4, #20]
   36442:	2b00      	cmp	r3, #0
   36444:	f000 80eb 	beq.w	3661e <rpc_ip_event_handler+0x496>
   36448:	2b10      	cmp	r3, #16
   3644a:	f200 80bd 	bhi.w	365c8 <rpc_ip_event_handler+0x440>
   3644e:	4a2c      	ldr	r2, [pc, #176]	; (36500 <rpc_ip_event_handler+0x378>)
   36450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   36454:	607b      	str	r3, [r7, #4]
   36456:	2000      	movs	r0, #0
   36458:	e6f8      	b.n	3624c <rpc_ip_event_handler+0xc4>
   3645a:	f248 0308 	movw	r3, #32776	; 0x8008
   3645e:	429d      	cmp	r5, r3
   36460:	f000 8094 	beq.w	3658c <rpc_ip_event_handler+0x404>
   36464:	f248 0309 	movw	r3, #32777	; 0x8009
   36468:	429d      	cmp	r5, r3
   3646a:	f47f af01 	bne.w	36270 <rpc_ip_event_handler+0xe8>
   3646e:	683b      	ldr	r3, [r7, #0]
   36470:	b29b      	uxth	r3, r3
   36472:	2b0d      	cmp	r3, #13
   36474:	f47f aef8 	bne.w	36268 <rpc_ip_event_handler+0xe0>
   36478:	6960      	ldr	r0, [r4, #20]
   3647a:	2800      	cmp	r0, #0
   3647c:	f000 80d7 	beq.w	3662e <rpc_ip_event_handler+0x4a6>
   36480:	2810      	cmp	r0, #16
   36482:	f200 80a1 	bhi.w	365c8 <rpc_ip_event_handler+0x440>
   36486:	4b1e      	ldr	r3, [pc, #120]	; (36500 <rpc_ip_event_handler+0x378>)
   36488:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   3648c:	e7e2      	b.n	36454 <rpc_ip_event_handler+0x2cc>
   3648e:	2100      	movs	r1, #0
   36490:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   36494:	4403      	add	r3, r0
   36496:	f843 1c04 	str.w	r1, [r3, #-4]
   3649a:	4603      	mov	r3, r0
   3649c:	e7bd      	b.n	3641a <rpc_ip_event_handler+0x292>
   3649e:	683b      	ldr	r3, [r7, #0]
   364a0:	2b01      	cmp	r3, #1
   364a2:	f47f aee1 	bne.w	36268 <rpc_ip_event_handler+0xe0>
   364a6:	6960      	ldr	r0, [r4, #20]
   364a8:	2800      	cmp	r0, #0
   364aa:	d1e9      	bne.n	36480 <rpc_ip_event_handler+0x2f8>
   364ac:	2302      	movs	r3, #2
   364ae:	603b      	str	r3, [r7, #0]
   364b0:	69a3      	ldr	r3, [r4, #24]
   364b2:	61bb      	str	r3, [r7, #24]
   364b4:	e6ca      	b.n	3624c <rpc_ip_event_handler+0xc4>
   364b6:	683b      	ldr	r3, [r7, #0]
   364b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   364bc:	603b      	str	r3, [r7, #0]
   364be:	683b      	ldr	r3, [r7, #0]
   364c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   364c4:	603b      	str	r3, [r7, #0]
   364c6:	683b      	ldr	r3, [r7, #0]
   364c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   364cc:	603b      	str	r3, [r7, #0]
   364ce:	683b      	ldr	r3, [r7, #0]
   364d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   364d4:	603b      	str	r3, [r7, #0]
   364d6:	6923      	ldr	r3, [r4, #16]
   364d8:	2b6c      	cmp	r3, #108	; 0x6c
   364da:	d077      	beq.n	365cc <rpc_ip_event_handler+0x444>
   364dc:	2b10      	cmp	r3, #16
   364de:	bf8c      	ite	hi
   364e0:	232d      	movhi	r3, #45	; 0x2d
   364e2:	4a07      	ldrls	r2, [pc, #28]	; (36500 <rpc_ip_event_handler+0x378>)
   364e4:	f04f 0000 	mov.w	r0, #0
   364e8:	bf98      	it	ls
   364ea:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   364ee:	607b      	str	r3, [r7, #4]
   364f0:	60bb      	str	r3, [r7, #8]
   364f2:	e6ab      	b.n	3624c <rpc_ip_event_handler+0xc4>
   364f4:	683b      	ldr	r3, [r7, #0]
   364f6:	b29b      	uxth	r3, r3
   364f8:	2b07      	cmp	r3, #7
   364fa:	f47f aeb5 	bne.w	36268 <rpc_ip_event_handler+0xe0>
   364fe:	e6fe      	b.n	362fe <rpc_ip_event_handler+0x176>
   36500:	00046f84 	.word	0x00046f84
   36504:	2002d6b7 	.word	0x2002d6b7
   36508:	20025994 	.word	0x20025994
   3650c:	20025964 	.word	0x20025964
   36510:	2002595c 	.word	0x2002595c
   36514:	2002a5ec 	.word	0x2002a5ec
   36518:	2002596c 	.word	0x2002596c
   3651c:	20025968 	.word	0x20025968
   36520:	20025960 	.word	0x20025960
   36524:	683b      	ldr	r3, [r7, #0]
   36526:	b29b      	uxth	r3, r3
   36528:	2b08      	cmp	r3, #8
   3652a:	f47f ae9d 	bne.w	36268 <rpc_ip_event_handler+0xe0>
   3652e:	6963      	ldr	r3, [r4, #20]
   36530:	2b00      	cmp	r3, #0
   36532:	d189      	bne.n	36448 <rpc_ip_event_handler+0x2c0>
   36534:	4b5e      	ldr	r3, [pc, #376]	; (366b0 <rpc_ip_event_handler+0x528>)
   36536:	2001      	movs	r0, #1
   36538:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   3653c:	683b      	ldr	r3, [r7, #0]
   3653e:	0c1b      	lsrs	r3, r3, #16
   36540:	041b      	lsls	r3, r3, #16
   36542:	f043 0309 	orr.w	r3, r3, #9
   36546:	603b      	str	r3, [r7, #0]
   36548:	e680      	b.n	3624c <rpc_ip_event_handler+0xc4>
   3654a:	683b      	ldr	r3, [r7, #0]
   3654c:	01db      	lsls	r3, r3, #7
   3654e:	f57f ae8b 	bpl.w	36268 <rpc_ip_event_handler+0xe0>
   36552:	6963      	ldr	r3, [r4, #20]
   36554:	2b00      	cmp	r3, #0
   36556:	f47f af77 	bne.w	36448 <rpc_ip_event_handler+0x2c0>
   3655a:	6823      	ldr	r3, [r4, #0]
   3655c:	2b00      	cmp	r3, #0
   3655e:	d071      	beq.n	36644 <rpc_ip_event_handler+0x4bc>
   36560:	2001      	movs	r0, #1
   36562:	4b53      	ldr	r3, [pc, #332]	; (366b0 <rpc_ip_event_handler+0x528>)
   36564:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   36568:	683b      	ldr	r3, [r7, #0]
   3656a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   3656e:	603b      	str	r3, [r7, #0]
   36570:	e66c      	b.n	3624c <rpc_ip_event_handler+0xc4>
   36572:	683b      	ldr	r3, [r7, #0]
   36574:	025a      	lsls	r2, r3, #9
   36576:	f57f ae77 	bpl.w	36268 <rpc_ip_event_handler+0xe0>
   3657a:	6960      	ldr	r0, [r4, #20]
   3657c:	2800      	cmp	r0, #0
   3657e:	f47f af7f 	bne.w	36480 <rpc_ip_event_handler+0x2f8>
   36582:	683b      	ldr	r3, [r7, #0]
   36584:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   36588:	603b      	str	r3, [r7, #0]
   3658a:	e65f      	b.n	3624c <rpc_ip_event_handler+0xc4>
   3658c:	683b      	ldr	r3, [r7, #0]
   3658e:	b29b      	uxth	r3, r3
   36590:	2b06      	cmp	r3, #6
   36592:	f47f ae69 	bne.w	36268 <rpc_ip_event_handler+0xe0>
   36596:	6960      	ldr	r0, [r4, #20]
   36598:	2800      	cmp	r0, #0
   3659a:	f47f af71 	bne.w	36480 <rpc_ip_event_handler+0x2f8>
   3659e:	683b      	ldr	r3, [r7, #0]
   365a0:	0c1b      	lsrs	r3, r3, #16
   365a2:	041b      	lsls	r3, r3, #16
   365a4:	f043 0307 	orr.w	r3, r3, #7
   365a8:	603b      	str	r3, [r7, #0]
   365aa:	e64f      	b.n	3624c <rpc_ip_event_handler+0xc4>
   365ac:	683b      	ldr	r3, [r7, #0]
   365ae:	0299      	lsls	r1, r3, #10
   365b0:	f57f ae5a 	bpl.w	36268 <rpc_ip_event_handler+0xe0>
   365b4:	6963      	ldr	r3, [r4, #20]
   365b6:	b33b      	cbz	r3, 36608 <rpc_ip_event_handler+0x480>
   365b8:	2b6b      	cmp	r3, #107	; 0x6b
   365ba:	f47f ae2b 	bne.w	36214 <rpc_ip_event_handler+0x8c>
   365be:	693b      	ldr	r3, [r7, #16]
   365c0:	2b01      	cmp	r3, #1
   365c2:	d041      	beq.n	36648 <rpc_ip_event_handler+0x4c0>
   365c4:	230c      	movs	r3, #12
   365c6:	e62b      	b.n	36220 <rpc_ip_event_handler+0x98>
   365c8:	232d      	movs	r3, #45	; 0x2d
   365ca:	e743      	b.n	36454 <rpc_ip_event_handler+0x2cc>
   365cc:	2239      	movs	r2, #57	; 0x39
   365ce:	683b      	ldr	r3, [r7, #0]
   365d0:	2000      	movs	r0, #0
   365d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   365d6:	603b      	str	r3, [r7, #0]
   365d8:	607a      	str	r2, [r7, #4]
   365da:	60ba      	str	r2, [r7, #8]
   365dc:	e636      	b.n	3624c <rpc_ip_event_handler+0xc4>
   365de:	6820      	ldr	r0, [r4, #0]
   365e0:	f7fe fada 	bl	34b98 <rpc_ip_client_data_free>
   365e4:	4628      	mov	r0, r5
   365e6:	e631      	b.n	3624c <rpc_ip_event_handler+0xc4>
   365e8:	683b      	ldr	r3, [r7, #0]
   365ea:	2000      	movs	r0, #0
   365ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   365f0:	603b      	str	r3, [r7, #0]
   365f2:	683b      	ldr	r3, [r7, #0]
   365f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   365f8:	603b      	str	r3, [r7, #0]
   365fa:	683b      	ldr	r3, [r7, #0]
   365fc:	0c1b      	lsrs	r3, r3, #16
   365fe:	041b      	lsls	r3, r3, #16
   36600:	f043 0305 	orr.w	r3, r3, #5
   36604:	603b      	str	r3, [r7, #0]
   36606:	e621      	b.n	3624c <rpc_ip_event_handler+0xc4>
   36608:	683b      	ldr	r3, [r7, #0]
   3660a:	4a29      	ldr	r2, [pc, #164]	; (366b0 <rpc_ip_event_handler+0x528>)
   3660c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   36610:	603b      	str	r3, [r7, #0]
   36612:	2001      	movs	r0, #1
   36614:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   36618:	e618      	b.n	3624c <rpc_ip_event_handler+0xc4>
   3661a:	2002      	movs	r0, #2
   3661c:	e616      	b.n	3624c <rpc_ip_event_handler+0xc4>
   3661e:	683b      	ldr	r3, [r7, #0]
   36620:	2000      	movs	r0, #0
   36622:	0c1b      	lsrs	r3, r3, #16
   36624:	041b      	lsls	r3, r3, #16
   36626:	f043 0304 	orr.w	r3, r3, #4
   3662a:	603b      	str	r3, [r7, #0]
   3662c:	e60e      	b.n	3624c <rpc_ip_event_handler+0xc4>
   3662e:	683b      	ldr	r3, [r7, #0]
   36630:	0c1b      	lsrs	r3, r3, #16
   36632:	041b      	lsls	r3, r3, #16
   36634:	f043 030e 	orr.w	r3, r3, #14
   36638:	603b      	str	r3, [r7, #0]
   3663a:	e607      	b.n	3624c <rpc_ip_event_handler+0xc4>
   3663c:	8a65      	ldrh	r5, [r4, #18]
   3663e:	b95d      	cbnz	r5, 36658 <rpc_ip_event_handler+0x4d0>
   36640:	462e      	mov	r6, r5
   36642:	e64e      	b.n	362e2 <rpc_ip_event_handler+0x15a>
   36644:	2000      	movs	r0, #0
   36646:	e78f      	b.n	36568 <rpc_ip_event_handler+0x3e0>
   36648:	220c      	movs	r2, #12
   3664a:	683b      	ldr	r3, [r7, #0]
   3664c:	2000      	movs	r0, #0
   3664e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   36652:	603b      	str	r3, [r7, #0]
   36654:	607a      	str	r2, [r7, #4]
   36656:	e5f9      	b.n	3624c <rpc_ip_event_handler+0xc4>
   36658:	2024      	movs	r0, #36	; 0x24
   3665a:	f004 f803 	bl	3a664 <nrf_malloc>
   3665e:	4606      	mov	r6, r0
   36660:	2800      	cmp	r0, #0
   36662:	d0da      	beq.n	3661a <rpc_ip_event_handler+0x492>
   36664:	8a62      	ldrh	r2, [r4, #18]
   36666:	2a10      	cmp	r2, #16
   36668:	d009      	beq.n	3667e <rpc_ip_event_handler+0x4f6>
   3666a:	2a04      	cmp	r2, #4
   3666c:	d013      	beq.n	36696 <rpc_ip_event_handler+0x50e>
   3666e:	6820      	ldr	r0, [r4, #0]
   36670:	f7fe fa92 	bl	34b98 <rpc_ip_client_data_free>
   36674:	4630      	mov	r0, r6
   36676:	f003 ffff 	bl	3a678 <nrf_free>
   3667a:	2000      	movs	r0, #0
   3667c:	e5e6      	b.n	3624c <rpc_ip_event_handler+0xc4>
   3667e:	230a      	movs	r3, #10
   36680:	2524      	movs	r5, #36	; 0x24
   36682:	6043      	str	r3, [r0, #4]
   36684:	7005      	strb	r5, [r0, #0]
   36686:	8a23      	ldrh	r3, [r4, #16]
   36688:	f104 0114 	add.w	r1, r4, #20
   3668c:	8103      	strh	r3, [r0, #8]
   3668e:	3010      	adds	r0, #16
   36690:	f00e fb29 	bl	44ce6 <memcpy>
   36694:	e625      	b.n	362e2 <rpc_ip_event_handler+0x15a>
   36696:	2302      	movs	r3, #2
   36698:	2510      	movs	r5, #16
   3669a:	6043      	str	r3, [r0, #4]
   3669c:	7005      	strb	r5, [r0, #0]
   3669e:	8a23      	ldrh	r3, [r4, #16]
   366a0:	f104 0114 	add.w	r1, r4, #20
   366a4:	8103      	strh	r3, [r0, #8]
   366a6:	300c      	adds	r0, #12
   366a8:	f00e fb1d 	bl	44ce6 <memcpy>
   366ac:	e619      	b.n	362e2 <rpc_ip_event_handler+0x15a>
   366ae:	bf00      	nop
   366b0:	20025970 	.word	0x20025970

000366b4 <rpc_handle_ctrl_message>:
   366b4:	2902      	cmp	r1, #2
   366b6:	b510      	push	{r4, lr}
   366b8:	4604      	mov	r4, r0
   366ba:	d00c      	beq.n	366d6 <rpc_handle_ctrl_message+0x22>
   366bc:	2904      	cmp	r1, #4
   366be:	d008      	beq.n	366d2 <rpc_handle_ctrl_message+0x1e>
   366c0:	2901      	cmp	r1, #1
   366c2:	d006      	beq.n	366d2 <rpc_handle_ctrl_message+0x1e>
   366c4:	6880      	ldr	r0, [r0, #8]
   366c6:	b108      	cbz	r0, 366cc <rpc_handle_ctrl_message+0x18>
   366c8:	f7fc fcda 	bl	33080 <rpc_transport_data_free>
   366cc:	4620      	mov	r0, r4
   366ce:	f7fc fcd5 	bl	3307c <rpc_transport_rpc_free>
   366d2:	2000      	movs	r0, #0
   366d4:	bd10      	pop	{r4, pc}
   366d6:	6880      	ldr	r0, [r0, #8]
   366d8:	2800      	cmp	r0, #0
   366da:	d0fa      	beq.n	366d2 <rpc_handle_ctrl_message+0x1e>
   366dc:	f7fc fcd0 	bl	33080 <rpc_transport_data_free>
   366e0:	2000      	movs	r0, #0
   366e2:	bd10      	pop	{r4, pc}

000366e4 <rpc_handle_data_message>:
   366e4:	4b23      	ldr	r3, [pc, #140]	; (36774 <rpc_handle_data_message+0x90>)
   366e6:	6802      	ldr	r2, [r0, #0]
   366e8:	8819      	ldrh	r1, [r3, #0]
   366ea:	b292      	uxth	r2, r2
   366ec:	4291      	cmp	r1, r2
   366ee:	d027      	beq.n	36740 <rpc_handle_data_message+0x5c>
   366f0:	8a19      	ldrh	r1, [r3, #16]
   366f2:	4291      	cmp	r1, r2
   366f4:	d02a      	beq.n	3674c <rpc_handle_data_message+0x68>
   366f6:	8c19      	ldrh	r1, [r3, #32]
   366f8:	4291      	cmp	r1, r2
   366fa:	d02b      	beq.n	36754 <rpc_handle_data_message+0x70>
   366fc:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   366fe:	4291      	cmp	r1, r2
   36700:	d02a      	beq.n	36758 <rpc_handle_data_message+0x74>
   36702:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   36706:	4291      	cmp	r1, r2
   36708:	d028      	beq.n	3675c <rpc_handle_data_message+0x78>
   3670a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   3670e:	4291      	cmp	r1, r2
   36710:	d026      	beq.n	36760 <rpc_handle_data_message+0x7c>
   36712:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   36716:	4291      	cmp	r1, r2
   36718:	d026      	beq.n	36768 <rpc_handle_data_message+0x84>
   3671a:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   3671e:	4291      	cmp	r1, r2
   36720:	d024      	beq.n	3676c <rpc_handle_data_message+0x88>
   36722:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   36726:	4291      	cmp	r1, r2
   36728:	d01c      	beq.n	36764 <rpc_handle_data_message+0x80>
   3672a:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   3672e:	4291      	cmp	r1, r2
   36730:	d01e      	beq.n	36770 <rpc_handle_data_message+0x8c>
   36732:	6880      	ldr	r0, [r0, #8]
   36734:	b160      	cbz	r0, 36750 <rpc_handle_data_message+0x6c>
   36736:	b510      	push	{r4, lr}
   36738:	f7fc fca2 	bl	33080 <rpc_transport_data_free>
   3673c:	2000      	movs	r0, #0
   3673e:	bd10      	pop	{r4, pc}
   36740:	2200      	movs	r2, #0
   36742:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   36746:	685a      	ldr	r2, [r3, #4]
   36748:	68d9      	ldr	r1, [r3, #12]
   3674a:	4710      	bx	r2
   3674c:	2201      	movs	r2, #1
   3674e:	e7f8      	b.n	36742 <rpc_handle_data_message+0x5e>
   36750:	2000      	movs	r0, #0
   36752:	4770      	bx	lr
   36754:	2202      	movs	r2, #2
   36756:	e7f4      	b.n	36742 <rpc_handle_data_message+0x5e>
   36758:	2203      	movs	r2, #3
   3675a:	e7f2      	b.n	36742 <rpc_handle_data_message+0x5e>
   3675c:	2204      	movs	r2, #4
   3675e:	e7f0      	b.n	36742 <rpc_handle_data_message+0x5e>
   36760:	2205      	movs	r2, #5
   36762:	e7ee      	b.n	36742 <rpc_handle_data_message+0x5e>
   36764:	2208      	movs	r2, #8
   36766:	e7ec      	b.n	36742 <rpc_handle_data_message+0x5e>
   36768:	2206      	movs	r2, #6
   3676a:	e7ea      	b.n	36742 <rpc_handle_data_message+0x5e>
   3676c:	2207      	movs	r2, #7
   3676e:	e7e8      	b.n	36742 <rpc_handle_data_message+0x5e>
   36770:	2209      	movs	r2, #9
   36772:	e7e6      	b.n	36742 <rpc_handle_data_message+0x5e>
   36774:	20025998 	.word	0x20025998

00036778 <rpc_framework_init>:
   36778:	b508      	push	{r3, lr}
   3677a:	22a0      	movs	r2, #160	; 0xa0
   3677c:	2100      	movs	r1, #0
   3677e:	4802      	ldr	r0, [pc, #8]	; (36788 <rpc_framework_init+0x10>)
   36780:	f00e fad1 	bl	44d26 <memset>
   36784:	2000      	movs	r0, #0
   36786:	bd08      	pop	{r3, pc}
   36788:	20025998 	.word	0x20025998

0003678c <rpc_client_register>:
   3678c:	8803      	ldrh	r3, [r0, #0]
   3678e:	2b00      	cmp	r3, #0
   36790:	d045      	beq.n	3681e <rpc_client_register+0x92>
   36792:	6842      	ldr	r2, [r0, #4]
   36794:	4601      	mov	r1, r0
   36796:	2a00      	cmp	r2, #0
   36798:	d050      	beq.n	3683c <rpc_client_register+0xb0>
   3679a:	4a30      	ldr	r2, [pc, #192]	; (3685c <rpc_client_register+0xd0>)
   3679c:	8810      	ldrh	r0, [r2, #0]
   3679e:	4283      	cmp	r3, r0
   367a0:	d03d      	beq.n	3681e <rpc_client_register+0x92>
   367a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   367a6:	8a14      	ldrh	r4, [r2, #16]
   367a8:	42a3      	cmp	r3, r4
   367aa:	d035      	beq.n	36818 <rpc_client_register+0x8c>
   367ac:	8c15      	ldrh	r5, [r2, #32]
   367ae:	42ab      	cmp	r3, r5
   367b0:	d032      	beq.n	36818 <rpc_client_register+0x8c>
   367b2:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   367b4:	42b3      	cmp	r3, r6
   367b6:	d02f      	beq.n	36818 <rpc_client_register+0x8c>
   367b8:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   367bc:	42bb      	cmp	r3, r7
   367be:	d02b      	beq.n	36818 <rpc_client_register+0x8c>
   367c0:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   367c4:	4563      	cmp	r3, ip
   367c6:	d027      	beq.n	36818 <rpc_client_register+0x8c>
   367c8:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   367cc:	4573      	cmp	r3, lr
   367ce:	d023      	beq.n	36818 <rpc_client_register+0x8c>
   367d0:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   367d4:	4543      	cmp	r3, r8
   367d6:	d01f      	beq.n	36818 <rpc_client_register+0x8c>
   367d8:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   367dc:	454b      	cmp	r3, r9
   367de:	d01b      	beq.n	36818 <rpc_client_register+0x8c>
   367e0:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   367e4:	4553      	cmp	r3, sl
   367e6:	d017      	beq.n	36818 <rpc_client_register+0x8c>
   367e8:	b1e0      	cbz	r0, 36824 <rpc_client_register+0x98>
   367ea:	b35c      	cbz	r4, 36844 <rpc_client_register+0xb8>
   367ec:	b365      	cbz	r5, 36848 <rpc_client_register+0xbc>
   367ee:	b36e      	cbz	r6, 3684c <rpc_client_register+0xc0>
   367f0:	b377      	cbz	r7, 36850 <rpc_client_register+0xc4>
   367f2:	f1bc 0f00 	cmp.w	ip, #0
   367f6:	d02d      	beq.n	36854 <rpc_client_register+0xc8>
   367f8:	f1be 0f00 	cmp.w	lr, #0
   367fc:	d020      	beq.n	36840 <rpc_client_register+0xb4>
   367fe:	f1b8 0f00 	cmp.w	r8, #0
   36802:	d029      	beq.n	36858 <rpc_client_register+0xcc>
   36804:	f1b9 0f00 	cmp.w	r9, #0
   36808:	d00b      	beq.n	36822 <rpc_client_register+0x96>
   3680a:	2009      	movs	r0, #9
   3680c:	f1ba 0f00 	cmp.w	sl, #0
   36810:	d008      	beq.n	36824 <rpc_client_register+0x98>
   36812:	2004      	movs	r0, #4
   36814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36818:	2007      	movs	r0, #7
   3681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3681e:	2007      	movs	r0, #7
   36820:	4770      	bx	lr
   36822:	2008      	movs	r0, #8
   36824:	0100      	lsls	r0, r0, #4
   36826:	5213      	strh	r3, [r2, r0]
   36828:	684b      	ldr	r3, [r1, #4]
   3682a:	4402      	add	r2, r0
   3682c:	6053      	str	r3, [r2, #4]
   3682e:	688b      	ldr	r3, [r1, #8]
   36830:	2000      	movs	r0, #0
   36832:	6093      	str	r3, [r2, #8]
   36834:	68cb      	ldr	r3, [r1, #12]
   36836:	60d3      	str	r3, [r2, #12]
   36838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3683c:	200e      	movs	r0, #14
   3683e:	4770      	bx	lr
   36840:	2006      	movs	r0, #6
   36842:	e7ef      	b.n	36824 <rpc_client_register+0x98>
   36844:	2001      	movs	r0, #1
   36846:	e7ed      	b.n	36824 <rpc_client_register+0x98>
   36848:	2002      	movs	r0, #2
   3684a:	e7eb      	b.n	36824 <rpc_client_register+0x98>
   3684c:	2003      	movs	r0, #3
   3684e:	e7e9      	b.n	36824 <rpc_client_register+0x98>
   36850:	2004      	movs	r0, #4
   36852:	e7e7      	b.n	36824 <rpc_client_register+0x98>
   36854:	2005      	movs	r0, #5
   36856:	e7e5      	b.n	36824 <rpc_client_register+0x98>
   36858:	2007      	movs	r0, #7
   3685a:	e7e3      	b.n	36824 <rpc_client_register+0x98>
   3685c:	20025998 	.word	0x20025998

00036860 <rpc_client_unregister>:
   36860:	b340      	cbz	r0, 368b4 <rpc_client_unregister+0x54>
   36862:	4b21      	ldr	r3, [pc, #132]	; (368e8 <rpc_client_unregister+0x88>)
   36864:	881a      	ldrh	r2, [r3, #0]
   36866:	4282      	cmp	r2, r0
   36868:	d02e      	beq.n	368c8 <rpc_client_unregister+0x68>
   3686a:	8a1a      	ldrh	r2, [r3, #16]
   3686c:	4282      	cmp	r2, r0
   3686e:	d02f      	beq.n	368d0 <rpc_client_unregister+0x70>
   36870:	8c1a      	ldrh	r2, [r3, #32]
   36872:	4282      	cmp	r2, r0
   36874:	d02e      	beq.n	368d4 <rpc_client_unregister+0x74>
   36876:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   36878:	4282      	cmp	r2, r0
   3687a:	d02d      	beq.n	368d8 <rpc_client_unregister+0x78>
   3687c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   36880:	4282      	cmp	r2, r0
   36882:	d023      	beq.n	368cc <rpc_client_unregister+0x6c>
   36884:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
   36888:	4282      	cmp	r2, r0
   3688a:	d027      	beq.n	368dc <rpc_client_unregister+0x7c>
   3688c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
   36890:	4282      	cmp	r2, r0
   36892:	d025      	beq.n	368e0 <rpc_client_unregister+0x80>
   36894:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
   36898:	4282      	cmp	r2, r0
   3689a:	d023      	beq.n	368e4 <rpc_client_unregister+0x84>
   3689c:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
   368a0:	4282      	cmp	r2, r0
   368a2:	d009      	beq.n	368b8 <rpc_client_unregister+0x58>
   368a4:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
   368a8:	4282      	cmp	r2, r0
   368aa:	bf08      	it	eq
   368ac:	2209      	moveq	r2, #9
   368ae:	d004      	beq.n	368ba <rpc_client_unregister+0x5a>
   368b0:	2005      	movs	r0, #5
   368b2:	4770      	bx	lr
   368b4:	2007      	movs	r0, #7
   368b6:	4770      	bx	lr
   368b8:	2208      	movs	r2, #8
   368ba:	2000      	movs	r0, #0
   368bc:	0112      	lsls	r2, r2, #4
   368be:	1899      	adds	r1, r3, r2
   368c0:	5298      	strh	r0, [r3, r2]
   368c2:	6048      	str	r0, [r1, #4]
   368c4:	60c8      	str	r0, [r1, #12]
   368c6:	4770      	bx	lr
   368c8:	2200      	movs	r2, #0
   368ca:	e7f6      	b.n	368ba <rpc_client_unregister+0x5a>
   368cc:	2204      	movs	r2, #4
   368ce:	e7f4      	b.n	368ba <rpc_client_unregister+0x5a>
   368d0:	2201      	movs	r2, #1
   368d2:	e7f2      	b.n	368ba <rpc_client_unregister+0x5a>
   368d4:	2202      	movs	r2, #2
   368d6:	e7f0      	b.n	368ba <rpc_client_unregister+0x5a>
   368d8:	2203      	movs	r2, #3
   368da:	e7ee      	b.n	368ba <rpc_client_unregister+0x5a>
   368dc:	2205      	movs	r2, #5
   368de:	e7ec      	b.n	368ba <rpc_client_unregister+0x5a>
   368e0:	2206      	movs	r2, #6
   368e2:	e7ea      	b.n	368ba <rpc_client_unregister+0x5a>
   368e4:	2207      	movs	r2, #7
   368e6:	e7e8      	b.n	368ba <rpc_client_unregister+0x5a>
   368e8:	20025998 	.word	0x20025998

000368ec <rpc_message_send>:
   368ec:	b150      	cbz	r0, 36904 <rpc_message_send+0x18>
   368ee:	b159      	cbz	r1, 36908 <rpc_message_send+0x1c>
   368f0:	684b      	ldr	r3, [r1, #4]
   368f2:	8008      	strh	r0, [r1, #0]
   368f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   368f8:	f043 0302 	orr.w	r3, r3, #2
   368fc:	604b      	str	r3, [r1, #4]
   368fe:	4608      	mov	r0, r1
   36900:	f7fc bbb6 	b.w	33070 <rpc_transport_send>
   36904:	2007      	movs	r0, #7
   36906:	4770      	bx	lr
   36908:	200e      	movs	r0, #14
   3690a:	4770      	bx	lr

0003690c <rpc_message_alloc>:
   3690c:	b342      	cbz	r2, 36960 <rpc_message_alloc+0x54>
   3690e:	b328      	cbz	r0, 3695c <rpc_message_alloc+0x50>
   36910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36912:	2300      	movs	r3, #0
   36914:	4616      	mov	r6, r2
   36916:	460c      	mov	r4, r1
   36918:	4605      	mov	r5, r0
   3691a:	6013      	str	r3, [r2, #0]
   3691c:	b171      	cbz	r1, 3693c <rpc_message_alloc+0x30>
   3691e:	4608      	mov	r0, r1
   36920:	f7fc fbaa 	bl	33078 <rpc_transport_data_alloc>
   36924:	4607      	mov	r7, r0
   36926:	b1b8      	cbz	r0, 36958 <rpc_message_alloc+0x4c>
   36928:	f7fc fba4 	bl	33074 <rpc_transport_rpc_alloc>
   3692c:	4603      	mov	r3, r0
   3692e:	b180      	cbz	r0, 36952 <rpc_message_alloc+0x46>
   36930:	2000      	movs	r0, #0
   36932:	60dc      	str	r4, [r3, #12]
   36934:	609f      	str	r7, [r3, #8]
   36936:	801d      	strh	r5, [r3, #0]
   36938:	6033      	str	r3, [r6, #0]
   3693a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3693c:	f7fc fb9a 	bl	33074 <rpc_transport_rpc_alloc>
   36940:	4603      	mov	r3, r0
   36942:	b148      	cbz	r0, 36958 <rpc_message_alloc+0x4c>
   36944:	4627      	mov	r7, r4
   36946:	60dc      	str	r4, [r3, #12]
   36948:	609f      	str	r7, [r3, #8]
   3694a:	801d      	strh	r5, [r3, #0]
   3694c:	2000      	movs	r0, #0
   3694e:	6033      	str	r3, [r6, #0]
   36950:	e7f3      	b.n	3693a <rpc_message_alloc+0x2e>
   36952:	4638      	mov	r0, r7
   36954:	f7fc fb94 	bl	33080 <rpc_transport_data_free>
   36958:	2004      	movs	r0, #4
   3695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3695c:	2007      	movs	r0, #7
   3695e:	4770      	bx	lr
   36960:	200e      	movs	r0, #14
   36962:	4770      	bx	lr

00036964 <rpc_message_free>:
   36964:	b130      	cbz	r0, 36974 <rpc_message_free+0x10>
   36966:	b139      	cbz	r1, 36978 <rpc_message_free+0x14>
   36968:	b508      	push	{r3, lr}
   3696a:	4608      	mov	r0, r1
   3696c:	f7fc fb86 	bl	3307c <rpc_transport_rpc_free>
   36970:	2000      	movs	r0, #0
   36972:	bd08      	pop	{r3, pc}
   36974:	2007      	movs	r0, #7
   36976:	4770      	bx	lr
   36978:	200e      	movs	r0, #14
   3697a:	4770      	bx	lr

0003697c <rpc_message_data_free>:
   3697c:	b130      	cbz	r0, 3698c <rpc_message_data_free+0x10>
   3697e:	b139      	cbz	r1, 36990 <rpc_message_data_free+0x14>
   36980:	b508      	push	{r3, lr}
   36982:	4608      	mov	r0, r1
   36984:	f7fc fb7c 	bl	33080 <rpc_transport_data_free>
   36988:	2000      	movs	r0, #0
   3698a:	bd08      	pop	{r3, pc}
   3698c:	2007      	movs	r0, #7
   3698e:	4770      	bx	lr
   36990:	200e      	movs	r0, #14
   36992:	4770      	bx	lr

00036994 <packet_free_cb>:
   36994:	b510      	push	{r4, lr}
   36996:	4604      	mov	r4, r0
   36998:	b118      	cbz	r0, 369a2 <packet_free_cb+0xe>
   3699a:	6800      	ldr	r0, [r0, #0]
   3699c:	b108      	cbz	r0, 369a2 <packet_free_cb+0xe>
   3699e:	f003 f87d 	bl	39a9c <rpc_gnss_client_data_free>
   369a2:	68a0      	ldr	r0, [r4, #8]
   369a4:	b118      	cbz	r0, 369ae <packet_free_cb+0x1a>
   369a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   369aa:	f003 be65 	b.w	3a678 <nrf_free>
   369ae:	bd10      	pop	{r4, pc}

000369b0 <rpc_gnss_event_handler>:
   369b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   369b2:	4b64      	ldr	r3, [pc, #400]	; (36b44 <rpc_gnss_event_handler+0x194>)
   369b4:	4606      	mov	r6, r0
   369b6:	6800      	ldr	r0, [r0, #0]
   369b8:	881b      	ldrh	r3, [r3, #0]
   369ba:	6802      	ldr	r2, [r0, #0]
   369bc:	b085      	sub	sp, #20
   369be:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   369c2:	460d      	mov	r5, r1
   369c4:	d037      	beq.n	36a36 <rpc_gnss_event_handler+0x86>
   369c6:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   369ca:	33ff      	adds	r3, #255	; 0xff
   369cc:	b29b      	uxth	r3, r3
   369ce:	2b02      	cmp	r3, #2
   369d0:	d811      	bhi.n	369f6 <rpc_gnss_event_handler+0x46>
   369d2:	4c5d      	ldr	r4, [pc, #372]	; (36b48 <rpc_gnss_event_handler+0x198>)
   369d4:	6823      	ldr	r3, [r4, #0]
   369d6:	075a      	lsls	r2, r3, #29
   369d8:	d410      	bmi.n	369fc <rpc_gnss_event_handler+0x4c>
   369da:	6823      	ldr	r3, [r4, #0]
   369dc:	079b      	lsls	r3, r3, #30
   369de:	d503      	bpl.n	369e8 <rpc_gnss_event_handler+0x38>
   369e0:	f244 0303 	movw	r3, #16387	; 0x4003
   369e4:	429d      	cmp	r5, r3
   369e6:	d009      	beq.n	369fc <rpc_gnss_event_handler+0x4c>
   369e8:	6830      	ldr	r0, [r6, #0]
   369ea:	b120      	cbz	r0, 369f6 <rpc_gnss_event_handler+0x46>
   369ec:	f003 f856 	bl	39a9c <rpc_gnss_client_data_free>
   369f0:	2200      	movs	r2, #0
   369f2:	4b56      	ldr	r3, [pc, #344]	; (36b4c <rpc_gnss_event_handler+0x19c>)
   369f4:	601a      	str	r2, [r3, #0]
   369f6:	2000      	movs	r0, #0
   369f8:	b005      	add	sp, #20
   369fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   369fc:	2002      	movs	r0, #2
   369fe:	f003 fe31 	bl	3a664 <nrf_malloc>
   36a02:	4607      	mov	r7, r0
   36a04:	2800      	cmp	r0, #0
   36a06:	f000 8094 	beq.w	36b32 <rpc_gnss_event_handler+0x182>
   36a0a:	2302      	movs	r3, #2
   36a0c:	8005      	strh	r5, [r0, #0]
   36a0e:	6831      	ldr	r1, [r6, #0]
   36a10:	6872      	ldr	r2, [r6, #4]
   36a12:	484f      	ldr	r0, [pc, #316]	; (36b50 <rpc_gnss_event_handler+0x1a0>)
   36a14:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   36a18:	6800      	ldr	r0, [r0, #0]
   36a1a:	9303      	str	r3, [sp, #12]
   36a1c:	6803      	ldr	r3, [r0, #0]
   36a1e:	4669      	mov	r1, sp
   36a20:	685b      	ldr	r3, [r3, #4]
   36a22:	4798      	blx	r3
   36a24:	3001      	adds	r0, #1
   36a26:	d071      	beq.n	36b0c <rpc_gnss_event_handler+0x15c>
   36a28:	2000      	movs	r0, #0
   36a2a:	6823      	ldr	r3, [r4, #0]
   36a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   36a30:	6023      	str	r3, [r4, #0]
   36a32:	b005      	add	sp, #20
   36a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36a36:	4c44      	ldr	r4, [pc, #272]	; (36b48 <rpc_gnss_event_handler+0x198>)
   36a38:	4f44      	ldr	r7, [pc, #272]	; (36b4c <rpc_gnss_event_handler+0x19c>)
   36a3a:	6823      	ldr	r3, [r4, #0]
   36a3c:	6038      	str	r0, [r7, #0]
   36a3e:	01d9      	lsls	r1, r3, #7
   36a40:	d523      	bpl.n	36a8a <rpc_gnss_event_handler+0xda>
   36a42:	f242 1302 	movw	r3, #8450	; 0x2102
   36a46:	429d      	cmp	r5, r3
   36a48:	d11f      	bne.n	36a8a <rpc_gnss_event_handler+0xda>
   36a4a:	6843      	ldr	r3, [r0, #4]
   36a4c:	b91b      	cbnz	r3, 36a56 <rpc_gnss_event_handler+0xa6>
   36a4e:	6823      	ldr	r3, [r4, #0]
   36a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   36a54:	6023      	str	r3, [r4, #0]
   36a56:	6823      	ldr	r3, [r4, #0]
   36a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   36a5c:	6023      	str	r3, [r4, #0]
   36a5e:	6823      	ldr	r3, [r4, #0]
   36a60:	025a      	lsls	r2, r3, #9
   36a62:	d430      	bmi.n	36ac6 <rpc_gnss_event_handler+0x116>
   36a64:	f242 0305 	movw	r3, #8197	; 0x2005
   36a68:	429d      	cmp	r5, r3
   36a6a:	d12c      	bne.n	36ac6 <rpc_gnss_event_handler+0x116>
   36a6c:	6823      	ldr	r3, [r4, #0]
   36a6e:	0299      	lsls	r1, r3, #10
   36a70:	d529      	bpl.n	36ac6 <rpc_gnss_event_handler+0x116>
   36a72:	6843      	ldr	r3, [r0, #4]
   36a74:	2b00      	cmp	r3, #0
   36a76:	d157      	bne.n	36b28 <rpc_gnss_event_handler+0x178>
   36a78:	6823      	ldr	r3, [r4, #0]
   36a7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   36a7e:	6023      	str	r3, [r4, #0]
   36a80:	6823      	ldr	r3, [r4, #0]
   36a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   36a86:	6023      	str	r3, [r4, #0]
   36a88:	e01d      	b.n	36ac6 <rpc_gnss_event_handler+0x116>
   36a8a:	6823      	ldr	r3, [r4, #0]
   36a8c:	025b      	lsls	r3, r3, #9
   36a8e:	d50e      	bpl.n	36aae <rpc_gnss_event_handler+0xfe>
   36a90:	f242 1303 	movw	r3, #8451	; 0x2103
   36a94:	429d      	cmp	r5, r3
   36a96:	d10a      	bne.n	36aae <rpc_gnss_event_handler+0xfe>
   36a98:	6843      	ldr	r3, [r0, #4]
   36a9a:	b91b      	cbnz	r3, 36aa4 <rpc_gnss_event_handler+0xf4>
   36a9c:	6823      	ldr	r3, [r4, #0]
   36a9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   36aa2:	6023      	str	r3, [r4, #0]
   36aa4:	6823      	ldr	r3, [r4, #0]
   36aa6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   36aaa:	6023      	str	r3, [r4, #0]
   36aac:	e00b      	b.n	36ac6 <rpc_gnss_event_handler+0x116>
   36aae:	f242 0301 	movw	r3, #8193	; 0x2001
   36ab2:	429d      	cmp	r5, r3
   36ab4:	d10c      	bne.n	36ad0 <rpc_gnss_event_handler+0x120>
   36ab6:	6843      	ldr	r3, [r0, #4]
   36ab8:	b92b      	cbnz	r3, 36ac6 <rpc_gnss_event_handler+0x116>
   36aba:	6823      	ldr	r3, [r4, #0]
   36abc:	0c1b      	lsrs	r3, r3, #16
   36abe:	041b      	lsls	r3, r3, #16
   36ac0:	f043 0302 	orr.w	r3, r3, #2
   36ac4:	6023      	str	r3, [r4, #0]
   36ac6:	f002 ffe9 	bl	39a9c <rpc_gnss_client_data_free>
   36aca:	2300      	movs	r3, #0
   36acc:	603b      	str	r3, [r7, #0]
   36ace:	e77a      	b.n	369c6 <rpc_gnss_event_handler+0x16>
   36ad0:	f242 0304 	movw	r3, #8196	; 0x2004
   36ad4:	429d      	cmp	r5, r3
   36ad6:	d1c5      	bne.n	36a64 <rpc_gnss_event_handler+0xb4>
   36ad8:	6843      	ldr	r3, [r0, #4]
   36ada:	b993      	cbnz	r3, 36b02 <rpc_gnss_event_handler+0x152>
   36adc:	6823      	ldr	r3, [r4, #0]
   36ade:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   36ae2:	6023      	str	r3, [r4, #0]
   36ae4:	6823      	ldr	r3, [r4, #0]
   36ae6:	b29b      	uxth	r3, r3
   36ae8:	2b03      	cmp	r3, #3
   36aea:	6823      	ldr	r3, [r4, #0]
   36aec:	d016      	beq.n	36b1c <rpc_gnss_event_handler+0x16c>
   36aee:	b29b      	uxth	r3, r3
   36af0:	2b04      	cmp	r3, #4
   36af2:	d1d7      	bne.n	36aa4 <rpc_gnss_event_handler+0xf4>
   36af4:	6823      	ldr	r3, [r4, #0]
   36af6:	0c1b      	lsrs	r3, r3, #16
   36af8:	041b      	lsls	r3, r3, #16
   36afa:	f043 0302 	orr.w	r3, r3, #2
   36afe:	6023      	str	r3, [r4, #0]
   36b00:	e7d0      	b.n	36aa4 <rpc_gnss_event_handler+0xf4>
   36b02:	6823      	ldr	r3, [r4, #0]
   36b04:	b29b      	uxth	r3, r3
   36b06:	2b03      	cmp	r3, #3
   36b08:	d1cc      	bne.n	36aa4 <rpc_gnss_event_handler+0xf4>
   36b0a:	e7f3      	b.n	36af4 <rpc_gnss_event_handler+0x144>
   36b0c:	4638      	mov	r0, r7
   36b0e:	f003 fdb3 	bl	3a678 <nrf_free>
   36b12:	6830      	ldr	r0, [r6, #0]
   36b14:	2800      	cmp	r0, #0
   36b16:	f47f af69 	bne.w	369ec <rpc_gnss_event_handler+0x3c>
   36b1a:	e76c      	b.n	369f6 <rpc_gnss_event_handler+0x46>
   36b1c:	0c1b      	lsrs	r3, r3, #16
   36b1e:	041b      	lsls	r3, r3, #16
   36b20:	f043 0304 	orr.w	r3, r3, #4
   36b24:	6023      	str	r3, [r4, #0]
   36b26:	e7bd      	b.n	36aa4 <rpc_gnss_event_handler+0xf4>
   36b28:	6823      	ldr	r3, [r4, #0]
   36b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   36b2e:	6023      	str	r3, [r4, #0]
   36b30:	e7c9      	b.n	36ac6 <rpc_gnss_event_handler+0x116>
   36b32:	6830      	ldr	r0, [r6, #0]
   36b34:	2800      	cmp	r0, #0
   36b36:	f43f af5e 	beq.w	369f6 <rpc_gnss_event_handler+0x46>
   36b3a:	f002 ffaf 	bl	39a9c <rpc_gnss_client_data_free>
   36b3e:	4b03      	ldr	r3, [pc, #12]	; (36b4c <rpc_gnss_event_handler+0x19c>)
   36b40:	601f      	str	r7, [r3, #0]
   36b42:	e758      	b.n	369f6 <rpc_gnss_event_handler+0x46>
   36b44:	2002a5ee 	.word	0x2002a5ee
   36b48:	20025a38 	.word	0x20025a38
   36b4c:	20025a3c 	.word	0x20025a3c
   36b50:	20025a40 	.word	0x20025a40

00036b54 <gnss_interface_write>:
   36b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36b58:	4a74      	ldr	r2, [pc, #464]	; (36d2c <gnss_interface_write+0x1d8>)
   36b5a:	b09f      	sub	sp, #124	; 0x7c
   36b5c:	4290      	cmp	r0, r2
   36b5e:	9d26      	ldr	r5, [sp, #152]	; 0x98
   36b60:	f040 80d7 	bne.w	36d12 <gnss_interface_write+0x1be>
   36b64:	2900      	cmp	r1, #0
   36b66:	f000 80c6 	beq.w	36cf6 <gnss_interface_write+0x1a2>
   36b6a:	2d00      	cmp	r5, #0
   36b6c:	f000 80c3 	beq.w	36cf6 <gnss_interface_write+0x1a2>
   36b70:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   36b72:	2a02      	cmp	r2, #2
   36b74:	f040 80bf 	bne.w	36cf6 <gnss_interface_write+0x1a2>
   36b78:	4c6d      	ldr	r4, [pc, #436]	; (36d30 <gnss_interface_write+0x1dc>)
   36b7a:	6822      	ldr	r2, [r4, #0]
   36b7c:	b292      	uxth	r2, r2
   36b7e:	2a02      	cmp	r2, #2
   36b80:	d004      	beq.n	36b8c <gnss_interface_write+0x38>
   36b82:	6822      	ldr	r2, [r4, #0]
   36b84:	b292      	uxth	r2, r2
   36b86:	2a04      	cmp	r2, #4
   36b88:	f040 80bd 	bne.w	36d06 <gnss_interface_write+0x1b2>
   36b8c:	2b00      	cmp	r3, #0
   36b8e:	f040 80c6 	bne.w	36d1e <gnss_interface_write+0x1ca>
   36b92:	6822      	ldr	r2, [r4, #0]
   36b94:	0390      	lsls	r0, r2, #14
   36b96:	d512      	bpl.n	36bbe <gnss_interface_write+0x6a>
   36b98:	6822      	ldr	r2, [r4, #0]
   36b9a:	882b      	ldrh	r3, [r5, #0]
   36b9c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   36ba0:	6022      	str	r2, [r4, #0]
   36ba2:	6822      	ldr	r2, [r4, #0]
   36ba4:	3b01      	subs	r3, #1
   36ba6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   36baa:	6022      	str	r2, [r4, #0]
   36bac:	2b07      	cmp	r3, #7
   36bae:	f200 80a2 	bhi.w	36cf6 <gnss_interface_write+0x1a2>
   36bb2:	e8df f003 	tbb	[pc, r3]
   36bb6:	7d82      	.short	0x7d82
   36bb8:	646e7378 	.word	0x646e7378
   36bbc:	0869      	.short	0x0869
   36bbe:	2000      	movs	r0, #0
   36bc0:	b01f      	add	sp, #124	; 0x7c
   36bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36bc6:	4608      	mov	r0, r1
   36bc8:	a902      	add	r1, sp, #8
   36bca:	f002 ff17 	bl	399fc <rpc_gnss_serialize_integrity>
   36bce:	2172      	movs	r1, #114	; 0x72
   36bd0:	4668      	mov	r0, sp
   36bd2:	f002 ff31 	bl	39a38 <rpc_gnss_client_request_alloc>
   36bd6:	4605      	mov	r5, r0
   36bd8:	9800      	ldr	r0, [sp, #0]
   36bda:	2d00      	cmp	r5, #0
   36bdc:	d172      	bne.n	36cc4 <gnss_interface_write+0x170>
   36bde:	2800      	cmp	r0, #0
   36be0:	d077      	beq.n	36cd2 <gnss_interface_write+0x17e>
   36be2:	f241 0605 	movw	r6, #4101	; 0x1005
   36be6:	f04f 0c49 	mov.w	ip, #73	; 0x49
   36bea:	2272      	movs	r2, #114	; 0x72
   36bec:	f04f 0e76 	mov.w	lr, #118	; 0x76
   36bf0:	f04f 0943 	mov.w	r9, #67	; 0x43
   36bf4:	f04f 0854 	mov.w	r8, #84	; 0x54
   36bf8:	4f4e      	ldr	r7, [pc, #312]	; (36d34 <gnss_interface_write+0x1e0>)
   36bfa:	a91e      	add	r1, sp, #120	; 0x78
   36bfc:	883b      	ldrh	r3, [r7, #0]
   36bfe:	f880 c00f 	strb.w	ip, [r0, #15]
   36c02:	3301      	adds	r3, #1
   36c04:	b29b      	uxth	r3, r3
   36c06:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   36c0a:	f841 cd74 	str.w	ip, [r1, #-116]!
   36c0e:	7145      	strb	r5, [r0, #5]
   36c10:	7185      	strb	r5, [r0, #6]
   36c12:	71c5      	strb	r5, [r0, #7]
   36c14:	7205      	strb	r5, [r0, #8]
   36c16:	7245      	strb	r5, [r0, #9]
   36c18:	7285      	strb	r5, [r0, #10]
   36c1a:	72c5      	strb	r5, [r0, #11]
   36c1c:	7102      	strb	r2, [r0, #4]
   36c1e:	f880 900c 	strb.w	r9, [r0, #12]
   36c22:	f880 800d 	strb.w	r8, [r0, #13]
   36c26:	f880 e00e 	strb.w	lr, [r0, #14]
   36c2a:	6800      	ldr	r0, [r0, #0]
   36c2c:	803b      	strh	r3, [r7, #0]
   36c2e:	f00e f85a 	bl	44ce6 <memcpy>
   36c32:	4b41      	ldr	r3, [pc, #260]	; (36d38 <gnss_interface_write+0x1e4>)
   36c34:	4631      	mov	r1, r6
   36c36:	9800      	ldr	r0, [sp, #0]
   36c38:	601d      	str	r5, [r3, #0]
   36c3a:	f002 ff11 	bl	39a60 <rpc_gnss_client_request_send>
   36c3e:	2800      	cmp	r0, #0
   36c40:	d14e      	bne.n	36ce0 <gnss_interface_write+0x18c>
   36c42:	6823      	ldr	r3, [r4, #0]
   36c44:	0299      	lsls	r1, r3, #10
   36c46:	d50b      	bpl.n	36c60 <gnss_interface_write+0x10c>
   36c48:	4e3c      	ldr	r6, [pc, #240]	; (36d3c <gnss_interface_write+0x1e8>)
   36c4a:	4d38      	ldr	r5, [pc, #224]	; (36d2c <gnss_interface_write+0x1d8>)
   36c4c:	e000      	b.n	36c50 <gnss_interface_write+0xfc>
   36c4e:	b978      	cbnz	r0, 36c70 <gnss_interface_write+0x11c>
   36c50:	4631      	mov	r1, r6
   36c52:	4628      	mov	r0, r5
   36c54:	f7f2 fc4a 	bl	294ec <bsd_os_timedwait>
   36c58:	6823      	ldr	r3, [r4, #0]
   36c5a:	029a      	lsls	r2, r3, #10
   36c5c:	d4f7      	bmi.n	36c4e <gnss_interface_write+0xfa>
   36c5e:	b938      	cbnz	r0, 36c70 <gnss_interface_write+0x11c>
   36c60:	6823      	ldr	r3, [r4, #0]
   36c62:	039b      	lsls	r3, r3, #14
   36c64:	d4ab      	bmi.n	36bbe <gnss_interface_write+0x6a>
   36c66:	2005      	movs	r0, #5
   36c68:	6823      	ldr	r3, [r4, #0]
   36c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   36c6e:	6023      	str	r3, [r4, #0]
   36c70:	f7f2 fcf4 	bl	2965c <bsd_os_errno_set>
   36c74:	f04f 30ff 	mov.w	r0, #4294967295
   36c78:	b01f      	add	sp, #124	; 0x7c
   36c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36c7e:	4608      	mov	r0, r1
   36c80:	a902      	add	r1, sp, #8
   36c82:	f002 fe73 	bl	3996c <rpc_gnss_serialize_time_and_sv_tow>
   36c86:	e7a2      	b.n	36bce <gnss_interface_write+0x7a>
   36c88:	4608      	mov	r0, r1
   36c8a:	a902      	add	r1, sp, #8
   36c8c:	f002 fe96 	bl	399bc <rpc_gnss_serialize_location>
   36c90:	e79d      	b.n	36bce <gnss_interface_write+0x7a>
   36c92:	4608      	mov	r0, r1
   36c94:	a902      	add	r1, sp, #8
   36c96:	f002 fe4f 	bl	39938 <rpc_gnss_serialize_nequick>
   36c9a:	e798      	b.n	36bce <gnss_interface_write+0x7a>
   36c9c:	4608      	mov	r0, r1
   36c9e:	a902      	add	r1, sp, #8
   36ca0:	f002 fe26 	bl	398f0 <rpc_gnss_serialize_klob>
   36ca4:	e793      	b.n	36bce <gnss_interface_write+0x7a>
   36ca6:	4608      	mov	r0, r1
   36ca8:	a902      	add	r1, sp, #8
   36caa:	f002 fdef 	bl	3988c <rpc_gnss_serialize_alm>
   36cae:	e78e      	b.n	36bce <gnss_interface_write+0x7a>
   36cb0:	4608      	mov	r0, r1
   36cb2:	a902      	add	r1, sp, #8
   36cb4:	f002 fd98 	bl	397e8 <rpc_gnss_serialize_ephe>
   36cb8:	e789      	b.n	36bce <gnss_interface_write+0x7a>
   36cba:	4608      	mov	r0, r1
   36cbc:	a902      	add	r1, sp, #8
   36cbe:	f002 fd71 	bl	397a4 <rpc_gnss_serialize_utc>
   36cc2:	e784      	b.n	36bce <gnss_interface_write+0x7a>
   36cc4:	b128      	cbz	r0, 36cd2 <gnss_interface_write+0x17e>
   36cc6:	6803      	ldr	r3, [r0, #0]
   36cc8:	b11b      	cbz	r3, 36cd2 <gnss_interface_write+0x17e>
   36cca:	4618      	mov	r0, r3
   36ccc:	f002 fee6 	bl	39a9c <rpc_gnss_client_data_free>
   36cd0:	9800      	ldr	r0, [sp, #0]
   36cd2:	f002 fedb 	bl	39a8c <rpc_gnss_client_message_free>
   36cd6:	2023      	movs	r0, #35	; 0x23
   36cd8:	f7f2 fcc0 	bl	2965c <bsd_os_errno_set>
   36cdc:	f04f 30ff 	mov.w	r0, #4294967295
   36ce0:	6823      	ldr	r3, [r4, #0]
   36ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   36ce6:	6023      	str	r3, [r4, #0]
   36ce8:	6823      	ldr	r3, [r4, #0]
   36cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   36cee:	6023      	str	r3, [r4, #0]
   36cf0:	b01f      	add	sp, #124	; 0x7c
   36cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36cf6:	2016      	movs	r0, #22
   36cf8:	f7f2 fcb0 	bl	2965c <bsd_os_errno_set>
   36cfc:	f04f 30ff 	mov.w	r0, #4294967295
   36d00:	b01f      	add	sp, #124	; 0x7c
   36d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36d06:	2039      	movs	r0, #57	; 0x39
   36d08:	f7f2 fca8 	bl	2965c <bsd_os_errno_set>
   36d0c:	f04f 30ff 	mov.w	r0, #4294967295
   36d10:	e756      	b.n	36bc0 <gnss_interface_write+0x6c>
   36d12:	2009      	movs	r0, #9
   36d14:	f7f2 fca2 	bl	2965c <bsd_os_errno_set>
   36d18:	f04f 30ff 	mov.w	r0, #4294967295
   36d1c:	e750      	b.n	36bc0 <gnss_interface_write+0x6c>
   36d1e:	202d      	movs	r0, #45	; 0x2d
   36d20:	f7f2 fc9c 	bl	2965c <bsd_os_errno_set>
   36d24:	f04f 30ff 	mov.w	r0, #4294967295
   36d28:	e74a      	b.n	36bc0 <gnss_interface_write+0x6c>
   36d2a:	bf00      	nop
   36d2c:	49765443 	.word	0x49765443
   36d30:	20025a38 	.word	0x20025a38
   36d34:	2002a5ee 	.word	0x2002a5ee
   36d38:	20025a3c 	.word	0x20025a3c
   36d3c:	2002074c 	.word	0x2002074c

00036d40 <gnss_interface_read>:
   36d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36d44:	4c55      	ldr	r4, [pc, #340]	; (36e9c <gnss_interface_read+0x15c>)
   36d46:	b0b7      	sub	sp, #220	; 0xdc
   36d48:	42a0      	cmp	r0, r4
   36d4a:	f040 81fa 	bne.w	37142 <gnss_interface_read+0x402>
   36d4e:	460e      	mov	r6, r1
   36d50:	2900      	cmp	r1, #0
   36d52:	f000 81f0 	beq.w	37136 <gnss_interface_read+0x3f6>
   36d56:	2ad7      	cmp	r2, #215	; 0xd7
   36d58:	f240 81ed 	bls.w	37136 <gnss_interface_read+0x3f6>
   36d5c:	4d50      	ldr	r5, [pc, #320]	; (36ea0 <gnss_interface_read+0x160>)
   36d5e:	469a      	mov	sl, r3
   36d60:	682b      	ldr	r3, [r5, #0]
   36d62:	b29b      	uxth	r3, r3
   36d64:	2b04      	cmp	r3, #4
   36d66:	d004      	beq.n	36d72 <gnss_interface_read+0x32>
   36d68:	682b      	ldr	r3, [r5, #0]
   36d6a:	b29b      	uxth	r3, r3
   36d6c:	2b02      	cmp	r3, #2
   36d6e:	f040 81dc 	bne.w	3712a <gnss_interface_read+0x3ea>
   36d72:	f1ba 0f00 	cmp.w	sl, #0
   36d76:	d178      	bne.n	36e6a <gnss_interface_read+0x12a>
   36d78:	2102      	movs	r1, #2
   36d7a:	20b6      	movs	r0, #182	; 0xb6
   36d7c:	2400      	movs	r4, #0
   36d7e:	682b      	ldr	r3, [r5, #0]
   36d80:	f10d 020e 	add.w	r2, sp, #14
   36d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   36d88:	602b      	str	r3, [r5, #0]
   36d8a:	ab08      	add	r3, sp, #32
   36d8c:	9304      	str	r3, [sp, #16]
   36d8e:	f8df b118 	ldr.w	fp, [pc, #280]	; 36ea8 <gnss_interface_read+0x168>
   36d92:	ea0a 0301 	and.w	r3, sl, r1
   36d96:	4f43      	ldr	r7, [pc, #268]	; (36ea4 <gnss_interface_read+0x164>)
   36d98:	f8df 9110 	ldr.w	r9, [pc, #272]	; 36eac <gnss_interface_read+0x16c>
   36d9c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 36e9c <gnss_interface_read+0x15c>
   36da0:	9005      	str	r0, [sp, #20]
   36da2:	9107      	str	r1, [sp, #28]
   36da4:	9206      	str	r2, [sp, #24]
   36da6:	9301      	str	r3, [sp, #4]
   36da8:	f8db 0000 	ldr.w	r0, [fp]
   36dac:	4652      	mov	r2, sl
   36dae:	6803      	ldr	r3, [r0, #0]
   36db0:	a904      	add	r1, sp, #16
   36db2:	689b      	ldr	r3, [r3, #8]
   36db4:	4798      	blx	r3
   36db6:	2800      	cmp	r0, #0
   36db8:	da2a      	bge.n	36e10 <gnss_interface_read+0xd0>
   36dba:	9b01      	ldr	r3, [sp, #4]
   36dbc:	b15b      	cbz	r3, 36dd6 <gnss_interface_read+0x96>
   36dbe:	1c42      	adds	r2, r0, #1
   36dc0:	4603      	mov	r3, r0
   36dc2:	d125      	bne.n	36e10 <gnss_interface_read+0xd0>
   36dc4:	b9dc      	cbnz	r4, 36dfe <gnss_interface_read+0xbe>
   36dc6:	2023      	movs	r0, #35	; 0x23
   36dc8:	461c      	mov	r4, r3
   36dca:	f7f2 fc47 	bl	2965c <bsd_os_errno_set>
   36dce:	4620      	mov	r0, r4
   36dd0:	b037      	add	sp, #220	; 0xdc
   36dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36dd6:	682a      	ldr	r2, [r5, #0]
   36dd8:	783b      	ldrb	r3, [r7, #0]
   36dda:	03d1      	lsls	r1, r2, #15
   36ddc:	d40c      	bmi.n	36df8 <gnss_interface_read+0xb8>
   36dde:	b95c      	cbnz	r4, 36df8 <gnss_interface_read+0xb8>
   36de0:	b163      	cbz	r3, 36dfc <gnss_interface_read+0xbc>
   36de2:	4649      	mov	r1, r9
   36de4:	4640      	mov	r0, r8
   36de6:	f7f2 fb81 	bl	294ec <bsd_os_timedwait>
   36dea:	682b      	ldr	r3, [r5, #0]
   36dec:	03db      	lsls	r3, r3, #15
   36dee:	d437      	bmi.n	36e60 <gnss_interface_read+0x120>
   36df0:	783b      	ldrb	r3, [r7, #0]
   36df2:	2800      	cmp	r0, #0
   36df4:	d0f4      	beq.n	36de0 <gnss_interface_read+0xa0>
   36df6:	4604      	mov	r4, r0
   36df8:	2b00      	cmp	r3, #0
   36dfa:	d1d5      	bne.n	36da8 <gnss_interface_read+0x68>
   36dfc:	2470      	movs	r4, #112	; 0x70
   36dfe:	4620      	mov	r0, r4
   36e00:	f04f 34ff 	mov.w	r4, #4294967295
   36e04:	f7f2 fc2a 	bl	2965c <bsd_os_errno_set>
   36e08:	4620      	mov	r0, r4
   36e0a:	b037      	add	sp, #220	; 0xdc
   36e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36e10:	f244 0202 	movw	r2, #16386	; 0x4002
   36e14:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   36e18:	4293      	cmp	r3, r2
   36e1a:	d02f      	beq.n	36e7c <gnss_interface_read+0x13c>
   36e1c:	f244 0201 	movw	r2, #16385	; 0x4001
   36e20:	4293      	cmp	r3, r2
   36e22:	d045      	beq.n	36eb0 <gnss_interface_read+0x170>
   36e24:	f244 0203 	movw	r2, #16387	; 0x4003
   36e28:	4293      	cmp	r3, r2
   36e2a:	f040 8184 	bne.w	37136 <gnss_interface_read+0x3f6>
   36e2e:	2203      	movs	r2, #3
   36e30:	2414      	movs	r4, #20
   36e32:	9b08      	ldr	r3, [sp, #32]
   36e34:	7032      	strb	r2, [r6, #0]
   36e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
   36e38:	60b3      	str	r3, [r6, #8]
   36e3a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   36e3e:	e9c6 2303 	strd	r2, r3, [r6, #12]
   36e42:	f8db 0000 	ldr.w	r0, [fp]
   36e46:	6803      	ldr	r3, [r0, #0]
   36e48:	68db      	ldr	r3, [r3, #12]
   36e4a:	4798      	blx	r3
   36e4c:	2800      	cmp	r0, #0
   36e4e:	ddbe      	ble.n	36dce <gnss_interface_read+0x8e>
   36e50:	4620      	mov	r0, r4
   36e52:	682b      	ldr	r3, [r5, #0]
   36e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   36e58:	602b      	str	r3, [r5, #0]
   36e5a:	b037      	add	sp, #220	; 0xdc
   36e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36e60:	783b      	ldrb	r3, [r7, #0]
   36e62:	4604      	mov	r4, r0
   36e64:	2b00      	cmp	r3, #0
   36e66:	d19f      	bne.n	36da8 <gnss_interface_read+0x68>
   36e68:	e7c8      	b.n	36dfc <gnss_interface_read+0xbc>
   36e6a:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   36e6e:	d183      	bne.n	36d78 <gnss_interface_read+0x38>
   36e70:	202d      	movs	r0, #45	; 0x2d
   36e72:	f7f2 fbf3 	bl	2965c <bsd_os_errno_set>
   36e76:	f04f 34ff 	mov.w	r4, #4294967295
   36e7a:	e7a8      	b.n	36dce <gnss_interface_read+0x8e>
   36e7c:	a808      	add	r0, sp, #32
   36e7e:	f7e6 f9ed 	bl	1d25c <strlen>
   36e82:	2302      	movs	r3, #2
   36e84:	1c44      	adds	r4, r0, #1
   36e86:	b2a4      	uxth	r4, r4
   36e88:	f806 3b08 	strb.w	r3, [r6], #8
   36e8c:	4622      	mov	r2, r4
   36e8e:	a908      	add	r1, sp, #32
   36e90:	4630      	mov	r0, r6
   36e92:	f00d ff28 	bl	44ce6 <memcpy>
   36e96:	3408      	adds	r4, #8
   36e98:	e7d3      	b.n	36e42 <gnss_interface_read+0x102>
   36e9a:	bf00      	nop
   36e9c:	49765443 	.word	0x49765443
   36ea0:	20025a38 	.word	0x20025a38
   36ea4:	2002d6b8 	.word	0x2002d6b8
   36ea8:	20025a40 	.word	0x20025a40
   36eac:	2002074c 	.word	0x2002074c
   36eb0:	2401      	movs	r4, #1
   36eb2:	a809      	add	r0, sp, #36	; 0x24
   36eb4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   36eb6:	e9c6 0102 	strd	r0, r1, [r6, #8]
   36eba:	e9c6 2304 	strd	r2, r3, [r6, #16]
   36ebe:	990d      	ldr	r1, [sp, #52]	; 0x34
   36ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   36ec2:	7034      	strb	r4, [r6, #0]
   36ec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   36ec6:	61b1      	str	r1, [r6, #24]
   36ec8:	9910      	ldr	r1, [sp, #64]	; 0x40
   36eca:	61f2      	str	r2, [r6, #28]
   36ecc:	6233      	str	r3, [r6, #32]
   36ece:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   36ed2:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   36ed6:	6271      	str	r1, [r6, #36]	; 0x24
   36ed8:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   36edc:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   36ee0:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   36ee4:	6373      	str	r3, [r6, #52]	; 0x34
   36ee6:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   36eea:	63b1      	str	r1, [r6, #56]	; 0x38
   36eec:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   36ef0:	63f2      	str	r2, [r6, #60]	; 0x3c
   36ef2:	6433      	str	r3, [r6, #64]	; 0x40
   36ef4:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   36ef8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   36efc:	8531      	strh	r1, [r6, #40]	; 0x28
   36efe:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   36f02:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   36f06:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   36f0a:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   36f0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   36f10:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   36f14:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   36f18:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   36f1c:	f3c3 210f 	ubfx	r1, r3, #8, #16
   36f20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   36f22:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   36f26:	8630      	strh	r0, [r6, #48]	; 0x30
   36f28:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   36f2c:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   36f30:	f3c3 230f 	ubfx	r3, r3, #8, #16
   36f34:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   36f38:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   36f3c:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   36f40:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   36f44:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   36f48:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   36f4c:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   36f50:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   36f54:	64f3      	str	r3, [r6, #76]	; 0x4c
   36f56:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   36f5a:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   36f5e:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   36f62:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   36f66:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   36f6a:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   36f6e:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   36f72:	65b1      	str	r1, [r6, #88]	; 0x58
   36f74:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   36f78:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   36f7c:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   36f80:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   36f84:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   36f88:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   36f8c:	6672      	str	r2, [r6, #100]	; 0x64
   36f8e:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   36f92:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   36f96:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   36f9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   36f9c:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   36fa0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   36fa4:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   36fa8:	f3c2 220f 	ubfx	r2, r2, #8, #16
   36fac:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   36fb0:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   36fb4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   36fb8:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   36fbc:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   36fc0:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   36fc4:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   36fc8:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   36fcc:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   36fd0:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   36fd4:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   36fd8:	6733      	str	r3, [r6, #112]	; 0x70
   36fda:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   36fde:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   36fe2:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   36fe6:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   36fea:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   36fee:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   36ff2:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   36ff6:	67f1      	str	r1, [r6, #124]	; 0x7c
   36ff8:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   36ffc:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   37000:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   37004:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   37008:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   3700c:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   37010:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   37014:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   37018:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   3701c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   3701e:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   37022:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   37026:	f3c3 210f 	ubfx	r1, r3, #8, #16
   3702a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   3702c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   37030:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   37034:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   37038:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   3703c:	f3c3 230f 	ubfx	r3, r3, #8, #16
   37040:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   37044:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   37048:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   3704c:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   37050:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   37054:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   37058:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   3705c:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   37060:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   37064:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   37068:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   3706c:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   37070:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   37074:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   37078:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   3707c:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   37080:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   37084:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   37088:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   3708c:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   37090:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   37094:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   37098:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   3709c:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   370a0:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   370a4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   370a8:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   370ac:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   370b0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   370b2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   370b6:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   370ba:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   370be:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   370c2:	f3c2 220f 	ubfx	r2, r2, #8, #16
   370c6:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   370ca:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   370ce:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   370d2:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   370d6:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   370da:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   370de:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   370e2:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   370e6:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   370ea:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   370ee:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   370f2:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   370f6:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   370fa:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   370fe:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   37102:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   37106:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   3710a:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   3710e:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   37112:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   37116:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   3711a:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   3711e:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   37122:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   37126:	24d8      	movs	r4, #216	; 0xd8
   37128:	e68b      	b.n	36e42 <gnss_interface_read+0x102>
   3712a:	2039      	movs	r0, #57	; 0x39
   3712c:	f7f2 fa96 	bl	2965c <bsd_os_errno_set>
   37130:	f04f 34ff 	mov.w	r4, #4294967295
   37134:	e64b      	b.n	36dce <gnss_interface_read+0x8e>
   37136:	2016      	movs	r0, #22
   37138:	f7f2 fa90 	bl	2965c <bsd_os_errno_set>
   3713c:	f04f 34ff 	mov.w	r4, #4294967295
   37140:	e645      	b.n	36dce <gnss_interface_read+0x8e>
   37142:	2009      	movs	r0, #9
   37144:	f7f2 fa8a 	bl	2965c <bsd_os_errno_set>
   37148:	f04f 34ff 	mov.w	r4, #4294967295
   3714c:	e63f      	b.n	36dce <gnss_interface_read+0x8e>
   3714e:	bf00      	nop

00037150 <gnss_interface_setopt>:
   37150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37154:	4db9      	ldr	r5, [pc, #740]	; (3743c <gnss_interface_setopt+0x2ec>)
   37156:	b087      	sub	sp, #28
   37158:	682c      	ldr	r4, [r5, #0]
   3715a:	4690      	mov	r8, r2
   3715c:	b2a4      	uxth	r4, r4
   3715e:	2c02      	cmp	r4, #2
   37160:	d00c      	beq.n	3717c <gnss_interface_setopt+0x2c>
   37162:	2a08      	cmp	r2, #8
   37164:	d00a      	beq.n	3717c <gnss_interface_setopt+0x2c>
   37166:	3a0a      	subs	r2, #10
   37168:	2a01      	cmp	r2, #1
   3716a:	d907      	bls.n	3717c <gnss_interface_setopt+0x2c>
   3716c:	200e      	movs	r0, #14
   3716e:	f7f2 fa75 	bl	2965c <bsd_os_errno_set>
   37172:	f04f 30ff 	mov.w	r0, #4294967295
   37176:	b007      	add	sp, #28
   37178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3717c:	682a      	ldr	r2, [r5, #0]
   3717e:	0252      	lsls	r2, r2, #9
   37180:	f100 8155 	bmi.w	3742e <gnss_interface_setopt+0x2de>
   37184:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   37188:	f040 8145 	bne.w	37416 <gnss_interface_setopt+0x2c6>
   3718c:	4aac      	ldr	r2, [pc, #688]	; (37440 <gnss_interface_setopt+0x2f0>)
   3718e:	4290      	cmp	r0, r2
   37190:	f040 8147 	bne.w	37422 <gnss_interface_setopt+0x2d2>
   37194:	f1a8 020a 	sub.w	r2, r8, #10
   37198:	2a01      	cmp	r2, #1
   3719a:	d902      	bls.n	371a2 <gnss_interface_setopt+0x52>
   3719c:	2b00      	cmp	r3, #0
   3719e:	f000 811e 	beq.w	373de <gnss_interface_setopt+0x28e>
   371a2:	f108 32ff 	add.w	r2, r8, #4294967295
   371a6:	2a0a      	cmp	r2, #10
   371a8:	f200 8119 	bhi.w	373de <gnss_interface_setopt+0x28e>
   371ac:	e8df f012 	tbh	[pc, r2, lsl #1]
   371b0:	00950088 	.word	0x00950088
   371b4:	00ab00a1 	.word	0x00ab00a1
   371b8:	00c200b7 	.word	0x00c200b7
   371bc:	00e600ce 	.word	0x00e600ce
   371c0:	010800fc 	.word	0x010800fc
   371c4:	000b      	.short	0x000b
   371c6:	682b      	ldr	r3, [r5, #0]
   371c8:	b29b      	uxth	r3, r3
   371ca:	2b04      	cmp	r3, #4
   371cc:	d1ce      	bne.n	3716c <gnss_interface_setopt+0x1c>
   371ce:	2203      	movs	r2, #3
   371d0:	f241 0604 	movw	r6, #4100	; 0x1004
   371d4:	2300      	movs	r3, #0
   371d6:	4637      	mov	r7, r6
   371d8:	f88d 2008 	strb.w	r2, [sp, #8]
   371dc:	f88d 3009 	strb.w	r3, [sp, #9]
   371e0:	f88d 300a 	strb.w	r3, [sp, #10]
   371e4:	f88d 300b 	strb.w	r3, [sp, #11]
   371e8:	f88d 300c 	strb.w	r3, [sp, #12]
   371ec:	682b      	ldr	r3, [r5, #0]
   371ee:	2112      	movs	r1, #18
   371f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   371f4:	4668      	mov	r0, sp
   371f6:	602b      	str	r3, [r5, #0]
   371f8:	f002 fc1e 	bl	39a38 <rpc_gnss_client_request_alloc>
   371fc:	4604      	mov	r4, r0
   371fe:	9800      	ldr	r0, [sp, #0]
   37200:	2c00      	cmp	r4, #0
   37202:	f040 80f2 	bne.w	373ea <gnss_interface_setopt+0x29a>
   37206:	2800      	cmp	r0, #0
   37208:	f000 80f6 	beq.w	373f8 <gnss_interface_setopt+0x2a8>
   3720c:	2212      	movs	r2, #18
   3720e:	f04f 0976 	mov.w	r9, #118	; 0x76
   37212:	f04f 0e49 	mov.w	lr, #73	; 0x49
   37216:	f04f 0b43 	mov.w	fp, #67	; 0x43
   3721a:	f04f 0a54 	mov.w	sl, #84	; 0x54
   3721e:	f8df c22c 	ldr.w	ip, [pc, #556]	; 3744c <gnss_interface_setopt+0x2fc>
   37222:	a906      	add	r1, sp, #24
   37224:	f8bc 3000 	ldrh.w	r3, [ip]
   37228:	f880 900e 	strb.w	r9, [r0, #14]
   3722c:	3301      	adds	r3, #1
   3722e:	b29b      	uxth	r3, r3
   37230:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   37234:	f841 6d14 	str.w	r6, [r1, #-20]!
   37238:	7144      	strb	r4, [r0, #5]
   3723a:	7184      	strb	r4, [r0, #6]
   3723c:	71c4      	strb	r4, [r0, #7]
   3723e:	7204      	strb	r4, [r0, #8]
   37240:	7244      	strb	r4, [r0, #9]
   37242:	7284      	strb	r4, [r0, #10]
   37244:	72c4      	strb	r4, [r0, #11]
   37246:	7102      	strb	r2, [r0, #4]
   37248:	f880 b00c 	strb.w	fp, [r0, #12]
   3724c:	f880 a00d 	strb.w	sl, [r0, #13]
   37250:	f880 e00f 	strb.w	lr, [r0, #15]
   37254:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 37450 <gnss_interface_setopt+0x300>
   37258:	6800      	ldr	r0, [r0, #0]
   3725a:	f8ac 3000 	strh.w	r3, [ip]
   3725e:	f00d fd42 	bl	44ce6 <memcpy>
   37262:	4639      	mov	r1, r7
   37264:	9800      	ldr	r0, [sp, #0]
   37266:	f8c9 4000 	str.w	r4, [r9]
   3726a:	f002 fbf9 	bl	39a60 <rpc_gnss_client_request_send>
   3726e:	2800      	cmp	r0, #0
   37270:	f040 80c7 	bne.w	37402 <gnss_interface_setopt+0x2b2>
   37274:	4f73      	ldr	r7, [pc, #460]	; (37444 <gnss_interface_setopt+0x2f4>)
   37276:	4e72      	ldr	r6, [pc, #456]	; (37440 <gnss_interface_setopt+0x2f0>)
   37278:	4639      	mov	r1, r7
   3727a:	4630      	mov	r0, r6
   3727c:	f7f2 f936 	bl	294ec <bsd_os_timedwait>
   37280:	682c      	ldr	r4, [r5, #0]
   37282:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   37286:	d1f7      	bne.n	37278 <gnss_interface_setopt+0x128>
   37288:	f8d9 0000 	ldr.w	r0, [r9]
   3728c:	b118      	cbz	r0, 37296 <gnss_interface_setopt+0x146>
   3728e:	f002 fc05 	bl	39a9c <rpc_gnss_client_data_free>
   37292:	f8c9 4000 	str.w	r4, [r9]
   37296:	682b      	ldr	r3, [r5, #0]
   37298:	021b      	lsls	r3, r3, #8
   3729a:	f140 8098 	bpl.w	373ce <gnss_interface_setopt+0x27e>
   3729e:	f1b8 0f08 	cmp.w	r8, #8
   372a2:	f040 809a 	bne.w	373da <gnss_interface_setopt+0x28a>
   372a6:	4b68      	ldr	r3, [pc, #416]	; (37448 <gnss_interface_setopt+0x2f8>)
   372a8:	6818      	ldr	r0, [r3, #0]
   372aa:	6803      	ldr	r3, [r0, #0]
   372ac:	691b      	ldr	r3, [r3, #16]
   372ae:	4798      	blx	r3
   372b0:	2000      	movs	r0, #0
   372b2:	682b      	ldr	r3, [r5, #0]
   372b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   372b8:	602b      	str	r3, [r5, #0]
   372ba:	b007      	add	sp, #28
   372bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   372c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   372c2:	2a02      	cmp	r2, #2
   372c4:	f040 808b 	bne.w	373de <gnss_interface_setopt+0x28e>
   372c8:	2208      	movs	r2, #8
   372ca:	f241 1603 	movw	r6, #4355	; 0x1103
   372ce:	881b      	ldrh	r3, [r3, #0]
   372d0:	9202      	str	r2, [sp, #8]
   372d2:	f8ad 300f 	strh.w	r3, [sp, #15]
   372d6:	4637      	mov	r7, r6
   372d8:	e788      	b.n	371ec <gnss_interface_setopt+0x9c>
   372da:	9a10      	ldr	r2, [sp, #64]	; 0x40
   372dc:	2a02      	cmp	r2, #2
   372de:	d17e      	bne.n	373de <gnss_interface_setopt+0x28e>
   372e0:	2210      	movs	r2, #16
   372e2:	f241 1603 	movw	r6, #4355	; 0x1103
   372e6:	881b      	ldrh	r3, [r3, #0]
   372e8:	9202      	str	r2, [sp, #8]
   372ea:	f8ad 3011 	strh.w	r3, [sp, #17]
   372ee:	4637      	mov	r7, r6
   372f0:	e77c      	b.n	371ec <gnss_interface_setopt+0x9c>
   372f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   372f4:	2a01      	cmp	r2, #1
   372f6:	d172      	bne.n	373de <gnss_interface_setopt+0x28e>
   372f8:	781b      	ldrb	r3, [r3, #0]
   372fa:	2b01      	cmp	r3, #1
   372fc:	d16f      	bne.n	373de <gnss_interface_setopt+0x28e>
   372fe:	f241 1603 	movw	r6, #4355	; 0x1103
   37302:	4637      	mov	r7, r6
   37304:	e772      	b.n	371ec <gnss_interface_setopt+0x9c>
   37306:	9a10      	ldr	r2, [sp, #64]	; 0x40
   37308:	2a02      	cmp	r2, #2
   3730a:	d168      	bne.n	373de <gnss_interface_setopt+0x28e>
   3730c:	2220      	movs	r2, #32
   3730e:	f241 1603 	movw	r6, #4355	; 0x1103
   37312:	881b      	ldrh	r3, [r3, #0]
   37314:	9202      	str	r2, [sp, #8]
   37316:	f8ad 3013 	strh.w	r3, [sp, #19]
   3731a:	4637      	mov	r7, r6
   3731c:	e766      	b.n	371ec <gnss_interface_setopt+0x9c>
   3731e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   37320:	2a01      	cmp	r2, #1
   37322:	d15c      	bne.n	373de <gnss_interface_setopt+0x28e>
   37324:	f241 1603 	movw	r6, #4355	; 0x1103
   37328:	781b      	ldrb	r3, [r3, #0]
   3732a:	9202      	str	r2, [sp, #8]
   3732c:	f88d 300c 	strb.w	r3, [sp, #12]
   37330:	4637      	mov	r7, r6
   37332:	e75b      	b.n	371ec <gnss_interface_setopt+0x9c>
   37334:	9a10      	ldr	r2, [sp, #64]	; 0x40
   37336:	2a01      	cmp	r2, #1
   37338:	d151      	bne.n	373de <gnss_interface_setopt+0x28e>
   3733a:	2202      	movs	r2, #2
   3733c:	f241 1603 	movw	r6, #4355	; 0x1103
   37340:	781b      	ldrb	r3, [r3, #0]
   37342:	9202      	str	r2, [sp, #8]
   37344:	f88d 300d 	strb.w	r3, [sp, #13]
   37348:	4637      	mov	r7, r6
   3734a:	e74f      	b.n	371ec <gnss_interface_setopt+0x9c>
   3734c:	682a      	ldr	r2, [r5, #0]
   3734e:	b292      	uxth	r2, r2
   37350:	2a02      	cmp	r2, #2
   37352:	f47f af0b 	bne.w	3716c <gnss_interface_setopt+0x1c>
   37356:	9a10      	ldr	r2, [sp, #64]	; 0x40
   37358:	2a04      	cmp	r2, #4
   3735a:	d140      	bne.n	373de <gnss_interface_setopt+0x28e>
   3735c:	2101      	movs	r1, #1
   3735e:	f241 0604 	movw	r6, #4100	; 0x1004
   37362:	682a      	ldr	r2, [r5, #0]
   37364:	6818      	ldr	r0, [r3, #0]
   37366:	0c13      	lsrs	r3, r2, #16
   37368:	041b      	lsls	r3, r3, #16
   3736a:	f043 0303 	orr.w	r3, r3, #3
   3736e:	f8cd 0009 	str.w	r0, [sp, #9]
   37372:	602b      	str	r3, [r5, #0]
   37374:	f88d 1008 	strb.w	r1, [sp, #8]
   37378:	4637      	mov	r7, r6
   3737a:	e737      	b.n	371ec <gnss_interface_setopt+0x9c>
   3737c:	682a      	ldr	r2, [r5, #0]
   3737e:	b292      	uxth	r2, r2
   37380:	2a04      	cmp	r2, #4
   37382:	d004      	beq.n	3738e <gnss_interface_setopt+0x23e>
   37384:	682a      	ldr	r2, [r5, #0]
   37386:	b292      	uxth	r2, r2
   37388:	2a02      	cmp	r2, #2
   3738a:	f47f aeef 	bne.w	3716c <gnss_interface_setopt+0x1c>
   3738e:	2200      	movs	r2, #0
   37390:	f88d 2008 	strb.w	r2, [sp, #8]
   37394:	9a10      	ldr	r2, [sp, #64]	; 0x40
   37396:	2a04      	cmp	r2, #4
   37398:	d121      	bne.n	373de <gnss_interface_setopt+0x28e>
   3739a:	f241 0604 	movw	r6, #4100	; 0x1004
   3739e:	681b      	ldr	r3, [r3, #0]
   373a0:	4637      	mov	r7, r6
   373a2:	f8cd 3009 	str.w	r3, [sp, #9]
   373a6:	e721      	b.n	371ec <gnss_interface_setopt+0x9c>
   373a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   373aa:	2a01      	cmp	r2, #1
   373ac:	d117      	bne.n	373de <gnss_interface_setopt+0x28e>
   373ae:	2240      	movs	r2, #64	; 0x40
   373b0:	f241 1603 	movw	r6, #4355	; 0x1103
   373b4:	781b      	ldrb	r3, [r3, #0]
   373b6:	9202      	str	r2, [sp, #8]
   373b8:	f88d 3015 	strb.w	r3, [sp, #21]
   373bc:	4637      	mov	r7, r6
   373be:	e715      	b.n	371ec <gnss_interface_setopt+0x9c>
   373c0:	682b      	ldr	r3, [r5, #0]
   373c2:	b29b      	uxth	r3, r3
   373c4:	2b04      	cmp	r3, #4
   373c6:	f47f aed1 	bne.w	3716c <gnss_interface_setopt+0x1c>
   373ca:	2202      	movs	r2, #2
   373cc:	e700      	b.n	371d0 <gnss_interface_setopt+0x80>
   373ce:	200e      	movs	r0, #14
   373d0:	f7f2 f944 	bl	2965c <bsd_os_errno_set>
   373d4:	f04f 30ff 	mov.w	r0, #4294967295
   373d8:	e76b      	b.n	372b2 <gnss_interface_setopt+0x162>
   373da:	2000      	movs	r0, #0
   373dc:	e769      	b.n	372b2 <gnss_interface_setopt+0x162>
   373de:	2016      	movs	r0, #22
   373e0:	f7f2 f93c 	bl	2965c <bsd_os_errno_set>
   373e4:	f04f 30ff 	mov.w	r0, #4294967295
   373e8:	e6c5      	b.n	37176 <gnss_interface_setopt+0x26>
   373ea:	b128      	cbz	r0, 373f8 <gnss_interface_setopt+0x2a8>
   373ec:	6803      	ldr	r3, [r0, #0]
   373ee:	b11b      	cbz	r3, 373f8 <gnss_interface_setopt+0x2a8>
   373f0:	4618      	mov	r0, r3
   373f2:	f002 fb53 	bl	39a9c <rpc_gnss_client_data_free>
   373f6:	9800      	ldr	r0, [sp, #0]
   373f8:	f002 fb48 	bl	39a8c <rpc_gnss_client_message_free>
   373fc:	2023      	movs	r0, #35	; 0x23
   373fe:	f7f2 f92d 	bl	2965c <bsd_os_errno_set>
   37402:	682b      	ldr	r3, [r5, #0]
   37404:	200e      	movs	r0, #14
   37406:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   3740a:	602b      	str	r3, [r5, #0]
   3740c:	f7f2 f926 	bl	2965c <bsd_os_errno_set>
   37410:	f04f 30ff 	mov.w	r0, #4294967295
   37414:	e6af      	b.n	37176 <gnss_interface_setopt+0x26>
   37416:	202a      	movs	r0, #42	; 0x2a
   37418:	f7f2 f920 	bl	2965c <bsd_os_errno_set>
   3741c:	f04f 30ff 	mov.w	r0, #4294967295
   37420:	e6a9      	b.n	37176 <gnss_interface_setopt+0x26>
   37422:	2009      	movs	r0, #9
   37424:	f7f2 f91a 	bl	2965c <bsd_os_errno_set>
   37428:	f04f 30ff 	mov.w	r0, #4294967295
   3742c:	e6a3      	b.n	37176 <gnss_interface_setopt+0x26>
   3742e:	2073      	movs	r0, #115	; 0x73
   37430:	f7f2 f914 	bl	2965c <bsd_os_errno_set>
   37434:	f04f 30ff 	mov.w	r0, #4294967295
   37438:	e69d      	b.n	37176 <gnss_interface_setopt+0x26>
   3743a:	bf00      	nop
   3743c:	20025a38 	.word	0x20025a38
   37440:	49765443 	.word	0x49765443
   37444:	2002074c 	.word	0x2002074c
   37448:	20025a40 	.word	0x20025a40
   3744c:	2002a5ee 	.word	0x2002a5ee
   37450:	20025a3c 	.word	0x20025a3c

00037454 <gnss_interface_getopt>:
   37454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37458:	4c81      	ldr	r4, [pc, #516]	; (37660 <gnss_interface_getopt+0x20c>)
   3745a:	b087      	sub	sp, #28
   3745c:	6825      	ldr	r5, [r4, #0]
   3745e:	4698      	mov	r8, r3
   37460:	b2ad      	uxth	r5, r5
   37462:	2d02      	cmp	r5, #2
   37464:	9b10      	ldr	r3, [sp, #64]	; 0x40
   37466:	f040 80dd 	bne.w	37624 <gnss_interface_getopt+0x1d0>
   3746a:	6825      	ldr	r5, [r4, #0]
   3746c:	03ee      	lsls	r6, r5, #15
   3746e:	f100 80eb 	bmi.w	37648 <gnss_interface_getopt+0x1f4>
   37472:	6825      	ldr	r5, [r4, #0]
   37474:	01ed      	lsls	r5, r5, #7
   37476:	f100 80ed 	bmi.w	37654 <gnss_interface_getopt+0x200>
   3747a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   3747e:	f040 80d7 	bne.w	37630 <gnss_interface_getopt+0x1dc>
   37482:	4978      	ldr	r1, [pc, #480]	; (37664 <gnss_interface_getopt+0x210>)
   37484:	4288      	cmp	r0, r1
   37486:	f040 80d9 	bne.w	3763c <gnss_interface_getopt+0x1e8>
   3748a:	f1b8 0f00 	cmp.w	r8, #0
   3748e:	d00b      	beq.n	374a8 <gnss_interface_getopt+0x54>
   37490:	b153      	cbz	r3, 374a8 <gnss_interface_getopt+0x54>
   37492:	1e57      	subs	r7, r2, #1
   37494:	2f05      	cmp	r7, #5
   37496:	d807      	bhi.n	374a8 <gnss_interface_getopt+0x54>
   37498:	e8df f007 	tbb	[pc, r7]
   3749c:	0f030f0f 	.word	0x0f030f0f
   374a0:	0303      	.short	0x0303
   374a2:	681b      	ldr	r3, [r3, #0]
   374a4:	2b01      	cmp	r3, #1
   374a6:	d00b      	beq.n	374c0 <gnss_interface_getopt+0x6c>
   374a8:	2016      	movs	r0, #22
   374aa:	f7f2 f8d7 	bl	2965c <bsd_os_errno_set>
   374ae:	f04f 35ff 	mov.w	r5, #4294967295
   374b2:	4628      	mov	r0, r5
   374b4:	b007      	add	sp, #28
   374b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   374ba:	681b      	ldr	r3, [r3, #0]
   374bc:	2b02      	cmp	r3, #2
   374be:	d1f3      	bne.n	374a8 <gnss_interface_getopt+0x54>
   374c0:	6823      	ldr	r3, [r4, #0]
   374c2:	2212      	movs	r2, #18
   374c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   374c8:	2100      	movs	r1, #0
   374ca:	a801      	add	r0, sp, #4
   374cc:	6023      	str	r3, [r4, #0]
   374ce:	f00d fc2a 	bl	44d26 <memset>
   374d2:	2112      	movs	r1, #18
   374d4:	4668      	mov	r0, sp
   374d6:	f002 faaf 	bl	39a38 <rpc_gnss_client_request_alloc>
   374da:	4605      	mov	r5, r0
   374dc:	9800      	ldr	r0, [sp, #0]
   374de:	2d00      	cmp	r5, #0
   374e0:	f040 808a 	bne.w	375f8 <gnss_interface_getopt+0x1a4>
   374e4:	2800      	cmp	r0, #0
   374e6:	f000 808e 	beq.w	37606 <gnss_interface_getopt+0x1b2>
   374ea:	f241 1602 	movw	r6, #4354	; 0x1102
   374ee:	f04f 0e49 	mov.w	lr, #73	; 0x49
   374f2:	2212      	movs	r2, #18
   374f4:	f04f 0976 	mov.w	r9, #118	; 0x76
   374f8:	f04f 0b43 	mov.w	fp, #67	; 0x43
   374fc:	f04f 0a54 	mov.w	sl, #84	; 0x54
   37500:	f8df c168 	ldr.w	ip, [pc, #360]	; 3766c <gnss_interface_getopt+0x218>
   37504:	f880 e00f 	strb.w	lr, [r0, #15]
   37508:	f8bc 3000 	ldrh.w	r3, [ip]
   3750c:	f880 900e 	strb.w	r9, [r0, #14]
   37510:	3301      	adds	r3, #1
   37512:	b29b      	uxth	r3, r3
   37514:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   37518:	f8cd e004 	str.w	lr, [sp, #4]
   3751c:	7145      	strb	r5, [r0, #5]
   3751e:	7185      	strb	r5, [r0, #6]
   37520:	71c5      	strb	r5, [r0, #7]
   37522:	7205      	strb	r5, [r0, #8]
   37524:	7245      	strb	r5, [r0, #9]
   37526:	7285      	strb	r5, [r0, #10]
   37528:	72c5      	strb	r5, [r0, #11]
   3752a:	a901      	add	r1, sp, #4
   3752c:	7102      	strb	r2, [r0, #4]
   3752e:	f880 b00c 	strb.w	fp, [r0, #12]
   37532:	f880 a00d 	strb.w	sl, [r0, #13]
   37536:	f8df 9138 	ldr.w	r9, [pc, #312]	; 37670 <gnss_interface_getopt+0x21c>
   3753a:	6800      	ldr	r0, [r0, #0]
   3753c:	f8ac 3000 	strh.w	r3, [ip]
   37540:	f00d fbd1 	bl	44ce6 <memcpy>
   37544:	4631      	mov	r1, r6
   37546:	9800      	ldr	r0, [sp, #0]
   37548:	f8c9 5000 	str.w	r5, [r9]
   3754c:	f002 fa88 	bl	39a60 <rpc_gnss_client_request_send>
   37550:	2800      	cmp	r0, #0
   37552:	d15d      	bne.n	37610 <gnss_interface_getopt+0x1bc>
   37554:	4e44      	ldr	r6, [pc, #272]	; (37668 <gnss_interface_getopt+0x214>)
   37556:	4d43      	ldr	r5, [pc, #268]	; (37664 <gnss_interface_getopt+0x210>)
   37558:	4631      	mov	r1, r6
   3755a:	4628      	mov	r0, r5
   3755c:	f7f1 ffc6 	bl	294ec <bsd_os_timedwait>
   37560:	6823      	ldr	r3, [r4, #0]
   37562:	01db      	lsls	r3, r3, #7
   37564:	d4f8      	bmi.n	37558 <gnss_interface_getopt+0x104>
   37566:	f8d9 0000 	ldr.w	r0, [r9]
   3756a:	b1d8      	cbz	r0, 375a4 <gnss_interface_getopt+0x150>
   3756c:	6825      	ldr	r5, [r4, #0]
   3756e:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   37572:	d00f      	beq.n	37594 <gnss_interface_getopt+0x140>
   37574:	2f05      	cmp	r7, #5
   37576:	d837      	bhi.n	375e8 <gnss_interface_getopt+0x194>
   37578:	e8df f007 	tbb	[pc, r7]
   3757c:	2b26201a 	.word	0x2b26201a
   37580:	0331      	.short	0x0331
   37582:	2500      	movs	r5, #0
   37584:	7b43      	ldrb	r3, [r0, #13]
   37586:	f888 3000 	strb.w	r3, [r8]
   3758a:	f002 fa87 	bl	39a9c <rpc_gnss_client_data_free>
   3758e:	2300      	movs	r3, #0
   37590:	f8c9 3000 	str.w	r3, [r9]
   37594:	6823      	ldr	r3, [r4, #0]
   37596:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   3759a:	6023      	str	r3, [r4, #0]
   3759c:	4628      	mov	r0, r5
   3759e:	b007      	add	sp, #28
   375a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   375a4:	6823      	ldr	r3, [r4, #0]
   375a6:	4605      	mov	r5, r0
   375a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   375ac:	6023      	str	r3, [r4, #0]
   375ae:	e7f5      	b.n	3759c <gnss_interface_getopt+0x148>
   375b0:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   375b4:	2500      	movs	r5, #0
   375b6:	f8a8 3000 	strh.w	r3, [r8]
   375ba:	e7e6      	b.n	3758a <gnss_interface_getopt+0x136>
   375bc:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   375c0:	2500      	movs	r5, #0
   375c2:	f8a8 3000 	strh.w	r3, [r8]
   375c6:	e7e0      	b.n	3758a <gnss_interface_getopt+0x136>
   375c8:	7b83      	ldrb	r3, [r0, #14]
   375ca:	2500      	movs	r5, #0
   375cc:	f888 3000 	strb.w	r3, [r8]
   375d0:	e7db      	b.n	3758a <gnss_interface_getopt+0x136>
   375d2:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   375d6:	2500      	movs	r5, #0
   375d8:	f8a8 3000 	strh.w	r3, [r8]
   375dc:	e7d5      	b.n	3758a <gnss_interface_getopt+0x136>
   375de:	7b03      	ldrb	r3, [r0, #12]
   375e0:	2500      	movs	r5, #0
   375e2:	f888 3000 	strb.w	r3, [r8]
   375e6:	e7d0      	b.n	3758a <gnss_interface_getopt+0x136>
   375e8:	2016      	movs	r0, #22
   375ea:	f7f2 f837 	bl	2965c <bsd_os_errno_set>
   375ee:	f04f 35ff 	mov.w	r5, #4294967295
   375f2:	f8d9 0000 	ldr.w	r0, [r9]
   375f6:	e7c8      	b.n	3758a <gnss_interface_getopt+0x136>
   375f8:	b128      	cbz	r0, 37606 <gnss_interface_getopt+0x1b2>
   375fa:	6803      	ldr	r3, [r0, #0]
   375fc:	b11b      	cbz	r3, 37606 <gnss_interface_getopt+0x1b2>
   375fe:	4618      	mov	r0, r3
   37600:	f002 fa4c 	bl	39a9c <rpc_gnss_client_data_free>
   37604:	9800      	ldr	r0, [sp, #0]
   37606:	f002 fa41 	bl	39a8c <rpc_gnss_client_message_free>
   3760a:	2023      	movs	r0, #35	; 0x23
   3760c:	f7f2 f826 	bl	2965c <bsd_os_errno_set>
   37610:	6823      	ldr	r3, [r4, #0]
   37612:	200e      	movs	r0, #14
   37614:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   37618:	6023      	str	r3, [r4, #0]
   3761a:	f04f 35ff 	mov.w	r5, #4294967295
   3761e:	f7f2 f81d 	bl	2965c <bsd_os_errno_set>
   37622:	e746      	b.n	374b2 <gnss_interface_getopt+0x5e>
   37624:	200e      	movs	r0, #14
   37626:	f7f2 f819 	bl	2965c <bsd_os_errno_set>
   3762a:	f04f 35ff 	mov.w	r5, #4294967295
   3762e:	e740      	b.n	374b2 <gnss_interface_getopt+0x5e>
   37630:	202a      	movs	r0, #42	; 0x2a
   37632:	f7f2 f813 	bl	2965c <bsd_os_errno_set>
   37636:	f04f 35ff 	mov.w	r5, #4294967295
   3763a:	e73a      	b.n	374b2 <gnss_interface_getopt+0x5e>
   3763c:	2009      	movs	r0, #9
   3763e:	f7f2 f80d 	bl	2965c <bsd_os_errno_set>
   37642:	f04f 35ff 	mov.w	r5, #4294967295
   37646:	e734      	b.n	374b2 <gnss_interface_getopt+0x5e>
   37648:	2005      	movs	r0, #5
   3764a:	f7f2 f807 	bl	2965c <bsd_os_errno_set>
   3764e:	f04f 35ff 	mov.w	r5, #4294967295
   37652:	e72e      	b.n	374b2 <gnss_interface_getopt+0x5e>
   37654:	2073      	movs	r0, #115	; 0x73
   37656:	f7f2 f801 	bl	2965c <bsd_os_errno_set>
   3765a:	f04f 35ff 	mov.w	r5, #4294967295
   3765e:	e728      	b.n	374b2 <gnss_interface_getopt+0x5e>
   37660:	20025a38 	.word	0x20025a38
   37664:	49765443 	.word	0x49765443
   37668:	2002074c 	.word	0x2002074c
   3766c:	2002a5ee 	.word	0x2002a5ee
   37670:	20025a3c 	.word	0x20025a3c

00037674 <gnss_interface_init>:
   37674:	2100      	movs	r1, #0
   37676:	b538      	push	{r3, r4, r5, lr}
   37678:	4c0a      	ldr	r4, [pc, #40]	; (376a4 <gnss_interface_init+0x30>)
   3767a:	4d0b      	ldr	r5, [pc, #44]	; (376a8 <gnss_interface_init+0x34>)
   3767c:	6822      	ldr	r2, [r4, #0]
   3767e:	480b      	ldr	r0, [pc, #44]	; (376ac <gnss_interface_init+0x38>)
   37680:	4b0b      	ldr	r3, [pc, #44]	; (376b0 <gnss_interface_init+0x3c>)
   37682:	402a      	ands	r2, r5
   37684:	6022      	str	r2, [r4, #0]
   37686:	8001      	strh	r1, [r0, #0]
   37688:	6019      	str	r1, [r3, #0]
   3768a:	f002 f9cb 	bl	39a24 <rpc_gnss_client_init>
   3768e:	b938      	cbnz	r0, 376a0 <gnss_interface_init+0x2c>
   37690:	2101      	movs	r1, #1
   37692:	6823      	ldr	r3, [r4, #0]
   37694:	4a07      	ldr	r2, [pc, #28]	; (376b4 <gnss_interface_init+0x40>)
   37696:	402b      	ands	r3, r5
   37698:	430b      	orrs	r3, r1
   3769a:	7011      	strb	r1, [r2, #0]
   3769c:	6023      	str	r3, [r4, #0]
   3769e:	bd38      	pop	{r3, r4, r5, pc}
   376a0:	2003      	movs	r0, #3
   376a2:	bd38      	pop	{r3, r4, r5, pc}
   376a4:	20025a38 	.word	0x20025a38
   376a8:	ffff0000 	.word	0xffff0000
   376ac:	2002a5ee 	.word	0x2002a5ee
   376b0:	20025a3c 	.word	0x20025a3c
   376b4:	2002d6b8 	.word	0x2002d6b8

000376b8 <gnss_interface_deinit>:
   376b8:	b538      	push	{r3, r4, r5, lr}
   376ba:	4b0b      	ldr	r3, [pc, #44]	; (376e8 <gnss_interface_deinit+0x30>)
   376bc:	681b      	ldr	r3, [r3, #0]
   376be:	b29b      	uxth	r3, r3
   376c0:	b90b      	cbnz	r3, 376c6 <gnss_interface_deinit+0xe>
   376c2:	2000      	movs	r0, #0
   376c4:	bd38      	pop	{r3, r4, r5, pc}
   376c6:	f002 f9b3 	bl	39a30 <rpc_gnss_client_deinit>
   376ca:	4604      	mov	r4, r0
   376cc:	b950      	cbnz	r0, 376e4 <gnss_interface_deinit+0x2c>
   376ce:	4d07      	ldr	r5, [pc, #28]	; (376ec <gnss_interface_deinit+0x34>)
   376d0:	4b07      	ldr	r3, [pc, #28]	; (376f0 <gnss_interface_deinit+0x38>)
   376d2:	6828      	ldr	r0, [r5, #0]
   376d4:	701c      	strb	r4, [r3, #0]
   376d6:	2800      	cmp	r0, #0
   376d8:	d0f3      	beq.n	376c2 <gnss_interface_deinit+0xa>
   376da:	f002 fae9 	bl	39cb0 <packet_handler_delete>
   376de:	602c      	str	r4, [r5, #0]
   376e0:	4620      	mov	r0, r4
   376e2:	bd38      	pop	{r3, r4, r5, pc}
   376e4:	2003      	movs	r0, #3
   376e6:	bd38      	pop	{r3, r4, r5, pc}
   376e8:	20025a38 	.word	0x20025a38
   376ec:	20025a40 	.word	0x20025a40
   376f0:	2002d6b8 	.word	0x2002d6b8

000376f4 <gnss_interface_open>:
   376f4:	b510      	push	{r4, lr}
   376f6:	4b1c      	ldr	r3, [pc, #112]	; (37768 <gnss_interface_open+0x74>)
   376f8:	781b      	ldrb	r3, [r3, #0]
   376fa:	b34b      	cbz	r3, 37750 <gnss_interface_open+0x5c>
   376fc:	2902      	cmp	r1, #2
   376fe:	d121      	bne.n	37744 <gnss_interface_open+0x50>
   37700:	4c1a      	ldr	r4, [pc, #104]	; (3776c <gnss_interface_open+0x78>)
   37702:	6823      	ldr	r3, [r4, #0]
   37704:	b29b      	uxth	r3, r3
   37706:	2b01      	cmp	r3, #1
   37708:	d116      	bne.n	37738 <gnss_interface_open+0x44>
   3770a:	6823      	ldr	r3, [r4, #0]
   3770c:	4608      	mov	r0, r1
   3770e:	0c1b      	lsrs	r3, r3, #16
   37710:	041b      	lsls	r3, r3, #16
   37712:	f043 0302 	orr.w	r3, r3, #2
   37716:	2200      	movs	r2, #0
   37718:	4915      	ldr	r1, [pc, #84]	; (37770 <gnss_interface_open+0x7c>)
   3771a:	6023      	str	r3, [r4, #0]
   3771c:	f002 faa8 	bl	39c70 <packet_handler_create>
   37720:	4a14      	ldr	r2, [pc, #80]	; (37774 <gnss_interface_open+0x80>)
   37722:	6010      	str	r0, [r2, #0]
   37724:	b1d0      	cbz	r0, 3775c <gnss_interface_open+0x68>
   37726:	6823      	ldr	r3, [r4, #0]
   37728:	6802      	ldr	r2, [r0, #0]
   3772a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3772e:	6812      	ldr	r2, [r2, #0]
   37730:	6023      	str	r3, [r4, #0]
   37732:	4790      	blx	r2
   37734:	4810      	ldr	r0, [pc, #64]	; (37778 <gnss_interface_open+0x84>)
   37736:	bd10      	pop	{r4, pc}
   37738:	2005      	movs	r0, #5
   3773a:	f7f1 ff8f 	bl	2965c <bsd_os_errno_set>
   3773e:	f04f 30ff 	mov.w	r0, #4294967295
   37742:	bd10      	pop	{r4, pc}
   37744:	2029      	movs	r0, #41	; 0x29
   37746:	f7f1 ff89 	bl	2965c <bsd_os_errno_set>
   3774a:	f04f 30ff 	mov.w	r0, #4294967295
   3774e:	bd10      	pop	{r4, pc}
   37750:	2070      	movs	r0, #112	; 0x70
   37752:	f7f1 ff83 	bl	2965c <bsd_os_errno_set>
   37756:	f04f 30ff 	mov.w	r0, #4294967295
   3775a:	bd10      	pop	{r4, pc}
   3775c:	200e      	movs	r0, #14
   3775e:	f7f1 ff7d 	bl	2965c <bsd_os_errno_set>
   37762:	f04f 30ff 	mov.w	r0, #4294967295
   37766:	bd10      	pop	{r4, pc}
   37768:	2002d6b8 	.word	0x2002d6b8
   3776c:	20025a38 	.word	0x20025a38
   37770:	00036995 	.word	0x00036995
   37774:	20025a40 	.word	0x20025a40
   37778:	49765443 	.word	0x49765443

0003777c <gnss_interface_close>:
   3777c:	b530      	push	{r4, r5, lr}
   3777e:	4b15      	ldr	r3, [pc, #84]	; (377d4 <gnss_interface_close+0x58>)
   37780:	b085      	sub	sp, #20
   37782:	4298      	cmp	r0, r3
   37784:	d11f      	bne.n	377c6 <gnss_interface_close+0x4a>
   37786:	4c14      	ldr	r4, [pc, #80]	; (377d8 <gnss_interface_close+0x5c>)
   37788:	6822      	ldr	r2, [r4, #0]
   3778a:	b292      	uxth	r2, r2
   3778c:	2a04      	cmp	r2, #4
   3778e:	d00f      	beq.n	377b0 <gnss_interface_close+0x34>
   37790:	4d12      	ldr	r5, [pc, #72]	; (377dc <gnss_interface_close+0x60>)
   37792:	6828      	ldr	r0, [r5, #0]
   37794:	b118      	cbz	r0, 3779e <gnss_interface_close+0x22>
   37796:	f002 fa8b 	bl	39cb0 <packet_handler_delete>
   3779a:	2300      	movs	r3, #0
   3779c:	602b      	str	r3, [r5, #0]
   3779e:	2000      	movs	r0, #0
   377a0:	6823      	ldr	r3, [r4, #0]
   377a2:	0c1b      	lsrs	r3, r3, #16
   377a4:	041b      	lsls	r3, r3, #16
   377a6:	f043 0301 	orr.w	r3, r3, #1
   377aa:	6023      	str	r3, [r4, #0]
   377ac:	b005      	add	sp, #20
   377ae:	bd30      	pop	{r4, r5, pc}
   377b0:	2100      	movs	r1, #0
   377b2:	ab04      	add	r3, sp, #16
   377b4:	f843 1d04 	str.w	r1, [r3, #-4]!
   377b8:	9200      	str	r2, [sp, #0]
   377ba:	f44f 7101 	mov.w	r1, #516	; 0x204
   377be:	2208      	movs	r2, #8
   377c0:	f001 ffb0 	bl	39724 <nrf_setsockopt>
   377c4:	e7e4      	b.n	37790 <gnss_interface_close+0x14>
   377c6:	2009      	movs	r0, #9
   377c8:	f7f1 ff48 	bl	2965c <bsd_os_errno_set>
   377cc:	f04f 30ff 	mov.w	r0, #4294967295
   377d0:	e7ec      	b.n	377ac <gnss_interface_close+0x30>
   377d2:	bf00      	nop
   377d4:	49765443 	.word	0x49765443
   377d8:	20025a38 	.word	0x20025a38
   377dc:	20025a40 	.word	0x20025a40

000377e0 <rpc_logobj_client_evt_handler>:
   377e0:	b120      	cbz	r0, 377ec <rpc_logobj_client_evt_handler+0xc>
   377e2:	f850 1b08 	ldr.w	r1, [r0], #8
   377e6:	0c09      	lsrs	r1, r1, #16
   377e8:	f7fb b884 	b.w	328f4 <logobj_event_handler>
   377ec:	4770      	bx	lr
   377ee:	bf00      	nop

000377f0 <rpc_logobj_client_init>:
   377f0:	4801      	ldr	r0, [pc, #4]	; (377f8 <rpc_logobj_client_init+0x8>)
   377f2:	f7fe bfcb 	b.w	3678c <rpc_client_register>
   377f6:	bf00      	nop
   377f8:	00046fc8 	.word	0x00046fc8

000377fc <rpc_logobj_client_deinit>:
   377fc:	2009      	movs	r0, #9
   377fe:	f7ff b82f 	b.w	36860 <rpc_client_unregister>
   37802:	bf00      	nop

00037804 <rpc_logobj_client_request_alloc>:
   37804:	2300      	movs	r3, #0
   37806:	b510      	push	{r4, lr}
   37808:	b082      	sub	sp, #8
   3780a:	9301      	str	r3, [sp, #4]
   3780c:	b961      	cbnz	r1, 37828 <rpc_logobj_client_request_alloc+0x24>
   3780e:	b170      	cbz	r0, 3782e <rpc_logobj_client_request_alloc+0x2a>
   37810:	4604      	mov	r4, r0
   37812:	aa01      	add	r2, sp, #4
   37814:	2009      	movs	r0, #9
   37816:	f7ff f879 	bl	3690c <rpc_message_alloc>
   3781a:	b918      	cbnz	r0, 37824 <rpc_logobj_client_request_alloc+0x20>
   3781c:	9b01      	ldr	r3, [sp, #4]
   3781e:	b10b      	cbz	r3, 37824 <rpc_logobj_client_request_alloc+0x20>
   37820:	3308      	adds	r3, #8
   37822:	6023      	str	r3, [r4, #0]
   37824:	b002      	add	sp, #8
   37826:	bd10      	pop	{r4, pc}
   37828:	200f      	movs	r0, #15
   3782a:	b002      	add	sp, #8
   3782c:	bd10      	pop	{r4, pc}
   3782e:	200e      	movs	r0, #14
   37830:	b002      	add	sp, #8
   37832:	bd10      	pop	{r4, pc}

00037834 <rpc_logobj_client_request_send>:
   37834:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   37838:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   3783c:	d10b      	bne.n	37856 <rpc_logobj_client_request_send+0x22>
   3783e:	b160      	cbz	r0, 3785a <rpc_logobj_client_request_send+0x26>
   37840:	4603      	mov	r3, r0
   37842:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   37846:	2009      	movs	r0, #9
   37848:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3784c:	f843 1d08 	str.w	r1, [r3, #-8]!
   37850:	4619      	mov	r1, r3
   37852:	f7ff b84b 	b.w	368ec <rpc_message_send>
   37856:	200f      	movs	r0, #15
   37858:	4770      	bx	lr
   3785a:	200e      	movs	r0, #14
   3785c:	4770      	bx	lr
   3785e:	bf00      	nop

00037860 <rpc_logobj_client_message_free>:
   37860:	b120      	cbz	r0, 3786c <rpc_logobj_client_message_free+0xc>
   37862:	f1a0 0108 	sub.w	r1, r0, #8
   37866:	2009      	movs	r0, #9
   37868:	f7ff b87c 	b.w	36964 <rpc_message_free>
   3786c:	200e      	movs	r0, #14
   3786e:	4770      	bx	lr

00037870 <rpc_logobj_client_data_free>:
   37870:	b118      	cbz	r0, 3787a <rpc_logobj_client_data_free+0xa>
   37872:	4601      	mov	r1, r0
   37874:	2009      	movs	r0, #9
   37876:	f7ff b881 	b.w	3697c <rpc_message_data_free>
   3787a:	200e      	movs	r0, #14
   3787c:	4770      	bx	lr
   3787e:	bf00      	nop

00037880 <dfu_client_event_handler>:
   37880:	f850 1b08 	ldr.w	r1, [r0], #8
   37884:	0c09      	lsrs	r1, r1, #16
   37886:	f002 bfc9 	b.w	3a81c <rpc_dfu_event_handler>
   3788a:	bf00      	nop

0003788c <rpc_dfu_client_init>:
   3788c:	4801      	ldr	r0, [pc, #4]	; (37894 <rpc_dfu_client_init+0x8>)
   3788e:	f7fe bf7d 	b.w	3678c <rpc_client_register>
   37892:	bf00      	nop
   37894:	00046fd8 	.word	0x00046fd8

00037898 <rpc_dfu_client_deinit>:
   37898:	2006      	movs	r0, #6
   3789a:	f7fe bfe1 	b.w	36860 <rpc_client_unregister>
   3789e:	bf00      	nop

000378a0 <rpc_dfu_client_request_alloc>:
   378a0:	2300      	movs	r3, #0
   378a2:	b510      	push	{r4, lr}
   378a4:	b082      	sub	sp, #8
   378a6:	9301      	str	r3, [sp, #4]
   378a8:	b158      	cbz	r0, 378c2 <rpc_dfu_client_request_alloc+0x22>
   378aa:	4604      	mov	r4, r0
   378ac:	aa01      	add	r2, sp, #4
   378ae:	2006      	movs	r0, #6
   378b0:	f7ff f82c 	bl	3690c <rpc_message_alloc>
   378b4:	b918      	cbnz	r0, 378be <rpc_dfu_client_request_alloc+0x1e>
   378b6:	9b01      	ldr	r3, [sp, #4]
   378b8:	b10b      	cbz	r3, 378be <rpc_dfu_client_request_alloc+0x1e>
   378ba:	3308      	adds	r3, #8
   378bc:	6023      	str	r3, [r4, #0]
   378be:	b002      	add	sp, #8
   378c0:	bd10      	pop	{r4, pc}
   378c2:	2007      	movs	r0, #7
   378c4:	b002      	add	sp, #8
   378c6:	bd10      	pop	{r4, pc}

000378c8 <rpc_dfu_client_request_send>:
   378c8:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   378cc:	d10b      	bne.n	378e6 <rpc_dfu_client_request_send+0x1e>
   378ce:	b160      	cbz	r0, 378ea <rpc_dfu_client_request_send+0x22>
   378d0:	4603      	mov	r3, r0
   378d2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   378d6:	2006      	movs	r0, #6
   378d8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   378dc:	f843 1d08 	str.w	r1, [r3, #-8]!
   378e0:	4619      	mov	r1, r3
   378e2:	f7ff b803 	b.w	368ec <rpc_message_send>
   378e6:	200f      	movs	r0, #15
   378e8:	4770      	bx	lr
   378ea:	2007      	movs	r0, #7
   378ec:	4770      	bx	lr
   378ee:	bf00      	nop

000378f0 <rpc_dfu_client_message_free>:
   378f0:	b120      	cbz	r0, 378fc <rpc_dfu_client_message_free+0xc>
   378f2:	f1a0 0108 	sub.w	r1, r0, #8
   378f6:	2006      	movs	r0, #6
   378f8:	f7ff b834 	b.w	36964 <rpc_message_free>
   378fc:	2007      	movs	r0, #7
   378fe:	4770      	bx	lr

00037900 <rpc_dfu_client_data_free>:
   37900:	b118      	cbz	r0, 3790a <rpc_dfu_client_data_free+0xa>
   37902:	4601      	mov	r1, r0
   37904:	2006      	movs	r0, #6
   37906:	f7ff b839 	b.w	3697c <rpc_message_data_free>
   3790a:	2007      	movs	r0, #7
   3790c:	4770      	bx	lr
   3790e:	bf00      	nop

00037910 <packet_free_cb>:
   37910:	6800      	ldr	r0, [r0, #0]
   37912:	f003 bd4f 	b.w	3b3b4 <rpc_at_client_data_free>
   37916:	bf00      	nop

00037918 <at_interface_write>:
   37918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3791c:	b083      	sub	sp, #12
   3791e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   37920:	2c00      	cmp	r4, #0
   37922:	d16c      	bne.n	379fe <at_interface_write+0xe6>
   37924:	4688      	mov	r8, r1
   37926:	4615      	mov	r5, r2
   37928:	461e      	mov	r6, r3
   3792a:	4607      	mov	r7, r0
   3792c:	f003 fbb2 	bl	3b094 <interface_socket_from_handle_get>
   37930:	4604      	mov	r4, r0
   37932:	2e00      	cmp	r6, #0
   37934:	d137      	bne.n	379a6 <at_interface_write+0x8e>
   37936:	2800      	cmp	r0, #0
   37938:	d067      	beq.n	37a0a <at_interface_write+0xf2>
   3793a:	6803      	ldr	r3, [r0, #0]
   3793c:	039b      	lsls	r3, r3, #14
   3793e:	d564      	bpl.n	37a0a <at_interface_write+0xf2>
   37940:	6803      	ldr	r3, [r0, #0]
   37942:	4629      	mov	r1, r5
   37944:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   37948:	6003      	str	r3, [r0, #0]
   3794a:	6803      	ldr	r3, [r0, #0]
   3794c:	4668      	mov	r0, sp
   3794e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   37952:	6023      	str	r3, [r4, #0]
   37954:	f003 fd04 	bl	3b360 <rpc_at_client_request_alloc>
   37958:	4606      	mov	r6, r0
   3795a:	4638      	mov	r0, r7
   3795c:	f003 fb9a 	bl	3b094 <interface_socket_from_handle_get>
   37960:	4681      	mov	r9, r0
   37962:	bb56      	cbnz	r6, 379ba <at_interface_write+0xa2>
   37964:	2304      	movs	r3, #4
   37966:	9800      	ldr	r0, [sp, #0]
   37968:	7203      	strb	r3, [r0, #8]
   3796a:	7246      	strb	r6, [r0, #9]
   3796c:	7286      	strb	r6, [r0, #10]
   3796e:	72c6      	strb	r6, [r0, #11]
   37970:	60c7      	str	r7, [r0, #12]
   37972:	bb25      	cbnz	r5, 379be <at_interface_write+0xa6>
   37974:	2101      	movs	r1, #1
   37976:	f003 fd07 	bl	3b388 <rpc_at_client_request_send>
   3797a:	bb78      	cbnz	r0, 379dc <at_interface_write+0xc4>
   3797c:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   37980:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   37984:	2900      	cmp	r1, #0
   37986:	bf08      	it	eq
   37988:	f04f 31ff 	moveq.w	r1, #4294967295
   3798c:	ab02      	add	r3, sp, #8
   3798e:	f843 1d04 	str.w	r1, [r3, #-4]!
   37992:	4638      	mov	r0, r7
   37994:	4611      	mov	r1, r2
   37996:	f003 fb09 	bl	3afac <interface_socket_wait>
   3799a:	b320      	cbz	r0, 379e6 <at_interface_write+0xce>
   3799c:	6823      	ldr	r3, [r4, #0]
   3799e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   379a2:	6023      	str	r3, [r4, #0]
   379a4:	e002      	b.n	379ac <at_interface_write+0x94>
   379a6:	b390      	cbz	r0, 37a0e <at_interface_write+0xf6>
   379a8:	6803      	ldr	r3, [r0, #0]
   379aa:	202d      	movs	r0, #45	; 0x2d
   379ac:	f7f1 fe56 	bl	2965c <bsd_os_errno_set>
   379b0:	f04f 30ff 	mov.w	r0, #4294967295
   379b4:	b003      	add	sp, #12
   379b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   379ba:	200c      	movs	r0, #12
   379bc:	e7ee      	b.n	3799c <at_interface_write+0x84>
   379be:	4641      	mov	r1, r8
   379c0:	6800      	ldr	r0, [r0, #0]
   379c2:	462a      	mov	r2, r5
   379c4:	f00d f98f 	bl	44ce6 <memcpy>
   379c8:	2101      	movs	r1, #1
   379ca:	9800      	ldr	r0, [sp, #0]
   379cc:	f003 fcdc 	bl	3b388 <rpc_at_client_request_send>
   379d0:	2800      	cmp	r0, #0
   379d2:	d0d3      	beq.n	3797c <at_interface_write+0x64>
   379d4:	9b00      	ldr	r3, [sp, #0]
   379d6:	6818      	ldr	r0, [r3, #0]
   379d8:	f003 fcec 	bl	3b3b4 <rpc_at_client_data_free>
   379dc:	9800      	ldr	r0, [sp, #0]
   379de:	f003 fce1 	bl	3b3a4 <rpc_at_client_message_free>
   379e2:	2023      	movs	r0, #35	; 0x23
   379e4:	e7da      	b.n	3799c <at_interface_write+0x84>
   379e6:	4638      	mov	r0, r7
   379e8:	f003 fb54 	bl	3b094 <interface_socket_from_handle_get>
   379ec:	4603      	mov	r3, r0
   379ee:	b120      	cbz	r0, 379fa <at_interface_write+0xe2>
   379f0:	6840      	ldr	r0, [r0, #4]
   379f2:	b110      	cbz	r0, 379fa <at_interface_write+0xe2>
   379f4:	2200      	movs	r2, #0
   379f6:	605a      	str	r2, [r3, #4]
   379f8:	e7d0      	b.n	3799c <at_interface_write+0x84>
   379fa:	4628      	mov	r0, r5
   379fc:	e7da      	b.n	379b4 <at_interface_write+0x9c>
   379fe:	2038      	movs	r0, #56	; 0x38
   37a00:	f7f1 fe2c 	bl	2965c <bsd_os_errno_set>
   37a04:	f04f 30ff 	mov.w	r0, #4294967295
   37a08:	e7d4      	b.n	379b4 <at_interface_write+0x9c>
   37a0a:	2016      	movs	r0, #22
   37a0c:	e7ce      	b.n	379ac <at_interface_write+0x94>
   37a0e:	202d      	movs	r0, #45	; 0x2d
   37a10:	e7cc      	b.n	379ac <at_interface_write+0x94>
   37a12:	bf00      	nop

00037a14 <at_interface_init>:
   37a14:	b508      	push	{r3, lr}
   37a16:	f003 fc99 	bl	3b34c <rpc_at_client_init>
   37a1a:	b910      	cbnz	r0, 37a22 <at_interface_init+0xe>
   37a1c:	2201      	movs	r2, #1
   37a1e:	4b01      	ldr	r3, [pc, #4]	; (37a24 <at_interface_init+0x10>)
   37a20:	701a      	strb	r2, [r3, #0]
   37a22:	bd08      	pop	{r3, pc}
   37a24:	2002d6b9 	.word	0x2002d6b9

00037a28 <at_interface_deinit>:
   37a28:	b510      	push	{r4, lr}
   37a2a:	4c05      	ldr	r4, [pc, #20]	; (37a40 <at_interface_deinit+0x18>)
   37a2c:	7820      	ldrb	r0, [r4, #0]
   37a2e:	b900      	cbnz	r0, 37a32 <at_interface_deinit+0xa>
   37a30:	bd10      	pop	{r4, pc}
   37a32:	f003 fc91 	bl	3b358 <rpc_at_client_deinit>
   37a36:	b908      	cbnz	r0, 37a3c <at_interface_deinit+0x14>
   37a38:	7020      	strb	r0, [r4, #0]
   37a3a:	bd10      	pop	{r4, pc}
   37a3c:	2003      	movs	r0, #3
   37a3e:	bd10      	pop	{r4, pc}
   37a40:	2002d6b9 	.word	0x2002d6b9

00037a44 <at_interface_open>:
   37a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37a48:	2600      	movs	r6, #0
   37a4a:	4b34      	ldr	r3, [pc, #208]	; (37b1c <at_interface_open+0xd8>)
   37a4c:	b084      	sub	sp, #16
   37a4e:	781b      	ldrb	r3, [r3, #0]
   37a50:	9601      	str	r6, [sp, #4]
   37a52:	2b00      	cmp	r3, #0
   37a54:	d05c      	beq.n	37b10 <at_interface_open+0xcc>
   37a56:	2902      	cmp	r1, #2
   37a58:	460d      	mov	r5, r1
   37a5a:	d153      	bne.n	37b04 <at_interface_open+0xc0>
   37a5c:	4680      	mov	r8, r0
   37a5e:	4617      	mov	r7, r2
   37a60:	a801      	add	r0, sp, #4
   37a62:	4a2f      	ldr	r2, [pc, #188]	; (37b20 <at_interface_open+0xdc>)
   37a64:	f003 f9f0 	bl	3ae48 <interface_socket_allocate>
   37a68:	9b01      	ldr	r3, [sp, #4]
   37a6a:	4604      	mov	r4, r0
   37a6c:	b3c3      	cbz	r3, 37ae0 <at_interface_open+0x9c>
   37a6e:	615f      	str	r7, [r3, #20]
   37a70:	4631      	mov	r1, r6
   37a72:	e9c3 8503 	strd	r8, r5, [r3, #12]
   37a76:	a802      	add	r0, sp, #8
   37a78:	f003 fc72 	bl	3b360 <rpc_at_client_request_alloc>
   37a7c:	4606      	mov	r6, r0
   37a7e:	4620      	mov	r0, r4
   37a80:	f003 fb08 	bl	3b094 <interface_socket_from_handle_get>
   37a84:	4607      	mov	r7, r0
   37a86:	bb16      	cbnz	r6, 37ace <at_interface_open+0x8a>
   37a88:	2304      	movs	r3, #4
   37a8a:	9802      	ldr	r0, [sp, #8]
   37a8c:	2105      	movs	r1, #5
   37a8e:	7246      	strb	r6, [r0, #9]
   37a90:	7286      	strb	r6, [r0, #10]
   37a92:	72c6      	strb	r6, [r0, #11]
   37a94:	7203      	strb	r3, [r0, #8]
   37a96:	60c4      	str	r4, [r0, #12]
   37a98:	f003 fc76 	bl	3b388 <rpc_at_client_request_send>
   37a9c:	4606      	mov	r6, r0
   37a9e:	bb60      	cbnz	r0, 37afa <at_interface_open+0xb6>
   37aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   37aa2:	ab04      	add	r3, sp, #16
   37aa4:	2a00      	cmp	r2, #0
   37aa6:	bf08      	it	eq
   37aa8:	f04f 32ff 	moveq.w	r2, #4294967295
   37aac:	4629      	mov	r1, r5
   37aae:	f843 2d04 	str.w	r2, [r3, #-4]!
   37ab2:	4620      	mov	r0, r4
   37ab4:	462a      	mov	r2, r5
   37ab6:	f003 fa79 	bl	3afac <interface_socket_wait>
   37aba:	4605      	mov	r5, r0
   37abc:	b940      	cbnz	r0, 37ad0 <at_interface_open+0x8c>
   37abe:	4620      	mov	r0, r4
   37ac0:	f003 fae8 	bl	3b094 <interface_socket_from_handle_get>
   37ac4:	b180      	cbz	r0, 37ae8 <at_interface_open+0xa4>
   37ac6:	6845      	ldr	r5, [r0, #4]
   37ac8:	b175      	cbz	r5, 37ae8 <at_interface_open+0xa4>
   37aca:	6046      	str	r6, [r0, #4]
   37acc:	e000      	b.n	37ad0 <at_interface_open+0x8c>
   37ace:	250c      	movs	r5, #12
   37ad0:	4620      	mov	r0, r4
   37ad2:	f003 fa1d 	bl	3af10 <interface_socket_free>
   37ad6:	4628      	mov	r0, r5
   37ad8:	f7f1 fdc0 	bl	2965c <bsd_os_errno_set>
   37adc:	f04f 34ff 	mov.w	r4, #4294967295
   37ae0:	4620      	mov	r0, r4
   37ae2:	b004      	add	sp, #16
   37ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37ae8:	4620      	mov	r0, r4
   37aea:	9a01      	ldr	r2, [sp, #4]
   37aec:	6813      	ldr	r3, [r2, #0]
   37aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   37af2:	6013      	str	r3, [r2, #0]
   37af4:	b004      	add	sp, #16
   37af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37afa:	9802      	ldr	r0, [sp, #8]
   37afc:	f003 fc52 	bl	3b3a4 <rpc_at_client_message_free>
   37b00:	2523      	movs	r5, #35	; 0x23
   37b02:	e7e5      	b.n	37ad0 <at_interface_open+0x8c>
   37b04:	2029      	movs	r0, #41	; 0x29
   37b06:	f7f1 fda9 	bl	2965c <bsd_os_errno_set>
   37b0a:	f04f 34ff 	mov.w	r4, #4294967295
   37b0e:	e7e7      	b.n	37ae0 <at_interface_open+0x9c>
   37b10:	2070      	movs	r0, #112	; 0x70
   37b12:	f7f1 fda3 	bl	2965c <bsd_os_errno_set>
   37b16:	f04f 34ff 	mov.w	r4, #4294967295
   37b1a:	e7e1      	b.n	37ae0 <at_interface_open+0x9c>
   37b1c:	2002d6b9 	.word	0x2002d6b9
   37b20:	00037911 	.word	0x00037911

00037b24 <at_interface_close>:
   37b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37b28:	b082      	sub	sp, #8
   37b2a:	4606      	mov	r6, r0
   37b2c:	f003 fab2 	bl	3b094 <interface_socket_from_handle_get>
   37b30:	2800      	cmp	r0, #0
   37b32:	d051      	beq.n	37bd8 <at_interface_close+0xb4>
   37b34:	230d      	movs	r3, #13
   37b36:	6807      	ldr	r7, [r0, #0]
   37b38:	6003      	str	r3, [r0, #0]
   37b3a:	6803      	ldr	r3, [r0, #0]
   37b3c:	4604      	mov	r4, r0
   37b3e:	039b      	lsls	r3, r3, #14
   37b40:	d42e      	bmi.n	37ba0 <at_interface_close+0x7c>
   37b42:	2100      	movs	r1, #0
   37b44:	4668      	mov	r0, sp
   37b46:	f003 fc0b 	bl	3b360 <rpc_at_client_request_alloc>
   37b4a:	4605      	mov	r5, r0
   37b4c:	4630      	mov	r0, r6
   37b4e:	f003 faa1 	bl	3b094 <interface_socket_from_handle_get>
   37b52:	4680      	mov	r8, r0
   37b54:	bb75      	cbnz	r5, 37bb4 <at_interface_close+0x90>
   37b56:	2304      	movs	r3, #4
   37b58:	9800      	ldr	r0, [sp, #0]
   37b5a:	2106      	movs	r1, #6
   37b5c:	7203      	strb	r3, [r0, #8]
   37b5e:	7245      	strb	r5, [r0, #9]
   37b60:	7285      	strb	r5, [r0, #10]
   37b62:	72c5      	strb	r5, [r0, #11]
   37b64:	60c6      	str	r6, [r0, #12]
   37b66:	f003 fc0f 	bl	3b388 <rpc_at_client_request_send>
   37b6a:	b9f0      	cbnz	r0, 37baa <at_interface_close+0x86>
   37b6c:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   37b70:	220e      	movs	r2, #14
   37b72:	2900      	cmp	r1, #0
   37b74:	bf08      	it	eq
   37b76:	f04f 31ff 	moveq.w	r1, #4294967295
   37b7a:	ab02      	add	r3, sp, #8
   37b7c:	f843 1d04 	str.w	r1, [r3, #-4]!
   37b80:	4630      	mov	r0, r6
   37b82:	4611      	mov	r1, r2
   37b84:	f003 fa12 	bl	3afac <interface_socket_wait>
   37b88:	4605      	mov	r5, r0
   37b8a:	b1a8      	cbz	r0, 37bb8 <at_interface_close+0x94>
   37b8c:	6027      	str	r7, [r4, #0]
   37b8e:	4628      	mov	r0, r5
   37b90:	f04f 35ff 	mov.w	r5, #4294967295
   37b94:	f7f1 fd62 	bl	2965c <bsd_os_errno_set>
   37b98:	4628      	mov	r0, r5
   37b9a:	b002      	add	sp, #8
   37b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37ba0:	6803      	ldr	r3, [r0, #0]
   37ba2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   37ba6:	6003      	str	r3, [r0, #0]
   37ba8:	e7cb      	b.n	37b42 <at_interface_close+0x1e>
   37baa:	9800      	ldr	r0, [sp, #0]
   37bac:	f003 fbfa 	bl	3b3a4 <rpc_at_client_message_free>
   37bb0:	2523      	movs	r5, #35	; 0x23
   37bb2:	e7eb      	b.n	37b8c <at_interface_close+0x68>
   37bb4:	250c      	movs	r5, #12
   37bb6:	e7e9      	b.n	37b8c <at_interface_close+0x68>
   37bb8:	4630      	mov	r0, r6
   37bba:	f003 fa6b 	bl	3b094 <interface_socket_from_handle_get>
   37bbe:	b120      	cbz	r0, 37bca <at_interface_close+0xa6>
   37bc0:	6843      	ldr	r3, [r0, #4]
   37bc2:	b113      	cbz	r3, 37bca <at_interface_close+0xa6>
   37bc4:	6045      	str	r5, [r0, #4]
   37bc6:	461d      	mov	r5, r3
   37bc8:	e7e0      	b.n	37b8c <at_interface_close+0x68>
   37bca:	4630      	mov	r0, r6
   37bcc:	f003 f9a0 	bl	3af10 <interface_socket_free>
   37bd0:	4628      	mov	r0, r5
   37bd2:	b002      	add	sp, #8
   37bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37bd8:	2516      	movs	r5, #22
   37bda:	e7d8      	b.n	37b8e <at_interface_close+0x6a>

00037bdc <at_interface_read>:
   37bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   37be0:	b087      	sub	sp, #28
   37be2:	4688      	mov	r8, r1
   37be4:	4615      	mov	r5, r2
   37be6:	461e      	mov	r6, r3
   37be8:	4607      	mov	r7, r0
   37bea:	f003 fa53 	bl	3b094 <interface_socket_from_handle_get>
   37bee:	2800      	cmp	r0, #0
   37bf0:	f000 8084 	beq.w	37cfc <at_interface_read+0x120>
   37bf4:	2300      	movs	r3, #0
   37bf6:	4604      	mov	r4, r0
   37bf8:	e9cd 8502 	strd	r8, r5, [sp, #8]
   37bfc:	e9cd 3304 	strd	r3, r3, [sp, #16]
   37c00:	2e00      	cmp	r6, #0
   37c02:	d12d      	bne.n	37c60 <at_interface_read+0x84>
   37c04:	f016 0502 	ands.w	r5, r6, #2
   37c08:	d148      	bne.n	37c9c <at_interface_read+0xc0>
   37c0a:	46a8      	mov	r8, r5
   37c0c:	6823      	ldr	r3, [r4, #0]
   37c0e:	69e0      	ldr	r0, [r4, #28]
   37c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   37c14:	6023      	str	r3, [r4, #0]
   37c16:	6803      	ldr	r3, [r0, #0]
   37c18:	4632      	mov	r2, r6
   37c1a:	689b      	ldr	r3, [r3, #8]
   37c1c:	a902      	add	r1, sp, #8
   37c1e:	4798      	blx	r3
   37c20:	f1b0 0900 	subs.w	r9, r0, #0
   37c24:	da2a      	bge.n	37c7c <at_interface_read+0xa0>
   37c26:	2d00      	cmp	r5, #0
   37c28:	d15e      	bne.n	37ce8 <at_interface_read+0x10c>
   37c2a:	6a25      	ldr	r5, [r4, #32]
   37c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   37c30:	2d00      	cmp	r5, #0
   37c32:	bf08      	it	eq
   37c34:	f04f 35ff 	moveq.w	r5, #4294967295
   37c38:	4611      	mov	r1, r2
   37c3a:	ab01      	add	r3, sp, #4
   37c3c:	4638      	mov	r0, r7
   37c3e:	9501      	str	r5, [sp, #4]
   37c40:	f003 f9b4 	bl	3afac <interface_socket_wait>
   37c44:	4605      	mov	r5, r0
   37c46:	2800      	cmp	r0, #0
   37c48:	d1e0      	bne.n	37c0c <at_interface_read+0x30>
   37c4a:	4638      	mov	r0, r7
   37c4c:	f003 fa22 	bl	3b094 <interface_socket_from_handle_get>
   37c50:	2800      	cmp	r0, #0
   37c52:	d0db      	beq.n	37c0c <at_interface_read+0x30>
   37c54:	6845      	ldr	r5, [r0, #4]
   37c56:	2d00      	cmp	r5, #0
   37c58:	d0d8      	beq.n	37c0c <at_interface_read+0x30>
   37c5a:	f8c0 8004 	str.w	r8, [r0, #4]
   37c5e:	e7d5      	b.n	37c0c <at_interface_read+0x30>
   37c60:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   37c64:	d1ce      	bne.n	37c04 <at_interface_read+0x28>
   37c66:	252d      	movs	r5, #45	; 0x2d
   37c68:	f04f 39ff 	mov.w	r9, #4294967295
   37c6c:	4628      	mov	r0, r5
   37c6e:	f7f1 fcf5 	bl	2965c <bsd_os_errno_set>
   37c72:	4648      	mov	r0, r9
   37c74:	b007      	add	sp, #28
   37c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   37c7a:	2500      	movs	r5, #0
   37c7c:	69e0      	ldr	r0, [r4, #28]
   37c7e:	6803      	ldr	r3, [r0, #0]
   37c80:	68db      	ldr	r3, [r3, #12]
   37c82:	4798      	blx	r3
   37c84:	3001      	adds	r0, #1
   37c86:	d003      	beq.n	37c90 <at_interface_read+0xb4>
   37c88:	6823      	ldr	r3, [r4, #0]
   37c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   37c8e:	6023      	str	r3, [r4, #0]
   37c90:	2d00      	cmp	r5, #0
   37c92:	d1eb      	bne.n	37c6c <at_interface_read+0x90>
   37c94:	4648      	mov	r0, r9
   37c96:	b007      	add	sp, #28
   37c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   37c9c:	6823      	ldr	r3, [r4, #0]
   37c9e:	69e0      	ldr	r0, [r4, #28]
   37ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   37ca4:	6023      	str	r3, [r4, #0]
   37ca6:	6803      	ldr	r3, [r0, #0]
   37ca8:	4632      	mov	r2, r6
   37caa:	689b      	ldr	r3, [r3, #8]
   37cac:	a902      	add	r1, sp, #8
   37cae:	4798      	blx	r3
   37cb0:	f1b0 0900 	subs.w	r9, r0, #0
   37cb4:	dae1      	bge.n	37c7a <at_interface_read+0x9e>
   37cb6:	69e0      	ldr	r0, [r4, #28]
   37cb8:	f1b9 3fff 	cmp.w	r9, #4294967295
   37cbc:	6803      	ldr	r3, [r0, #0]
   37cbe:	68db      	ldr	r3, [r3, #12]
   37cc0:	d10a      	bne.n	37cd8 <at_interface_read+0xfc>
   37cc2:	2523      	movs	r5, #35	; 0x23
   37cc4:	4798      	blx	r3
   37cc6:	3001      	adds	r0, #1
   37cc8:	d0ce      	beq.n	37c68 <at_interface_read+0x8c>
   37cca:	6823      	ldr	r3, [r4, #0]
   37ccc:	f04f 39ff 	mov.w	r9, #4294967295
   37cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   37cd4:	6023      	str	r3, [r4, #0]
   37cd6:	e7db      	b.n	37c90 <at_interface_read+0xb4>
   37cd8:	4798      	blx	r3
   37cda:	3001      	adds	r0, #1
   37cdc:	d0c9      	beq.n	37c72 <at_interface_read+0x96>
   37cde:	6823      	ldr	r3, [r4, #0]
   37ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   37ce4:	6023      	str	r3, [r4, #0]
   37ce6:	e7c4      	b.n	37c72 <at_interface_read+0x96>
   37ce8:	69e0      	ldr	r0, [r4, #28]
   37cea:	f1b9 3fff 	cmp.w	r9, #4294967295
   37cee:	6803      	ldr	r3, [r0, #0]
   37cf0:	68db      	ldr	r3, [r3, #12]
   37cf2:	d0e7      	beq.n	37cc4 <at_interface_read+0xe8>
   37cf4:	4798      	blx	r3
   37cf6:	3001      	adds	r0, #1
   37cf8:	d1c6      	bne.n	37c88 <at_interface_read+0xac>
   37cfa:	e7b7      	b.n	37c6c <at_interface_read+0x90>
   37cfc:	2516      	movs	r5, #22
   37cfe:	e7b3      	b.n	37c68 <at_interface_read+0x8c>

00037d00 <at_interface_getopt>:
   37d00:	f003 ba36 	b.w	3b170 <interface_socket_getopt>

00037d04 <at_interface_setopt>:
   37d04:	f003 b9ee 	b.w	3b0e4 <interface_socket_setopt>

00037d08 <rpc_at_event_handler>:
   37d08:	b570      	push	{r4, r5, r6, lr}
   37d0a:	4606      	mov	r6, r0
   37d0c:	b084      	sub	sp, #16
   37d0e:	68c0      	ldr	r0, [r0, #12]
   37d10:	460d      	mov	r5, r1
   37d12:	f003 f9bf 	bl	3b094 <interface_socket_from_handle_get>
   37d16:	4604      	mov	r4, r0
   37d18:	b348      	cbz	r0, 37d6e <rpc_at_event_handler+0x66>
   37d1a:	6803      	ldr	r3, [r0, #0]
   37d1c:	b29b      	uxth	r3, r3
   37d1e:	2b01      	cmp	r3, #1
   37d20:	d01f      	beq.n	37d62 <rpc_at_event_handler+0x5a>
   37d22:	6803      	ldr	r3, [r0, #0]
   37d24:	b29b      	uxth	r3, r3
   37d26:	2b0d      	cmp	r3, #13
   37d28:	d029      	beq.n	37d7e <rpc_at_event_handler+0x76>
   37d2a:	6803      	ldr	r3, [r0, #0]
   37d2c:	b29b      	uxth	r3, r3
   37d2e:	2b02      	cmp	r3, #2
   37d30:	d02d      	beq.n	37d8e <rpc_at_event_handler+0x86>
   37d32:	3d03      	subs	r5, #3
   37d34:	2d01      	cmp	r5, #1
   37d36:	d817      	bhi.n	37d68 <rpc_at_event_handler+0x60>
   37d38:	2500      	movs	r5, #0
   37d3a:	6873      	ldr	r3, [r6, #4]
   37d3c:	6832      	ldr	r2, [r6, #0]
   37d3e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   37d42:	e9cd 2300 	strd	r2, r3, [sp]
   37d46:	69e0      	ldr	r0, [r4, #28]
   37d48:	4669      	mov	r1, sp
   37d4a:	6803      	ldr	r3, [r0, #0]
   37d4c:	685b      	ldr	r3, [r3, #4]
   37d4e:	4798      	blx	r3
   37d50:	3001      	adds	r0, #1
   37d52:	d019      	beq.n	37d88 <rpc_at_event_handler+0x80>
   37d54:	4628      	mov	r0, r5
   37d56:	6823      	ldr	r3, [r4, #0]
   37d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   37d5c:	6023      	str	r3, [r4, #0]
   37d5e:	b004      	add	sp, #16
   37d60:	bd70      	pop	{r4, r5, r6, pc}
   37d62:	2d02      	cmp	r5, #2
   37d64:	d1e5      	bne.n	37d32 <rpc_at_event_handler+0x2a>
   37d66:	6005      	str	r5, [r0, #0]
   37d68:	2000      	movs	r0, #0
   37d6a:	b004      	add	sp, #16
   37d6c:	bd70      	pop	{r4, r5, r6, pc}
   37d6e:	6830      	ldr	r0, [r6, #0]
   37d70:	2800      	cmp	r0, #0
   37d72:	d0f9      	beq.n	37d68 <rpc_at_event_handler+0x60>
   37d74:	f003 fb1e 	bl	3b3b4 <rpc_at_client_data_free>
   37d78:	4620      	mov	r0, r4
   37d7a:	b004      	add	sp, #16
   37d7c:	bd70      	pop	{r4, r5, r6, pc}
   37d7e:	2d02      	cmp	r5, #2
   37d80:	d1d7      	bne.n	37d32 <rpc_at_event_handler+0x2a>
   37d82:	230e      	movs	r3, #14
   37d84:	6003      	str	r3, [r0, #0]
   37d86:	e7ef      	b.n	37d68 <rpc_at_event_handler+0x60>
   37d88:	2002      	movs	r0, #2
   37d8a:	b004      	add	sp, #16
   37d8c:	bd70      	pop	{r4, r5, r6, pc}
   37d8e:	6803      	ldr	r3, [r0, #0]
   37d90:	029b      	lsls	r3, r3, #10
   37d92:	d5ce      	bpl.n	37d32 <rpc_at_event_handler+0x2a>
   37d94:	2d02      	cmp	r5, #2
   37d96:	d1cc      	bne.n	37d32 <rpc_at_event_handler+0x2a>
   37d98:	6803      	ldr	r3, [r0, #0]
   37d9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   37d9e:	6003      	str	r3, [r0, #0]
   37da0:	6803      	ldr	r3, [r0, #0]
   37da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   37da6:	6003      	str	r3, [r0, #0]
   37da8:	e7de      	b.n	37d68 <rpc_at_event_handler+0x60>
   37daa:	bf00      	nop

00037dac <ok_rsp_parser>:
   37dac:	2000      	movs	r0, #0
   37dae:	4770      	bx	lr

00037db0 <pdn_state_get_parser>:
   37db0:	2200      	movs	r2, #0
   37db2:	b570      	push	{r4, r5, r6, lr}
   37db4:	780b      	ldrb	r3, [r1, #0]
   37db6:	b084      	sub	sp, #16
   37db8:	460e      	mov	r6, r1
   37dba:	e9cd 2200 	strd	r2, r2, [sp]
   37dbe:	e9cd 2202 	strd	r2, r2, [sp, #8]
   37dc2:	b323      	cbz	r3, 37e0e <pdn_state_get_parser+0x5e>
   37dc4:	460c      	mov	r4, r1
   37dc6:	2b20      	cmp	r3, #32
   37dc8:	460d      	mov	r5, r1
   37dca:	d01b      	beq.n	37e04 <pdn_state_get_parser+0x54>
   37dcc:	700b      	strb	r3, [r1, #0]
   37dce:	3201      	adds	r2, #1
   37dd0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   37dd4:	18b1      	adds	r1, r6, r2
   37dd6:	460d      	mov	r5, r1
   37dd8:	2b00      	cmp	r3, #0
   37dda:	d1f4      	bne.n	37dc6 <pdn_state_get_parser+0x16>
   37ddc:	2200      	movs	r2, #0
   37dde:	4b0d      	ldr	r3, [pc, #52]	; (37e14 <pdn_state_get_parser+0x64>)
   37de0:	702a      	strb	r2, [r5, #0]
   37de2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   37de6:	4a0c      	ldr	r2, [pc, #48]	; (37e18 <pdn_state_get_parser+0x68>)
   37de8:	681b      	ldr	r3, [r3, #0]
   37dea:	2110      	movs	r1, #16
   37dec:	4668      	mov	r0, sp
   37dee:	f007 fecd 	bl	3fb8c <sniprintf>
   37df2:	4669      	mov	r1, sp
   37df4:	4630      	mov	r0, r6
   37df6:	f00d f9a8 	bl	4514a <strstr>
   37dfa:	3000      	adds	r0, #0
   37dfc:	bf18      	it	ne
   37dfe:	2001      	movne	r0, #1
   37e00:	b004      	add	sp, #16
   37e02:	bd70      	pop	{r4, r5, r6, pc}
   37e04:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   37e08:	2b00      	cmp	r3, #0
   37e0a:	d1dc      	bne.n	37dc6 <pdn_state_get_parser+0x16>
   37e0c:	e7e6      	b.n	37ddc <pdn_state_get_parser+0x2c>
   37e0e:	460d      	mov	r5, r1
   37e10:	e7e4      	b.n	37ddc <pdn_state_get_parser+0x2c>
   37e12:	bf00      	nop
   37e14:	20025b48 	.word	0x20025b48
   37e18:	000470a4 	.word	0x000470a4

00037e1c <pdn_id_get_parser>:
   37e1c:	b570      	push	{r4, r5, r6, lr}
   37e1e:	780b      	ldrb	r3, [r1, #0]
   37e20:	4606      	mov	r6, r0
   37e22:	b313      	cbz	r3, 37e6a <pdn_id_get_parser+0x4e>
   37e24:	4608      	mov	r0, r1
   37e26:	2400      	movs	r4, #0
   37e28:	460a      	mov	r2, r1
   37e2a:	2b20      	cmp	r3, #32
   37e2c:	4615      	mov	r5, r2
   37e2e:	d017      	beq.n	37e60 <pdn_id_get_parser+0x44>
   37e30:	7013      	strb	r3, [r2, #0]
   37e32:	3401      	adds	r4, #1
   37e34:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   37e38:	190a      	adds	r2, r1, r4
   37e3a:	4615      	mov	r5, r2
   37e3c:	2b00      	cmp	r3, #0
   37e3e:	d1f4      	bne.n	37e2a <pdn_id_get_parser+0xe>
   37e40:	2300      	movs	r3, #0
   37e42:	4608      	mov	r0, r1
   37e44:	702b      	strb	r3, [r5, #0]
   37e46:	213a      	movs	r1, #58	; 0x3a
   37e48:	f00d f91c 	bl	45084 <strchr>
   37e4c:	b130      	cbz	r0, 37e5c <pdn_id_get_parser+0x40>
   37e4e:	3001      	adds	r0, #1
   37e50:	f00c ff29 	bl	44ca6 <atoi>
   37e54:	4b06      	ldr	r3, [pc, #24]	; (37e70 <pdn_id_get_parser+0x54>)
   37e56:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   37e5a:	6058      	str	r0, [r3, #4]
   37e5c:	2000      	movs	r0, #0
   37e5e:	bd70      	pop	{r4, r5, r6, pc}
   37e60:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   37e64:	2b00      	cmp	r3, #0
   37e66:	d1e0      	bne.n	37e2a <pdn_id_get_parser+0xe>
   37e68:	e7ea      	b.n	37e40 <pdn_id_get_parser+0x24>
   37e6a:	460d      	mov	r5, r1
   37e6c:	e7e8      	b.n	37e40 <pdn_id_get_parser+0x24>
   37e6e:	bf00      	nop
   37e70:	20025b48 	.word	0x20025b48

00037e74 <context_create_parser>:
   37e74:	b570      	push	{r4, r5, r6, lr}
   37e76:	780b      	ldrb	r3, [r1, #0]
   37e78:	4606      	mov	r6, r0
   37e7a:	b313      	cbz	r3, 37ec2 <context_create_parser+0x4e>
   37e7c:	4608      	mov	r0, r1
   37e7e:	2400      	movs	r4, #0
   37e80:	460a      	mov	r2, r1
   37e82:	2b20      	cmp	r3, #32
   37e84:	4615      	mov	r5, r2
   37e86:	d017      	beq.n	37eb8 <context_create_parser+0x44>
   37e88:	7013      	strb	r3, [r2, #0]
   37e8a:	3401      	adds	r4, #1
   37e8c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   37e90:	190a      	adds	r2, r1, r4
   37e92:	4615      	mov	r5, r2
   37e94:	2b00      	cmp	r3, #0
   37e96:	d1f4      	bne.n	37e82 <context_create_parser+0xe>
   37e98:	2300      	movs	r3, #0
   37e9a:	4608      	mov	r0, r1
   37e9c:	702b      	strb	r3, [r5, #0]
   37e9e:	213a      	movs	r1, #58	; 0x3a
   37ea0:	f00d f8f0 	bl	45084 <strchr>
   37ea4:	b130      	cbz	r0, 37eb4 <context_create_parser+0x40>
   37ea6:	4b08      	ldr	r3, [pc, #32]	; (37ec8 <context_create_parser+0x54>)
   37ea8:	3001      	adds	r0, #1
   37eaa:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   37eae:	f00c fefa 	bl	44ca6 <atoi>
   37eb2:	6020      	str	r0, [r4, #0]
   37eb4:	2000      	movs	r0, #0
   37eb6:	bd70      	pop	{r4, r5, r6, pc}
   37eb8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   37ebc:	2b00      	cmp	r3, #0
   37ebe:	d1e0      	bne.n	37e82 <context_create_parser+0xe>
   37ec0:	e7ea      	b.n	37e98 <context_create_parser+0x24>
   37ec2:	460d      	mov	r5, r1
   37ec4:	e7e8      	b.n	37e98 <context_create_parser+0x24>
   37ec6:	bf00      	nop
   37ec8:	20025b48 	.word	0x20025b48

00037ecc <pdn_interface_init>:
   37ecc:	f04f 33ff 	mov.w	r3, #4294967295
   37ed0:	b510      	push	{r4, lr}
   37ed2:	4c0b      	ldr	r4, [pc, #44]	; (37f00 <pdn_interface_init+0x34>)
   37ed4:	2228      	movs	r2, #40	; 0x28
   37ed6:	2100      	movs	r1, #0
   37ed8:	480a      	ldr	r0, [pc, #40]	; (37f04 <pdn_interface_init+0x38>)
   37eda:	6023      	str	r3, [r4, #0]
   37edc:	f00c ff23 	bl	44d26 <memset>
   37ee0:	f240 2201 	movw	r2, #513	; 0x201
   37ee4:	2102      	movs	r1, #2
   37ee6:	2066      	movs	r0, #102	; 0x66
   37ee8:	f7ff fdac 	bl	37a44 <at_interface_open>
   37eec:	2800      	cmp	r0, #0
   37eee:	6020      	str	r0, [r4, #0]
   37ef0:	db04      	blt.n	37efc <pdn_interface_init+0x30>
   37ef2:	2201      	movs	r2, #1
   37ef4:	4b04      	ldr	r3, [pc, #16]	; (37f08 <pdn_interface_init+0x3c>)
   37ef6:	2000      	movs	r0, #0
   37ef8:	701a      	strb	r2, [r3, #0]
   37efa:	bd10      	pop	{r4, pc}
   37efc:	2003      	movs	r0, #3
   37efe:	bd10      	pop	{r4, pc}
   37f00:	20025a44 	.word	0x20025a44
   37f04:	20025b48 	.word	0x20025b48
   37f08:	2002d6ba 	.word	0x2002d6ba

00037f0c <pdn_interface_deinit>:
   37f0c:	4b05      	ldr	r3, [pc, #20]	; (37f24 <pdn_interface_deinit+0x18>)
   37f0e:	781a      	ldrb	r2, [r3, #0]
   37f10:	b12a      	cbz	r2, 37f1e <pdn_interface_deinit+0x12>
   37f12:	f04f 31ff 	mov.w	r1, #4294967295
   37f16:	2000      	movs	r0, #0
   37f18:	4a03      	ldr	r2, [pc, #12]	; (37f28 <pdn_interface_deinit+0x1c>)
   37f1a:	7018      	strb	r0, [r3, #0]
   37f1c:	6011      	str	r1, [r2, #0]
   37f1e:	2000      	movs	r0, #0
   37f20:	4770      	bx	lr
   37f22:	bf00      	nop
   37f24:	2002d6ba 	.word	0x2002d6ba
   37f28:	20025a44 	.word	0x20025a44

00037f2c <pdn_interface_open>:
   37f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   37f30:	4b68      	ldr	r3, [pc, #416]	; (380d4 <pdn_interface_open+0x1a8>)
   37f32:	b083      	sub	sp, #12
   37f34:	781b      	ldrb	r3, [r3, #0]
   37f36:	2b00      	cmp	r3, #0
   37f38:	f000 80c5 	beq.w	380c6 <pdn_interface_open+0x19a>
   37f3c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   37f40:	f040 80b0 	bne.w	380a4 <pdn_interface_open+0x178>
   37f44:	4c64      	ldr	r4, [pc, #400]	; (380d8 <pdn_interface_open+0x1ac>)
   37f46:	6825      	ldr	r5, [r4, #0]
   37f48:	b34d      	cbz	r5, 37f9e <pdn_interface_open+0x72>
   37f4a:	6863      	ldr	r3, [r4, #4]
   37f4c:	2b00      	cmp	r3, #0
   37f4e:	f000 809b 	beq.w	38088 <pdn_interface_open+0x15c>
   37f52:	68a3      	ldr	r3, [r4, #8]
   37f54:	2b00      	cmp	r3, #0
   37f56:	f000 8099 	beq.w	3808c <pdn_interface_open+0x160>
   37f5a:	68e3      	ldr	r3, [r4, #12]
   37f5c:	2b00      	cmp	r3, #0
   37f5e:	f000 8097 	beq.w	38090 <pdn_interface_open+0x164>
   37f62:	6923      	ldr	r3, [r4, #16]
   37f64:	2b00      	cmp	r3, #0
   37f66:	f000 8095 	beq.w	38094 <pdn_interface_open+0x168>
   37f6a:	6963      	ldr	r3, [r4, #20]
   37f6c:	2b00      	cmp	r3, #0
   37f6e:	f000 8093 	beq.w	38098 <pdn_interface_open+0x16c>
   37f72:	69a3      	ldr	r3, [r4, #24]
   37f74:	2b00      	cmp	r3, #0
   37f76:	f000 8091 	beq.w	3809c <pdn_interface_open+0x170>
   37f7a:	69e3      	ldr	r3, [r4, #28]
   37f7c:	2b00      	cmp	r3, #0
   37f7e:	f000 808f 	beq.w	380a0 <pdn_interface_open+0x174>
   37f82:	6a23      	ldr	r3, [r4, #32]
   37f84:	b153      	cbz	r3, 37f9c <pdn_interface_open+0x70>
   37f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   37f88:	2509      	movs	r5, #9
   37f8a:	b143      	cbz	r3, 37f9e <pdn_interface_open+0x72>
   37f8c:	200c      	movs	r0, #12
   37f8e:	f7f1 fb65 	bl	2965c <bsd_os_errno_set>
   37f92:	f04f 30ff 	mov.w	r0, #4294967295
   37f96:	b003      	add	sp, #12
   37f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   37f9c:	2508      	movs	r5, #8
   37f9e:	2020      	movs	r0, #32
   37fa0:	f002 fb60 	bl	3a664 <nrf_malloc>
   37fa4:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   37fa8:	2800      	cmp	r0, #0
   37faa:	d0ef      	beq.n	37f8c <pdn_interface_open+0x60>
   37fac:	2220      	movs	r2, #32
   37fae:	2100      	movs	r1, #0
   37fb0:	f00c feb9 	bl	44d26 <memset>
   37fb4:	2101      	movs	r1, #1
   37fb6:	2003      	movs	r0, #3
   37fb8:	f04f 37ff 	mov.w	r7, #4294967295
   37fbc:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   37fc0:	4b46      	ldr	r3, [pc, #280]	; (380dc <pdn_interface_open+0x1b0>)
   37fc2:	6091      	str	r1, [r2, #8]
   37fc4:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
   37fc8:	4a45      	ldr	r2, [pc, #276]	; (380e0 <pdn_interface_open+0x1b4>)
   37fca:	60c8      	str	r0, [r1, #12]
   37fcc:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   37fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
   37fd4:	6047      	str	r7, [r0, #4]
   37fd6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 380f0 <pdn_interface_open+0x1c4>
   37fda:	4842      	ldr	r0, [pc, #264]	; (380e4 <pdn_interface_open+0x1b8>)
   37fdc:	f007 fdd6 	bl	3fb8c <sniprintf>
   37fe0:	4840      	ldr	r0, [pc, #256]	; (380e4 <pdn_interface_open+0x1b8>)
   37fe2:	f8d8 9000 	ldr.w	r9, [r8]
   37fe6:	2600      	movs	r6, #0
   37fe8:	f7e5 f938 	bl	1d25c <strlen>
   37fec:	4633      	mov	r3, r6
   37fee:	4602      	mov	r2, r0
   37ff0:	493c      	ldr	r1, [pc, #240]	; (380e4 <pdn_interface_open+0x1b8>)
   37ff2:	4648      	mov	r0, r9
   37ff4:	9601      	str	r6, [sp, #4]
   37ff6:	9600      	str	r6, [sp, #0]
   37ff8:	f7ff fc8e 	bl	37918 <at_interface_write>
   37ffc:	4681      	mov	r9, r0
   37ffe:	4839      	ldr	r0, [pc, #228]	; (380e4 <pdn_interface_open+0x1b8>)
   38000:	f7e5 f92c 	bl	1d25c <strlen>
   38004:	4548      	cmp	r0, r9
   38006:	d153      	bne.n	380b0 <pdn_interface_open+0x184>
   38008:	4633      	mov	r3, r6
   3800a:	e9cd 6600 	strd	r6, r6, [sp]
   3800e:	f44f 7280 	mov.w	r2, #256	; 0x100
   38012:	4934      	ldr	r1, [pc, #208]	; (380e4 <pdn_interface_open+0x1b8>)
   38014:	f8d8 0000 	ldr.w	r0, [r8]
   38018:	f7ff fde0 	bl	37bdc <at_interface_read>
   3801c:	4606      	mov	r6, r0
   3801e:	4832      	ldr	r0, [pc, #200]	; (380e8 <pdn_interface_open+0x1bc>)
   38020:	f7e5 f91c 	bl	1d25c <strlen>
   38024:	4286      	cmp	r6, r0
   38026:	db15      	blt.n	38054 <pdn_interface_open+0x128>
   38028:	4602      	mov	r2, r0
   3802a:	492e      	ldr	r1, [pc, #184]	; (380e4 <pdn_interface_open+0x1b8>)
   3802c:	482e      	ldr	r0, [pc, #184]	; (380e8 <pdn_interface_open+0x1bc>)
   3802e:	f00d f85a 	bl	450e6 <strncmp>
   38032:	b978      	cbnz	r0, 38054 <pdn_interface_open+0x128>
   38034:	492b      	ldr	r1, [pc, #172]	; (380e4 <pdn_interface_open+0x1b8>)
   38036:	4628      	mov	r0, r5
   38038:	f7ff ff1c 	bl	37e74 <context_create_parser>
   3803c:	b9b0      	cbnz	r0, 3806c <pdn_interface_open+0x140>
   3803e:	2202      	movs	r2, #2
   38040:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   38044:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   38048:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   3804c:	609a      	str	r2, [r3, #8]
   3804e:	b003      	add	sp, #12
   38050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   38054:	4825      	ldr	r0, [pc, #148]	; (380ec <pdn_interface_open+0x1c0>)
   38056:	f7e5 f901 	bl	1d25c <strlen>
   3805a:	4922      	ldr	r1, [pc, #136]	; (380e4 <pdn_interface_open+0x1b8>)
   3805c:	4602      	mov	r2, r0
   3805e:	4823      	ldr	r0, [pc, #140]	; (380ec <pdn_interface_open+0x1c0>)
   38060:	f00d f841 	bl	450e6 <strncmp>
   38064:	b960      	cbnz	r0, 38080 <pdn_interface_open+0x154>
   38066:	2008      	movs	r0, #8
   38068:	f7f1 faf8 	bl	2965c <bsd_os_errno_set>
   3806c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   38070:	f002 fb02 	bl	3a678 <nrf_free>
   38074:	2300      	movs	r3, #0
   38076:	f04f 30ff 	mov.w	r0, #4294967295
   3807a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   3807e:	e78a      	b.n	37f96 <pdn_interface_open+0x6a>
   38080:	2005      	movs	r0, #5
   38082:	f7f1 faeb 	bl	2965c <bsd_os_errno_set>
   38086:	e7f1      	b.n	3806c <pdn_interface_open+0x140>
   38088:	2501      	movs	r5, #1
   3808a:	e788      	b.n	37f9e <pdn_interface_open+0x72>
   3808c:	2502      	movs	r5, #2
   3808e:	e786      	b.n	37f9e <pdn_interface_open+0x72>
   38090:	2503      	movs	r5, #3
   38092:	e784      	b.n	37f9e <pdn_interface_open+0x72>
   38094:	2504      	movs	r5, #4
   38096:	e782      	b.n	37f9e <pdn_interface_open+0x72>
   38098:	2505      	movs	r5, #5
   3809a:	e780      	b.n	37f9e <pdn_interface_open+0x72>
   3809c:	2506      	movs	r5, #6
   3809e:	e77e      	b.n	37f9e <pdn_interface_open+0x72>
   380a0:	2507      	movs	r5, #7
   380a2:	e77c      	b.n	37f9e <pdn_interface_open+0x72>
   380a4:	2029      	movs	r0, #41	; 0x29
   380a6:	f7f1 fad9 	bl	2965c <bsd_os_errno_set>
   380aa:	f04f 30ff 	mov.w	r0, #4294967295
   380ae:	e772      	b.n	37f96 <pdn_interface_open+0x6a>
   380b0:	2005      	movs	r0, #5
   380b2:	f7f1 fad3 	bl	2965c <bsd_os_errno_set>
   380b6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   380ba:	f002 fadd 	bl	3a678 <nrf_free>
   380be:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   380c2:	4638      	mov	r0, r7
   380c4:	e767      	b.n	37f96 <pdn_interface_open+0x6a>
   380c6:	2070      	movs	r0, #112	; 0x70
   380c8:	f7f1 fac8 	bl	2965c <bsd_os_errno_set>
   380cc:	f04f 30ff 	mov.w	r0, #4294967295
   380d0:	e761      	b.n	37f96 <pdn_interface_open+0x6a>
   380d2:	bf00      	nop
   380d4:	2002d6ba 	.word	0x2002d6ba
   380d8:	20025b48 	.word	0x20025b48
   380dc:	00047080 	.word	0x00047080
   380e0:	0004708c 	.word	0x0004708c
   380e4:	20025a48 	.word	0x20025a48
   380e8:	00047090 	.word	0x00047090
   380ec:	0004709c 	.word	0x0004709c
   380f0:	20025a44 	.word	0x20025a44

000380f4 <pdn_interface_connect>:
   380f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   380f8:	b085      	sub	sp, #20
   380fa:	2900      	cmp	r1, #0
   380fc:	f000 81f3 	beq.w	384e6 <pdn_interface_connect+0x3f2>
   38100:	2a64      	cmp	r2, #100	; 0x64
   38102:	4690      	mov	r8, r2
   38104:	f200 81ef 	bhi.w	384e6 <pdn_interface_connect+0x3f2>
   38108:	0c03      	lsrs	r3, r0, #16
   3810a:	4ab1      	ldr	r2, [pc, #708]	; (383d0 <pdn_interface_connect+0x2dc>)
   3810c:	041b      	lsls	r3, r3, #16
   3810e:	4293      	cmp	r3, r2
   38110:	f040 8154 	bne.w	383bc <pdn_interface_connect+0x2c8>
   38114:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   38118:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   3811c:	2c09      	cmp	r4, #9
   3811e:	f300 814d 	bgt.w	383bc <pdn_interface_connect+0x2c8>
   38122:	4fac      	ldr	r7, [pc, #688]	; (383d4 <pdn_interface_connect+0x2e0>)
   38124:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   38128:	2b00      	cmp	r3, #0
   3812a:	f000 8147 	beq.w	383bc <pdn_interface_connect+0x2c8>
   3812e:	689a      	ldr	r2, [r3, #8]
   38130:	2a00      	cmp	r2, #0
   38132:	f000 8143 	beq.w	383bc <pdn_interface_connect+0x2c8>
   38136:	689b      	ldr	r3, [r3, #8]
   38138:	2b02      	cmp	r3, #2
   3813a:	f040 813f 	bne.w	383bc <pdn_interface_connect+0x2c8>
   3813e:	4da6      	ldr	r5, [pc, #664]	; (383d8 <pdn_interface_connect+0x2e4>)
   38140:	4ba6      	ldr	r3, [pc, #664]	; (383dc <pdn_interface_connect+0x2e8>)
   38142:	4aa7      	ldr	r2, [pc, #668]	; (383e0 <pdn_interface_connect+0x2ec>)
   38144:	4689      	mov	r9, r1
   38146:	4628      	mov	r0, r5
   38148:	f44f 7180 	mov.w	r1, #256	; 0x100
   3814c:	f007 fd1e 	bl	3fb8c <sniprintf>
   38150:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   38154:	4606      	mov	r6, r0
   38156:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3815a:	681b      	ldr	r3, [r3, #0]
   3815c:	4aa1      	ldr	r2, [pc, #644]	; (383e4 <pdn_interface_connect+0x2f0>)
   3815e:	1828      	adds	r0, r5, r0
   38160:	f007 fd14 	bl	3fb8c <sniprintf>
   38164:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   38168:	4406      	add	r6, r0
   3816a:	68db      	ldr	r3, [r3, #12]
   3816c:	f003 0203 	and.w	r2, r3, #3
   38170:	2a03      	cmp	r2, #3
   38172:	f000 811a 	beq.w	383aa <pdn_interface_connect+0x2b6>
   38176:	079b      	lsls	r3, r3, #30
   38178:	bf4c      	ite	mi
   3817a:	4b9b      	ldrmi	r3, [pc, #620]	; (383e8 <pdn_interface_connect+0x2f4>)
   3817c:	4b9b      	ldrpl	r3, [pc, #620]	; (383ec <pdn_interface_connect+0x2f8>)
   3817e:	19a8      	adds	r0, r5, r6
   38180:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   38184:	4a9a      	ldr	r2, [pc, #616]	; (383f0 <pdn_interface_connect+0x2fc>)
   38186:	f007 fd01 	bl	3fb8c <sniprintf>
   3818a:	1833      	adds	r3, r6, r0
   3818c:	eb08 0203 	add.w	r2, r8, r3
   38190:	2afd      	cmp	r2, #253	; 0xfd
   38192:	f300 81a5 	bgt.w	384e0 <pdn_interface_connect+0x3ec>
   38196:	2122      	movs	r1, #34	; 0x22
   38198:	1c5e      	adds	r6, r3, #1
   3819a:	54e9      	strb	r1, [r5, r3]
   3819c:	4642      	mov	r2, r8
   3819e:	19a8      	adds	r0, r5, r6
   381a0:	4649      	mov	r1, r9
   381a2:	f00c ffb2 	bl	4510a <strncpy>
   381a6:	eb08 0306 	add.w	r3, r8, r6
   381aa:	18ea      	adds	r2, r5, r3
   381ac:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   381b0:	b902      	cbnz	r2, 381b4 <pdn_interface_connect+0xc0>
   381b2:	3b01      	subs	r3, #1
   381b4:	2600      	movs	r6, #0
   381b6:	2122      	movs	r1, #34	; 0x22
   381b8:	18ea      	adds	r2, r5, r3
   381ba:	f8df a254 	ldr.w	sl, [pc, #596]	; 38410 <pdn_interface_connect+0x31c>
   381be:	54e9      	strb	r1, [r5, r3]
   381c0:	4885      	ldr	r0, [pc, #532]	; (383d8 <pdn_interface_connect+0x2e4>)
   381c2:	7056      	strb	r6, [r2, #1]
   381c4:	f8da b000 	ldr.w	fp, [sl]
   381c8:	f7e5 f848 	bl	1d25c <strlen>
   381cc:	4633      	mov	r3, r6
   381ce:	4602      	mov	r2, r0
   381d0:	4981      	ldr	r1, [pc, #516]	; (383d8 <pdn_interface_connect+0x2e4>)
   381d2:	4658      	mov	r0, fp
   381d4:	9601      	str	r6, [sp, #4]
   381d6:	9600      	str	r6, [sp, #0]
   381d8:	f7ff fb9e 	bl	37918 <at_interface_write>
   381dc:	4683      	mov	fp, r0
   381de:	487e      	ldr	r0, [pc, #504]	; (383d8 <pdn_interface_connect+0x2e4>)
   381e0:	f7e5 f83c 	bl	1d25c <strlen>
   381e4:	4558      	cmp	r0, fp
   381e6:	d008      	beq.n	381fa <pdn_interface_connect+0x106>
   381e8:	2005      	movs	r0, #5
   381ea:	f7f1 fa37 	bl	2965c <bsd_os_errno_set>
   381ee:	f04f 3bff 	mov.w	fp, #4294967295
   381f2:	4658      	mov	r0, fp
   381f4:	b005      	add	sp, #20
   381f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   381fa:	4633      	mov	r3, r6
   381fc:	e9cd 6600 	strd	r6, r6, [sp]
   38200:	f44f 7280 	mov.w	r2, #256	; 0x100
   38204:	4974      	ldr	r1, [pc, #464]	; (383d8 <pdn_interface_connect+0x2e4>)
   38206:	f8da 0000 	ldr.w	r0, [sl]
   3820a:	f7ff fce7 	bl	37bdc <at_interface_read>
   3820e:	4606      	mov	r6, r0
   38210:	4878      	ldr	r0, [pc, #480]	; (383f4 <pdn_interface_connect+0x300>)
   38212:	f7e5 f823 	bl	1d25c <strlen>
   38216:	4286      	cmp	r6, r0
   38218:	da0f      	bge.n	3823a <pdn_interface_connect+0x146>
   3821a:	4877      	ldr	r0, [pc, #476]	; (383f8 <pdn_interface_connect+0x304>)
   3821c:	f7e5 f81e 	bl	1d25c <strlen>
   38220:	496d      	ldr	r1, [pc, #436]	; (383d8 <pdn_interface_connect+0x2e4>)
   38222:	4602      	mov	r2, r0
   38224:	4874      	ldr	r0, [pc, #464]	; (383f8 <pdn_interface_connect+0x304>)
   38226:	f00c ff5e 	bl	450e6 <strncmp>
   3822a:	2800      	cmp	r0, #0
   3822c:	d1dc      	bne.n	381e8 <pdn_interface_connect+0xf4>
   3822e:	2008      	movs	r0, #8
   38230:	f7f1 fa14 	bl	2965c <bsd_os_errno_set>
   38234:	f04f 3bff 	mov.w	fp, #4294967295
   38238:	e7db      	b.n	381f2 <pdn_interface_connect+0xfe>
   3823a:	4602      	mov	r2, r0
   3823c:	4966      	ldr	r1, [pc, #408]	; (383d8 <pdn_interface_connect+0x2e4>)
   3823e:	486d      	ldr	r0, [pc, #436]	; (383f4 <pdn_interface_connect+0x300>)
   38240:	f00c ff51 	bl	450e6 <strncmp>
   38244:	2800      	cmp	r0, #0
   38246:	d1e8      	bne.n	3821a <pdn_interface_connect+0x126>
   38248:	4963      	ldr	r1, [pc, #396]	; (383d8 <pdn_interface_connect+0x2e4>)
   3824a:	4620      	mov	r0, r4
   3824c:	f7ff fdae 	bl	37dac <ok_rsp_parser>
   38250:	4683      	mov	fp, r0
   38252:	2800      	cmp	r0, #0
   38254:	d1cd      	bne.n	381f2 <pdn_interface_connect+0xfe>
   38256:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   3825a:	7c1b      	ldrb	r3, [r3, #16]
   3825c:	2b00      	cmp	r3, #0
   3825e:	f040 80d9 	bne.w	38414 <pdn_interface_connect+0x320>
   38262:	4b66      	ldr	r3, [pc, #408]	; (383fc <pdn_interface_connect+0x308>)
   38264:	4a5e      	ldr	r2, [pc, #376]	; (383e0 <pdn_interface_connect+0x2ec>)
   38266:	f44f 7180 	mov.w	r1, #256	; 0x100
   3826a:	485b      	ldr	r0, [pc, #364]	; (383d8 <pdn_interface_connect+0x2e4>)
   3826c:	f007 fc8e 	bl	3fb8c <sniprintf>
   38270:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   38274:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   38278:	4a61      	ldr	r2, [pc, #388]	; (38400 <pdn_interface_connect+0x30c>)
   3827a:	681b      	ldr	r3, [r3, #0]
   3827c:	4428      	add	r0, r5
   3827e:	f007 fc85 	bl	3fb8c <sniprintf>
   38282:	f8da 3000 	ldr.w	r3, [sl]
   38286:	4854      	ldr	r0, [pc, #336]	; (383d8 <pdn_interface_connect+0x2e4>)
   38288:	2600      	movs	r6, #0
   3828a:	9303      	str	r3, [sp, #12]
   3828c:	f7e4 ffe6 	bl	1d25c <strlen>
   38290:	9b03      	ldr	r3, [sp, #12]
   38292:	4602      	mov	r2, r0
   38294:	4950      	ldr	r1, [pc, #320]	; (383d8 <pdn_interface_connect+0x2e4>)
   38296:	4618      	mov	r0, r3
   38298:	9601      	str	r6, [sp, #4]
   3829a:	4633      	mov	r3, r6
   3829c:	9600      	str	r6, [sp, #0]
   3829e:	f7ff fb3b 	bl	37918 <at_interface_write>
   382a2:	9003      	str	r0, [sp, #12]
   382a4:	484c      	ldr	r0, [pc, #304]	; (383d8 <pdn_interface_connect+0x2e4>)
   382a6:	f7e4 ffd9 	bl	1d25c <strlen>
   382aa:	9b03      	ldr	r3, [sp, #12]
   382ac:	4298      	cmp	r0, r3
   382ae:	d19b      	bne.n	381e8 <pdn_interface_connect+0xf4>
   382b0:	4633      	mov	r3, r6
   382b2:	e9cd 6600 	strd	r6, r6, [sp]
   382b6:	f44f 7280 	mov.w	r2, #256	; 0x100
   382ba:	4947      	ldr	r1, [pc, #284]	; (383d8 <pdn_interface_connect+0x2e4>)
   382bc:	f8da 0000 	ldr.w	r0, [sl]
   382c0:	f7ff fc8c 	bl	37bdc <at_interface_read>
   382c4:	4606      	mov	r6, r0
   382c6:	484b      	ldr	r0, [pc, #300]	; (383f4 <pdn_interface_connect+0x300>)
   382c8:	f7e4 ffc8 	bl	1d25c <strlen>
   382cc:	4286      	cmp	r6, r0
   382ce:	dba4      	blt.n	3821a <pdn_interface_connect+0x126>
   382d0:	4602      	mov	r2, r0
   382d2:	4941      	ldr	r1, [pc, #260]	; (383d8 <pdn_interface_connect+0x2e4>)
   382d4:	4847      	ldr	r0, [pc, #284]	; (383f4 <pdn_interface_connect+0x300>)
   382d6:	f00c ff06 	bl	450e6 <strncmp>
   382da:	4606      	mov	r6, r0
   382dc:	2800      	cmp	r0, #0
   382de:	d19c      	bne.n	3821a <pdn_interface_connect+0x126>
   382e0:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   382e4:	f108 0320 	add.w	r3, r8, #32
   382e8:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   382ec:	4413      	add	r3, r2
   382ee:	4419      	add	r1, r3
   382f0:	f002 f9ce 	bl	3a690 <nrf_realloc>
   382f4:	2800      	cmp	r0, #0
   382f6:	f000 80fc 	beq.w	384f2 <pdn_interface_connect+0x3fe>
   382fa:	2303      	movs	r3, #3
   382fc:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   38300:	6083      	str	r3, [r0, #8]
   38302:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   38306:	4649      	mov	r1, r9
   38308:	f8c3 801c 	str.w	r8, [r3, #28]
   3830c:	f857 c024 	ldr.w	ip, [r7, r4, lsl #2]
   38310:	4642      	mov	r2, r8
   38312:	e9dc 0305 	ldrd	r0, r3, [ip, #20]
   38316:	4418      	add	r0, r3
   38318:	4603      	mov	r3, r0
   3831a:	3320      	adds	r3, #32
   3831c:	eb0c 0003 	add.w	r0, ip, r3
   38320:	f00c fce1 	bl	44ce6 <memcpy>
   38324:	4b37      	ldr	r3, [pc, #220]	; (38404 <pdn_interface_connect+0x310>)
   38326:	4a2e      	ldr	r2, [pc, #184]	; (383e0 <pdn_interface_connect+0x2ec>)
   38328:	f44f 7180 	mov.w	r1, #256	; 0x100
   3832c:	482a      	ldr	r0, [pc, #168]	; (383d8 <pdn_interface_connect+0x2e4>)
   3832e:	f007 fc2d 	bl	3fb8c <sniprintf>
   38332:	4601      	mov	r1, r0
   38334:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   38338:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   3833c:	681b      	ldr	r3, [r3, #0]
   3833e:	4a30      	ldr	r2, [pc, #192]	; (38400 <pdn_interface_connect+0x30c>)
   38340:	1828      	adds	r0, r5, r0
   38342:	f007 fc23 	bl	3fb8c <sniprintf>
   38346:	4824      	ldr	r0, [pc, #144]	; (383d8 <pdn_interface_connect+0x2e4>)
   38348:	f8da 5000 	ldr.w	r5, [sl]
   3834c:	f7e4 ff86 	bl	1d25c <strlen>
   38350:	4633      	mov	r3, r6
   38352:	4602      	mov	r2, r0
   38354:	4920      	ldr	r1, [pc, #128]	; (383d8 <pdn_interface_connect+0x2e4>)
   38356:	4628      	mov	r0, r5
   38358:	9601      	str	r6, [sp, #4]
   3835a:	9600      	str	r6, [sp, #0]
   3835c:	f7ff fadc 	bl	37918 <at_interface_write>
   38360:	4605      	mov	r5, r0
   38362:	481d      	ldr	r0, [pc, #116]	; (383d8 <pdn_interface_connect+0x2e4>)
   38364:	f7e4 ff7a 	bl	1d25c <strlen>
   38368:	42a8      	cmp	r0, r5
   3836a:	f040 80d2 	bne.w	38512 <pdn_interface_connect+0x41e>
   3836e:	4633      	mov	r3, r6
   38370:	f44f 7280 	mov.w	r2, #256	; 0x100
   38374:	4918      	ldr	r1, [pc, #96]	; (383d8 <pdn_interface_connect+0x2e4>)
   38376:	f8da 0000 	ldr.w	r0, [sl]
   3837a:	e9cd 6600 	strd	r6, r6, [sp]
   3837e:	f7ff fc2d 	bl	37bdc <at_interface_read>
   38382:	4605      	mov	r5, r0
   38384:	4820      	ldr	r0, [pc, #128]	; (38408 <pdn_interface_connect+0x314>)
   38386:	f7e4 ff69 	bl	1d25c <strlen>
   3838a:	4285      	cmp	r5, r0
   3838c:	f2c0 80b4 	blt.w	384f8 <pdn_interface_connect+0x404>
   38390:	4602      	mov	r2, r0
   38392:	4911      	ldr	r1, [pc, #68]	; (383d8 <pdn_interface_connect+0x2e4>)
   38394:	481c      	ldr	r0, [pc, #112]	; (38408 <pdn_interface_connect+0x314>)
   38396:	f00c fea6 	bl	450e6 <strncmp>
   3839a:	2800      	cmp	r0, #0
   3839c:	f040 80ac 	bne.w	384f8 <pdn_interface_connect+0x404>
   383a0:	4620      	mov	r0, r4
   383a2:	490d      	ldr	r1, [pc, #52]	; (383d8 <pdn_interface_connect+0x2e4>)
   383a4:	f7ff fd3a 	bl	37e1c <pdn_id_get_parser>
   383a8:	e723      	b.n	381f2 <pdn_interface_connect+0xfe>
   383aa:	4b18      	ldr	r3, [pc, #96]	; (3840c <pdn_interface_connect+0x318>)
   383ac:	4a10      	ldr	r2, [pc, #64]	; (383f0 <pdn_interface_connect+0x2fc>)
   383ae:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   383b2:	19a8      	adds	r0, r5, r6
   383b4:	f007 fbea 	bl	3fb8c <sniprintf>
   383b8:	1833      	adds	r3, r6, r0
   383ba:	e6e7      	b.n	3818c <pdn_interface_connect+0x98>
   383bc:	f04f 3bff 	mov.w	fp, #4294967295
   383c0:	2009      	movs	r0, #9
   383c2:	f7f1 f94b 	bl	2965c <bsd_os_errno_set>
   383c6:	4658      	mov	r0, fp
   383c8:	b005      	add	sp, #20
   383ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   383ce:	bf00      	nop
   383d0:	789a0000 	.word	0x789a0000
   383d4:	20025b48 	.word	0x20025b48
   383d8:	20025a48 	.word	0x20025a48
   383dc:	00046ff4 	.word	0x00046ff4
   383e0:	0004708c 	.word	0x0004708c
   383e4:	00047000 	.word	0x00047000
   383e8:	00047014 	.word	0x00047014
   383ec:	0004701c 	.word	0x0004701c
   383f0:	0004700c 	.word	0x0004700c
   383f4:	00047020 	.word	0x00047020
   383f8:	0004709c 	.word	0x0004709c
   383fc:	00047040 	.word	0x00047040
   38400:	0004704c 	.word	0x0004704c
   38404:	00047050 	.word	0x00047050
   38408:	00047060 	.word	0x00047060
   3840c:	00047004 	.word	0x00047004
   38410:	20025a44 	.word	0x20025a44
   38414:	4b41      	ldr	r3, [pc, #260]	; (3851c <pdn_interface_connect+0x428>)
   38416:	4a42      	ldr	r2, [pc, #264]	; (38520 <pdn_interface_connect+0x42c>)
   38418:	f44f 7180 	mov.w	r1, #256	; 0x100
   3841c:	4841      	ldr	r0, [pc, #260]	; (38524 <pdn_interface_connect+0x430>)
   3841e:	f007 fbb5 	bl	3fb8c <sniprintf>
   38422:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   38426:	4a40      	ldr	r2, [pc, #256]	; (38528 <pdn_interface_connect+0x434>)
   38428:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3842c:	4606      	mov	r6, r0
   3842e:	681b      	ldr	r3, [r3, #0]
   38430:	1828      	adds	r0, r5, r0
   38432:	f007 fbab 	bl	3fb8c <sniprintf>
   38436:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   3843a:	4406      	add	r6, r0
   3843c:	7c1b      	ldrb	r3, [r3, #16]
   3843e:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   38442:	2b01      	cmp	r3, #1
   38444:	bf0c      	ite	eq
   38446:	4a39      	ldreq	r2, [pc, #228]	; (3852c <pdn_interface_connect+0x438>)
   38448:	4a39      	ldrne	r2, [pc, #228]	; (38530 <pdn_interface_connect+0x43c>)
   3844a:	19a8      	adds	r0, r5, r6
   3844c:	f007 fb9e 	bl	3fb8c <sniprintf>
   38450:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   38454:	4406      	add	r6, r0
   38456:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   3845a:	4a36      	ldr	r2, [pc, #216]	; (38534 <pdn_interface_connect+0x440>)
   3845c:	3320      	adds	r3, #32
   3845e:	19a8      	adds	r0, r5, r6
   38460:	f007 fb94 	bl	3fb8c <sniprintf>
   38464:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   38468:	4430      	add	r0, r6
   3846a:	695a      	ldr	r2, [r3, #20]
   3846c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   38470:	3220      	adds	r2, #32
   38472:	4413      	add	r3, r2
   38474:	4428      	add	r0, r5
   38476:	4a30      	ldr	r2, [pc, #192]	; (38538 <pdn_interface_connect+0x444>)
   38478:	f007 fb88 	bl	3fb8c <sniprintf>
   3847c:	f8da 3000 	ldr.w	r3, [sl]
   38480:	4828      	ldr	r0, [pc, #160]	; (38524 <pdn_interface_connect+0x430>)
   38482:	2600      	movs	r6, #0
   38484:	9303      	str	r3, [sp, #12]
   38486:	f7e4 fee9 	bl	1d25c <strlen>
   3848a:	9b03      	ldr	r3, [sp, #12]
   3848c:	4602      	mov	r2, r0
   3848e:	4925      	ldr	r1, [pc, #148]	; (38524 <pdn_interface_connect+0x430>)
   38490:	4618      	mov	r0, r3
   38492:	9601      	str	r6, [sp, #4]
   38494:	4633      	mov	r3, r6
   38496:	9600      	str	r6, [sp, #0]
   38498:	f7ff fa3e 	bl	37918 <at_interface_write>
   3849c:	9003      	str	r0, [sp, #12]
   3849e:	4821      	ldr	r0, [pc, #132]	; (38524 <pdn_interface_connect+0x430>)
   384a0:	f7e4 fedc 	bl	1d25c <strlen>
   384a4:	9b03      	ldr	r3, [sp, #12]
   384a6:	4298      	cmp	r0, r3
   384a8:	f47f ae9e 	bne.w	381e8 <pdn_interface_connect+0xf4>
   384ac:	4633      	mov	r3, r6
   384ae:	e9cd 6600 	strd	r6, r6, [sp]
   384b2:	f44f 7280 	mov.w	r2, #256	; 0x100
   384b6:	491b      	ldr	r1, [pc, #108]	; (38524 <pdn_interface_connect+0x430>)
   384b8:	f8da 0000 	ldr.w	r0, [sl]
   384bc:	f7ff fb8e 	bl	37bdc <at_interface_read>
   384c0:	4606      	mov	r6, r0
   384c2:	481e      	ldr	r0, [pc, #120]	; (3853c <pdn_interface_connect+0x448>)
   384c4:	f7e4 feca 	bl	1d25c <strlen>
   384c8:	4286      	cmp	r6, r0
   384ca:	f6ff aea6 	blt.w	3821a <pdn_interface_connect+0x126>
   384ce:	4602      	mov	r2, r0
   384d0:	4914      	ldr	r1, [pc, #80]	; (38524 <pdn_interface_connect+0x430>)
   384d2:	481a      	ldr	r0, [pc, #104]	; (3853c <pdn_interface_connect+0x448>)
   384d4:	f00c fe07 	bl	450e6 <strncmp>
   384d8:	2800      	cmp	r0, #0
   384da:	f43f aec2 	beq.w	38262 <pdn_interface_connect+0x16e>
   384de:	e69c      	b.n	3821a <pdn_interface_connect+0x126>
   384e0:	f04f 3bff 	mov.w	fp, #4294967295
   384e4:	e685      	b.n	381f2 <pdn_interface_connect+0xfe>
   384e6:	2016      	movs	r0, #22
   384e8:	f7f1 f8b8 	bl	2965c <bsd_os_errno_set>
   384ec:	f04f 3bff 	mov.w	fp, #4294967295
   384f0:	e67f      	b.n	381f2 <pdn_interface_connect+0xfe>
   384f2:	f04f 0b0c 	mov.w	fp, #12
   384f6:	e67c      	b.n	381f2 <pdn_interface_connect+0xfe>
   384f8:	4811      	ldr	r0, [pc, #68]	; (38540 <pdn_interface_connect+0x44c>)
   384fa:	f7e4 feaf 	bl	1d25c <strlen>
   384fe:	4909      	ldr	r1, [pc, #36]	; (38524 <pdn_interface_connect+0x430>)
   38500:	4602      	mov	r2, r0
   38502:	480f      	ldr	r0, [pc, #60]	; (38540 <pdn_interface_connect+0x44c>)
   38504:	f00c fdef 	bl	450e6 <strncmp>
   38508:	b918      	cbnz	r0, 38512 <pdn_interface_connect+0x41e>
   3850a:	2008      	movs	r0, #8
   3850c:	f7f1 f8a6 	bl	2965c <bsd_os_errno_set>
   38510:	e66f      	b.n	381f2 <pdn_interface_connect+0xfe>
   38512:	2005      	movs	r0, #5
   38514:	f7f1 f8a2 	bl	2965c <bsd_os_errno_set>
   38518:	e66b      	b.n	381f2 <pdn_interface_connect+0xfe>
   3851a:	bf00      	nop
   3851c:	00047024 	.word	0x00047024
   38520:	0004708c 	.word	0x0004708c
   38524:	20025a48 	.word	0x20025a48
   38528:	00047000 	.word	0x00047000
   3852c:	00047030 	.word	0x00047030
   38530:	00047034 	.word	0x00047034
   38534:	0004700c 	.word	0x0004700c
   38538:	00047038 	.word	0x00047038
   3853c:	00047020 	.word	0x00047020
   38540:	0004709c 	.word	0x0004709c

00038544 <pdn_interface_close>:
   38544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   38548:	4a6c      	ldr	r2, [pc, #432]	; (386fc <pdn_interface_close+0x1b8>)
   3854a:	0c03      	lsrs	r3, r0, #16
   3854c:	041b      	lsls	r3, r3, #16
   3854e:	4293      	cmp	r3, r2
   38550:	b083      	sub	sp, #12
   38552:	f040 80ae 	bne.w	386b2 <pdn_interface_close+0x16e>
   38556:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   3855a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   3855e:	2c09      	cmp	r4, #9
   38560:	f300 80a7 	bgt.w	386b2 <pdn_interface_close+0x16e>
   38564:	4d66      	ldr	r5, [pc, #408]	; (38700 <pdn_interface_close+0x1bc>)
   38566:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   3856a:	2800      	cmp	r0, #0
   3856c:	f000 80a1 	beq.w	386b2 <pdn_interface_close+0x16e>
   38570:	6883      	ldr	r3, [r0, #8]
   38572:	2b00      	cmp	r3, #0
   38574:	f000 809d 	beq.w	386b2 <pdn_interface_close+0x16e>
   38578:	6883      	ldr	r3, [r0, #8]
   3857a:	2b03      	cmp	r3, #3
   3857c:	d00b      	beq.n	38596 <pdn_interface_close+0x52>
   3857e:	6883      	ldr	r3, [r0, #8]
   38580:	2b02      	cmp	r3, #2
   38582:	d056      	beq.n	38632 <pdn_interface_close+0xee>
   38584:	f002 f878 	bl	3a678 <nrf_free>
   38588:	2300      	movs	r3, #0
   3858a:	4618      	mov	r0, r3
   3858c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   38590:	b003      	add	sp, #12
   38592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   38596:	4e5b      	ldr	r6, [pc, #364]	; (38704 <pdn_interface_close+0x1c0>)
   38598:	4b5b      	ldr	r3, [pc, #364]	; (38708 <pdn_interface_close+0x1c4>)
   3859a:	4a5c      	ldr	r2, [pc, #368]	; (3870c <pdn_interface_close+0x1c8>)
   3859c:	f44f 7180 	mov.w	r1, #256	; 0x100
   385a0:	4630      	mov	r0, r6
   385a2:	f007 faf3 	bl	3fb8c <sniprintf>
   385a6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   385aa:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   385ae:	681b      	ldr	r3, [r3, #0]
   385b0:	4a57      	ldr	r2, [pc, #348]	; (38710 <pdn_interface_close+0x1cc>)
   385b2:	4430      	add	r0, r6
   385b4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 38720 <pdn_interface_close+0x1dc>
   385b8:	f007 fae8 	bl	3fb8c <sniprintf>
   385bc:	4630      	mov	r0, r6
   385be:	f8d8 9000 	ldr.w	r9, [r8]
   385c2:	2700      	movs	r7, #0
   385c4:	f7e4 fe4a 	bl	1d25c <strlen>
   385c8:	4631      	mov	r1, r6
   385ca:	4602      	mov	r2, r0
   385cc:	463b      	mov	r3, r7
   385ce:	4648      	mov	r0, r9
   385d0:	9701      	str	r7, [sp, #4]
   385d2:	9700      	str	r7, [sp, #0]
   385d4:	f7ff f9a0 	bl	37918 <at_interface_write>
   385d8:	4681      	mov	r9, r0
   385da:	4630      	mov	r0, r6
   385dc:	f7e4 fe3e 	bl	1d25c <strlen>
   385e0:	4548      	cmp	r0, r9
   385e2:	f040 8083 	bne.w	386ec <pdn_interface_close+0x1a8>
   385e6:	463b      	mov	r3, r7
   385e8:	e9cd 7700 	strd	r7, r7, [sp]
   385ec:	f44f 7280 	mov.w	r2, #256	; 0x100
   385f0:	4631      	mov	r1, r6
   385f2:	f8d8 0000 	ldr.w	r0, [r8]
   385f6:	f7ff faf1 	bl	37bdc <at_interface_read>
   385fa:	4607      	mov	r7, r0
   385fc:	4845      	ldr	r0, [pc, #276]	; (38714 <pdn_interface_close+0x1d0>)
   385fe:	f7e4 fe2d 	bl	1d25c <strlen>
   38602:	4287      	cmp	r7, r0
   38604:	da5b      	bge.n	386be <pdn_interface_close+0x17a>
   38606:	4844      	ldr	r0, [pc, #272]	; (38718 <pdn_interface_close+0x1d4>)
   38608:	f7e4 fe28 	bl	1d25c <strlen>
   3860c:	493d      	ldr	r1, [pc, #244]	; (38704 <pdn_interface_close+0x1c0>)
   3860e:	4602      	mov	r2, r0
   38610:	4841      	ldr	r0, [pc, #260]	; (38718 <pdn_interface_close+0x1d4>)
   38612:	f00c fd68 	bl	450e6 <strncmp>
   38616:	2800      	cmp	r0, #0
   38618:	d168      	bne.n	386ec <pdn_interface_close+0x1a8>
   3861a:	2008      	movs	r0, #8
   3861c:	f7f1 f81e 	bl	2965c <bsd_os_errno_set>
   38620:	2202      	movs	r2, #2
   38622:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   38626:	609a      	str	r2, [r3, #8]
   38628:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   3862c:	6883      	ldr	r3, [r0, #8]
   3862e:	2b02      	cmp	r3, #2
   38630:	d1a8      	bne.n	38584 <pdn_interface_close+0x40>
   38632:	4e34      	ldr	r6, [pc, #208]	; (38704 <pdn_interface_close+0x1c0>)
   38634:	4b39      	ldr	r3, [pc, #228]	; (3871c <pdn_interface_close+0x1d8>)
   38636:	4a35      	ldr	r2, [pc, #212]	; (3870c <pdn_interface_close+0x1c8>)
   38638:	f44f 7180 	mov.w	r1, #256	; 0x100
   3863c:	4630      	mov	r0, r6
   3863e:	f007 faa5 	bl	3fb8c <sniprintf>
   38642:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   38646:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3864a:	681b      	ldr	r3, [r3, #0]
   3864c:	4a30      	ldr	r2, [pc, #192]	; (38710 <pdn_interface_close+0x1cc>)
   3864e:	4430      	add	r0, r6
   38650:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 38720 <pdn_interface_close+0x1dc>
   38654:	f007 fa9a 	bl	3fb8c <sniprintf>
   38658:	4630      	mov	r0, r6
   3865a:	f8d8 9000 	ldr.w	r9, [r8]
   3865e:	2700      	movs	r7, #0
   38660:	f7e4 fdfc 	bl	1d25c <strlen>
   38664:	4631      	mov	r1, r6
   38666:	4602      	mov	r2, r0
   38668:	463b      	mov	r3, r7
   3866a:	4648      	mov	r0, r9
   3866c:	9701      	str	r7, [sp, #4]
   3866e:	9700      	str	r7, [sp, #0]
   38670:	f7ff f952 	bl	37918 <at_interface_write>
   38674:	4681      	mov	r9, r0
   38676:	4630      	mov	r0, r6
   38678:	f7e4 fdf0 	bl	1d25c <strlen>
   3867c:	4548      	cmp	r0, r9
   3867e:	d139      	bne.n	386f4 <pdn_interface_close+0x1b0>
   38680:	463b      	mov	r3, r7
   38682:	e9cd 7700 	strd	r7, r7, [sp]
   38686:	f44f 7280 	mov.w	r2, #256	; 0x100
   3868a:	4631      	mov	r1, r6
   3868c:	f8d8 0000 	ldr.w	r0, [r8]
   38690:	f7ff faa4 	bl	37bdc <at_interface_read>
   38694:	4607      	mov	r7, r0
   38696:	481f      	ldr	r0, [pc, #124]	; (38714 <pdn_interface_close+0x1d0>)
   38698:	f7e4 fde0 	bl	1d25c <strlen>
   3869c:	4287      	cmp	r7, r0
   3869e:	db16      	blt.n	386ce <pdn_interface_close+0x18a>
   386a0:	4602      	mov	r2, r0
   386a2:	4631      	mov	r1, r6
   386a4:	481b      	ldr	r0, [pc, #108]	; (38714 <pdn_interface_close+0x1d0>)
   386a6:	f00c fd1e 	bl	450e6 <strncmp>
   386aa:	b980      	cbnz	r0, 386ce <pdn_interface_close+0x18a>
   386ac:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   386b0:	e768      	b.n	38584 <pdn_interface_close+0x40>
   386b2:	2009      	movs	r0, #9
   386b4:	f7f0 ffd2 	bl	2965c <bsd_os_errno_set>
   386b8:	f04f 30ff 	mov.w	r0, #4294967295
   386bc:	e768      	b.n	38590 <pdn_interface_close+0x4c>
   386be:	4602      	mov	r2, r0
   386c0:	4631      	mov	r1, r6
   386c2:	4814      	ldr	r0, [pc, #80]	; (38714 <pdn_interface_close+0x1d0>)
   386c4:	f00c fd0f 	bl	450e6 <strncmp>
   386c8:	2800      	cmp	r0, #0
   386ca:	d0a9      	beq.n	38620 <pdn_interface_close+0xdc>
   386cc:	e79b      	b.n	38606 <pdn_interface_close+0xc2>
   386ce:	4812      	ldr	r0, [pc, #72]	; (38718 <pdn_interface_close+0x1d4>)
   386d0:	f7e4 fdc4 	bl	1d25c <strlen>
   386d4:	490b      	ldr	r1, [pc, #44]	; (38704 <pdn_interface_close+0x1c0>)
   386d6:	4602      	mov	r2, r0
   386d8:	480f      	ldr	r0, [pc, #60]	; (38718 <pdn_interface_close+0x1d4>)
   386da:	f00c fd04 	bl	450e6 <strncmp>
   386de:	b948      	cbnz	r0, 386f4 <pdn_interface_close+0x1b0>
   386e0:	2008      	movs	r0, #8
   386e2:	f7f0 ffbb 	bl	2965c <bsd_os_errno_set>
   386e6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   386ea:	e74b      	b.n	38584 <pdn_interface_close+0x40>
   386ec:	2005      	movs	r0, #5
   386ee:	f7f0 ffb5 	bl	2965c <bsd_os_errno_set>
   386f2:	e795      	b.n	38620 <pdn_interface_close+0xdc>
   386f4:	2005      	movs	r0, #5
   386f6:	f7f0 ffb1 	bl	2965c <bsd_os_errno_set>
   386fa:	e7d7      	b.n	386ac <pdn_interface_close+0x168>
   386fc:	789a0000 	.word	0x789a0000
   38700:	20025b48 	.word	0x20025b48
   38704:	20025a48 	.word	0x20025a48
   38708:	00046fe8 	.word	0x00046fe8
   3870c:	0004708c 	.word	0x0004708c
   38710:	0004704c 	.word	0x0004704c
   38714:	00047020 	.word	0x00047020
   38718:	0004709c 	.word	0x0004709c
   3871c:	00046ff4 	.word	0x00046ff4
   38720:	20025a44 	.word	0x20025a44

00038724 <pdn_interface_setopt>:
   38724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38726:	f240 2402 	movw	r4, #514	; 0x202
   3872a:	42a1      	cmp	r1, r4
   3872c:	9e06      	ldr	r6, [sp, #24]
   3872e:	f040 8090 	bne.w	38852 <pdn_interface_setopt+0x12e>
   38732:	461d      	mov	r5, r3
   38734:	2b00      	cmp	r3, #0
   38736:	f000 808c 	beq.w	38852 <pdn_interface_setopt+0x12e>
   3873a:	2e00      	cmp	r6, #0
   3873c:	f000 8089 	beq.w	38852 <pdn_interface_setopt+0x12e>
   38740:	0c03      	lsrs	r3, r0, #16
   38742:	494d      	ldr	r1, [pc, #308]	; (38878 <pdn_interface_setopt+0x154>)
   38744:	041b      	lsls	r3, r3, #16
   38746:	428b      	cmp	r3, r1
   38748:	d005      	beq.n	38756 <pdn_interface_setopt+0x32>
   3874a:	2009      	movs	r0, #9
   3874c:	f7f0 ff86 	bl	2965c <bsd_os_errno_set>
   38750:	f04f 30ff 	mov.w	r0, #4294967295
   38754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38756:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   3875a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   3875e:	2c09      	cmp	r4, #9
   38760:	dcf3      	bgt.n	3874a <pdn_interface_setopt+0x26>
   38762:	4f46      	ldr	r7, [pc, #280]	; (3887c <pdn_interface_setopt+0x158>)
   38764:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   38768:	2b00      	cmp	r3, #0
   3876a:	d0ee      	beq.n	3874a <pdn_interface_setopt+0x26>
   3876c:	6899      	ldr	r1, [r3, #8]
   3876e:	2900      	cmp	r1, #0
   38770:	d0eb      	beq.n	3874a <pdn_interface_setopt+0x26>
   38772:	2a01      	cmp	r2, #1
   38774:	d049      	beq.n	3880a <pdn_interface_setopt+0xe6>
   38776:	2a04      	cmp	r2, #4
   38778:	d145      	bne.n	38806 <pdn_interface_setopt+0xe2>
   3877a:	689a      	ldr	r2, [r3, #8]
   3877c:	2a00      	cmp	r2, #0
   3877e:	d04c      	beq.n	3881a <pdn_interface_setopt+0xf6>
   38780:	689a      	ldr	r2, [r3, #8]
   38782:	2a03      	cmp	r2, #3
   38784:	d049      	beq.n	3881a <pdn_interface_setopt+0xf6>
   38786:	689b      	ldr	r3, [r3, #8]
   38788:	2b04      	cmp	r3, #4
   3878a:	d046      	beq.n	3881a <pdn_interface_setopt+0xf6>
   3878c:	4628      	mov	r0, r5
   3878e:	f7e4 fd65 	bl	1d25c <strlen>
   38792:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   38796:	3001      	adds	r0, #1
   38798:	f105 0664 	add.w	r6, r5, #100	; 0x64
   3879c:	6158      	str	r0, [r3, #20]
   3879e:	4630      	mov	r0, r6
   387a0:	f7e4 fd5c 	bl	1d25c <strlen>
   387a4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   387a8:	3001      	adds	r0, #1
   387aa:	6198      	str	r0, [r3, #24]
   387ac:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
   387b0:	3b01      	subs	r3, #1
   387b2:	2b01      	cmp	r3, #1
   387b4:	d84b      	bhi.n	3884e <pdn_interface_setopt+0x12a>
   387b6:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   387ba:	6943      	ldr	r3, [r0, #20]
   387bc:	2b63      	cmp	r3, #99	; 0x63
   387be:	dc46      	bgt.n	3884e <pdn_interface_setopt+0x12a>
   387c0:	6982      	ldr	r2, [r0, #24]
   387c2:	2a63      	cmp	r2, #99	; 0x63
   387c4:	dc43      	bgt.n	3884e <pdn_interface_setopt+0x12a>
   387c6:	4413      	add	r3, r2
   387c8:	f103 0120 	add.w	r1, r3, #32
   387cc:	f001 ff60 	bl	3a690 <nrf_realloc>
   387d0:	4603      	mov	r3, r0
   387d2:	2800      	cmp	r0, #0
   387d4:	d048      	beq.n	38868 <pdn_interface_setopt+0x144>
   387d6:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   387da:	6941      	ldr	r1, [r0, #20]
   387dc:	462b      	mov	r3, r5
   387de:	4a28      	ldr	r2, [pc, #160]	; (38880 <pdn_interface_setopt+0x15c>)
   387e0:	3020      	adds	r0, #32
   387e2:	f007 f9d3 	bl	3fb8c <sniprintf>
   387e6:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   387ea:	3021      	adds	r0, #33	; 0x21
   387ec:	4633      	mov	r3, r6
   387ee:	6991      	ldr	r1, [r2, #24]
   387f0:	4410      	add	r0, r2
   387f2:	4a23      	ldr	r2, [pc, #140]	; (38880 <pdn_interface_setopt+0x15c>)
   387f4:	f007 f9ca 	bl	3fb8c <sniprintf>
   387f8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   387fc:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   38800:	2000      	movs	r0, #0
   38802:	741a      	strb	r2, [r3, #16]
   38804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38806:	202d      	movs	r0, #45	; 0x2d
   38808:	e7a0      	b.n	3874c <pdn_interface_setopt+0x28>
   3880a:	689a      	ldr	r2, [r3, #8]
   3880c:	b12a      	cbz	r2, 3881a <pdn_interface_setopt+0xf6>
   3880e:	689a      	ldr	r2, [r3, #8]
   38810:	2a03      	cmp	r2, #3
   38812:	d002      	beq.n	3881a <pdn_interface_setopt+0xf6>
   38814:	689a      	ldr	r2, [r3, #8]
   38816:	2a04      	cmp	r2, #4
   38818:	d101      	bne.n	3881e <pdn_interface_setopt+0xfa>
   3881a:	200e      	movs	r0, #14
   3881c:	e796      	b.n	3874c <pdn_interface_setopt+0x28>
   3881e:	08b2      	lsrs	r2, r6, #2
   38820:	1e51      	subs	r1, r2, #1
   38822:	2901      	cmp	r1, #1
   38824:	d813      	bhi.n	3884e <pdn_interface_setopt+0x12a>
   38826:	07b1      	lsls	r1, r6, #30
   38828:	d111      	bne.n	3884e <pdn_interface_setopt+0x12a>
   3882a:	6829      	ldr	r1, [r5, #0]
   3882c:	2902      	cmp	r1, #2
   3882e:	d016      	beq.n	3885e <pdn_interface_setopt+0x13a>
   38830:	290a      	cmp	r1, #10
   38832:	d10c      	bne.n	3884e <pdn_interface_setopt+0x12a>
   38834:	2102      	movs	r1, #2
   38836:	2a02      	cmp	r2, #2
   38838:	d106      	bne.n	38848 <pdn_interface_setopt+0x124>
   3883a:	686a      	ldr	r2, [r5, #4]
   3883c:	2a02      	cmp	r2, #2
   3883e:	d010      	beq.n	38862 <pdn_interface_setopt+0x13e>
   38840:	2a0a      	cmp	r2, #10
   38842:	d104      	bne.n	3884e <pdn_interface_setopt+0x12a>
   38844:	f041 0102 	orr.w	r1, r1, #2
   38848:	60d9      	str	r1, [r3, #12]
   3884a:	2000      	movs	r0, #0
   3884c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3884e:	2016      	movs	r0, #22
   38850:	e77c      	b.n	3874c <pdn_interface_setopt+0x28>
   38852:	2016      	movs	r0, #22
   38854:	f7f0 ff02 	bl	2965c <bsd_os_errno_set>
   38858:	f04f 30ff 	mov.w	r0, #4294967295
   3885c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3885e:	2101      	movs	r1, #1
   38860:	e7e9      	b.n	38836 <pdn_interface_setopt+0x112>
   38862:	f041 0101 	orr.w	r1, r1, #1
   38866:	e7ef      	b.n	38848 <pdn_interface_setopt+0x124>
   38868:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   3886c:	200c      	movs	r0, #12
   3886e:	6153      	str	r3, [r2, #20]
   38870:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   38874:	6193      	str	r3, [r2, #24]
   38876:	e769      	b.n	3874c <pdn_interface_setopt+0x28>
   38878:	789a0000 	.word	0x789a0000
   3887c:	20025b48 	.word	0x20025b48
   38880:	0004708c 	.word	0x0004708c

00038884 <pdn_interface_getopt>:
   38884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   38888:	f240 2402 	movw	r4, #514	; 0x202
   3888c:	b083      	sub	sp, #12
   3888e:	42a1      	cmp	r1, r4
   38890:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   38892:	f040 808f 	bne.w	389b4 <pdn_interface_getopt+0x130>
   38896:	461e      	mov	r6, r3
   38898:	2b00      	cmp	r3, #0
   3889a:	f000 808b 	beq.w	389b4 <pdn_interface_getopt+0x130>
   3889e:	2d00      	cmp	r5, #0
   388a0:	f000 8088 	beq.w	389b4 <pdn_interface_getopt+0x130>
   388a4:	0c03      	lsrs	r3, r0, #16
   388a6:	4954      	ldr	r1, [pc, #336]	; (389f8 <pdn_interface_getopt+0x174>)
   388a8:	041b      	lsls	r3, r3, #16
   388aa:	428b      	cmp	r3, r1
   388ac:	f040 8084 	bne.w	389b8 <pdn_interface_getopt+0x134>
   388b0:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   388b4:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   388b8:	2c09      	cmp	r4, #9
   388ba:	dc7d      	bgt.n	389b8 <pdn_interface_getopt+0x134>
   388bc:	4b4f      	ldr	r3, [pc, #316]	; (389fc <pdn_interface_getopt+0x178>)
   388be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   388c2:	2b00      	cmp	r3, #0
   388c4:	d078      	beq.n	389b8 <pdn_interface_getopt+0x134>
   388c6:	6899      	ldr	r1, [r3, #8]
   388c8:	2900      	cmp	r1, #0
   388ca:	d075      	beq.n	389b8 <pdn_interface_getopt+0x134>
   388cc:	2a02      	cmp	r2, #2
   388ce:	d04e      	beq.n	3896e <pdn_interface_getopt+0xea>
   388d0:	2a03      	cmp	r2, #3
   388d2:	d009      	beq.n	388e8 <pdn_interface_getopt+0x64>
   388d4:	2a01      	cmp	r2, #1
   388d6:	d054      	beq.n	38982 <pdn_interface_getopt+0xfe>
   388d8:	202d      	movs	r0, #45	; 0x2d
   388da:	f7f0 febf 	bl	2965c <bsd_os_errno_set>
   388de:	f04f 30ff 	mov.w	r0, #4294967295
   388e2:	b003      	add	sp, #12
   388e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   388e8:	682b      	ldr	r3, [r5, #0]
   388ea:	2b00      	cmp	r3, #0
   388ec:	d062      	beq.n	389b4 <pdn_interface_getopt+0x130>
   388ee:	4b44      	ldr	r3, [pc, #272]	; (38a00 <pdn_interface_getopt+0x17c>)
   388f0:	4a44      	ldr	r2, [pc, #272]	; (38a04 <pdn_interface_getopt+0x180>)
   388f2:	f44f 7180 	mov.w	r1, #256	; 0x100
   388f6:	4844      	ldr	r0, [pc, #272]	; (38a08 <pdn_interface_getopt+0x184>)
   388f8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 38a14 <pdn_interface_getopt+0x190>
   388fc:	f007 f946 	bl	3fb8c <sniprintf>
   38900:	4841      	ldr	r0, [pc, #260]	; (38a08 <pdn_interface_getopt+0x184>)
   38902:	f8d8 9000 	ldr.w	r9, [r8]
   38906:	2700      	movs	r7, #0
   38908:	f7e4 fca8 	bl	1d25c <strlen>
   3890c:	463b      	mov	r3, r7
   3890e:	4602      	mov	r2, r0
   38910:	493d      	ldr	r1, [pc, #244]	; (38a08 <pdn_interface_getopt+0x184>)
   38912:	4648      	mov	r0, r9
   38914:	9701      	str	r7, [sp, #4]
   38916:	9700      	str	r7, [sp, #0]
   38918:	f7fe fffe 	bl	37918 <at_interface_write>
   3891c:	4681      	mov	r9, r0
   3891e:	483a      	ldr	r0, [pc, #232]	; (38a08 <pdn_interface_getopt+0x184>)
   38920:	f7e4 fc9c 	bl	1d25c <strlen>
   38924:	4548      	cmp	r0, r9
   38926:	d161      	bne.n	389ec <pdn_interface_getopt+0x168>
   38928:	463b      	mov	r3, r7
   3892a:	e9cd 7700 	strd	r7, r7, [sp]
   3892e:	f44f 7280 	mov.w	r2, #256	; 0x100
   38932:	4935      	ldr	r1, [pc, #212]	; (38a08 <pdn_interface_getopt+0x184>)
   38934:	f8d8 0000 	ldr.w	r0, [r8]
   38938:	f7ff f950 	bl	37bdc <at_interface_read>
   3893c:	4607      	mov	r7, r0
   3893e:	4833      	ldr	r0, [pc, #204]	; (38a0c <pdn_interface_getopt+0x188>)
   38940:	f7e4 fc8c 	bl	1d25c <strlen>
   38944:	4287      	cmp	r7, r0
   38946:	db3d      	blt.n	389c4 <pdn_interface_getopt+0x140>
   38948:	4602      	mov	r2, r0
   3894a:	492f      	ldr	r1, [pc, #188]	; (38a08 <pdn_interface_getopt+0x184>)
   3894c:	482f      	ldr	r0, [pc, #188]	; (38a0c <pdn_interface_getopt+0x188>)
   3894e:	f00c fbca 	bl	450e6 <strncmp>
   38952:	4607      	mov	r7, r0
   38954:	2800      	cmp	r0, #0
   38956:	d135      	bne.n	389c4 <pdn_interface_getopt+0x140>
   38958:	4620      	mov	r0, r4
   3895a:	492b      	ldr	r1, [pc, #172]	; (38a08 <pdn_interface_getopt+0x184>)
   3895c:	f7ff fa28 	bl	37db0 <pdn_state_get_parser>
   38960:	2800      	cmp	r0, #0
   38962:	dbba      	blt.n	388da <pdn_interface_getopt+0x56>
   38964:	2301      	movs	r3, #1
   38966:	7030      	strb	r0, [r6, #0]
   38968:	4638      	mov	r0, r7
   3896a:	602b      	str	r3, [r5, #0]
   3896c:	e7b9      	b.n	388e2 <pdn_interface_getopt+0x5e>
   3896e:	682a      	ldr	r2, [r5, #0]
   38970:	b302      	cbz	r2, 389b4 <pdn_interface_getopt+0x130>
   38972:	2201      	movs	r2, #1
   38974:	2000      	movs	r0, #0
   38976:	681b      	ldr	r3, [r3, #0]
   38978:	7033      	strb	r3, [r6, #0]
   3897a:	602a      	str	r2, [r5, #0]
   3897c:	b003      	add	sp, #12
   3897e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   38982:	689a      	ldr	r2, [r3, #8]
   38984:	b1a2      	cbz	r2, 389b0 <pdn_interface_getopt+0x12c>
   38986:	689a      	ldr	r2, [r3, #8]
   38988:	2a04      	cmp	r2, #4
   3898a:	d011      	beq.n	389b0 <pdn_interface_getopt+0x12c>
   3898c:	682a      	ldr	r2, [r5, #0]
   3898e:	2a07      	cmp	r2, #7
   38990:	d910      	bls.n	389b4 <pdn_interface_getopt+0x130>
   38992:	f012 0203 	ands.w	r2, r2, #3
   38996:	d10d      	bne.n	389b4 <pdn_interface_getopt+0x130>
   38998:	68db      	ldr	r3, [r3, #12]
   3899a:	0799      	lsls	r1, r3, #30
   3899c:	d421      	bmi.n	389e2 <pdn_interface_getopt+0x15e>
   3899e:	2104      	movs	r1, #4
   389a0:	07db      	lsls	r3, r3, #31
   389a2:	d502      	bpl.n	389aa <pdn_interface_getopt+0x126>
   389a4:	2302      	movs	r3, #2
   389a6:	50b3      	str	r3, [r6, r2]
   389a8:	460a      	mov	r2, r1
   389aa:	602a      	str	r2, [r5, #0]
   389ac:	2000      	movs	r0, #0
   389ae:	e798      	b.n	388e2 <pdn_interface_getopt+0x5e>
   389b0:	200e      	movs	r0, #14
   389b2:	e792      	b.n	388da <pdn_interface_getopt+0x56>
   389b4:	2016      	movs	r0, #22
   389b6:	e790      	b.n	388da <pdn_interface_getopt+0x56>
   389b8:	2009      	movs	r0, #9
   389ba:	f7f0 fe4f 	bl	2965c <bsd_os_errno_set>
   389be:	f04f 30ff 	mov.w	r0, #4294967295
   389c2:	e78e      	b.n	388e2 <pdn_interface_getopt+0x5e>
   389c4:	4812      	ldr	r0, [pc, #72]	; (38a10 <pdn_interface_getopt+0x18c>)
   389c6:	f7e4 fc49 	bl	1d25c <strlen>
   389ca:	490f      	ldr	r1, [pc, #60]	; (38a08 <pdn_interface_getopt+0x184>)
   389cc:	4602      	mov	r2, r0
   389ce:	4810      	ldr	r0, [pc, #64]	; (38a10 <pdn_interface_getopt+0x18c>)
   389d0:	f00c fb89 	bl	450e6 <strncmp>
   389d4:	b950      	cbnz	r0, 389ec <pdn_interface_getopt+0x168>
   389d6:	2008      	movs	r0, #8
   389d8:	f7f0 fe40 	bl	2965c <bsd_os_errno_set>
   389dc:	f04f 30ff 	mov.w	r0, #4294967295
   389e0:	e77b      	b.n	388da <pdn_interface_getopt+0x56>
   389e2:	220a      	movs	r2, #10
   389e4:	2108      	movs	r1, #8
   389e6:	6032      	str	r2, [r6, #0]
   389e8:	2204      	movs	r2, #4
   389ea:	e7d9      	b.n	389a0 <pdn_interface_getopt+0x11c>
   389ec:	2005      	movs	r0, #5
   389ee:	f7f0 fe35 	bl	2965c <bsd_os_errno_set>
   389f2:	f04f 30ff 	mov.w	r0, #4294967295
   389f6:	e770      	b.n	388da <pdn_interface_getopt+0x56>
   389f8:	789a0000 	.word	0x789a0000
   389fc:	20025b48 	.word	0x20025b48
   38a00:	0004706c 	.word	0x0004706c
   38a04:	0004708c 	.word	0x0004708c
   38a08:	20025a48 	.word	0x20025a48
   38a0c:	00047078 	.word	0x00047078
   38a10:	0004709c 	.word	0x0004709c
   38a14:	20025a44 	.word	0x20025a44

00038a18 <pdn_interface_pdn_id_get>:
   38a18:	2900      	cmp	r1, #0
   38a1a:	f000 82ba 	beq.w	38f92 <pdn_interface_pdn_id_get+0x57a>
   38a1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   38a22:	2802      	cmp	r0, #2
   38a24:	b083      	sub	sp, #12
   38a26:	460e      	mov	r6, r1
   38a28:	d067      	beq.n	38afa <pdn_interface_pdn_id_get+0xe2>
   38a2a:	280a      	cmp	r0, #10
   38a2c:	d040      	beq.n	38ab0 <pdn_interface_pdn_id_get+0x98>
   38a2e:	4cae      	ldr	r4, [pc, #696]	; (38ce8 <pdn_interface_pdn_id_get+0x2d0>)
   38a30:	6823      	ldr	r3, [r4, #0]
   38a32:	b11b      	cbz	r3, 38a3c <pdn_interface_pdn_id_get+0x24>
   38a34:	689b      	ldr	r3, [r3, #8]
   38a36:	2b03      	cmp	r3, #3
   38a38:	f000 80fc 	beq.w	38c34 <pdn_interface_pdn_id_get+0x21c>
   38a3c:	6863      	ldr	r3, [r4, #4]
   38a3e:	b11b      	cbz	r3, 38a48 <pdn_interface_pdn_id_get+0x30>
   38a40:	689b      	ldr	r3, [r3, #8]
   38a42:	2b03      	cmp	r3, #3
   38a44:	f000 80e4 	beq.w	38c10 <pdn_interface_pdn_id_get+0x1f8>
   38a48:	68a3      	ldr	r3, [r4, #8]
   38a4a:	b11b      	cbz	r3, 38a54 <pdn_interface_pdn_id_get+0x3c>
   38a4c:	689b      	ldr	r3, [r3, #8]
   38a4e:	2b03      	cmp	r3, #3
   38a50:	f000 80cc 	beq.w	38bec <pdn_interface_pdn_id_get+0x1d4>
   38a54:	68e3      	ldr	r3, [r4, #12]
   38a56:	b11b      	cbz	r3, 38a60 <pdn_interface_pdn_id_get+0x48>
   38a58:	689b      	ldr	r3, [r3, #8]
   38a5a:	2b03      	cmp	r3, #3
   38a5c:	f000 80b4 	beq.w	38bc8 <pdn_interface_pdn_id_get+0x1b0>
   38a60:	6923      	ldr	r3, [r4, #16]
   38a62:	b11b      	cbz	r3, 38a6c <pdn_interface_pdn_id_get+0x54>
   38a64:	689b      	ldr	r3, [r3, #8]
   38a66:	2b03      	cmp	r3, #3
   38a68:	f000 80f5 	beq.w	38c56 <pdn_interface_pdn_id_get+0x23e>
   38a6c:	6963      	ldr	r3, [r4, #20]
   38a6e:	b11b      	cbz	r3, 38a78 <pdn_interface_pdn_id_get+0x60>
   38a70:	689b      	ldr	r3, [r3, #8]
   38a72:	2b03      	cmp	r3, #3
   38a74:	f000 813c 	beq.w	38cf0 <pdn_interface_pdn_id_get+0x2d8>
   38a78:	69a3      	ldr	r3, [r4, #24]
   38a7a:	b11b      	cbz	r3, 38a84 <pdn_interface_pdn_id_get+0x6c>
   38a7c:	689b      	ldr	r3, [r3, #8]
   38a7e:	2b03      	cmp	r3, #3
   38a80:	f000 811f 	beq.w	38cc2 <pdn_interface_pdn_id_get+0x2aa>
   38a84:	69e3      	ldr	r3, [r4, #28]
   38a86:	b11b      	cbz	r3, 38a90 <pdn_interface_pdn_id_get+0x78>
   38a88:	689b      	ldr	r3, [r3, #8]
   38a8a:	2b03      	cmp	r3, #3
   38a8c:	f000 8107 	beq.w	38c9e <pdn_interface_pdn_id_get+0x286>
   38a90:	6a23      	ldr	r3, [r4, #32]
   38a92:	b11b      	cbz	r3, 38a9c <pdn_interface_pdn_id_get+0x84>
   38a94:	689b      	ldr	r3, [r3, #8]
   38a96:	2b03      	cmp	r3, #3
   38a98:	f000 80ef 	beq.w	38c7a <pdn_interface_pdn_id_get+0x262>
   38a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38a9e:	b113      	cbz	r3, 38aa6 <pdn_interface_pdn_id_get+0x8e>
   38aa0:	689b      	ldr	r3, [r3, #8]
   38aa2:	2b03      	cmp	r3, #3
   38aa4:	d07e      	beq.n	38ba4 <pdn_interface_pdn_id_get+0x18c>
   38aa6:	f04f 30ff 	mov.w	r0, #4294967295
   38aaa:	b003      	add	sp, #12
   38aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   38ab0:	2500      	movs	r5, #0
   38ab2:	4c8e      	ldr	r4, [pc, #568]	; (38cec <pdn_interface_pdn_id_get+0x2d4>)
   38ab4:	e002      	b.n	38abc <pdn_interface_pdn_id_get+0xa4>
   38ab6:	3501      	adds	r5, #1
   38ab8:	2d0a      	cmp	r5, #10
   38aba:	d0f4      	beq.n	38aa6 <pdn_interface_pdn_id_get+0x8e>
   38abc:	f854 3f04 	ldr.w	r3, [r4, #4]!
   38ac0:	2b00      	cmp	r3, #0
   38ac2:	d0f8      	beq.n	38ab6 <pdn_interface_pdn_id_get+0x9e>
   38ac4:	689b      	ldr	r3, [r3, #8]
   38ac6:	2b03      	cmp	r3, #3
   38ac8:	d1f5      	bne.n	38ab6 <pdn_interface_pdn_id_get+0x9e>
   38aca:	4630      	mov	r0, r6
   38acc:	f7e4 fbc6 	bl	1d25c <strlen>
   38ad0:	6823      	ldr	r3, [r4, #0]
   38ad2:	69da      	ldr	r2, [r3, #28]
   38ad4:	4290      	cmp	r0, r2
   38ad6:	d1ee      	bne.n	38ab6 <pdn_interface_pdn_id_get+0x9e>
   38ad8:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   38adc:	4439      	add	r1, r7
   38ade:	3120      	adds	r1, #32
   38ae0:	4602      	mov	r2, r0
   38ae2:	4419      	add	r1, r3
   38ae4:	4630      	mov	r0, r6
   38ae6:	f00c fafe 	bl	450e6 <strncmp>
   38aea:	2800      	cmp	r0, #0
   38aec:	d1e3      	bne.n	38ab6 <pdn_interface_pdn_id_get+0x9e>
   38aee:	6823      	ldr	r3, [r4, #0]
   38af0:	68da      	ldr	r2, [r3, #12]
   38af2:	0792      	lsls	r2, r2, #30
   38af4:	f100 8128 	bmi.w	38d48 <pdn_interface_pdn_id_get+0x330>
   38af8:	e7dd      	b.n	38ab6 <pdn_interface_pdn_id_get+0x9e>
   38afa:	4c7b      	ldr	r4, [pc, #492]	; (38ce8 <pdn_interface_pdn_id_get+0x2d0>)
   38afc:	6823      	ldr	r3, [r4, #0]
   38afe:	b11b      	cbz	r3, 38b08 <pdn_interface_pdn_id_get+0xf0>
   38b00:	689b      	ldr	r3, [r3, #8]
   38b02:	2b03      	cmp	r3, #3
   38b04:	f000 822a 	beq.w	38f5c <pdn_interface_pdn_id_get+0x544>
   38b08:	6863      	ldr	r3, [r4, #4]
   38b0a:	b11b      	cbz	r3, 38b14 <pdn_interface_pdn_id_get+0xfc>
   38b0c:	689b      	ldr	r3, [r3, #8]
   38b0e:	2b03      	cmp	r3, #3
   38b10:	f000 8209 	beq.w	38f26 <pdn_interface_pdn_id_get+0x50e>
   38b14:	68a3      	ldr	r3, [r4, #8]
   38b16:	b11b      	cbz	r3, 38b20 <pdn_interface_pdn_id_get+0x108>
   38b18:	689b      	ldr	r3, [r3, #8]
   38b1a:	2b03      	cmp	r3, #3
   38b1c:	f000 81b3 	beq.w	38e86 <pdn_interface_pdn_id_get+0x46e>
   38b20:	68e3      	ldr	r3, [r4, #12]
   38b22:	b11b      	cbz	r3, 38b2c <pdn_interface_pdn_id_get+0x114>
   38b24:	689d      	ldr	r5, [r3, #8]
   38b26:	2d03      	cmp	r5, #3
   38b28:	f000 81c8 	beq.w	38ebc <pdn_interface_pdn_id_get+0x4a4>
   38b2c:	6923      	ldr	r3, [r4, #16]
   38b2e:	b11b      	cbz	r3, 38b38 <pdn_interface_pdn_id_get+0x120>
   38b30:	689b      	ldr	r3, [r3, #8]
   38b32:	2b03      	cmp	r3, #3
   38b34:	f000 80ee 	beq.w	38d14 <pdn_interface_pdn_id_get+0x2fc>
   38b38:	6963      	ldr	r3, [r4, #20]
   38b3a:	b11b      	cbz	r3, 38b44 <pdn_interface_pdn_id_get+0x12c>
   38b3c:	689b      	ldr	r3, [r3, #8]
   38b3e:	2b03      	cmp	r3, #3
   38b40:	f000 8150 	beq.w	38de4 <pdn_interface_pdn_id_get+0x3cc>
   38b44:	69a3      	ldr	r3, [r4, #24]
   38b46:	b11b      	cbz	r3, 38b50 <pdn_interface_pdn_id_get+0x138>
   38b48:	689b      	ldr	r3, [r3, #8]
   38b4a:	2b03      	cmp	r3, #3
   38b4c:	f000 8165 	beq.w	38e1a <pdn_interface_pdn_id_get+0x402>
   38b50:	69e3      	ldr	r3, [r4, #28]
   38b52:	b11b      	cbz	r3, 38b5c <pdn_interface_pdn_id_get+0x144>
   38b54:	689b      	ldr	r3, [r3, #8]
   38b56:	2b03      	cmp	r3, #3
   38b58:	f000 817a 	beq.w	38e50 <pdn_interface_pdn_id_get+0x438>
   38b5c:	6a23      	ldr	r3, [r4, #32]
   38b5e:	b11b      	cbz	r3, 38b68 <pdn_interface_pdn_id_get+0x150>
   38b60:	689b      	ldr	r3, [r3, #8]
   38b62:	2b03      	cmp	r3, #3
   38b64:	f000 81c4 	beq.w	38ef0 <pdn_interface_pdn_id_get+0x4d8>
   38b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38b6a:	2b00      	cmp	r3, #0
   38b6c:	d09b      	beq.n	38aa6 <pdn_interface_pdn_id_get+0x8e>
   38b6e:	689b      	ldr	r3, [r3, #8]
   38b70:	2b03      	cmp	r3, #3
   38b72:	d198      	bne.n	38aa6 <pdn_interface_pdn_id_get+0x8e>
   38b74:	4630      	mov	r0, r6
   38b76:	f7e4 fb71 	bl	1d25c <strlen>
   38b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38b7c:	69da      	ldr	r2, [r3, #28]
   38b7e:	4290      	cmp	r0, r2
   38b80:	d191      	bne.n	38aa6 <pdn_interface_pdn_id_get+0x8e>
   38b82:	e9d3 5105 	ldrd	r5, r1, [r3, #20]
   38b86:	4429      	add	r1, r5
   38b88:	3120      	adds	r1, #32
   38b8a:	4602      	mov	r2, r0
   38b8c:	4419      	add	r1, r3
   38b8e:	4630      	mov	r0, r6
   38b90:	f00c faa9 	bl	450e6 <strncmp>
   38b94:	2800      	cmp	r0, #0
   38b96:	d186      	bne.n	38aa6 <pdn_interface_pdn_id_get+0x8e>
   38b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38b9a:	68da      	ldr	r2, [r3, #12]
   38b9c:	07d2      	lsls	r2, r2, #31
   38b9e:	d582      	bpl.n	38aa6 <pdn_interface_pdn_id_get+0x8e>
   38ba0:	2509      	movs	r5, #9
   38ba2:	e0d1      	b.n	38d48 <pdn_interface_pdn_id_get+0x330>
   38ba4:	4630      	mov	r0, r6
   38ba6:	f7e4 fb59 	bl	1d25c <strlen>
   38baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38bac:	69da      	ldr	r2, [r3, #28]
   38bae:	4290      	cmp	r0, r2
   38bb0:	f47f af79 	bne.w	38aa6 <pdn_interface_pdn_id_get+0x8e>
   38bb4:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
   38bb8:	4421      	add	r1, r4
   38bba:	3120      	adds	r1, #32
   38bbc:	4602      	mov	r2, r0
   38bbe:	4419      	add	r1, r3
   38bc0:	4630      	mov	r0, r6
   38bc2:	f00c fa90 	bl	450e6 <strncmp>
   38bc6:	e76e      	b.n	38aa6 <pdn_interface_pdn_id_get+0x8e>
   38bc8:	4630      	mov	r0, r6
   38bca:	f7e4 fb47 	bl	1d25c <strlen>
   38bce:	68e3      	ldr	r3, [r4, #12]
   38bd0:	69da      	ldr	r2, [r3, #28]
   38bd2:	4290      	cmp	r0, r2
   38bd4:	f47f af44 	bne.w	38a60 <pdn_interface_pdn_id_get+0x48>
   38bd8:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38bdc:	4429      	add	r1, r5
   38bde:	3120      	adds	r1, #32
   38be0:	4602      	mov	r2, r0
   38be2:	4419      	add	r1, r3
   38be4:	4630      	mov	r0, r6
   38be6:	f00c fa7e 	bl	450e6 <strncmp>
   38bea:	e739      	b.n	38a60 <pdn_interface_pdn_id_get+0x48>
   38bec:	4630      	mov	r0, r6
   38bee:	f7e4 fb35 	bl	1d25c <strlen>
   38bf2:	68a3      	ldr	r3, [r4, #8]
   38bf4:	69da      	ldr	r2, [r3, #28]
   38bf6:	4290      	cmp	r0, r2
   38bf8:	f47f af2c 	bne.w	38a54 <pdn_interface_pdn_id_get+0x3c>
   38bfc:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38c00:	4429      	add	r1, r5
   38c02:	3120      	adds	r1, #32
   38c04:	4602      	mov	r2, r0
   38c06:	4419      	add	r1, r3
   38c08:	4630      	mov	r0, r6
   38c0a:	f00c fa6c 	bl	450e6 <strncmp>
   38c0e:	e721      	b.n	38a54 <pdn_interface_pdn_id_get+0x3c>
   38c10:	4630      	mov	r0, r6
   38c12:	f7e4 fb23 	bl	1d25c <strlen>
   38c16:	6863      	ldr	r3, [r4, #4]
   38c18:	69da      	ldr	r2, [r3, #28]
   38c1a:	4290      	cmp	r0, r2
   38c1c:	f47f af14 	bne.w	38a48 <pdn_interface_pdn_id_get+0x30>
   38c20:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38c24:	4429      	add	r1, r5
   38c26:	3120      	adds	r1, #32
   38c28:	4602      	mov	r2, r0
   38c2a:	4419      	add	r1, r3
   38c2c:	4630      	mov	r0, r6
   38c2e:	f00c fa5a 	bl	450e6 <strncmp>
   38c32:	e709      	b.n	38a48 <pdn_interface_pdn_id_get+0x30>
   38c34:	4608      	mov	r0, r1
   38c36:	f7e4 fb11 	bl	1d25c <strlen>
   38c3a:	6823      	ldr	r3, [r4, #0]
   38c3c:	69da      	ldr	r2, [r3, #28]
   38c3e:	4282      	cmp	r2, r0
   38c40:	f47f aefc 	bne.w	38a3c <pdn_interface_pdn_id_get+0x24>
   38c44:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   38c48:	4401      	add	r1, r0
   38c4a:	3120      	adds	r1, #32
   38c4c:	4419      	add	r1, r3
   38c4e:	4630      	mov	r0, r6
   38c50:	f00c fa49 	bl	450e6 <strncmp>
   38c54:	e6f2      	b.n	38a3c <pdn_interface_pdn_id_get+0x24>
   38c56:	4630      	mov	r0, r6
   38c58:	f7e4 fb00 	bl	1d25c <strlen>
   38c5c:	6923      	ldr	r3, [r4, #16]
   38c5e:	69da      	ldr	r2, [r3, #28]
   38c60:	4290      	cmp	r0, r2
   38c62:	f47f af03 	bne.w	38a6c <pdn_interface_pdn_id_get+0x54>
   38c66:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38c6a:	4429      	add	r1, r5
   38c6c:	3120      	adds	r1, #32
   38c6e:	4602      	mov	r2, r0
   38c70:	4419      	add	r1, r3
   38c72:	4630      	mov	r0, r6
   38c74:	f00c fa37 	bl	450e6 <strncmp>
   38c78:	e6f8      	b.n	38a6c <pdn_interface_pdn_id_get+0x54>
   38c7a:	4630      	mov	r0, r6
   38c7c:	f7e4 faee 	bl	1d25c <strlen>
   38c80:	6a23      	ldr	r3, [r4, #32]
   38c82:	69da      	ldr	r2, [r3, #28]
   38c84:	4290      	cmp	r0, r2
   38c86:	f47f af09 	bne.w	38a9c <pdn_interface_pdn_id_get+0x84>
   38c8a:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38c8e:	4429      	add	r1, r5
   38c90:	3120      	adds	r1, #32
   38c92:	4602      	mov	r2, r0
   38c94:	4419      	add	r1, r3
   38c96:	4630      	mov	r0, r6
   38c98:	f00c fa25 	bl	450e6 <strncmp>
   38c9c:	e6fe      	b.n	38a9c <pdn_interface_pdn_id_get+0x84>
   38c9e:	4630      	mov	r0, r6
   38ca0:	f7e4 fadc 	bl	1d25c <strlen>
   38ca4:	69e3      	ldr	r3, [r4, #28]
   38ca6:	69da      	ldr	r2, [r3, #28]
   38ca8:	4290      	cmp	r0, r2
   38caa:	f47f aef1 	bne.w	38a90 <pdn_interface_pdn_id_get+0x78>
   38cae:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38cb2:	4429      	add	r1, r5
   38cb4:	3120      	adds	r1, #32
   38cb6:	4602      	mov	r2, r0
   38cb8:	4419      	add	r1, r3
   38cba:	4630      	mov	r0, r6
   38cbc:	f00c fa13 	bl	450e6 <strncmp>
   38cc0:	e6e6      	b.n	38a90 <pdn_interface_pdn_id_get+0x78>
   38cc2:	4630      	mov	r0, r6
   38cc4:	f7e4 faca 	bl	1d25c <strlen>
   38cc8:	69a3      	ldr	r3, [r4, #24]
   38cca:	69da      	ldr	r2, [r3, #28]
   38ccc:	4290      	cmp	r0, r2
   38cce:	f47f aed9 	bne.w	38a84 <pdn_interface_pdn_id_get+0x6c>
   38cd2:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38cd6:	4429      	add	r1, r5
   38cd8:	3120      	adds	r1, #32
   38cda:	4602      	mov	r2, r0
   38cdc:	4419      	add	r1, r3
   38cde:	4630      	mov	r0, r6
   38ce0:	f00c fa01 	bl	450e6 <strncmp>
   38ce4:	e6ce      	b.n	38a84 <pdn_interface_pdn_id_get+0x6c>
   38ce6:	bf00      	nop
   38ce8:	20025b48 	.word	0x20025b48
   38cec:	20025b44 	.word	0x20025b44
   38cf0:	4630      	mov	r0, r6
   38cf2:	f7e4 fab3 	bl	1d25c <strlen>
   38cf6:	6963      	ldr	r3, [r4, #20]
   38cf8:	69da      	ldr	r2, [r3, #28]
   38cfa:	4290      	cmp	r0, r2
   38cfc:	f47f aebc 	bne.w	38a78 <pdn_interface_pdn_id_get+0x60>
   38d00:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38d04:	4429      	add	r1, r5
   38d06:	3120      	adds	r1, #32
   38d08:	4602      	mov	r2, r0
   38d0a:	4419      	add	r1, r3
   38d0c:	4630      	mov	r0, r6
   38d0e:	f00c f9ea 	bl	450e6 <strncmp>
   38d12:	e6b1      	b.n	38a78 <pdn_interface_pdn_id_get+0x60>
   38d14:	4630      	mov	r0, r6
   38d16:	f7e4 faa1 	bl	1d25c <strlen>
   38d1a:	6923      	ldr	r3, [r4, #16]
   38d1c:	69da      	ldr	r2, [r3, #28]
   38d1e:	4290      	cmp	r0, r2
   38d20:	f47f af0a 	bne.w	38b38 <pdn_interface_pdn_id_get+0x120>
   38d24:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38d28:	4429      	add	r1, r5
   38d2a:	3120      	adds	r1, #32
   38d2c:	4602      	mov	r2, r0
   38d2e:	4419      	add	r1, r3
   38d30:	4630      	mov	r0, r6
   38d32:	f00c f9d8 	bl	450e6 <strncmp>
   38d36:	2800      	cmp	r0, #0
   38d38:	f47f aefe 	bne.w	38b38 <pdn_interface_pdn_id_get+0x120>
   38d3c:	6923      	ldr	r3, [r4, #16]
   38d3e:	68da      	ldr	r2, [r3, #12]
   38d40:	07d2      	lsls	r2, r2, #31
   38d42:	f57f aef9 	bpl.w	38b38 <pdn_interface_pdn_id_get+0x120>
   38d46:	2504      	movs	r5, #4
   38d48:	6858      	ldr	r0, [r3, #4]
   38d4a:	1c43      	adds	r3, r0, #1
   38d4c:	f47f aead 	bne.w	38aaa <pdn_interface_pdn_id_get+0x92>
   38d50:	4e9d      	ldr	r6, [pc, #628]	; (38fc8 <pdn_interface_pdn_id_get+0x5b0>)
   38d52:	4b9e      	ldr	r3, [pc, #632]	; (38fcc <pdn_interface_pdn_id_get+0x5b4>)
   38d54:	4a9e      	ldr	r2, [pc, #632]	; (38fd0 <pdn_interface_pdn_id_get+0x5b8>)
   38d56:	f44f 7180 	mov.w	r1, #256	; 0x100
   38d5a:	4630      	mov	r0, r6
   38d5c:	f006 ff16 	bl	3fb8c <sniprintf>
   38d60:	4c9c      	ldr	r4, [pc, #624]	; (38fd4 <pdn_interface_pdn_id_get+0x5bc>)
   38d62:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   38d66:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   38d6a:	4a9b      	ldr	r2, [pc, #620]	; (38fd8 <pdn_interface_pdn_id_get+0x5c0>)
   38d6c:	681b      	ldr	r3, [r3, #0]
   38d6e:	4430      	add	r0, r6
   38d70:	f8df 8270 	ldr.w	r8, [pc, #624]	; 38fe4 <pdn_interface_pdn_id_get+0x5cc>
   38d74:	f006 ff0a 	bl	3fb8c <sniprintf>
   38d78:	4630      	mov	r0, r6
   38d7a:	f8d8 9000 	ldr.w	r9, [r8]
   38d7e:	2700      	movs	r7, #0
   38d80:	f7e4 fa6c 	bl	1d25c <strlen>
   38d84:	4631      	mov	r1, r6
   38d86:	4602      	mov	r2, r0
   38d88:	463b      	mov	r3, r7
   38d8a:	4648      	mov	r0, r9
   38d8c:	9701      	str	r7, [sp, #4]
   38d8e:	9700      	str	r7, [sp, #0]
   38d90:	f7fe fdc2 	bl	37918 <at_interface_write>
   38d94:	4681      	mov	r9, r0
   38d96:	4630      	mov	r0, r6
   38d98:	f7e4 fa60 	bl	1d25c <strlen>
   38d9c:	4548      	cmp	r0, r9
   38d9e:	f040 810b 	bne.w	38fb8 <pdn_interface_pdn_id_get+0x5a0>
   38da2:	463b      	mov	r3, r7
   38da4:	f44f 7280 	mov.w	r2, #256	; 0x100
   38da8:	e9cd 7700 	strd	r7, r7, [sp]
   38dac:	4631      	mov	r1, r6
   38dae:	f8d8 0000 	ldr.w	r0, [r8]
   38db2:	f7fe ff13 	bl	37bdc <at_interface_read>
   38db6:	4607      	mov	r7, r0
   38db8:	4888      	ldr	r0, [pc, #544]	; (38fdc <pdn_interface_pdn_id_get+0x5c4>)
   38dba:	f7e4 fa4f 	bl	1d25c <strlen>
   38dbe:	4287      	cmp	r7, r0
   38dc0:	4602      	mov	r2, r0
   38dc2:	f2c0 80e9 	blt.w	38f98 <pdn_interface_pdn_id_get+0x580>
   38dc6:	4631      	mov	r1, r6
   38dc8:	4884      	ldr	r0, [pc, #528]	; (38fdc <pdn_interface_pdn_id_get+0x5c4>)
   38dca:	f00c f98c 	bl	450e6 <strncmp>
   38dce:	2800      	cmp	r0, #0
   38dd0:	f040 80e2 	bne.w	38f98 <pdn_interface_pdn_id_get+0x580>
   38dd4:	4631      	mov	r1, r6
   38dd6:	4628      	mov	r0, r5
   38dd8:	f7ff f820 	bl	37e1c <pdn_id_get_parser>
   38ddc:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   38de0:	6858      	ldr	r0, [r3, #4]
   38de2:	e662      	b.n	38aaa <pdn_interface_pdn_id_get+0x92>
   38de4:	4630      	mov	r0, r6
   38de6:	f7e4 fa39 	bl	1d25c <strlen>
   38dea:	6963      	ldr	r3, [r4, #20]
   38dec:	69da      	ldr	r2, [r3, #28]
   38dee:	4290      	cmp	r0, r2
   38df0:	f47f aea8 	bne.w	38b44 <pdn_interface_pdn_id_get+0x12c>
   38df4:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38df8:	4429      	add	r1, r5
   38dfa:	3120      	adds	r1, #32
   38dfc:	4602      	mov	r2, r0
   38dfe:	4419      	add	r1, r3
   38e00:	4630      	mov	r0, r6
   38e02:	f00c f970 	bl	450e6 <strncmp>
   38e06:	2800      	cmp	r0, #0
   38e08:	f47f ae9c 	bne.w	38b44 <pdn_interface_pdn_id_get+0x12c>
   38e0c:	6963      	ldr	r3, [r4, #20]
   38e0e:	68da      	ldr	r2, [r3, #12]
   38e10:	07d7      	lsls	r7, r2, #31
   38e12:	f57f ae97 	bpl.w	38b44 <pdn_interface_pdn_id_get+0x12c>
   38e16:	2505      	movs	r5, #5
   38e18:	e796      	b.n	38d48 <pdn_interface_pdn_id_get+0x330>
   38e1a:	4630      	mov	r0, r6
   38e1c:	f7e4 fa1e 	bl	1d25c <strlen>
   38e20:	69a3      	ldr	r3, [r4, #24]
   38e22:	69da      	ldr	r2, [r3, #28]
   38e24:	4290      	cmp	r0, r2
   38e26:	f47f ae93 	bne.w	38b50 <pdn_interface_pdn_id_get+0x138>
   38e2a:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38e2e:	4429      	add	r1, r5
   38e30:	3120      	adds	r1, #32
   38e32:	4602      	mov	r2, r0
   38e34:	4419      	add	r1, r3
   38e36:	4630      	mov	r0, r6
   38e38:	f00c f955 	bl	450e6 <strncmp>
   38e3c:	2800      	cmp	r0, #0
   38e3e:	f47f ae87 	bne.w	38b50 <pdn_interface_pdn_id_get+0x138>
   38e42:	69a3      	ldr	r3, [r4, #24]
   38e44:	68da      	ldr	r2, [r3, #12]
   38e46:	07d5      	lsls	r5, r2, #31
   38e48:	f57f ae82 	bpl.w	38b50 <pdn_interface_pdn_id_get+0x138>
   38e4c:	2506      	movs	r5, #6
   38e4e:	e77b      	b.n	38d48 <pdn_interface_pdn_id_get+0x330>
   38e50:	4630      	mov	r0, r6
   38e52:	f7e4 fa03 	bl	1d25c <strlen>
   38e56:	69e3      	ldr	r3, [r4, #28]
   38e58:	69da      	ldr	r2, [r3, #28]
   38e5a:	4290      	cmp	r0, r2
   38e5c:	f47f ae7e 	bne.w	38b5c <pdn_interface_pdn_id_get+0x144>
   38e60:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38e64:	4429      	add	r1, r5
   38e66:	3120      	adds	r1, #32
   38e68:	4602      	mov	r2, r0
   38e6a:	4419      	add	r1, r3
   38e6c:	4630      	mov	r0, r6
   38e6e:	f00c f93a 	bl	450e6 <strncmp>
   38e72:	2800      	cmp	r0, #0
   38e74:	f47f ae72 	bne.w	38b5c <pdn_interface_pdn_id_get+0x144>
   38e78:	69e3      	ldr	r3, [r4, #28]
   38e7a:	68da      	ldr	r2, [r3, #12]
   38e7c:	07d0      	lsls	r0, r2, #31
   38e7e:	f57f ae6d 	bpl.w	38b5c <pdn_interface_pdn_id_get+0x144>
   38e82:	2507      	movs	r5, #7
   38e84:	e760      	b.n	38d48 <pdn_interface_pdn_id_get+0x330>
   38e86:	4630      	mov	r0, r6
   38e88:	f7e4 f9e8 	bl	1d25c <strlen>
   38e8c:	68a3      	ldr	r3, [r4, #8]
   38e8e:	69da      	ldr	r2, [r3, #28]
   38e90:	4290      	cmp	r0, r2
   38e92:	f47f ae45 	bne.w	38b20 <pdn_interface_pdn_id_get+0x108>
   38e96:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38e9a:	4429      	add	r1, r5
   38e9c:	3120      	adds	r1, #32
   38e9e:	4602      	mov	r2, r0
   38ea0:	4419      	add	r1, r3
   38ea2:	4630      	mov	r0, r6
   38ea4:	f00c f91f 	bl	450e6 <strncmp>
   38ea8:	2800      	cmp	r0, #0
   38eaa:	f47f ae39 	bne.w	38b20 <pdn_interface_pdn_id_get+0x108>
   38eae:	68a3      	ldr	r3, [r4, #8]
   38eb0:	68da      	ldr	r2, [r3, #12]
   38eb2:	07d0      	lsls	r0, r2, #31
   38eb4:	f57f ae34 	bpl.w	38b20 <pdn_interface_pdn_id_get+0x108>
   38eb8:	2502      	movs	r5, #2
   38eba:	e745      	b.n	38d48 <pdn_interface_pdn_id_get+0x330>
   38ebc:	4630      	mov	r0, r6
   38ebe:	f7e4 f9cd 	bl	1d25c <strlen>
   38ec2:	68e3      	ldr	r3, [r4, #12]
   38ec4:	69da      	ldr	r2, [r3, #28]
   38ec6:	4290      	cmp	r0, r2
   38ec8:	f47f ae30 	bne.w	38b2c <pdn_interface_pdn_id_get+0x114>
   38ecc:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   38ed0:	4439      	add	r1, r7
   38ed2:	3120      	adds	r1, #32
   38ed4:	4602      	mov	r2, r0
   38ed6:	4419      	add	r1, r3
   38ed8:	4630      	mov	r0, r6
   38eda:	f00c f904 	bl	450e6 <strncmp>
   38ede:	2800      	cmp	r0, #0
   38ee0:	f47f ae24 	bne.w	38b2c <pdn_interface_pdn_id_get+0x114>
   38ee4:	68e3      	ldr	r3, [r4, #12]
   38ee6:	68da      	ldr	r2, [r3, #12]
   38ee8:	07d1      	lsls	r1, r2, #31
   38eea:	f53f af2d 	bmi.w	38d48 <pdn_interface_pdn_id_get+0x330>
   38eee:	e61d      	b.n	38b2c <pdn_interface_pdn_id_get+0x114>
   38ef0:	4630      	mov	r0, r6
   38ef2:	f7e4 f9b3 	bl	1d25c <strlen>
   38ef6:	6a23      	ldr	r3, [r4, #32]
   38ef8:	69da      	ldr	r2, [r3, #28]
   38efa:	4290      	cmp	r0, r2
   38efc:	f47f ae34 	bne.w	38b68 <pdn_interface_pdn_id_get+0x150>
   38f00:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38f04:	4429      	add	r1, r5
   38f06:	3120      	adds	r1, #32
   38f08:	4602      	mov	r2, r0
   38f0a:	4419      	add	r1, r3
   38f0c:	4630      	mov	r0, r6
   38f0e:	f00c f8ea 	bl	450e6 <strncmp>
   38f12:	2800      	cmp	r0, #0
   38f14:	f47f ae28 	bne.w	38b68 <pdn_interface_pdn_id_get+0x150>
   38f18:	6a23      	ldr	r3, [r4, #32]
   38f1a:	68da      	ldr	r2, [r3, #12]
   38f1c:	07d1      	lsls	r1, r2, #31
   38f1e:	f57f ae23 	bpl.w	38b68 <pdn_interface_pdn_id_get+0x150>
   38f22:	2508      	movs	r5, #8
   38f24:	e710      	b.n	38d48 <pdn_interface_pdn_id_get+0x330>
   38f26:	4630      	mov	r0, r6
   38f28:	f7e4 f998 	bl	1d25c <strlen>
   38f2c:	6863      	ldr	r3, [r4, #4]
   38f2e:	69da      	ldr	r2, [r3, #28]
   38f30:	4290      	cmp	r0, r2
   38f32:	f47f adef 	bne.w	38b14 <pdn_interface_pdn_id_get+0xfc>
   38f36:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38f3a:	4429      	add	r1, r5
   38f3c:	3120      	adds	r1, #32
   38f3e:	4602      	mov	r2, r0
   38f40:	4419      	add	r1, r3
   38f42:	4630      	mov	r0, r6
   38f44:	f00c f8cf 	bl	450e6 <strncmp>
   38f48:	2800      	cmp	r0, #0
   38f4a:	f47f ade3 	bne.w	38b14 <pdn_interface_pdn_id_get+0xfc>
   38f4e:	6863      	ldr	r3, [r4, #4]
   38f50:	68da      	ldr	r2, [r3, #12]
   38f52:	07d5      	lsls	r5, r2, #31
   38f54:	f57f adde 	bpl.w	38b14 <pdn_interface_pdn_id_get+0xfc>
   38f58:	2501      	movs	r5, #1
   38f5a:	e6f5      	b.n	38d48 <pdn_interface_pdn_id_get+0x330>
   38f5c:	4608      	mov	r0, r1
   38f5e:	f7e4 f97d 	bl	1d25c <strlen>
   38f62:	6823      	ldr	r3, [r4, #0]
   38f64:	69da      	ldr	r2, [r3, #28]
   38f66:	4290      	cmp	r0, r2
   38f68:	f47f adce 	bne.w	38b08 <pdn_interface_pdn_id_get+0xf0>
   38f6c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   38f70:	4429      	add	r1, r5
   38f72:	3120      	adds	r1, #32
   38f74:	4602      	mov	r2, r0
   38f76:	4419      	add	r1, r3
   38f78:	4630      	mov	r0, r6
   38f7a:	f00c f8b4 	bl	450e6 <strncmp>
   38f7e:	4605      	mov	r5, r0
   38f80:	2800      	cmp	r0, #0
   38f82:	f47f adc1 	bne.w	38b08 <pdn_interface_pdn_id_get+0xf0>
   38f86:	6823      	ldr	r3, [r4, #0]
   38f88:	68da      	ldr	r2, [r3, #12]
   38f8a:	07d7      	lsls	r7, r2, #31
   38f8c:	f53f aedc 	bmi.w	38d48 <pdn_interface_pdn_id_get+0x330>
   38f90:	e5ba      	b.n	38b08 <pdn_interface_pdn_id_get+0xf0>
   38f92:	f04f 30ff 	mov.w	r0, #4294967295
   38f96:	4770      	bx	lr
   38f98:	4811      	ldr	r0, [pc, #68]	; (38fe0 <pdn_interface_pdn_id_get+0x5c8>)
   38f9a:	f7e4 f95f 	bl	1d25c <strlen>
   38f9e:	490a      	ldr	r1, [pc, #40]	; (38fc8 <pdn_interface_pdn_id_get+0x5b0>)
   38fa0:	4602      	mov	r2, r0
   38fa2:	480f      	ldr	r0, [pc, #60]	; (38fe0 <pdn_interface_pdn_id_get+0x5c8>)
   38fa4:	f00c f89f 	bl	450e6 <strncmp>
   38fa8:	b930      	cbnz	r0, 38fb8 <pdn_interface_pdn_id_get+0x5a0>
   38faa:	2008      	movs	r0, #8
   38fac:	f7f0 fb56 	bl	2965c <bsd_os_errno_set>
   38fb0:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   38fb4:	6858      	ldr	r0, [r3, #4]
   38fb6:	e578      	b.n	38aaa <pdn_interface_pdn_id_get+0x92>
   38fb8:	2005      	movs	r0, #5
   38fba:	f7f0 fb4f 	bl	2965c <bsd_os_errno_set>
   38fbe:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   38fc2:	6858      	ldr	r0, [r3, #4]
   38fc4:	e571      	b.n	38aaa <pdn_interface_pdn_id_get+0x92>
   38fc6:	bf00      	nop
   38fc8:	20025a48 	.word	0x20025a48
   38fcc:	00047050 	.word	0x00047050
   38fd0:	0004708c 	.word	0x0004708c
   38fd4:	20025b48 	.word	0x20025b48
   38fd8:	0004704c 	.word	0x0004704c
   38fdc:	00047060 	.word	0x00047060
   38fe0:	0004709c 	.word	0x0004709c
   38fe4:	20025a44 	.word	0x20025a44

00038fe8 <bsd_platform_error_handler>:
   38fe8:	b508      	push	{r3, lr}
   38fea:	f008 f96e 	bl	412ca <bsd_recoverable_error_handler>
   38fee:	bd08      	pop	{r3, pc}

00038ff0 <bsd_init>:
   38ff0:	b160      	cbz	r0, 3900c <bsd_init+0x1c>
   38ff2:	b510      	push	{r4, lr}
   38ff4:	4c07      	ldr	r4, [pc, #28]	; (39014 <bsd_init+0x24>)
   38ff6:	7823      	ldrb	r3, [r4, #0]
   38ff8:	b92b      	cbnz	r3, 39006 <bsd_init+0x16>
   38ffa:	f000 f829 	bl	39050 <bsd_platform_init>
   38ffe:	b908      	cbnz	r0, 39004 <bsd_init+0x14>
   39000:	2301      	movs	r3, #1
   39002:	7023      	strb	r3, [r4, #0]
   39004:	bd10      	pop	{r4, pc}
   39006:	f04f 30ff 	mov.w	r0, #4294967295
   3900a:	bd10      	pop	{r4, pc}
   3900c:	f04f 30ff 	mov.w	r0, #4294967295
   39010:	4770      	bx	lr
   39012:	bf00      	nop
   39014:	2002d6bb 	.word	0x2002d6bb

00039018 <bsd_shutdown>:
   39018:	b510      	push	{r4, lr}
   3901a:	4c05      	ldr	r4, [pc, #20]	; (39030 <bsd_shutdown+0x18>)
   3901c:	7823      	ldrb	r3, [r4, #0]
   3901e:	b123      	cbz	r3, 3902a <bsd_shutdown+0x12>
   39020:	f000 f89a 	bl	39158 <bsd_platform_shutdown>
   39024:	b900      	cbnz	r0, 39028 <bsd_shutdown+0x10>
   39026:	7020      	strb	r0, [r4, #0]
   39028:	bd10      	pop	{r4, pc}
   3902a:	f04f 30ff 	mov.w	r0, #4294967295
   3902e:	bd10      	pop	{r4, pc}
   39030:	2002d6bb 	.word	0x2002d6bb

00039034 <unimplemented_method>:
   39034:	b40f      	push	{r0, r1, r2, r3}
   39036:	b508      	push	{r3, lr}
   39038:	202d      	movs	r0, #45	; 0x2d
   3903a:	f7f0 fb0f 	bl	2965c <bsd_os_errno_set>
   3903e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   39042:	f04f 30ff 	mov.w	r0, #4294967295
   39046:	b004      	add	sp, #16
   39048:	4770      	bx	lr
   3904a:	bf00      	nop

0003904c <rpc_transport_ipc_fault_handler>:
   3904c:	f7ff bfcc 	b.w	38fe8 <bsd_platform_error_handler>

00039050 <bsd_platform_init>:
   39050:	b5f0      	push	{r4, r5, r6, r7, lr}
   39052:	f04f 0c00 	mov.w	ip, #0
   39056:	f247 0660 	movw	r6, #28768	; 0x7060
   3905a:	f24b 0260 	movw	r2, #45152	; 0xb060
   3905e:	6843      	ldr	r3, [r0, #4]
   39060:	4d3a      	ldr	r5, [pc, #232]	; (3914c <bsd_platform_init+0xfc>)
   39062:	4607      	mov	r7, r0
   39064:	602b      	str	r3, [r5, #0]
   39066:	7801      	ldrb	r1, [r0, #0]
   39068:	2006      	movs	r0, #6
   3906a:	4561      	cmp	r1, ip
   3906c:	bf08      	it	eq
   3906e:	4632      	moveq	r2, r6
   39070:	4413      	add	r3, r2
   39072:	4c37      	ldr	r4, [pc, #220]	; (39150 <bsd_platform_init+0x100>)
   39074:	60ab      	str	r3, [r5, #8]
   39076:	68b9      	ldr	r1, [r7, #8]
   39078:	6063      	str	r3, [r4, #4]
   3907a:	4b36      	ldr	r3, [pc, #216]	; (39154 <bsd_platform_init+0x104>)
   3907c:	b093      	sub	sp, #76	; 0x4c
   3907e:	606a      	str	r2, [r5, #4]
   39080:	f8a4 c000 	strh.w	ip, [r4]
   39084:	1a8a      	subs	r2, r1, r2
   39086:	60ea      	str	r2, [r5, #12]
   39088:	60a2      	str	r2, [r4, #8]
   3908a:	81a0      	strh	r0, [r4, #12]
   3908c:	6123      	str	r3, [r4, #16]
   3908e:	f001 f95b 	bl	3a348 <nrf_mem_init>
   39092:	2800      	cmp	r0, #0
   39094:	d156      	bne.n	39144 <bsd_platform_init+0xf4>
   39096:	4621      	mov	r1, r4
   39098:	a801      	add	r0, sp, #4
   3909a:	f001 f9c9 	bl	3a430 <nrf_mem_register>
   3909e:	2800      	cmp	r0, #0
   390a0:	d150      	bne.n	39144 <bsd_platform_init+0xf4>
   390a2:	f7f0 fc87 	bl	299b4 <bsd_os_init>
   390a6:	f7fd fb67 	bl	36778 <rpc_framework_init>
   390aa:	2800      	cmp	r0, #0
   390ac:	d14a      	bne.n	39144 <bsd_platform_init+0xf4>
   390ae:	783a      	ldrb	r2, [r7, #0]
   390b0:	682b      	ldr	r3, [r5, #0]
   390b2:	bb32      	cbnz	r2, 39102 <bsd_platform_init+0xb2>
   390b4:	4606      	mov	r6, r0
   390b6:	2220      	movs	r2, #32
   390b8:	2408      	movs	r4, #8
   390ba:	2500      	movs	r5, #0
   390bc:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   390c0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   390c4:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   390c8:	4411      	add	r1, r2
   390ca:	9302      	str	r3, [sp, #8]
   390cc:	e9cd 6008 	strd	r6, r0, [sp, #32]
   390d0:	910c      	str	r1, [sp, #48]	; 0x30
   390d2:	9203      	str	r2, [sp, #12]
   390d4:	f103 0140 	add.w	r1, r3, #64	; 0x40
   390d8:	9205      	str	r2, [sp, #20]
   390da:	9207      	str	r2, [sp, #28]
   390dc:	eb0d 0004 	add.w	r0, sp, r4
   390e0:	189a      	adds	r2, r3, r2
   390e2:	3360      	adds	r3, #96	; 0x60
   390e4:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   390e8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   390ec:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   390f0:	940f      	str	r4, [sp, #60]	; 0x3c
   390f2:	9104      	str	r1, [sp, #16]
   390f4:	9206      	str	r2, [sp, #24]
   390f6:	930a      	str	r3, [sp, #40]	; 0x28
   390f8:	f7fa fa4a 	bl	33590 <rpc_transport_ipc_init>
   390fc:	b128      	cbz	r0, 3910a <bsd_platform_init+0xba>
   390fe:	b013      	add	sp, #76	; 0x4c
   39100:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39102:	441e      	add	r6, r3
   39104:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   39108:	e7d5      	b.n	390b6 <bsd_platform_init+0x66>
   3910a:	f001 fe91 	bl	3ae30 <interface_init>
   3910e:	b9c8      	cbnz	r0, 39144 <bsd_platform_init+0xf4>
   39110:	f7fe fc80 	bl	37a14 <at_interface_init>
   39114:	b9b0      	cbnz	r0, 39144 <bsd_platform_init+0xf4>
   39116:	f7fb fda5 	bl	34c64 <ip_interface_init>
   3911a:	b998      	cbnz	r0, 39144 <bsd_platform_init+0xf4>
   3911c:	f7fb f850 	bl	341c0 <tls_interface_init>
   39120:	b980      	cbnz	r0, 39144 <bsd_platform_init+0xf4>
   39122:	f001 fb91 	bl	3a848 <mfu_interface_init>
   39126:	b968      	cbnz	r0, 39144 <bsd_platform_init+0xf4>
   39128:	f7fe fed0 	bl	37ecc <pdn_interface_init>
   3912c:	b950      	cbnz	r0, 39144 <bsd_platform_init+0xf4>
   3912e:	f7fe faa1 	bl	37674 <gnss_interface_init>
   39132:	b938      	cbnz	r0, 39144 <bsd_platform_init+0xf4>
   39134:	f7f9 fc5c 	bl	329f0 <logobj_interface_init>
   39138:	1b40      	subs	r0, r0, r5
   3913a:	bf18      	it	ne
   3913c:	2001      	movne	r0, #1
   3913e:	4240      	negs	r0, r0
   39140:	b013      	add	sp, #76	; 0x4c
   39142:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39144:	f04f 30ff 	mov.w	r0, #4294967295
   39148:	b013      	add	sp, #76	; 0x4c
   3914a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3914c:	20025b84 	.word	0x20025b84
   39150:	20025b70 	.word	0x20025b70
   39154:	000471f0 	.word	0x000471f0

00039158 <bsd_platform_shutdown>:
   39158:	b570      	push	{r4, r5, r6, lr}
   3915a:	b084      	sub	sp, #16
   3915c:	f002 f852 	bl	3b204 <interface_shutdown>
   39160:	f7fe faaa 	bl	376b8 <gnss_interface_deinit>
   39164:	2800      	cmp	r0, #0
   39166:	bf14      	ite	ne
   39168:	2416      	movne	r4, #22
   3916a:	2400      	moveq	r4, #0
   3916c:	f7fb fd98 	bl	34ca0 <ip_interface_deinit>
   39170:	2800      	cmp	r0, #0
   39172:	bf18      	it	ne
   39174:	2416      	movne	r4, #22
   39176:	f7f9 fc59 	bl	32a2c <logobj_interface_deinit>
   3917a:	2800      	cmp	r0, #0
   3917c:	bf18      	it	ne
   3917e:	2416      	movne	r4, #22
   39180:	f001 fb7e 	bl	3a880 <mfu_interface_deinit>
   39184:	2800      	cmp	r0, #0
   39186:	bf18      	it	ne
   39188:	2416      	movne	r4, #22
   3918a:	f7fe febf 	bl	37f0c <pdn_interface_deinit>
   3918e:	2800      	cmp	r0, #0
   39190:	bf18      	it	ne
   39192:	2416      	movne	r4, #22
   39194:	f7fb f81c 	bl	341d0 <tls_interface_deinit>
   39198:	2800      	cmp	r0, #0
   3919a:	bf18      	it	ne
   3919c:	2416      	movne	r4, #22
   3919e:	f7fe fc43 	bl	37a28 <at_interface_deinit>
   391a2:	2800      	cmp	r0, #0
   391a4:	bf18      	it	ne
   391a6:	2416      	movne	r4, #22
   391a8:	f7fa ff40 	bl	3402c <rpc_transport_ipc_request_shutdown>
   391ac:	f247 5330 	movw	r3, #30000	; 0x7530
   391b0:	2564      	movs	r5, #100	; 0x64
   391b2:	9301      	str	r3, [sp, #4]
   391b4:	e00b      	b.n	391ce <bsd_platform_shutdown+0x76>
   391b6:	2b00      	cmp	r3, #0
   391b8:	dd0e      	ble.n	391d8 <bsd_platform_shutdown+0x80>
   391ba:	a903      	add	r1, sp, #12
   391bc:	9503      	str	r5, [sp, #12]
   391be:	f7f0 f995 	bl	294ec <bsd_os_timedwait>
   391c2:	9a03      	ldr	r2, [sp, #12]
   391c4:	9b01      	ldr	r3, [sp, #4]
   391c6:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
   391ca:	1a9b      	subs	r3, r3, r2
   391cc:	9301      	str	r3, [sp, #4]
   391ce:	f7fa fd3f 	bl	33c50 <rpc_transport_ipc_shutdown_done>
   391d2:	9b01      	ldr	r3, [sp, #4]
   391d4:	2800      	cmp	r0, #0
   391d6:	d0ee      	beq.n	391b6 <bsd_platform_shutdown+0x5e>
   391d8:	2b00      	cmp	r3, #0
   391da:	d045      	beq.n	39268 <bsd_platform_shutdown+0x110>
   391dc:	f64b 3380 	movw	r3, #48000	; 0xbb80
   391e0:	4d23      	ldr	r5, [pc, #140]	; (39270 <bsd_platform_shutdown+0x118>)
   391e2:	9301      	str	r3, [sp, #4]
   391e4:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
   391e8:	2b01      	cmp	r3, #1
   391ea:	d112      	bne.n	39212 <bsd_platform_shutdown+0xba>
   391ec:	2664      	movs	r6, #100	; 0x64
   391ee:	e003      	b.n	391f8 <bsd_platform_shutdown+0xa0>
   391f0:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
   391f4:	2b01      	cmp	r3, #1
   391f6:	d10c      	bne.n	39212 <bsd_platform_shutdown+0xba>
   391f8:	a903      	add	r1, sp, #12
   391fa:	2000      	movs	r0, #0
   391fc:	9603      	str	r6, [sp, #12]
   391fe:	f7f0 f975 	bl	294ec <bsd_os_timedwait>
   39202:	9a03      	ldr	r2, [sp, #12]
   39204:	9b01      	ldr	r3, [sp, #4]
   39206:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
   3920a:	1a9b      	subs	r3, r3, r2
   3920c:	2b00      	cmp	r3, #0
   3920e:	9301      	str	r3, [sp, #4]
   39210:	dcee      	bgt.n	391f0 <bsd_platform_shutdown+0x98>
   39212:	230a      	movs	r3, #10
   39214:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   39218:	2101      	movs	r1, #1
   3921a:	4a15      	ldr	r2, [pc, #84]	; (39270 <bsd_platform_shutdown+0x118>)
   3921c:	9001      	str	r0, [sp, #4]
   3921e:	f8c2 1614 	str.w	r1, [r2, #1556]	; 0x614
   39222:	9302      	str	r3, [sp, #8]
   39224:	9b02      	ldr	r3, [sp, #8]
   39226:	b12b      	cbz	r3, 39234 <bsd_platform_shutdown+0xdc>
   39228:	9b02      	ldr	r3, [sp, #8]
   3922a:	3b01      	subs	r3, #1
   3922c:	9302      	str	r3, [sp, #8]
   3922e:	9b02      	ldr	r3, [sp, #8]
   39230:	2b00      	cmp	r3, #0
   39232:	d1f9      	bne.n	39228 <bsd_platform_shutdown+0xd0>
   39234:	2200      	movs	r2, #0
   39236:	4b0e      	ldr	r3, [pc, #56]	; (39270 <bsd_platform_shutdown+0x118>)
   39238:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   3923c:	a901      	add	r1, sp, #4
   3923e:	2000      	movs	r0, #0
   39240:	f7f0 f954 	bl	294ec <bsd_os_timedwait>
   39244:	9b01      	ldr	r3, [sp, #4]
   39246:	2b00      	cmp	r3, #0
   39248:	dcf8      	bgt.n	3923c <bsd_platform_shutdown+0xe4>
   3924a:	2200      	movs	r2, #0
   3924c:	2101      	movs	r1, #1
   3924e:	4620      	mov	r0, r4
   39250:	4b07      	ldr	r3, [pc, #28]	; (39270 <bsd_platform_shutdown+0x118>)
   39252:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   39256:	9203      	str	r2, [sp, #12]
   39258:	f8c3 1610 	str.w	r1, [r3, #1552]	; 0x610
   3925c:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
   39260:	9303      	str	r3, [sp, #12]
   39262:	9b03      	ldr	r3, [sp, #12]
   39264:	b004      	add	sp, #16
   39266:	bd70      	pop	{r4, r5, r6, pc}
   39268:	f7fa f9c6 	bl	335f8 <rpc_transport_ipc_shutdown>
   3926c:	e7b6      	b.n	391dc <bsd_platform_shutdown+0x84>
   3926e:	bf00      	nop
   39270:	40005000 	.word	0x40005000

00039274 <bsd_platform_af_method_table_get>:
   39274:	2805      	cmp	r0, #5
   39276:	d02a      	beq.n	392ce <bsd_platform_af_method_table_get+0x5a>
   39278:	b508      	push	{r3, lr}
   3927a:	d914      	bls.n	392a6 <bsd_platform_af_method_table_get+0x32>
   3927c:	280a      	cmp	r0, #10
   3927e:	d016      	beq.n	392ae <bsd_platform_af_method_table_get+0x3a>
   39280:	2866      	cmp	r0, #102	; 0x66
   39282:	d11f      	bne.n	392c4 <bsd_platform_af_method_table_get+0x50>
   39284:	f240 2302 	movw	r3, #514	; 0x202
   39288:	429a      	cmp	r2, r3
   3928a:	d035      	beq.n	392f8 <bsd_platform_af_method_table_get+0x84>
   3928c:	f240 2305 	movw	r3, #517	; 0x205
   39290:	429a      	cmp	r2, r3
   39292:	d035      	beq.n	39300 <bsd_platform_af_method_table_get+0x8c>
   39294:	f240 2301 	movw	r3, #513	; 0x201
   39298:	429a      	cmp	r2, r3
   3929a:	d02f      	beq.n	392fc <bsd_platform_af_method_table_get+0x88>
   3929c:	202b      	movs	r0, #43	; 0x2b
   3929e:	f7f0 f9dd 	bl	2965c <bsd_os_errno_set>
   392a2:	2000      	movs	r0, #0
   392a4:	bd08      	pop	{r3, pc}
   392a6:	2801      	cmp	r0, #1
   392a8:	d016      	beq.n	392d8 <bsd_platform_af_method_table_get+0x64>
   392aa:	2802      	cmp	r0, #2
   392ac:	d10a      	bne.n	392c4 <bsd_platform_af_method_table_get+0x50>
   392ae:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   392b2:	d21a      	bcs.n	392ea <bsd_platform_af_method_table_get+0x76>
   392b4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   392b8:	d21a      	bcs.n	392f0 <bsd_platform_af_method_table_get+0x7c>
   392ba:	3a01      	subs	r2, #1
   392bc:	2a01      	cmp	r2, #1
   392be:	d8ed      	bhi.n	3929c <bsd_platform_af_method_table_get+0x28>
   392c0:	4810      	ldr	r0, [pc, #64]	; (39304 <bsd_platform_af_method_table_get+0x90>)
   392c2:	bd08      	pop	{r3, pc}
   392c4:	2016      	movs	r0, #22
   392c6:	f7f0 f9c9 	bl	2965c <bsd_os_errno_set>
   392ca:	2000      	movs	r0, #0
   392cc:	bd08      	pop	{r3, pc}
   392ce:	2903      	cmp	r1, #3
   392d0:	480d      	ldr	r0, [pc, #52]	; (39308 <bsd_platform_af_method_table_get+0x94>)
   392d2:	bf18      	it	ne
   392d4:	2000      	movne	r0, #0
   392d6:	4770      	bx	lr
   392d8:	f240 2303 	movw	r3, #515	; 0x203
   392dc:	429a      	cmp	r2, r3
   392de:	d009      	beq.n	392f4 <bsd_platform_af_method_table_get+0x80>
   392e0:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   392e4:	d1da      	bne.n	3929c <bsd_platform_af_method_table_get+0x28>
   392e6:	4809      	ldr	r0, [pc, #36]	; (3930c <bsd_platform_af_method_table_get+0x98>)
   392e8:	bd08      	pop	{r3, pc}
   392ea:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   392ee:	d1d5      	bne.n	3929c <bsd_platform_af_method_table_get+0x28>
   392f0:	4807      	ldr	r0, [pc, #28]	; (39310 <bsd_platform_af_method_table_get+0x9c>)
   392f2:	bd08      	pop	{r3, pc}
   392f4:	4807      	ldr	r0, [pc, #28]	; (39314 <bsd_platform_af_method_table_get+0xa0>)
   392f6:	bd08      	pop	{r3, pc}
   392f8:	4807      	ldr	r0, [pc, #28]	; (39318 <bsd_platform_af_method_table_get+0xa4>)
   392fa:	bd08      	pop	{r3, pc}
   392fc:	4807      	ldr	r0, [pc, #28]	; (3931c <bsd_platform_af_method_table_get+0xa8>)
   392fe:	bd08      	pop	{r3, pc}
   39300:	4807      	ldr	r0, [pc, #28]	; (39320 <bsd_platform_af_method_table_get+0xac>)
   39302:	bd08      	pop	{r3, pc}
   39304:	000470d8 	.word	0x000470d8
   39308:	000471c8 	.word	0x000471c8
   3930c:	00047178 	.word	0x00047178
   39310:	00047100 	.word	0x00047100
   39314:	00047128 	.word	0x00047128
   39318:	00047150 	.word	0x00047150
   3931c:	000470b0 	.word	0x000470b0
   39320:	000471a0 	.word	0x000471a0

00039324 <bsd_platform_fd_method_table_get>:
   39324:	b538      	push	{r3, r4, r5, lr}
   39326:	4605      	mov	r5, r0
   39328:	f001 feb4 	bl	3b094 <interface_socket_from_handle_get>
   3932c:	4604      	mov	r4, r0
   3932e:	b960      	cbnz	r0, 3934a <bsd_platform_fd_method_table_get+0x26>
   39330:	4b2c      	ldr	r3, [pc, #176]	; (393e4 <bsd_platform_fd_method_table_get+0xc0>)
   39332:	429d      	cmp	r5, r3
   39334:	d02f      	beq.n	39396 <bsd_platform_fd_method_table_get+0x72>
   39336:	0c2b      	lsrs	r3, r5, #16
   39338:	4a2b      	ldr	r2, [pc, #172]	; (393e8 <bsd_platform_fd_method_table_get+0xc4>)
   3933a:	041b      	lsls	r3, r3, #16
   3933c:	4293      	cmp	r3, r2
   3933e:	d03d      	beq.n	393bc <bsd_platform_fd_method_table_get+0x98>
   39340:	4b2a      	ldr	r3, [pc, #168]	; (393ec <bsd_platform_fd_method_table_get+0xc8>)
   39342:	429d      	cmp	r5, r3
   39344:	d149      	bne.n	393da <bsd_platform_fd_method_table_get+0xb6>
   39346:	482a      	ldr	r0, [pc, #168]	; (393f0 <bsd_platform_fd_method_table_get+0xcc>)
   39348:	bd38      	pop	{r3, r4, r5, pc}
   3934a:	68c3      	ldr	r3, [r0, #12]
   3934c:	6942      	ldr	r2, [r0, #20]
   3934e:	2b05      	cmp	r3, #5
   39350:	d036      	beq.n	393c0 <bsd_platform_fd_method_table_get+0x9c>
   39352:	d911      	bls.n	39378 <bsd_platform_fd_method_table_get+0x54>
   39354:	2b0a      	cmp	r3, #10
   39356:	d013      	beq.n	39380 <bsd_platform_fd_method_table_get+0x5c>
   39358:	2b66      	cmp	r3, #102	; 0x66
   3935a:	d11e      	bne.n	3939a <bsd_platform_fd_method_table_get+0x76>
   3935c:	f240 2302 	movw	r3, #514	; 0x202
   39360:	429a      	cmp	r2, r3
   39362:	d02b      	beq.n	393bc <bsd_platform_fd_method_table_get+0x98>
   39364:	f240 2305 	movw	r3, #517	; 0x205
   39368:	429a      	cmp	r2, r3
   3936a:	d02f      	beq.n	393cc <bsd_platform_fd_method_table_get+0xa8>
   3936c:	f240 2301 	movw	r3, #513	; 0x201
   39370:	429a      	cmp	r2, r3
   39372:	d11e      	bne.n	393b2 <bsd_platform_fd_method_table_get+0x8e>
   39374:	481f      	ldr	r0, [pc, #124]	; (393f4 <bsd_platform_fd_method_table_get+0xd0>)
   39376:	bd38      	pop	{r3, r4, r5, pc}
   39378:	2b01      	cmp	r3, #1
   3937a:	d013      	beq.n	393a4 <bsd_platform_fd_method_table_get+0x80>
   3937c:	2b02      	cmp	r3, #2
   3937e:	d10c      	bne.n	3939a <bsd_platform_fd_method_table_get+0x76>
   39380:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   39384:	d224      	bcs.n	393d0 <bsd_platform_fd_method_table_get+0xac>
   39386:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   3938a:	d224      	bcs.n	393d6 <bsd_platform_fd_method_table_get+0xb2>
   3938c:	3a01      	subs	r2, #1
   3938e:	2a01      	cmp	r2, #1
   39390:	d80f      	bhi.n	393b2 <bsd_platform_fd_method_table_get+0x8e>
   39392:	4819      	ldr	r0, [pc, #100]	; (393f8 <bsd_platform_fd_method_table_get+0xd4>)
   39394:	bd38      	pop	{r3, r4, r5, pc}
   39396:	4819      	ldr	r0, [pc, #100]	; (393fc <bsd_platform_fd_method_table_get+0xd8>)
   39398:	bd38      	pop	{r3, r4, r5, pc}
   3939a:	2016      	movs	r0, #22
   3939c:	f7f0 f95e 	bl	2965c <bsd_os_errno_set>
   393a0:	2000      	movs	r0, #0
   393a2:	bd38      	pop	{r3, r4, r5, pc}
   393a4:	f240 2303 	movw	r3, #515	; 0x203
   393a8:	429a      	cmp	r2, r3
   393aa:	d0f4      	beq.n	39396 <bsd_platform_fd_method_table_get+0x72>
   393ac:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   393b0:	d0c9      	beq.n	39346 <bsd_platform_fd_method_table_get+0x22>
   393b2:	202b      	movs	r0, #43	; 0x2b
   393b4:	f7f0 f952 	bl	2965c <bsd_os_errno_set>
   393b8:	2000      	movs	r0, #0
   393ba:	bd38      	pop	{r3, r4, r5, pc}
   393bc:	4810      	ldr	r0, [pc, #64]	; (39400 <bsd_platform_fd_method_table_get+0xdc>)
   393be:	bd38      	pop	{r3, r4, r5, pc}
   393c0:	6903      	ldr	r3, [r0, #16]
   393c2:	4810      	ldr	r0, [pc, #64]	; (39404 <bsd_platform_fd_method_table_get+0xe0>)
   393c4:	2b03      	cmp	r3, #3
   393c6:	bf18      	it	ne
   393c8:	2000      	movne	r0, #0
   393ca:	bd38      	pop	{r3, r4, r5, pc}
   393cc:	480e      	ldr	r0, [pc, #56]	; (39408 <bsd_platform_fd_method_table_get+0xe4>)
   393ce:	bd38      	pop	{r3, r4, r5, pc}
   393d0:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   393d4:	d1ed      	bne.n	393b2 <bsd_platform_fd_method_table_get+0x8e>
   393d6:	480d      	ldr	r0, [pc, #52]	; (3940c <bsd_platform_fd_method_table_get+0xe8>)
   393d8:	bd38      	pop	{r3, r4, r5, pc}
   393da:	2009      	movs	r0, #9
   393dc:	f7f0 f93e 	bl	2965c <bsd_os_errno_set>
   393e0:	4620      	mov	r0, r4
   393e2:	bd38      	pop	{r3, r4, r5, pc}
   393e4:	49765432 	.word	0x49765432
   393e8:	789a0000 	.word	0x789a0000
   393ec:	49765443 	.word	0x49765443
   393f0:	00047178 	.word	0x00047178
   393f4:	000470b0 	.word	0x000470b0
   393f8:	000470d8 	.word	0x000470d8
   393fc:	00047128 	.word	0x00047128
   39400:	00047150 	.word	0x00047150
   39404:	000471c8 	.word	0x000471c8
   39408:	000471a0 	.word	0x000471a0
   3940c:	00047100 	.word	0x00047100

00039410 <bsd_platform_getaddrinfo>:
   39410:	f7fc bda0 	b.w	35f54 <ip_interface_getaddrinfo>

00039414 <bsd_platform_freeaddrinfo>:
   39414:	f7fc be9c 	b.w	36150 <ip_interface_freeaddrinfo>

00039418 <bsd_platform_poll>:
   39418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3941c:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   39420:	b083      	sub	sp, #12
   39422:	9200      	str	r2, [sp, #0]
   39424:	2800      	cmp	r0, #0
   39426:	d048      	beq.n	394ba <bsd_platform_poll+0xa2>
   39428:	1e4b      	subs	r3, r1, #1
   3942a:	2b08      	cmp	r3, #8
   3942c:	d845      	bhi.n	394ba <bsd_platform_poll+0xa2>
   3942e:	4680      	mov	r8, r0
   39430:	4605      	mov	r5, r0
   39432:	2400      	movs	r4, #0
   39434:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   39438:	88ab      	ldrh	r3, [r5, #4]
   3943a:	6828      	ldr	r0, [r5, #0]
   3943c:	f003 0303 	and.w	r3, r3, #3
   39440:	a901      	add	r1, sp, #4
   39442:	f043 061c 	orr.w	r6, r3, #28
   39446:	f001 fe33 	bl	3b0b0 <interface_socket_event_get>
   3944a:	9b01      	ldr	r3, [sp, #4]
   3944c:	3508      	adds	r5, #8
   3944e:	4033      	ands	r3, r6
   39450:	f825 3c02 	strh.w	r3, [r5, #-2]
   39454:	b103      	cbz	r3, 39458 <bsd_platform_poll+0x40>
   39456:	3401      	adds	r4, #1
   39458:	42af      	cmp	r7, r5
   3945a:	d1ed      	bne.n	39438 <bsd_platform_poll+0x20>
   3945c:	bb9c      	cbnz	r4, 394c6 <bsd_platform_poll+0xae>
   3945e:	4669      	mov	r1, sp
   39460:	4640      	mov	r0, r8
   39462:	f7f0 f843 	bl	294ec <bsd_os_timedwait>
   39466:	4607      	mov	r7, r0
   39468:	b108      	cbz	r0, 3946e <bsd_platform_poll+0x56>
   3946a:	283c      	cmp	r0, #60	; 0x3c
   3946c:	d11d      	bne.n	394aa <bsd_platform_poll+0x92>
   3946e:	46c1      	mov	r9, r8
   39470:	2600      	movs	r6, #0
   39472:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   39476:	f8d9 0000 	ldr.w	r0, [r9]
   3947a:	f003 0303 	and.w	r3, r3, #3
   3947e:	a901      	add	r1, sp, #4
   39480:	f043 041c 	orr.w	r4, r3, #28
   39484:	f001 fe14 	bl	3b0b0 <interface_socket_event_get>
   39488:	9b01      	ldr	r3, [sp, #4]
   3948a:	f109 0908 	add.w	r9, r9, #8
   3948e:	4023      	ands	r3, r4
   39490:	f829 3c02 	strh.w	r3, [r9, #-2]
   39494:	b103      	cbz	r3, 39498 <bsd_platform_poll+0x80>
   39496:	3601      	adds	r6, #1
   39498:	454d      	cmp	r5, r9
   3949a:	d1ea      	bne.n	39472 <bsd_platform_poll+0x5a>
   3949c:	b90e      	cbnz	r6, 394a2 <bsd_platform_poll+0x8a>
   3949e:	2f00      	cmp	r7, #0
   394a0:	d0dd      	beq.n	3945e <bsd_platform_poll+0x46>
   394a2:	4630      	mov	r0, r6
   394a4:	b003      	add	sp, #12
   394a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   394aa:	2023      	movs	r0, #35	; 0x23
   394ac:	f7f0 f8d6 	bl	2965c <bsd_os_errno_set>
   394b0:	f04f 30ff 	mov.w	r0, #4294967295
   394b4:	b003      	add	sp, #12
   394b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   394ba:	2016      	movs	r0, #22
   394bc:	f7f0 f8ce 	bl	2965c <bsd_os_errno_set>
   394c0:	f04f 30ff 	mov.w	r0, #4294967295
   394c4:	e7ee      	b.n	394a4 <bsd_platform_poll+0x8c>
   394c6:	4620      	mov	r0, r4
   394c8:	e7ec      	b.n	394a4 <bsd_platform_poll+0x8c>
   394ca:	bf00      	nop

000394cc <bsd_platform_fcntl>:
   394cc:	b508      	push	{r3, lr}
   394ce:	4b06      	ldr	r3, [pc, #24]	; (394e8 <bsd_platform_fcntl+0x1c>)
   394d0:	4298      	cmp	r0, r3
   394d2:	d003      	beq.n	394dc <bsd_platform_fcntl+0x10>
   394d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   394d8:	f001 bef2 	b.w	3b2c0 <interface_socket_fcntl>
   394dc:	202d      	movs	r0, #45	; 0x2d
   394de:	f7f0 f8bd 	bl	2965c <bsd_os_errno_set>
   394e2:	f04f 30ff 	mov.w	r0, #4294967295
   394e6:	bd08      	pop	{r3, pc}
   394e8:	49765432 	.word	0x49765432

000394ec <linked_list_init>:
   394ec:	b128      	cbz	r0, 394fa <linked_list_init+0xe>
   394ee:	2300      	movs	r3, #0
   394f0:	6003      	str	r3, [r0, #0]
   394f2:	e9c0 3301 	strd	r3, r3, [r0, #4]
   394f6:	4618      	mov	r0, r3
   394f8:	4770      	bx	lr
   394fa:	2007      	movs	r0, #7
   394fc:	4770      	bx	lr
   394fe:	bf00      	nop

00039500 <linked_list_push>:
   39500:	6802      	ldr	r2, [r0, #0]
   39502:	4603      	mov	r3, r0
   39504:	3201      	adds	r2, #1
   39506:	d00e      	beq.n	39526 <linked_list_push+0x26>
   39508:	2200      	movs	r2, #0
   3950a:	600a      	str	r2, [r1, #0]
   3950c:	6802      	ldr	r2, [r0, #0]
   3950e:	b13a      	cbz	r2, 39520 <linked_list_push+0x20>
   39510:	6882      	ldr	r2, [r0, #8]
   39512:	6011      	str	r1, [r2, #0]
   39514:	6081      	str	r1, [r0, #8]
   39516:	681a      	ldr	r2, [r3, #0]
   39518:	2000      	movs	r0, #0
   3951a:	3201      	adds	r2, #1
   3951c:	601a      	str	r2, [r3, #0]
   3951e:	4770      	bx	lr
   39520:	e9c0 1101 	strd	r1, r1, [r0, #4]
   39524:	e7f7      	b.n	39516 <linked_list_push+0x16>
   39526:	2004      	movs	r0, #4
   39528:	4770      	bx	lr
   3952a:	bf00      	nop

0003952c <linked_list_pop>:
   3952c:	4603      	mov	r3, r0
   3952e:	6800      	ldr	r0, [r0, #0]
   39530:	b128      	cbz	r0, 3953e <linked_list_pop+0x12>
   39532:	6858      	ldr	r0, [r3, #4]
   39534:	681a      	ldr	r2, [r3, #0]
   39536:	6801      	ldr	r1, [r0, #0]
   39538:	3a01      	subs	r2, #1
   3953a:	6059      	str	r1, [r3, #4]
   3953c:	601a      	str	r2, [r3, #0]
   3953e:	4770      	bx	lr

00039540 <linked_list_peek>:
   39540:	6803      	ldr	r3, [r0, #0]
   39542:	b10b      	cbz	r3, 39548 <linked_list_peek+0x8>
   39544:	6840      	ldr	r0, [r0, #4]
   39546:	4770      	bx	lr
   39548:	4618      	mov	r0, r3
   3954a:	4770      	bx	lr

0003954c <linked_list_size_get>:
   3954c:	6800      	ldr	r0, [r0, #0]
   3954e:	4770      	bx	lr

00039550 <linked_list_get_next>:
   39550:	6800      	ldr	r0, [r0, #0]
   39552:	4770      	bx	lr

00039554 <nrf_socket>:
   39554:	b570      	push	{r4, r5, r6, lr}
   39556:	4604      	mov	r4, r0
   39558:	460d      	mov	r5, r1
   3955a:	4616      	mov	r6, r2
   3955c:	f7ff fe8a 	bl	39274 <bsd_platform_af_method_table_get>
   39560:	b130      	cbz	r0, 39570 <nrf_socket+0x1c>
   39562:	6803      	ldr	r3, [r0, #0]
   39564:	4632      	mov	r2, r6
   39566:	4629      	mov	r1, r5
   39568:	4620      	mov	r0, r4
   3956a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3956e:	4718      	bx	r3
   39570:	f04f 30ff 	mov.w	r0, #4294967295
   39574:	bd70      	pop	{r4, r5, r6, pc}
   39576:	bf00      	nop

00039578 <nrf_close>:
   39578:	b510      	push	{r4, lr}
   3957a:	4604      	mov	r4, r0
   3957c:	f7ff fed2 	bl	39324 <bsd_platform_fd_method_table_get>
   39580:	b120      	cbz	r0, 3958c <nrf_close+0x14>
   39582:	6843      	ldr	r3, [r0, #4]
   39584:	4620      	mov	r0, r4
   39586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3958a:	4718      	bx	r3
   3958c:	f04f 30ff 	mov.w	r0, #4294967295
   39590:	bd10      	pop	{r4, pc}
   39592:	bf00      	nop

00039594 <nrf_sendto>:
   39594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39598:	460d      	mov	r5, r1
   3959a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3959e:	4616      	mov	r6, r2
   395a0:	461f      	mov	r7, r3
   395a2:	4604      	mov	r4, r0
   395a4:	f7ff febe 	bl	39324 <bsd_platform_fd_method_table_get>
   395a8:	b158      	cbz	r0, 395c2 <nrf_sendto+0x2e>
   395aa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   395ae:	f8d0 e008 	ldr.w	lr, [r0, #8]
   395b2:	463b      	mov	r3, r7
   395b4:	4632      	mov	r2, r6
   395b6:	4629      	mov	r1, r5
   395b8:	4620      	mov	r0, r4
   395ba:	46f4      	mov	ip, lr
   395bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   395c0:	4760      	bx	ip
   395c2:	f04f 30ff 	mov.w	r0, #4294967295
   395c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   395ca:	bf00      	nop

000395cc <nrf_write>:
   395cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   395ce:	b083      	sub	sp, #12
   395d0:	460e      	mov	r6, r1
   395d2:	4617      	mov	r7, r2
   395d4:	4605      	mov	r5, r0
   395d6:	f7ff fea5 	bl	39324 <bsd_platform_fd_method_table_get>
   395da:	b150      	cbz	r0, 395f2 <nrf_write+0x26>
   395dc:	2300      	movs	r3, #0
   395de:	4604      	mov	r4, r0
   395e0:	e9cd 3300 	strd	r3, r3, [sp]
   395e4:	463a      	mov	r2, r7
   395e6:	4631      	mov	r1, r6
   395e8:	4628      	mov	r0, r5
   395ea:	68a4      	ldr	r4, [r4, #8]
   395ec:	47a0      	blx	r4
   395ee:	b003      	add	sp, #12
   395f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   395f2:	f04f 30ff 	mov.w	r0, #4294967295
   395f6:	e7fa      	b.n	395ee <nrf_write+0x22>

000395f8 <nrf_recvfrom>:
   395f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   395fc:	460d      	mov	r5, r1
   395fe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   39602:	4616      	mov	r6, r2
   39604:	461f      	mov	r7, r3
   39606:	4604      	mov	r4, r0
   39608:	f7ff fe8c 	bl	39324 <bsd_platform_fd_method_table_get>
   3960c:	b158      	cbz	r0, 39626 <nrf_recvfrom+0x2e>
   3960e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   39612:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   39616:	463b      	mov	r3, r7
   39618:	4632      	mov	r2, r6
   3961a:	4629      	mov	r1, r5
   3961c:	4620      	mov	r0, r4
   3961e:	46f4      	mov	ip, lr
   39620:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39624:	4760      	bx	ip
   39626:	f04f 30ff 	mov.w	r0, #4294967295
   3962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3962e:	bf00      	nop

00039630 <nrf_recv>:
   39630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39634:	b082      	sub	sp, #8
   39636:	460e      	mov	r6, r1
   39638:	4617      	mov	r7, r2
   3963a:	4698      	mov	r8, r3
   3963c:	4605      	mov	r5, r0
   3963e:	f7ff fe71 	bl	39324 <bsd_platform_fd_method_table_get>
   39642:	b160      	cbz	r0, 3965e <nrf_recv+0x2e>
   39644:	4604      	mov	r4, r0
   39646:	2000      	movs	r0, #0
   39648:	e9cd 0000 	strd	r0, r0, [sp]
   3964c:	4643      	mov	r3, r8
   3964e:	463a      	mov	r2, r7
   39650:	4631      	mov	r1, r6
   39652:	4628      	mov	r0, r5
   39654:	68e4      	ldr	r4, [r4, #12]
   39656:	47a0      	blx	r4
   39658:	b002      	add	sp, #8
   3965a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3965e:	f04f 30ff 	mov.w	r0, #4294967295
   39662:	e7f9      	b.n	39658 <nrf_recv+0x28>

00039664 <nrf_read>:
   39664:	b5f0      	push	{r4, r5, r6, r7, lr}
   39666:	b083      	sub	sp, #12
   39668:	460e      	mov	r6, r1
   3966a:	4617      	mov	r7, r2
   3966c:	4605      	mov	r5, r0
   3966e:	f7ff fe59 	bl	39324 <bsd_platform_fd_method_table_get>
   39672:	b150      	cbz	r0, 3968a <nrf_read+0x26>
   39674:	2300      	movs	r3, #0
   39676:	4604      	mov	r4, r0
   39678:	e9cd 3300 	strd	r3, r3, [sp]
   3967c:	463a      	mov	r2, r7
   3967e:	4631      	mov	r1, r6
   39680:	4628      	mov	r0, r5
   39682:	68e4      	ldr	r4, [r4, #12]
   39684:	47a0      	blx	r4
   39686:	b003      	add	sp, #12
   39688:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3968a:	f04f 30ff 	mov.w	r0, #4294967295
   3968e:	e7fa      	b.n	39686 <nrf_read+0x22>

00039690 <nrf_connect>:
   39690:	b570      	push	{r4, r5, r6, lr}
   39692:	460d      	mov	r5, r1
   39694:	4616      	mov	r6, r2
   39696:	4604      	mov	r4, r0
   39698:	f7ff fe44 	bl	39324 <bsd_platform_fd_method_table_get>
   3969c:	b130      	cbz	r0, 396ac <nrf_connect+0x1c>
   3969e:	6943      	ldr	r3, [r0, #20]
   396a0:	4632      	mov	r2, r6
   396a2:	4629      	mov	r1, r5
   396a4:	4620      	mov	r0, r4
   396a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   396aa:	4718      	bx	r3
   396ac:	f04f 30ff 	mov.w	r0, #4294967295
   396b0:	bd70      	pop	{r4, r5, r6, pc}
   396b2:	bf00      	nop

000396b4 <nrf_listen>:
   396b4:	b570      	push	{r4, r5, r6, lr}
   396b6:	460d      	mov	r5, r1
   396b8:	4604      	mov	r4, r0
   396ba:	f7ff fe33 	bl	39324 <bsd_platform_fd_method_table_get>
   396be:	b128      	cbz	r0, 396cc <nrf_listen+0x18>
   396c0:	6983      	ldr	r3, [r0, #24]
   396c2:	4629      	mov	r1, r5
   396c4:	4620      	mov	r0, r4
   396c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   396ca:	4718      	bx	r3
   396cc:	f04f 30ff 	mov.w	r0, #4294967295
   396d0:	bd70      	pop	{r4, r5, r6, pc}
   396d2:	bf00      	nop

000396d4 <nrf_accept>:
   396d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   396d8:	460d      	mov	r5, r1
   396da:	4616      	mov	r6, r2
   396dc:	4604      	mov	r4, r0
   396de:	f7ff fe21 	bl	39324 <bsd_platform_fd_method_table_get>
   396e2:	b140      	cbz	r0, 396f6 <nrf_accept+0x22>
   396e4:	69c7      	ldr	r7, [r0, #28]
   396e6:	4632      	mov	r2, r6
   396e8:	4629      	mov	r1, r5
   396ea:	4620      	mov	r0, r4
   396ec:	46bc      	mov	ip, r7
   396ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   396f2:	2300      	movs	r3, #0
   396f4:	4760      	bx	ip
   396f6:	f04f 30ff 	mov.w	r0, #4294967295
   396fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   396fe:	bf00      	nop

00039700 <nrf_bind>:
   39700:	b570      	push	{r4, r5, r6, lr}
   39702:	460d      	mov	r5, r1
   39704:	4616      	mov	r6, r2
   39706:	4604      	mov	r4, r0
   39708:	f7ff fe0c 	bl	39324 <bsd_platform_fd_method_table_get>
   3970c:	b130      	cbz	r0, 3971c <nrf_bind+0x1c>
   3970e:	6903      	ldr	r3, [r0, #16]
   39710:	4632      	mov	r2, r6
   39712:	4629      	mov	r1, r5
   39714:	4620      	mov	r0, r4
   39716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3971a:	4718      	bx	r3
   3971c:	f04f 30ff 	mov.w	r0, #4294967295
   39720:	bd70      	pop	{r4, r5, r6, pc}
   39722:	bf00      	nop

00039724 <nrf_setsockopt>:
   39724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39728:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3972c:	460d      	mov	r5, r1
   3972e:	4616      	mov	r6, r2
   39730:	461f      	mov	r7, r3
   39732:	4604      	mov	r4, r0
   39734:	f7ff fdf6 	bl	39324 <bsd_platform_fd_method_table_get>
   39738:	b158      	cbz	r0, 39752 <nrf_setsockopt+0x2e>
   3973a:	f8cd 8018 	str.w	r8, [sp, #24]
   3973e:	f8d0 e020 	ldr.w	lr, [r0, #32]
   39742:	463b      	mov	r3, r7
   39744:	4632      	mov	r2, r6
   39746:	4629      	mov	r1, r5
   39748:	4620      	mov	r0, r4
   3974a:	46f4      	mov	ip, lr
   3974c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   39750:	4760      	bx	ip
   39752:	f04f 30ff 	mov.w	r0, #4294967295
   39756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3975a:	bf00      	nop

0003975c <nrf_getsockopt>:
   3975c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39760:	f8dd 8018 	ldr.w	r8, [sp, #24]
   39764:	460d      	mov	r5, r1
   39766:	4616      	mov	r6, r2
   39768:	461f      	mov	r7, r3
   3976a:	4604      	mov	r4, r0
   3976c:	f7ff fdda 	bl	39324 <bsd_platform_fd_method_table_get>
   39770:	b158      	cbz	r0, 3978a <nrf_getsockopt+0x2e>
   39772:	f8cd 8018 	str.w	r8, [sp, #24]
   39776:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   3977a:	463b      	mov	r3, r7
   3977c:	4632      	mov	r2, r6
   3977e:	4629      	mov	r1, r5
   39780:	4620      	mov	r0, r4
   39782:	46f4      	mov	ip, lr
   39784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   39788:	4760      	bx	ip
   3978a:	f04f 30ff 	mov.w	r0, #4294967295
   3978e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39792:	bf00      	nop

00039794 <nrf_getaddrinfo>:
   39794:	f7ff be3c 	b.w	39410 <bsd_platform_getaddrinfo>

00039798 <nrf_freeaddrinfo>:
   39798:	f7ff be3c 	b.w	39414 <bsd_platform_freeaddrinfo>

0003979c <nrf_poll>:
   3979c:	f7ff be3c 	b.w	39418 <bsd_platform_poll>

000397a0 <nrf_fcntl>:
   397a0:	f7ff be94 	b.w	394cc <bsd_platform_fcntl>

000397a4 <rpc_gnss_serialize_utc>:
   397a4:	4603      	mov	r3, r0
   397a6:	b1d8      	cbz	r0, 397e0 <rpc_gnss_serialize_utc+0x3c>
   397a8:	b1d1      	cbz	r1, 397e0 <rpc_gnss_serialize_utc+0x3c>
   397aa:	2000      	movs	r0, #0
   397ac:	2201      	movs	r2, #1
   397ae:	7048      	strb	r0, [r1, #1]
   397b0:	700a      	strb	r2, [r1, #0]
   397b2:	685a      	ldr	r2, [r3, #4]
   397b4:	2010      	movs	r0, #16
   397b6:	f8c1 2006 	str.w	r2, [r1, #6]
   397ba:	681a      	ldr	r2, [r3, #0]
   397bc:	f8c1 2002 	str.w	r2, [r1, #2]
   397c0:	f993 200a 	ldrsb.w	r2, [r3, #10]
   397c4:	730a      	strb	r2, [r1, #12]
   397c6:	f993 200d 	ldrsb.w	r2, [r3, #13]
   397ca:	73ca      	strb	r2, [r1, #15]
   397cc:	f993 200c 	ldrsb.w	r2, [r3, #12]
   397d0:	738a      	strb	r2, [r1, #14]
   397d2:	7a1a      	ldrb	r2, [r3, #8]
   397d4:	728a      	strb	r2, [r1, #10]
   397d6:	7ada      	ldrb	r2, [r3, #11]
   397d8:	734a      	strb	r2, [r1, #13]
   397da:	7a5b      	ldrb	r3, [r3, #9]
   397dc:	72cb      	strb	r3, [r1, #11]
   397de:	4770      	bx	lr
   397e0:	f04f 30ff 	mov.w	r0, #4294967295
   397e4:	4770      	bx	lr
   397e6:	bf00      	nop

000397e8 <rpc_gnss_serialize_ephe>:
   397e8:	4603      	mov	r3, r0
   397ea:	2800      	cmp	r0, #0
   397ec:	d04b      	beq.n	39886 <rpc_gnss_serialize_ephe+0x9e>
   397ee:	2900      	cmp	r1, #0
   397f0:	d049      	beq.n	39886 <rpc_gnss_serialize_ephe+0x9e>
   397f2:	2000      	movs	r0, #0
   397f4:	2202      	movs	r2, #2
   397f6:	7048      	strb	r0, [r1, #1]
   397f8:	700a      	strb	r2, [r1, #0]
   397fa:	68da      	ldr	r2, [r3, #12]
   397fc:	2040      	movs	r0, #64	; 0x40
   397fe:	f8c1 200b 	str.w	r2, [r1, #11]
   39802:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   39806:	f8a1 2009 	strh.w	r2, [r1, #9]
   3980a:	f993 2006 	ldrsb.w	r2, [r3, #6]
   3980e:	720a      	strb	r2, [r1, #8]
   39810:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   39814:	878a      	strh	r2, [r1, #60]	; 0x3c
   39816:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   3981a:	86ca      	strh	r2, [r1, #54]	; 0x36
   3981c:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   39820:	874a      	strh	r2, [r1, #58]	; 0x3a
   39822:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   39826:	868a      	strh	r2, [r1, #52]	; 0x34
   39828:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   3982c:	87ca      	strh	r2, [r1, #62]	; 0x3e
   3982e:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   39832:	870a      	strh	r2, [r1, #56]	; 0x38
   39834:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   39838:	830a      	strh	r2, [r1, #24]
   3983a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3983c:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   39840:	7c9a      	ldrb	r2, [r3, #18]
   39842:	744a      	strb	r2, [r1, #17]
   39844:	785a      	ldrb	r2, [r3, #1]
   39846:	70ca      	strb	r2, [r1, #3]
   39848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3984a:	62ca      	str	r2, [r1, #44]	; 0x2c
   3984c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   39850:	84ca      	strh	r2, [r1, #38]	; 0x26
   39852:	885a      	ldrh	r2, [r3, #2]
   39854:	808a      	strh	r2, [r1, #4]
   39856:	6a1a      	ldr	r2, [r3, #32]
   39858:	f8c1 201a 	str.w	r2, [r1, #26]
   3985c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   3985e:	630a      	str	r2, [r1, #48]	; 0x30
   39860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   39862:	f8c1 201e 	str.w	r2, [r1, #30]
   39866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   39868:	628a      	str	r2, [r1, #40]	; 0x28
   3986a:	781a      	ldrb	r2, [r3, #0]
   3986c:	708a      	strb	r2, [r1, #2]
   3986e:	f993 2010 	ldrsb.w	r2, [r3, #16]
   39872:	73ca      	strb	r2, [r1, #15]
   39874:	889a      	ldrh	r2, [r3, #4]
   39876:	80ca      	strh	r2, [r1, #6]
   39878:	8a9a      	ldrh	r2, [r3, #20]
   3987a:	824a      	strh	r2, [r1, #18]
   3987c:	7c5a      	ldrb	r2, [r3, #17]
   3987e:	740a      	strb	r2, [r1, #16]
   39880:	699b      	ldr	r3, [r3, #24]
   39882:	614b      	str	r3, [r1, #20]
   39884:	4770      	bx	lr
   39886:	f04f 30ff 	mov.w	r0, #4294967295
   3988a:	4770      	bx	lr

0003988c <rpc_gnss_serialize_alm>:
   3988c:	4603      	mov	r3, r0
   3988e:	b360      	cbz	r0, 398ea <rpc_gnss_serialize_alm+0x5e>
   39890:	b359      	cbz	r1, 398ea <rpc_gnss_serialize_alm+0x5e>
   39892:	2000      	movs	r0, #0
   39894:	2203      	movs	r2, #3
   39896:	7048      	strb	r0, [r1, #1]
   39898:	700a      	strb	r2, [r1, #0]
   3989a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   3989e:	2021      	movs	r0, #33	; 0x21
   398a0:	f8a1 201d 	strh.w	r2, [r1, #29]
   398a4:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   398a8:	f8a1 201f 	strh.w	r2, [r1, #31]
   398ac:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   398b0:	810a      	strh	r2, [r1, #8]
   398b2:	889a      	ldrh	r2, [r3, #4]
   398b4:	80ca      	strh	r2, [r1, #6]
   398b6:	78da      	ldrb	r2, [r3, #3]
   398b8:	714a      	strb	r2, [r1, #5]
   398ba:	699a      	ldr	r2, [r3, #24]
   398bc:	f8c1 2019 	str.w	r2, [r1, #25]
   398c0:	691a      	ldr	r2, [r3, #16]
   398c2:	f8c1 2011 	str.w	r2, [r1, #17]
   398c6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   398ca:	814a      	strh	r2, [r1, #10]
   398cc:	68da      	ldr	r2, [r3, #12]
   398ce:	f8c1 200d 	str.w	r2, [r1, #13]
   398d2:	7a9a      	ldrb	r2, [r3, #10]
   398d4:	730a      	strb	r2, [r1, #12]
   398d6:	781a      	ldrb	r2, [r3, #0]
   398d8:	708a      	strb	r2, [r1, #2]
   398da:	789a      	ldrb	r2, [r3, #2]
   398dc:	710a      	strb	r2, [r1, #4]
   398de:	695a      	ldr	r2, [r3, #20]
   398e0:	f8c1 2015 	str.w	r2, [r1, #21]
   398e4:	785b      	ldrb	r3, [r3, #1]
   398e6:	70cb      	strb	r3, [r1, #3]
   398e8:	4770      	bx	lr
   398ea:	f04f 30ff 	mov.w	r0, #4294967295
   398ee:	4770      	bx	lr

000398f0 <rpc_gnss_serialize_klob>:
   398f0:	4603      	mov	r3, r0
   398f2:	b1f0      	cbz	r0, 39932 <rpc_gnss_serialize_klob+0x42>
   398f4:	b1e9      	cbz	r1, 39932 <rpc_gnss_serialize_klob+0x42>
   398f6:	2000      	movs	r0, #0
   398f8:	2204      	movs	r2, #4
   398fa:	7048      	strb	r0, [r1, #1]
   398fc:	700a      	strb	r2, [r1, #0]
   398fe:	f993 2000 	ldrsb.w	r2, [r3]
   39902:	200a      	movs	r0, #10
   39904:	708a      	strb	r2, [r1, #2]
   39906:	f993 2001 	ldrsb.w	r2, [r3, #1]
   3990a:	70ca      	strb	r2, [r1, #3]
   3990c:	f993 2002 	ldrsb.w	r2, [r3, #2]
   39910:	710a      	strb	r2, [r1, #4]
   39912:	f993 2003 	ldrsb.w	r2, [r3, #3]
   39916:	714a      	strb	r2, [r1, #5]
   39918:	f993 2004 	ldrsb.w	r2, [r3, #4]
   3991c:	718a      	strb	r2, [r1, #6]
   3991e:	f993 2005 	ldrsb.w	r2, [r3, #5]
   39922:	71ca      	strb	r2, [r1, #7]
   39924:	f993 2006 	ldrsb.w	r2, [r3, #6]
   39928:	720a      	strb	r2, [r1, #8]
   3992a:	f993 3007 	ldrsb.w	r3, [r3, #7]
   3992e:	724b      	strb	r3, [r1, #9]
   39930:	4770      	bx	lr
   39932:	f04f 30ff 	mov.w	r0, #4294967295
   39936:	4770      	bx	lr

00039938 <rpc_gnss_serialize_nequick>:
   39938:	4603      	mov	r3, r0
   3993a:	b198      	cbz	r0, 39964 <rpc_gnss_serialize_nequick+0x2c>
   3993c:	b191      	cbz	r1, 39964 <rpc_gnss_serialize_nequick+0x2c>
   3993e:	2000      	movs	r0, #0
   39940:	2205      	movs	r2, #5
   39942:	7048      	strb	r0, [r1, #1]
   39944:	700a      	strb	r2, [r1, #0]
   39946:	f9b3 2000 	ldrsh.w	r2, [r3]
   3994a:	200a      	movs	r0, #10
   3994c:	804a      	strh	r2, [r1, #2]
   3994e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   39952:	808a      	strh	r2, [r1, #4]
   39954:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   39958:	80ca      	strh	r2, [r1, #6]
   3995a:	799a      	ldrb	r2, [r3, #6]
   3995c:	720a      	strb	r2, [r1, #8]
   3995e:	79db      	ldrb	r3, [r3, #7]
   39960:	724b      	strb	r3, [r1, #9]
   39962:	4770      	bx	lr
   39964:	f04f 30ff 	mov.w	r0, #4294967295
   39968:	4770      	bx	lr
   3996a:	bf00      	nop

0003996c <rpc_gnss_serialize_time_and_sv_tow>:
   3996c:	b310      	cbz	r0, 399b4 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   3996e:	b309      	cbz	r1, 399b4 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   39970:	b470      	push	{r4, r5, r6}
   39972:	2500      	movs	r5, #0
   39974:	2606      	movs	r6, #6
   39976:	460c      	mov	r4, r1
   39978:	704d      	strb	r5, [r1, #1]
   3997a:	700e      	strb	r6, [r1, #0]
   3997c:	462b      	mov	r3, r5
   3997e:	8805      	ldrh	r5, [r0, #0]
   39980:	4602      	mov	r2, r0
   39982:	804d      	strh	r5, [r1, #2]
   39984:	68c5      	ldr	r5, [r0, #12]
   39986:	f8c1 500a 	str.w	r5, [r1, #10]
   3998a:	8905      	ldrh	r5, [r0, #8]
   3998c:	810d      	strh	r5, [r1, #8]
   3998e:	6840      	ldr	r0, [r0, #4]
   39990:	6048      	str	r0, [r1, #4]
   39992:	8a15      	ldrh	r5, [r2, #16]
   39994:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   39998:	4408      	add	r0, r1
   3999a:	81c5      	strh	r5, [r0, #14]
   3999c:	7c90      	ldrb	r0, [r2, #18]
   3999e:	3301      	adds	r3, #1
   399a0:	2b20      	cmp	r3, #32
   399a2:	7420      	strb	r0, [r4, #16]
   399a4:	f102 0204 	add.w	r2, r2, #4
   399a8:	f104 0403 	add.w	r4, r4, #3
   399ac:	d1f1      	bne.n	39992 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   399ae:	206e      	movs	r0, #110	; 0x6e
   399b0:	bc70      	pop	{r4, r5, r6}
   399b2:	4770      	bx	lr
   399b4:	f04f 30ff 	mov.w	r0, #4294967295
   399b8:	4770      	bx	lr
   399ba:	bf00      	nop

000399bc <rpc_gnss_serialize_location>:
   399bc:	4603      	mov	r3, r0
   399be:	b1c8      	cbz	r0, 399f4 <rpc_gnss_serialize_location+0x38>
   399c0:	b1c1      	cbz	r1, 399f4 <rpc_gnss_serialize_location+0x38>
   399c2:	2000      	movs	r0, #0
   399c4:	2207      	movs	r2, #7
   399c6:	7048      	strb	r0, [r1, #1]
   399c8:	700a      	strb	r2, [r1, #0]
   399ca:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   399ce:	2011      	movs	r0, #17
   399d0:	814a      	strh	r2, [r1, #10]
   399d2:	7b9a      	ldrb	r2, [r3, #14]
   399d4:	740a      	strb	r2, [r1, #16]
   399d6:	681a      	ldr	r2, [r3, #0]
   399d8:	f8c1 2002 	str.w	r2, [r1, #2]
   399dc:	685a      	ldr	r2, [r3, #4]
   399de:	f8c1 2006 	str.w	r2, [r1, #6]
   399e2:	7b1a      	ldrb	r2, [r3, #12]
   399e4:	738a      	strb	r2, [r1, #14]
   399e6:	7b5a      	ldrb	r2, [r3, #13]
   399e8:	73ca      	strb	r2, [r1, #15]
   399ea:	7a9a      	ldrb	r2, [r3, #10]
   399ec:	730a      	strb	r2, [r1, #12]
   399ee:	7adb      	ldrb	r3, [r3, #11]
   399f0:	734b      	strb	r3, [r1, #13]
   399f2:	4770      	bx	lr
   399f4:	f04f 30ff 	mov.w	r0, #4294967295
   399f8:	4770      	bx	lr
   399fa:	bf00      	nop

000399fc <rpc_gnss_serialize_integrity>:
   399fc:	b148      	cbz	r0, 39a12 <rpc_gnss_serialize_integrity+0x16>
   399fe:	b141      	cbz	r1, 39a12 <rpc_gnss_serialize_integrity+0x16>
   39a00:	2200      	movs	r2, #0
   39a02:	2308      	movs	r3, #8
   39a04:	704a      	strb	r2, [r1, #1]
   39a06:	700b      	strb	r3, [r1, #0]
   39a08:	6803      	ldr	r3, [r0, #0]
   39a0a:	2006      	movs	r0, #6
   39a0c:	f8c1 3002 	str.w	r3, [r1, #2]
   39a10:	4770      	bx	lr
   39a12:	f04f 30ff 	mov.w	r0, #4294967295
   39a16:	4770      	bx	lr

00039a18 <gnss_client_event_handler>:
   39a18:	f850 1b08 	ldr.w	r1, [r0], #8
   39a1c:	0c09      	lsrs	r1, r1, #16
   39a1e:	f7fc bfc7 	b.w	369b0 <rpc_gnss_event_handler>
   39a22:	bf00      	nop

00039a24 <rpc_gnss_client_init>:
   39a24:	4801      	ldr	r0, [pc, #4]	; (39a2c <rpc_gnss_client_init+0x8>)
   39a26:	f7fc beb1 	b.w	3678c <rpc_client_register>
   39a2a:	bf00      	nop
   39a2c:	00047208 	.word	0x00047208

00039a30 <rpc_gnss_client_deinit>:
   39a30:	2007      	movs	r0, #7
   39a32:	f7fc bf15 	b.w	36860 <rpc_client_unregister>
   39a36:	bf00      	nop

00039a38 <rpc_gnss_client_request_alloc>:
   39a38:	2300      	movs	r3, #0
   39a3a:	b510      	push	{r4, lr}
   39a3c:	b082      	sub	sp, #8
   39a3e:	9301      	str	r3, [sp, #4]
   39a40:	b158      	cbz	r0, 39a5a <rpc_gnss_client_request_alloc+0x22>
   39a42:	4604      	mov	r4, r0
   39a44:	aa01      	add	r2, sp, #4
   39a46:	2007      	movs	r0, #7
   39a48:	f7fc ff60 	bl	3690c <rpc_message_alloc>
   39a4c:	b918      	cbnz	r0, 39a56 <rpc_gnss_client_request_alloc+0x1e>
   39a4e:	9b01      	ldr	r3, [sp, #4]
   39a50:	b10b      	cbz	r3, 39a56 <rpc_gnss_client_request_alloc+0x1e>
   39a52:	3308      	adds	r3, #8
   39a54:	6023      	str	r3, [r4, #0]
   39a56:	b002      	add	sp, #8
   39a58:	bd10      	pop	{r4, pc}
   39a5a:	2007      	movs	r0, #7
   39a5c:	b002      	add	sp, #8
   39a5e:	bd10      	pop	{r4, pc}

00039a60 <rpc_gnss_client_request_send>:
   39a60:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   39a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   39a68:	d10b      	bne.n	39a82 <rpc_gnss_client_request_send+0x22>
   39a6a:	b160      	cbz	r0, 39a86 <rpc_gnss_client_request_send+0x26>
   39a6c:	4603      	mov	r3, r0
   39a6e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   39a72:	2007      	movs	r0, #7
   39a74:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   39a78:	f843 1d08 	str.w	r1, [r3, #-8]!
   39a7c:	4619      	mov	r1, r3
   39a7e:	f7fc bf35 	b.w	368ec <rpc_message_send>
   39a82:	200f      	movs	r0, #15
   39a84:	4770      	bx	lr
   39a86:	2007      	movs	r0, #7
   39a88:	4770      	bx	lr
   39a8a:	bf00      	nop

00039a8c <rpc_gnss_client_message_free>:
   39a8c:	b120      	cbz	r0, 39a98 <rpc_gnss_client_message_free+0xc>
   39a8e:	f1a0 0108 	sub.w	r1, r0, #8
   39a92:	2007      	movs	r0, #7
   39a94:	f7fc bf66 	b.w	36964 <rpc_message_free>
   39a98:	2007      	movs	r0, #7
   39a9a:	4770      	bx	lr

00039a9c <rpc_gnss_client_data_free>:
   39a9c:	b118      	cbz	r0, 39aa6 <rpc_gnss_client_data_free+0xa>
   39a9e:	4601      	mov	r1, r0
   39aa0:	2007      	movs	r0, #7
   39aa2:	f7fc bf6b 	b.w	3697c <rpc_message_data_free>
   39aa6:	2007      	movs	r0, #7
   39aa8:	4770      	bx	lr
   39aaa:	bf00      	nop

00039aac <datagram_handler_init>:
   39aac:	b510      	push	{r4, lr}
   39aae:	4604      	mov	r4, r0
   39ab0:	200c      	movs	r0, #12
   39ab2:	f000 fdd7 	bl	3a664 <nrf_malloc>
   39ab6:	60e0      	str	r0, [r4, #12]
   39ab8:	b118      	cbz	r0, 39ac2 <datagram_handler_init+0x16>
   39aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39abe:	f7ff bd15 	b.w	394ec <linked_list_init>
   39ac2:	2004      	movs	r0, #4
   39ac4:	bd10      	pop	{r4, pc}
   39ac6:	bf00      	nop

00039ac8 <datagram_handler_put>:
   39ac8:	b570      	push	{r4, r5, r6, lr}
   39aca:	4606      	mov	r6, r0
   39acc:	2014      	movs	r0, #20
   39ace:	460d      	mov	r5, r1
   39ad0:	f000 fdc8 	bl	3a664 <nrf_malloc>
   39ad4:	b178      	cbz	r0, 39af6 <datagram_handler_put+0x2e>
   39ad6:	682b      	ldr	r3, [r5, #0]
   39ad8:	4604      	mov	r4, r0
   39ada:	6043      	str	r3, [r0, #4]
   39adc:	686b      	ldr	r3, [r5, #4]
   39ade:	4601      	mov	r1, r0
   39ae0:	6083      	str	r3, [r0, #8]
   39ae2:	68eb      	ldr	r3, [r5, #12]
   39ae4:	60c3      	str	r3, [r0, #12]
   39ae6:	68ab      	ldr	r3, [r5, #8]
   39ae8:	6103      	str	r3, [r0, #16]
   39aea:	68f0      	ldr	r0, [r6, #12]
   39aec:	f7ff fd08 	bl	39500 <linked_list_push>
   39af0:	b920      	cbnz	r0, 39afc <datagram_handler_put+0x34>
   39af2:	6868      	ldr	r0, [r5, #4]
   39af4:	bd70      	pop	{r4, r5, r6, pc}
   39af6:	f04f 30ff 	mov.w	r0, #4294967295
   39afa:	bd70      	pop	{r4, r5, r6, pc}
   39afc:	4620      	mov	r0, r4
   39afe:	f000 fdbb 	bl	3a678 <nrf_free>
   39b02:	f04f 30ff 	mov.w	r0, #4294967295
   39b06:	bd70      	pop	{r4, r5, r6, pc}

00039b08 <datagram_handler_get>:
   39b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39b0c:	4607      	mov	r7, r0
   39b0e:	b084      	sub	sp, #16
   39b10:	68c0      	ldr	r0, [r0, #12]
   39b12:	460c      	mov	r4, r1
   39b14:	4616      	mov	r6, r2
   39b16:	f7ff fd13 	bl	39540 <linked_list_peek>
   39b1a:	2800      	cmp	r0, #0
   39b1c:	d03b      	beq.n	39b96 <datagram_handler_get+0x8e>
   39b1e:	6882      	ldr	r2, [r0, #8]
   39b20:	4605      	mov	r5, r0
   39b22:	e9d4 0300 	ldrd	r0, r3, [r4]
   39b26:	429a      	cmp	r2, r3
   39b28:	bf28      	it	cs
   39b2a:	461a      	movcs	r2, r3
   39b2c:	6062      	str	r2, [r4, #4]
   39b2e:	b110      	cbz	r0, 39b36 <datagram_handler_get+0x2e>
   39b30:	6869      	ldr	r1, [r5, #4]
   39b32:	f00b f8d8 	bl	44ce6 <memcpy>
   39b36:	68a0      	ldr	r0, [r4, #8]
   39b38:	b118      	cbz	r0, 39b42 <datagram_handler_get+0x3a>
   39b3a:	692b      	ldr	r3, [r5, #16]
   39b3c:	b10b      	cbz	r3, 39b42 <datagram_handler_get+0x3a>
   39b3e:	68ea      	ldr	r2, [r5, #12]
   39b40:	bb02      	cbnz	r2, 39b84 <datagram_handler_get+0x7c>
   39b42:	2300      	movs	r3, #0
   39b44:	60e3      	str	r3, [r4, #12]
   39b46:	0732      	lsls	r2, r6, #28
   39b48:	d506      	bpl.n	39b58 <datagram_handler_get+0x50>
   39b4a:	06b3      	lsls	r3, r6, #26
   39b4c:	bf4c      	ite	mi
   39b4e:	68a8      	ldrmi	r0, [r5, #8]
   39b50:	6860      	ldrpl	r0, [r4, #4]
   39b52:	b004      	add	sp, #16
   39b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39b58:	68f8      	ldr	r0, [r7, #12]
   39b5a:	f7ff fce7 	bl	3952c <linked_list_pop>
   39b5e:	4680      	mov	r8, r0
   39b60:	2800      	cmp	r0, #0
   39b62:	d0f2      	beq.n	39b4a <datagram_handler_get+0x42>
   39b64:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   39b68:	6902      	ldr	r2, [r0, #16]
   39b6a:	9300      	str	r3, [sp, #0]
   39b6c:	68c3      	ldr	r3, [r0, #12]
   39b6e:	e9cd 1201 	strd	r1, r2, [sp, #4]
   39b72:	9303      	str	r3, [sp, #12]
   39b74:	4668      	mov	r0, sp
   39b76:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   39b7a:	4798      	blx	r3
   39b7c:	4640      	mov	r0, r8
   39b7e:	f000 fd7b 	bl	3a678 <nrf_free>
   39b82:	e7e2      	b.n	39b4a <datagram_handler_get+0x42>
   39b84:	68e3      	ldr	r3, [r4, #12]
   39b86:	429a      	cmp	r2, r3
   39b88:	bf28      	it	cs
   39b8a:	461a      	movcs	r2, r3
   39b8c:	60e2      	str	r2, [r4, #12]
   39b8e:	6929      	ldr	r1, [r5, #16]
   39b90:	f00b f8a9 	bl	44ce6 <memcpy>
   39b94:	e7d7      	b.n	39b46 <datagram_handler_get+0x3e>
   39b96:	f04f 30ff 	mov.w	r0, #4294967295
   39b9a:	e7da      	b.n	39b52 <datagram_handler_get+0x4a>

00039b9c <datagram_handler_available>:
   39b9c:	b508      	push	{r3, lr}
   39b9e:	68c0      	ldr	r0, [r0, #12]
   39ba0:	f7ff fcce 	bl	39540 <linked_list_peek>
   39ba4:	b108      	cbz	r0, 39baa <datagram_handler_available+0xe>
   39ba6:	6880      	ldr	r0, [r0, #8]
   39ba8:	bd08      	pop	{r3, pc}
   39baa:	f04f 30ff 	mov.w	r0, #4294967295
   39bae:	bd08      	pop	{r3, pc}

00039bb0 <datagram_handler_flush>:
   39bb0:	b530      	push	{r4, r5, lr}
   39bb2:	4605      	mov	r5, r0
   39bb4:	68c0      	ldr	r0, [r0, #12]
   39bb6:	b085      	sub	sp, #20
   39bb8:	b9a8      	cbnz	r0, 39be6 <datagram_handler_flush+0x36>
   39bba:	e01a      	b.n	39bf2 <datagram_handler_flush+0x42>
   39bbc:	68e8      	ldr	r0, [r5, #12]
   39bbe:	f7ff fcb5 	bl	3952c <linked_list_pop>
   39bc2:	4604      	mov	r4, r0
   39bc4:	b170      	cbz	r0, 39be4 <datagram_handler_flush+0x34>
   39bc6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   39bca:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   39bce:	e9cd 0100 	strd	r0, r1, [sp]
   39bd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   39bd6:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   39bda:	4668      	mov	r0, sp
   39bdc:	4798      	blx	r3
   39bde:	4620      	mov	r0, r4
   39be0:	f000 fd4a 	bl	3a678 <nrf_free>
   39be4:	68e8      	ldr	r0, [r5, #12]
   39be6:	f7ff fcb1 	bl	3954c <linked_list_size_get>
   39bea:	2800      	cmp	r0, #0
   39bec:	d1e6      	bne.n	39bbc <datagram_handler_flush+0xc>
   39bee:	b005      	add	sp, #20
   39bf0:	bd30      	pop	{r4, r5, pc}
   39bf2:	2008      	movs	r0, #8
   39bf4:	b005      	add	sp, #20
   39bf6:	bd30      	pop	{r4, r5, pc}

00039bf8 <datagram_handler_free>:
   39bf8:	b530      	push	{r4, r5, lr}
   39bfa:	4605      	mov	r5, r0
   39bfc:	68c0      	ldr	r0, [r0, #12]
   39bfe:	b085      	sub	sp, #20
   39c00:	b9a0      	cbnz	r0, 39c2c <datagram_handler_free+0x34>
   39c02:	e01c      	b.n	39c3e <datagram_handler_free+0x46>
   39c04:	f7ff fc92 	bl	3952c <linked_list_pop>
   39c08:	4604      	mov	r4, r0
   39c0a:	b170      	cbz	r0, 39c2a <datagram_handler_free+0x32>
   39c0c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   39c10:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   39c14:	e9cd 0100 	strd	r0, r1, [sp]
   39c18:	e9cd 2302 	strd	r2, r3, [sp, #8]
   39c1c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   39c20:	4668      	mov	r0, sp
   39c22:	4798      	blx	r3
   39c24:	4620      	mov	r0, r4
   39c26:	f000 fd27 	bl	3a678 <nrf_free>
   39c2a:	68e8      	ldr	r0, [r5, #12]
   39c2c:	f7ff fc8e 	bl	3954c <linked_list_size_get>
   39c30:	4604      	mov	r4, r0
   39c32:	68e8      	ldr	r0, [r5, #12]
   39c34:	2c00      	cmp	r4, #0
   39c36:	d1e5      	bne.n	39c04 <datagram_handler_free+0xc>
   39c38:	f000 fd1e 	bl	3a678 <nrf_free>
   39c3c:	60ec      	str	r4, [r5, #12]
   39c3e:	b005      	add	sp, #20
   39c40:	bd30      	pop	{r4, r5, pc}
   39c42:	bf00      	nop

00039c44 <null_handler_init>:
   39c44:	2000      	movs	r0, #0
   39c46:	4770      	bx	lr

00039c48 <null_handler_put>:
   39c48:	b510      	push	{r4, lr}
   39c4a:	460c      	mov	r4, r1
   39c4c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   39c50:	4620      	mov	r0, r4
   39c52:	4798      	blx	r3
   39c54:	6860      	ldr	r0, [r4, #4]
   39c56:	bd10      	pop	{r4, pc}

00039c58 <null_handler_get>:
   39c58:	f04f 30ff 	mov.w	r0, #4294967295
   39c5c:	4770      	bx	lr
   39c5e:	bf00      	nop

00039c60 <null_handler_available>:
   39c60:	f04f 30ff 	mov.w	r0, #4294967295
   39c64:	4770      	bx	lr
   39c66:	bf00      	nop

00039c68 <null_handler_flush>:
   39c68:	2000      	movs	r0, #0
   39c6a:	4770      	bx	lr

00039c6c <null_handler_free>:
   39c6c:	4770      	bx	lr
   39c6e:	bf00      	nop

00039c70 <packet_handler_create>:
   39c70:	2801      	cmp	r0, #1
   39c72:	b538      	push	{r3, r4, r5, lr}
   39c74:	460d      	mov	r5, r1
   39c76:	4614      	mov	r4, r2
   39c78:	d00d      	beq.n	39c96 <packet_handler_create+0x26>
   39c7a:	db11      	blt.n	39ca0 <packet_handler_create+0x30>
   39c7c:	2803      	cmp	r0, #3
   39c7e:	dc0f      	bgt.n	39ca0 <packet_handler_create+0x30>
   39c80:	2010      	movs	r0, #16
   39c82:	f000 fcef 	bl	3a664 <nrf_malloc>
   39c86:	2218      	movs	r2, #24
   39c88:	b120      	cbz	r0, 39c94 <packet_handler_create+0x24>
   39c8a:	4b08      	ldr	r3, [pc, #32]	; (39cac <packet_handler_create+0x3c>)
   39c8c:	6045      	str	r5, [r0, #4]
   39c8e:	4413      	add	r3, r2
   39c90:	6084      	str	r4, [r0, #8]
   39c92:	6003      	str	r3, [r0, #0]
   39c94:	bd38      	pop	{r3, r4, r5, pc}
   39c96:	2014      	movs	r0, #20
   39c98:	f000 fce4 	bl	3a664 <nrf_malloc>
   39c9c:	2230      	movs	r2, #48	; 0x30
   39c9e:	e7f3      	b.n	39c88 <packet_handler_create+0x18>
   39ca0:	200c      	movs	r0, #12
   39ca2:	f000 fcdf 	bl	3a664 <nrf_malloc>
   39ca6:	2200      	movs	r2, #0
   39ca8:	e7ee      	b.n	39c88 <packet_handler_create+0x18>
   39caa:	bf00      	nop
   39cac:	00047218 	.word	0x00047218

00039cb0 <packet_handler_delete>:
   39cb0:	b510      	push	{r4, lr}
   39cb2:	4604      	mov	r4, r0
   39cb4:	6803      	ldr	r3, [r0, #0]
   39cb6:	691b      	ldr	r3, [r3, #16]
   39cb8:	4798      	blx	r3
   39cba:	6823      	ldr	r3, [r4, #0]
   39cbc:	4620      	mov	r0, r4
   39cbe:	695b      	ldr	r3, [r3, #20]
   39cc0:	4798      	blx	r3
   39cc2:	4620      	mov	r0, r4
   39cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39cc8:	f000 bcd6 	b.w	3a678 <nrf_free>

00039ccc <stream_handler_init>:
   39ccc:	b510      	push	{r4, lr}
   39cce:	4604      	mov	r4, r0
   39cd0:	200c      	movs	r0, #12
   39cd2:	f000 fcc7 	bl	3a664 <nrf_malloc>
   39cd6:	60e0      	str	r0, [r4, #12]
   39cd8:	b128      	cbz	r0, 39ce6 <stream_handler_init+0x1a>
   39cda:	2300      	movs	r3, #0
   39cdc:	6123      	str	r3, [r4, #16]
   39cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39ce2:	f7ff bc03 	b.w	394ec <linked_list_init>
   39ce6:	2004      	movs	r0, #4
   39ce8:	bd10      	pop	{r4, pc}
   39cea:	bf00      	nop

00039cec <stream_handler_put>:
   39cec:	b570      	push	{r4, r5, r6, lr}
   39cee:	4606      	mov	r6, r0
   39cf0:	2014      	movs	r0, #20
   39cf2:	460d      	mov	r5, r1
   39cf4:	f000 fcb6 	bl	3a664 <nrf_malloc>
   39cf8:	b178      	cbz	r0, 39d1a <stream_handler_put+0x2e>
   39cfa:	682b      	ldr	r3, [r5, #0]
   39cfc:	4604      	mov	r4, r0
   39cfe:	6043      	str	r3, [r0, #4]
   39d00:	686b      	ldr	r3, [r5, #4]
   39d02:	4601      	mov	r1, r0
   39d04:	6083      	str	r3, [r0, #8]
   39d06:	68eb      	ldr	r3, [r5, #12]
   39d08:	60c3      	str	r3, [r0, #12]
   39d0a:	68ab      	ldr	r3, [r5, #8]
   39d0c:	6103      	str	r3, [r0, #16]
   39d0e:	68f0      	ldr	r0, [r6, #12]
   39d10:	f7ff fbf6 	bl	39500 <linked_list_push>
   39d14:	b920      	cbnz	r0, 39d20 <stream_handler_put+0x34>
   39d16:	6868      	ldr	r0, [r5, #4]
   39d18:	bd70      	pop	{r4, r5, r6, pc}
   39d1a:	f04f 30ff 	mov.w	r0, #4294967295
   39d1e:	bd70      	pop	{r4, r5, r6, pc}
   39d20:	4620      	mov	r0, r4
   39d22:	f000 fca9 	bl	3a678 <nrf_free>
   39d26:	f04f 30ff 	mov.w	r0, #4294967295
   39d2a:	bd70      	pop	{r4, r5, r6, pc}

00039d2c <stream_handler_get>:
   39d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39d30:	4682      	mov	sl, r0
   39d32:	b089      	sub	sp, #36	; 0x24
   39d34:	68c0      	ldr	r0, [r0, #12]
   39d36:	4689      	mov	r9, r1
   39d38:	4693      	mov	fp, r2
   39d3a:	f7ff fc01 	bl	39540 <linked_list_peek>
   39d3e:	2800      	cmp	r0, #0
   39d40:	d071      	beq.n	39e26 <stream_handler_get+0xfa>
   39d42:	4605      	mov	r5, r0
   39d44:	f8d9 0008 	ldr.w	r0, [r9, #8]
   39d48:	b120      	cbz	r0, 39d54 <stream_handler_get+0x28>
   39d4a:	692b      	ldr	r3, [r5, #16]
   39d4c:	b113      	cbz	r3, 39d54 <stream_handler_get+0x28>
   39d4e:	68ea      	ldr	r2, [r5, #12]
   39d50:	2a00      	cmp	r2, #0
   39d52:	d15d      	bne.n	39e10 <stream_handler_get+0xe4>
   39d54:	2300      	movs	r3, #0
   39d56:	f8c9 300c 	str.w	r3, [r9, #12]
   39d5a:	f8d9 2000 	ldr.w	r2, [r9]
   39d5e:	f8d9 8004 	ldr.w	r8, [r9, #4]
   39d62:	f8da 1010 	ldr.w	r1, [sl, #16]
   39d66:	9203      	str	r2, [sp, #12]
   39d68:	f1b8 0f00 	cmp.w	r8, #0
   39d6c:	d030      	beq.n	39dd0 <stream_handler_get+0xa4>
   39d6e:	2400      	movs	r4, #0
   39d70:	f00b 0320 	and.w	r3, fp, #32
   39d74:	9301      	str	r3, [sp, #4]
   39d76:	f00b 0b08 	and.w	fp, fp, #8
   39d7a:	68ae      	ldr	r6, [r5, #8]
   39d7c:	eba8 0304 	sub.w	r3, r8, r4
   39d80:	1a76      	subs	r6, r6, r1
   39d82:	429e      	cmp	r6, r3
   39d84:	4637      	mov	r7, r6
   39d86:	bf28      	it	cs
   39d88:	461f      	movcs	r7, r3
   39d8a:	b10a      	cbz	r2, 39d90 <stream_handler_get+0x64>
   39d8c:	9a01      	ldr	r2, [sp, #4]
   39d8e:	b1aa      	cbz	r2, 39dbc <stream_handler_get+0x90>
   39d90:	f1bb 0f00 	cmp.w	fp, #0
   39d94:	d106      	bne.n	39da4 <stream_handler_get+0x78>
   39d96:	429e      	cmp	r6, r3
   39d98:	d921      	bls.n	39dde <stream_handler_get+0xb2>
   39d9a:	f8da 3010 	ldr.w	r3, [sl, #16]
   39d9e:	443b      	add	r3, r7
   39da0:	f8ca 3010 	str.w	r3, [sl, #16]
   39da4:	4628      	mov	r0, r5
   39da6:	f7ff fbd3 	bl	39550 <linked_list_get_next>
   39daa:	443c      	add	r4, r7
   39dac:	4605      	mov	r5, r0
   39dae:	b180      	cbz	r0, 39dd2 <stream_handler_get+0xa6>
   39db0:	45a0      	cmp	r8, r4
   39db2:	d90e      	bls.n	39dd2 <stream_handler_get+0xa6>
   39db4:	f8d9 2000 	ldr.w	r2, [r9]
   39db8:	2100      	movs	r1, #0
   39dba:	e7de      	b.n	39d7a <stream_handler_get+0x4e>
   39dbc:	6868      	ldr	r0, [r5, #4]
   39dbe:	9302      	str	r3, [sp, #8]
   39dc0:	9b03      	ldr	r3, [sp, #12]
   39dc2:	4401      	add	r1, r0
   39dc4:	463a      	mov	r2, r7
   39dc6:	1918      	adds	r0, r3, r4
   39dc8:	f00a ff8d 	bl	44ce6 <memcpy>
   39dcc:	9b02      	ldr	r3, [sp, #8]
   39dce:	e7df      	b.n	39d90 <stream_handler_get+0x64>
   39dd0:	4644      	mov	r4, r8
   39dd2:	4620      	mov	r0, r4
   39dd4:	f8c9 4004 	str.w	r4, [r9, #4]
   39dd8:	b009      	add	sp, #36	; 0x24
   39dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39dde:	f8da 000c 	ldr.w	r0, [sl, #12]
   39de2:	f7ff fba3 	bl	3952c <linked_list_pop>
   39de6:	4606      	mov	r6, r0
   39de8:	b170      	cbz	r0, 39e08 <stream_handler_get+0xdc>
   39dea:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   39dee:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   39df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   39df6:	e9cd 1006 	strd	r1, r0, [sp, #24]
   39dfa:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   39dfe:	a804      	add	r0, sp, #16
   39e00:	4798      	blx	r3
   39e02:	4630      	mov	r0, r6
   39e04:	f000 fc38 	bl	3a678 <nrf_free>
   39e08:	2300      	movs	r3, #0
   39e0a:	f8ca 3010 	str.w	r3, [sl, #16]
   39e0e:	e7c9      	b.n	39da4 <stream_handler_get+0x78>
   39e10:	f8d9 300c 	ldr.w	r3, [r9, #12]
   39e14:	429a      	cmp	r2, r3
   39e16:	bf28      	it	cs
   39e18:	461a      	movcs	r2, r3
   39e1a:	f8c9 200c 	str.w	r2, [r9, #12]
   39e1e:	6929      	ldr	r1, [r5, #16]
   39e20:	f00a ff61 	bl	44ce6 <memcpy>
   39e24:	e799      	b.n	39d5a <stream_handler_get+0x2e>
   39e26:	f04f 30ff 	mov.w	r0, #4294967295
   39e2a:	e7d5      	b.n	39dd8 <stream_handler_get+0xac>

00039e2c <stream_handler_available>:
   39e2c:	b510      	push	{r4, lr}
   39e2e:	4604      	mov	r4, r0
   39e30:	68c0      	ldr	r0, [r0, #12]
   39e32:	f7ff fb85 	bl	39540 <linked_list_peek>
   39e36:	b150      	cbz	r0, 39e4e <stream_handler_available+0x22>
   39e38:	6924      	ldr	r4, [r4, #16]
   39e3a:	4264      	negs	r4, r4
   39e3c:	6883      	ldr	r3, [r0, #8]
   39e3e:	441c      	add	r4, r3
   39e40:	f7ff fb86 	bl	39550 <linked_list_get_next>
   39e44:	2800      	cmp	r0, #0
   39e46:	d1f9      	bne.n	39e3c <stream_handler_available+0x10>
   39e48:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   39e4c:	bd10      	pop	{r4, pc}
   39e4e:	f04f 30ff 	mov.w	r0, #4294967295
   39e52:	bd10      	pop	{r4, pc}

00039e54 <stream_handler_flush>:
   39e54:	b530      	push	{r4, r5, lr}
   39e56:	4605      	mov	r5, r0
   39e58:	68c0      	ldr	r0, [r0, #12]
   39e5a:	b085      	sub	sp, #20
   39e5c:	b9a8      	cbnz	r0, 39e8a <stream_handler_flush+0x36>
   39e5e:	e01a      	b.n	39e96 <stream_handler_flush+0x42>
   39e60:	68e8      	ldr	r0, [r5, #12]
   39e62:	f7ff fb63 	bl	3952c <linked_list_pop>
   39e66:	4604      	mov	r4, r0
   39e68:	b170      	cbz	r0, 39e88 <stream_handler_flush+0x34>
   39e6a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   39e6e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   39e72:	e9cd 0100 	strd	r0, r1, [sp]
   39e76:	e9cd 2302 	strd	r2, r3, [sp, #8]
   39e7a:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   39e7e:	4668      	mov	r0, sp
   39e80:	4798      	blx	r3
   39e82:	4620      	mov	r0, r4
   39e84:	f000 fbf8 	bl	3a678 <nrf_free>
   39e88:	68e8      	ldr	r0, [r5, #12]
   39e8a:	f7ff fb5f 	bl	3954c <linked_list_size_get>
   39e8e:	2800      	cmp	r0, #0
   39e90:	d1e6      	bne.n	39e60 <stream_handler_flush+0xc>
   39e92:	b005      	add	sp, #20
   39e94:	bd30      	pop	{r4, r5, pc}
   39e96:	2008      	movs	r0, #8
   39e98:	b005      	add	sp, #20
   39e9a:	bd30      	pop	{r4, r5, pc}

00039e9c <stream_handler_free>:
   39e9c:	b530      	push	{r4, r5, lr}
   39e9e:	4605      	mov	r5, r0
   39ea0:	68c0      	ldr	r0, [r0, #12]
   39ea2:	b085      	sub	sp, #20
   39ea4:	b9a0      	cbnz	r0, 39ed0 <stream_handler_free+0x34>
   39ea6:	e01c      	b.n	39ee2 <stream_handler_free+0x46>
   39ea8:	f7ff fb40 	bl	3952c <linked_list_pop>
   39eac:	4604      	mov	r4, r0
   39eae:	b170      	cbz	r0, 39ece <stream_handler_free+0x32>
   39eb0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   39eb4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   39eb8:	e9cd 0100 	strd	r0, r1, [sp]
   39ebc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   39ec0:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   39ec4:	4668      	mov	r0, sp
   39ec6:	4798      	blx	r3
   39ec8:	4620      	mov	r0, r4
   39eca:	f000 fbd5 	bl	3a678 <nrf_free>
   39ece:	68e8      	ldr	r0, [r5, #12]
   39ed0:	f7ff fb3c 	bl	3954c <linked_list_size_get>
   39ed4:	4604      	mov	r4, r0
   39ed6:	68e8      	ldr	r0, [r5, #12]
   39ed8:	2c00      	cmp	r4, #0
   39eda:	d1e5      	bne.n	39ea8 <stream_handler_free+0xc>
   39edc:	f000 fbcc 	bl	3a678 <nrf_free>
   39ee0:	60ec      	str	r4, [r5, #12]
   39ee2:	b005      	add	sp, #20
   39ee4:	bd30      	pop	{r4, r5, pc}
   39ee6:	bf00      	nop

00039ee8 <mem_free>:
   39ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39eec:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 39fbc <mem_free+0xd4>
   39ef0:	b083      	sub	sp, #12
   39ef2:	9000      	str	r0, [sp, #0]
   39ef4:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   39ef8:	f8dc 3008 	ldr.w	r3, [ip, #8]
   39efc:	b12b      	cbz	r3, 39f0a <mem_free+0x22>
   39efe:	f8dc 2000 	ldr.w	r2, [ip]
   39f02:	9c00      	ldr	r4, [sp, #0]
   39f04:	7810      	ldrb	r0, [r2, #0]
   39f06:	42a0      	cmp	r0, r4
   39f08:	d006      	beq.n	39f18 <mem_free+0x30>
   39f0a:	f10c 0c0c 	add.w	ip, ip, #12
   39f0e:	45e3      	cmp	fp, ip
   39f10:	d1f2      	bne.n	39ef8 <mem_free+0x10>
   39f12:	b003      	add	sp, #12
   39f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f18:	f8dc a004 	ldr.w	sl, [ip, #4]
   39f1c:	eb03 080a 	add.w	r8, r3, sl
   39f20:	45c2      	cmp	sl, r8
   39f22:	d2f2      	bcs.n	39f0a <mem_free+0x22>
   39f24:	6853      	ldr	r3, [r2, #4]
   39f26:	f8cd c004 	str.w	ip, [sp, #4]
   39f2a:	46d6      	mov	lr, sl
   39f2c:	469c      	mov	ip, r3
   39f2e:	f8d2 9010 	ldr.w	r9, [r2, #16]
   39f32:	8997      	ldrh	r7, [r2, #12]
   39f34:	ebae 000a 	sub.w	r0, lr, sl
   39f38:	b3df      	cbz	r7, 39fb2 <mem_free+0xca>
   39f3a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   39f3e:	4290      	cmp	r0, r2
   39f40:	d31c      	bcc.n	39f7c <mem_free+0x94>
   39f42:	4665      	mov	r5, ip
   39f44:	2400      	movs	r4, #0
   39f46:	f109 0304 	add.w	r3, r9, #4
   39f4a:	e003      	b.n	39f54 <mem_free+0x6c>
   39f4c:	885a      	ldrh	r2, [r3, #2]
   39f4e:	3304      	adds	r3, #4
   39f50:	4282      	cmp	r2, r0
   39f52:	d815      	bhi.n	39f80 <mem_free+0x98>
   39f54:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   39f58:	3401      	adds	r4, #1
   39f5a:	42a7      	cmp	r7, r4
   39f5c:	fb02 5506 	mla	r5, r2, r6, r5
   39f60:	eba0 0002 	sub.w	r0, r0, r2
   39f64:	461e      	mov	r6, r3
   39f66:	d1f1      	bne.n	39f4c <mem_free+0x64>
   39f68:	2000      	movs	r0, #0
   39f6a:	4281      	cmp	r1, r0
   39f6c:	d00d      	beq.n	39f8a <mem_free+0xa2>
   39f6e:	f10e 0e01 	add.w	lr, lr, #1
   39f72:	45f0      	cmp	r8, lr
   39f74:	d1de      	bne.n	39f34 <mem_free+0x4c>
   39f76:	f8dd c004 	ldr.w	ip, [sp, #4]
   39f7a:	e7c6      	b.n	39f0a <mem_free+0x22>
   39f7c:	4665      	mov	r5, ip
   39f7e:	464e      	mov	r6, r9
   39f80:	8833      	ldrh	r3, [r6, #0]
   39f82:	fb00 5003 	mla	r0, r0, r3, r5
   39f86:	4281      	cmp	r1, r0
   39f88:	d1f1      	bne.n	39f6e <mem_free+0x86>
   39f8a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   39f8e:	f8dd c004 	ldr.w	ip, [sp, #4]
   39f92:	d0ba      	beq.n	39f0a <mem_free+0x22>
   39f94:	2301      	movs	r3, #1
   39f96:	4a08      	ldr	r2, [pc, #32]	; (39fb8 <mem_free+0xd0>)
   39f98:	ea4f 115e 	mov.w	r1, lr, lsr #5
   39f9c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   39fa0:	f00e 0e1f 	and.w	lr, lr, #31
   39fa4:	fa03 fe0e 	lsl.w	lr, r3, lr
   39fa8:	ea4e 0000 	orr.w	r0, lr, r0
   39fac:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   39fb0:	e7af      	b.n	39f12 <mem_free+0x2a>
   39fb2:	4638      	mov	r0, r7
   39fb4:	e7d9      	b.n	39f6a <mem_free+0x82>
   39fb6:	bf00      	nop
   39fb8:	20025b94 	.word	0x20025b94
   39fbc:	20025bd8 	.word	0x20025bd8

00039fc0 <mem_alloc.constprop.5>:
   39fc0:	2800      	cmp	r0, #0
   39fc2:	d050      	beq.n	3a066 <mem_alloc.constprop.5+0xa6>
   39fc4:	4b6d      	ldr	r3, [pc, #436]	; (3a17c <mem_alloc.constprop.5+0x1bc>)
   39fc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   39fca:	4290      	cmp	r0, r2
   39fcc:	d84b      	bhi.n	3a066 <mem_alloc.constprop.5+0xa6>
   39fce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39fd2:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   39fd6:	b083      	sub	sp, #12
   39fd8:	f1bb 0f00 	cmp.w	fp, #0
   39fdc:	d054      	beq.n	3a088 <mem_alloc.constprop.5+0xc8>
   39fde:	f10b 32ff 	add.w	r2, fp, #4294967295
   39fe2:	4691      	mov	r9, r2
   39fe4:	2600      	movs	r6, #0
   39fe6:	f04f 0812 	mov.w	r8, #18
   39fea:	4f65      	ldr	r7, [pc, #404]	; (3a180 <mem_alloc.constprop.5+0x1c0>)
   39fec:	9201      	str	r2, [sp, #4]
   39fee:	f10b 0e11 	add.w	lr, fp, #17
   39ff2:	eb06 0209 	add.w	r2, r6, r9
   39ff6:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   39ffa:	3201      	adds	r2, #1
   39ffc:	0852      	lsrs	r2, r2, #1
   39ffe:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   3a002:	f102 0112 	add.w	r1, r2, #18
   3a006:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   3a00a:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   3a00e:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   3a012:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   3a016:	f8dc c004 	ldr.w	ip, [ip, #4]
   3a01a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3a01e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   3a022:	f8da a010 	ldr.w	sl, [sl, #16]
   3a026:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   3a02a:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   3a02e:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   3a032:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   3a036:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   3a03a:	6849      	ldr	r1, [r1, #4]
   3a03c:	692d      	ldr	r5, [r5, #16]
   3a03e:	6924      	ldr	r4, [r4, #16]
   3a040:	f8dc c004 	ldr.w	ip, [ip, #4]
   3a044:	4550      	cmp	r0, sl
   3a046:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   3a04a:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   3a04e:	d915      	bls.n	3a07c <mem_alloc.constprop.5+0xbc>
   3a050:	4288      	cmp	r0, r1
   3a052:	d211      	bcs.n	3a078 <mem_alloc.constprop.5+0xb8>
   3a054:	42a8      	cmp	r0, r5
   3a056:	d908      	bls.n	3a06a <mem_alloc.constprop.5+0xaa>
   3a058:	1c56      	adds	r6, r2, #1
   3a05a:	45b1      	cmp	r9, r6
   3a05c:	f0c0 8087 	bcc.w	3a16e <mem_alloc.constprop.5+0x1ae>
   3a060:	f102 0813 	add.w	r8, r2, #19
   3a064:	e7c5      	b.n	39ff2 <mem_alloc.constprop.5+0x32>
   3a066:	2000      	movs	r0, #0
   3a068:	4770      	bx	lr
   3a06a:	f102 39ff 	add.w	r9, r2, #4294967295
   3a06e:	454e      	cmp	r6, r9
   3a070:	d87d      	bhi.n	3a16e <mem_alloc.constprop.5+0x1ae>
   3a072:	f102 0e11 	add.w	lr, r2, #17
   3a076:	e7bc      	b.n	39ff2 <mem_alloc.constprop.5+0x32>
   3a078:	f109 0601 	add.w	r6, r9, #1
   3a07c:	45b3      	cmp	fp, r6
   3a07e:	d007      	beq.n	3a090 <mem_alloc.constprop.5+0xd0>
   3a080:	2e10      	cmp	r6, #16
   3a082:	d001      	beq.n	3a088 <mem_alloc.constprop.5+0xc8>
   3a084:	45b3      	cmp	fp, r6
   3a086:	d808      	bhi.n	3a09a <mem_alloc.constprop.5+0xda>
   3a088:	2000      	movs	r0, #0
   3a08a:	b003      	add	sp, #12
   3a08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a090:	9a01      	ldr	r2, [sp, #4]
   3a092:	2a10      	cmp	r2, #16
   3a094:	bf18      	it	ne
   3a096:	4616      	movne	r6, r2
   3a098:	d0f6      	beq.n	3a088 <mem_alloc.constprop.5+0xc8>
   3a09a:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 3a184 <mem_alloc.constprop.5+0x1c4>
   3a09e:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   3a0a2:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   3a0a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3a0aa:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   3a0ae:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   3a0b2:	f8d2 e004 	ldr.w	lr, [r2, #4]
   3a0b6:	691d      	ldr	r5, [r3, #16]
   3a0b8:	2c00      	cmp	r4, #0
   3a0ba:	d056      	beq.n	3a16a <mem_alloc.constprop.5+0x1aa>
   3a0bc:	462a      	mov	r2, r5
   3a0be:	4670      	mov	r0, lr
   3a0c0:	00a4      	lsls	r4, r4, #2
   3a0c2:	eb05 0904 	add.w	r9, r5, r4
   3a0c6:	8851      	ldrh	r1, [r2, #2]
   3a0c8:	3204      	adds	r2, #4
   3a0ca:	4591      	cmp	r9, r2
   3a0cc:	4408      	add	r0, r1
   3a0ce:	d1fa      	bne.n	3a0c6 <mem_alloc.constprop.5+0x106>
   3a0d0:	1929      	adds	r1, r5, r4
   3a0d2:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   3a0d6:	4482      	add	sl, r0
   3a0d8:	4582      	cmp	sl, r0
   3a0da:	d918      	bls.n	3a10e <mem_alloc.constprop.5+0x14e>
   3a0dc:	0941      	lsrs	r1, r0, #5
   3a0de:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   3a0e2:	f000 041f 	and.w	r4, r0, #31
   3a0e6:	fa22 f904 	lsr.w	r9, r2, r4
   3a0ea:	f019 0f01 	tst.w	r9, #1
   3a0ee:	d007      	beq.n	3a100 <mem_alloc.constprop.5+0x140>
   3a0f0:	e013      	b.n	3a11a <mem_alloc.constprop.5+0x15a>
   3a0f2:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   3a0f6:	fa22 f904 	lsr.w	r9, r2, r4
   3a0fa:	f019 0f01 	tst.w	r9, #1
   3a0fe:	d10c      	bne.n	3a11a <mem_alloc.constprop.5+0x15a>
   3a100:	3001      	adds	r0, #1
   3a102:	4582      	cmp	sl, r0
   3a104:	ea4f 1150 	mov.w	r1, r0, lsr #5
   3a108:	f000 041f 	and.w	r4, r0, #31
   3a10c:	d1f1      	bne.n	3a0f2 <mem_alloc.constprop.5+0x132>
   3a10e:	3601      	adds	r6, #1
   3a110:	455e      	cmp	r6, fp
   3a112:	f108 0808 	add.w	r8, r8, #8
   3a116:	d3c4      	bcc.n	3a0a2 <mem_alloc.constprop.5+0xe2>
   3a118:	e7b6      	b.n	3a088 <mem_alloc.constprop.5+0xc8>
   3a11a:	2601      	movs	r6, #1
   3a11c:	fa06 f404 	lsl.w	r4, r6, r4
   3a120:	899e      	ldrh	r6, [r3, #12]
   3a122:	ea22 0204 	bic.w	r2, r2, r4
   3a126:	eba0 000e 	sub.w	r0, r0, lr
   3a12a:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   3a12e:	685c      	ldr	r4, [r3, #4]
   3a130:	2e00      	cmp	r6, #0
   3a132:	d0a9      	beq.n	3a088 <mem_alloc.constprop.5+0xc8>
   3a134:	886a      	ldrh	r2, [r5, #2]
   3a136:	4282      	cmp	r2, r0
   3a138:	d811      	bhi.n	3a15e <mem_alloc.constprop.5+0x19e>
   3a13a:	2100      	movs	r1, #0
   3a13c:	1d2b      	adds	r3, r5, #4
   3a13e:	e003      	b.n	3a148 <mem_alloc.constprop.5+0x188>
   3a140:	885a      	ldrh	r2, [r3, #2]
   3a142:	3304      	adds	r3, #4
   3a144:	4282      	cmp	r2, r0
   3a146:	d80a      	bhi.n	3a15e <mem_alloc.constprop.5+0x19e>
   3a148:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   3a14c:	3101      	adds	r1, #1
   3a14e:	428e      	cmp	r6, r1
   3a150:	fb02 4405 	mla	r4, r2, r5, r4
   3a154:	eba0 0002 	sub.w	r0, r0, r2
   3a158:	461d      	mov	r5, r3
   3a15a:	d1f1      	bne.n	3a140 <mem_alloc.constprop.5+0x180>
   3a15c:	e794      	b.n	3a088 <mem_alloc.constprop.5+0xc8>
   3a15e:	882b      	ldrh	r3, [r5, #0]
   3a160:	fb00 4003 	mla	r0, r0, r3, r4
   3a164:	b003      	add	sp, #12
   3a166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a16a:	4670      	mov	r0, lr
   3a16c:	e7b0      	b.n	3a0d0 <mem_alloc.constprop.5+0x110>
   3a16e:	f1bb 0f10 	cmp.w	fp, #16
   3a172:	bf08      	it	eq
   3a174:	260f      	moveq	r6, #15
   3a176:	d090      	beq.n	3a09a <mem_alloc.constprop.5+0xda>
   3a178:	e786      	b.n	3a088 <mem_alloc.constprop.5+0xc8>
   3a17a:	bf00      	nop
   3a17c:	20025c14 	.word	0x20025c14
   3a180:	20025bd8 	.word	0x20025bd8
   3a184:	20025b94 	.word	0x20025b94

0003a188 <mem_alloc.constprop.4>:
   3a188:	2800      	cmp	r0, #0
   3a18a:	d04c      	beq.n	3a226 <mem_alloc.constprop.4+0x9e>
   3a18c:	4b6b      	ldr	r3, [pc, #428]	; (3a33c <mem_alloc.constprop.4+0x1b4>)
   3a18e:	681a      	ldr	r2, [r3, #0]
   3a190:	4290      	cmp	r0, r2
   3a192:	d848      	bhi.n	3a226 <mem_alloc.constprop.4+0x9e>
   3a194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a198:	685f      	ldr	r7, [r3, #4]
   3a19a:	b083      	sub	sp, #12
   3a19c:	9700      	str	r7, [sp, #0]
   3a19e:	2f00      	cmp	r7, #0
   3a1a0:	d051      	beq.n	3a246 <mem_alloc.constprop.4+0xbe>
   3a1a2:	1e7a      	subs	r2, r7, #1
   3a1a4:	4696      	mov	lr, r2
   3a1a6:	2100      	movs	r1, #0
   3a1a8:	f04f 0c01 	mov.w	ip, #1
   3a1ac:	4c64      	ldr	r4, [pc, #400]	; (3a340 <mem_alloc.constprop.4+0x1b8>)
   3a1ae:	9201      	str	r2, [sp, #4]
   3a1b0:	eb01 020e 	add.w	r2, r1, lr
   3a1b4:	3201      	adds	r2, #1
   3a1b6:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   3a1ba:	0852      	lsrs	r2, r2, #1
   3a1bc:	f102 0801 	add.w	r8, r2, #1
   3a1c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3a1c4:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   3a1c8:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   3a1cc:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   3a1d0:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   3a1d4:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   3a1d8:	f8d9 9004 	ldr.w	r9, [r9, #4]
   3a1dc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   3a1e0:	f8da a010 	ldr.w	sl, [sl, #16]
   3a1e4:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   3a1e8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   3a1ec:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   3a1f0:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   3a1f4:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   3a1f8:	6936      	ldr	r6, [r6, #16]
   3a1fa:	f8db b004 	ldr.w	fp, [fp, #4]
   3a1fe:	692d      	ldr	r5, [r5, #16]
   3a200:	f8d9 9004 	ldr.w	r9, [r9, #4]
   3a204:	4550      	cmp	r0, sl
   3a206:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   3a20a:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   3a20e:	d913      	bls.n	3a238 <mem_alloc.constprop.4+0xb0>
   3a210:	42a8      	cmp	r0, r5
   3a212:	d210      	bcs.n	3a236 <mem_alloc.constprop.4+0xae>
   3a214:	42b0      	cmp	r0, r6
   3a216:	d908      	bls.n	3a22a <mem_alloc.constprop.4+0xa2>
   3a218:	45c6      	cmp	lr, r8
   3a21a:	4641      	mov	r1, r8
   3a21c:	f0c0 8087 	bcc.w	3a32e <mem_alloc.constprop.4+0x1a6>
   3a220:	f108 0c01 	add.w	ip, r8, #1
   3a224:	e7c4      	b.n	3a1b0 <mem_alloc.constprop.4+0x28>
   3a226:	2000      	movs	r0, #0
   3a228:	4770      	bx	lr
   3a22a:	f102 3eff 	add.w	lr, r2, #4294967295
   3a22e:	4571      	cmp	r1, lr
   3a230:	d87d      	bhi.n	3a32e <mem_alloc.constprop.4+0x1a6>
   3a232:	4617      	mov	r7, r2
   3a234:	e7bc      	b.n	3a1b0 <mem_alloc.constprop.4+0x28>
   3a236:	4639      	mov	r1, r7
   3a238:	9a00      	ldr	r2, [sp, #0]
   3a23a:	428a      	cmp	r2, r1
   3a23c:	d007      	beq.n	3a24e <mem_alloc.constprop.4+0xc6>
   3a23e:	2910      	cmp	r1, #16
   3a240:	d001      	beq.n	3a246 <mem_alloc.constprop.4+0xbe>
   3a242:	428a      	cmp	r2, r1
   3a244:	d808      	bhi.n	3a258 <mem_alloc.constprop.4+0xd0>
   3a246:	2000      	movs	r0, #0
   3a248:	b003      	add	sp, #12
   3a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a24e:	9a01      	ldr	r2, [sp, #4]
   3a250:	2a10      	cmp	r2, #16
   3a252:	bf18      	it	ne
   3a254:	4611      	movne	r1, r2
   3a256:	d0f6      	beq.n	3a246 <mem_alloc.constprop.4+0xbe>
   3a258:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 3a344 <mem_alloc.constprop.4+0x1bc>
   3a25c:	f8dd 9000 	ldr.w	r9, [sp]
   3a260:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   3a264:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   3a268:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3a26c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   3a270:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   3a274:	f8d2 e004 	ldr.w	lr, [r2, #4]
   3a278:	691f      	ldr	r7, [r3, #16]
   3a27a:	2e00      	cmp	r6, #0
   3a27c:	d055      	beq.n	3a32a <mem_alloc.constprop.4+0x1a2>
   3a27e:	463a      	mov	r2, r7
   3a280:	4670      	mov	r0, lr
   3a282:	00b6      	lsls	r6, r6, #2
   3a284:	eb07 0a06 	add.w	sl, r7, r6
   3a288:	8855      	ldrh	r5, [r2, #2]
   3a28a:	3204      	adds	r2, #4
   3a28c:	4592      	cmp	sl, r2
   3a28e:	4428      	add	r0, r5
   3a290:	d1fa      	bne.n	3a288 <mem_alloc.constprop.4+0x100>
   3a292:	19bd      	adds	r5, r7, r6
   3a294:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   3a298:	4483      	add	fp, r0
   3a29a:	4583      	cmp	fp, r0
   3a29c:	d918      	bls.n	3a2d0 <mem_alloc.constprop.4+0x148>
   3a29e:	0945      	lsrs	r5, r0, #5
   3a2a0:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   3a2a4:	f000 061f 	and.w	r6, r0, #31
   3a2a8:	fa22 fa06 	lsr.w	sl, r2, r6
   3a2ac:	f01a 0f01 	tst.w	sl, #1
   3a2b0:	d007      	beq.n	3a2c2 <mem_alloc.constprop.4+0x13a>
   3a2b2:	e013      	b.n	3a2dc <mem_alloc.constprop.4+0x154>
   3a2b4:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   3a2b8:	fa22 fa06 	lsr.w	sl, r2, r6
   3a2bc:	f01a 0f01 	tst.w	sl, #1
   3a2c0:	d10c      	bne.n	3a2dc <mem_alloc.constprop.4+0x154>
   3a2c2:	3001      	adds	r0, #1
   3a2c4:	4583      	cmp	fp, r0
   3a2c6:	ea4f 1550 	mov.w	r5, r0, lsr #5
   3a2ca:	f000 061f 	and.w	r6, r0, #31
   3a2ce:	d1f1      	bne.n	3a2b4 <mem_alloc.constprop.4+0x12c>
   3a2d0:	3101      	adds	r1, #1
   3a2d2:	4549      	cmp	r1, r9
   3a2d4:	f108 0808 	add.w	r8, r8, #8
   3a2d8:	d3c4      	bcc.n	3a264 <mem_alloc.constprop.4+0xdc>
   3a2da:	e7b4      	b.n	3a246 <mem_alloc.constprop.4+0xbe>
   3a2dc:	2101      	movs	r1, #1
   3a2de:	40b1      	lsls	r1, r6
   3a2e0:	899e      	ldrh	r6, [r3, #12]
   3a2e2:	ea22 0201 	bic.w	r2, r2, r1
   3a2e6:	eba0 000e 	sub.w	r0, r0, lr
   3a2ea:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   3a2ee:	685c      	ldr	r4, [r3, #4]
   3a2f0:	2e00      	cmp	r6, #0
   3a2f2:	d0a8      	beq.n	3a246 <mem_alloc.constprop.4+0xbe>
   3a2f4:	887a      	ldrh	r2, [r7, #2]
   3a2f6:	4282      	cmp	r2, r0
   3a2f8:	d811      	bhi.n	3a31e <mem_alloc.constprop.4+0x196>
   3a2fa:	2100      	movs	r1, #0
   3a2fc:	1d3b      	adds	r3, r7, #4
   3a2fe:	e003      	b.n	3a308 <mem_alloc.constprop.4+0x180>
   3a300:	885a      	ldrh	r2, [r3, #2]
   3a302:	3304      	adds	r3, #4
   3a304:	4282      	cmp	r2, r0
   3a306:	d80a      	bhi.n	3a31e <mem_alloc.constprop.4+0x196>
   3a308:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   3a30c:	3101      	adds	r1, #1
   3a30e:	428e      	cmp	r6, r1
   3a310:	eba0 0002 	sub.w	r0, r0, r2
   3a314:	fb02 4405 	mla	r4, r2, r5, r4
   3a318:	461f      	mov	r7, r3
   3a31a:	d1f1      	bne.n	3a300 <mem_alloc.constprop.4+0x178>
   3a31c:	e793      	b.n	3a246 <mem_alloc.constprop.4+0xbe>
   3a31e:	883b      	ldrh	r3, [r7, #0]
   3a320:	fb00 4003 	mla	r0, r0, r3, r4
   3a324:	b003      	add	sp, #12
   3a326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a32a:	4670      	mov	r0, lr
   3a32c:	e7b1      	b.n	3a292 <mem_alloc.constprop.4+0x10a>
   3a32e:	9a00      	ldr	r2, [sp, #0]
   3a330:	2a10      	cmp	r2, #16
   3a332:	bf08      	it	eq
   3a334:	210f      	moveq	r1, #15
   3a336:	d08f      	beq.n	3a258 <mem_alloc.constprop.4+0xd0>
   3a338:	e785      	b.n	3a246 <mem_alloc.constprop.4+0xbe>
   3a33a:	bf00      	nop
   3a33c:	20025c14 	.word	0x20025c14
   3a340:	20025bd8 	.word	0x20025bd8
   3a344:	20025b94 	.word	0x20025b94

0003a348 <nrf_mem_init>:
   3a348:	b570      	push	{r4, r5, r6, lr}
   3a34a:	2200      	movs	r2, #0
   3a34c:	2501      	movs	r5, #1
   3a34e:	4833      	ldr	r0, [pc, #204]	; (3a41c <nrf_mem_init+0xd4>)
   3a350:	0951      	lsrs	r1, r2, #5
   3a352:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   3a356:	f002 031f 	and.w	r3, r2, #31
   3a35a:	fa05 f303 	lsl.w	r3, r5, r3
   3a35e:	3201      	adds	r2, #1
   3a360:	4323      	orrs	r3, r4
   3a362:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   3a366:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   3a36a:	d1f1      	bne.n	3a350 <nrf_mem_init+0x8>
   3a36c:	2400      	movs	r4, #0
   3a36e:	4b2c      	ldr	r3, [pc, #176]	; (3a420 <nrf_mem_init+0xd8>)
   3a370:	4621      	mov	r1, r4
   3a372:	223c      	movs	r2, #60	; 0x3c
   3a374:	482b      	ldr	r0, [pc, #172]	; (3a424 <nrf_mem_init+0xdc>)
   3a376:	601c      	str	r4, [r3, #0]
   3a378:	f00a fcd5 	bl	44d26 <memset>
   3a37c:	2110      	movs	r1, #16
   3a37e:	2205      	movs	r2, #5
   3a380:	4b29      	ldr	r3, [pc, #164]	; (3a428 <nrf_mem_init+0xe0>)
   3a382:	4e2a      	ldr	r6, [pc, #168]	; (3a42c <nrf_mem_init+0xe4>)
   3a384:	e9c3 4400 	strd	r4, r4, [r3]
   3a388:	60d9      	str	r1, [r3, #12]
   3a38a:	6159      	str	r1, [r3, #20]
   3a38c:	61d9      	str	r1, [r3, #28]
   3a38e:	6259      	str	r1, [r3, #36]	; 0x24
   3a390:	62d9      	str	r1, [r3, #44]	; 0x2c
   3a392:	6359      	str	r1, [r3, #52]	; 0x34
   3a394:	63d9      	str	r1, [r3, #60]	; 0x3c
   3a396:	6459      	str	r1, [r3, #68]	; 0x44
   3a398:	64d9      	str	r1, [r3, #76]	; 0x4c
   3a39a:	6559      	str	r1, [r3, #84]	; 0x54
   3a39c:	65d9      	str	r1, [r3, #92]	; 0x5c
   3a39e:	6659      	str	r1, [r3, #100]	; 0x64
   3a3a0:	66d9      	str	r1, [r3, #108]	; 0x6c
   3a3a2:	6759      	str	r1, [r3, #116]	; 0x74
   3a3a4:	67d9      	str	r1, [r3, #124]	; 0x7c
   3a3a6:	609a      	str	r2, [r3, #8]
   3a3a8:	611a      	str	r2, [r3, #16]
   3a3aa:	619a      	str	r2, [r3, #24]
   3a3ac:	621a      	str	r2, [r3, #32]
   3a3ae:	629a      	str	r2, [r3, #40]	; 0x28
   3a3b0:	631a      	str	r2, [r3, #48]	; 0x30
   3a3b2:	639a      	str	r2, [r3, #56]	; 0x38
   3a3b4:	641a      	str	r2, [r3, #64]	; 0x40
   3a3b6:	649a      	str	r2, [r3, #72]	; 0x48
   3a3b8:	651a      	str	r2, [r3, #80]	; 0x50
   3a3ba:	659a      	str	r2, [r3, #88]	; 0x58
   3a3bc:	661a      	str	r2, [r3, #96]	; 0x60
   3a3be:	669a      	str	r2, [r3, #104]	; 0x68
   3a3c0:	671a      	str	r2, [r3, #112]	; 0x70
   3a3c2:	679a      	str	r2, [r3, #120]	; 0x78
   3a3c4:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   3a3c8:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   3a3cc:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   3a3d0:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   3a3d4:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   3a3d8:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   3a3dc:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   3a3e0:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   3a3e4:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   3a3e8:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   3a3ec:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   3a3f0:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   3a3f4:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   3a3f8:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   3a3fc:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   3a400:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   3a404:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   3a408:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3a40c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   3a410:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   3a414:	4620      	mov	r0, r4
   3a416:	7035      	strb	r5, [r6, #0]
   3a418:	bd70      	pop	{r4, r5, r6, pc}
   3a41a:	bf00      	nop
   3a41c:	20025b94 	.word	0x20025b94
   3a420:	20025bd4 	.word	0x20025bd4
   3a424:	20025bd8 	.word	0x20025bd8
   3a428:	20025c14 	.word	0x20025c14
   3a42c:	2002d6bc 	.word	0x2002d6bc

0003a430 <nrf_mem_register>:
   3a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a434:	4b87      	ldr	r3, [pc, #540]	; (3a654 <nrf_mem_register+0x224>)
   3a436:	b087      	sub	sp, #28
   3a438:	781b      	ldrb	r3, [r3, #0]
   3a43a:	2b00      	cmp	r3, #0
   3a43c:	f000 808c 	beq.w	3a558 <nrf_mem_register+0x128>
   3a440:	b328      	cbz	r0, 3a48e <nrf_mem_register+0x5e>
   3a442:	b321      	cbz	r1, 3a48e <nrf_mem_register+0x5e>
   3a444:	780b      	ldrb	r3, [r1, #0]
   3a446:	f8df 8218 	ldr.w	r8, [pc, #536]	; 3a660 <nrf_mem_register+0x230>
   3a44a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   3a44e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   3a452:	685b      	ldr	r3, [r3, #4]
   3a454:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   3a458:	4463      	add	r3, ip
   3a45a:	2b10      	cmp	r3, #16
   3a45c:	d811      	bhi.n	3a482 <nrf_mem_register+0x52>
   3a45e:	f04f 0a00 	mov.w	sl, #0
   3a462:	4689      	mov	r9, r1
   3a464:	4b7c      	ldr	r3, [pc, #496]	; (3a658 <nrf_mem_register+0x228>)
   3a466:	4f7d      	ldr	r7, [pc, #500]	; (3a65c <nrf_mem_register+0x22c>)
   3a468:	681b      	ldr	r3, [r3, #0]
   3a46a:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   3a46e:	9300      	str	r3, [sp, #0]
   3a470:	68b9      	ldr	r1, [r7, #8]
   3a472:	b191      	cbz	r1, 3a49a <nrf_mem_register+0x6a>
   3a474:	f10a 0a01 	add.w	sl, sl, #1
   3a478:	f1ba 0f05 	cmp.w	sl, #5
   3a47c:	f107 070c 	add.w	r7, r7, #12
   3a480:	d1f6      	bne.n	3a470 <nrf_mem_register+0x40>
   3a482:	f248 1b07 	movw	fp, #33031	; 0x8107
   3a486:	4658      	mov	r0, fp
   3a488:	b007      	add	sp, #28
   3a48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a48e:	f248 1b0e 	movw	fp, #33038	; 0x810e
   3a492:	4658      	mov	r0, fp
   3a494:	b007      	add	sp, #28
   3a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a49a:	f1bc 0f00 	cmp.w	ip, #0
   3a49e:	d061      	beq.n	3a564 <nrf_mem_register+0x134>
   3a4a0:	460d      	mov	r5, r1
   3a4a2:	460c      	mov	r4, r1
   3a4a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   3a4a8:	eb0e 0b03 	add.w	fp, lr, r3
   3a4ac:	885a      	ldrh	r2, [r3, #2]
   3a4ae:	f833 6b04 	ldrh.w	r6, [r3], #4
   3a4b2:	4415      	add	r5, r2
   3a4b4:	459b      	cmp	fp, r3
   3a4b6:	fb02 4406 	mla	r4, r2, r6, r4
   3a4ba:	d1f7      	bne.n	3a4ac <nrf_mem_register+0x7c>
   3a4bc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   3a4c0:	42a3      	cmp	r3, r4
   3a4c2:	d3d7      	bcc.n	3a474 <nrf_mem_register+0x44>
   3a4c4:	9b00      	ldr	r3, [sp, #0]
   3a4c6:	442b      	add	r3, r5
   3a4c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3a4cc:	d2d2      	bcs.n	3a474 <nrf_mem_register+0x44>
   3a4ce:	4c63      	ldr	r4, [pc, #396]	; (3a65c <nrf_mem_register+0x22c>)
   3a4d0:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   3a4d4:	0092      	lsls	r2, r2, #2
   3a4d6:	f8c0 a000 	str.w	sl, [r0]
   3a4da:	18a0      	adds	r0, r4, r2
   3a4dc:	f844 9002 	str.w	r9, [r4, r2]
   3a4e0:	9a00      	ldr	r2, [sp, #0]
   3a4e2:	468b      	mov	fp, r1
   3a4e4:	e9c0 2501 	strd	r2, r5, [r0, #4]
   3a4e8:	f899 2001 	ldrb.w	r2, [r9, #1]
   3a4ec:	485a      	ldr	r0, [pc, #360]	; (3a658 <nrf_mem_register+0x228>)
   3a4ee:	2a01      	cmp	r2, #1
   3a4f0:	6003      	str	r3, [r0, #0]
   3a4f2:	d0c8      	beq.n	3a486 <nrf_mem_register+0x56>
   3a4f4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   3a4f8:	2b00      	cmp	r3, #0
   3a4fa:	d0c4      	beq.n	3a486 <nrf_mem_register+0x56>
   3a4fc:	2500      	movs	r5, #0
   3a4fe:	f8cd 9004 	str.w	r9, [sp, #4]
   3a502:	f8cd a00c 	str.w	sl, [sp, #12]
   3a506:	f8cd b014 	str.w	fp, [sp, #20]
   3a50a:	9b01      	ldr	r3, [sp, #4]
   3a50c:	781f      	ldrb	r7, [r3, #0]
   3a50e:	691a      	ldr	r2, [r3, #16]
   3a510:	013b      	lsls	r3, r7, #4
   3a512:	eb03 0907 	add.w	r9, r3, r7
   3a516:	9300      	str	r3, [sp, #0]
   3a518:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   3a51c:	6859      	ldr	r1, [r3, #4]
   3a51e:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   3a522:	9102      	str	r1, [sp, #8]
   3a524:	bb39      	cbnz	r1, 3a576 <nrf_mem_register+0x146>
   3a526:	9a03      	ldr	r2, [sp, #12]
   3a528:	60dd      	str	r5, [r3, #12]
   3a52a:	609a      	str	r2, [r3, #8]
   3a52c:	9b00      	ldr	r3, [sp, #0]
   3a52e:	443b      	add	r3, r7
   3a530:	461f      	mov	r7, r3
   3a532:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   3a536:	684b      	ldr	r3, [r1, #4]
   3a538:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   3a53c:	3301      	adds	r3, #1
   3a53e:	4294      	cmp	r4, r2
   3a540:	604b      	str	r3, [r1, #4]
   3a542:	d912      	bls.n	3a56a <nrf_mem_register+0x13a>
   3a544:	9b01      	ldr	r3, [sp, #4]
   3a546:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   3a54a:	899b      	ldrh	r3, [r3, #12]
   3a54c:	3501      	adds	r5, #1
   3a54e:	429d      	cmp	r5, r3
   3a550:	d3db      	bcc.n	3a50a <nrf_mem_register+0xda>
   3a552:	f8dd b014 	ldr.w	fp, [sp, #20]
   3a556:	e796      	b.n	3a486 <nrf_mem_register+0x56>
   3a558:	f248 1b08 	movw	fp, #33032	; 0x8108
   3a55c:	4658      	mov	r0, fp
   3a55e:	b007      	add	sp, #28
   3a560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a564:	9b00      	ldr	r3, [sp, #0]
   3a566:	4665      	mov	r5, ip
   3a568:	e7ae      	b.n	3a4c8 <nrf_mem_register+0x98>
   3a56a:	9b01      	ldr	r3, [sp, #4]
   3a56c:	3501      	adds	r5, #1
   3a56e:	899b      	ldrh	r3, [r3, #12]
   3a570:	42ab      	cmp	r3, r5
   3a572:	d8ca      	bhi.n	3a50a <nrf_mem_register+0xda>
   3a574:	e7ed      	b.n	3a552 <nrf_mem_register+0x122>
   3a576:	2600      	movs	r6, #0
   3a578:	f101 3aff 	add.w	sl, r1, #4294967295
   3a57c:	9504      	str	r5, [sp, #16]
   3a57e:	eb06 000a 	add.w	r0, r6, sl
   3a582:	eb09 0206 	add.w	r2, r9, r6
   3a586:	3201      	adds	r2, #1
   3a588:	3001      	adds	r0, #1
   3a58a:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   3a58e:	0840      	lsrs	r0, r0, #1
   3a590:	4d32      	ldr	r5, [pc, #200]	; (3a65c <nrf_mem_register+0x22c>)
   3a592:	eb09 0100 	add.w	r1, r9, r0
   3a596:	eb09 030a 	add.w	r3, r9, sl
   3a59a:	3101      	adds	r1, #1
   3a59c:	3301      	adds	r3, #1
   3a59e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   3a5a2:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   3a5a6:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   3a5aa:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   3a5ae:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   3a5b2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   3a5b6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   3a5ba:	f8db b010 	ldr.w	fp, [fp, #16]
   3a5be:	6852      	ldr	r2, [r2, #4]
   3a5c0:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   3a5c4:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   3a5c8:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   3a5cc:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   3a5d0:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   3a5d4:	f8de e010 	ldr.w	lr, [lr, #16]
   3a5d8:	6849      	ldr	r1, [r1, #4]
   3a5da:	f8dc c010 	ldr.w	ip, [ip, #16]
   3a5de:	685b      	ldr	r3, [r3, #4]
   3a5e0:	4294      	cmp	r4, r2
   3a5e2:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   3a5e6:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   3a5ea:	d92d      	bls.n	3a648 <nrf_mem_register+0x218>
   3a5ec:	429c      	cmp	r4, r3
   3a5ee:	d22d      	bcs.n	3a64c <nrf_mem_register+0x21c>
   3a5f0:	428c      	cmp	r4, r1
   3a5f2:	d924      	bls.n	3a63e <nrf_mem_register+0x20e>
   3a5f4:	1c46      	adds	r6, r0, #1
   3a5f6:	45b2      	cmp	sl, r6
   3a5f8:	d2c1      	bcs.n	3a57e <nrf_mem_register+0x14e>
   3a5fa:	2610      	movs	r6, #16
   3a5fc:	9d04      	ldr	r5, [sp, #16]
   3a5fe:	9a02      	ldr	r2, [sp, #8]
   3a600:	42b2      	cmp	r2, r6
   3a602:	d911      	bls.n	3a628 <nrf_mem_register+0x1f8>
   3a604:	9b00      	ldr	r3, [sp, #0]
   3a606:	443b      	add	r3, r7
   3a608:	441a      	add	r2, r3
   3a60a:	4433      	add	r3, r6
   3a60c:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   3a610:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   3a614:	2208      	movs	r2, #8
   3a616:	4651      	mov	r1, sl
   3a618:	eb0a 0002 	add.w	r0, sl, r2
   3a61c:	f1aa 0a08 	sub.w	sl, sl, #8
   3a620:	f00a fb61 	bl	44ce6 <memcpy>
   3a624:	45d1      	cmp	r9, sl
   3a626:	d1f5      	bne.n	3a614 <nrf_mem_register+0x1e4>
   3a628:	9b00      	ldr	r3, [sp, #0]
   3a62a:	9903      	ldr	r1, [sp, #12]
   3a62c:	443b      	add	r3, r7
   3a62e:	4433      	add	r3, r6
   3a630:	3301      	adds	r3, #1
   3a632:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   3a636:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   3a63a:	6055      	str	r5, [r2, #4]
   3a63c:	e776      	b.n	3a52c <nrf_mem_register+0xfc>
   3a63e:	f100 3aff 	add.w	sl, r0, #4294967295
   3a642:	4556      	cmp	r6, sl
   3a644:	d99b      	bls.n	3a57e <nrf_mem_register+0x14e>
   3a646:	e7d8      	b.n	3a5fa <nrf_mem_register+0x1ca>
   3a648:	9d04      	ldr	r5, [sp, #16]
   3a64a:	e7d8      	b.n	3a5fe <nrf_mem_register+0x1ce>
   3a64c:	9d04      	ldr	r5, [sp, #16]
   3a64e:	f10a 0601 	add.w	r6, sl, #1
   3a652:	e7d4      	b.n	3a5fe <nrf_mem_register+0x1ce>
   3a654:	2002d6bc 	.word	0x2002d6bc
   3a658:	20025bd4 	.word	0x20025bd4
   3a65c:	20025bd8 	.word	0x20025bd8
   3a660:	20025c14 	.word	0x20025c14

0003a664 <nrf_malloc>:
   3a664:	4b03      	ldr	r3, [pc, #12]	; (3a674 <nrf_malloc+0x10>)
   3a666:	781b      	ldrb	r3, [r3, #0]
   3a668:	b10b      	cbz	r3, 3a66e <nrf_malloc+0xa>
   3a66a:	f7ff bd8d 	b.w	3a188 <mem_alloc.constprop.4>
   3a66e:	4618      	mov	r0, r3
   3a670:	4770      	bx	lr
   3a672:	bf00      	nop
   3a674:	2002d6bc 	.word	0x2002d6bc

0003a678 <nrf_free>:
   3a678:	4b04      	ldr	r3, [pc, #16]	; (3a68c <nrf_free+0x14>)
   3a67a:	781b      	ldrb	r3, [r3, #0]
   3a67c:	b123      	cbz	r3, 3a688 <nrf_free+0x10>
   3a67e:	b118      	cbz	r0, 3a688 <nrf_free+0x10>
   3a680:	4601      	mov	r1, r0
   3a682:	2000      	movs	r0, #0
   3a684:	f7ff bc30 	b.w	39ee8 <mem_free>
   3a688:	4770      	bx	lr
   3a68a:	bf00      	nop
   3a68c:	2002d6bc 	.word	0x2002d6bc

0003a690 <nrf_realloc>:
   3a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a694:	4b52      	ldr	r3, [pc, #328]	; (3a7e0 <nrf_realloc+0x150>)
   3a696:	b087      	sub	sp, #28
   3a698:	781b      	ldrb	r3, [r3, #0]
   3a69a:	b173      	cbz	r3, 3a6ba <nrf_realloc+0x2a>
   3a69c:	b168      	cbz	r0, 3a6ba <nrf_realloc+0x2a>
   3a69e:	e9cd 0101 	strd	r0, r1, [sp, #4]
   3a6a2:	f8df a148 	ldr.w	sl, [pc, #328]	; 3a7ec <nrf_realloc+0x15c>
   3a6a6:	f8da 3000 	ldr.w	r3, [sl]
   3a6aa:	b10b      	cbz	r3, 3a6b0 <nrf_realloc+0x20>
   3a6ac:	781a      	ldrb	r2, [r3, #0]
   3a6ae:	b14a      	cbz	r2, 3a6c4 <nrf_realloc+0x34>
   3a6b0:	4b4c      	ldr	r3, [pc, #304]	; (3a7e4 <nrf_realloc+0x154>)
   3a6b2:	f10a 0a0c 	add.w	sl, sl, #12
   3a6b6:	4553      	cmp	r3, sl
   3a6b8:	d1f5      	bne.n	3a6a6 <nrf_realloc+0x16>
   3a6ba:	2400      	movs	r4, #0
   3a6bc:	4620      	mov	r0, r4
   3a6be:	b007      	add	sp, #28
   3a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a6c4:	e9da 9201 	ldrd	r9, r2, [sl, #4]
   3a6c8:	444a      	add	r2, r9
   3a6ca:	4591      	cmp	r9, r2
   3a6cc:	9200      	str	r2, [sp, #0]
   3a6ce:	d2ef      	bcs.n	3a6b0 <nrf_realloc+0x20>
   3a6d0:	685a      	ldr	r2, [r3, #4]
   3a6d2:	f8cd a00c 	str.w	sl, [sp, #12]
   3a6d6:	46cb      	mov	fp, r9
   3a6d8:	4692      	mov	sl, r2
   3a6da:	f8d3 8010 	ldr.w	r8, [r3, #16]
   3a6de:	899f      	ldrh	r7, [r3, #12]
   3a6e0:	ebab 0e09 	sub.w	lr, fp, r9
   3a6e4:	b1d7      	cbz	r7, 3a71c <nrf_realloc+0x8c>
   3a6e6:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   3a6ea:	45e6      	cmp	lr, ip
   3a6ec:	4662      	mov	r2, ip
   3a6ee:	d31d      	bcc.n	3a72c <nrf_realloc+0x9c>
   3a6f0:	4654      	mov	r4, sl
   3a6f2:	4671      	mov	r1, lr
   3a6f4:	4665      	mov	r5, ip
   3a6f6:	2000      	movs	r0, #0
   3a6f8:	f108 0304 	add.w	r3, r8, #4
   3a6fc:	e004      	b.n	3a708 <nrf_realloc+0x78>
   3a6fe:	885a      	ldrh	r2, [r3, #2]
   3a700:	3304      	adds	r3, #4
   3a702:	428a      	cmp	r2, r1
   3a704:	4615      	mov	r5, r2
   3a706:	d814      	bhi.n	3a732 <nrf_realloc+0xa2>
   3a708:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   3a70c:	3001      	adds	r0, #1
   3a70e:	4287      	cmp	r7, r0
   3a710:	fb02 4406 	mla	r4, r2, r6, r4
   3a714:	eba1 0105 	sub.w	r1, r1, r5
   3a718:	461e      	mov	r6, r3
   3a71a:	d1f0      	bne.n	3a6fe <nrf_realloc+0x6e>
   3a71c:	9b00      	ldr	r3, [sp, #0]
   3a71e:	f10b 0b01 	add.w	fp, fp, #1
   3a722:	455b      	cmp	r3, fp
   3a724:	d1dc      	bne.n	3a6e0 <nrf_realloc+0x50>
   3a726:	f8dd a00c 	ldr.w	sl, [sp, #12]
   3a72a:	e7c1      	b.n	3a6b0 <nrf_realloc+0x20>
   3a72c:	4654      	mov	r4, sl
   3a72e:	4671      	mov	r1, lr
   3a730:	4646      	mov	r6, r8
   3a732:	8833      	ldrh	r3, [r6, #0]
   3a734:	fb01 4103 	mla	r1, r1, r3, r4
   3a738:	9b01      	ldr	r3, [sp, #4]
   3a73a:	428b      	cmp	r3, r1
   3a73c:	d1ee      	bne.n	3a71c <nrf_realloc+0x8c>
   3a73e:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   3a742:	f8dd a00c 	ldr.w	sl, [sp, #12]
   3a746:	d0b3      	beq.n	3a6b0 <nrf_realloc+0x20>
   3a748:	45e6      	cmp	lr, ip
   3a74a:	d334      	bcc.n	3a7b6 <nrf_realloc+0x126>
   3a74c:	2200      	movs	r2, #0
   3a74e:	f108 0304 	add.w	r3, r8, #4
   3a752:	e006      	b.n	3a762 <nrf_realloc+0xd2>
   3a754:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   3a758:	4698      	mov	r8, r3
   3a75a:	45f4      	cmp	ip, lr
   3a75c:	f103 0304 	add.w	r3, r3, #4
   3a760:	d829      	bhi.n	3a7b6 <nrf_realloc+0x126>
   3a762:	3201      	adds	r2, #1
   3a764:	42ba      	cmp	r2, r7
   3a766:	ebae 0e0c 	sub.w	lr, lr, ip
   3a76a:	d1f3      	bne.n	3a754 <nrf_realloc+0xc4>
   3a76c:	2300      	movs	r3, #0
   3a76e:	9a02      	ldr	r2, [sp, #8]
   3a770:	429a      	cmp	r2, r3
   3a772:	d923      	bls.n	3a7bc <nrf_realloc+0x12c>
   3a774:	4610      	mov	r0, r2
   3a776:	f7ff fd07 	bl	3a188 <mem_alloc.constprop.4>
   3a77a:	4604      	mov	r4, r0
   3a77c:	2800      	cmp	r0, #0
   3a77e:	d097      	beq.n	3a6b0 <nrf_realloc+0x20>
   3a780:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
   3a784:	462a      	mov	r2, r5
   3a786:	f00a faae 	bl	44ce6 <memcpy>
   3a78a:	462b      	mov	r3, r5
   3a78c:	2201      	movs	r2, #1
   3a78e:	3303      	adds	r3, #3
   3a790:	4915      	ldr	r1, [pc, #84]	; (3a7e8 <nrf_realloc+0x158>)
   3a792:	4423      	add	r3, r4
   3a794:	f023 0303 	bic.w	r3, r3, #3
   3a798:	ea4f 105b 	mov.w	r0, fp, lsr #5
   3a79c:	681e      	ldr	r6, [r3, #0]
   3a79e:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   3a7a2:	f00b 031f 	and.w	r3, fp, #31
   3a7a6:	fa02 f303 	lsl.w	r3, r2, r3
   3a7aa:	9605      	str	r6, [sp, #20]
   3a7ac:	432b      	orrs	r3, r5
   3a7ae:	9a05      	ldr	r2, [sp, #20]
   3a7b0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   3a7b4:	e782      	b.n	3a6bc <nrf_realloc+0x2c>
   3a7b6:	f8b8 3000 	ldrh.w	r3, [r8]
   3a7ba:	e7d8      	b.n	3a76e <nrf_realloc+0xde>
   3a7bc:	4615      	mov	r5, r2
   3a7be:	b96a      	cbnz	r2, 3a7dc <nrf_realloc+0x14c>
   3a7c0:	2301      	movs	r3, #1
   3a7c2:	4a09      	ldr	r2, [pc, #36]	; (3a7e8 <nrf_realloc+0x158>)
   3a7c4:	ea4f 115b 	mov.w	r1, fp, lsr #5
   3a7c8:	f00b 041f 	and.w	r4, fp, #31
   3a7cc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   3a7d0:	40a3      	lsls	r3, r4
   3a7d2:	4303      	orrs	r3, r0
   3a7d4:	462c      	mov	r4, r5
   3a7d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   3a7da:	e76f      	b.n	3a6bc <nrf_realloc+0x2c>
   3a7dc:	9c01      	ldr	r4, [sp, #4]
   3a7de:	e76d      	b.n	3a6bc <nrf_realloc+0x2c>
   3a7e0:	2002d6bc 	.word	0x2002d6bc
   3a7e4:	20025c14 	.word	0x20025c14
   3a7e8:	20025b94 	.word	0x20025b94
   3a7ec:	20025bd8 	.word	0x20025bd8

0003a7f0 <nrf_shared_malloc>:
   3a7f0:	4b03      	ldr	r3, [pc, #12]	; (3a800 <nrf_shared_malloc+0x10>)
   3a7f2:	781b      	ldrb	r3, [r3, #0]
   3a7f4:	b10b      	cbz	r3, 3a7fa <nrf_shared_malloc+0xa>
   3a7f6:	f7ff bbe3 	b.w	39fc0 <mem_alloc.constprop.5>
   3a7fa:	4618      	mov	r0, r3
   3a7fc:	4770      	bx	lr
   3a7fe:	bf00      	nop
   3a800:	2002d6bc 	.word	0x2002d6bc

0003a804 <nrf_shared_free>:
   3a804:	4b04      	ldr	r3, [pc, #16]	; (3a818 <nrf_shared_free+0x14>)
   3a806:	781b      	ldrb	r3, [r3, #0]
   3a808:	b123      	cbz	r3, 3a814 <nrf_shared_free+0x10>
   3a80a:	b118      	cbz	r0, 3a814 <nrf_shared_free+0x10>
   3a80c:	4601      	mov	r1, r0
   3a80e:	2001      	movs	r0, #1
   3a810:	f7ff bb6a 	b.w	39ee8 <mem_free>
   3a814:	4770      	bx	lr
   3a816:	bf00      	nop
   3a818:	2002d6bc 	.word	0x2002d6bc

0003a81c <rpc_dfu_event_handler>:
   3a81c:	b508      	push	{r3, lr}
   3a81e:	4a08      	ldr	r2, [pc, #32]	; (3a840 <rpc_dfu_event_handler+0x24>)
   3a820:	68c1      	ldr	r1, [r0, #12]
   3a822:	8812      	ldrh	r2, [r2, #0]
   3a824:	4603      	mov	r3, r0
   3a826:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   3a82a:	d005      	beq.n	3a838 <rpc_dfu_event_handler+0x1c>
   3a82c:	6800      	ldr	r0, [r0, #0]
   3a82e:	b110      	cbz	r0, 3a836 <rpc_dfu_event_handler+0x1a>
   3a830:	f7fd f866 	bl	37900 <rpc_dfu_client_data_free>
   3a834:	2000      	movs	r0, #0
   3a836:	bd08      	pop	{r3, pc}
   3a838:	4a02      	ldr	r2, [pc, #8]	; (3a844 <rpc_dfu_event_handler+0x28>)
   3a83a:	2001      	movs	r0, #1
   3a83c:	6013      	str	r3, [r2, #0]
   3a83e:	bd08      	pop	{r3, pc}
   3a840:	2002a5f0 	.word	0x2002a5f0
   3a844:	20025d30 	.word	0x20025d30

0003a848 <mfu_interface_init>:
   3a848:	2300      	movs	r3, #0
   3a84a:	b510      	push	{r4, lr}
   3a84c:	4808      	ldr	r0, [pc, #32]	; (3a870 <mfu_interface_init+0x28>)
   3a84e:	4909      	ldr	r1, [pc, #36]	; (3a874 <mfu_interface_init+0x2c>)
   3a850:	4a09      	ldr	r2, [pc, #36]	; (3a878 <mfu_interface_init+0x30>)
   3a852:	4c0a      	ldr	r4, [pc, #40]	; (3a87c <mfu_interface_init+0x34>)
   3a854:	8003      	strh	r3, [r0, #0]
   3a856:	600b      	str	r3, [r1, #0]
   3a858:	6013      	str	r3, [r2, #0]
   3a85a:	6023      	str	r3, [r4, #0]
   3a85c:	f7fd f816 	bl	3788c <rpc_dfu_client_init>
   3a860:	b910      	cbnz	r0, 3a868 <mfu_interface_init+0x20>
   3a862:	2301      	movs	r3, #1
   3a864:	6023      	str	r3, [r4, #0]
   3a866:	bd10      	pop	{r4, pc}
   3a868:	f04f 30ff 	mov.w	r0, #4294967295
   3a86c:	bd10      	pop	{r4, pc}
   3a86e:	bf00      	nop
   3a870:	2002a5f0 	.word	0x2002a5f0
   3a874:	20025d30 	.word	0x20025d30
   3a878:	20025d2c 	.word	0x20025d2c
   3a87c:	20025d24 	.word	0x20025d24

0003a880 <mfu_interface_deinit>:
   3a880:	b510      	push	{r4, lr}
   3a882:	4c06      	ldr	r4, [pc, #24]	; (3a89c <mfu_interface_deinit+0x1c>)
   3a884:	6820      	ldr	r0, [r4, #0]
   3a886:	b900      	cbnz	r0, 3a88a <mfu_interface_deinit+0xa>
   3a888:	bd10      	pop	{r4, pc}
   3a88a:	f7fd f805 	bl	37898 <rpc_dfu_client_deinit>
   3a88e:	b908      	cbnz	r0, 3a894 <mfu_interface_deinit+0x14>
   3a890:	6020      	str	r0, [r4, #0]
   3a892:	bd10      	pop	{r4, pc}
   3a894:	f04f 30ff 	mov.w	r0, #4294967295
   3a898:	bd10      	pop	{r4, pc}
   3a89a:	bf00      	nop
   3a89c:	20025d24 	.word	0x20025d24

0003a8a0 <mfu_interface_open>:
   3a8a0:	b508      	push	{r3, lr}
   3a8a2:	4b07      	ldr	r3, [pc, #28]	; (3a8c0 <mfu_interface_open+0x20>)
   3a8a4:	681a      	ldr	r2, [r3, #0]
   3a8a6:	2a01      	cmp	r2, #1
   3a8a8:	d103      	bne.n	3a8b2 <mfu_interface_open+0x12>
   3a8aa:	2202      	movs	r2, #2
   3a8ac:	601a      	str	r2, [r3, #0]
   3a8ae:	4805      	ldr	r0, [pc, #20]	; (3a8c4 <mfu_interface_open+0x24>)
   3a8b0:	bd08      	pop	{r3, pc}
   3a8b2:	2001      	movs	r0, #1
   3a8b4:	f7ee fed2 	bl	2965c <bsd_os_errno_set>
   3a8b8:	f04f 30ff 	mov.w	r0, #4294967295
   3a8bc:	bd08      	pop	{r3, pc}
   3a8be:	bf00      	nop
   3a8c0:	20025d24 	.word	0x20025d24
   3a8c4:	49765432 	.word	0x49765432

0003a8c8 <mfu_interface_close>:
   3a8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   3a8ca:	4c32      	ldr	r4, [pc, #200]	; (3a994 <mfu_interface_close+0xcc>)
   3a8cc:	b083      	sub	sp, #12
   3a8ce:	6823      	ldr	r3, [r4, #0]
   3a8d0:	1e9a      	subs	r2, r3, #2
   3a8d2:	2a01      	cmp	r2, #1
   3a8d4:	d857      	bhi.n	3a986 <mfu_interface_close+0xbe>
   3a8d6:	2b03      	cmp	r3, #3
   3a8d8:	d004      	beq.n	3a8e4 <mfu_interface_close+0x1c>
   3a8da:	2301      	movs	r3, #1
   3a8dc:	2000      	movs	r0, #0
   3a8de:	6023      	str	r3, [r4, #0]
   3a8e0:	b003      	add	sp, #12
   3a8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3a8e4:	2100      	movs	r1, #0
   3a8e6:	4668      	mov	r0, sp
   3a8e8:	f7fc ffda 	bl	378a0 <rpc_dfu_client_request_alloc>
   3a8ec:	4603      	mov	r3, r0
   3a8ee:	2800      	cmp	r0, #0
   3a8f0:	d13d      	bne.n	3a96e <mfu_interface_close+0xa6>
   3a8f2:	2104      	movs	r1, #4
   3a8f4:	4e28      	ldr	r6, [pc, #160]	; (3a998 <mfu_interface_close+0xd0>)
   3a8f6:	9800      	ldr	r0, [sp, #0]
   3a8f8:	8832      	ldrh	r2, [r6, #0]
   3a8fa:	7201      	strb	r1, [r0, #8]
   3a8fc:	3201      	adds	r2, #1
   3a8fe:	b292      	uxth	r2, r2
   3a900:	0411      	lsls	r1, r2, #16
   3a902:	f041 0106 	orr.w	r1, r1, #6
   3a906:	4d25      	ldr	r5, [pc, #148]	; (3a99c <mfu_interface_close+0xd4>)
   3a908:	60c1      	str	r1, [r0, #12]
   3a90a:	7103      	strb	r3, [r0, #4]
   3a90c:	7143      	strb	r3, [r0, #5]
   3a90e:	7183      	strb	r3, [r0, #6]
   3a910:	71c3      	strb	r3, [r0, #7]
   3a912:	7243      	strb	r3, [r0, #9]
   3a914:	7283      	strb	r3, [r0, #10]
   3a916:	72c3      	strb	r3, [r0, #11]
   3a918:	2106      	movs	r1, #6
   3a91a:	8032      	strh	r2, [r6, #0]
   3a91c:	602b      	str	r3, [r5, #0]
   3a91e:	f7fc ffd3 	bl	378c8 <rpc_dfu_client_request_send>
   3a922:	b9d8      	cbnz	r0, 3a95c <mfu_interface_close+0x94>
   3a924:	f04f 33ff 	mov.w	r3, #4294967295
   3a928:	ae02      	add	r6, sp, #8
   3a92a:	4627      	mov	r7, r4
   3a92c:	f846 3d04 	str.w	r3, [r6, #-4]!
   3a930:	e004      	b.n	3a93c <mfu_interface_close+0x74>
   3a932:	4631      	mov	r1, r6
   3a934:	4638      	mov	r0, r7
   3a936:	f7ee fdd9 	bl	294ec <bsd_os_timedwait>
   3a93a:	b9f0      	cbnz	r0, 3a97a <mfu_interface_close+0xb2>
   3a93c:	6828      	ldr	r0, [r5, #0]
   3a93e:	2800      	cmp	r0, #0
   3a940:	d0f7      	beq.n	3a932 <mfu_interface_close+0x6a>
   3a942:	6905      	ldr	r5, [r0, #16]
   3a944:	f7fc ffd4 	bl	378f0 <rpc_dfu_client_message_free>
   3a948:	2d00      	cmp	r5, #0
   3a94a:	d0c6      	beq.n	3a8da <mfu_interface_close+0x12>
   3a94c:	4b14      	ldr	r3, [pc, #80]	; (3a9a0 <mfu_interface_close+0xd8>)
   3a94e:	2008      	movs	r0, #8
   3a950:	601d      	str	r5, [r3, #0]
   3a952:	f7ee fe83 	bl	2965c <bsd_os_errno_set>
   3a956:	f04f 30ff 	mov.w	r0, #4294967295
   3a95a:	e7c1      	b.n	3a8e0 <mfu_interface_close+0x18>
   3a95c:	9800      	ldr	r0, [sp, #0]
   3a95e:	6803      	ldr	r3, [r0, #0]
   3a960:	b11b      	cbz	r3, 3a96a <mfu_interface_close+0xa2>
   3a962:	4618      	mov	r0, r3
   3a964:	f7fc ffcc 	bl	37900 <rpc_dfu_client_data_free>
   3a968:	9800      	ldr	r0, [sp, #0]
   3a96a:	f7fc ffc1 	bl	378f0 <rpc_dfu_client_message_free>
   3a96e:	200c      	movs	r0, #12
   3a970:	f7ee fe74 	bl	2965c <bsd_os_errno_set>
   3a974:	f04f 30ff 	mov.w	r0, #4294967295
   3a978:	e7b2      	b.n	3a8e0 <mfu_interface_close+0x18>
   3a97a:	203c      	movs	r0, #60	; 0x3c
   3a97c:	f7ee fe6e 	bl	2965c <bsd_os_errno_set>
   3a980:	f04f 30ff 	mov.w	r0, #4294967295
   3a984:	e7ac      	b.n	3a8e0 <mfu_interface_close+0x18>
   3a986:	2001      	movs	r0, #1
   3a988:	f7ee fe68 	bl	2965c <bsd_os_errno_set>
   3a98c:	f04f 30ff 	mov.w	r0, #4294967295
   3a990:	e7a6      	b.n	3a8e0 <mfu_interface_close+0x18>
   3a992:	bf00      	nop
   3a994:	20025d24 	.word	0x20025d24
   3a998:	2002a5f0 	.word	0x2002a5f0
   3a99c:	20025d30 	.word	0x20025d30
   3a9a0:	20025d28 	.word	0x20025d28

0003a9a4 <mfu_interface_sendto>:
   3a9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a9a8:	4e64      	ldr	r6, [pc, #400]	; (3ab3c <mfu_interface_sendto+0x198>)
   3a9aa:	460f      	mov	r7, r1
   3a9ac:	6831      	ldr	r1, [r6, #0]
   3a9ae:	4615      	mov	r5, r2
   3a9b0:	1e8a      	subs	r2, r1, #2
   3a9b2:	2a01      	cmp	r2, #1
   3a9b4:	b082      	sub	sp, #8
   3a9b6:	f200 80b4 	bhi.w	3ab22 <mfu_interface_sendto+0x17e>
   3a9ba:	2f00      	cmp	r7, #0
   3a9bc:	f000 80a5 	beq.w	3ab0a <mfu_interface_sendto+0x166>
   3a9c0:	2d00      	cmp	r5, #0
   3a9c2:	f000 80a2 	beq.w	3ab0a <mfu_interface_sendto+0x166>
   3a9c6:	2b00      	cmp	r3, #0
   3a9c8:	f040 80b1 	bne.w	3ab2e <mfu_interface_sendto+0x18a>
   3a9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3a9ce:	2b00      	cmp	r3, #0
   3a9d0:	f040 80a1 	bne.w	3ab16 <mfu_interface_sendto+0x172>
   3a9d4:	2902      	cmp	r1, #2
   3a9d6:	d04f      	beq.n	3aa78 <mfu_interface_sendto+0xd4>
   3a9d8:	46e8      	mov	r8, sp
   3a9da:	4640      	mov	r0, r8
   3a9dc:	4629      	mov	r1, r5
   3a9de:	f7fc ff5f 	bl	378a0 <rpc_dfu_client_request_alloc>
   3a9e2:	4606      	mov	r6, r0
   3a9e4:	b140      	cbz	r0, 3a9f8 <mfu_interface_sendto+0x54>
   3a9e6:	200c      	movs	r0, #12
   3a9e8:	f7ee fe38 	bl	2965c <bsd_os_errno_set>
   3a9ec:	f04f 35ff 	mov.w	r5, #4294967295
   3a9f0:	4628      	mov	r0, r5
   3a9f2:	b002      	add	sp, #8
   3a9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a9f8:	9b00      	ldr	r3, [sp, #0]
   3a9fa:	4639      	mov	r1, r7
   3a9fc:	6818      	ldr	r0, [r3, #0]
   3a9fe:	462a      	mov	r2, r5
   3aa00:	f00a f971 	bl	44ce6 <memcpy>
   3aa04:	2104      	movs	r1, #4
   3aa06:	4c4e      	ldr	r4, [pc, #312]	; (3ab40 <mfu_interface_sendto+0x19c>)
   3aa08:	9800      	ldr	r0, [sp, #0]
   3aa0a:	8823      	ldrh	r3, [r4, #0]
   3aa0c:	6045      	str	r5, [r0, #4]
   3aa0e:	3301      	adds	r3, #1
   3aa10:	b29b      	uxth	r3, r3
   3aa12:	041a      	lsls	r2, r3, #16
   3aa14:	8023      	strh	r3, [r4, #0]
   3aa16:	430a      	orrs	r2, r1
   3aa18:	4c4a      	ldr	r4, [pc, #296]	; (3ab44 <mfu_interface_sendto+0x1a0>)
   3aa1a:	60c2      	str	r2, [r0, #12]
   3aa1c:	7246      	strb	r6, [r0, #9]
   3aa1e:	7286      	strb	r6, [r0, #10]
   3aa20:	72c6      	strb	r6, [r0, #11]
   3aa22:	7201      	strb	r1, [r0, #8]
   3aa24:	6026      	str	r6, [r4, #0]
   3aa26:	f7fc ff4f 	bl	378c8 <rpc_dfu_client_request_send>
   3aa2a:	2800      	cmp	r0, #0
   3aa2c:	d163      	bne.n	3aaf6 <mfu_interface_sendto+0x152>
   3aa2e:	f04f 33ff 	mov.w	r3, #4294967295
   3aa32:	ae02      	add	r6, sp, #8
   3aa34:	4f41      	ldr	r7, [pc, #260]	; (3ab3c <mfu_interface_sendto+0x198>)
   3aa36:	f846 3d04 	str.w	r3, [r6, #-4]!
   3aa3a:	e004      	b.n	3aa46 <mfu_interface_sendto+0xa2>
   3aa3c:	4631      	mov	r1, r6
   3aa3e:	4638      	mov	r0, r7
   3aa40:	f7ee fd54 	bl	294ec <bsd_os_timedwait>
   3aa44:	b978      	cbnz	r0, 3aa66 <mfu_interface_sendto+0xc2>
   3aa46:	6820      	ldr	r0, [r4, #0]
   3aa48:	2800      	cmp	r0, #0
   3aa4a:	d0f7      	beq.n	3aa3c <mfu_interface_sendto+0x98>
   3aa4c:	6904      	ldr	r4, [r0, #16]
   3aa4e:	f7fc ff4f 	bl	378f0 <rpc_dfu_client_message_free>
   3aa52:	2c00      	cmp	r4, #0
   3aa54:	d0cc      	beq.n	3a9f0 <mfu_interface_sendto+0x4c>
   3aa56:	4b3c      	ldr	r3, [pc, #240]	; (3ab48 <mfu_interface_sendto+0x1a4>)
   3aa58:	2008      	movs	r0, #8
   3aa5a:	601c      	str	r4, [r3, #0]
   3aa5c:	f04f 35ff 	mov.w	r5, #4294967295
   3aa60:	f7ee fdfc 	bl	2965c <bsd_os_errno_set>
   3aa64:	e7c4      	b.n	3a9f0 <mfu_interface_sendto+0x4c>
   3aa66:	f04f 35ff 	mov.w	r5, #4294967295
   3aa6a:	203c      	movs	r0, #60	; 0x3c
   3aa6c:	f7ee fdf6 	bl	2965c <bsd_os_errno_set>
   3aa70:	4628      	mov	r0, r5
   3aa72:	b002      	add	sp, #8
   3aa74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3aa78:	46e8      	mov	r8, sp
   3aa7a:	4619      	mov	r1, r3
   3aa7c:	4640      	mov	r0, r8
   3aa7e:	f7fc ff0f 	bl	378a0 <rpc_dfu_client_request_alloc>
   3aa82:	4602      	mov	r2, r0
   3aa84:	2800      	cmp	r0, #0
   3aa86:	d1ae      	bne.n	3a9e6 <mfu_interface_sendto+0x42>
   3aa88:	f04f 0c08 	mov.w	ip, #8
   3aa8c:	492c      	ldr	r1, [pc, #176]	; (3ab40 <mfu_interface_sendto+0x19c>)
   3aa8e:	482f      	ldr	r0, [pc, #188]	; (3ab4c <mfu_interface_sendto+0x1a8>)
   3aa90:	880b      	ldrh	r3, [r1, #0]
   3aa92:	6804      	ldr	r4, [r0, #0]
   3aa94:	3301      	adds	r3, #1
   3aa96:	9800      	ldr	r0, [sp, #0]
   3aa98:	b29b      	uxth	r3, r3
   3aa9a:	800b      	strh	r3, [r1, #0]
   3aa9c:	041b      	lsls	r3, r3, #16
   3aa9e:	f043 0303 	orr.w	r3, r3, #3
   3aaa2:	6104      	str	r4, [r0, #16]
   3aaa4:	4c27      	ldr	r4, [pc, #156]	; (3ab44 <mfu_interface_sendto+0x1a0>)
   3aaa6:	60c3      	str	r3, [r0, #12]
   3aaa8:	7102      	strb	r2, [r0, #4]
   3aaaa:	7142      	strb	r2, [r0, #5]
   3aaac:	7182      	strb	r2, [r0, #6]
   3aaae:	71c2      	strb	r2, [r0, #7]
   3aab0:	7242      	strb	r2, [r0, #9]
   3aab2:	7282      	strb	r2, [r0, #10]
   3aab4:	72c2      	strb	r2, [r0, #11]
   3aab6:	f880 c008 	strb.w	ip, [r0, #8]
   3aaba:	2103      	movs	r1, #3
   3aabc:	6022      	str	r2, [r4, #0]
   3aabe:	f7fc ff03 	bl	378c8 <rpc_dfu_client_request_send>
   3aac2:	b9c0      	cbnz	r0, 3aaf6 <mfu_interface_sendto+0x152>
   3aac4:	f04f 33ff 	mov.w	r3, #4294967295
   3aac8:	f10d 0908 	add.w	r9, sp, #8
   3aacc:	f849 3d04 	str.w	r3, [r9, #-4]!
   3aad0:	46b2      	mov	sl, r6
   3aad2:	e005      	b.n	3aae0 <mfu_interface_sendto+0x13c>
   3aad4:	4649      	mov	r1, r9
   3aad6:	4650      	mov	r0, sl
   3aad8:	f7ee fd08 	bl	294ec <bsd_os_timedwait>
   3aadc:	2800      	cmp	r0, #0
   3aade:	d1c2      	bne.n	3aa66 <mfu_interface_sendto+0xc2>
   3aae0:	6820      	ldr	r0, [r4, #0]
   3aae2:	2800      	cmp	r0, #0
   3aae4:	d0f6      	beq.n	3aad4 <mfu_interface_sendto+0x130>
   3aae6:	6904      	ldr	r4, [r0, #16]
   3aae8:	f7fc ff02 	bl	378f0 <rpc_dfu_client_message_free>
   3aaec:	2c00      	cmp	r4, #0
   3aaee:	d1b2      	bne.n	3aa56 <mfu_interface_sendto+0xb2>
   3aaf0:	2303      	movs	r3, #3
   3aaf2:	6033      	str	r3, [r6, #0]
   3aaf4:	e771      	b.n	3a9da <mfu_interface_sendto+0x36>
   3aaf6:	9800      	ldr	r0, [sp, #0]
   3aaf8:	6803      	ldr	r3, [r0, #0]
   3aafa:	b11b      	cbz	r3, 3ab04 <mfu_interface_sendto+0x160>
   3aafc:	4618      	mov	r0, r3
   3aafe:	f7fc feff 	bl	37900 <rpc_dfu_client_data_free>
   3ab02:	9800      	ldr	r0, [sp, #0]
   3ab04:	f7fc fef4 	bl	378f0 <rpc_dfu_client_message_free>
   3ab08:	e76d      	b.n	3a9e6 <mfu_interface_sendto+0x42>
   3ab0a:	2016      	movs	r0, #22
   3ab0c:	f7ee fda6 	bl	2965c <bsd_os_errno_set>
   3ab10:	f04f 35ff 	mov.w	r5, #4294967295
   3ab14:	e76c      	b.n	3a9f0 <mfu_interface_sendto+0x4c>
   3ab16:	2038      	movs	r0, #56	; 0x38
   3ab18:	f7ee fda0 	bl	2965c <bsd_os_errno_set>
   3ab1c:	f04f 35ff 	mov.w	r5, #4294967295
   3ab20:	e766      	b.n	3a9f0 <mfu_interface_sendto+0x4c>
   3ab22:	2001      	movs	r0, #1
   3ab24:	f7ee fd9a 	bl	2965c <bsd_os_errno_set>
   3ab28:	f04f 35ff 	mov.w	r5, #4294967295
   3ab2c:	e760      	b.n	3a9f0 <mfu_interface_sendto+0x4c>
   3ab2e:	202d      	movs	r0, #45	; 0x2d
   3ab30:	f7ee fd94 	bl	2965c <bsd_os_errno_set>
   3ab34:	f04f 35ff 	mov.w	r5, #4294967295
   3ab38:	e75a      	b.n	3a9f0 <mfu_interface_sendto+0x4c>
   3ab3a:	bf00      	nop
   3ab3c:	20025d24 	.word	0x20025d24
   3ab40:	2002a5f0 	.word	0x2002a5f0
   3ab44:	20025d30 	.word	0x20025d30
   3ab48:	20025d28 	.word	0x20025d28
   3ab4c:	20025d2c 	.word	0x20025d2c

0003ab50 <mfu_interface_setopt>:
   3ab50:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ab52:	4846      	ldr	r0, [pc, #280]	; (3ac6c <mfu_interface_setopt+0x11c>)
   3ab54:	b083      	sub	sp, #12
   3ab56:	6800      	ldr	r0, [r0, #0]
   3ab58:	3802      	subs	r0, #2
   3ab5a:	2801      	cmp	r0, #1
   3ab5c:	d877      	bhi.n	3ac4e <mfu_interface_setopt+0xfe>
   3ab5e:	f240 2003 	movw	r0, #515	; 0x203
   3ab62:	4281      	cmp	r1, r0
   3ab64:	d16d      	bne.n	3ac42 <mfu_interface_setopt+0xf2>
   3ab66:	3a04      	subs	r2, #4
   3ab68:	2a03      	cmp	r2, #3
   3ab6a:	d85c      	bhi.n	3ac26 <mfu_interface_setopt+0xd6>
   3ab6c:	e8df f002 	tbb	[pc, r2]
   3ab70:	514e024b 	.word	0x514e024b
   3ab74:	2407      	movs	r4, #7
   3ab76:	4625      	mov	r5, r4
   3ab78:	2100      	movs	r1, #0
   3ab7a:	4668      	mov	r0, sp
   3ab7c:	f7fc fe90 	bl	378a0 <rpc_dfu_client_request_alloc>
   3ab80:	4603      	mov	r3, r0
   3ab82:	2800      	cmp	r0, #0
   3ab84:	d138      	bne.n	3abf8 <mfu_interface_setopt+0xa8>
   3ab86:	2704      	movs	r7, #4
   3ab88:	4e39      	ldr	r6, [pc, #228]	; (3ac70 <mfu_interface_setopt+0x120>)
   3ab8a:	9800      	ldr	r0, [sp, #0]
   3ab8c:	8832      	ldrh	r2, [r6, #0]
   3ab8e:	4629      	mov	r1, r5
   3ab90:	3201      	adds	r2, #1
   3ab92:	b292      	uxth	r2, r2
   3ab94:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   3ab98:	4c36      	ldr	r4, [pc, #216]	; (3ac74 <mfu_interface_setopt+0x124>)
   3ab9a:	60c5      	str	r5, [r0, #12]
   3ab9c:	7103      	strb	r3, [r0, #4]
   3ab9e:	7143      	strb	r3, [r0, #5]
   3aba0:	7183      	strb	r3, [r0, #6]
   3aba2:	71c3      	strb	r3, [r0, #7]
   3aba4:	7243      	strb	r3, [r0, #9]
   3aba6:	7283      	strb	r3, [r0, #10]
   3aba8:	72c3      	strb	r3, [r0, #11]
   3abaa:	7207      	strb	r7, [r0, #8]
   3abac:	8032      	strh	r2, [r6, #0]
   3abae:	6023      	str	r3, [r4, #0]
   3abb0:	f7fc fe8a 	bl	378c8 <rpc_dfu_client_request_send>
   3abb4:	b9b8      	cbnz	r0, 3abe6 <mfu_interface_setopt+0x96>
   3abb6:	f04f 33ff 	mov.w	r3, #4294967295
   3abba:	ad02      	add	r5, sp, #8
   3abbc:	4e2b      	ldr	r6, [pc, #172]	; (3ac6c <mfu_interface_setopt+0x11c>)
   3abbe:	f845 3d04 	str.w	r3, [r5, #-4]!
   3abc2:	e005      	b.n	3abd0 <mfu_interface_setopt+0x80>
   3abc4:	4629      	mov	r1, r5
   3abc6:	4630      	mov	r0, r6
   3abc8:	f7ee fc90 	bl	294ec <bsd_os_timedwait>
   3abcc:	2800      	cmp	r0, #0
   3abce:	d131      	bne.n	3ac34 <mfu_interface_setopt+0xe4>
   3abd0:	6820      	ldr	r0, [r4, #0]
   3abd2:	2800      	cmp	r0, #0
   3abd4:	d0f6      	beq.n	3abc4 <mfu_interface_setopt+0x74>
   3abd6:	6904      	ldr	r4, [r0, #16]
   3abd8:	f7fc fe8a 	bl	378f0 <rpc_dfu_client_message_free>
   3abdc:	2c00      	cmp	r4, #0
   3abde:	d13c      	bne.n	3ac5a <mfu_interface_setopt+0x10a>
   3abe0:	4620      	mov	r0, r4
   3abe2:	b003      	add	sp, #12
   3abe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3abe6:	9800      	ldr	r0, [sp, #0]
   3abe8:	6803      	ldr	r3, [r0, #0]
   3abea:	b11b      	cbz	r3, 3abf4 <mfu_interface_setopt+0xa4>
   3abec:	4618      	mov	r0, r3
   3abee:	f7fc fe87 	bl	37900 <rpc_dfu_client_data_free>
   3abf2:	9800      	ldr	r0, [sp, #0]
   3abf4:	f7fc fe7c 	bl	378f0 <rpc_dfu_client_message_free>
   3abf8:	200c      	movs	r0, #12
   3abfa:	f7ee fd2f 	bl	2965c <bsd_os_errno_set>
   3abfe:	f04f 30ff 	mov.w	r0, #4294967295
   3ac02:	b003      	add	sp, #12
   3ac04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3ac06:	2405      	movs	r4, #5
   3ac08:	4625      	mov	r5, r4
   3ac0a:	e7b5      	b.n	3ab78 <mfu_interface_setopt+0x28>
   3ac0c:	2408      	movs	r4, #8
   3ac0e:	4625      	mov	r5, r4
   3ac10:	e7b2      	b.n	3ab78 <mfu_interface_setopt+0x28>
   3ac12:	b1b3      	cbz	r3, 3ac42 <mfu_interface_setopt+0xf2>
   3ac14:	9a08      	ldr	r2, [sp, #32]
   3ac16:	2a04      	cmp	r2, #4
   3ac18:	d113      	bne.n	3ac42 <mfu_interface_setopt+0xf2>
   3ac1a:	2000      	movs	r0, #0
   3ac1c:	681a      	ldr	r2, [r3, #0]
   3ac1e:	4b16      	ldr	r3, [pc, #88]	; (3ac78 <mfu_interface_setopt+0x128>)
   3ac20:	601a      	str	r2, [r3, #0]
   3ac22:	b003      	add	sp, #12
   3ac24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3ac26:	202a      	movs	r0, #42	; 0x2a
   3ac28:	f7ee fd18 	bl	2965c <bsd_os_errno_set>
   3ac2c:	f04f 30ff 	mov.w	r0, #4294967295
   3ac30:	b003      	add	sp, #12
   3ac32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3ac34:	203c      	movs	r0, #60	; 0x3c
   3ac36:	f7ee fd11 	bl	2965c <bsd_os_errno_set>
   3ac3a:	f04f 30ff 	mov.w	r0, #4294967295
   3ac3e:	b003      	add	sp, #12
   3ac40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3ac42:	2016      	movs	r0, #22
   3ac44:	f7ee fd0a 	bl	2965c <bsd_os_errno_set>
   3ac48:	f04f 30ff 	mov.w	r0, #4294967295
   3ac4c:	e7c9      	b.n	3abe2 <mfu_interface_setopt+0x92>
   3ac4e:	2001      	movs	r0, #1
   3ac50:	f7ee fd04 	bl	2965c <bsd_os_errno_set>
   3ac54:	f04f 30ff 	mov.w	r0, #4294967295
   3ac58:	e7c3      	b.n	3abe2 <mfu_interface_setopt+0x92>
   3ac5a:	4b08      	ldr	r3, [pc, #32]	; (3ac7c <mfu_interface_setopt+0x12c>)
   3ac5c:	2008      	movs	r0, #8
   3ac5e:	601c      	str	r4, [r3, #0]
   3ac60:	f7ee fcfc 	bl	2965c <bsd_os_errno_set>
   3ac64:	f04f 30ff 	mov.w	r0, #4294967295
   3ac68:	e7bb      	b.n	3abe2 <mfu_interface_setopt+0x92>
   3ac6a:	bf00      	nop
   3ac6c:	20025d24 	.word	0x20025d24
   3ac70:	2002a5f0 	.word	0x2002a5f0
   3ac74:	20025d30 	.word	0x20025d30
   3ac78:	20025d2c 	.word	0x20025d2c
   3ac7c:	20025d28 	.word	0x20025d28

0003ac80 <mfu_interface_getopt>:
   3ac80:	f240 2003 	movw	r0, #515	; 0x203
   3ac84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ac88:	4281      	cmp	r1, r0
   3ac8a:	b082      	sub	sp, #8
   3ac8c:	9e08      	ldr	r6, [sp, #32]
   3ac8e:	f040 80ae 	bne.w	3adee <mfu_interface_getopt+0x16e>
   3ac92:	461d      	mov	r5, r3
   3ac94:	2b00      	cmp	r3, #0
   3ac96:	f000 80aa 	beq.w	3adee <mfu_interface_getopt+0x16e>
   3ac9a:	2e00      	cmp	r6, #0
   3ac9c:	f000 80a7 	beq.w	3adee <mfu_interface_getopt+0x16e>
   3aca0:	4b5e      	ldr	r3, [pc, #376]	; (3ae1c <mfu_interface_getopt+0x19c>)
   3aca2:	681b      	ldr	r3, [r3, #0]
   3aca4:	3b02      	subs	r3, #2
   3aca6:	2b01      	cmp	r3, #1
   3aca8:	f200 80a7 	bhi.w	3adfa <mfu_interface_getopt+0x17a>
   3acac:	3a01      	subs	r2, #1
   3acae:	2a13      	cmp	r2, #19
   3acb0:	d879      	bhi.n	3ada6 <mfu_interface_getopt+0x126>
   3acb2:	e8df f002 	tbb	[pc, r2]
   3acb6:	5f17      	.short	0x5f17
   3acb8:	78787878 	.word	0x78787878
   3acbc:	78787872 	.word	0x78787872
   3acc0:	78787878 	.word	0x78787878
   3acc4:	78787878 	.word	0x78787878
   3acc8:	0a78      	.short	0x0a78
   3acca:	6833      	ldr	r3, [r6, #0]
   3accc:	2b04      	cmp	r3, #4
   3acce:	f040 808e 	bne.w	3adee <mfu_interface_getopt+0x16e>
   3acd2:	2200      	movs	r2, #0
   3acd4:	4610      	mov	r0, r2
   3acd6:	4b52      	ldr	r3, [pc, #328]	; (3ae20 <mfu_interface_getopt+0x1a0>)
   3acd8:	6819      	ldr	r1, [r3, #0]
   3acda:	601a      	str	r2, [r3, #0]
   3acdc:	6029      	str	r1, [r5, #0]
   3acde:	b002      	add	sp, #8
   3ace0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ace4:	6833      	ldr	r3, [r6, #0]
   3ace6:	2b24      	cmp	r3, #36	; 0x24
   3ace8:	f040 8081 	bne.w	3adee <mfu_interface_getopt+0x16e>
   3acec:	2401      	movs	r4, #1
   3acee:	46a0      	mov	r8, r4
   3acf0:	2100      	movs	r1, #0
   3acf2:	4668      	mov	r0, sp
   3acf4:	f7fc fdd4 	bl	378a0 <rpc_dfu_client_request_alloc>
   3acf8:	2800      	cmp	r0, #0
   3acfa:	d146      	bne.n	3ad8a <mfu_interface_getopt+0x10a>
   3acfc:	4949      	ldr	r1, [pc, #292]	; (3ae24 <mfu_interface_getopt+0x1a4>)
   3acfe:	9b00      	ldr	r3, [sp, #0]
   3ad00:	880a      	ldrh	r2, [r1, #0]
   3ad02:	f1b8 0f03 	cmp.w	r8, #3
   3ad06:	f102 0201 	add.w	r2, r2, #1
   3ad0a:	b292      	uxth	r2, r2
   3ad0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   3ad10:	7118      	strb	r0, [r3, #4]
   3ad12:	800a      	strh	r2, [r1, #0]
   3ad14:	60dc      	str	r4, [r3, #12]
   3ad16:	7158      	strb	r0, [r3, #5]
   3ad18:	7198      	strb	r0, [r3, #6]
   3ad1a:	71d8      	strb	r0, [r3, #7]
   3ad1c:	d04b      	beq.n	3adb6 <mfu_interface_getopt+0x136>
   3ad1e:	2104      	movs	r1, #4
   3ad20:	2200      	movs	r2, #0
   3ad22:	4f41      	ldr	r7, [pc, #260]	; (3ae28 <mfu_interface_getopt+0x1a8>)
   3ad24:	6099      	str	r1, [r3, #8]
   3ad26:	4618      	mov	r0, r3
   3ad28:	4641      	mov	r1, r8
   3ad2a:	603a      	str	r2, [r7, #0]
   3ad2c:	f7fc fdcc 	bl	378c8 <rpc_dfu_client_request_send>
   3ad30:	2800      	cmp	r0, #0
   3ad32:	d14d      	bne.n	3add0 <mfu_interface_getopt+0x150>
   3ad34:	f04f 33ff 	mov.w	r3, #4294967295
   3ad38:	ac02      	add	r4, sp, #8
   3ad3a:	f844 3d04 	str.w	r3, [r4, #-4]!
   3ad3e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3ae1c <mfu_interface_getopt+0x19c>
   3ad42:	e005      	b.n	3ad50 <mfu_interface_getopt+0xd0>
   3ad44:	4621      	mov	r1, r4
   3ad46:	4640      	mov	r0, r8
   3ad48:	f7ee fbd0 	bl	294ec <bsd_os_timedwait>
   3ad4c:	2800      	cmp	r0, #0
   3ad4e:	d137      	bne.n	3adc0 <mfu_interface_getopt+0x140>
   3ad50:	6839      	ldr	r1, [r7, #0]
   3ad52:	2900      	cmp	r1, #0
   3ad54:	d0f6      	beq.n	3ad44 <mfu_interface_getopt+0xc4>
   3ad56:	690c      	ldr	r4, [r1, #16]
   3ad58:	2c00      	cmp	r4, #0
   3ad5a:	d154      	bne.n	3ae06 <mfu_interface_getopt+0x186>
   3ad5c:	6832      	ldr	r2, [r6, #0]
   3ad5e:	3114      	adds	r1, #20
   3ad60:	4628      	mov	r0, r5
   3ad62:	f009 ffc0 	bl	44ce6 <memcpy>
   3ad66:	6838      	ldr	r0, [r7, #0]
   3ad68:	f7fc fdc2 	bl	378f0 <rpc_dfu_client_message_free>
   3ad6c:	4620      	mov	r0, r4
   3ad6e:	b002      	add	sp, #8
   3ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ad74:	6833      	ldr	r3, [r6, #0]
   3ad76:	2b04      	cmp	r3, #4
   3ad78:	d139      	bne.n	3adee <mfu_interface_getopt+0x16e>
   3ad7a:	2402      	movs	r4, #2
   3ad7c:	2100      	movs	r1, #0
   3ad7e:	4668      	mov	r0, sp
   3ad80:	46a0      	mov	r8, r4
   3ad82:	f7fc fd8d 	bl	378a0 <rpc_dfu_client_request_alloc>
   3ad86:	2800      	cmp	r0, #0
   3ad88:	d0b8      	beq.n	3acfc <mfu_interface_getopt+0x7c>
   3ad8a:	200c      	movs	r0, #12
   3ad8c:	f7ee fc66 	bl	2965c <bsd_os_errno_set>
   3ad90:	f04f 30ff 	mov.w	r0, #4294967295
   3ad94:	b002      	add	sp, #8
   3ad96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ad9a:	6833      	ldr	r3, [r6, #0]
   3ad9c:	2b04      	cmp	r3, #4
   3ad9e:	d126      	bne.n	3adee <mfu_interface_getopt+0x16e>
   3ada0:	2409      	movs	r4, #9
   3ada2:	46a0      	mov	r8, r4
   3ada4:	e7a4      	b.n	3acf0 <mfu_interface_getopt+0x70>
   3ada6:	202a      	movs	r0, #42	; 0x2a
   3ada8:	f7ee fc58 	bl	2965c <bsd_os_errno_set>
   3adac:	f04f 30ff 	mov.w	r0, #4294967295
   3adb0:	b002      	add	sp, #8
   3adb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3adb6:	4a1d      	ldr	r2, [pc, #116]	; (3ae2c <mfu_interface_getopt+0x1ac>)
   3adb8:	2108      	movs	r1, #8
   3adba:	6812      	ldr	r2, [r2, #0]
   3adbc:	611a      	str	r2, [r3, #16]
   3adbe:	e7af      	b.n	3ad20 <mfu_interface_getopt+0xa0>
   3adc0:	203c      	movs	r0, #60	; 0x3c
   3adc2:	f7ee fc4b 	bl	2965c <bsd_os_errno_set>
   3adc6:	f04f 30ff 	mov.w	r0, #4294967295
   3adca:	b002      	add	sp, #8
   3adcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3add0:	9800      	ldr	r0, [sp, #0]
   3add2:	6803      	ldr	r3, [r0, #0]
   3add4:	b11b      	cbz	r3, 3adde <mfu_interface_getopt+0x15e>
   3add6:	4618      	mov	r0, r3
   3add8:	f7fc fd92 	bl	37900 <rpc_dfu_client_data_free>
   3addc:	9800      	ldr	r0, [sp, #0]
   3adde:	f7fc fd87 	bl	378f0 <rpc_dfu_client_message_free>
   3ade2:	200c      	movs	r0, #12
   3ade4:	f7ee fc3a 	bl	2965c <bsd_os_errno_set>
   3ade8:	f04f 30ff 	mov.w	r0, #4294967295
   3adec:	e7d2      	b.n	3ad94 <mfu_interface_getopt+0x114>
   3adee:	2016      	movs	r0, #22
   3adf0:	f7ee fc34 	bl	2965c <bsd_os_errno_set>
   3adf4:	f04f 30ff 	mov.w	r0, #4294967295
   3adf8:	e771      	b.n	3acde <mfu_interface_getopt+0x5e>
   3adfa:	2001      	movs	r0, #1
   3adfc:	f7ee fc2e 	bl	2965c <bsd_os_errno_set>
   3ae00:	f04f 30ff 	mov.w	r0, #4294967295
   3ae04:	e76b      	b.n	3acde <mfu_interface_getopt+0x5e>
   3ae06:	4b06      	ldr	r3, [pc, #24]	; (3ae20 <mfu_interface_getopt+0x1a0>)
   3ae08:	2008      	movs	r0, #8
   3ae0a:	601c      	str	r4, [r3, #0]
   3ae0c:	f7ee fc26 	bl	2965c <bsd_os_errno_set>
   3ae10:	6838      	ldr	r0, [r7, #0]
   3ae12:	f7fc fd6d 	bl	378f0 <rpc_dfu_client_message_free>
   3ae16:	f04f 30ff 	mov.w	r0, #4294967295
   3ae1a:	e760      	b.n	3acde <mfu_interface_getopt+0x5e>
   3ae1c:	20025d24 	.word	0x20025d24
   3ae20:	20025d28 	.word	0x20025d28
   3ae24:	2002a5f0 	.word	0x2002a5f0
   3ae28:	20025d30 	.word	0x20025d30
   3ae2c:	20025d2c 	.word	0x20025d2c

0003ae30 <interface_init>:
   3ae30:	b508      	push	{r3, lr}
   3ae32:	f44f 72b4 	mov.w	r2, #360	; 0x168
   3ae36:	2100      	movs	r1, #0
   3ae38:	4802      	ldr	r0, [pc, #8]	; (3ae44 <interface_init+0x14>)
   3ae3a:	f009 ff74 	bl	44d26 <memset>
   3ae3e:	2000      	movs	r0, #0
   3ae40:	bd08      	pop	{r3, pc}
   3ae42:	bf00      	nop
   3ae44:	2002d6c0 	.word	0x2002d6c0

0003ae48 <interface_socket_allocate>:
   3ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ae4a:	4b30      	ldr	r3, [pc, #192]	; (3af0c <interface_socket_allocate+0xc4>)
   3ae4c:	4606      	mov	r6, r0
   3ae4e:	681d      	ldr	r5, [r3, #0]
   3ae50:	4608      	mov	r0, r1
   3ae52:	b31d      	cbz	r5, 3ae9c <interface_socket_allocate+0x54>
   3ae54:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   3ae56:	2c00      	cmp	r4, #0
   3ae58:	d04a      	beq.n	3aef0 <interface_socket_allocate+0xa8>
   3ae5a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   3ae5c:	2c00      	cmp	r4, #0
   3ae5e:	d049      	beq.n	3aef4 <interface_socket_allocate+0xac>
   3ae60:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   3ae62:	2c00      	cmp	r4, #0
   3ae64:	d048      	beq.n	3aef8 <interface_socket_allocate+0xb0>
   3ae66:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   3ae6a:	2900      	cmp	r1, #0
   3ae6c:	d046      	beq.n	3aefc <interface_socket_allocate+0xb4>
   3ae6e:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   3ae72:	b191      	cbz	r1, 3ae9a <interface_socket_allocate+0x52>
   3ae74:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   3ae78:	2900      	cmp	r1, #0
   3ae7a:	d043      	beq.n	3af04 <interface_socket_allocate+0xbc>
   3ae7c:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   3ae80:	2900      	cmp	r1, #0
   3ae82:	d041      	beq.n	3af08 <interface_socket_allocate+0xc0>
   3ae84:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   3ae88:	2900      	cmp	r1, #0
   3ae8a:	d039      	beq.n	3af00 <interface_socket_allocate+0xb8>
   3ae8c:	f04f 35ff 	mov.w	r5, #4294967295
   3ae90:	2069      	movs	r0, #105	; 0x69
   3ae92:	f7ee fbe3 	bl	2965c <bsd_os_errno_set>
   3ae96:	4628      	mov	r0, r5
   3ae98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3ae9a:	2505      	movs	r5, #5
   3ae9c:	f04f 0c01 	mov.w	ip, #1
   3aea0:	f04f 37ff 	mov.w	r7, #4294967295
   3aea4:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   3aea8:	00e4      	lsls	r4, r4, #3
   3aeaa:	f843 c004 	str.w	ip, [r3, r4]
   3aeae:	441c      	add	r4, r3
   3aeb0:	4611      	mov	r1, r2
   3aeb2:	61a7      	str	r7, [r4, #24]
   3aeb4:	4622      	mov	r2, r4
   3aeb6:	f7fe fedb 	bl	39c70 <packet_handler_create>
   3aeba:	4603      	mov	r3, r0
   3aebc:	61e0      	str	r0, [r4, #28]
   3aebe:	b158      	cbz	r0, 3aed8 <interface_socket_allocate+0x90>
   3aec0:	681b      	ldr	r3, [r3, #0]
   3aec2:	681b      	ldr	r3, [r3, #0]
   3aec4:	4798      	blx	r3
   3aec6:	b910      	cbnz	r0, 3aece <interface_socket_allocate+0x86>
   3aec8:	6034      	str	r4, [r6, #0]
   3aeca:	4628      	mov	r0, r5
   3aecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3aece:	69e0      	ldr	r0, [r4, #28]
   3aed0:	f7fe feee 	bl	39cb0 <packet_handler_delete>
   3aed4:	2300      	movs	r3, #0
   3aed6:	61e3      	str	r3, [r4, #28]
   3aed8:	f04f 35ff 	mov.w	r5, #4294967295
   3aedc:	2228      	movs	r2, #40	; 0x28
   3aede:	2100      	movs	r1, #0
   3aee0:	4620      	mov	r0, r4
   3aee2:	f009 ff20 	bl	44d26 <memset>
   3aee6:	200c      	movs	r0, #12
   3aee8:	f7ee fbb8 	bl	2965c <bsd_os_errno_set>
   3aeec:	4628      	mov	r0, r5
   3aeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3aef0:	2501      	movs	r5, #1
   3aef2:	e7d3      	b.n	3ae9c <interface_socket_allocate+0x54>
   3aef4:	2502      	movs	r5, #2
   3aef6:	e7d1      	b.n	3ae9c <interface_socket_allocate+0x54>
   3aef8:	2503      	movs	r5, #3
   3aefa:	e7cf      	b.n	3ae9c <interface_socket_allocate+0x54>
   3aefc:	2504      	movs	r5, #4
   3aefe:	e7cd      	b.n	3ae9c <interface_socket_allocate+0x54>
   3af00:	2508      	movs	r5, #8
   3af02:	e7cb      	b.n	3ae9c <interface_socket_allocate+0x54>
   3af04:	2506      	movs	r5, #6
   3af06:	e7c9      	b.n	3ae9c <interface_socket_allocate+0x54>
   3af08:	2507      	movs	r5, #7
   3af0a:	e7c7      	b.n	3ae9c <interface_socket_allocate+0x54>
   3af0c:	2002d6c0 	.word	0x2002d6c0

0003af10 <interface_socket_free>:
   3af10:	2808      	cmp	r0, #8
   3af12:	d900      	bls.n	3af16 <interface_socket_free+0x6>
   3af14:	4770      	bx	lr
   3af16:	b510      	push	{r4, lr}
   3af18:	4c07      	ldr	r4, [pc, #28]	; (3af38 <interface_socket_free+0x28>)
   3af1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3af1e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   3af22:	69e0      	ldr	r0, [r4, #28]
   3af24:	b108      	cbz	r0, 3af2a <interface_socket_free+0x1a>
   3af26:	f7fe fec3 	bl	39cb0 <packet_handler_delete>
   3af2a:	4620      	mov	r0, r4
   3af2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3af30:	2228      	movs	r2, #40	; 0x28
   3af32:	2100      	movs	r1, #0
   3af34:	f009 bef7 	b.w	44d26 <memset>
   3af38:	2002d6c0 	.word	0x2002d6c0

0003af3c <interface_socket_packet_handler_update>:
   3af3c:	2808      	cmp	r0, #8
   3af3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3af42:	d81e      	bhi.n	3af82 <interface_socket_packet_handler_update+0x46>
   3af44:	ea4f 0880 	mov.w	r8, r0, lsl #2
   3af48:	4e17      	ldr	r6, [pc, #92]	; (3afa8 <interface_socket_packet_handler_update+0x6c>)
   3af4a:	eb08 0300 	add.w	r3, r8, r0
   3af4e:	00db      	lsls	r3, r3, #3
   3af50:	58f4      	ldr	r4, [r6, r3]
   3af52:	18f5      	adds	r5, r6, r3
   3af54:	b1ac      	cbz	r4, 3af82 <interface_socket_packet_handler_update+0x46>
   3af56:	460b      	mov	r3, r1
   3af58:	4604      	mov	r4, r0
   3af5a:	4611      	mov	r1, r2
   3af5c:	4618      	mov	r0, r3
   3af5e:	462a      	mov	r2, r5
   3af60:	f8d5 901c 	ldr.w	r9, [r5, #28]
   3af64:	f7fe fe84 	bl	39c70 <packet_handler_create>
   3af68:	61e8      	str	r0, [r5, #28]
   3af6a:	b1d0      	cbz	r0, 3afa2 <interface_socket_packet_handler_update+0x66>
   3af6c:	6803      	ldr	r3, [r0, #0]
   3af6e:	681b      	ldr	r3, [r3, #0]
   3af70:	4798      	blx	r3
   3af72:	4607      	mov	r7, r0
   3af74:	b948      	cbnz	r0, 3af8a <interface_socket_packet_handler_update+0x4e>
   3af76:	4648      	mov	r0, r9
   3af78:	f7fe fe9a 	bl	39cb0 <packet_handler_delete>
   3af7c:	4638      	mov	r0, r7
   3af7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3af82:	2705      	movs	r7, #5
   3af84:	4638      	mov	r0, r7
   3af86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3af8a:	69e8      	ldr	r0, [r5, #28]
   3af8c:	f7fe fe90 	bl	39cb0 <packet_handler_delete>
   3af90:	eb08 0004 	add.w	r0, r8, r4
   3af94:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   3af98:	f8c6 901c 	str.w	r9, [r6, #28]
   3af9c:	4638      	mov	r0, r7
   3af9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3afa2:	2704      	movs	r7, #4
   3afa4:	e7f4      	b.n	3af90 <interface_socket_packet_handler_update+0x54>
   3afa6:	bf00      	nop
   3afa8:	2002d6c0 	.word	0x2002d6c0

0003afac <interface_socket_wait>:
   3afac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3afb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3afb4:	4c0d      	ldr	r4, [pc, #52]	; (3afec <interface_socket_wait+0x40>)
   3afb6:	00c0      	lsls	r0, r0, #3
   3afb8:	5825      	ldr	r5, [r4, r0]
   3afba:	4404      	add	r4, r0
   3afbc:	4015      	ands	r5, r2
   3afbe:	428d      	cmp	r5, r1
   3afc0:	d011      	beq.n	3afe6 <interface_socket_wait+0x3a>
   3afc2:	6860      	ldr	r0, [r4, #4]
   3afc4:	b978      	cbnz	r0, 3afe6 <interface_socket_wait+0x3a>
   3afc6:	4698      	mov	r8, r3
   3afc8:	460f      	mov	r7, r1
   3afca:	4616      	mov	r6, r2
   3afcc:	4625      	mov	r5, r4
   3afce:	e006      	b.n	3afde <interface_socket_wait+0x32>
   3afd0:	686b      	ldr	r3, [r5, #4]
   3afd2:	b943      	cbnz	r3, 3afe6 <interface_socket_wait+0x3a>
   3afd4:	4641      	mov	r1, r8
   3afd6:	4620      	mov	r0, r4
   3afd8:	f7ee fa88 	bl	294ec <bsd_os_timedwait>
   3afdc:	b920      	cbnz	r0, 3afe8 <interface_socket_wait+0x3c>
   3afde:	6828      	ldr	r0, [r5, #0]
   3afe0:	4030      	ands	r0, r6
   3afe2:	42b8      	cmp	r0, r7
   3afe4:	d1f4      	bne.n	3afd0 <interface_socket_wait+0x24>
   3afe6:	2000      	movs	r0, #0
   3afe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3afec:	2002d6c0 	.word	0x2002d6c0

0003aff0 <interface_from_internal_id_search>:
   3aff0:	4b27      	ldr	r3, [pc, #156]	; (3b090 <interface_from_internal_id_search+0xa0>)
   3aff2:	681a      	ldr	r2, [r3, #0]
   3aff4:	b112      	cbz	r2, 3affc <interface_from_internal_id_search+0xc>
   3aff6:	699a      	ldr	r2, [r3, #24]
   3aff8:	4282      	cmp	r2, r0
   3affa:	d039      	beq.n	3b070 <interface_from_internal_id_search+0x80>
   3affc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3affe:	b112      	cbz	r2, 3b006 <interface_from_internal_id_search+0x16>
   3b000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   3b002:	4282      	cmp	r2, r0
   3b004:	d036      	beq.n	3b074 <interface_from_internal_id_search+0x84>
   3b006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   3b008:	b112      	cbz	r2, 3b010 <interface_from_internal_id_search+0x20>
   3b00a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   3b00c:	4282      	cmp	r2, r0
   3b00e:	d033      	beq.n	3b078 <interface_from_internal_id_search+0x88>
   3b010:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   3b012:	b11a      	cbz	r2, 3b01c <interface_from_internal_id_search+0x2c>
   3b014:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   3b018:	4282      	cmp	r2, r0
   3b01a:	d02f      	beq.n	3b07c <interface_from_internal_id_search+0x8c>
   3b01c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   3b020:	b11a      	cbz	r2, 3b02a <interface_from_internal_id_search+0x3a>
   3b022:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   3b026:	4282      	cmp	r2, r0
   3b028:	d02a      	beq.n	3b080 <interface_from_internal_id_search+0x90>
   3b02a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   3b02e:	b11a      	cbz	r2, 3b038 <interface_from_internal_id_search+0x48>
   3b030:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   3b034:	4282      	cmp	r2, r0
   3b036:	d025      	beq.n	3b084 <interface_from_internal_id_search+0x94>
   3b038:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   3b03c:	b11a      	cbz	r2, 3b046 <interface_from_internal_id_search+0x56>
   3b03e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   3b042:	4282      	cmp	r2, r0
   3b044:	d020      	beq.n	3b088 <interface_from_internal_id_search+0x98>
   3b046:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   3b04a:	b11a      	cbz	r2, 3b054 <interface_from_internal_id_search+0x64>
   3b04c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3b050:	4282      	cmp	r2, r0
   3b052:	d01b      	beq.n	3b08c <interface_from_internal_id_search+0x9c>
   3b054:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3b058:	b13a      	cbz	r2, 3b06a <interface_from_internal_id_search+0x7a>
   3b05a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   3b05e:	4283      	cmp	r3, r0
   3b060:	bf14      	ite	ne
   3b062:	f04f 30ff 	movne.w	r0, #4294967295
   3b066:	2008      	moveq	r0, #8
   3b068:	4770      	bx	lr
   3b06a:	f04f 30ff 	mov.w	r0, #4294967295
   3b06e:	4770      	bx	lr
   3b070:	2000      	movs	r0, #0
   3b072:	4770      	bx	lr
   3b074:	2001      	movs	r0, #1
   3b076:	4770      	bx	lr
   3b078:	2002      	movs	r0, #2
   3b07a:	4770      	bx	lr
   3b07c:	2003      	movs	r0, #3
   3b07e:	4770      	bx	lr
   3b080:	2004      	movs	r0, #4
   3b082:	4770      	bx	lr
   3b084:	2005      	movs	r0, #5
   3b086:	4770      	bx	lr
   3b088:	2006      	movs	r0, #6
   3b08a:	4770      	bx	lr
   3b08c:	2007      	movs	r0, #7
   3b08e:	4770      	bx	lr
   3b090:	2002d6c0 	.word	0x2002d6c0

0003b094 <interface_socket_from_handle_get>:
   3b094:	2808      	cmp	r0, #8
   3b096:	d807      	bhi.n	3b0a8 <interface_socket_from_handle_get+0x14>
   3b098:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b09c:	4b03      	ldr	r3, [pc, #12]	; (3b0ac <interface_socket_from_handle_get+0x18>)
   3b09e:	00c0      	lsls	r0, r0, #3
   3b0a0:	581a      	ldr	r2, [r3, r0]
   3b0a2:	b10a      	cbz	r2, 3b0a8 <interface_socket_from_handle_get+0x14>
   3b0a4:	4418      	add	r0, r3
   3b0a6:	4770      	bx	lr
   3b0a8:	2000      	movs	r0, #0
   3b0aa:	4770      	bx	lr
   3b0ac:	2002d6c0 	.word	0x2002d6c0

0003b0b0 <interface_socket_event_get>:
   3b0b0:	b119      	cbz	r1, 3b0ba <interface_socket_event_get+0xa>
   3b0b2:	2808      	cmp	r0, #8
   3b0b4:	d902      	bls.n	3b0bc <interface_socket_event_get+0xc>
   3b0b6:	2310      	movs	r3, #16
   3b0b8:	600b      	str	r3, [r1, #0]
   3b0ba:	4770      	bx	lr
   3b0bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b0c0:	4b07      	ldr	r3, [pc, #28]	; (3b0e0 <interface_socket_event_get+0x30>)
   3b0c2:	00c0      	lsls	r0, r0, #3
   3b0c4:	581a      	ldr	r2, [r3, r0]
   3b0c6:	2a00      	cmp	r2, #0
   3b0c8:	d0f5      	beq.n	3b0b6 <interface_socket_event_get+0x6>
   3b0ca:	581b      	ldr	r3, [r3, r0]
   3b0cc:	0c1b      	lsrs	r3, r3, #16
   3b0ce:	f003 020a 	and.w	r2, r3, #10
   3b0d2:	2a0a      	cmp	r2, #10
   3b0d4:	bf14      	ite	ne
   3b0d6:	f003 030f 	andne.w	r3, r3, #15
   3b0da:	f003 030d 	andeq.w	r3, r3, #13
   3b0de:	e7eb      	b.n	3b0b8 <interface_socket_event_get+0x8>
   3b0e0:	2002d6c0 	.word	0x2002d6c0

0003b0e4 <interface_socket_setopt>:
   3b0e4:	2808      	cmp	r0, #8
   3b0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b0e8:	d82c      	bhi.n	3b144 <interface_socket_setopt+0x60>
   3b0ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b0ee:	4e1e      	ldr	r6, [pc, #120]	; (3b168 <interface_socket_setopt+0x84>)
   3b0f0:	00c0      	lsls	r0, r0, #3
   3b0f2:	5834      	ldr	r4, [r6, r0]
   3b0f4:	b334      	cbz	r4, 3b144 <interface_socket_setopt+0x60>
   3b0f6:	2901      	cmp	r1, #1
   3b0f8:	d11e      	bne.n	3b138 <interface_socket_setopt+0x54>
   3b0fa:	f1a2 0114 	sub.w	r1, r2, #20
   3b0fe:	2901      	cmp	r1, #1
   3b100:	d81a      	bhi.n	3b138 <interface_socket_setopt+0x54>
   3b102:	9906      	ldr	r1, [sp, #24]
   3b104:	2908      	cmp	r1, #8
   3b106:	d123      	bne.n	3b150 <interface_socket_setopt+0x6c>
   3b108:	b313      	cbz	r3, 3b150 <interface_socket_setopt+0x6c>
   3b10a:	6859      	ldr	r1, [r3, #4]
   3b10c:	4c17      	ldr	r4, [pc, #92]	; (3b16c <interface_socket_setopt+0x88>)
   3b10e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   3b112:	fba4 4101 	umull	r4, r1, r4, r1
   3b116:	0989      	lsrs	r1, r1, #6
   3b118:	460c      	mov	r4, r1
   3b11a:	2500      	movs	r5, #0
   3b11c:	681b      	ldr	r3, [r3, #0]
   3b11e:	fbe7 4503 	umlal	r4, r5, r7, r3
   3b122:	2d01      	cmp	r5, #1
   3b124:	bf08      	it	eq
   3b126:	2c00      	cmpeq	r4, #0
   3b128:	d218      	bcs.n	3b15c <interface_socket_setopt+0x78>
   3b12a:	4430      	add	r0, r6
   3b12c:	2a14      	cmp	r2, #20
   3b12e:	bf0c      	ite	eq
   3b130:	6204      	streq	r4, [r0, #32]
   3b132:	6244      	strne	r4, [r0, #36]	; 0x24
   3b134:	2000      	movs	r0, #0
   3b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b138:	202a      	movs	r0, #42	; 0x2a
   3b13a:	f7ee fa8f 	bl	2965c <bsd_os_errno_set>
   3b13e:	f04f 30ff 	mov.w	r0, #4294967295
   3b142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b144:	2009      	movs	r0, #9
   3b146:	f7ee fa89 	bl	2965c <bsd_os_errno_set>
   3b14a:	f04f 30ff 	mov.w	r0, #4294967295
   3b14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b150:	2016      	movs	r0, #22
   3b152:	f7ee fa83 	bl	2965c <bsd_os_errno_set>
   3b156:	f04f 30ff 	mov.w	r0, #4294967295
   3b15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b15c:	2025      	movs	r0, #37	; 0x25
   3b15e:	f7ee fa7d 	bl	2965c <bsd_os_errno_set>
   3b162:	f04f 30ff 	mov.w	r0, #4294967295
   3b166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b168:	2002d6c0 	.word	0x2002d6c0
   3b16c:	10624dd3 	.word	0x10624dd3

0003b170 <interface_socket_getopt>:
   3b170:	b570      	push	{r4, r5, r6, lr}
   3b172:	2808      	cmp	r0, #8
   3b174:	9d04      	ldr	r5, [sp, #16]
   3b176:	d835      	bhi.n	3b1e4 <interface_socket_getopt+0x74>
   3b178:	4c20      	ldr	r4, [pc, #128]	; (3b1fc <interface_socket_getopt+0x8c>)
   3b17a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b17e:	00c0      	lsls	r0, r0, #3
   3b180:	5826      	ldr	r6, [r4, r0]
   3b182:	4404      	add	r4, r0
   3b184:	b376      	cbz	r6, 3b1e4 <interface_socket_getopt+0x74>
   3b186:	2901      	cmp	r1, #1
   3b188:	d132      	bne.n	3b1f0 <interface_socket_getopt+0x80>
   3b18a:	b32b      	cbz	r3, 3b1d8 <interface_socket_getopt+0x68>
   3b18c:	b325      	cbz	r5, 3b1d8 <interface_socket_getopt+0x68>
   3b18e:	2a04      	cmp	r2, #4
   3b190:	d019      	beq.n	3b1c6 <interface_socket_getopt+0x56>
   3b192:	f1a2 0114 	sub.w	r1, r2, #20
   3b196:	2901      	cmp	r1, #1
   3b198:	d82a      	bhi.n	3b1f0 <interface_socket_getopt+0x80>
   3b19a:	6829      	ldr	r1, [r5, #0]
   3b19c:	2908      	cmp	r1, #8
   3b19e:	d11b      	bne.n	3b1d8 <interface_socket_getopt+0x68>
   3b1a0:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   3b1a4:	2a14      	cmp	r2, #20
   3b1a6:	bf18      	it	ne
   3b1a8:	4601      	movne	r1, r0
   3b1aa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3b1ae:	4a14      	ldr	r2, [pc, #80]	; (3b200 <interface_socket_getopt+0x90>)
   3b1b0:	2000      	movs	r0, #0
   3b1b2:	fba2 5201 	umull	r5, r2, r2, r1
   3b1b6:	0992      	lsrs	r2, r2, #6
   3b1b8:	fb04 1112 	mls	r1, r4, r2, r1
   3b1bc:	fb04 f101 	mul.w	r1, r4, r1
   3b1c0:	e9c3 2100 	strd	r2, r1, [r3]
   3b1c4:	bd70      	pop	{r4, r5, r6, pc}
   3b1c6:	682a      	ldr	r2, [r5, #0]
   3b1c8:	2a04      	cmp	r2, #4
   3b1ca:	d105      	bne.n	3b1d8 <interface_socket_getopt+0x68>
   3b1cc:	2200      	movs	r2, #0
   3b1ce:	6861      	ldr	r1, [r4, #4]
   3b1d0:	4610      	mov	r0, r2
   3b1d2:	6019      	str	r1, [r3, #0]
   3b1d4:	6062      	str	r2, [r4, #4]
   3b1d6:	bd70      	pop	{r4, r5, r6, pc}
   3b1d8:	2016      	movs	r0, #22
   3b1da:	f7ee fa3f 	bl	2965c <bsd_os_errno_set>
   3b1de:	f04f 30ff 	mov.w	r0, #4294967295
   3b1e2:	bd70      	pop	{r4, r5, r6, pc}
   3b1e4:	2009      	movs	r0, #9
   3b1e6:	f7ee fa39 	bl	2965c <bsd_os_errno_set>
   3b1ea:	f04f 30ff 	mov.w	r0, #4294967295
   3b1ee:	bd70      	pop	{r4, r5, r6, pc}
   3b1f0:	202a      	movs	r0, #42	; 0x2a
   3b1f2:	f7ee fa33 	bl	2965c <bsd_os_errno_set>
   3b1f6:	f04f 30ff 	mov.w	r0, #4294967295
   3b1fa:	bd70      	pop	{r4, r5, r6, pc}
   3b1fc:	2002d6c0 	.word	0x2002d6c0
   3b200:	10624dd3 	.word	0x10624dd3

0003b204 <interface_shutdown>:
   3b204:	b530      	push	{r4, r5, lr}
   3b206:	4b2d      	ldr	r3, [pc, #180]	; (3b2bc <interface_shutdown+0xb8>)
   3b208:	b083      	sub	sp, #12
   3b20a:	681a      	ldr	r2, [r3, #0]
   3b20c:	b10a      	cbz	r2, 3b212 <interface_shutdown+0xe>
   3b20e:	2270      	movs	r2, #112	; 0x70
   3b210:	605a      	str	r2, [r3, #4]
   3b212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3b214:	b10a      	cbz	r2, 3b21a <interface_shutdown+0x16>
   3b216:	2270      	movs	r2, #112	; 0x70
   3b218:	62da      	str	r2, [r3, #44]	; 0x2c
   3b21a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   3b21c:	b10a      	cbz	r2, 3b222 <interface_shutdown+0x1e>
   3b21e:	2270      	movs	r2, #112	; 0x70
   3b220:	655a      	str	r2, [r3, #84]	; 0x54
   3b222:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   3b224:	b10a      	cbz	r2, 3b22a <interface_shutdown+0x26>
   3b226:	2270      	movs	r2, #112	; 0x70
   3b228:	67da      	str	r2, [r3, #124]	; 0x7c
   3b22a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   3b22e:	b112      	cbz	r2, 3b236 <interface_shutdown+0x32>
   3b230:	2270      	movs	r2, #112	; 0x70
   3b232:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
   3b236:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   3b23a:	b112      	cbz	r2, 3b242 <interface_shutdown+0x3e>
   3b23c:	2270      	movs	r2, #112	; 0x70
   3b23e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
   3b242:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   3b246:	b112      	cbz	r2, 3b24e <interface_shutdown+0x4a>
   3b248:	2270      	movs	r2, #112	; 0x70
   3b24a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
   3b24e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   3b252:	b112      	cbz	r2, 3b25a <interface_shutdown+0x56>
   3b254:	2270      	movs	r2, #112	; 0x70
   3b256:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   3b25a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3b25e:	b112      	cbz	r2, 3b266 <interface_shutdown+0x62>
   3b260:	2270      	movs	r2, #112	; 0x70
   3b262:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   3b266:	f7ee fb85 	bl	29974 <bsd_os_application_irq_set>
   3b26a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3b26e:	ac02      	add	r4, sp, #8
   3b270:	f844 3d04 	str.w	r3, [r4, #-4]!
   3b274:	4621      	mov	r1, r4
   3b276:	2000      	movs	r0, #0
   3b278:	f7ee f938 	bl	294ec <bsd_os_timedwait>
   3b27c:	9b01      	ldr	r3, [sp, #4]
   3b27e:	2b00      	cmp	r3, #0
   3b280:	dcf8      	bgt.n	3b274 <interface_shutdown+0x70>
   3b282:	4c0e      	ldr	r4, [pc, #56]	; (3b2bc <interface_shutdown+0xb8>)
   3b284:	f504 75b4 	add.w	r5, r4, #360	; 0x168
   3b288:	e009      	b.n	3b29e <interface_shutdown+0x9a>
   3b28a:	f7fe fd11 	bl	39cb0 <packet_handler_delete>
   3b28e:	2228      	movs	r2, #40	; 0x28
   3b290:	4620      	mov	r0, r4
   3b292:	2100      	movs	r1, #0
   3b294:	4414      	add	r4, r2
   3b296:	f009 fd46 	bl	44d26 <memset>
   3b29a:	42ac      	cmp	r4, r5
   3b29c:	d00a      	beq.n	3b2b4 <interface_shutdown+0xb0>
   3b29e:	69e0      	ldr	r0, [r4, #28]
   3b2a0:	2800      	cmp	r0, #0
   3b2a2:	d1f2      	bne.n	3b28a <interface_shutdown+0x86>
   3b2a4:	2228      	movs	r2, #40	; 0x28
   3b2a6:	4601      	mov	r1, r0
   3b2a8:	4620      	mov	r0, r4
   3b2aa:	4414      	add	r4, r2
   3b2ac:	f009 fd3b 	bl	44d26 <memset>
   3b2b0:	42ac      	cmp	r4, r5
   3b2b2:	d1f4      	bne.n	3b29e <interface_shutdown+0x9a>
   3b2b4:	2000      	movs	r0, #0
   3b2b6:	b003      	add	sp, #12
   3b2b8:	bd30      	pop	{r4, r5, pc}
   3b2ba:	bf00      	nop
   3b2bc:	2002d6c0 	.word	0x2002d6c0

0003b2c0 <interface_socket_fcntl>:
   3b2c0:	2808      	cmp	r0, #8
   3b2c2:	b510      	push	{r4, lr}
   3b2c4:	d826      	bhi.n	3b314 <interface_socket_fcntl+0x54>
   3b2c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b2ca:	4c1b      	ldr	r4, [pc, #108]	; (3b338 <interface_socket_fcntl+0x78>)
   3b2cc:	00c3      	lsls	r3, r0, #3
   3b2ce:	58e0      	ldr	r0, [r4, r3]
   3b2d0:	b300      	cbz	r0, 3b314 <interface_socket_fcntl+0x54>
   3b2d2:	2901      	cmp	r1, #1
   3b2d4:	d005      	beq.n	3b2e2 <interface_socket_fcntl+0x22>
   3b2d6:	2902      	cmp	r1, #2
   3b2d8:	d122      	bne.n	3b320 <interface_socket_fcntl+0x60>
   3b2da:	58e0      	ldr	r0, [r4, r3]
   3b2dc:	f3c0 7000 	ubfx	r0, r0, #28, #1
   3b2e0:	bd10      	pop	{r4, pc}
   3b2e2:	07d2      	lsls	r2, r2, #31
   3b2e4:	d410      	bmi.n	3b308 <interface_socket_fcntl+0x48>
   3b2e6:	58e0      	ldr	r0, [r4, r3]
   3b2e8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   3b2ec:	d11e      	bne.n	3b32c <interface_socket_fcntl+0x6c>
   3b2ee:	58e2      	ldr	r2, [r4, r3]
   3b2f0:	b292      	uxth	r2, r2
   3b2f2:	2a0a      	cmp	r2, #10
   3b2f4:	d01a      	beq.n	3b32c <interface_socket_fcntl+0x6c>
   3b2f6:	58e2      	ldr	r2, [r4, r3]
   3b2f8:	b292      	uxth	r2, r2
   3b2fa:	2a0b      	cmp	r2, #11
   3b2fc:	d016      	beq.n	3b32c <interface_socket_fcntl+0x6c>
   3b2fe:	58e2      	ldr	r2, [r4, r3]
   3b300:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   3b304:	50e2      	str	r2, [r4, r3]
   3b306:	bd10      	pop	{r4, pc}
   3b308:	58e2      	ldr	r2, [r4, r3]
   3b30a:	2000      	movs	r0, #0
   3b30c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   3b310:	50e2      	str	r2, [r4, r3]
   3b312:	bd10      	pop	{r4, pc}
   3b314:	2009      	movs	r0, #9
   3b316:	f7ee f9a1 	bl	2965c <bsd_os_errno_set>
   3b31a:	f04f 30ff 	mov.w	r0, #4294967295
   3b31e:	bd10      	pop	{r4, pc}
   3b320:	2016      	movs	r0, #22
   3b322:	f7ee f99b 	bl	2965c <bsd_os_errno_set>
   3b326:	f04f 30ff 	mov.w	r0, #4294967295
   3b32a:	bd10      	pop	{r4, pc}
   3b32c:	2023      	movs	r0, #35	; 0x23
   3b32e:	f7ee f995 	bl	2965c <bsd_os_errno_set>
   3b332:	f04f 30ff 	mov.w	r0, #4294967295
   3b336:	bd10      	pop	{r4, pc}
   3b338:	2002d6c0 	.word	0x2002d6c0

0003b33c <at_client_evt_handler>:
   3b33c:	b120      	cbz	r0, 3b348 <at_client_evt_handler+0xc>
   3b33e:	f850 1b08 	ldr.w	r1, [r0], #8
   3b342:	0c09      	lsrs	r1, r1, #16
   3b344:	f7fc bce0 	b.w	37d08 <rpc_at_event_handler>
   3b348:	4770      	bx	lr
   3b34a:	bf00      	nop

0003b34c <rpc_at_client_init>:
   3b34c:	4801      	ldr	r0, [pc, #4]	; (3b354 <rpc_at_client_init+0x8>)
   3b34e:	f7fb ba1d 	b.w	3678c <rpc_client_register>
   3b352:	bf00      	nop
   3b354:	00047260 	.word	0x00047260

0003b358 <rpc_at_client_deinit>:
   3b358:	2003      	movs	r0, #3
   3b35a:	f7fb ba81 	b.w	36860 <rpc_client_unregister>
   3b35e:	bf00      	nop

0003b360 <rpc_at_client_request_alloc>:
   3b360:	b180      	cbz	r0, 3b384 <rpc_at_client_request_alloc+0x24>
   3b362:	2300      	movs	r3, #0
   3b364:	b510      	push	{r4, lr}
   3b366:	b082      	sub	sp, #8
   3b368:	aa02      	add	r2, sp, #8
   3b36a:	4604      	mov	r4, r0
   3b36c:	f842 3d04 	str.w	r3, [r2, #-4]!
   3b370:	2003      	movs	r0, #3
   3b372:	f7fb facb 	bl	3690c <rpc_message_alloc>
   3b376:	b918      	cbnz	r0, 3b380 <rpc_at_client_request_alloc+0x20>
   3b378:	9b01      	ldr	r3, [sp, #4]
   3b37a:	b10b      	cbz	r3, 3b380 <rpc_at_client_request_alloc+0x20>
   3b37c:	3308      	adds	r3, #8
   3b37e:	6023      	str	r3, [r4, #0]
   3b380:	b002      	add	sp, #8
   3b382:	bd10      	pop	{r4, pc}
   3b384:	200e      	movs	r0, #14
   3b386:	4770      	bx	lr

0003b388 <rpc_at_client_request_send>:
   3b388:	b150      	cbz	r0, 3b3a0 <rpc_at_client_request_send+0x18>
   3b38a:	4603      	mov	r3, r0
   3b38c:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3b390:	2003      	movs	r0, #3
   3b392:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3b396:	f843 1d08 	str.w	r1, [r3, #-8]!
   3b39a:	4619      	mov	r1, r3
   3b39c:	f7fb baa6 	b.w	368ec <rpc_message_send>
   3b3a0:	200e      	movs	r0, #14
   3b3a2:	4770      	bx	lr

0003b3a4 <rpc_at_client_message_free>:
   3b3a4:	b120      	cbz	r0, 3b3b0 <rpc_at_client_message_free+0xc>
   3b3a6:	f1a0 0108 	sub.w	r1, r0, #8
   3b3aa:	2003      	movs	r0, #3
   3b3ac:	f7fb bada 	b.w	36964 <rpc_message_free>
   3b3b0:	200e      	movs	r0, #14
   3b3b2:	4770      	bx	lr

0003b3b4 <rpc_at_client_data_free>:
   3b3b4:	b118      	cbz	r0, 3b3be <rpc_at_client_data_free+0xa>
   3b3b6:	4601      	mov	r1, r0
   3b3b8:	2003      	movs	r0, #3
   3b3ba:	f7fb badf 	b.w	3697c <rpc_message_data_free>
   3b3be:	200e      	movs	r0, #14
   3b3c0:	4770      	bx	lr
   3b3c2:	bf00      	nop

0003b3c4 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   3b3c4:	4a07      	ldr	r2, [pc, #28]	; (3b3e4 <SystemInit+0x20>)
   3b3c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   3b3ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   3b3ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   3b3d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3b3d6:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   3b3da:	4b03      	ldr	r3, [pc, #12]	; (3b3e8 <SystemInit+0x24>)
   3b3dc:	4a03      	ldr	r2, [pc, #12]	; (3b3ec <SystemInit+0x28>)
   3b3de:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   3b3e0:	4770      	bx	lr
   3b3e2:	bf00      	nop
   3b3e4:	e000ed00 	.word	0xe000ed00
   3b3e8:	20020750 	.word	0x20020750
   3b3ec:	03d09000 	.word	0x03d09000

0003b3f0 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   3b3f0:	b508      	push	{r3, lr}
    switch (domain)
   3b3f2:	b178      	cbz	r0, 3b414 <nrf_clock_is_running.constprop.0+0x24>
   3b3f4:	2801      	cmp	r0, #1
   3b3f6:	d019      	beq.n	3b42c <nrf_clock_is_running.constprop.0+0x3c>
            NRFX_ASSERT(0);
   3b3f8:	f240 3342 	movw	r3, #834	; 0x342
   3b3fc:	4a10      	ldr	r2, [pc, #64]	; (3b440 <nrf_clock_is_running.constprop.0+0x50>)
   3b3fe:	4911      	ldr	r1, [pc, #68]	; (3b444 <nrf_clock_is_running.constprop.0+0x54>)
   3b400:	4811      	ldr	r0, [pc, #68]	; (3b448 <nrf_clock_is_running.constprop.0+0x58>)
   3b402:	f005 ffdf 	bl	413c4 <printk>
   3b406:	480e      	ldr	r0, [pc, #56]	; (3b440 <nrf_clock_is_running.constprop.0+0x50>)
   3b408:	f240 3142 	movw	r1, #834	; 0x342
   3b40c:	f006 f9f7 	bl	417fe <assert_post_action>
            return false;
   3b410:	2000      	movs	r0, #0
   3b412:	e00a      	b.n	3b42a <nrf_clock_is_running.constprop.0+0x3a>
            if (p_clk_src != NULL)
   3b414:	4a0d      	ldr	r2, [pc, #52]	; (3b44c <nrf_clock_is_running.constprop.0+0x5c>)
   3b416:	b121      	cbz	r1, 3b422 <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3b418:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   3b41c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   3b420:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3b422:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3b426:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   3b42a:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   3b42c:	4a07      	ldr	r2, [pc, #28]	; (3b44c <nrf_clock_is_running.constprop.0+0x5c>)
   3b42e:	b121      	cbz	r1, 3b43a <nrf_clock_is_running.constprop.0+0x4a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3b430:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   3b434:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   3b438:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3b43a:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   3b43e:	e7f2      	b.n	3b426 <nrf_clock_is_running.constprop.0+0x36>
   3b440:	0004e974 	.word	0x0004e974
   3b444:	0004ef58 	.word	0x0004ef58
   3b448:	00048156 	.word	0x00048156
   3b44c:	40005000 	.word	0x40005000

0003b450 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   3b450:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   3b452:	4604      	mov	r4, r0
   3b454:	b948      	cbnz	r0, 3b46a <nrfx_clock_init+0x1a>
   3b456:	490a      	ldr	r1, [pc, #40]	; (3b480 <nrfx_clock_init+0x30>)
   3b458:	480a      	ldr	r0, [pc, #40]	; (3b484 <nrfx_clock_init+0x34>)
   3b45a:	23b3      	movs	r3, #179	; 0xb3
   3b45c:	4a0a      	ldr	r2, [pc, #40]	; (3b488 <nrfx_clock_init+0x38>)
   3b45e:	f005 ffb1 	bl	413c4 <printk>
   3b462:	21b3      	movs	r1, #179	; 0xb3
   3b464:	4808      	ldr	r0, [pc, #32]	; (3b488 <nrfx_clock_init+0x38>)
   3b466:	f006 f9ca 	bl	417fe <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   3b46a:	4b08      	ldr	r3, [pc, #32]	; (3b48c <nrfx_clock_init+0x3c>)
   3b46c:	791a      	ldrb	r2, [r3, #4]
   3b46e:	b922      	cbnz	r2, 3b47a <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   3b470:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   3b472:	4807      	ldr	r0, [pc, #28]	; (3b490 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   3b474:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   3b476:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3b478:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   3b47a:	4806      	ldr	r0, [pc, #24]	; (3b494 <nrfx_clock_init+0x44>)
    return err_code;
   3b47c:	e7fc      	b.n	3b478 <nrfx_clock_init+0x28>
   3b47e:	bf00      	nop
   3b480:	0004e9e5 	.word	0x0004e9e5
   3b484:	00048156 	.word	0x00048156
   3b488:	0004e9a8 	.word	0x0004e9a8
   3b48c:	20025d34 	.word	0x20025d34
   3b490:	0bad0000 	.word	0x0bad0000
   3b494:	0bad000c 	.word	0x0bad000c

0003b498 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   3b498:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3b49a:	4b0b      	ldr	r3, [pc, #44]	; (3b4c8 <nrfx_clock_enable+0x30>)
   3b49c:	791b      	ldrb	r3, [r3, #4]
   3b49e:	b94b      	cbnz	r3, 3b4b4 <nrfx_clock_enable+0x1c>
   3b4a0:	490a      	ldr	r1, [pc, #40]	; (3b4cc <nrfx_clock_enable+0x34>)
   3b4a2:	480b      	ldr	r0, [pc, #44]	; (3b4d0 <nrfx_clock_enable+0x38>)
   3b4a4:	23cc      	movs	r3, #204	; 0xcc
   3b4a6:	4a0b      	ldr	r2, [pc, #44]	; (3b4d4 <nrfx_clock_enable+0x3c>)
   3b4a8:	f005 ff8c 	bl	413c4 <printk>
   3b4ac:	21cc      	movs	r1, #204	; 0xcc
   3b4ae:	4809      	ldr	r0, [pc, #36]	; (3b4d4 <nrfx_clock_enable+0x3c>)
   3b4b0:	f006 f9a5 	bl	417fe <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3b4b4:	2005      	movs	r0, #5
   3b4b6:	f7eb fb65 	bl	26b84 <arch_irq_is_enabled>
   3b4ba:	b920      	cbnz	r0, 3b4c6 <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   3b4bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3b4c0:	2005      	movs	r0, #5
   3b4c2:	f7eb bb4f 	b.w	26b64 <arch_irq_enable>
   3b4c6:	bd08      	pop	{r3, pc}
   3b4c8:	20025d34 	.word	0x20025d34
   3b4cc:	0004e9f3 	.word	0x0004e9f3
   3b4d0:	00048156 	.word	0x00048156
   3b4d4:	0004e9a8 	.word	0x0004e9a8

0003b4d8 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3b4d8:	4b22      	ldr	r3, [pc, #136]	; (3b564 <nrfx_clock_start+0x8c>)
{
   3b4da:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3b4dc:	791b      	ldrb	r3, [r3, #4]
{
   3b4de:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3b4e0:	b95b      	cbnz	r3, 3b4fa <nrfx_clock_start+0x22>
   3b4e2:	4921      	ldr	r1, [pc, #132]	; (3b568 <nrfx_clock_start+0x90>)
   3b4e4:	4821      	ldr	r0, [pc, #132]	; (3b56c <nrfx_clock_start+0x94>)
   3b4e6:	f44f 7384 	mov.w	r3, #264	; 0x108
   3b4ea:	4a21      	ldr	r2, [pc, #132]	; (3b570 <nrfx_clock_start+0x98>)
   3b4ec:	f005 ff6a 	bl	413c4 <printk>
   3b4f0:	f44f 7184 	mov.w	r1, #264	; 0x108
   3b4f4:	481e      	ldr	r0, [pc, #120]	; (3b570 <nrfx_clock_start+0x98>)
   3b4f6:	f006 f982 	bl	417fe <assert_post_action>
    switch (domain)
   3b4fa:	b174      	cbz	r4, 3b51a <nrfx_clock_start+0x42>
   3b4fc:	2c01      	cmp	r4, #1
   3b4fe:	d027      	beq.n	3b550 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   3b500:	f44f 739d 	mov.w	r3, #314	; 0x13a
   3b504:	4a1a      	ldr	r2, [pc, #104]	; (3b570 <nrfx_clock_start+0x98>)
   3b506:	491b      	ldr	r1, [pc, #108]	; (3b574 <nrfx_clock_start+0x9c>)
   3b508:	4818      	ldr	r0, [pc, #96]	; (3b56c <nrfx_clock_start+0x94>)
   3b50a:	f005 ff5b 	bl	413c4 <printk>
   3b50e:	f44f 719d 	mov.w	r1, #314	; 0x13a
   3b512:	4817      	ldr	r0, [pc, #92]	; (3b570 <nrfx_clock_start+0x98>)
   3b514:	f006 f973 	bl	417fe <assert_post_action>
            break;
    }
}
   3b518:	e016      	b.n	3b548 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   3b51a:	4620      	mov	r0, r4
   3b51c:	f10d 0107 	add.w	r1, sp, #7
   3b520:	f7ff ff66 	bl	3b3f0 <nrf_clock_is_running.constprop.0>
   3b524:	4b14      	ldr	r3, [pc, #80]	; (3b578 <nrfx_clock_start+0xa0>)
   3b526:	b188      	cbz	r0, 3b54c <nrfx_clock_start+0x74>
   3b528:	f89d 2007 	ldrb.w	r2, [sp, #7]
   3b52c:	2a02      	cmp	r2, #2
   3b52e:	d10d      	bne.n	3b54c <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3b530:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b534:	2200      	movs	r2, #0
   3b536:	4b11      	ldr	r3, [pc, #68]	; (3b57c <nrfx_clock_start+0xa4>)
   3b538:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   3b53a:	2202      	movs	r2, #2
   3b53c:	681b      	ldr	r3, [r3, #0]
   3b53e:	4b0e      	ldr	r3, [pc, #56]	; (3b578 <nrfx_clock_start+0xa0>)
   3b540:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b544:	2201      	movs	r2, #1
   3b546:	609a      	str	r2, [r3, #8]
}
   3b548:	b002      	add	sp, #8
   3b54a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   3b54c:	2201      	movs	r2, #1
   3b54e:	e7ef      	b.n	3b530 <nrfx_clock_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b550:	2200      	movs	r2, #0
   3b552:	4b0b      	ldr	r3, [pc, #44]	; (3b580 <nrfx_clock_start+0xa8>)
   3b554:	601a      	str	r2, [r3, #0]
   3b556:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   3b558:	4b07      	ldr	r3, [pc, #28]	; (3b578 <nrfx_clock_start+0xa0>)
   3b55a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b55e:	601c      	str	r4, [r3, #0]
}
   3b560:	e7f2      	b.n	3b548 <nrfx_clock_start+0x70>
   3b562:	bf00      	nop
   3b564:	20025d34 	.word	0x20025d34
   3b568:	0004e9f3 	.word	0x0004e9f3
   3b56c:	00048156 	.word	0x00048156
   3b570:	0004e9a8 	.word	0x0004e9a8
   3b574:	0004ef58 	.word	0x0004ef58
   3b578:	40005000 	.word	0x40005000
   3b57c:	40005104 	.word	0x40005104
   3b580:	40005100 	.word	0x40005100

0003b584 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3b584:	4b2d      	ldr	r3, [pc, #180]	; (3b63c <nrfx_clock_stop+0xb8>)
{
   3b586:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3b588:	791b      	ldrb	r3, [r3, #4]
{
   3b58a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3b58c:	b95b      	cbnz	r3, 3b5a6 <nrfx_clock_stop+0x22>
   3b58e:	492c      	ldr	r1, [pc, #176]	; (3b640 <nrfx_clock_stop+0xbc>)
   3b590:	482c      	ldr	r0, [pc, #176]	; (3b644 <nrfx_clock_stop+0xc0>)
   3b592:	f240 1341 	movw	r3, #321	; 0x141
   3b596:	4a2c      	ldr	r2, [pc, #176]	; (3b648 <nrfx_clock_stop+0xc4>)
   3b598:	f005 ff14 	bl	413c4 <printk>
   3b59c:	f240 1141 	movw	r1, #321	; 0x141
   3b5a0:	4829      	ldr	r0, [pc, #164]	; (3b648 <nrfx_clock_stop+0xc4>)
   3b5a2:	f006 f92c 	bl	417fe <assert_post_action>
    switch (domain)
   3b5a6:	b17c      	cbz	r4, 3b5c8 <nrfx_clock_stop+0x44>
   3b5a8:	2c01      	cmp	r4, #1
   3b5aa:	d027      	beq.n	3b5fc <nrfx_clock_stop+0x78>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   3b5ac:	4927      	ldr	r1, [pc, #156]	; (3b64c <nrfx_clock_stop+0xc8>)
   3b5ae:	4825      	ldr	r0, [pc, #148]	; (3b644 <nrfx_clock_stop+0xc0>)
   3b5b0:	f240 135d 	movw	r3, #349	; 0x15d
   3b5b4:	4a24      	ldr	r2, [pc, #144]	; (3b648 <nrfx_clock_stop+0xc4>)
   3b5b6:	f005 ff05 	bl	413c4 <printk>
   3b5ba:	f240 115d 	movw	r1, #349	; 0x15d
   3b5be:	4822      	ldr	r0, [pc, #136]	; (3b648 <nrfx_clock_stop+0xc4>)
   3b5c0:	f006 f91d 	bl	417fe <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   3b5c4:	b002      	add	sp, #8
   3b5c6:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   3b5c8:	2202      	movs	r2, #2
   3b5ca:	4b21      	ldr	r3, [pc, #132]	; (3b650 <nrfx_clock_stop+0xcc>)
   3b5cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b5d0:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b5d2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b5d6:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b5da:	f503 7382 	add.w	r3, r3, #260	; 0x104
   3b5de:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b5e0:	4b1c      	ldr	r3, [pc, #112]	; (3b654 <nrfx_clock_stop+0xd0>)
   3b5e2:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   3b5e4:	2100      	movs	r1, #0
   3b5e6:	4608      	mov	r0, r1
   3b5e8:	f7ff ff02 	bl	3b3f0 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   3b5ec:	2800      	cmp	r0, #0
   3b5ee:	d0e9      	beq.n	3b5c4 <nrfx_clock_stop+0x40>
   3b5f0:	2001      	movs	r0, #1
   3b5f2:	f009 f979 	bl	448e8 <nrfx_busy_wait>
   3b5f6:	3c01      	subs	r4, #1
   3b5f8:	d1f4      	bne.n	3b5e4 <nrfx_clock_stop+0x60>
   3b5fa:	e7e3      	b.n	3b5c4 <nrfx_clock_stop+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b5fc:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   3b5fe:	4b14      	ldr	r3, [pc, #80]	; (3b650 <nrfx_clock_stop+0xcc>)
   3b600:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b604:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3b608:	f503 7380 	add.w	r3, r3, #256	; 0x100
   3b60c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b60e:	4b12      	ldr	r3, [pc, #72]	; (3b658 <nrfx_clock_stop+0xd4>)
   3b610:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   3b612:	f88d 4007 	strb.w	r4, [sp, #7]
   3b616:	f242 7410 	movw	r4, #10000	; 0x2710
   3b61a:	2001      	movs	r0, #1
   3b61c:	f10d 0107 	add.w	r1, sp, #7
   3b620:	f7ff fee6 	bl	3b3f0 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   3b624:	2800      	cmp	r0, #0
   3b626:	d0cd      	beq.n	3b5c4 <nrfx_clock_stop+0x40>
   3b628:	f89d 0007 	ldrb.w	r0, [sp, #7]
   3b62c:	2801      	cmp	r0, #1
   3b62e:	d1c9      	bne.n	3b5c4 <nrfx_clock_stop+0x40>
   3b630:	f009 f95a 	bl	448e8 <nrfx_busy_wait>
   3b634:	3c01      	subs	r4, #1
   3b636:	d1f0      	bne.n	3b61a <nrfx_clock_stop+0x96>
   3b638:	e7c4      	b.n	3b5c4 <nrfx_clock_stop+0x40>
   3b63a:	bf00      	nop
   3b63c:	20025d34 	.word	0x20025d34
   3b640:	0004e9f3 	.word	0x0004e9f3
   3b644:	00048156 	.word	0x00048156
   3b648:	0004e9a8 	.word	0x0004e9a8
   3b64c:	0004ef58 	.word	0x0004ef58
   3b650:	40005000 	.word	0x40005000
   3b654:	4000500c 	.word	0x4000500c
   3b658:	40005004 	.word	0x40005004

0003b65c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3b65c:	4b15      	ldr	r3, [pc, #84]	; (3b6b4 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3b65e:	b507      	push	{r0, r1, r2, lr}
   3b660:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   3b662:	b14a      	cbz	r2, 3b678 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b664:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   3b666:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b668:	6018      	str	r0, [r3, #0]
   3b66a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   3b66c:	4b12      	ldr	r3, [pc, #72]	; (3b6b8 <nrfx_power_clock_irq_handler+0x5c>)
   3b66e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   3b672:	4b12      	ldr	r3, [pc, #72]	; (3b6bc <nrfx_power_clock_irq_handler+0x60>)
   3b674:	681b      	ldr	r3, [r3, #0]
   3b676:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3b678:	4b11      	ldr	r3, [pc, #68]	; (3b6c0 <nrfx_power_clock_irq_handler+0x64>)
   3b67a:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   3b67c:	b17a      	cbz	r2, 3b69e <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b67e:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   3b680:	f10d 0107 	add.w	r1, sp, #7
   3b684:	6018      	str	r0, [r3, #0]
   3b686:	681b      	ldr	r3, [r3, #0]
   3b688:	f7ff feb2 	bl	3b3f0 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   3b68c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   3b690:	2202      	movs	r2, #2
   3b692:	2901      	cmp	r1, #1
   3b694:	4b08      	ldr	r3, [pc, #32]	; (3b6b8 <nrfx_power_clock_irq_handler+0x5c>)
   3b696:	d105      	bne.n	3b6a4 <nrfx_power_clock_irq_handler+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3b698:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b69c:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   3b69e:	b003      	add	sp, #12
   3b6a0:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   3b6a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3b6a8:	4b04      	ldr	r3, [pc, #16]	; (3b6bc <nrfx_power_clock_irq_handler+0x60>)
   3b6aa:	2001      	movs	r0, #1
   3b6ac:	681b      	ldr	r3, [r3, #0]
   3b6ae:	4798      	blx	r3
}
   3b6b0:	e7f5      	b.n	3b69e <nrfx_power_clock_irq_handler+0x42>
   3b6b2:	bf00      	nop
   3b6b4:	40005100 	.word	0x40005100
   3b6b8:	40005000 	.word	0x40005000
   3b6bc:	20025d34 	.word	0x20025d34
   3b6c0:	40005104 	.word	0x40005104

0003b6c4 <nrfx_nvmc_page_erase>:
    return ((addr & 0x1u) == 0u);
}

__STATIC_INLINE bool is_valid_address(uint32_t addr, bool uicr_allowed)
{
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3b6c4:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   3b6c8:	b510      	push	{r4, lr}
   3b6ca:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3b6cc:	d30b      	bcc.n	3b6e6 <nrfx_nvmc_page_erase+0x22>
    NRFX_ASSERT(is_valid_address(addr, false));
   3b6ce:	4910      	ldr	r1, [pc, #64]	; (3b710 <nrfx_nvmc_page_erase+0x4c>)
   3b6d0:	4810      	ldr	r0, [pc, #64]	; (3b714 <nrfx_nvmc_page_erase+0x50>)
   3b6d2:	f44f 7382 	mov.w	r3, #260	; 0x104
   3b6d6:	4a10      	ldr	r2, [pc, #64]	; (3b718 <nrfx_nvmc_page_erase+0x54>)
   3b6d8:	f005 fe74 	bl	413c4 <printk>
   3b6dc:	f44f 7182 	mov.w	r1, #260	; 0x104
   3b6e0:	480d      	ldr	r0, [pc, #52]	; (3b718 <nrfx_nvmc_page_erase+0x54>)
   3b6e2:	f006 f88c 	bl	417fe <assert_post_action>
    return !(addr % flash_page_size_get());
   3b6e6:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   3b6ea:	b97b      	cbnz	r3, 3b70c <nrfx_nvmc_page_erase+0x48>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   3b6ec:	2202      	movs	r2, #2
   3b6ee:	4b0b      	ldr	r3, [pc, #44]	; (3b71c <nrfx_nvmc_page_erase+0x58>)
   3b6f0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   3b6f4:	f04f 32ff 	mov.w	r2, #4294967295
   3b6f8:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3b6fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3b6fe:	07d2      	lsls	r2, r2, #31
   3b700:	d5fb      	bpl.n	3b6fa <nrfx_nvmc_page_erase+0x36>
    p_reg->CONFIGNS = (uint32_t)mode;
   3b702:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3b704:	4806      	ldr	r0, [pc, #24]	; (3b720 <nrfx_nvmc_page_erase+0x5c>)
   3b706:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   3b70a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   3b70c:	4805      	ldr	r0, [pc, #20]	; (3b724 <nrfx_nvmc_page_erase+0x60>)
   3b70e:	e7fc      	b.n	3b70a <nrfx_nvmc_page_erase+0x46>
   3b710:	0004ea6d 	.word	0x0004ea6d
   3b714:	00048156 	.word	0x00048156
   3b718:	0004ea11 	.word	0x0004ea11
   3b71c:	40039000 	.word	0x40039000
   3b720:	0bad0000 	.word	0x0bad0000
   3b724:	0bad000a 	.word	0x0bad000a

0003b728 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3b728:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   3b72c:	b538      	push	{r3, r4, r5, lr}
   3b72e:	4604      	mov	r4, r0
   3b730:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3b732:	d30b      	bcc.n	3b74c <nrfx_nvmc_word_write+0x24>
    NRFX_ASSERT(is_valid_address(addr, true));
   3b734:	4914      	ldr	r1, [pc, #80]	; (3b788 <nrfx_nvmc_word_write+0x60>)
   3b736:	4815      	ldr	r0, [pc, #84]	; (3b78c <nrfx_nvmc_word_write+0x64>)
   3b738:	f44f 73c9 	mov.w	r3, #402	; 0x192
   3b73c:	4a14      	ldr	r2, [pc, #80]	; (3b790 <nrfx_nvmc_word_write+0x68>)
   3b73e:	f005 fe41 	bl	413c4 <printk>
   3b742:	f44f 71c9 	mov.w	r1, #402	; 0x192
   3b746:	4812      	ldr	r0, [pc, #72]	; (3b790 <nrfx_nvmc_word_write+0x68>)
   3b748:	f006 f859 	bl	417fe <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   3b74c:	07a1      	lsls	r1, r4, #30
   3b74e:	d00b      	beq.n	3b768 <nrfx_nvmc_word_write+0x40>
   3b750:	4910      	ldr	r1, [pc, #64]	; (3b794 <nrfx_nvmc_word_write+0x6c>)
   3b752:	480e      	ldr	r0, [pc, #56]	; (3b78c <nrfx_nvmc_word_write+0x64>)
   3b754:	f240 1393 	movw	r3, #403	; 0x193
   3b758:	4a0d      	ldr	r2, [pc, #52]	; (3b790 <nrfx_nvmc_word_write+0x68>)
   3b75a:	f005 fe33 	bl	413c4 <printk>
   3b75e:	f240 1193 	movw	r1, #403	; 0x193
   3b762:	480b      	ldr	r0, [pc, #44]	; (3b790 <nrfx_nvmc_word_write+0x68>)
   3b764:	f006 f84b 	bl	417fe <assert_post_action>
   3b768:	2201      	movs	r2, #1
   3b76a:	4b0b      	ldr	r3, [pc, #44]	; (3b798 <nrfx_nvmc_word_write+0x70>)
   3b76c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   3b770:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   3b774:	07d2      	lsls	r2, r2, #31
   3b776:	d5fb      	bpl.n	3b770 <nrfx_nvmc_word_write+0x48>
    *(volatile uint32_t *)addr = value;
   3b778:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3b77a:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIGNS = (uint32_t)mode;
   3b77e:	2200      	movs	r2, #0
   3b780:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   3b784:	bd38      	pop	{r3, r4, r5, pc}
   3b786:	bf00      	nop
   3b788:	0004ea87 	.word	0x0004ea87
   3b78c:	00048156 	.word	0x00048156
   3b790:	0004ea11 	.word	0x0004ea11
   3b794:	0004eaa1 	.word	0x0004eaa1
   3b798:	40039000 	.word	0x40039000

0003b79c <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   3b79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b7a0:	4604      	mov	r4, r0
   3b7a2:	4690      	mov	r8, r2
    NRFX_ASSERT(p_config);
   3b7a4:	460d      	mov	r5, r1
   3b7a6:	b949      	cbnz	r1, 3b7bc <nrfx_wdt_init+0x20>
   3b7a8:	4922      	ldr	r1, [pc, #136]	; (3b834 <nrfx_wdt_init+0x98>)
   3b7aa:	4823      	ldr	r0, [pc, #140]	; (3b838 <nrfx_wdt_init+0x9c>)
   3b7ac:	233d      	movs	r3, #61	; 0x3d
   3b7ae:	4a23      	ldr	r2, [pc, #140]	; (3b83c <nrfx_wdt_init+0xa0>)
   3b7b0:	f005 fe08 	bl	413c4 <printk>
   3b7b4:	213d      	movs	r1, #61	; 0x3d
   3b7b6:	4821      	ldr	r0, [pc, #132]	; (3b83c <nrfx_wdt_init+0xa0>)
   3b7b8:	f006 f821 	bl	417fe <assert_post_action>
    nrfx_err_t err_code;

    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3b7bc:	7922      	ldrb	r2, [r4, #4]

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   3b7be:	4b20      	ldr	r3, [pc, #128]	; (3b840 <nrfx_wdt_init+0xa4>)
   3b7c0:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   3b7c4:	f8c1 8004 	str.w	r8, [r1, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   3b7c8:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   3b7cc:	bb79      	cbnz	r1, 3b82e <nrfx_wdt_init+0x92>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3b7ce:	2001      	movs	r0, #1
   3b7d0:	f803 0032 	strb.w	r0, [r3, r2, lsl #3]
    p_reg->CONFIG = behaviour;
   3b7d4:	782a      	ldrb	r2, [r5, #0]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   3b7d6:	6823      	ldr	r3, [r4, #0]
   3b7d8:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   3b7dc:	686b      	ldr	r3, [r5, #4]
   3b7de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3b7e2:	0c5f      	lsrs	r7, r3, #17
   3b7e4:	03de      	lsls	r6, r3, #15
   3b7e6:	4630      	mov	r0, r6
   3b7e8:	2300      	movs	r3, #0
   3b7ea:	4639      	mov	r1, r7
   3b7ec:	f7e1 fb66 	bl	1cebc <__aeabi_uldivmod>
    NRFX_ASSERT(ticks <= UINT32_MAX);
   3b7f0:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   3b7f4:	bf08      	it	eq
   3b7f6:	2e00      	cmpeq	r6, #0
    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   3b7f8:	4605      	mov	r5, r0
    NRFX_ASSERT(ticks <= UINT32_MAX);
   3b7fa:	d309      	bcc.n	3b810 <nrfx_wdt_init+0x74>
   3b7fc:	4911      	ldr	r1, [pc, #68]	; (3b844 <nrfx_wdt_init+0xa8>)
   3b7fe:	480e      	ldr	r0, [pc, #56]	; (3b838 <nrfx_wdt_init+0x9c>)
   3b800:	2358      	movs	r3, #88	; 0x58
   3b802:	4a0e      	ldr	r2, [pc, #56]	; (3b83c <nrfx_wdt_init+0xa0>)
   3b804:	f005 fdde 	bl	413c4 <printk>
   3b808:	2158      	movs	r1, #88	; 0x58
   3b80a:	480c      	ldr	r0, [pc, #48]	; (3b83c <nrfx_wdt_init+0xa0>)
   3b80c:	f005 fff7 	bl	417fe <assert_post_action>

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);
   3b810:	6820      	ldr	r0, [r4, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   3b812:	f8c0 5504 	str.w	r5, [r0, #1284]	; 0x504

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   3b816:	f1b8 0f00 	cmp.w	r8, #0
   3b81a:	d006      	beq.n	3b82a <nrfx_wdt_init+0x8e>
    p_reg->INTENSET = mask;
   3b81c:	2201      	movs	r2, #1
   3b81e:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   3b822:	f340 3007 	sbfx	r0, r0, #12, #8
   3b826:	f7eb f99d 	bl	26b64 <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   3b82a:	4807      	ldr	r0, [pc, #28]	; (3b848 <nrfx_wdt_init+0xac>)
   3b82c:	e000      	b.n	3b830 <nrfx_wdt_init+0x94>
        return err_code;
   3b82e:	4807      	ldr	r0, [pc, #28]	; (3b84c <nrfx_wdt_init+0xb0>)
}
   3b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b834:	0004eb05 	.word	0x0004eb05
   3b838:	00048156 	.word	0x00048156
   3b83c:	0004eaca 	.word	0x0004eaca
   3b840:	20025d3c 	.word	0x20025d3c
   3b844:	0004eb0e 	.word	0x0004eb0e
   3b848:	0bad0000 	.word	0x0bad0000
   3b84c:	0bad0005 	.word	0x0bad0005

0003b850 <nrfx_wdt_enable>:


void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
   3b850:	b570      	push	{r4, r5, r6, lr}
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
   3b852:	4c13      	ldr	r4, [pc, #76]	; (3b8a0 <nrfx_wdt_enable+0x50>)
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3b854:	7906      	ldrb	r6, [r0, #4]
{
   3b856:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->alloc_index != 0);
   3b858:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   3b85c:	785b      	ldrb	r3, [r3, #1]
   3b85e:	b94b      	cbnz	r3, 3b874 <nrfx_wdt_enable+0x24>
   3b860:	4910      	ldr	r1, [pc, #64]	; (3b8a4 <nrfx_wdt_enable+0x54>)
   3b862:	4811      	ldr	r0, [pc, #68]	; (3b8a8 <nrfx_wdt_enable+0x58>)
   3b864:	236e      	movs	r3, #110	; 0x6e
   3b866:	4a11      	ldr	r2, [pc, #68]	; (3b8ac <nrfx_wdt_enable+0x5c>)
   3b868:	f005 fdac 	bl	413c4 <printk>
   3b86c:	216e      	movs	r1, #110	; 0x6e
   3b86e:	480f      	ldr	r0, [pc, #60]	; (3b8ac <nrfx_wdt_enable+0x5c>)
   3b870:	f005 ffc5 	bl	417fe <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3b874:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   3b878:	2b01      	cmp	r3, #1
   3b87a:	d009      	beq.n	3b890 <nrfx_wdt_enable+0x40>
   3b87c:	490c      	ldr	r1, [pc, #48]	; (3b8b0 <nrfx_wdt_enable+0x60>)
   3b87e:	480a      	ldr	r0, [pc, #40]	; (3b8a8 <nrfx_wdt_enable+0x58>)
   3b880:	236f      	movs	r3, #111	; 0x6f
   3b882:	4a0a      	ldr	r2, [pc, #40]	; (3b8ac <nrfx_wdt_enable+0x5c>)
   3b884:	f005 fd9e 	bl	413c4 <printk>
   3b888:	216f      	movs	r1, #111	; 0x6f
   3b88a:	4808      	ldr	r0, [pc, #32]	; (3b8ac <nrfx_wdt_enable+0x5c>)
   3b88c:	f005 ffb7 	bl	417fe <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   3b890:	2201      	movs	r2, #1
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   3b892:	682b      	ldr	r3, [r5, #0]
   3b894:	601a      	str	r2, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   3b896:	2302      	movs	r3, #2
   3b898:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   3b89c:	bd70      	pop	{r4, r5, r6, pc}
   3b89e:	bf00      	nop
   3b8a0:	20025d3c 	.word	0x20025d3c
   3b8a4:	0004eb24 	.word	0x0004eb24
   3b8a8:	00048156 	.word	0x00048156
   3b8ac:	0004eaca 	.word	0x0004eaca
   3b8b0:	0004eb3b 	.word	0x0004eb3b

0003b8b4 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   3b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b8b6:	4605      	mov	r5, r0
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    NRFX_ASSERT(p_channel_id);
   3b8b8:	460e      	mov	r6, r1
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3b8ba:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_channel_id);
   3b8bc:	b949      	cbnz	r1, 3b8d2 <nrfx_wdt_channel_alloc+0x1e>
   3b8be:	491c      	ldr	r1, [pc, #112]	; (3b930 <nrfx_wdt_channel_alloc+0x7c>)
   3b8c0:	481c      	ldr	r0, [pc, #112]	; (3b934 <nrfx_wdt_channel_alloc+0x80>)
   3b8c2:	2385      	movs	r3, #133	; 0x85
   3b8c4:	4a1c      	ldr	r2, [pc, #112]	; (3b938 <nrfx_wdt_channel_alloc+0x84>)
   3b8c6:	f005 fd7d 	bl	413c4 <printk>
   3b8ca:	2185      	movs	r1, #133	; 0x85
   3b8cc:	481a      	ldr	r0, [pc, #104]	; (3b938 <nrfx_wdt_channel_alloc+0x84>)
   3b8ce:	f005 ff96 	bl	417fe <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3b8d2:	4c1a      	ldr	r4, [pc, #104]	; (3b93c <nrfx_wdt_channel_alloc+0x88>)
   3b8d4:	f814 2037 	ldrb.w	r2, [r4, r7, lsl #3]
   3b8d8:	2a01      	cmp	r2, #1
   3b8da:	d009      	beq.n	3b8f0 <nrfx_wdt_channel_alloc+0x3c>
   3b8dc:	4918      	ldr	r1, [pc, #96]	; (3b940 <nrfx_wdt_channel_alloc+0x8c>)
   3b8de:	4815      	ldr	r0, [pc, #84]	; (3b934 <nrfx_wdt_channel_alloc+0x80>)
   3b8e0:	2386      	movs	r3, #134	; 0x86
   3b8e2:	4a15      	ldr	r2, [pc, #84]	; (3b938 <nrfx_wdt_channel_alloc+0x84>)
   3b8e4:	f005 fd6e 	bl	413c4 <printk>
   3b8e8:	2186      	movs	r1, #134	; 0x86
   3b8ea:	4813      	ldr	r0, [pc, #76]	; (3b938 <nrfx_wdt_channel_alloc+0x84>)
   3b8ec:	f005 ff87 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3b8f0:	f04f 0320 	mov.w	r3, #32
   3b8f4:	f3ef 8c11 	mrs	ip, BASEPRI
   3b8f8:	f383 8811 	msr	BASEPRI, r3
   3b8fc:	f3bf 8f6f 	isb	sy

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   3b900:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
   3b904:	785a      	ldrb	r2, [r3, #1]
   3b906:	2a07      	cmp	r2, #7
   3b908:	d810      	bhi.n	3b92c <nrfx_wdt_channel_alloc+0x78>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
        p_cb->alloc_index++;
   3b90a:	1c51      	adds	r1, r2, #1
   3b90c:	7059      	strb	r1, [r3, #1]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   3b90e:	2301      	movs	r3, #1
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   3b910:	7032      	strb	r2, [r6, #0]
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   3b912:	6829      	ldr	r1, [r5, #0]
   3b914:	4093      	lsls	r3, r2
   3b916:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
   3b91a:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   3b91c:	4809      	ldr	r0, [pc, #36]	; (3b944 <nrfx_wdt_channel_alloc+0x90>)
   3b91e:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   3b922:	f38c 8811 	msr	BASEPRI, ip
   3b926:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   3b92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result = NRFX_ERROR_NO_MEM;
   3b92c:	4806      	ldr	r0, [pc, #24]	; (3b948 <nrfx_wdt_channel_alloc+0x94>)
   3b92e:	e7f8      	b.n	3b922 <nrfx_wdt_channel_alloc+0x6e>
   3b930:	0004eb65 	.word	0x0004eb65
   3b934:	00048156 	.word	0x00048156
   3b938:	0004eaca 	.word	0x0004eaca
   3b93c:	20025d3c 	.word	0x20025d3c
   3b940:	0004eb3b 	.word	0x0004eb3b
   3b944:	0bad0000 	.word	0x0bad0000
   3b948:	0bad0002 	.word	0x0bad0002

0003b94c <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
   3b94c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   3b94e:	4b0c      	ldr	r3, [pc, #48]	; (3b980 <nrfx_wdt_channel_feed+0x34>)
   3b950:	7902      	ldrb	r2, [r0, #4]
{
   3b952:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   3b954:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
{
   3b958:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   3b95a:	2b02      	cmp	r3, #2
   3b95c:	d009      	beq.n	3b972 <nrfx_wdt_channel_feed+0x26>
   3b95e:	4909      	ldr	r1, [pc, #36]	; (3b984 <nrfx_wdt_channel_feed+0x38>)
   3b960:	4809      	ldr	r0, [pc, #36]	; (3b988 <nrfx_wdt_channel_feed+0x3c>)
   3b962:	239b      	movs	r3, #155	; 0x9b
   3b964:	4a09      	ldr	r2, [pc, #36]	; (3b98c <nrfx_wdt_channel_feed+0x40>)
   3b966:	f005 fd2d 	bl	413c4 <printk>
   3b96a:	219b      	movs	r1, #155	; 0x9b
   3b96c:	4807      	ldr	r0, [pc, #28]	; (3b98c <nrfx_wdt_channel_feed+0x40>)
   3b96e:	f005 ff46 	bl	417fe <assert_post_action>
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   3b972:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   3b974:	4a06      	ldr	r2, [pc, #24]	; (3b990 <nrfx_wdt_channel_feed+0x44>)
   3b976:	f504 74c0 	add.w	r4, r4, #384	; 0x180
   3b97a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   3b97e:	bd38      	pop	{r3, r4, r5, pc}
   3b980:	20025d3c 	.word	0x20025d3c
   3b984:	0004eb72 	.word	0x0004eb72
   3b988:	00048156 	.word	0x00048156
   3b98c:	0004eaca 	.word	0x0004eaca
   3b990:	6e524635 	.word	0x6e524635

0003b994 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   3b994:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   3b996:	4c05      	ldr	r4, [pc, #20]	; (3b9ac <nrfx_wdt_0_irq_handler+0x18>)
   3b998:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   3b99a:	b12b      	cbz	r3, 3b9a8 <nrfx_wdt_0_irq_handler+0x14>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   3b99c:	4b04      	ldr	r3, [pc, #16]	; (3b9b0 <nrfx_wdt_0_irq_handler+0x1c>)
   3b99e:	685b      	ldr	r3, [r3, #4]
   3b9a0:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b9a2:	2300      	movs	r3, #0
   3b9a4:	6023      	str	r3, [r4, #0]
   3b9a6:	6823      	ldr	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   3b9a8:	bd10      	pop	{r4, pc}
   3b9aa:	bf00      	nop
   3b9ac:	40018100 	.word	0x40018100
   3b9b0:	20025d3c 	.word	0x20025d3c

0003b9b4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   3b9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3b9b6:	4b10      	ldr	r3, [pc, #64]	; (3b9f8 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   3b9b8:	4f10      	ldr	r7, [pc, #64]	; (3b9fc <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3b9ba:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   3b9be:	3001      	adds	r0, #1
   3b9c0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   3b9c4:	42ae      	cmp	r6, r5
   3b9c6:	d800      	bhi.n	3b9ca <z_sys_init_run_level+0x16>
		}
	}
}
   3b9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   3b9ca:	e9d5 3400 	ldrd	r3, r4, [r5]
   3b9ce:	4620      	mov	r0, r4
   3b9d0:	4798      	blx	r3
   3b9d2:	b170      	cbz	r0, 3b9f2 <z_sys_init_run_level+0x3e>
   3b9d4:	b16c      	cbz	r4, 3b9f2 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   3b9d6:	2301      	movs	r3, #1
				(dev - __device_start));
   3b9d8:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3b9da:	4a09      	ldr	r2, [pc, #36]	; (3ba00 <z_sys_init_run_level+0x4c>)
   3b9dc:	1124      	asrs	r4, r4, #4
   3b9de:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   3b9e0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3b9e4:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   3b9e8:	fa03 f404 	lsl.w	r4, r3, r4
   3b9ec:	4304      	orrs	r4, r0
   3b9ee:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3b9f2:	3508      	adds	r5, #8
   3b9f4:	e7e6      	b.n	3b9c4 <z_sys_init_run_level+0x10>
   3b9f6:	bf00      	nop
   3b9f8:	00047270 	.word	0x00047270
   3b9fc:	200209e0 	.word	0x200209e0
   3ba00:	20020aa0 	.word	0x20020aa0

0003ba04 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   3ba04:	4b08      	ldr	r3, [pc, #32]	; (3ba28 <z_device_ready+0x24>)
   3ba06:	1ac0      	subs	r0, r0, r3
   3ba08:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3ba0a:	4b08      	ldr	r3, [pc, #32]	; (3ba2c <z_device_ready+0x28>)
   3ba0c:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   3ba0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   3ba12:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3ba14:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   3ba18:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   3ba1c:	4210      	tst	r0, r2
}
   3ba1e:	bf0c      	ite	eq
   3ba20:	4618      	moveq	r0, r3
   3ba22:	2000      	movne	r0, #0
   3ba24:	4770      	bx	lr
   3ba26:	bf00      	nop
   3ba28:	200209e0 	.word	0x200209e0
   3ba2c:	20020aa0 	.word	0x20020aa0

0003ba30 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   3ba30:	4911      	ldr	r1, [pc, #68]	; (3ba78 <z_impl_device_get_binding+0x48>)
{
   3ba32:	b570      	push	{r4, r5, r6, lr}
   3ba34:	4605      	mov	r5, r0
   3ba36:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   3ba38:	4c10      	ldr	r4, [pc, #64]	; (3ba7c <z_impl_device_get_binding+0x4c>)
   3ba3a:	428c      	cmp	r4, r1
   3ba3c:	d104      	bne.n	3ba48 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   3ba3e:	4c0f      	ldr	r4, [pc, #60]	; (3ba7c <z_impl_device_get_binding+0x4c>)
   3ba40:	42b4      	cmp	r4, r6
   3ba42:	d10a      	bne.n	3ba5a <z_impl_device_get_binding+0x2a>
	return NULL;
   3ba44:	2400      	movs	r4, #0
   3ba46:	e014      	b.n	3ba72 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   3ba48:	4620      	mov	r0, r4
   3ba4a:	f7ff ffdb 	bl	3ba04 <z_device_ready>
   3ba4e:	b110      	cbz	r0, 3ba56 <z_impl_device_get_binding+0x26>
   3ba50:	6823      	ldr	r3, [r4, #0]
   3ba52:	42ab      	cmp	r3, r5
   3ba54:	d00d      	beq.n	3ba72 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   3ba56:	3410      	adds	r4, #16
   3ba58:	e7ef      	b.n	3ba3a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   3ba5a:	4620      	mov	r0, r4
   3ba5c:	f7ff ffd2 	bl	3ba04 <z_device_ready>
   3ba60:	b908      	cbnz	r0, 3ba66 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   3ba62:	3410      	adds	r4, #16
   3ba64:	e7ec      	b.n	3ba40 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   3ba66:	4628      	mov	r0, r5
   3ba68:	6821      	ldr	r1, [r4, #0]
   3ba6a:	f7e1 fbed 	bl	1d248 <strcmp>
   3ba6e:	2800      	cmp	r0, #0
   3ba70:	d1f7      	bne.n	3ba62 <z_impl_device_get_binding+0x32>
}
   3ba72:	4620      	mov	r0, r4
   3ba74:	bd70      	pop	{r4, r5, r6, pc}
   3ba76:	bf00      	nop
   3ba78:	20020aa0 	.word	0x20020aa0
   3ba7c:	200209e0 	.word	0x200209e0

0003ba80 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   3ba80:	4b01      	ldr	r3, [pc, #4]	; (3ba88 <z_impl_z_errno+0x8>)
   3ba82:	6898      	ldr	r0, [r3, #8]
}
   3ba84:	3064      	adds	r0, #100	; 0x64
   3ba86:	4770      	bx	lr
   3ba88:	20025d48 	.word	0x20025d48

0003ba8c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   3ba8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3ba90:	4605      	mov	r5, r0
   3ba92:	460f      	mov	r7, r1
	__asm__ volatile(
   3ba94:	f04f 0320 	mov.w	r3, #32
   3ba98:	f3ef 8811 	mrs	r8, BASEPRI
   3ba9c:	f383 8811 	msr	BASEPRI, r3
   3baa0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   3baa4:	f002 f822 	bl	3daec <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3baa8:	2200      	movs	r2, #0
   3baaa:	4b29      	ldr	r3, [pc, #164]	; (3bb50 <z_fatal_error+0xc4>)
   3baac:	4c29      	ldr	r4, [pc, #164]	; (3bb54 <z_fatal_error+0xc8>)
   3baae:	2d04      	cmp	r5, #4
   3bab0:	eba4 0403 	sub.w	r4, r4, r3
   3bab4:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   3bab8:	bf98      	it	ls
   3baba:	4b27      	ldrls	r3, [pc, #156]	; (3bb58 <z_fatal_error+0xcc>)
   3babc:	ea4f 1484 	mov.w	r4, r4, lsl #6
   3bac0:	4606      	mov	r6, r0
   3bac2:	bf94      	ite	ls
   3bac4:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   3bac8:	4b24      	ldrhi	r3, [pc, #144]	; (3bb5c <z_fatal_error+0xd0>)
   3baca:	9200      	str	r2, [sp, #0]
   3bacc:	4924      	ldr	r1, [pc, #144]	; (3bb60 <z_fatal_error+0xd4>)
   3bace:	462a      	mov	r2, r5
   3bad0:	f044 0001 	orr.w	r0, r4, #1
   3bad4:	f005 fea4 	bl	41820 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   3bad8:	b147      	cbz	r7, 3baec <z_fatal_error+0x60>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   3bada:	69fb      	ldr	r3, [r7, #28]
   3badc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   3bae0:	b123      	cbz	r3, 3baec <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   3bae2:	4920      	ldr	r1, [pc, #128]	; (3bb64 <z_fatal_error+0xd8>)
   3bae4:	f044 0001 	orr.w	r0, r4, #1
   3bae8:	f005 fe9a 	bl	41820 <log_string_sync>
	const char *thread_name = k_thread_name_get(thread);
   3baec:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   3baee:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   3baf2:	f008 ffb4 	bl	44a5e <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   3baf6:	b348      	cbz	r0, 3bb4c <z_fatal_error+0xc0>
   3baf8:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   3bafa:	4b1b      	ldr	r3, [pc, #108]	; (3bb68 <z_fatal_error+0xdc>)
   3bafc:	2a00      	cmp	r2, #0
   3bafe:	bf08      	it	eq
   3bb00:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   3bb02:	f005 fea0 	bl	41846 <log_strdup>
   3bb06:	4632      	mov	r2, r6
   3bb08:	4603      	mov	r3, r0
   3bb0a:	4918      	ldr	r1, [pc, #96]	; (3bb6c <z_fatal_error+0xe0>)
   3bb0c:	4620      	mov	r0, r4
   3bb0e:	f005 fe87 	bl	41820 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   3bb12:	4639      	mov	r1, r7
   3bb14:	4628      	mov	r0, r5
   3bb16:	f7e5 feaf 	bl	21878 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   3bb1a:	2d04      	cmp	r5, #4
   3bb1c:	d10c      	bne.n	3bb38 <z_fatal_error+0xac>
   3bb1e:	4914      	ldr	r1, [pc, #80]	; (3bb70 <z_fatal_error+0xe4>)
   3bb20:	238e      	movs	r3, #142	; 0x8e
   3bb22:	4a14      	ldr	r2, [pc, #80]	; (3bb74 <z_fatal_error+0xe8>)
   3bb24:	4814      	ldr	r0, [pc, #80]	; (3bb78 <z_fatal_error+0xec>)
   3bb26:	f005 fc4d 	bl	413c4 <printk>
   3bb2a:	4814      	ldr	r0, [pc, #80]	; (3bb7c <z_fatal_error+0xf0>)
   3bb2c:	f005 fc4a 	bl	413c4 <printk>
   3bb30:	218e      	movs	r1, #142	; 0x8e
   3bb32:	4810      	ldr	r0, [pc, #64]	; (3bb74 <z_fatal_error+0xe8>)
   3bb34:	f005 fe63 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3bb38:	f388 8811 	msr	BASEPRI, r8
   3bb3c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   3bb40:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   3bb42:	b002      	add	sp, #8
   3bb44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3bb48:	f7eb bc92 	b.w	27470 <z_impl_k_thread_abort>
		thread_name = "unknown";
   3bb4c:	4806      	ldr	r0, [pc, #24]	; (3bb68 <z_fatal_error+0xdc>)
   3bb4e:	e7d8      	b.n	3bb02 <z_fatal_error+0x76>
   3bb50:	000463bc 	.word	0x000463bc
   3bb54:	000464cc 	.word	0x000464cc
   3bb58:	00047288 	.word	0x00047288
   3bb5c:	0004ebb4 	.word	0x0004ebb4
   3bb60:	0004ebca 	.word	0x0004ebca
   3bb64:	0004ebf2 	.word	0x0004ebf2
   3bb68:	0004ebc2 	.word	0x0004ebc2
   3bb6c:	0004ec13 	.word	0x0004ec13
   3bb70:	0004ec4d 	.word	0x0004ec4d
   3bb74:	0004ec2b 	.word	0x0004ec2b
   3bb78:	00048156 	.word	0x00048156
   3bb7c:	0004ec6a 	.word	0x0004ec6a

0003bb80 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   3bb80:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   3bb82:	4d0b      	ldr	r5, [pc, #44]	; (3bbb0 <idle+0x30>)
	__asm__ volatile(
   3bb84:	f04f 0220 	mov.w	r2, #32
   3bb88:	f3ef 8311 	mrs	r3, BASEPRI
   3bb8c:	f382 8811 	msr	BASEPRI, r2
   3bb90:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   3bb94:	f002 fcd8 	bl	3e548 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3bb98:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   3bb9a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3bb9c:	2802      	cmp	r0, #2
   3bb9e:	bfd8      	it	le
   3bba0:	4608      	movle	r0, r1
   3bba2:	f002 fd19 	bl	3e5d8 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   3bba6:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   3bba8:	f7eb f98a 	bl	26ec0 <arch_cpu_idle>
}
   3bbac:	e7ea      	b.n	3bb84 <idle+0x4>
   3bbae:	bf00      	nop
   3bbb0:	20025d48 	.word	0x20025d48

0003bbb4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   3bbb4:	4802      	ldr	r0, [pc, #8]	; (3bbc0 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   3bbb6:	4a03      	ldr	r2, [pc, #12]	; (3bbc4 <z_bss_zero+0x10>)
   3bbb8:	2100      	movs	r1, #0
   3bbba:	1a12      	subs	r2, r2, r0
   3bbbc:	f009 b8b3 	b.w	44d26 <memset>
   3bbc0:	20020cc8 	.word	0x20020cc8
   3bbc4:	2002d838 	.word	0x2002d838

0003bbc8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   3bbc8:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3bbca:	4806      	ldr	r0, [pc, #24]	; (3bbe4 <z_data_copy+0x1c>)
   3bbcc:	4a06      	ldr	r2, [pc, #24]	; (3bbe8 <z_data_copy+0x20>)
   3bbce:	4907      	ldr	r1, [pc, #28]	; (3bbec <z_data_copy+0x24>)
   3bbd0:	1a12      	subs	r2, r2, r0
   3bbd2:	f009 f888 	bl	44ce6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   3bbd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3bbda:	4a05      	ldr	r2, [pc, #20]	; (3bbf0 <z_data_copy+0x28>)
   3bbdc:	4905      	ldr	r1, [pc, #20]	; (3bbf4 <z_data_copy+0x2c>)
   3bbde:	4806      	ldr	r0, [pc, #24]	; (3bbf8 <z_data_copy+0x30>)
   3bbe0:	f009 b881 	b.w	44ce6 <memcpy>
   3bbe4:	20020000 	.word	0x20020000
   3bbe8:	20020cc8 	.word	0x20020cc8
   3bbec:	0004f4bc 	.word	0x0004f4bc
   3bbf0:	00000000 	.word	0x00000000
   3bbf4:	0004f4bc 	.word	0x0004f4bc
   3bbf8:	20020000 	.word	0x20020000

0003bbfc <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   3bbfc:	2201      	movs	r2, #1
{
   3bbfe:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   3bc00:	4b0b      	ldr	r3, [pc, #44]	; (3bc30 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3bc02:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   3bc04:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3bc06:	f7ff fed5 	bl	3b9b4 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   3bc0a:	4a0a      	ldr	r2, [pc, #40]	; (3bc34 <bg_thread_main+0x38>)
   3bc0c:	490a      	ldr	r1, [pc, #40]	; (3bc38 <bg_thread_main+0x3c>)
   3bc0e:	480b      	ldr	r0, [pc, #44]	; (3bc3c <bg_thread_main+0x40>)
   3bc10:	f005 fbd8 	bl	413c4 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   3bc14:	2003      	movs	r0, #3
   3bc16:	f7ff fecd 	bl	3b9b4 <z_sys_init_run_level>

	z_init_static_threads();
   3bc1a:	f002 f8fd 	bl	3de18 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   3bc1e:	f7e6 fb65 	bl	222ec <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   3bc22:	4a07      	ldr	r2, [pc, #28]	; (3bc40 <bg_thread_main+0x44>)
   3bc24:	7b13      	ldrb	r3, [r2, #12]
   3bc26:	f023 0301 	bic.w	r3, r3, #1
   3bc2a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   3bc2c:	bd08      	pop	{r3, pc}
   3bc2e:	bf00      	nop
   3bc30:	2002d6bd 	.word	0x2002d6bd
   3bc34:	00049048 	.word	0x00049048
   3bc38:	0004ece9 	.word	0x0004ece9
   3bc3c:	0004ecf5 	.word	0x0004ecf5
   3bc40:	20024430 	.word	0x20024430

0003bc44 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   3bc44:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   3bc48:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   3bc4a:	f7e8 ff79 	bl	24b40 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   3bc4e:	4b34      	ldr	r3, [pc, #208]	; (3bd20 <z_cstart+0xdc>)
	uint32_t msp =
   3bc50:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   3bc54:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   3bc58:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   3bc5c:	2400      	movs	r4, #0
   3bc5e:	23e0      	movs	r3, #224	; 0xe0
   3bc60:	4d30      	ldr	r5, [pc, #192]	; (3bd24 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3bc62:	f04f 0b01 	mov.w	fp, #1
   3bc66:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   3bc6a:	77ec      	strb	r4, [r5, #31]
   3bc6c:	762c      	strb	r4, [r5, #24]
   3bc6e:	766c      	strb	r4, [r5, #25]
   3bc70:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   3bc72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   3bc74:	4e2c      	ldr	r6, [pc, #176]	; (3bd28 <z_cstart+0xe4>)
   3bc76:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   3bc7a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   3bc7c:	f7eb fbce 	bl	2741c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   3bc80:	f7eb f918 	bl	26eb4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   3bc84:	f04f 33ff 	mov.w	r3, #4294967295
   3bc88:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   3bc8a:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   3bc8c:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   3bc90:	4d26      	ldr	r5, [pc, #152]	; (3bd2c <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   3bc92:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   3bc96:	ab06      	add	r3, sp, #24
   3bc98:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3bc9a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   3bc9c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   3bca0:	f7ff fe88 	bl	3b9b4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   3bca4:	2001      	movs	r0, #1
   3bca6:	f7ff fe85 	bl	3b9b4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3bcaa:	f8df a098 	ldr.w	sl, [pc, #152]	; 3bd44 <z_cstart+0x100>
	z_sched_init();
   3bcae:	f001 fd93 	bl	3d7d8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3bcb2:	4b1f      	ldr	r3, [pc, #124]	; (3bd30 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   3bcb4:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3bcb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3bcba:	491e      	ldr	r1, [pc, #120]	; (3bd34 <z_cstart+0xf0>)
   3bcbc:	9305      	str	r3, [sp, #20]
   3bcbe:	4630      	mov	r0, r6
   3bcc0:	4653      	mov	r3, sl
   3bcc2:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   3bcc6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3bcca:	9400      	str	r4, [sp, #0]
   3bccc:	f001 fffa 	bl	3dcc4 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3bcd0:	7b73      	ldrb	r3, [r6, #13]
   3bcd2:	4680      	mov	r8, r0
   3bcd4:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   3bcd8:	4630      	mov	r0, r6
   3bcda:	7373      	strb	r3, [r6, #13]
   3bcdc:	f001 f868 	bl	3cdb0 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   3bce0:	230f      	movs	r3, #15
   3bce2:	4f15      	ldr	r7, [pc, #84]	; (3bd38 <z_cstart+0xf4>)
   3bce4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   3bce8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   3bcec:	4913      	ldr	r1, [pc, #76]	; (3bd3c <z_cstart+0xf8>)
   3bcee:	4b14      	ldr	r3, [pc, #80]	; (3bd40 <z_cstart+0xfc>)
   3bcf0:	4638      	mov	r0, r7
   3bcf2:	e9cd b404 	strd	fp, r4, [sp, #16]
   3bcf6:	e9cd 4400 	strd	r4, r4, [sp]
   3bcfa:	f001 ffe3 	bl	3dcc4 <z_setup_new_thread>
   3bcfe:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   3bd00:	4652      	mov	r2, sl
   3bd02:	f023 0304 	bic.w	r3, r3, #4
   3bd06:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   3bd08:	f105 0318 	add.w	r3, r5, #24
   3bd0c:	4641      	mov	r1, r8
   3bd0e:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   3bd10:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   3bd14:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   3bd16:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   3bd18:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   3bd1c:	f7ea ff9e 	bl	26c5c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   3bd20:	20032178 	.word	0x20032178
   3bd24:	e000ed00 	.word	0xe000ed00
   3bd28:	20024430 	.word	0x20024430
   3bd2c:	20025d48 	.word	0x20025d48
   3bd30:	0004ed1c 	.word	0x0004ed1c
   3bd34:	20030038 	.word	0x20030038
   3bd38:	20024368 	.word	0x20024368
   3bd3c:	20032038 	.word	0x20032038
   3bd40:	0003bb81 	.word	0x0003bb81
   3bd44:	0003bbfd 	.word	0x0003bbfd

0003bd48 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   3bd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   3bd4a:	4d0f      	ldr	r5, [pc, #60]	; (3bd88 <statics_init+0x40>)
   3bd4c:	4c0f      	ldr	r4, [pc, #60]	; (3bd8c <statics_init+0x44>)
   3bd4e:	462f      	mov	r7, r5
   3bd50:	4e0f      	ldr	r6, [pc, #60]	; (3bd90 <statics_init+0x48>)
   3bd52:	42ac      	cmp	r4, r5
   3bd54:	d90c      	bls.n	3bd70 <statics_init+0x28>
   3bd56:	490f      	ldr	r1, [pc, #60]	; (3bd94 <statics_init+0x4c>)
   3bd58:	2315      	movs	r3, #21
   3bd5a:	4632      	mov	r2, r6
   3bd5c:	480e      	ldr	r0, [pc, #56]	; (3bd98 <statics_init+0x50>)
   3bd5e:	f005 fb31 	bl	413c4 <printk>
   3bd62:	480e      	ldr	r0, [pc, #56]	; (3bd9c <statics_init+0x54>)
   3bd64:	f005 fb2e 	bl	413c4 <printk>
   3bd68:	2115      	movs	r1, #21
   3bd6a:	4630      	mov	r0, r6
   3bd6c:	f005 fd47 	bl	417fe <assert_post_action>
   3bd70:	42bc      	cmp	r4, r7
   3bd72:	d301      	bcc.n	3bd78 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   3bd74:	2000      	movs	r0, #0
   3bd76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   3bd78:	4620      	mov	r0, r4
   3bd7a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   3bd7e:	f008 fdc0 	bl	44902 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   3bd82:	3418      	adds	r4, #24
   3bd84:	e7e5      	b.n	3bd52 <statics_init+0xa>
   3bd86:	bf00      	nop
   3bd88:	20020b1c 	.word	0x20020b1c
   3bd8c:	20020b04 	.word	0x20020b04
   3bd90:	0004ed24 	.word	0x0004ed24
   3bd94:	0004ed46 	.word	0x0004ed46
   3bd98:	00048156 	.word	0x00048156
   3bd9c:	000490c4 	.word	0x000490c4

0003bda0 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   3bda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bda4:	4606      	mov	r6, r0
   3bda6:	b087      	sub	sp, #28
   3bda8:	468a      	mov	sl, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   3bdaa:	4610      	mov	r0, r2
   3bdac:	4619      	mov	r1, r3
{
   3bdae:	4690      	mov	r8, r2
   3bdb0:	4699      	mov	r9, r3
	int64_t now, end = z_timeout_end_calc(timeout);
   3bdb2:	f008 fec0 	bl	44b36 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3bdb6:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   3bdba:	e9cd 0104 	strd	r0, r1, [sp, #16]
   3bdbe:	f04f 0320 	mov.w	r3, #32
   3bdc2:	f3ef 8511 	mrs	r5, BASEPRI
   3bdc6:	f383 8811 	msr	BASEPRI, r3
   3bdca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3bdce:	4620      	mov	r0, r4
   3bdd0:	f002 f8b2 	bl	3df38 <z_spin_lock_valid>
   3bdd4:	b968      	cbnz	r0, 3bdf2 <k_heap_alloc+0x52>
   3bdd6:	235c      	movs	r3, #92	; 0x5c
   3bdd8:	4a3f      	ldr	r2, [pc, #252]	; (3bed8 <k_heap_alloc+0x138>)
   3bdda:	4940      	ldr	r1, [pc, #256]	; (3bedc <k_heap_alloc+0x13c>)
   3bddc:	4840      	ldr	r0, [pc, #256]	; (3bee0 <k_heap_alloc+0x140>)
   3bdde:	f005 faf1 	bl	413c4 <printk>
   3bde2:	4621      	mov	r1, r4
   3bde4:	483f      	ldr	r0, [pc, #252]	; (3bee4 <k_heap_alloc+0x144>)
   3bde6:	f005 faed 	bl	413c4 <printk>
   3bdea:	215c      	movs	r1, #92	; 0x5c
   3bdec:	483a      	ldr	r0, [pc, #232]	; (3bed8 <k_heap_alloc+0x138>)
   3bdee:	f005 fd06 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3bdf2:	4620      	mov	r0, r4
   3bdf4:	f002 f8be 	bl	3df74 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3bdf8:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   3bdfc:	b17b      	cbz	r3, 3be1e <k_heap_alloc+0x7e>
   3bdfe:	ea58 0309 	orrs.w	r3, r8, r9
   3be02:	d00c      	beq.n	3be1e <k_heap_alloc+0x7e>
   3be04:	4938      	ldr	r1, [pc, #224]	; (3bee8 <k_heap_alloc+0x148>)
   3be06:	2323      	movs	r3, #35	; 0x23
   3be08:	4a38      	ldr	r2, [pc, #224]	; (3beec <k_heap_alloc+0x14c>)
   3be0a:	4835      	ldr	r0, [pc, #212]	; (3bee0 <k_heap_alloc+0x140>)
   3be0c:	f005 fada 	bl	413c4 <printk>
   3be10:	4837      	ldr	r0, [pc, #220]	; (3bef0 <k_heap_alloc+0x150>)
   3be12:	f005 fad7 	bl	413c4 <printk>
   3be16:	2123      	movs	r1, #35	; 0x23
   3be18:	4834      	ldr	r0, [pc, #208]	; (3beec <k_heap_alloc+0x14c>)
   3be1a:	f005 fcf0 	bl	417fe <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3be1e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 3bed8 <k_heap_alloc+0x138>
   3be22:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3bedc <k_heap_alloc+0x13c>
   3be26:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 3bee0 <k_heap_alloc+0x140>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
   3be2a:	4651      	mov	r1, sl
   3be2c:	4630      	mov	r0, r6
   3be2e:	f005 fcb7 	bl	417a0 <sys_heap_alloc>
   3be32:	4607      	mov	r7, r0

		now = z_tick_get();
   3be34:	f002 fcea 	bl	3e80c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   3be38:	b1cf      	cbz	r7, 3be6e <k_heap_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3be3a:	4620      	mov	r0, r4
   3be3c:	f002 f88a 	bl	3df54 <z_spin_unlock_valid>
   3be40:	b968      	cbnz	r0, 3be5e <k_heap_alloc+0xbe>
   3be42:	2384      	movs	r3, #132	; 0x84
   3be44:	4a24      	ldr	r2, [pc, #144]	; (3bed8 <k_heap_alloc+0x138>)
   3be46:	492b      	ldr	r1, [pc, #172]	; (3bef4 <k_heap_alloc+0x154>)
   3be48:	4825      	ldr	r0, [pc, #148]	; (3bee0 <k_heap_alloc+0x140>)
   3be4a:	f005 fabb 	bl	413c4 <printk>
   3be4e:	4621      	mov	r1, r4
   3be50:	4829      	ldr	r0, [pc, #164]	; (3bef8 <k_heap_alloc+0x158>)
   3be52:	f005 fab7 	bl	413c4 <printk>
   3be56:	2184      	movs	r1, #132	; 0x84
   3be58:	481f      	ldr	r0, [pc, #124]	; (3bed8 <k_heap_alloc+0x138>)
   3be5a:	f005 fcd0 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3be5e:	f385 8811 	msr	BASEPRI, r5
   3be62:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   3be66:	4638      	mov	r0, r7
   3be68:	b007      	add	sp, #28
   3be6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   3be6e:	9b04      	ldr	r3, [sp, #16]
   3be70:	1a1b      	subs	r3, r3, r0
   3be72:	9302      	str	r3, [sp, #8]
   3be74:	9b05      	ldr	r3, [sp, #20]
   3be76:	eb63 0301 	sbc.w	r3, r3, r1
   3be7a:	9303      	str	r3, [sp, #12]
   3be7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3be80:	2a01      	cmp	r2, #1
   3be82:	f173 0300 	sbcs.w	r3, r3, #0
   3be86:	dbd8      	blt.n	3be3a <k_heap_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3be88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3be8c:	4629      	mov	r1, r5
   3be8e:	e9cd 2300 	strd	r2, r3, [sp]
   3be92:	4620      	mov	r0, r4
   3be94:	f106 020c 	add.w	r2, r6, #12
   3be98:	f001 fb52 	bl	3d540 <z_pend_curr>
	__asm__ volatile(
   3be9c:	f04f 0320 	mov.w	r3, #32
   3bea0:	f3ef 8511 	mrs	r5, BASEPRI
   3bea4:	f383 8811 	msr	BASEPRI, r3
   3bea8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3beac:	4620      	mov	r0, r4
   3beae:	f002 f843 	bl	3df38 <z_spin_lock_valid>
   3beb2:	b968      	cbnz	r0, 3bed0 <k_heap_alloc+0x130>
   3beb4:	235c      	movs	r3, #92	; 0x5c
   3beb6:	4642      	mov	r2, r8
   3beb8:	4649      	mov	r1, r9
   3beba:	4658      	mov	r0, fp
   3bebc:	f005 fa82 	bl	413c4 <printk>
   3bec0:	4621      	mov	r1, r4
   3bec2:	4808      	ldr	r0, [pc, #32]	; (3bee4 <k_heap_alloc+0x144>)
   3bec4:	f005 fa7e 	bl	413c4 <printk>
   3bec8:	215c      	movs	r1, #92	; 0x5c
   3beca:	4640      	mov	r0, r8
   3becc:	f005 fc97 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3bed0:	4620      	mov	r0, r4
   3bed2:	f002 f84f 	bl	3df74 <z_spin_lock_set_owner>
	return k;
   3bed6:	e7a8      	b.n	3be2a <k_heap_alloc+0x8a>
   3bed8:	000488fa 	.word	0x000488fa
   3bedc:	00048920 	.word	0x00048920
   3bee0:	00048156 	.word	0x00048156
   3bee4:	00048935 	.word	0x00048935
   3bee8:	0004ed5c 	.word	0x0004ed5c
   3beec:	0004ed24 	.word	0x0004ed24
   3bef0:	00049046 	.word	0x00049046
   3bef4:	0004894d 	.word	0x0004894d
   3bef8:	00048964 	.word	0x00048964

0003befc <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   3befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3befe:	4605      	mov	r5, r0
   3bf00:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3bf02:	f100 0414 	add.w	r4, r0, #20
   3bf06:	f04f 0320 	mov.w	r3, #32
   3bf0a:	f3ef 8711 	mrs	r7, BASEPRI
   3bf0e:	f383 8811 	msr	BASEPRI, r3
   3bf12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3bf16:	4620      	mov	r0, r4
   3bf18:	f002 f80e 	bl	3df38 <z_spin_lock_valid>
   3bf1c:	b968      	cbnz	r0, 3bf3a <k_heap_free+0x3e>
   3bf1e:	235c      	movs	r3, #92	; 0x5c
   3bf20:	4a1a      	ldr	r2, [pc, #104]	; (3bf8c <k_heap_free+0x90>)
   3bf22:	491b      	ldr	r1, [pc, #108]	; (3bf90 <k_heap_free+0x94>)
   3bf24:	481b      	ldr	r0, [pc, #108]	; (3bf94 <k_heap_free+0x98>)
   3bf26:	f005 fa4d 	bl	413c4 <printk>
   3bf2a:	4621      	mov	r1, r4
   3bf2c:	481a      	ldr	r0, [pc, #104]	; (3bf98 <k_heap_free+0x9c>)
   3bf2e:	f005 fa49 	bl	413c4 <printk>
   3bf32:	215c      	movs	r1, #92	; 0x5c
   3bf34:	4815      	ldr	r0, [pc, #84]	; (3bf8c <k_heap_free+0x90>)
   3bf36:	f005 fc62 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3bf3a:	4620      	mov	r0, r4
   3bf3c:	f002 f81a 	bl	3df74 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   3bf40:	4628      	mov	r0, r5
   3bf42:	4631      	mov	r1, r6
   3bf44:	f7e8 fc7e 	bl	24844 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   3bf48:	f105 000c 	add.w	r0, r5, #12
   3bf4c:	f008 fd5c 	bl	44a08 <z_unpend_all>
   3bf50:	b128      	cbz	r0, 3bf5e <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   3bf52:	4639      	mov	r1, r7
   3bf54:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   3bf56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   3bf5a:	f000 bd05 	b.w	3c968 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3bf5e:	4620      	mov	r0, r4
   3bf60:	f001 fff8 	bl	3df54 <z_spin_unlock_valid>
   3bf64:	b968      	cbnz	r0, 3bf82 <k_heap_free+0x86>
   3bf66:	2384      	movs	r3, #132	; 0x84
   3bf68:	4a08      	ldr	r2, [pc, #32]	; (3bf8c <k_heap_free+0x90>)
   3bf6a:	490c      	ldr	r1, [pc, #48]	; (3bf9c <k_heap_free+0xa0>)
   3bf6c:	4809      	ldr	r0, [pc, #36]	; (3bf94 <k_heap_free+0x98>)
   3bf6e:	f005 fa29 	bl	413c4 <printk>
   3bf72:	4621      	mov	r1, r4
   3bf74:	480a      	ldr	r0, [pc, #40]	; (3bfa0 <k_heap_free+0xa4>)
   3bf76:	f005 fa25 	bl	413c4 <printk>
   3bf7a:	2184      	movs	r1, #132	; 0x84
   3bf7c:	4803      	ldr	r0, [pc, #12]	; (3bf8c <k_heap_free+0x90>)
   3bf7e:	f005 fc3e 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3bf82:	f387 8811 	msr	BASEPRI, r7
   3bf86:	f3bf 8f6f 	isb	sy
}
   3bf8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3bf8c:	000488fa 	.word	0x000488fa
   3bf90:	00048920 	.word	0x00048920
   3bf94:	00048156 	.word	0x00048156
   3bf98:	00048935 	.word	0x00048935
   3bf9c:	0004894d 	.word	0x0004894d
   3bfa0:	00048964 	.word	0x00048964

0003bfa4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   3bfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3bfa8:	4d16      	ldr	r5, [pc, #88]	; (3c004 <init_mem_slab_module+0x60>)
   3bfaa:	4c17      	ldr	r4, [pc, #92]	; (3c008 <init_mem_slab_module+0x64>)
   3bfac:	46a8      	mov	r8, r5
   3bfae:	4e17      	ldr	r6, [pc, #92]	; (3c00c <init_mem_slab_module+0x68>)
   3bfb0:	42ac      	cmp	r4, r5
   3bfb2:	d90c      	bls.n	3bfce <init_mem_slab_module+0x2a>
   3bfb4:	4916      	ldr	r1, [pc, #88]	; (3c010 <init_mem_slab_module+0x6c>)
   3bfb6:	2342      	movs	r3, #66	; 0x42
   3bfb8:	4632      	mov	r2, r6
   3bfba:	4816      	ldr	r0, [pc, #88]	; (3c014 <init_mem_slab_module+0x70>)
   3bfbc:	f005 fa02 	bl	413c4 <printk>
   3bfc0:	4815      	ldr	r0, [pc, #84]	; (3c018 <init_mem_slab_module+0x74>)
   3bfc2:	f005 f9ff 	bl	413c4 <printk>
   3bfc6:	2142      	movs	r1, #66	; 0x42
   3bfc8:	4630      	mov	r0, r6
   3bfca:	f005 fc18 	bl	417fe <assert_post_action>
   3bfce:	4544      	cmp	r4, r8
   3bfd0:	d302      	bcc.n	3bfd8 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   3bfd2:	2000      	movs	r0, #0
	return rc;
}
   3bfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3bfd8:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   3bfdc:	ea41 0302 	orr.w	r3, r1, r2
   3bfe0:	f013 0303 	ands.w	r3, r3, #3
   3bfe4:	d10b      	bne.n	3bffe <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   3bfe6:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   3bfe8:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3bfea:	4283      	cmp	r3, r0
   3bfec:	d101      	bne.n	3bff2 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3bfee:	341c      	adds	r4, #28
   3bff0:	e7de      	b.n	3bfb0 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   3bff2:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3bff4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   3bff6:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
   3bff8:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
   3bffa:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   3bffc:	e7f5      	b.n	3bfea <init_mem_slab_module+0x46>
		return -EINVAL;
   3bffe:	f06f 0015 	mvn.w	r0, #21
	return rc;
   3c002:	e7e7      	b.n	3bfd4 <init_mem_slab_module+0x30>
   3c004:	20020b04 	.word	0x20020b04
   3c008:	20020b04 	.word	0x20020b04
   3c00c:	0004eda1 	.word	0x0004eda1
   3c010:	0004edc6 	.word	0x0004edc6
   3c014:	00048156 	.word	0x00048156
   3c018:	000490c4 	.word	0x000490c4

0003c01c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   3c01c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3c020:	4604      	mov	r4, r0
   3c022:	468a      	mov	sl, r1
   3c024:	4690      	mov	r8, r2
   3c026:	4699      	mov	r9, r3
   3c028:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   3c02c:	b17b      	cbz	r3, 3c04e <z_impl_k_msgq_put+0x32>
   3c02e:	ea58 0309 	orrs.w	r3, r8, r9
   3c032:	d00c      	beq.n	3c04e <z_impl_k_msgq_put+0x32>
   3c034:	4940      	ldr	r1, [pc, #256]	; (3c138 <z_impl_k_msgq_put+0x11c>)
   3c036:	2376      	movs	r3, #118	; 0x76
   3c038:	4a40      	ldr	r2, [pc, #256]	; (3c13c <z_impl_k_msgq_put+0x120>)
   3c03a:	4841      	ldr	r0, [pc, #260]	; (3c140 <z_impl_k_msgq_put+0x124>)
   3c03c:	f005 f9c2 	bl	413c4 <printk>
   3c040:	4840      	ldr	r0, [pc, #256]	; (3c144 <z_impl_k_msgq_put+0x128>)
   3c042:	f005 f9bf 	bl	413c4 <printk>
   3c046:	2176      	movs	r1, #118	; 0x76
   3c048:	483c      	ldr	r0, [pc, #240]	; (3c13c <z_impl_k_msgq_put+0x120>)
   3c04a:	f005 fbd8 	bl	417fe <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   3c04e:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   3c052:	f04f 0320 	mov.w	r3, #32
   3c056:	f3ef 8711 	mrs	r7, BASEPRI
   3c05a:	f383 8811 	msr	BASEPRI, r3
   3c05e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c062:	4628      	mov	r0, r5
   3c064:	f001 ff68 	bl	3df38 <z_spin_lock_valid>
   3c068:	b968      	cbnz	r0, 3c086 <z_impl_k_msgq_put+0x6a>
   3c06a:	235c      	movs	r3, #92	; 0x5c
   3c06c:	4a36      	ldr	r2, [pc, #216]	; (3c148 <z_impl_k_msgq_put+0x12c>)
   3c06e:	4937      	ldr	r1, [pc, #220]	; (3c14c <z_impl_k_msgq_put+0x130>)
   3c070:	4833      	ldr	r0, [pc, #204]	; (3c140 <z_impl_k_msgq_put+0x124>)
   3c072:	f005 f9a7 	bl	413c4 <printk>
   3c076:	4629      	mov	r1, r5
   3c078:	4835      	ldr	r0, [pc, #212]	; (3c150 <z_impl_k_msgq_put+0x134>)
   3c07a:	f005 f9a3 	bl	413c4 <printk>
   3c07e:	215c      	movs	r1, #92	; 0x5c
   3c080:	4831      	ldr	r0, [pc, #196]	; (3c148 <z_impl_k_msgq_put+0x12c>)
   3c082:	f005 fbbc 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3c086:	4628      	mov	r0, r5
   3c088:	f001 ff74 	bl	3df74 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   3c08c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3c08e:	6923      	ldr	r3, [r4, #16]
   3c090:	429a      	cmp	r2, r3
   3c092:	d23d      	bcs.n	3c110 <z_impl_k_msgq_put+0xf4>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3c094:	4620      	mov	r0, r4
   3c096:	f001 fb19 	bl	3d6cc <z_unpend_first_thread>
   3c09a:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   3c09c:	4606      	mov	r6, r0
   3c09e:	68e2      	ldr	r2, [r4, #12]
   3c0a0:	b178      	cbz	r0, 3c0c2 <z_impl_k_msgq_put+0xa6>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   3c0a2:	2400      	movs	r4, #0
   3c0a4:	6940      	ldr	r0, [r0, #20]
   3c0a6:	f008 fe1e 	bl	44ce6 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   3c0aa:	4630      	mov	r0, r6
   3c0ac:	67f4      	str	r4, [r6, #124]	; 0x7c
   3c0ae:	f000 fe7f 	bl	3cdb0 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   3c0b2:	4639      	mov	r1, r7
   3c0b4:	4628      	mov	r0, r5
   3c0b6:	f000 fc57 	bl	3c968 <z_reschedule>
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3c0ba:	4620      	mov	r0, r4
   3c0bc:	b002      	add	sp, #8
   3c0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3c0c2:	6a20      	ldr	r0, [r4, #32]
   3c0c4:	f008 fe0f 	bl	44ce6 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   3c0c8:	6a23      	ldr	r3, [r4, #32]
   3c0ca:	68e2      	ldr	r2, [r4, #12]
   3c0cc:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3c0ce:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3c0d0:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3c0d2:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3c0d4:	bf04      	itt	eq
   3c0d6:	6963      	ldreq	r3, [r4, #20]
   3c0d8:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   3c0da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c0dc:	3301      	adds	r3, #1
   3c0de:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   3c0e0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c0e2:	4628      	mov	r0, r5
   3c0e4:	f001 ff36 	bl	3df54 <z_spin_unlock_valid>
   3c0e8:	b968      	cbnz	r0, 3c106 <z_impl_k_msgq_put+0xea>
   3c0ea:	2384      	movs	r3, #132	; 0x84
   3c0ec:	4a16      	ldr	r2, [pc, #88]	; (3c148 <z_impl_k_msgq_put+0x12c>)
   3c0ee:	4919      	ldr	r1, [pc, #100]	; (3c154 <z_impl_k_msgq_put+0x138>)
   3c0f0:	4813      	ldr	r0, [pc, #76]	; (3c140 <z_impl_k_msgq_put+0x124>)
   3c0f2:	f005 f967 	bl	413c4 <printk>
   3c0f6:	4629      	mov	r1, r5
   3c0f8:	4817      	ldr	r0, [pc, #92]	; (3c158 <z_impl_k_msgq_put+0x13c>)
   3c0fa:	f005 f963 	bl	413c4 <printk>
   3c0fe:	2184      	movs	r1, #132	; 0x84
   3c100:	4811      	ldr	r0, [pc, #68]	; (3c148 <z_impl_k_msgq_put+0x12c>)
   3c102:	f005 fb7c 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3c106:	f387 8811 	msr	BASEPRI, r7
   3c10a:	f3bf 8f6f 	isb	sy
	return result;
   3c10e:	e7d4      	b.n	3c0ba <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3c110:	ea58 0309 	orrs.w	r3, r8, r9
   3c114:	d00c      	beq.n	3c130 <z_impl_k_msgq_put+0x114>
		_current->base.swap_data = (void *) data;
   3c116:	4b11      	ldr	r3, [pc, #68]	; (3c15c <z_impl_k_msgq_put+0x140>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c118:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   3c11a:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c11c:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   3c11e:	f8c3 a014 	str.w	sl, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c122:	4628      	mov	r0, r5
   3c124:	e9cd 8900 	strd	r8, r9, [sp]
   3c128:	f001 fa0a 	bl	3d540 <z_pend_curr>
   3c12c:	4604      	mov	r4, r0
   3c12e:	e7c4      	b.n	3c0ba <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
   3c130:	f06f 0422 	mvn.w	r4, #34	; 0x22
   3c134:	e7d5      	b.n	3c0e2 <z_impl_k_msgq_put+0xc6>
   3c136:	bf00      	nop
   3c138:	0004ed5c 	.word	0x0004ed5c
   3c13c:	0004ede3 	.word	0x0004ede3
   3c140:	00048156 	.word	0x00048156
   3c144:	00049046 	.word	0x00049046
   3c148:	000488fa 	.word	0x000488fa
   3c14c:	00048920 	.word	0x00048920
   3c150:	00048935 	.word	0x00048935
   3c154:	0004894d 	.word	0x0004894d
   3c158:	00048964 	.word	0x00048964
   3c15c:	20025d48 	.word	0x20025d48

0003c160 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   3c160:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3c164:	4604      	mov	r4, r0
   3c166:	460d      	mov	r5, r1
   3c168:	4690      	mov	r8, r2
   3c16a:	4699      	mov	r9, r3
   3c16c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   3c170:	b17b      	cbz	r3, 3c192 <z_impl_k_msgq_get+0x32>
   3c172:	ea58 0309 	orrs.w	r3, r8, r9
   3c176:	d00c      	beq.n	3c192 <z_impl_k_msgq_get+0x32>
   3c178:	4946      	ldr	r1, [pc, #280]	; (3c294 <z_impl_k_msgq_get+0x134>)
   3c17a:	23c2      	movs	r3, #194	; 0xc2
   3c17c:	4a46      	ldr	r2, [pc, #280]	; (3c298 <z_impl_k_msgq_get+0x138>)
   3c17e:	4847      	ldr	r0, [pc, #284]	; (3c29c <z_impl_k_msgq_get+0x13c>)
   3c180:	f005 f920 	bl	413c4 <printk>
   3c184:	4846      	ldr	r0, [pc, #280]	; (3c2a0 <z_impl_k_msgq_get+0x140>)
   3c186:	f005 f91d 	bl	413c4 <printk>
   3c18a:	21c2      	movs	r1, #194	; 0xc2
   3c18c:	4842      	ldr	r0, [pc, #264]	; (3c298 <z_impl_k_msgq_get+0x138>)
   3c18e:	f005 fb36 	bl	417fe <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   3c192:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   3c196:	f04f 0320 	mov.w	r3, #32
   3c19a:	f3ef 8711 	mrs	r7, BASEPRI
   3c19e:	f383 8811 	msr	BASEPRI, r3
   3c1a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c1a6:	4630      	mov	r0, r6
   3c1a8:	f001 fec6 	bl	3df38 <z_spin_lock_valid>
   3c1ac:	b968      	cbnz	r0, 3c1ca <z_impl_k_msgq_get+0x6a>
   3c1ae:	235c      	movs	r3, #92	; 0x5c
   3c1b0:	4a3c      	ldr	r2, [pc, #240]	; (3c2a4 <z_impl_k_msgq_get+0x144>)
   3c1b2:	493d      	ldr	r1, [pc, #244]	; (3c2a8 <z_impl_k_msgq_get+0x148>)
   3c1b4:	4839      	ldr	r0, [pc, #228]	; (3c29c <z_impl_k_msgq_get+0x13c>)
   3c1b6:	f005 f905 	bl	413c4 <printk>
   3c1ba:	4631      	mov	r1, r6
   3c1bc:	483b      	ldr	r0, [pc, #236]	; (3c2ac <z_impl_k_msgq_get+0x14c>)
   3c1be:	f005 f901 	bl	413c4 <printk>
   3c1c2:	215c      	movs	r1, #92	; 0x5c
   3c1c4:	4837      	ldr	r0, [pc, #220]	; (3c2a4 <z_impl_k_msgq_get+0x144>)
   3c1c6:	f005 fb1a 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3c1ca:	4630      	mov	r0, r6
   3c1cc:	f001 fed2 	bl	3df74 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   3c1d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c1d2:	2b00      	cmp	r3, #0
   3c1d4:	d035      	beq.n	3c242 <z_impl_k_msgq_get+0xe2>
   3c1d6:	4628      	mov	r0, r5
   3c1d8:	68e2      	ldr	r2, [r4, #12]
   3c1da:	69e1      	ldr	r1, [r4, #28]
   3c1dc:	f008 fd83 	bl	44ce6 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   3c1e0:	69e3      	ldr	r3, [r4, #28]
   3c1e2:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3c1e4:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   3c1e6:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   3c1e8:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   3c1ea:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   3c1ec:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   3c1ee:	bf04      	itt	eq
   3c1f0:	6963      	ldreq	r3, [r4, #20]
   3c1f2:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   3c1f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c1f6:	3b01      	subs	r3, #1
   3c1f8:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3c1fa:	f001 fa67 	bl	3d6cc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3c1fe:	4605      	mov	r5, r0
   3c200:	2800      	cmp	r0, #0
   3c202:	d02f      	beq.n	3c264 <z_impl_k_msgq_get+0x104>
   3c204:	6941      	ldr	r1, [r0, #20]
   3c206:	68e2      	ldr	r2, [r4, #12]
   3c208:	6a20      	ldr	r0, [r4, #32]
   3c20a:	f008 fd6c 	bl	44ce6 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   3c20e:	6a23      	ldr	r3, [r4, #32]
   3c210:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   3c212:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   3c214:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3c216:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3c218:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3c21a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3c21c:	bf04      	itt	eq
   3c21e:	6963      	ldreq	r3, [r4, #20]
   3c220:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   3c222:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c224:	3301      	adds	r3, #1
   3c226:	6263      	str	r3, [r4, #36]	; 0x24
   3c228:	2400      	movs	r4, #0
   3c22a:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   3c22c:	f000 fdc0 	bl	3cdb0 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   3c230:	4639      	mov	r1, r7
   3c232:	4630      	mov	r0, r6
   3c234:	f000 fb98 	bl	3c968 <z_reschedule>
			return 0;
   3c238:	4625      	mov	r5, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3c23a:	4628      	mov	r0, r5
   3c23c:	b003      	add	sp, #12
   3c23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3c242:	ea58 0309 	orrs.w	r3, r8, r9
   3c246:	d00b      	beq.n	3c260 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
   3c248:	4b19      	ldr	r3, [pc, #100]	; (3c2b0 <z_impl_k_msgq_get+0x150>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c24a:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3c24c:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c24e:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   3c250:	615d      	str	r5, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c252:	4630      	mov	r0, r6
   3c254:	e9cd 8900 	strd	r8, r9, [sp]
   3c258:	f001 f972 	bl	3d540 <z_pend_curr>
   3c25c:	4605      	mov	r5, r0
   3c25e:	e7ec      	b.n	3c23a <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
   3c260:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c264:	4630      	mov	r0, r6
   3c266:	f001 fe75 	bl	3df54 <z_spin_unlock_valid>
   3c26a:	b968      	cbnz	r0, 3c288 <z_impl_k_msgq_get+0x128>
   3c26c:	2384      	movs	r3, #132	; 0x84
   3c26e:	4a0d      	ldr	r2, [pc, #52]	; (3c2a4 <z_impl_k_msgq_get+0x144>)
   3c270:	4910      	ldr	r1, [pc, #64]	; (3c2b4 <z_impl_k_msgq_get+0x154>)
   3c272:	480a      	ldr	r0, [pc, #40]	; (3c29c <z_impl_k_msgq_get+0x13c>)
   3c274:	f005 f8a6 	bl	413c4 <printk>
   3c278:	4631      	mov	r1, r6
   3c27a:	480f      	ldr	r0, [pc, #60]	; (3c2b8 <z_impl_k_msgq_get+0x158>)
   3c27c:	f005 f8a2 	bl	413c4 <printk>
   3c280:	2184      	movs	r1, #132	; 0x84
   3c282:	4808      	ldr	r0, [pc, #32]	; (3c2a4 <z_impl_k_msgq_get+0x144>)
   3c284:	f005 fabb 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3c288:	f387 8811 	msr	BASEPRI, r7
   3c28c:	f3bf 8f6f 	isb	sy
	return result;
   3c290:	e7d3      	b.n	3c23a <z_impl_k_msgq_get+0xda>
   3c292:	bf00      	nop
   3c294:	0004ed5c 	.word	0x0004ed5c
   3c298:	0004ede3 	.word	0x0004ede3
   3c29c:	00048156 	.word	0x00048156
   3c2a0:	00049046 	.word	0x00049046
   3c2a4:	000488fa 	.word	0x000488fa
   3c2a8:	00048920 	.word	0x00048920
   3c2ac:	00048935 	.word	0x00048935
   3c2b0:	20025d48 	.word	0x20025d48
   3c2b4:	0004894d 	.word	0x0004894d
   3c2b8:	00048964 	.word	0x00048964

0003c2bc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   3c2bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3c2c0:	4604      	mov	r4, r0
   3c2c2:	4616      	mov	r6, r2
   3c2c4:	461f      	mov	r7, r3
   3c2c6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   3c2ca:	b163      	cbz	r3, 3c2e6 <z_impl_k_mutex_lock+0x2a>
   3c2cc:	496d      	ldr	r1, [pc, #436]	; (3c484 <z_impl_k_mutex_lock+0x1c8>)
   3c2ce:	237d      	movs	r3, #125	; 0x7d
   3c2d0:	4a6d      	ldr	r2, [pc, #436]	; (3c488 <z_impl_k_mutex_lock+0x1cc>)
   3c2d2:	486e      	ldr	r0, [pc, #440]	; (3c48c <z_impl_k_mutex_lock+0x1d0>)
   3c2d4:	f005 f876 	bl	413c4 <printk>
   3c2d8:	486d      	ldr	r0, [pc, #436]	; (3c490 <z_impl_k_mutex_lock+0x1d4>)
   3c2da:	f005 f873 	bl	413c4 <printk>
   3c2de:	217d      	movs	r1, #125	; 0x7d
   3c2e0:	4869      	ldr	r0, [pc, #420]	; (3c488 <z_impl_k_mutex_lock+0x1cc>)
   3c2e2:	f005 fa8c 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3c2e6:	f04f 0320 	mov.w	r3, #32
   3c2ea:	f3ef 8811 	mrs	r8, BASEPRI
   3c2ee:	f383 8811 	msr	BASEPRI, r3
   3c2f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c2f6:	4867      	ldr	r0, [pc, #412]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c2f8:	f001 fe1e 	bl	3df38 <z_spin_lock_valid>
   3c2fc:	b968      	cbnz	r0, 3c31a <z_impl_k_mutex_lock+0x5e>
   3c2fe:	235c      	movs	r3, #92	; 0x5c
   3c300:	4a65      	ldr	r2, [pc, #404]	; (3c498 <z_impl_k_mutex_lock+0x1dc>)
   3c302:	4966      	ldr	r1, [pc, #408]	; (3c49c <z_impl_k_mutex_lock+0x1e0>)
   3c304:	4861      	ldr	r0, [pc, #388]	; (3c48c <z_impl_k_mutex_lock+0x1d0>)
   3c306:	f005 f85d 	bl	413c4 <printk>
   3c30a:	4962      	ldr	r1, [pc, #392]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c30c:	4864      	ldr	r0, [pc, #400]	; (3c4a0 <z_impl_k_mutex_lock+0x1e4>)
   3c30e:	f005 f859 	bl	413c4 <printk>
   3c312:	215c      	movs	r1, #92	; 0x5c
   3c314:	4860      	ldr	r0, [pc, #384]	; (3c498 <z_impl_k_mutex_lock+0x1dc>)
   3c316:	f005 fa72 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3c31a:	485e      	ldr	r0, [pc, #376]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c31c:	f001 fe2a 	bl	3df74 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   3c320:	68e3      	ldr	r3, [r4, #12]
   3c322:	4a60      	ldr	r2, [pc, #384]	; (3c4a4 <z_impl_k_mutex_lock+0x1e8>)
   3c324:	b1fb      	cbz	r3, 3c366 <z_impl_k_mutex_lock+0xaa>
   3c326:	68a0      	ldr	r0, [r4, #8]
   3c328:	6891      	ldr	r1, [r2, #8]
   3c32a:	4288      	cmp	r0, r1
   3c32c:	d03d      	beq.n	3c3aa <z_impl_k_mutex_lock+0xee>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   3c32e:	ea56 0307 	orrs.w	r3, r6, r7
   3c332:	d13c      	bne.n	3c3ae <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c334:	4857      	ldr	r0, [pc, #348]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c336:	f001 fe0d 	bl	3df54 <z_spin_unlock_valid>
   3c33a:	b968      	cbnz	r0, 3c358 <z_impl_k_mutex_lock+0x9c>
   3c33c:	2384      	movs	r3, #132	; 0x84
   3c33e:	4a56      	ldr	r2, [pc, #344]	; (3c498 <z_impl_k_mutex_lock+0x1dc>)
   3c340:	4959      	ldr	r1, [pc, #356]	; (3c4a8 <z_impl_k_mutex_lock+0x1ec>)
   3c342:	4852      	ldr	r0, [pc, #328]	; (3c48c <z_impl_k_mutex_lock+0x1d0>)
   3c344:	f005 f83e 	bl	413c4 <printk>
   3c348:	4952      	ldr	r1, [pc, #328]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c34a:	4858      	ldr	r0, [pc, #352]	; (3c4ac <z_impl_k_mutex_lock+0x1f0>)
   3c34c:	f005 f83a 	bl	413c4 <printk>
   3c350:	2184      	movs	r1, #132	; 0x84
   3c352:	4851      	ldr	r0, [pc, #324]	; (3c498 <z_impl_k_mutex_lock+0x1dc>)
   3c354:	f005 fa53 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3c358:	f388 8811 	msr	BASEPRI, r8
   3c35c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   3c360:	f06f 000f 	mvn.w	r0, #15
   3c364:	e01e      	b.n	3c3a4 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   3c366:	6891      	ldr	r1, [r2, #8]
   3c368:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   3c36c:	3301      	adds	r3, #1
   3c36e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   3c370:	6893      	ldr	r3, [r2, #8]
   3c372:	4848      	ldr	r0, [pc, #288]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   3c374:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   3c376:	60a3      	str	r3, [r4, #8]
   3c378:	f001 fdec 	bl	3df54 <z_spin_unlock_valid>
   3c37c:	b968      	cbnz	r0, 3c39a <z_impl_k_mutex_lock+0xde>
   3c37e:	2384      	movs	r3, #132	; 0x84
   3c380:	4a45      	ldr	r2, [pc, #276]	; (3c498 <z_impl_k_mutex_lock+0x1dc>)
   3c382:	4949      	ldr	r1, [pc, #292]	; (3c4a8 <z_impl_k_mutex_lock+0x1ec>)
   3c384:	4841      	ldr	r0, [pc, #260]	; (3c48c <z_impl_k_mutex_lock+0x1d0>)
   3c386:	f005 f81d 	bl	413c4 <printk>
   3c38a:	4942      	ldr	r1, [pc, #264]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c38c:	4847      	ldr	r0, [pc, #284]	; (3c4ac <z_impl_k_mutex_lock+0x1f0>)
   3c38e:	f005 f819 	bl	413c4 <printk>
   3c392:	2184      	movs	r1, #132	; 0x84
   3c394:	4840      	ldr	r0, [pc, #256]	; (3c498 <z_impl_k_mutex_lock+0x1dc>)
   3c396:	f005 fa32 	bl	417fe <assert_post_action>
   3c39a:	f388 8811 	msr	BASEPRI, r8
   3c39e:	f3bf 8f6f 	isb	sy
		return 0;
   3c3a2:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   3c3a4:	b002      	add	sp, #8
   3c3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   3c3aa:	6921      	ldr	r1, [r4, #16]
   3c3ac:	e7de      	b.n	3c36c <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   3c3ae:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3c3b2:	f991 100e 	ldrsb.w	r1, [r1, #14]
   3c3b6:	4299      	cmp	r1, r3
   3c3b8:	bfa8      	it	ge
   3c3ba:	4619      	movge	r1, r3
   3c3bc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   3c3c0:	4299      	cmp	r1, r3
   3c3c2:	da41      	bge.n	3c448 <z_impl_k_mutex_lock+0x18c>
		return z_set_prio(mutex->owner, new_prio);
   3c3c4:	f001 f8ec 	bl	3d5a0 <z_set_prio>
   3c3c8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   3c3ca:	4622      	mov	r2, r4
   3c3cc:	4641      	mov	r1, r8
   3c3ce:	e9cd 6700 	strd	r6, r7, [sp]
   3c3d2:	4830      	ldr	r0, [pc, #192]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c3d4:	f001 f8b4 	bl	3d540 <z_pend_curr>
	if (got_mutex == 0) {
   3c3d8:	2800      	cmp	r0, #0
   3c3da:	d0e3      	beq.n	3c3a4 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   3c3dc:	f04f 0320 	mov.w	r3, #32
   3c3e0:	f3ef 8611 	mrs	r6, BASEPRI
   3c3e4:	f383 8811 	msr	BASEPRI, r3
   3c3e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c3ec:	4829      	ldr	r0, [pc, #164]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c3ee:	f001 fda3 	bl	3df38 <z_spin_lock_valid>
   3c3f2:	b968      	cbnz	r0, 3c410 <z_impl_k_mutex_lock+0x154>
   3c3f4:	235c      	movs	r3, #92	; 0x5c
   3c3f6:	4a28      	ldr	r2, [pc, #160]	; (3c498 <z_impl_k_mutex_lock+0x1dc>)
   3c3f8:	4928      	ldr	r1, [pc, #160]	; (3c49c <z_impl_k_mutex_lock+0x1e0>)
   3c3fa:	4824      	ldr	r0, [pc, #144]	; (3c48c <z_impl_k_mutex_lock+0x1d0>)
   3c3fc:	f004 ffe2 	bl	413c4 <printk>
   3c400:	4924      	ldr	r1, [pc, #144]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c402:	4827      	ldr	r0, [pc, #156]	; (3c4a0 <z_impl_k_mutex_lock+0x1e4>)
   3c404:	f004 ffde 	bl	413c4 <printk>
   3c408:	215c      	movs	r1, #92	; 0x5c
   3c40a:	4823      	ldr	r0, [pc, #140]	; (3c498 <z_impl_k_mutex_lock+0x1dc>)
   3c40c:	f005 f9f7 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3c410:	4820      	ldr	r0, [pc, #128]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c412:	f001 fdaf 	bl	3df74 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   3c416:	6823      	ldr	r3, [r4, #0]
   3c418:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3c41a:	42a3      	cmp	r3, r4
   3c41c:	d007      	beq.n	3c42e <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   3c41e:	b133      	cbz	r3, 3c42e <z_impl_k_mutex_lock+0x172>
   3c420:	f993 300e 	ldrsb.w	r3, [r3, #14]
   3c424:	4299      	cmp	r1, r3
   3c426:	bfa8      	it	ge
   3c428:	4619      	movge	r1, r3
   3c42a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3c42e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   3c430:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3c434:	4299      	cmp	r1, r3
   3c436:	d109      	bne.n	3c44c <z_impl_k_mutex_lock+0x190>
	if (resched) {
   3c438:	b16d      	cbz	r5, 3c456 <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
   3c43a:	4631      	mov	r1, r6
   3c43c:	4815      	ldr	r0, [pc, #84]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c43e:	f000 fa93 	bl	3c968 <z_reschedule>
	return -EAGAIN;
   3c442:	f06f 000a 	mvn.w	r0, #10
   3c446:	e7ad      	b.n	3c3a4 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   3c448:	2500      	movs	r5, #0
   3c44a:	e7be      	b.n	3c3ca <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   3c44c:	f001 f8a8 	bl	3d5a0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3c450:	2800      	cmp	r0, #0
   3c452:	d1f2      	bne.n	3c43a <z_impl_k_mutex_lock+0x17e>
   3c454:	e7f0      	b.n	3c438 <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c456:	480f      	ldr	r0, [pc, #60]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c458:	f001 fd7c 	bl	3df54 <z_spin_unlock_valid>
   3c45c:	b968      	cbnz	r0, 3c47a <z_impl_k_mutex_lock+0x1be>
   3c45e:	2384      	movs	r3, #132	; 0x84
   3c460:	4a0d      	ldr	r2, [pc, #52]	; (3c498 <z_impl_k_mutex_lock+0x1dc>)
   3c462:	4911      	ldr	r1, [pc, #68]	; (3c4a8 <z_impl_k_mutex_lock+0x1ec>)
   3c464:	4809      	ldr	r0, [pc, #36]	; (3c48c <z_impl_k_mutex_lock+0x1d0>)
   3c466:	f004 ffad 	bl	413c4 <printk>
   3c46a:	490a      	ldr	r1, [pc, #40]	; (3c494 <z_impl_k_mutex_lock+0x1d8>)
   3c46c:	480f      	ldr	r0, [pc, #60]	; (3c4ac <z_impl_k_mutex_lock+0x1f0>)
   3c46e:	f004 ffa9 	bl	413c4 <printk>
   3c472:	2184      	movs	r1, #132	; 0x84
   3c474:	4808      	ldr	r0, [pc, #32]	; (3c498 <z_impl_k_mutex_lock+0x1dc>)
   3c476:	f005 f9c2 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3c47a:	f386 8811 	msr	BASEPRI, r6
   3c47e:	f3bf 8f6f 	isb	sy
   3c482:	e7de      	b.n	3c442 <z_impl_k_mutex_lock+0x186>
   3c484:	0004ee27 	.word	0x0004ee27
   3c488:	0004ee05 	.word	0x0004ee05
   3c48c:	00048156 	.word	0x00048156
   3c490:	0004ee39 	.word	0x0004ee39
   3c494:	20025d44 	.word	0x20025d44
   3c498:	000488fa 	.word	0x000488fa
   3c49c:	00048920 	.word	0x00048920
   3c4a0:	00048935 	.word	0x00048935
   3c4a4:	20025d48 	.word	0x20025d48
   3c4a8:	0004894d 	.word	0x0004894d
   3c4ac:	00048964 	.word	0x00048964

0003c4b0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   3c4b0:	b538      	push	{r3, r4, r5, lr}
   3c4b2:	4604      	mov	r4, r0
   3c4b4:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   3c4b8:	b163      	cbz	r3, 3c4d4 <z_impl_k_mutex_unlock+0x24>
   3c4ba:	4954      	ldr	r1, [pc, #336]	; (3c60c <z_impl_k_mutex_unlock+0x15c>)
   3c4bc:	23d8      	movs	r3, #216	; 0xd8
   3c4be:	4a54      	ldr	r2, [pc, #336]	; (3c610 <z_impl_k_mutex_unlock+0x160>)
   3c4c0:	4854      	ldr	r0, [pc, #336]	; (3c614 <z_impl_k_mutex_unlock+0x164>)
   3c4c2:	f004 ff7f 	bl	413c4 <printk>
   3c4c6:	4854      	ldr	r0, [pc, #336]	; (3c618 <z_impl_k_mutex_unlock+0x168>)
   3c4c8:	f004 ff7c 	bl	413c4 <printk>
   3c4cc:	21d8      	movs	r1, #216	; 0xd8
   3c4ce:	4850      	ldr	r0, [pc, #320]	; (3c610 <z_impl_k_mutex_unlock+0x160>)
   3c4d0:	f005 f995 	bl	417fe <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   3c4d4:	68a3      	ldr	r3, [r4, #8]
   3c4d6:	2b00      	cmp	r3, #0
   3c4d8:	f000 8091 	beq.w	3c5fe <z_impl_k_mutex_unlock+0x14e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   3c4dc:	4d4f      	ldr	r5, [pc, #316]	; (3c61c <z_impl_k_mutex_unlock+0x16c>)
   3c4de:	68aa      	ldr	r2, [r5, #8]
   3c4e0:	4293      	cmp	r3, r2
   3c4e2:	f040 808f 	bne.w	3c604 <z_impl_k_mutex_unlock+0x154>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   3c4e6:	68e3      	ldr	r3, [r4, #12]
   3c4e8:	b94b      	cbnz	r3, 3c4fe <z_impl_k_mutex_unlock+0x4e>
   3c4ea:	494d      	ldr	r1, [pc, #308]	; (3c620 <z_impl_k_mutex_unlock+0x170>)
   3c4ec:	4849      	ldr	r0, [pc, #292]	; (3c614 <z_impl_k_mutex_unlock+0x164>)
   3c4ee:	23ea      	movs	r3, #234	; 0xea
   3c4f0:	4a47      	ldr	r2, [pc, #284]	; (3c610 <z_impl_k_mutex_unlock+0x160>)
   3c4f2:	f004 ff67 	bl	413c4 <printk>
   3c4f6:	21ea      	movs	r1, #234	; 0xea
   3c4f8:	4845      	ldr	r0, [pc, #276]	; (3c610 <z_impl_k_mutex_unlock+0x160>)
   3c4fa:	f005 f980 	bl	417fe <assert_post_action>
   3c4fe:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   3c502:	b173      	cbz	r3, 3c522 <z_impl_k_mutex_unlock+0x72>
   3c504:	4941      	ldr	r1, [pc, #260]	; (3c60c <z_impl_k_mutex_unlock+0x15c>)
   3c506:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3c50a:	4a46      	ldr	r2, [pc, #280]	; (3c624 <z_impl_k_mutex_unlock+0x174>)
   3c50c:	4841      	ldr	r0, [pc, #260]	; (3c614 <z_impl_k_mutex_unlock+0x164>)
   3c50e:	f004 ff59 	bl	413c4 <printk>
   3c512:	4845      	ldr	r0, [pc, #276]	; (3c628 <z_impl_k_mutex_unlock+0x178>)
   3c514:	f004 ff56 	bl	413c4 <printk>
   3c518:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3c51c:	4841      	ldr	r0, [pc, #260]	; (3c624 <z_impl_k_mutex_unlock+0x174>)
   3c51e:	f005 f96e 	bl	417fe <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3c522:	68ab      	ldr	r3, [r5, #8]
   3c524:	7bdb      	ldrb	r3, [r3, #15]
   3c526:	2b01      	cmp	r3, #1
   3c528:	d10e      	bne.n	3c548 <z_impl_k_mutex_unlock+0x98>
   3c52a:	4940      	ldr	r1, [pc, #256]	; (3c62c <z_impl_k_mutex_unlock+0x17c>)
   3c52c:	f240 130d 	movw	r3, #269	; 0x10d
   3c530:	4a3c      	ldr	r2, [pc, #240]	; (3c624 <z_impl_k_mutex_unlock+0x174>)
   3c532:	4838      	ldr	r0, [pc, #224]	; (3c614 <z_impl_k_mutex_unlock+0x164>)
   3c534:	f004 ff46 	bl	413c4 <printk>
   3c538:	483b      	ldr	r0, [pc, #236]	; (3c628 <z_impl_k_mutex_unlock+0x178>)
   3c53a:	f004 ff43 	bl	413c4 <printk>
   3c53e:	f240 110d 	movw	r1, #269	; 0x10d
   3c542:	4838      	ldr	r0, [pc, #224]	; (3c624 <z_impl_k_mutex_unlock+0x174>)
   3c544:	f005 f95b 	bl	417fe <assert_post_action>

	--_current->base.sched_locked;
   3c548:	68aa      	ldr	r2, [r5, #8]
   3c54a:	7bd3      	ldrb	r3, [r2, #15]
   3c54c:	3b01      	subs	r3, #1
   3c54e:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   3c550:	68e3      	ldr	r3, [r4, #12]
   3c552:	2b01      	cmp	r3, #1
   3c554:	d005      	beq.n	3c562 <z_impl_k_mutex_unlock+0xb2>
		mutex->lock_count--;
   3c556:	3b01      	subs	r3, #1
   3c558:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   3c55a:	f000 fb5f 	bl	3cc1c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   3c55e:	2000      	movs	r0, #0
}
   3c560:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   3c562:	f04f 0320 	mov.w	r3, #32
   3c566:	f3ef 8511 	mrs	r5, BASEPRI
   3c56a:	f383 8811 	msr	BASEPRI, r3
   3c56e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c572:	482f      	ldr	r0, [pc, #188]	; (3c630 <z_impl_k_mutex_unlock+0x180>)
   3c574:	f001 fce0 	bl	3df38 <z_spin_lock_valid>
   3c578:	b968      	cbnz	r0, 3c596 <z_impl_k_mutex_unlock+0xe6>
   3c57a:	235c      	movs	r3, #92	; 0x5c
   3c57c:	4a2d      	ldr	r2, [pc, #180]	; (3c634 <z_impl_k_mutex_unlock+0x184>)
   3c57e:	492e      	ldr	r1, [pc, #184]	; (3c638 <z_impl_k_mutex_unlock+0x188>)
   3c580:	4824      	ldr	r0, [pc, #144]	; (3c614 <z_impl_k_mutex_unlock+0x164>)
   3c582:	f004 ff1f 	bl	413c4 <printk>
   3c586:	492a      	ldr	r1, [pc, #168]	; (3c630 <z_impl_k_mutex_unlock+0x180>)
   3c588:	482c      	ldr	r0, [pc, #176]	; (3c63c <z_impl_k_mutex_unlock+0x18c>)
   3c58a:	f004 ff1b 	bl	413c4 <printk>
   3c58e:	215c      	movs	r1, #92	; 0x5c
   3c590:	4828      	ldr	r0, [pc, #160]	; (3c634 <z_impl_k_mutex_unlock+0x184>)
   3c592:	f005 f934 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3c596:	4826      	ldr	r0, [pc, #152]	; (3c630 <z_impl_k_mutex_unlock+0x180>)
   3c598:	f001 fcec 	bl	3df74 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   3c59c:	68a0      	ldr	r0, [r4, #8]
   3c59e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   3c5a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3c5a4:	4299      	cmp	r1, r3
   3c5a6:	d001      	beq.n	3c5ac <z_impl_k_mutex_unlock+0xfc>
		return z_set_prio(mutex->owner, new_prio);
   3c5a8:	f000 fffa 	bl	3d5a0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   3c5ac:	4620      	mov	r0, r4
   3c5ae:	f001 f88d 	bl	3d6cc <z_unpend_first_thread>
	mutex->owner = new_owner;
   3c5b2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   3c5b4:	b158      	cbz	r0, 3c5ce <z_impl_k_mutex_unlock+0x11e>
		mutex->owner_orig_prio = new_owner->base.prio;
   3c5b6:	f990 200e 	ldrsb.w	r2, [r0, #14]
   3c5ba:	6122      	str	r2, [r4, #16]
   3c5bc:	2200      	movs	r2, #0
   3c5be:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   3c5c0:	f000 fbf6 	bl	3cdb0 <z_ready_thread>
		z_reschedule(&lock, key);
   3c5c4:	4629      	mov	r1, r5
   3c5c6:	481a      	ldr	r0, [pc, #104]	; (3c630 <z_impl_k_mutex_unlock+0x180>)
   3c5c8:	f000 f9ce 	bl	3c968 <z_reschedule>
   3c5cc:	e7c5      	b.n	3c55a <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count = 0U;
   3c5ce:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c5d0:	4817      	ldr	r0, [pc, #92]	; (3c630 <z_impl_k_mutex_unlock+0x180>)
   3c5d2:	f001 fcbf 	bl	3df54 <z_spin_unlock_valid>
   3c5d6:	b968      	cbnz	r0, 3c5f4 <z_impl_k_mutex_unlock+0x144>
   3c5d8:	2384      	movs	r3, #132	; 0x84
   3c5da:	4a16      	ldr	r2, [pc, #88]	; (3c634 <z_impl_k_mutex_unlock+0x184>)
   3c5dc:	4918      	ldr	r1, [pc, #96]	; (3c640 <z_impl_k_mutex_unlock+0x190>)
   3c5de:	480d      	ldr	r0, [pc, #52]	; (3c614 <z_impl_k_mutex_unlock+0x164>)
   3c5e0:	f004 fef0 	bl	413c4 <printk>
   3c5e4:	4912      	ldr	r1, [pc, #72]	; (3c630 <z_impl_k_mutex_unlock+0x180>)
   3c5e6:	4817      	ldr	r0, [pc, #92]	; (3c644 <z_impl_k_mutex_unlock+0x194>)
   3c5e8:	f004 feec 	bl	413c4 <printk>
   3c5ec:	2184      	movs	r1, #132	; 0x84
   3c5ee:	4811      	ldr	r0, [pc, #68]	; (3c634 <z_impl_k_mutex_unlock+0x184>)
   3c5f0:	f005 f905 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3c5f4:	f385 8811 	msr	BASEPRI, r5
   3c5f8:	f3bf 8f6f 	isb	sy
   3c5fc:	e7ad      	b.n	3c55a <z_impl_k_mutex_unlock+0xaa>
		return -EINVAL;
   3c5fe:	f06f 0015 	mvn.w	r0, #21
   3c602:	e7ad      	b.n	3c560 <z_impl_k_mutex_unlock+0xb0>
		return -EPERM;
   3c604:	f04f 30ff 	mov.w	r0, #4294967295
   3c608:	e7aa      	b.n	3c560 <z_impl_k_mutex_unlock+0xb0>
   3c60a:	bf00      	nop
   3c60c:	0004ee27 	.word	0x0004ee27
   3c610:	0004ee05 	.word	0x0004ee05
   3c614:	00048156 	.word	0x00048156
   3c618:	0004ee39 	.word	0x0004ee39
   3c61c:	20025d48 	.word	0x20025d48
   3c620:	0004ee5e 	.word	0x0004ee5e
   3c624:	0004ee75 	.word	0x0004ee75
   3c628:	00049046 	.word	0x00049046
   3c62c:	0004eea0 	.word	0x0004eea0
   3c630:	20025d44 	.word	0x20025d44
   3c634:	000488fa 	.word	0x000488fa
   3c638:	00048920 	.word	0x00048920
   3c63c:	00048935 	.word	0x00048935
   3c640:	0004894d 	.word	0x0004894d
   3c644:	00048964 	.word	0x00048964

0003c648 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   3c648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c64c:	4604      	mov	r4, r0
   3c64e:	460e      	mov	r6, r1
   3c650:	4690      	mov	r8, r2
   3c652:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3c654:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3c658:	f04f 0320 	mov.w	r3, #32
   3c65c:	f3ef 8711 	mrs	r7, BASEPRI
   3c660:	f383 8811 	msr	BASEPRI, r3
   3c664:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c668:	4628      	mov	r0, r5
   3c66a:	f001 fc65 	bl	3df38 <z_spin_lock_valid>
   3c66e:	b968      	cbnz	r0, 3c68c <queue_insert+0x44>
   3c670:	235c      	movs	r3, #92	; 0x5c
   3c672:	4a39      	ldr	r2, [pc, #228]	; (3c758 <queue_insert+0x110>)
   3c674:	4939      	ldr	r1, [pc, #228]	; (3c75c <queue_insert+0x114>)
   3c676:	483a      	ldr	r0, [pc, #232]	; (3c760 <queue_insert+0x118>)
   3c678:	f004 fea4 	bl	413c4 <printk>
   3c67c:	4629      	mov	r1, r5
   3c67e:	4839      	ldr	r0, [pc, #228]	; (3c764 <queue_insert+0x11c>)
   3c680:	f004 fea0 	bl	413c4 <printk>
   3c684:	215c      	movs	r1, #92	; 0x5c
   3c686:	4834      	ldr	r0, [pc, #208]	; (3c758 <queue_insert+0x110>)
   3c688:	f005 f8b9 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3c68c:	4628      	mov	r0, r5
   3c68e:	f001 fc71 	bl	3df74 <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   3c692:	f104 000c 	add.w	r0, r4, #12
   3c696:	f001 f819 	bl	3d6cc <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   3c69a:	b158      	cbz	r0, 3c6b4 <queue_insert+0x6c>
   3c69c:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   3c69e:	f8c0 8014 	str.w	r8, [r0, #20]
   3c6a2:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   3c6a4:	f000 fb84 	bl	3cdb0 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   3c6a8:	4628      	mov	r0, r5
   3c6aa:	4639      	mov	r1, r7
   3c6ac:	f000 f95c 	bl	3c968 <z_reschedule>
	return 0;
   3c6b0:	2000      	movs	r0, #0
   3c6b2:	e01e      	b.n	3c6f2 <queue_insert+0xaa>
	if (alloc) {
   3c6b4:	f1b9 0f00 	cmp.w	r9, #0
   3c6b8:	d02d      	beq.n	3c716 <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
   3c6ba:	2008      	movs	r0, #8
   3c6bc:	f002 fc5c 	bl	3ef78 <z_thread_malloc>
		if (anode == NULL) {
   3c6c0:	b9c8      	cbnz	r0, 3c6f6 <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c6c2:	4628      	mov	r0, r5
   3c6c4:	f001 fc46 	bl	3df54 <z_spin_unlock_valid>
   3c6c8:	b968      	cbnz	r0, 3c6e6 <queue_insert+0x9e>
   3c6ca:	2384      	movs	r3, #132	; 0x84
   3c6cc:	4a22      	ldr	r2, [pc, #136]	; (3c758 <queue_insert+0x110>)
   3c6ce:	4926      	ldr	r1, [pc, #152]	; (3c768 <queue_insert+0x120>)
   3c6d0:	4823      	ldr	r0, [pc, #140]	; (3c760 <queue_insert+0x118>)
   3c6d2:	f004 fe77 	bl	413c4 <printk>
   3c6d6:	4629      	mov	r1, r5
   3c6d8:	4824      	ldr	r0, [pc, #144]	; (3c76c <queue_insert+0x124>)
   3c6da:	f004 fe73 	bl	413c4 <printk>
   3c6de:	2184      	movs	r1, #132	; 0x84
   3c6e0:	481d      	ldr	r0, [pc, #116]	; (3c758 <queue_insert+0x110>)
   3c6e2:	f005 f88c 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3c6e6:	f387 8811 	msr	BASEPRI, r7
   3c6ea:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   3c6ee:	f06f 000b 	mvn.w	r0, #11
}
   3c6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   3c6f6:	2301      	movs	r3, #1
		anode->data = data;
   3c6f8:	f8c0 8004 	str.w	r8, [r0, #4]
   3c6fc:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   3c6fe:	6803      	ldr	r3, [r0, #0]
   3c700:	f003 0303 	and.w	r3, r3, #3
   3c704:	b95e      	cbnz	r6, 3c71e <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c706:	6822      	ldr	r2, [r4, #0]
   3c708:	4313      	orrs	r3, r2
   3c70a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3c70c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   3c70e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3c710:	b973      	cbnz	r3, 3c730 <queue_insert+0xe8>
	list->tail = node;
   3c712:	6060      	str	r0, [r4, #4]
}
   3c714:	e00c      	b.n	3c730 <queue_insert+0xe8>
}
   3c716:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   3c718:	f8c8 9000 	str.w	r9, [r8]
}
   3c71c:	e7ef      	b.n	3c6fe <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3c71e:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3c720:	f032 0203 	bics.w	r2, r2, #3
   3c724:	d110      	bne.n	3c748 <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
   3c726:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c728:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   3c72a:	b93a      	cbnz	r2, 3c73c <queue_insert+0xf4>
	list->head = node;
   3c72c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3c730:	2104      	movs	r1, #4
   3c732:	f104 0014 	add.w	r0, r4, #20
   3c736:	f008 fa73 	bl	44c20 <z_handle_obj_poll_events>
   3c73a:	e7b5      	b.n	3c6a8 <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3c73c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c73e:	f003 0303 	and.w	r3, r3, #3
   3c742:	4303      	orrs	r3, r0
   3c744:	6013      	str	r3, [r2, #0]
   3c746:	e7e4      	b.n	3c712 <queue_insert+0xca>
   3c748:	4313      	orrs	r3, r2
   3c74a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3c74c:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3c74e:	f003 0303 	and.w	r3, r3, #3
   3c752:	4303      	orrs	r3, r0
   3c754:	6033      	str	r3, [r6, #0]
}
   3c756:	e7eb      	b.n	3c730 <queue_insert+0xe8>
   3c758:	000488fa 	.word	0x000488fa
   3c75c:	00048920 	.word	0x00048920
   3c760:	00048156 	.word	0x00048156
   3c764:	00048935 	.word	0x00048935
   3c768:	0004894d 	.word	0x0004894d
   3c76c:	00048964 	.word	0x00048964

0003c770 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   3c770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3c774:	4606      	mov	r6, r0
   3c776:	4690      	mov	r8, r2
   3c778:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3c77a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3c77e:	f04f 0320 	mov.w	r3, #32
   3c782:	f3ef 8711 	mrs	r7, BASEPRI
   3c786:	f383 8811 	msr	BASEPRI, r3
   3c78a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c78e:	4628      	mov	r0, r5
   3c790:	f001 fbd2 	bl	3df38 <z_spin_lock_valid>
   3c794:	b968      	cbnz	r0, 3c7b2 <z_impl_k_queue_get+0x42>
   3c796:	235c      	movs	r3, #92	; 0x5c
   3c798:	4a25      	ldr	r2, [pc, #148]	; (3c830 <z_impl_k_queue_get+0xc0>)
   3c79a:	4926      	ldr	r1, [pc, #152]	; (3c834 <z_impl_k_queue_get+0xc4>)
   3c79c:	4826      	ldr	r0, [pc, #152]	; (3c838 <z_impl_k_queue_get+0xc8>)
   3c79e:	f004 fe11 	bl	413c4 <printk>
   3c7a2:	4629      	mov	r1, r5
   3c7a4:	4825      	ldr	r0, [pc, #148]	; (3c83c <z_impl_k_queue_get+0xcc>)
   3c7a6:	f004 fe0d 	bl	413c4 <printk>
   3c7aa:	215c      	movs	r1, #92	; 0x5c
   3c7ac:	4820      	ldr	r0, [pc, #128]	; (3c830 <z_impl_k_queue_get+0xc0>)
   3c7ae:	f005 f826 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3c7b2:	4628      	mov	r0, r5
   3c7b4:	f001 fbde 	bl	3df74 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   3c7b8:	6834      	ldr	r4, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   3c7ba:	b33c      	cbz	r4, 3c80c <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3c7bc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3c7be:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3c7c0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3c7c4:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   3c7c6:	4620      	mov	r0, r4
   3c7c8:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   3c7cc:	6033      	str	r3, [r6, #0]
	list->tail = node;
   3c7ce:	bf08      	it	eq
   3c7d0:	6073      	streq	r3, [r6, #4]
   3c7d2:	f008 f8c3 	bl	4495c <z_queue_node_peek>
   3c7d6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c7d8:	4628      	mov	r0, r5
   3c7da:	f001 fbbb 	bl	3df54 <z_spin_unlock_valid>
   3c7de:	b968      	cbnz	r0, 3c7fc <z_impl_k_queue_get+0x8c>
   3c7e0:	2384      	movs	r3, #132	; 0x84
   3c7e2:	4a13      	ldr	r2, [pc, #76]	; (3c830 <z_impl_k_queue_get+0xc0>)
   3c7e4:	4916      	ldr	r1, [pc, #88]	; (3c840 <z_impl_k_queue_get+0xd0>)
   3c7e6:	4814      	ldr	r0, [pc, #80]	; (3c838 <z_impl_k_queue_get+0xc8>)
   3c7e8:	f004 fdec 	bl	413c4 <printk>
   3c7ec:	4629      	mov	r1, r5
   3c7ee:	4815      	ldr	r0, [pc, #84]	; (3c844 <z_impl_k_queue_get+0xd4>)
   3c7f0:	f004 fde8 	bl	413c4 <printk>
   3c7f4:	2184      	movs	r1, #132	; 0x84
   3c7f6:	480e      	ldr	r0, [pc, #56]	; (3c830 <z_impl_k_queue_get+0xc0>)
   3c7f8:	f005 f801 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3c7fc:	f387 8811 	msr	BASEPRI, r7
   3c800:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   3c804:	4620      	mov	r0, r4
   3c806:	b003      	add	sp, #12
   3c808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3c80c:	ea58 0309 	orrs.w	r3, r8, r9
   3c810:	d0e2      	beq.n	3c7d8 <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   3c812:	4639      	mov	r1, r7
   3c814:	4628      	mov	r0, r5
   3c816:	e9cd 8900 	strd	r8, r9, [sp]
   3c81a:	f106 020c 	add.w	r2, r6, #12
   3c81e:	f000 fe8f 	bl	3d540 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   3c822:	2800      	cmp	r0, #0
   3c824:	d1ee      	bne.n	3c804 <z_impl_k_queue_get+0x94>
   3c826:	4b08      	ldr	r3, [pc, #32]	; (3c848 <z_impl_k_queue_get+0xd8>)
   3c828:	689b      	ldr	r3, [r3, #8]
   3c82a:	695c      	ldr	r4, [r3, #20]
   3c82c:	e7ea      	b.n	3c804 <z_impl_k_queue_get+0x94>
   3c82e:	bf00      	nop
   3c830:	000488fa 	.word	0x000488fa
   3c834:	00048920 	.word	0x00048920
   3c838:	00048156 	.word	0x00048156
   3c83c:	00048935 	.word	0x00048935
   3c840:	0004894d 	.word	0x0004894d
   3c844:	00048964 	.word	0x00048964
   3c848:	20025d48 	.word	0x20025d48

0003c84c <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   3c84c:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   3c84e:	b510      	push	{r4, lr}
   3c850:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   3c852:	b95b      	cbnz	r3, 3c86c <pended_on.isra.0+0x20>
   3c854:	4906      	ldr	r1, [pc, #24]	; (3c870 <pended_on.isra.0+0x24>)
   3c856:	4807      	ldr	r0, [pc, #28]	; (3c874 <pended_on.isra.0+0x28>)
   3c858:	f240 13ed 	movw	r3, #493	; 0x1ed
   3c85c:	4a06      	ldr	r2, [pc, #24]	; (3c878 <pended_on.isra.0+0x2c>)
   3c85e:	f004 fdb1 	bl	413c4 <printk>
   3c862:	f240 11ed 	movw	r1, #493	; 0x1ed
   3c866:	4804      	ldr	r0, [pc, #16]	; (3c878 <pended_on.isra.0+0x2c>)
   3c868:	f004 ffc9 	bl	417fe <assert_post_action>

	return thread->base.pended_on;
}
   3c86c:	6820      	ldr	r0, [r4, #0]
   3c86e:	bd10      	pop	{r4, pc}
   3c870:	0004eef2 	.word	0x0004eef2
   3c874:	00048156 	.word	0x00048156
   3c878:	0004eed0 	.word	0x0004eed0

0003c87c <z_reset_time_slice>:
{
   3c87c:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   3c87e:	4c08      	ldr	r4, [pc, #32]	; (3c8a0 <z_reset_time_slice+0x24>)
   3c880:	6823      	ldr	r3, [r4, #0]
   3c882:	b15b      	cbz	r3, 3c89c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   3c884:	f7ea f872 	bl	2696c <z_clock_elapsed>
   3c888:	6822      	ldr	r2, [r4, #0]
   3c88a:	4906      	ldr	r1, [pc, #24]	; (3c8a4 <z_reset_time_slice+0x28>)
   3c88c:	4410      	add	r0, r2
   3c88e:	6108      	str	r0, [r1, #16]
}
   3c890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   3c894:	2100      	movs	r1, #0
   3c896:	4610      	mov	r0, r2
   3c898:	f001 be9e 	b.w	3e5d8 <z_set_timeout_expiry>
}
   3c89c:	bd10      	pop	{r4, pc}
   3c89e:	bf00      	nop
   3c8a0:	20025d88 	.word	0x20025d88
   3c8a4:	20025d48 	.word	0x20025d48

0003c8a8 <k_sched_time_slice_set>:
{
   3c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c8aa:	4605      	mov	r5, r0
   3c8ac:	460c      	mov	r4, r1
	__asm__ volatile(
   3c8ae:	f04f 0320 	mov.w	r3, #32
   3c8b2:	f3ef 8611 	mrs	r6, BASEPRI
   3c8b6:	f383 8811 	msr	BASEPRI, r3
   3c8ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c8be:	4820      	ldr	r0, [pc, #128]	; (3c940 <k_sched_time_slice_set+0x98>)
   3c8c0:	f001 fb3a 	bl	3df38 <z_spin_lock_valid>
   3c8c4:	b968      	cbnz	r0, 3c8e2 <k_sched_time_slice_set+0x3a>
   3c8c6:	235c      	movs	r3, #92	; 0x5c
   3c8c8:	4a1e      	ldr	r2, [pc, #120]	; (3c944 <k_sched_time_slice_set+0x9c>)
   3c8ca:	491f      	ldr	r1, [pc, #124]	; (3c948 <k_sched_time_slice_set+0xa0>)
   3c8cc:	481f      	ldr	r0, [pc, #124]	; (3c94c <k_sched_time_slice_set+0xa4>)
   3c8ce:	f004 fd79 	bl	413c4 <printk>
   3c8d2:	491b      	ldr	r1, [pc, #108]	; (3c940 <k_sched_time_slice_set+0x98>)
   3c8d4:	481e      	ldr	r0, [pc, #120]	; (3c950 <k_sched_time_slice_set+0xa8>)
   3c8d6:	f004 fd75 	bl	413c4 <printk>
   3c8da:	215c      	movs	r1, #92	; 0x5c
   3c8dc:	4819      	ldr	r0, [pc, #100]	; (3c944 <k_sched_time_slice_set+0x9c>)
   3c8de:	f004 ff8e 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3c8e2:	4817      	ldr	r0, [pc, #92]	; (3c940 <k_sched_time_slice_set+0x98>)
   3c8e4:	f001 fb46 	bl	3df74 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   3c8e8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   3c8ec:	2200      	movs	r2, #0
   3c8ee:	f240 30e7 	movw	r0, #999	; 0x3e7
   3c8f2:	2100      	movs	r1, #0
   3c8f4:	4b17      	ldr	r3, [pc, #92]	; (3c954 <k_sched_time_slice_set+0xac>)
   3c8f6:	fbe7 0105 	umlal	r0, r1, r7, r5
   3c8fa:	611a      	str	r2, [r3, #16]
   3c8fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3c900:	2300      	movs	r3, #0
   3c902:	f7e0 fadb 	bl	1cebc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   3c906:	4b14      	ldr	r3, [pc, #80]	; (3c958 <k_sched_time_slice_set+0xb0>)
   3c908:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   3c90a:	4b14      	ldr	r3, [pc, #80]	; (3c95c <k_sched_time_slice_set+0xb4>)
   3c90c:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   3c90e:	f7ff ffb5 	bl	3c87c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c912:	480b      	ldr	r0, [pc, #44]	; (3c940 <k_sched_time_slice_set+0x98>)
   3c914:	f001 fb1e 	bl	3df54 <z_spin_unlock_valid>
   3c918:	b968      	cbnz	r0, 3c936 <k_sched_time_slice_set+0x8e>
   3c91a:	2384      	movs	r3, #132	; 0x84
   3c91c:	4a09      	ldr	r2, [pc, #36]	; (3c944 <k_sched_time_slice_set+0x9c>)
   3c91e:	4910      	ldr	r1, [pc, #64]	; (3c960 <k_sched_time_slice_set+0xb8>)
   3c920:	480a      	ldr	r0, [pc, #40]	; (3c94c <k_sched_time_slice_set+0xa4>)
   3c922:	f004 fd4f 	bl	413c4 <printk>
   3c926:	4906      	ldr	r1, [pc, #24]	; (3c940 <k_sched_time_slice_set+0x98>)
   3c928:	480e      	ldr	r0, [pc, #56]	; (3c964 <k_sched_time_slice_set+0xbc>)
   3c92a:	f004 fd4b 	bl	413c4 <printk>
   3c92e:	2184      	movs	r1, #132	; 0x84
   3c930:	4804      	ldr	r0, [pc, #16]	; (3c944 <k_sched_time_slice_set+0x9c>)
   3c932:	f004 ff64 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3c936:	f386 8811 	msr	BASEPRI, r6
   3c93a:	f3bf 8f6f 	isb	sy
}
   3c93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3c940:	20025d80 	.word	0x20025d80
   3c944:	000488fa 	.word	0x000488fa
   3c948:	00048920 	.word	0x00048920
   3c94c:	00048156 	.word	0x00048156
   3c950:	00048935 	.word	0x00048935
   3c954:	20025d48 	.word	0x20025d48
   3c958:	20025d88 	.word	0x20025d88
   3c95c:	20025d84 	.word	0x20025d84
   3c960:	0004894d 	.word	0x0004894d
   3c964:	00048964 	.word	0x00048964

0003c968 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   3c968:	b538      	push	{r3, r4, r5, lr}
   3c96a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3c96c:	460d      	mov	r5, r1
   3c96e:	b9e9      	cbnz	r1, 3c9ac <z_reschedule+0x44>
   3c970:	f3ef 8305 	mrs	r3, IPSR
   3c974:	b9d3      	cbnz	r3, 3c9ac <z_reschedule+0x44>
	return _kernel.ready_q.cache;
   3c976:	4b19      	ldr	r3, [pc, #100]	; (3c9dc <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   3c978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   3c97a:	689b      	ldr	r3, [r3, #8]
   3c97c:	429a      	cmp	r2, r3
   3c97e:	d015      	beq.n	3c9ac <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c980:	f001 fae8 	bl	3df54 <z_spin_unlock_valid>
   3c984:	b968      	cbnz	r0, 3c9a2 <z_reschedule+0x3a>
   3c986:	239b      	movs	r3, #155	; 0x9b
   3c988:	4a15      	ldr	r2, [pc, #84]	; (3c9e0 <z_reschedule+0x78>)
   3c98a:	4916      	ldr	r1, [pc, #88]	; (3c9e4 <z_reschedule+0x7c>)
   3c98c:	4816      	ldr	r0, [pc, #88]	; (3c9e8 <z_reschedule+0x80>)
   3c98e:	f004 fd19 	bl	413c4 <printk>
   3c992:	4621      	mov	r1, r4
   3c994:	4815      	ldr	r0, [pc, #84]	; (3c9ec <z_reschedule+0x84>)
   3c996:	f004 fd15 	bl	413c4 <printk>
   3c99a:	219b      	movs	r1, #155	; 0x9b
   3c99c:	4810      	ldr	r0, [pc, #64]	; (3c9e0 <z_reschedule+0x78>)
   3c99e:	f004 ff2e 	bl	417fe <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   3c9a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   3c9a6:	2000      	movs	r0, #0
   3c9a8:	f7ea b8c2 	b.w	26b30 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c9ac:	4620      	mov	r0, r4
   3c9ae:	f001 fad1 	bl	3df54 <z_spin_unlock_valid>
   3c9b2:	b968      	cbnz	r0, 3c9d0 <z_reschedule+0x68>
   3c9b4:	2384      	movs	r3, #132	; 0x84
   3c9b6:	4a0a      	ldr	r2, [pc, #40]	; (3c9e0 <z_reschedule+0x78>)
   3c9b8:	490a      	ldr	r1, [pc, #40]	; (3c9e4 <z_reschedule+0x7c>)
   3c9ba:	480b      	ldr	r0, [pc, #44]	; (3c9e8 <z_reschedule+0x80>)
   3c9bc:	f004 fd02 	bl	413c4 <printk>
   3c9c0:	4621      	mov	r1, r4
   3c9c2:	480a      	ldr	r0, [pc, #40]	; (3c9ec <z_reschedule+0x84>)
   3c9c4:	f004 fcfe 	bl	413c4 <printk>
   3c9c8:	2184      	movs	r1, #132	; 0x84
   3c9ca:	4805      	ldr	r0, [pc, #20]	; (3c9e0 <z_reschedule+0x78>)
   3c9cc:	f004 ff17 	bl	417fe <assert_post_action>
   3c9d0:	f385 8811 	msr	BASEPRI, r5
   3c9d4:	f3bf 8f6f 	isb	sy
   3c9d8:	bd38      	pop	{r3, r4, r5, pc}
   3c9da:	bf00      	nop
   3c9dc:	20025d48 	.word	0x20025d48
   3c9e0:	000488fa 	.word	0x000488fa
   3c9e4:	0004894d 	.word	0x0004894d
   3c9e8:	00048156 	.word	0x00048156
   3c9ec:	00048964 	.word	0x00048964

0003c9f0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   3c9f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3c9f2:	f04f 0320 	mov.w	r3, #32
   3c9f6:	f3ef 8511 	mrs	r5, BASEPRI
   3c9fa:	f383 8811 	msr	BASEPRI, r3
   3c9fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ca02:	482b      	ldr	r0, [pc, #172]	; (3cab0 <k_sched_lock+0xc0>)
   3ca04:	f001 fa98 	bl	3df38 <z_spin_lock_valid>
   3ca08:	b968      	cbnz	r0, 3ca26 <k_sched_lock+0x36>
   3ca0a:	235c      	movs	r3, #92	; 0x5c
   3ca0c:	4a29      	ldr	r2, [pc, #164]	; (3cab4 <k_sched_lock+0xc4>)
   3ca0e:	492a      	ldr	r1, [pc, #168]	; (3cab8 <k_sched_lock+0xc8>)
   3ca10:	482a      	ldr	r0, [pc, #168]	; (3cabc <k_sched_lock+0xcc>)
   3ca12:	f004 fcd7 	bl	413c4 <printk>
   3ca16:	4926      	ldr	r1, [pc, #152]	; (3cab0 <k_sched_lock+0xc0>)
   3ca18:	4829      	ldr	r0, [pc, #164]	; (3cac0 <k_sched_lock+0xd0>)
   3ca1a:	f004 fcd3 	bl	413c4 <printk>
   3ca1e:	215c      	movs	r1, #92	; 0x5c
   3ca20:	4824      	ldr	r0, [pc, #144]	; (3cab4 <k_sched_lock+0xc4>)
   3ca22:	f004 feec 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3ca26:	4822      	ldr	r0, [pc, #136]	; (3cab0 <k_sched_lock+0xc0>)
   3ca28:	f001 faa4 	bl	3df74 <z_spin_lock_set_owner>
   3ca2c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3ca30:	b173      	cbz	r3, 3ca50 <k_sched_lock+0x60>
   3ca32:	4924      	ldr	r1, [pc, #144]	; (3cac4 <k_sched_lock+0xd4>)
   3ca34:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3ca38:	4a23      	ldr	r2, [pc, #140]	; (3cac8 <k_sched_lock+0xd8>)
   3ca3a:	4820      	ldr	r0, [pc, #128]	; (3cabc <k_sched_lock+0xcc>)
   3ca3c:	f004 fcc2 	bl	413c4 <printk>
   3ca40:	4822      	ldr	r0, [pc, #136]	; (3cacc <k_sched_lock+0xdc>)
   3ca42:	f004 fcbf 	bl	413c4 <printk>
   3ca46:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3ca4a:	481f      	ldr	r0, [pc, #124]	; (3cac8 <k_sched_lock+0xd8>)
   3ca4c:	f004 fed7 	bl	417fe <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3ca50:	4c1f      	ldr	r4, [pc, #124]	; (3cad0 <k_sched_lock+0xe0>)
   3ca52:	68a2      	ldr	r2, [r4, #8]
   3ca54:	7bd2      	ldrb	r2, [r2, #15]
   3ca56:	2a01      	cmp	r2, #1
   3ca58:	d10e      	bne.n	3ca78 <k_sched_lock+0x88>
   3ca5a:	491e      	ldr	r1, [pc, #120]	; (3cad4 <k_sched_lock+0xe4>)
   3ca5c:	f240 130d 	movw	r3, #269	; 0x10d
   3ca60:	4a19      	ldr	r2, [pc, #100]	; (3cac8 <k_sched_lock+0xd8>)
   3ca62:	4816      	ldr	r0, [pc, #88]	; (3cabc <k_sched_lock+0xcc>)
   3ca64:	f004 fcae 	bl	413c4 <printk>
   3ca68:	4818      	ldr	r0, [pc, #96]	; (3cacc <k_sched_lock+0xdc>)
   3ca6a:	f004 fcab 	bl	413c4 <printk>
   3ca6e:	f240 110d 	movw	r1, #269	; 0x10d
   3ca72:	4815      	ldr	r0, [pc, #84]	; (3cac8 <k_sched_lock+0xd8>)
   3ca74:	f004 fec3 	bl	417fe <assert_post_action>
	--_current->base.sched_locked;
   3ca78:	68a2      	ldr	r2, [r4, #8]
   3ca7a:	7bd3      	ldrb	r3, [r2, #15]
   3ca7c:	3b01      	subs	r3, #1
   3ca7e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ca80:	480b      	ldr	r0, [pc, #44]	; (3cab0 <k_sched_lock+0xc0>)
   3ca82:	f001 fa67 	bl	3df54 <z_spin_unlock_valid>
   3ca86:	b968      	cbnz	r0, 3caa4 <k_sched_lock+0xb4>
   3ca88:	2384      	movs	r3, #132	; 0x84
   3ca8a:	4a0a      	ldr	r2, [pc, #40]	; (3cab4 <k_sched_lock+0xc4>)
   3ca8c:	4912      	ldr	r1, [pc, #72]	; (3cad8 <k_sched_lock+0xe8>)
   3ca8e:	480b      	ldr	r0, [pc, #44]	; (3cabc <k_sched_lock+0xcc>)
   3ca90:	f004 fc98 	bl	413c4 <printk>
   3ca94:	4906      	ldr	r1, [pc, #24]	; (3cab0 <k_sched_lock+0xc0>)
   3ca96:	4811      	ldr	r0, [pc, #68]	; (3cadc <k_sched_lock+0xec>)
   3ca98:	f004 fc94 	bl	413c4 <printk>
   3ca9c:	2184      	movs	r1, #132	; 0x84
   3ca9e:	4805      	ldr	r0, [pc, #20]	; (3cab4 <k_sched_lock+0xc4>)
   3caa0:	f004 fead 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3caa4:	f385 8811 	msr	BASEPRI, r5
   3caa8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   3caac:	bd38      	pop	{r3, r4, r5, pc}
   3caae:	bf00      	nop
   3cab0:	20025d80 	.word	0x20025d80
   3cab4:	000488fa 	.word	0x000488fa
   3cab8:	00048920 	.word	0x00048920
   3cabc:	00048156 	.word	0x00048156
   3cac0:	00048935 	.word	0x00048935
   3cac4:	0004ee27 	.word	0x0004ee27
   3cac8:	0004ee75 	.word	0x0004ee75
   3cacc:	00049046 	.word	0x00049046
   3cad0:	20025d48 	.word	0x20025d48
   3cad4:	0004eea0 	.word	0x0004eea0
   3cad8:	0004894d 	.word	0x0004894d
   3cadc:	00048964 	.word	0x00048964

0003cae0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3cae0:	4b11      	ldr	r3, [pc, #68]	; (3cb28 <z_priq_dumb_remove+0x48>)
{
   3cae2:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3cae4:	f103 0228 	add.w	r2, r3, #40	; 0x28
   3cae8:	4282      	cmp	r2, r0
{
   3caea:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3caec:	d105      	bne.n	3cafa <z_priq_dumb_remove+0x1a>
   3caee:	689b      	ldr	r3, [r3, #8]
   3caf0:	428b      	cmp	r3, r1
   3caf2:	d102      	bne.n	3cafa <z_priq_dumb_remove+0x1a>
   3caf4:	7b4b      	ldrb	r3, [r1, #13]
   3caf6:	06db      	lsls	r3, r3, #27
   3caf8:	d115      	bne.n	3cb26 <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3cafa:	4b0c      	ldr	r3, [pc, #48]	; (3cb2c <z_priq_dumb_remove+0x4c>)
   3cafc:	429c      	cmp	r4, r3
   3cafe:	d10b      	bne.n	3cb18 <z_priq_dumb_remove+0x38>
   3cb00:	490b      	ldr	r1, [pc, #44]	; (3cb30 <z_priq_dumb_remove+0x50>)
   3cb02:	480c      	ldr	r0, [pc, #48]	; (3cb34 <z_priq_dumb_remove+0x54>)
   3cb04:	f240 339f 	movw	r3, #927	; 0x39f
   3cb08:	4a0b      	ldr	r2, [pc, #44]	; (3cb38 <z_priq_dumb_remove+0x58>)
   3cb0a:	f004 fc5b 	bl	413c4 <printk>
   3cb0e:	f240 319f 	movw	r1, #927	; 0x39f
   3cb12:	4809      	ldr	r0, [pc, #36]	; (3cb38 <z_priq_dumb_remove+0x58>)
   3cb14:	f004 fe73 	bl	417fe <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   3cb18:	e9d4 3200 	ldrd	r3, r2, [r4]
   3cb1c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3cb1e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3cb20:	2300      	movs	r3, #0
	node->prev = NULL;
   3cb22:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   3cb26:	bd10      	pop	{r4, pc}
   3cb28:	20025d48 	.word	0x20025d48
   3cb2c:	20024368 	.word	0x20024368
   3cb30:	0004ef09 	.word	0x0004ef09
   3cb34:	00048156 	.word	0x00048156
   3cb38:	0004eed0 	.word	0x0004eed0

0003cb3c <z_unpend_thread>:
{
   3cb3c:	b538      	push	{r3, r4, r5, lr}
   3cb3e:	4604      	mov	r4, r0
	__asm__ volatile(
   3cb40:	f04f 0320 	mov.w	r3, #32
   3cb44:	f3ef 8511 	mrs	r5, BASEPRI
   3cb48:	f383 8811 	msr	BASEPRI, r3
   3cb4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cb50:	4819      	ldr	r0, [pc, #100]	; (3cbb8 <z_unpend_thread+0x7c>)
   3cb52:	f001 f9f1 	bl	3df38 <z_spin_lock_valid>
   3cb56:	b968      	cbnz	r0, 3cb74 <z_unpend_thread+0x38>
   3cb58:	235c      	movs	r3, #92	; 0x5c
   3cb5a:	4a18      	ldr	r2, [pc, #96]	; (3cbbc <z_unpend_thread+0x80>)
   3cb5c:	4918      	ldr	r1, [pc, #96]	; (3cbc0 <z_unpend_thread+0x84>)
   3cb5e:	4819      	ldr	r0, [pc, #100]	; (3cbc4 <z_unpend_thread+0x88>)
   3cb60:	f004 fc30 	bl	413c4 <printk>
   3cb64:	4914      	ldr	r1, [pc, #80]	; (3cbb8 <z_unpend_thread+0x7c>)
   3cb66:	4818      	ldr	r0, [pc, #96]	; (3cbc8 <z_unpend_thread+0x8c>)
   3cb68:	f004 fc2c 	bl	413c4 <printk>
   3cb6c:	215c      	movs	r1, #92	; 0x5c
   3cb6e:	4813      	ldr	r0, [pc, #76]	; (3cbbc <z_unpend_thread+0x80>)
   3cb70:	f004 fe45 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3cb74:	4810      	ldr	r0, [pc, #64]	; (3cbb8 <z_unpend_thread+0x7c>)
   3cb76:	f001 f9fd 	bl	3df74 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   3cb7a:	4620      	mov	r0, r4
   3cb7c:	f007 ff2b 	bl	449d6 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cb80:	480d      	ldr	r0, [pc, #52]	; (3cbb8 <z_unpend_thread+0x7c>)
   3cb82:	f001 f9e7 	bl	3df54 <z_spin_unlock_valid>
   3cb86:	b968      	cbnz	r0, 3cba4 <z_unpend_thread+0x68>
   3cb88:	2384      	movs	r3, #132	; 0x84
   3cb8a:	4a0c      	ldr	r2, [pc, #48]	; (3cbbc <z_unpend_thread+0x80>)
   3cb8c:	490f      	ldr	r1, [pc, #60]	; (3cbcc <z_unpend_thread+0x90>)
   3cb8e:	480d      	ldr	r0, [pc, #52]	; (3cbc4 <z_unpend_thread+0x88>)
   3cb90:	f004 fc18 	bl	413c4 <printk>
   3cb94:	4908      	ldr	r1, [pc, #32]	; (3cbb8 <z_unpend_thread+0x7c>)
   3cb96:	480e      	ldr	r0, [pc, #56]	; (3cbd0 <z_unpend_thread+0x94>)
   3cb98:	f004 fc14 	bl	413c4 <printk>
   3cb9c:	2184      	movs	r1, #132	; 0x84
   3cb9e:	4807      	ldr	r0, [pc, #28]	; (3cbbc <z_unpend_thread+0x80>)
   3cba0:	f004 fe2d 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3cba4:	f385 8811 	msr	BASEPRI, r5
   3cba8:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   3cbac:	f104 0018 	add.w	r0, r4, #24
}
   3cbb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3cbb4:	f001 bc2e 	b.w	3e414 <z_abort_timeout>
   3cbb8:	20025d80 	.word	0x20025d80
   3cbbc:	000488fa 	.word	0x000488fa
   3cbc0:	00048920 	.word	0x00048920
   3cbc4:	00048156 	.word	0x00048156
   3cbc8:	00048935 	.word	0x00048935
   3cbcc:	0004894d 	.word	0x0004894d
   3cbd0:	00048964 	.word	0x00048964

0003cbd4 <update_cache>:
{
   3cbd4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   3cbd6:	4c10      	ldr	r4, [pc, #64]	; (3cc18 <update_cache+0x44>)
{
   3cbd8:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   3cbda:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3cbde:	f007 ff09 	bl	449f4 <z_priq_dumb_best>
   3cbe2:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   3cbe4:	68a3      	ldr	r3, [r4, #8]
   3cbe6:	7b59      	ldrb	r1, [r3, #13]
   3cbe8:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   3cbea:	bf44      	itt	mi
   3cbec:	f041 0108 	orrmi.w	r1, r1, #8
   3cbf0:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   3cbf2:	b905      	cbnz	r5, 3cbf6 <update_cache+0x22>
   3cbf4:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   3cbf6:	b94e      	cbnz	r6, 3cc0c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   3cbf8:	7b5a      	ldrb	r2, [r3, #13]
   3cbfa:	06d2      	lsls	r2, r2, #27
   3cbfc:	d106      	bne.n	3cc0c <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   3cbfe:	69aa      	ldr	r2, [r5, #24]
   3cc00:	b922      	cbnz	r2, 3cc0c <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   3cc02:	89da      	ldrh	r2, [r3, #14]
   3cc04:	2a7f      	cmp	r2, #127	; 0x7f
   3cc06:	d901      	bls.n	3cc0c <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   3cc08:	6263      	str	r3, [r4, #36]	; 0x24
}
   3cc0a:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   3cc0c:	42ab      	cmp	r3, r5
   3cc0e:	d001      	beq.n	3cc14 <update_cache+0x40>
			z_reset_time_slice();
   3cc10:	f7ff fe34 	bl	3c87c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   3cc14:	6265      	str	r5, [r4, #36]	; 0x24
}
   3cc16:	e7f8      	b.n	3cc0a <update_cache+0x36>
   3cc18:	20025d48 	.word	0x20025d48

0003cc1c <k_sched_unlock>:
{
   3cc1c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3cc1e:	f04f 0320 	mov.w	r3, #32
   3cc22:	f3ef 8511 	mrs	r5, BASEPRI
   3cc26:	f383 8811 	msr	BASEPRI, r3
   3cc2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cc2e:	482d      	ldr	r0, [pc, #180]	; (3cce4 <k_sched_unlock+0xc8>)
   3cc30:	f001 f982 	bl	3df38 <z_spin_lock_valid>
   3cc34:	b968      	cbnz	r0, 3cc52 <k_sched_unlock+0x36>
   3cc36:	235c      	movs	r3, #92	; 0x5c
   3cc38:	4a2b      	ldr	r2, [pc, #172]	; (3cce8 <k_sched_unlock+0xcc>)
   3cc3a:	492c      	ldr	r1, [pc, #176]	; (3ccec <k_sched_unlock+0xd0>)
   3cc3c:	482c      	ldr	r0, [pc, #176]	; (3ccf0 <k_sched_unlock+0xd4>)
   3cc3e:	f004 fbc1 	bl	413c4 <printk>
   3cc42:	4928      	ldr	r1, [pc, #160]	; (3cce4 <k_sched_unlock+0xc8>)
   3cc44:	482b      	ldr	r0, [pc, #172]	; (3ccf4 <k_sched_unlock+0xd8>)
   3cc46:	f004 fbbd 	bl	413c4 <printk>
   3cc4a:	215c      	movs	r1, #92	; 0x5c
   3cc4c:	4826      	ldr	r0, [pc, #152]	; (3cce8 <k_sched_unlock+0xcc>)
   3cc4e:	f004 fdd6 	bl	417fe <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   3cc52:	4c29      	ldr	r4, [pc, #164]	; (3ccf8 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   3cc54:	4823      	ldr	r0, [pc, #140]	; (3cce4 <k_sched_unlock+0xc8>)
   3cc56:	f001 f98d 	bl	3df74 <z_spin_lock_set_owner>
   3cc5a:	68a2      	ldr	r2, [r4, #8]
   3cc5c:	7bd2      	ldrb	r2, [r2, #15]
   3cc5e:	b972      	cbnz	r2, 3cc7e <k_sched_unlock+0x62>
   3cc60:	4926      	ldr	r1, [pc, #152]	; (3ccfc <k_sched_unlock+0xe0>)
   3cc62:	f240 333a 	movw	r3, #826	; 0x33a
   3cc66:	4a26      	ldr	r2, [pc, #152]	; (3cd00 <k_sched_unlock+0xe4>)
   3cc68:	4821      	ldr	r0, [pc, #132]	; (3ccf0 <k_sched_unlock+0xd4>)
   3cc6a:	f004 fbab 	bl	413c4 <printk>
   3cc6e:	4825      	ldr	r0, [pc, #148]	; (3cd04 <k_sched_unlock+0xe8>)
   3cc70:	f004 fba8 	bl	413c4 <printk>
   3cc74:	f240 313a 	movw	r1, #826	; 0x33a
   3cc78:	4821      	ldr	r0, [pc, #132]	; (3cd00 <k_sched_unlock+0xe4>)
   3cc7a:	f004 fdc0 	bl	417fe <assert_post_action>
   3cc7e:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   3cc82:	b173      	cbz	r3, 3cca2 <k_sched_unlock+0x86>
   3cc84:	4920      	ldr	r1, [pc, #128]	; (3cd08 <k_sched_unlock+0xec>)
   3cc86:	f240 333b 	movw	r3, #827	; 0x33b
   3cc8a:	4a1d      	ldr	r2, [pc, #116]	; (3cd00 <k_sched_unlock+0xe4>)
   3cc8c:	4818      	ldr	r0, [pc, #96]	; (3ccf0 <k_sched_unlock+0xd4>)
   3cc8e:	f004 fb99 	bl	413c4 <printk>
   3cc92:	481c      	ldr	r0, [pc, #112]	; (3cd04 <k_sched_unlock+0xe8>)
   3cc94:	f004 fb96 	bl	413c4 <printk>
   3cc98:	f240 313b 	movw	r1, #827	; 0x33b
   3cc9c:	4818      	ldr	r0, [pc, #96]	; (3cd00 <k_sched_unlock+0xe4>)
   3cc9e:	f004 fdae 	bl	417fe <assert_post_action>
		++_current->base.sched_locked;
   3cca2:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   3cca4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   3cca6:	7bd3      	ldrb	r3, [r2, #15]
   3cca8:	3301      	adds	r3, #1
   3ccaa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   3ccac:	f7ff ff92 	bl	3cbd4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ccb0:	480c      	ldr	r0, [pc, #48]	; (3cce4 <k_sched_unlock+0xc8>)
   3ccb2:	f001 f94f 	bl	3df54 <z_spin_unlock_valid>
   3ccb6:	b968      	cbnz	r0, 3ccd4 <k_sched_unlock+0xb8>
   3ccb8:	2384      	movs	r3, #132	; 0x84
   3ccba:	4a0b      	ldr	r2, [pc, #44]	; (3cce8 <k_sched_unlock+0xcc>)
   3ccbc:	4913      	ldr	r1, [pc, #76]	; (3cd0c <k_sched_unlock+0xf0>)
   3ccbe:	480c      	ldr	r0, [pc, #48]	; (3ccf0 <k_sched_unlock+0xd4>)
   3ccc0:	f004 fb80 	bl	413c4 <printk>
   3ccc4:	4907      	ldr	r1, [pc, #28]	; (3cce4 <k_sched_unlock+0xc8>)
   3ccc6:	4812      	ldr	r0, [pc, #72]	; (3cd10 <k_sched_unlock+0xf4>)
   3ccc8:	f004 fb7c 	bl	413c4 <printk>
   3cccc:	2184      	movs	r1, #132	; 0x84
   3ccce:	4806      	ldr	r0, [pc, #24]	; (3cce8 <k_sched_unlock+0xcc>)
   3ccd0:	f004 fd95 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3ccd4:	f385 8811 	msr	BASEPRI, r5
   3ccd8:	f3bf 8f6f 	isb	sy
}
   3ccdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   3cce0:	f007 be6f 	b.w	449c2 <z_reschedule_unlocked>
   3cce4:	20025d80 	.word	0x20025d80
   3cce8:	000488fa 	.word	0x000488fa
   3ccec:	00048920 	.word	0x00048920
   3ccf0:	00048156 	.word	0x00048156
   3ccf4:	00048935 	.word	0x00048935
   3ccf8:	20025d48 	.word	0x20025d48
   3ccfc:	0004ef2a 	.word	0x0004ef2a
   3cd00:	0004eed0 	.word	0x0004eed0
   3cd04:	00049046 	.word	0x00049046
   3cd08:	0004ee27 	.word	0x0004ee27
   3cd0c:	0004894d 	.word	0x0004894d
   3cd10:	00048964 	.word	0x00048964

0003cd14 <ready_thread>:
{
   3cd14:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3cd16:	7b43      	ldrb	r3, [r0, #13]
   3cd18:	4604      	mov	r4, r0
   3cd1a:	06db      	lsls	r3, r3, #27
   3cd1c:	d13d      	bne.n	3cd9a <ready_thread+0x86>
	return !sys_dnode_is_linked(&t->node);
   3cd1e:	6985      	ldr	r5, [r0, #24]
	if (z_is_thread_ready(thread)) {
   3cd20:	2d00      	cmp	r5, #0
   3cd22:	d13a      	bne.n	3cd9a <ready_thread+0x86>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3cd24:	4b1d      	ldr	r3, [pc, #116]	; (3cd9c <ready_thread+0x88>)
   3cd26:	4298      	cmp	r0, r3
   3cd28:	d10b      	bne.n	3cd42 <ready_thread+0x2e>
   3cd2a:	491d      	ldr	r1, [pc, #116]	; (3cda0 <ready_thread+0x8c>)
   3cd2c:	481d      	ldr	r0, [pc, #116]	; (3cda4 <ready_thread+0x90>)
   3cd2e:	f240 3389 	movw	r3, #905	; 0x389
   3cd32:	4a1d      	ldr	r2, [pc, #116]	; (3cda8 <ready_thread+0x94>)
   3cd34:	f004 fb46 	bl	413c4 <printk>
   3cd38:	f240 3189 	movw	r1, #905	; 0x389
   3cd3c:	481a      	ldr	r0, [pc, #104]	; (3cda8 <ready_thread+0x94>)
   3cd3e:	f004 fd5e 	bl	417fe <assert_post_action>
	return list->head == list;
   3cd42:	4a1a      	ldr	r2, [pc, #104]	; (3cdac <ready_thread+0x98>)
   3cd44:	4613      	mov	r3, r2
   3cd46:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3cd4a:	4298      	cmp	r0, r3
   3cd4c:	bf18      	it	ne
   3cd4e:	4605      	movne	r5, r0
   3cd50:	2d00      	cmp	r5, #0
   3cd52:	4619      	mov	r1, r3
   3cd54:	462b      	mov	r3, r5
   3cd56:	bf38      	it	cc
   3cd58:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3cd5a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3cd5c:	b1bb      	cbz	r3, 3cd8e <ready_thread+0x7a>
	if (thread_1->base.prio < thread_2->base.prio) {
   3cd5e:	f994 600e 	ldrsb.w	r6, [r4, #14]
   3cd62:	f993 500e 	ldrsb.w	r5, [r3, #14]
   3cd66:	42ae      	cmp	r6, r5
   3cd68:	db03      	blt.n	3cd72 <ready_thread+0x5e>
	return (node == list->tail) ? NULL : node->next;
   3cd6a:	4298      	cmp	r0, r3
   3cd6c:	d00f      	beq.n	3cd8e <ready_thread+0x7a>
   3cd6e:	681b      	ldr	r3, [r3, #0]
   3cd70:	e7f4      	b.n	3cd5c <ready_thread+0x48>
	node->prev = successor->prev;
   3cd72:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3cd74:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3cd78:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3cd7a:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3cd7c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   3cd7e:	2000      	movs	r0, #0
   3cd80:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3cd84:	7363      	strb	r3, [r4, #13]
}
   3cd86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   3cd8a:	f7ff bf23 	b.w	3cbd4 <update_cache>
	node->prev = list->tail;
   3cd8e:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3cd92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3cd94:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3cd96:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   3cd98:	e7f0      	b.n	3cd7c <ready_thread+0x68>
}
   3cd9a:	bd70      	pop	{r4, r5, r6, pc}
   3cd9c:	20024368 	.word	0x20024368
   3cda0:	0004ef09 	.word	0x0004ef09
   3cda4:	00048156 	.word	0x00048156
   3cda8:	0004eed0 	.word	0x0004eed0
   3cdac:	20025d48 	.word	0x20025d48

0003cdb0 <z_ready_thread>:
{
   3cdb0:	b538      	push	{r3, r4, r5, lr}
   3cdb2:	4604      	mov	r4, r0
	__asm__ volatile(
   3cdb4:	f04f 0320 	mov.w	r3, #32
   3cdb8:	f3ef 8511 	mrs	r5, BASEPRI
   3cdbc:	f383 8811 	msr	BASEPRI, r3
   3cdc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cdc4:	4817      	ldr	r0, [pc, #92]	; (3ce24 <z_ready_thread+0x74>)
   3cdc6:	f001 f8b7 	bl	3df38 <z_spin_lock_valid>
   3cdca:	b968      	cbnz	r0, 3cde8 <z_ready_thread+0x38>
   3cdcc:	235c      	movs	r3, #92	; 0x5c
   3cdce:	4a16      	ldr	r2, [pc, #88]	; (3ce28 <z_ready_thread+0x78>)
   3cdd0:	4916      	ldr	r1, [pc, #88]	; (3ce2c <z_ready_thread+0x7c>)
   3cdd2:	4817      	ldr	r0, [pc, #92]	; (3ce30 <z_ready_thread+0x80>)
   3cdd4:	f004 faf6 	bl	413c4 <printk>
   3cdd8:	4912      	ldr	r1, [pc, #72]	; (3ce24 <z_ready_thread+0x74>)
   3cdda:	4816      	ldr	r0, [pc, #88]	; (3ce34 <z_ready_thread+0x84>)
   3cddc:	f004 faf2 	bl	413c4 <printk>
   3cde0:	215c      	movs	r1, #92	; 0x5c
   3cde2:	4811      	ldr	r0, [pc, #68]	; (3ce28 <z_ready_thread+0x78>)
   3cde4:	f004 fd0b 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3cde8:	480e      	ldr	r0, [pc, #56]	; (3ce24 <z_ready_thread+0x74>)
   3cdea:	f001 f8c3 	bl	3df74 <z_spin_lock_set_owner>
		ready_thread(thread);
   3cdee:	4620      	mov	r0, r4
   3cdf0:	f7ff ff90 	bl	3cd14 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cdf4:	480b      	ldr	r0, [pc, #44]	; (3ce24 <z_ready_thread+0x74>)
   3cdf6:	f001 f8ad 	bl	3df54 <z_spin_unlock_valid>
   3cdfa:	b968      	cbnz	r0, 3ce18 <z_ready_thread+0x68>
   3cdfc:	2384      	movs	r3, #132	; 0x84
   3cdfe:	4a0a      	ldr	r2, [pc, #40]	; (3ce28 <z_ready_thread+0x78>)
   3ce00:	490d      	ldr	r1, [pc, #52]	; (3ce38 <z_ready_thread+0x88>)
   3ce02:	480b      	ldr	r0, [pc, #44]	; (3ce30 <z_ready_thread+0x80>)
   3ce04:	f004 fade 	bl	413c4 <printk>
   3ce08:	4906      	ldr	r1, [pc, #24]	; (3ce24 <z_ready_thread+0x74>)
   3ce0a:	480c      	ldr	r0, [pc, #48]	; (3ce3c <z_ready_thread+0x8c>)
   3ce0c:	f004 fada 	bl	413c4 <printk>
   3ce10:	2184      	movs	r1, #132	; 0x84
   3ce12:	4805      	ldr	r0, [pc, #20]	; (3ce28 <z_ready_thread+0x78>)
   3ce14:	f004 fcf3 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3ce18:	f385 8811 	msr	BASEPRI, r5
   3ce1c:	f3bf 8f6f 	isb	sy
}
   3ce20:	bd38      	pop	{r3, r4, r5, pc}
   3ce22:	bf00      	nop
   3ce24:	20025d80 	.word	0x20025d80
   3ce28:	000488fa 	.word	0x000488fa
   3ce2c:	00048920 	.word	0x00048920
   3ce30:	00048156 	.word	0x00048156
   3ce34:	00048935 	.word	0x00048935
   3ce38:	0004894d 	.word	0x0004894d
   3ce3c:	00048964 	.word	0x00048964

0003ce40 <z_sched_start>:
{
   3ce40:	b538      	push	{r3, r4, r5, lr}
   3ce42:	4604      	mov	r4, r0
	__asm__ volatile(
   3ce44:	f04f 0320 	mov.w	r3, #32
   3ce48:	f3ef 8511 	mrs	r5, BASEPRI
   3ce4c:	f383 8811 	msr	BASEPRI, r3
   3ce50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ce54:	481d      	ldr	r0, [pc, #116]	; (3cecc <z_sched_start+0x8c>)
   3ce56:	f001 f86f 	bl	3df38 <z_spin_lock_valid>
   3ce5a:	b968      	cbnz	r0, 3ce78 <z_sched_start+0x38>
   3ce5c:	235c      	movs	r3, #92	; 0x5c
   3ce5e:	4a1c      	ldr	r2, [pc, #112]	; (3ced0 <z_sched_start+0x90>)
   3ce60:	491c      	ldr	r1, [pc, #112]	; (3ced4 <z_sched_start+0x94>)
   3ce62:	481d      	ldr	r0, [pc, #116]	; (3ced8 <z_sched_start+0x98>)
   3ce64:	f004 faae 	bl	413c4 <printk>
   3ce68:	4918      	ldr	r1, [pc, #96]	; (3cecc <z_sched_start+0x8c>)
   3ce6a:	481c      	ldr	r0, [pc, #112]	; (3cedc <z_sched_start+0x9c>)
   3ce6c:	f004 faaa 	bl	413c4 <printk>
   3ce70:	215c      	movs	r1, #92	; 0x5c
   3ce72:	4817      	ldr	r0, [pc, #92]	; (3ced0 <z_sched_start+0x90>)
   3ce74:	f004 fcc3 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3ce78:	4814      	ldr	r0, [pc, #80]	; (3cecc <z_sched_start+0x8c>)
   3ce7a:	f001 f87b 	bl	3df74 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   3ce7e:	7b63      	ldrb	r3, [r4, #13]
   3ce80:	075a      	lsls	r2, r3, #29
   3ce82:	d416      	bmi.n	3ceb2 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ce84:	4811      	ldr	r0, [pc, #68]	; (3cecc <z_sched_start+0x8c>)
   3ce86:	f001 f865 	bl	3df54 <z_spin_unlock_valid>
   3ce8a:	b968      	cbnz	r0, 3cea8 <z_sched_start+0x68>
   3ce8c:	2384      	movs	r3, #132	; 0x84
   3ce8e:	4a10      	ldr	r2, [pc, #64]	; (3ced0 <z_sched_start+0x90>)
   3ce90:	4913      	ldr	r1, [pc, #76]	; (3cee0 <z_sched_start+0xa0>)
   3ce92:	4811      	ldr	r0, [pc, #68]	; (3ced8 <z_sched_start+0x98>)
   3ce94:	f004 fa96 	bl	413c4 <printk>
   3ce98:	490c      	ldr	r1, [pc, #48]	; (3cecc <z_sched_start+0x8c>)
   3ce9a:	4812      	ldr	r0, [pc, #72]	; (3cee4 <z_sched_start+0xa4>)
   3ce9c:	f004 fa92 	bl	413c4 <printk>
   3cea0:	2184      	movs	r1, #132	; 0x84
   3cea2:	480b      	ldr	r0, [pc, #44]	; (3ced0 <z_sched_start+0x90>)
   3cea4:	f004 fcab 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3cea8:	f385 8811 	msr	BASEPRI, r5
   3ceac:	f3bf 8f6f 	isb	sy
}
   3ceb0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3ceb2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   3ceb6:	4620      	mov	r0, r4
   3ceb8:	7363      	strb	r3, [r4, #13]
   3ceba:	f7ff ff2b 	bl	3cd14 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   3cebe:	4629      	mov	r1, r5
}
   3cec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3cec4:	4801      	ldr	r0, [pc, #4]	; (3cecc <z_sched_start+0x8c>)
   3cec6:	f7ff bd4f 	b.w	3c968 <z_reschedule>
   3ceca:	bf00      	nop
   3cecc:	20025d80 	.word	0x20025d80
   3ced0:	000488fa 	.word	0x000488fa
   3ced4:	00048920 	.word	0x00048920
   3ced8:	00048156 	.word	0x00048156
   3cedc:	00048935 	.word	0x00048935
   3cee0:	0004894d 	.word	0x0004894d
   3cee4:	00048964 	.word	0x00048964

0003cee8 <z_impl_k_thread_resume>:
{
   3cee8:	b538      	push	{r3, r4, r5, lr}
   3ceea:	4604      	mov	r4, r0
	__asm__ volatile(
   3ceec:	f04f 0320 	mov.w	r3, #32
   3cef0:	f3ef 8511 	mrs	r5, BASEPRI
   3cef4:	f383 8811 	msr	BASEPRI, r3
   3cef8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cefc:	4810      	ldr	r0, [pc, #64]	; (3cf40 <z_impl_k_thread_resume+0x58>)
   3cefe:	f001 f81b 	bl	3df38 <z_spin_lock_valid>
   3cf02:	b968      	cbnz	r0, 3cf20 <z_impl_k_thread_resume+0x38>
   3cf04:	235c      	movs	r3, #92	; 0x5c
   3cf06:	4a0f      	ldr	r2, [pc, #60]	; (3cf44 <z_impl_k_thread_resume+0x5c>)
   3cf08:	490f      	ldr	r1, [pc, #60]	; (3cf48 <z_impl_k_thread_resume+0x60>)
   3cf0a:	4810      	ldr	r0, [pc, #64]	; (3cf4c <z_impl_k_thread_resume+0x64>)
   3cf0c:	f004 fa5a 	bl	413c4 <printk>
   3cf10:	490b      	ldr	r1, [pc, #44]	; (3cf40 <z_impl_k_thread_resume+0x58>)
   3cf12:	480f      	ldr	r0, [pc, #60]	; (3cf50 <z_impl_k_thread_resume+0x68>)
   3cf14:	f004 fa56 	bl	413c4 <printk>
   3cf18:	215c      	movs	r1, #92	; 0x5c
   3cf1a:	480a      	ldr	r0, [pc, #40]	; (3cf44 <z_impl_k_thread_resume+0x5c>)
   3cf1c:	f004 fc6f 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3cf20:	4807      	ldr	r0, [pc, #28]	; (3cf40 <z_impl_k_thread_resume+0x58>)
   3cf22:	f001 f827 	bl	3df74 <z_spin_lock_set_owner>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3cf26:	7b63      	ldrb	r3, [r4, #13]
	ready_thread(thread);
   3cf28:	4620      	mov	r0, r4
   3cf2a:	f023 0310 	bic.w	r3, r3, #16
   3cf2e:	7363      	strb	r3, [r4, #13]
   3cf30:	f7ff fef0 	bl	3cd14 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   3cf34:	4629      	mov	r1, r5
}
   3cf36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3cf3a:	4801      	ldr	r0, [pc, #4]	; (3cf40 <z_impl_k_thread_resume+0x58>)
   3cf3c:	f7ff bd14 	b.w	3c968 <z_reschedule>
   3cf40:	20025d80 	.word	0x20025d80
   3cf44:	000488fa 	.word	0x000488fa
   3cf48:	00048920 	.word	0x00048920
   3cf4c:	00048156 	.word	0x00048156
   3cf50:	00048935 	.word	0x00048935

0003cf54 <z_thread_timeout>:
{
   3cf54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3cf56:	4604      	mov	r4, r0
   3cf58:	f04f 0320 	mov.w	r3, #32
   3cf5c:	f3ef 8511 	mrs	r5, BASEPRI
   3cf60:	f383 8811 	msr	BASEPRI, r3
   3cf64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cf68:	481e      	ldr	r0, [pc, #120]	; (3cfe4 <z_thread_timeout+0x90>)
   3cf6a:	f000 ffe5 	bl	3df38 <z_spin_lock_valid>
   3cf6e:	b968      	cbnz	r0, 3cf8c <z_thread_timeout+0x38>
   3cf70:	235c      	movs	r3, #92	; 0x5c
   3cf72:	4a1d      	ldr	r2, [pc, #116]	; (3cfe8 <z_thread_timeout+0x94>)
   3cf74:	491d      	ldr	r1, [pc, #116]	; (3cfec <z_thread_timeout+0x98>)
   3cf76:	481e      	ldr	r0, [pc, #120]	; (3cff0 <z_thread_timeout+0x9c>)
   3cf78:	f004 fa24 	bl	413c4 <printk>
   3cf7c:	4919      	ldr	r1, [pc, #100]	; (3cfe4 <z_thread_timeout+0x90>)
   3cf7e:	481d      	ldr	r0, [pc, #116]	; (3cff4 <z_thread_timeout+0xa0>)
   3cf80:	f004 fa20 	bl	413c4 <printk>
   3cf84:	215c      	movs	r1, #92	; 0x5c
   3cf86:	4818      	ldr	r0, [pc, #96]	; (3cfe8 <z_thread_timeout+0x94>)
   3cf88:	f004 fc39 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3cf8c:	4815      	ldr	r0, [pc, #84]	; (3cfe4 <z_thread_timeout+0x90>)
   3cf8e:	f000 fff1 	bl	3df74 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   3cf92:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   3cf96:	f1a4 0018 	sub.w	r0, r4, #24
		if (thread->base.pended_on != NULL) {
   3cf9a:	b11b      	cbz	r3, 3cfa4 <z_thread_timeout+0x50>
			unpend_thread_no_timeout(thread);
   3cf9c:	9001      	str	r0, [sp, #4]
   3cf9e:	f007 fd1a 	bl	449d6 <unpend_thread_no_timeout>
   3cfa2:	9801      	ldr	r0, [sp, #4]
   3cfa4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   3cfa8:	f023 0314 	bic.w	r3, r3, #20
   3cfac:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   3cfb0:	f7ff feb0 	bl	3cd14 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cfb4:	480b      	ldr	r0, [pc, #44]	; (3cfe4 <z_thread_timeout+0x90>)
   3cfb6:	f000 ffcd 	bl	3df54 <z_spin_unlock_valid>
   3cfba:	b968      	cbnz	r0, 3cfd8 <z_thread_timeout+0x84>
   3cfbc:	2384      	movs	r3, #132	; 0x84
   3cfbe:	4a0a      	ldr	r2, [pc, #40]	; (3cfe8 <z_thread_timeout+0x94>)
   3cfc0:	490d      	ldr	r1, [pc, #52]	; (3cff8 <z_thread_timeout+0xa4>)
   3cfc2:	480b      	ldr	r0, [pc, #44]	; (3cff0 <z_thread_timeout+0x9c>)
   3cfc4:	f004 f9fe 	bl	413c4 <printk>
   3cfc8:	4906      	ldr	r1, [pc, #24]	; (3cfe4 <z_thread_timeout+0x90>)
   3cfca:	480c      	ldr	r0, [pc, #48]	; (3cffc <z_thread_timeout+0xa8>)
   3cfcc:	f004 f9fa 	bl	413c4 <printk>
   3cfd0:	2184      	movs	r1, #132	; 0x84
   3cfd2:	4805      	ldr	r0, [pc, #20]	; (3cfe8 <z_thread_timeout+0x94>)
   3cfd4:	f004 fc13 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3cfd8:	f385 8811 	msr	BASEPRI, r5
   3cfdc:	f3bf 8f6f 	isb	sy
}
   3cfe0:	b003      	add	sp, #12
   3cfe2:	bd30      	pop	{r4, r5, pc}
   3cfe4:	20025d80 	.word	0x20025d80
   3cfe8:	000488fa 	.word	0x000488fa
   3cfec:	00048920 	.word	0x00048920
   3cff0:	00048156 	.word	0x00048156
   3cff4:	00048935 	.word	0x00048935
   3cff8:	0004894d 	.word	0x0004894d
   3cffc:	00048964 	.word	0x00048964

0003d000 <move_thread_to_end_of_prio_q>:
{
   3d000:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   3d002:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   3d006:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   3d008:	2b00      	cmp	r3, #0
   3d00a:	da03      	bge.n	3d014 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   3d00c:	4601      	mov	r1, r0
   3d00e:	481f      	ldr	r0, [pc, #124]	; (3d08c <move_thread_to_end_of_prio_q+0x8c>)
   3d010:	f7ff fd66 	bl	3cae0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d014:	4b1e      	ldr	r3, [pc, #120]	; (3d090 <move_thread_to_end_of_prio_q+0x90>)
   3d016:	429c      	cmp	r4, r3
   3d018:	d10b      	bne.n	3d032 <move_thread_to_end_of_prio_q+0x32>
   3d01a:	491e      	ldr	r1, [pc, #120]	; (3d094 <move_thread_to_end_of_prio_q+0x94>)
   3d01c:	481e      	ldr	r0, [pc, #120]	; (3d098 <move_thread_to_end_of_prio_q+0x98>)
   3d01e:	f240 3389 	movw	r3, #905	; 0x389
   3d022:	4a1e      	ldr	r2, [pc, #120]	; (3d09c <move_thread_to_end_of_prio_q+0x9c>)
   3d024:	f004 f9ce 	bl	413c4 <printk>
   3d028:	f240 3189 	movw	r1, #905	; 0x389
   3d02c:	481b      	ldr	r0, [pc, #108]	; (3d09c <move_thread_to_end_of_prio_q+0x9c>)
   3d02e:	f004 fbe6 	bl	417fe <assert_post_action>
	return list->head == list;
   3d032:	4a1b      	ldr	r2, [pc, #108]	; (3d0a0 <move_thread_to_end_of_prio_q+0xa0>)
   3d034:	4611      	mov	r1, r2
   3d036:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3d03a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d03c:	428b      	cmp	r3, r1
   3d03e:	bf08      	it	eq
   3d040:	2300      	moveq	r3, #0
   3d042:	2b00      	cmp	r3, #0
   3d044:	bf38      	it	cc
   3d046:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d048:	b1d3      	cbz	r3, 3d080 <move_thread_to_end_of_prio_q+0x80>
	if (thread_1->base.prio < thread_2->base.prio) {
   3d04a:	f994 600e 	ldrsb.w	r6, [r4, #14]
   3d04e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   3d052:	42ae      	cmp	r6, r5
   3d054:	db03      	blt.n	3d05e <move_thread_to_end_of_prio_q+0x5e>
	return (node == list->tail) ? NULL : node->next;
   3d056:	4298      	cmp	r0, r3
   3d058:	d012      	beq.n	3d080 <move_thread_to_end_of_prio_q+0x80>
   3d05a:	681b      	ldr	r3, [r3, #0]
   3d05c:	e7f4      	b.n	3d048 <move_thread_to_end_of_prio_q+0x48>
	node->prev = successor->prev;
   3d05e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   3d060:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   3d064:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3d066:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3d068:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   3d06a:	6890      	ldr	r0, [r2, #8]
   3d06c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3d070:	7363      	strb	r3, [r4, #13]
   3d072:	1b03      	subs	r3, r0, r4
   3d074:	4258      	negs	r0, r3
   3d076:	4158      	adcs	r0, r3
}
   3d078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   3d07c:	f7ff bdaa 	b.w	3cbd4 <update_cache>
	node->prev = list->tail;
   3d080:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3d084:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3d086:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3d088:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   3d08a:	e7ed      	b.n	3d068 <move_thread_to_end_of_prio_q+0x68>
   3d08c:	20025d70 	.word	0x20025d70
   3d090:	20024368 	.word	0x20024368
   3d094:	0004ef09 	.word	0x0004ef09
   3d098:	00048156 	.word	0x00048156
   3d09c:	0004eed0 	.word	0x0004eed0
   3d0a0:	20025d48 	.word	0x20025d48

0003d0a4 <z_time_slice>:
{
   3d0a4:	b570      	push	{r4, r5, r6, lr}
   3d0a6:	4604      	mov	r4, r0
	__asm__ volatile(
   3d0a8:	f04f 0320 	mov.w	r3, #32
   3d0ac:	f3ef 8511 	mrs	r5, BASEPRI
   3d0b0:	f383 8811 	msr	BASEPRI, r3
   3d0b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d0b8:	482a      	ldr	r0, [pc, #168]	; (3d164 <z_time_slice+0xc0>)
   3d0ba:	f000 ff3d 	bl	3df38 <z_spin_lock_valid>
   3d0be:	b968      	cbnz	r0, 3d0dc <z_time_slice+0x38>
   3d0c0:	235c      	movs	r3, #92	; 0x5c
   3d0c2:	4a29      	ldr	r2, [pc, #164]	; (3d168 <z_time_slice+0xc4>)
   3d0c4:	4929      	ldr	r1, [pc, #164]	; (3d16c <z_time_slice+0xc8>)
   3d0c6:	482a      	ldr	r0, [pc, #168]	; (3d170 <z_time_slice+0xcc>)
   3d0c8:	f004 f97c 	bl	413c4 <printk>
   3d0cc:	4925      	ldr	r1, [pc, #148]	; (3d164 <z_time_slice+0xc0>)
   3d0ce:	4829      	ldr	r0, [pc, #164]	; (3d174 <z_time_slice+0xd0>)
   3d0d0:	f004 f978 	bl	413c4 <printk>
   3d0d4:	215c      	movs	r1, #92	; 0x5c
   3d0d6:	4824      	ldr	r0, [pc, #144]	; (3d168 <z_time_slice+0xc4>)
   3d0d8:	f004 fb91 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3d0dc:	4821      	ldr	r0, [pc, #132]	; (3d164 <z_time_slice+0xc0>)
   3d0de:	f000 ff49 	bl	3df74 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   3d0e2:	4b25      	ldr	r3, [pc, #148]	; (3d178 <z_time_slice+0xd4>)
   3d0e4:	4a25      	ldr	r2, [pc, #148]	; (3d17c <z_time_slice+0xd8>)
   3d0e6:	6898      	ldr	r0, [r3, #8]
   3d0e8:	6811      	ldr	r1, [r2, #0]
   3d0ea:	4288      	cmp	r0, r1
   3d0ec:	4619      	mov	r1, r3
   3d0ee:	d118      	bne.n	3d122 <z_time_slice+0x7e>
			z_reset_time_slice();
   3d0f0:	f7ff fbc4 	bl	3c87c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d0f4:	481b      	ldr	r0, [pc, #108]	; (3d164 <z_time_slice+0xc0>)
   3d0f6:	f000 ff2d 	bl	3df54 <z_spin_unlock_valid>
   3d0fa:	b968      	cbnz	r0, 3d118 <z_time_slice+0x74>
   3d0fc:	2384      	movs	r3, #132	; 0x84
   3d0fe:	4a1a      	ldr	r2, [pc, #104]	; (3d168 <z_time_slice+0xc4>)
   3d100:	491f      	ldr	r1, [pc, #124]	; (3d180 <z_time_slice+0xdc>)
   3d102:	481b      	ldr	r0, [pc, #108]	; (3d170 <z_time_slice+0xcc>)
   3d104:	f004 f95e 	bl	413c4 <printk>
   3d108:	4916      	ldr	r1, [pc, #88]	; (3d164 <z_time_slice+0xc0>)
   3d10a:	481e      	ldr	r0, [pc, #120]	; (3d184 <z_time_slice+0xe0>)
   3d10c:	f004 f95a 	bl	413c4 <printk>
   3d110:	2184      	movs	r1, #132	; 0x84
   3d112:	4815      	ldr	r0, [pc, #84]	; (3d168 <z_time_slice+0xc4>)
   3d114:	f004 fb73 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3d118:	f385 8811 	msr	BASEPRI, r5
   3d11c:	f3bf 8f6f 	isb	sy
}
   3d120:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   3d122:	2600      	movs	r6, #0
   3d124:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   3d126:	4a18      	ldr	r2, [pc, #96]	; (3d188 <z_time_slice+0xe4>)
   3d128:	6812      	ldr	r2, [r2, #0]
   3d12a:	b1ba      	cbz	r2, 3d15c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   3d12c:	89c2      	ldrh	r2, [r0, #14]
   3d12e:	2a7f      	cmp	r2, #127	; 0x7f
   3d130:	d814      	bhi.n	3d15c <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   3d132:	7b42      	ldrb	r2, [r0, #13]
   3d134:	06d2      	lsls	r2, r2, #27
   3d136:	d111      	bne.n	3d15c <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   3d138:	4a14      	ldr	r2, [pc, #80]	; (3d18c <z_time_slice+0xe8>)
   3d13a:	f990 600e 	ldrsb.w	r6, [r0, #14]
   3d13e:	6812      	ldr	r2, [r2, #0]
   3d140:	4296      	cmp	r6, r2
   3d142:	db0b      	blt.n	3d15c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   3d144:	4a12      	ldr	r2, [pc, #72]	; (3d190 <z_time_slice+0xec>)
   3d146:	4290      	cmp	r0, r2
   3d148:	d008      	beq.n	3d15c <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   3d14a:	691a      	ldr	r2, [r3, #16]
   3d14c:	42a2      	cmp	r2, r4
   3d14e:	dc02      	bgt.n	3d156 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   3d150:	f7ff ff56 	bl	3d000 <move_thread_to_end_of_prio_q>
   3d154:	e7cc      	b.n	3d0f0 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   3d156:	1b12      	subs	r2, r2, r4
   3d158:	611a      	str	r2, [r3, #16]
   3d15a:	e7cb      	b.n	3d0f4 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   3d15c:	2300      	movs	r3, #0
   3d15e:	610b      	str	r3, [r1, #16]
   3d160:	e7c8      	b.n	3d0f4 <z_time_slice+0x50>
   3d162:	bf00      	nop
   3d164:	20025d80 	.word	0x20025d80
   3d168:	000488fa 	.word	0x000488fa
   3d16c:	00048920 	.word	0x00048920
   3d170:	00048156 	.word	0x00048156
   3d174:	00048935 	.word	0x00048935
   3d178:	20025d48 	.word	0x20025d48
   3d17c:	20025d7c 	.word	0x20025d7c
   3d180:	0004894d 	.word	0x0004894d
   3d184:	00048964 	.word	0x00048964
   3d188:	20025d88 	.word	0x20025d88
   3d18c:	20025d84 	.word	0x20025d84
   3d190:	20024368 	.word	0x20024368

0003d194 <z_impl_k_thread_suspend>:
{
   3d194:	b570      	push	{r4, r5, r6, lr}
   3d196:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   3d198:	3018      	adds	r0, #24
   3d19a:	f001 f93b 	bl	3e414 <z_abort_timeout>
	__asm__ volatile(
   3d19e:	f04f 0320 	mov.w	r3, #32
   3d1a2:	f3ef 8611 	mrs	r6, BASEPRI
   3d1a6:	f383 8811 	msr	BASEPRI, r3
   3d1aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d1ae:	4825      	ldr	r0, [pc, #148]	; (3d244 <z_impl_k_thread_suspend+0xb0>)
   3d1b0:	f000 fec2 	bl	3df38 <z_spin_lock_valid>
   3d1b4:	b968      	cbnz	r0, 3d1d2 <z_impl_k_thread_suspend+0x3e>
   3d1b6:	235c      	movs	r3, #92	; 0x5c
   3d1b8:	4a23      	ldr	r2, [pc, #140]	; (3d248 <z_impl_k_thread_suspend+0xb4>)
   3d1ba:	4924      	ldr	r1, [pc, #144]	; (3d24c <z_impl_k_thread_suspend+0xb8>)
   3d1bc:	4824      	ldr	r0, [pc, #144]	; (3d250 <z_impl_k_thread_suspend+0xbc>)
   3d1be:	f004 f901 	bl	413c4 <printk>
   3d1c2:	4920      	ldr	r1, [pc, #128]	; (3d244 <z_impl_k_thread_suspend+0xb0>)
   3d1c4:	4823      	ldr	r0, [pc, #140]	; (3d254 <z_impl_k_thread_suspend+0xc0>)
   3d1c6:	f004 f8fd 	bl	413c4 <printk>
   3d1ca:	215c      	movs	r1, #92	; 0x5c
   3d1cc:	481e      	ldr	r0, [pc, #120]	; (3d248 <z_impl_k_thread_suspend+0xb4>)
   3d1ce:	f004 fb16 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3d1d2:	481c      	ldr	r0, [pc, #112]	; (3d244 <z_impl_k_thread_suspend+0xb0>)
   3d1d4:	f000 fece 	bl	3df74 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3d1d8:	f994 300d 	ldrsb.w	r3, [r4, #13]
   3d1dc:	2b00      	cmp	r3, #0
   3d1de:	da07      	bge.n	3d1f0 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3d1e0:	4621      	mov	r1, r4
   3d1e2:	481d      	ldr	r0, [pc, #116]	; (3d258 <z_impl_k_thread_suspend+0xc4>)
   3d1e4:	f7ff fc7c 	bl	3cae0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3d1e8:	7b63      	ldrb	r3, [r4, #13]
   3d1ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3d1ee:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   3d1f0:	4d1a      	ldr	r5, [pc, #104]	; (3d25c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3d1f2:	7b63      	ldrb	r3, [r4, #13]
   3d1f4:	68a8      	ldr	r0, [r5, #8]
   3d1f6:	f043 0310 	orr.w	r3, r3, #16
   3d1fa:	7363      	strb	r3, [r4, #13]
   3d1fc:	1b03      	subs	r3, r0, r4
   3d1fe:	4258      	negs	r0, r3
   3d200:	4158      	adcs	r0, r3
   3d202:	f7ff fce7 	bl	3cbd4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d206:	480f      	ldr	r0, [pc, #60]	; (3d244 <z_impl_k_thread_suspend+0xb0>)
   3d208:	f000 fea4 	bl	3df54 <z_spin_unlock_valid>
   3d20c:	b968      	cbnz	r0, 3d22a <z_impl_k_thread_suspend+0x96>
   3d20e:	2384      	movs	r3, #132	; 0x84
   3d210:	4a0d      	ldr	r2, [pc, #52]	; (3d248 <z_impl_k_thread_suspend+0xb4>)
   3d212:	4913      	ldr	r1, [pc, #76]	; (3d260 <z_impl_k_thread_suspend+0xcc>)
   3d214:	480e      	ldr	r0, [pc, #56]	; (3d250 <z_impl_k_thread_suspend+0xbc>)
   3d216:	f004 f8d5 	bl	413c4 <printk>
   3d21a:	490a      	ldr	r1, [pc, #40]	; (3d244 <z_impl_k_thread_suspend+0xb0>)
   3d21c:	4811      	ldr	r0, [pc, #68]	; (3d264 <z_impl_k_thread_suspend+0xd0>)
   3d21e:	f004 f8d1 	bl	413c4 <printk>
   3d222:	2184      	movs	r1, #132	; 0x84
   3d224:	4808      	ldr	r0, [pc, #32]	; (3d248 <z_impl_k_thread_suspend+0xb4>)
   3d226:	f004 faea 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3d22a:	f386 8811 	msr	BASEPRI, r6
   3d22e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   3d232:	68ab      	ldr	r3, [r5, #8]
   3d234:	42a3      	cmp	r3, r4
   3d236:	d103      	bne.n	3d240 <z_impl_k_thread_suspend+0xac>
}
   3d238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   3d23c:	f007 bbc1 	b.w	449c2 <z_reschedule_unlocked>
}
   3d240:	bd70      	pop	{r4, r5, r6, pc}
   3d242:	bf00      	nop
   3d244:	20025d80 	.word	0x20025d80
   3d248:	000488fa 	.word	0x000488fa
   3d24c:	00048920 	.word	0x00048920
   3d250:	00048156 	.word	0x00048156
   3d254:	00048935 	.word	0x00048935
   3d258:	20025d70 	.word	0x20025d70
   3d25c:	20025d48 	.word	0x20025d48
   3d260:	0004894d 	.word	0x0004894d
   3d264:	00048964 	.word	0x00048964

0003d268 <z_thread_single_abort>:
{
   3d268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   3d26c:	7b03      	ldrb	r3, [r0, #12]
{
   3d26e:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   3d270:	07dd      	lsls	r5, r3, #31
   3d272:	d50e      	bpl.n	3d292 <z_thread_single_abort+0x2a>
   3d274:	4948      	ldr	r1, [pc, #288]	; (3d398 <z_thread_single_abort+0x130>)
   3d276:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   3d27a:	4a48      	ldr	r2, [pc, #288]	; (3d39c <z_thread_single_abort+0x134>)
   3d27c:	4848      	ldr	r0, [pc, #288]	; (3d3a0 <z_thread_single_abort+0x138>)
   3d27e:	f004 f8a1 	bl	413c4 <printk>
   3d282:	4848      	ldr	r0, [pc, #288]	; (3d3a4 <z_thread_single_abort+0x13c>)
   3d284:	f004 f89e 	bl	413c4 <printk>
   3d288:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   3d28c:	4843      	ldr	r0, [pc, #268]	; (3d39c <z_thread_single_abort+0x134>)
   3d28e:	f004 fab6 	bl	417fe <assert_post_action>
	if (thread->fn_abort != NULL) {
   3d292:	6e23      	ldr	r3, [r4, #96]	; 0x60
   3d294:	b103      	cbz	r3, 3d298 <z_thread_single_abort+0x30>
		thread->fn_abort();
   3d296:	4798      	blx	r3
   3d298:	f104 0018 	add.w	r0, r4, #24
   3d29c:	f001 f8ba 	bl	3e414 <z_abort_timeout>
	__asm__ volatile(
   3d2a0:	f04f 0320 	mov.w	r3, #32
   3d2a4:	f3ef 8611 	mrs	r6, BASEPRI
   3d2a8:	f383 8811 	msr	BASEPRI, r3
   3d2ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d2b0:	483d      	ldr	r0, [pc, #244]	; (3d3a8 <z_thread_single_abort+0x140>)
   3d2b2:	f000 fe41 	bl	3df38 <z_spin_lock_valid>
   3d2b6:	b968      	cbnz	r0, 3d2d4 <z_thread_single_abort+0x6c>
   3d2b8:	235c      	movs	r3, #92	; 0x5c
   3d2ba:	4a3c      	ldr	r2, [pc, #240]	; (3d3ac <z_thread_single_abort+0x144>)
   3d2bc:	493c      	ldr	r1, [pc, #240]	; (3d3b0 <z_thread_single_abort+0x148>)
   3d2be:	4838      	ldr	r0, [pc, #224]	; (3d3a0 <z_thread_single_abort+0x138>)
   3d2c0:	f004 f880 	bl	413c4 <printk>
   3d2c4:	4938      	ldr	r1, [pc, #224]	; (3d3a8 <z_thread_single_abort+0x140>)
   3d2c6:	483b      	ldr	r0, [pc, #236]	; (3d3b4 <z_thread_single_abort+0x14c>)
   3d2c8:	f004 f87c 	bl	413c4 <printk>
   3d2cc:	215c      	movs	r1, #92	; 0x5c
   3d2ce:	4837      	ldr	r0, [pc, #220]	; (3d3ac <z_thread_single_abort+0x144>)
   3d2d0:	f004 fa95 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3d2d4:	4834      	ldr	r0, [pc, #208]	; (3d3a8 <z_thread_single_abort+0x140>)
   3d2d6:	f000 fe4d 	bl	3df74 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3d2da:	7b63      	ldrb	r3, [r4, #13]
   3d2dc:	06d8      	lsls	r0, r3, #27
   3d2de:	d136      	bne.n	3d34e <z_thread_single_abort+0xe6>
		if (z_is_thread_ready(thread)) {
   3d2e0:	69a2      	ldr	r2, [r4, #24]
   3d2e2:	2a00      	cmp	r2, #0
   3d2e4:	d133      	bne.n	3d34e <z_thread_single_abort+0xe6>
			if (z_is_thread_queued(thread)) {
   3d2e6:	0619      	lsls	r1, r3, #24
   3d2e8:	d507      	bpl.n	3d2fa <z_thread_single_abort+0x92>
				_priq_run_remove(&_kernel.ready_q.runq,
   3d2ea:	4621      	mov	r1, r4
   3d2ec:	4832      	ldr	r0, [pc, #200]	; (3d3b8 <z_thread_single_abort+0x150>)
   3d2ee:	f7ff fbf7 	bl	3cae0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3d2f2:	7b63      	ldrb	r3, [r4, #13]
   3d2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3d2f8:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   3d2fa:	4b30      	ldr	r3, [pc, #192]	; (3d3bc <z_thread_single_abort+0x154>)
   3d2fc:	6898      	ldr	r0, [r3, #8]
   3d2fe:	1b02      	subs	r2, r0, r4
   3d300:	4250      	negs	r0, r2
   3d302:	4150      	adcs	r0, r2
   3d304:	f7ff fc66 	bl	3cbd4 <update_cache>
			waiter->base.pended_on = NULL;
   3d308:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   3d30a:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   3d30c:	f104 0830 	add.w	r8, r4, #48	; 0x30
   3d310:	f043 0308 	orr.w	r3, r3, #8
   3d314:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   3d316:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d318:	4545      	cmp	r5, r8
   3d31a:	d000      	beq.n	3d31e <z_thread_single_abort+0xb6>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   3d31c:	bb3d      	cbnz	r5, 3d36e <z_thread_single_abort+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d31e:	4822      	ldr	r0, [pc, #136]	; (3d3a8 <z_thread_single_abort+0x140>)
   3d320:	f000 fe18 	bl	3df54 <z_spin_unlock_valid>
   3d324:	b968      	cbnz	r0, 3d342 <z_thread_single_abort+0xda>
   3d326:	2384      	movs	r3, #132	; 0x84
   3d328:	4a20      	ldr	r2, [pc, #128]	; (3d3ac <z_thread_single_abort+0x144>)
   3d32a:	4925      	ldr	r1, [pc, #148]	; (3d3c0 <z_thread_single_abort+0x158>)
   3d32c:	481c      	ldr	r0, [pc, #112]	; (3d3a0 <z_thread_single_abort+0x138>)
   3d32e:	f004 f849 	bl	413c4 <printk>
   3d332:	491d      	ldr	r1, [pc, #116]	; (3d3a8 <z_thread_single_abort+0x140>)
   3d334:	4823      	ldr	r0, [pc, #140]	; (3d3c4 <z_thread_single_abort+0x15c>)
   3d336:	f004 f845 	bl	413c4 <printk>
   3d33a:	2184      	movs	r1, #132	; 0x84
   3d33c:	481b      	ldr	r0, [pc, #108]	; (3d3ac <z_thread_single_abort+0x144>)
   3d33e:	f004 fa5e 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3d342:	f386 8811 	msr	BASEPRI, r6
   3d346:	f3bf 8f6f 	isb	sy
}
   3d34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   3d34e:	079b      	lsls	r3, r3, #30
   3d350:	d5da      	bpl.n	3d308 <z_thread_single_abort+0xa0>
				_priq_wait_remove(&pended_on(thread)->waitq,
   3d352:	f104 0008 	add.w	r0, r4, #8
   3d356:	f7ff fa79 	bl	3c84c <pended_on.isra.0>
   3d35a:	4621      	mov	r1, r4
   3d35c:	f7ff fbc0 	bl	3cae0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3d360:	7b63      	ldrb	r3, [r4, #13]
   3d362:	f023 0302 	bic.w	r3, r3, #2
   3d366:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   3d368:	2300      	movs	r3, #0
   3d36a:	60a3      	str	r3, [r4, #8]
   3d36c:	e7cc      	b.n	3d308 <z_thread_single_abort+0xa0>
   3d36e:	f105 0018 	add.w	r0, r5, #24
   3d372:	f001 f84f 	bl	3e414 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   3d376:	f105 0008 	add.w	r0, r5, #8
   3d37a:	f7ff fa67 	bl	3c84c <pended_on.isra.0>
   3d37e:	4629      	mov	r1, r5
   3d380:	f7ff fbae 	bl	3cae0 <z_priq_dumb_remove>
   3d384:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   3d386:	4628      	mov	r0, r5
   3d388:	f023 0302 	bic.w	r3, r3, #2
   3d38c:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   3d38e:	60af      	str	r7, [r5, #8]
   3d390:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   3d392:	f7ff fcbf 	bl	3cd14 <ready_thread>
   3d396:	e7be      	b.n	3d316 <z_thread_single_abort+0xae>
   3d398:	0004ef5a 	.word	0x0004ef5a
   3d39c:	0004eed0 	.word	0x0004eed0
   3d3a0:	00048156 	.word	0x00048156
   3d3a4:	0004ef88 	.word	0x0004ef88
   3d3a8:	20025d80 	.word	0x20025d80
   3d3ac:	000488fa 	.word	0x000488fa
   3d3b0:	00048920 	.word	0x00048920
   3d3b4:	00048935 	.word	0x00048935
   3d3b8:	20025d70 	.word	0x20025d70
   3d3bc:	20025d48 	.word	0x20025d48
   3d3c0:	0004894d 	.word	0x0004894d
   3d3c4:	00048964 	.word	0x00048964

0003d3c8 <unready_thread>:
{
   3d3c8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   3d3ca:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   3d3ce:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   3d3d0:	2b00      	cmp	r3, #0
   3d3d2:	da07      	bge.n	3d3e4 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   3d3d4:	4601      	mov	r1, r0
   3d3d6:	4808      	ldr	r0, [pc, #32]	; (3d3f8 <unready_thread+0x30>)
   3d3d8:	f7ff fb82 	bl	3cae0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3d3dc:	7b63      	ldrb	r3, [r4, #13]
   3d3de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3d3e2:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   3d3e4:	4b05      	ldr	r3, [pc, #20]	; (3d3fc <unready_thread+0x34>)
   3d3e6:	6898      	ldr	r0, [r3, #8]
   3d3e8:	1b03      	subs	r3, r0, r4
   3d3ea:	4258      	negs	r0, r3
   3d3ec:	4158      	adcs	r0, r3
}
   3d3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   3d3f2:	f7ff bbef 	b.w	3cbd4 <update_cache>
   3d3f6:	bf00      	nop
   3d3f8:	20025d70 	.word	0x20025d70
   3d3fc:	20025d48 	.word	0x20025d48

0003d400 <add_to_waitq_locked>:
{
   3d400:	b538      	push	{r3, r4, r5, lr}
   3d402:	4604      	mov	r4, r0
   3d404:	460d      	mov	r5, r1
	unready_thread(thread);
   3d406:	f7ff ffdf 	bl	3d3c8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   3d40a:	7b63      	ldrb	r3, [r4, #13]
   3d40c:	f043 0302 	orr.w	r3, r3, #2
   3d410:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3d412:	b33d      	cbz	r5, 3d464 <add_to_waitq_locked+0x64>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d414:	4b17      	ldr	r3, [pc, #92]	; (3d474 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   3d416:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d418:	429c      	cmp	r4, r3
   3d41a:	d10b      	bne.n	3d434 <add_to_waitq_locked+0x34>
   3d41c:	4916      	ldr	r1, [pc, #88]	; (3d478 <add_to_waitq_locked+0x78>)
   3d41e:	4817      	ldr	r0, [pc, #92]	; (3d47c <add_to_waitq_locked+0x7c>)
   3d420:	f240 3389 	movw	r3, #905	; 0x389
   3d424:	4a16      	ldr	r2, [pc, #88]	; (3d480 <add_to_waitq_locked+0x80>)
   3d426:	f003 ffcd 	bl	413c4 <printk>
   3d42a:	f240 3189 	movw	r1, #905	; 0x389
   3d42e:	4814      	ldr	r0, [pc, #80]	; (3d480 <add_to_waitq_locked+0x80>)
   3d430:	f004 f9e5 	bl	417fe <assert_post_action>
	return list->head == list;
   3d434:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d436:	429d      	cmp	r5, r3
   3d438:	bf08      	it	eq
   3d43a:	2300      	moveq	r3, #0
   3d43c:	2b00      	cmp	r3, #0
   3d43e:	bf38      	it	cc
   3d440:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d442:	b183      	cbz	r3, 3d466 <add_to_waitq_locked+0x66>
	if (thread_1->base.prio < thread_2->base.prio) {
   3d444:	f994 100e 	ldrsb.w	r1, [r4, #14]
   3d448:	f993 200e 	ldrsb.w	r2, [r3, #14]
   3d44c:	4291      	cmp	r1, r2
   3d44e:	db04      	blt.n	3d45a <add_to_waitq_locked+0x5a>
	return (node == list->tail) ? NULL : node->next;
   3d450:	686a      	ldr	r2, [r5, #4]
   3d452:	429a      	cmp	r2, r3
   3d454:	d007      	beq.n	3d466 <add_to_waitq_locked+0x66>
   3d456:	681b      	ldr	r3, [r3, #0]
   3d458:	e7f3      	b.n	3d442 <add_to_waitq_locked+0x42>
	node->prev = successor->prev;
   3d45a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3d45c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3d460:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3d462:	605c      	str	r4, [r3, #4]
}
   3d464:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   3d466:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3d468:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   3d46a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3d46c:	686b      	ldr	r3, [r5, #4]
   3d46e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3d470:	606c      	str	r4, [r5, #4]
   3d472:	e7f7      	b.n	3d464 <add_to_waitq_locked+0x64>
   3d474:	20024368 	.word	0x20024368
   3d478:	0004ef09 	.word	0x0004ef09
   3d47c:	00048156 	.word	0x00048156
   3d480:	0004eed0 	.word	0x0004eed0

0003d484 <pend>:
{
   3d484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d488:	4604      	mov	r4, r0
   3d48a:	460d      	mov	r5, r1
   3d48c:	4616      	mov	r6, r2
   3d48e:	461f      	mov	r7, r3
	__asm__ volatile(
   3d490:	f04f 0320 	mov.w	r3, #32
   3d494:	f3ef 8811 	mrs	r8, BASEPRI
   3d498:	f383 8811 	msr	BASEPRI, r3
   3d49c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d4a0:	481f      	ldr	r0, [pc, #124]	; (3d520 <pend+0x9c>)
   3d4a2:	f000 fd49 	bl	3df38 <z_spin_lock_valid>
   3d4a6:	b968      	cbnz	r0, 3d4c4 <pend+0x40>
   3d4a8:	235c      	movs	r3, #92	; 0x5c
   3d4aa:	4a1e      	ldr	r2, [pc, #120]	; (3d524 <pend+0xa0>)
   3d4ac:	491e      	ldr	r1, [pc, #120]	; (3d528 <pend+0xa4>)
   3d4ae:	481f      	ldr	r0, [pc, #124]	; (3d52c <pend+0xa8>)
   3d4b0:	f003 ff88 	bl	413c4 <printk>
   3d4b4:	491a      	ldr	r1, [pc, #104]	; (3d520 <pend+0x9c>)
   3d4b6:	481e      	ldr	r0, [pc, #120]	; (3d530 <pend+0xac>)
   3d4b8:	f003 ff84 	bl	413c4 <printk>
   3d4bc:	215c      	movs	r1, #92	; 0x5c
   3d4be:	4819      	ldr	r0, [pc, #100]	; (3d524 <pend+0xa0>)
   3d4c0:	f004 f99d 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3d4c4:	4816      	ldr	r0, [pc, #88]	; (3d520 <pend+0x9c>)
   3d4c6:	f000 fd55 	bl	3df74 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   3d4ca:	4620      	mov	r0, r4
   3d4cc:	4629      	mov	r1, r5
   3d4ce:	f7ff ff97 	bl	3d400 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d4d2:	4813      	ldr	r0, [pc, #76]	; (3d520 <pend+0x9c>)
   3d4d4:	f000 fd3e 	bl	3df54 <z_spin_unlock_valid>
   3d4d8:	b968      	cbnz	r0, 3d4f6 <pend+0x72>
   3d4da:	2384      	movs	r3, #132	; 0x84
   3d4dc:	4a11      	ldr	r2, [pc, #68]	; (3d524 <pend+0xa0>)
   3d4de:	4915      	ldr	r1, [pc, #84]	; (3d534 <pend+0xb0>)
   3d4e0:	4812      	ldr	r0, [pc, #72]	; (3d52c <pend+0xa8>)
   3d4e2:	f003 ff6f 	bl	413c4 <printk>
   3d4e6:	490e      	ldr	r1, [pc, #56]	; (3d520 <pend+0x9c>)
   3d4e8:	4813      	ldr	r0, [pc, #76]	; (3d538 <pend+0xb4>)
   3d4ea:	f003 ff6b 	bl	413c4 <printk>
   3d4ee:	2184      	movs	r1, #132	; 0x84
   3d4f0:	480c      	ldr	r0, [pc, #48]	; (3d524 <pend+0xa0>)
   3d4f2:	f004 f984 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3d4f6:	f388 8811 	msr	BASEPRI, r8
   3d4fa:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3d4fe:	1c7b      	adds	r3, r7, #1
   3d500:	bf08      	it	eq
   3d502:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   3d506:	d008      	beq.n	3d51a <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3d508:	4632      	mov	r2, r6
   3d50a:	463b      	mov	r3, r7
   3d50c:	f104 0018 	add.w	r0, r4, #24
   3d510:	490a      	ldr	r1, [pc, #40]	; (3d53c <pend+0xb8>)
}
   3d512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3d516:	f000 bea9 	b.w	3e26c <z_add_timeout>
   3d51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3d51e:	bf00      	nop
   3d520:	20025d80 	.word	0x20025d80
   3d524:	000488fa 	.word	0x000488fa
   3d528:	00048920 	.word	0x00048920
   3d52c:	00048156 	.word	0x00048156
   3d530:	00048935 	.word	0x00048935
   3d534:	0004894d 	.word	0x0004894d
   3d538:	00048964 	.word	0x00048964
   3d53c:	0003cf55 	.word	0x0003cf55

0003d540 <z_pend_curr>:
{
   3d540:	b538      	push	{r3, r4, r5, lr}
   3d542:	4604      	mov	r4, r0
	pending_current = _current;
   3d544:	4b10      	ldr	r3, [pc, #64]	; (3d588 <z_pend_curr+0x48>)
{
   3d546:	460d      	mov	r5, r1
	pending_current = _current;
   3d548:	6898      	ldr	r0, [r3, #8]
   3d54a:	4b10      	ldr	r3, [pc, #64]	; (3d58c <z_pend_curr+0x4c>)
{
   3d54c:	4611      	mov	r1, r2
	pending_current = _current;
   3d54e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   3d550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3d554:	f7ff ff96 	bl	3d484 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d558:	4620      	mov	r0, r4
   3d55a:	f000 fcfb 	bl	3df54 <z_spin_unlock_valid>
   3d55e:	b968      	cbnz	r0, 3d57c <z_pend_curr+0x3c>
   3d560:	239b      	movs	r3, #155	; 0x9b
   3d562:	4a0b      	ldr	r2, [pc, #44]	; (3d590 <z_pend_curr+0x50>)
   3d564:	490b      	ldr	r1, [pc, #44]	; (3d594 <z_pend_curr+0x54>)
   3d566:	480c      	ldr	r0, [pc, #48]	; (3d598 <z_pend_curr+0x58>)
   3d568:	f003 ff2c 	bl	413c4 <printk>
   3d56c:	4621      	mov	r1, r4
   3d56e:	480b      	ldr	r0, [pc, #44]	; (3d59c <z_pend_curr+0x5c>)
   3d570:	f003 ff28 	bl	413c4 <printk>
   3d574:	219b      	movs	r1, #155	; 0x9b
   3d576:	4806      	ldr	r0, [pc, #24]	; (3d590 <z_pend_curr+0x50>)
   3d578:	f004 f941 	bl	417fe <assert_post_action>
   3d57c:	4628      	mov	r0, r5
}
   3d57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3d582:	f7e9 bad5 	b.w	26b30 <arch_swap>
   3d586:	bf00      	nop
   3d588:	20025d48 	.word	0x20025d48
   3d58c:	20025d7c 	.word	0x20025d7c
   3d590:	000488fa 	.word	0x000488fa
   3d594:	0004894d 	.word	0x0004894d
   3d598:	00048156 	.word	0x00048156
   3d59c:	00048964 	.word	0x00048964

0003d5a0 <z_set_prio>:
{
   3d5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d5a2:	4604      	mov	r4, r0
   3d5a4:	460e      	mov	r6, r1
	__asm__ volatile(
   3d5a6:	f04f 0320 	mov.w	r3, #32
   3d5aa:	f3ef 8711 	mrs	r7, BASEPRI
   3d5ae:	f383 8811 	msr	BASEPRI, r3
   3d5b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d5b6:	4839      	ldr	r0, [pc, #228]	; (3d69c <z_set_prio+0xfc>)
   3d5b8:	f000 fcbe 	bl	3df38 <z_spin_lock_valid>
   3d5bc:	b968      	cbnz	r0, 3d5da <z_set_prio+0x3a>
   3d5be:	235c      	movs	r3, #92	; 0x5c
   3d5c0:	4a37      	ldr	r2, [pc, #220]	; (3d6a0 <z_set_prio+0x100>)
   3d5c2:	4938      	ldr	r1, [pc, #224]	; (3d6a4 <z_set_prio+0x104>)
   3d5c4:	4838      	ldr	r0, [pc, #224]	; (3d6a8 <z_set_prio+0x108>)
   3d5c6:	f003 fefd 	bl	413c4 <printk>
   3d5ca:	4934      	ldr	r1, [pc, #208]	; (3d69c <z_set_prio+0xfc>)
   3d5cc:	4837      	ldr	r0, [pc, #220]	; (3d6ac <z_set_prio+0x10c>)
   3d5ce:	f003 fef9 	bl	413c4 <printk>
   3d5d2:	215c      	movs	r1, #92	; 0x5c
   3d5d4:	4832      	ldr	r0, [pc, #200]	; (3d6a0 <z_set_prio+0x100>)
   3d5d6:	f004 f912 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3d5da:	4830      	ldr	r0, [pc, #192]	; (3d69c <z_set_prio+0xfc>)
   3d5dc:	f000 fcca 	bl	3df74 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3d5e0:	7b63      	ldrb	r3, [r4, #13]
   3d5e2:	b276      	sxtb	r6, r6
   3d5e4:	06db      	lsls	r3, r3, #27
   3d5e6:	d155      	bne.n	3d694 <z_set_prio+0xf4>
	return !sys_dnode_is_linked(&t->node);
   3d5e8:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   3d5ea:	2d00      	cmp	r5, #0
   3d5ec:	d152      	bne.n	3d694 <z_set_prio+0xf4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   3d5ee:	4621      	mov	r1, r4
   3d5f0:	482f      	ldr	r0, [pc, #188]	; (3d6b0 <z_set_prio+0x110>)
   3d5f2:	f7ff fa75 	bl	3cae0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d5f6:	4b2f      	ldr	r3, [pc, #188]	; (3d6b4 <z_set_prio+0x114>)
				thread->base.prio = prio;
   3d5f8:	73a6      	strb	r6, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d5fa:	429c      	cmp	r4, r3
   3d5fc:	d10b      	bne.n	3d616 <z_set_prio+0x76>
   3d5fe:	492e      	ldr	r1, [pc, #184]	; (3d6b8 <z_set_prio+0x118>)
   3d600:	4829      	ldr	r0, [pc, #164]	; (3d6a8 <z_set_prio+0x108>)
   3d602:	f240 3389 	movw	r3, #905	; 0x389
   3d606:	4a2d      	ldr	r2, [pc, #180]	; (3d6bc <z_set_prio+0x11c>)
   3d608:	f003 fedc 	bl	413c4 <printk>
   3d60c:	f240 3189 	movw	r1, #905	; 0x389
   3d610:	482a      	ldr	r0, [pc, #168]	; (3d6bc <z_set_prio+0x11c>)
   3d612:	f004 f8f4 	bl	417fe <assert_post_action>
	return list->head == list;
   3d616:	4a2a      	ldr	r2, [pc, #168]	; (3d6c0 <z_set_prio+0x120>)
   3d618:	4613      	mov	r3, r2
   3d61a:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d61e:	4298      	cmp	r0, r3
   3d620:	bf18      	it	ne
   3d622:	4605      	movne	r5, r0
   3d624:	2d00      	cmp	r5, #0
   3d626:	4619      	mov	r1, r3
   3d628:	462b      	mov	r3, r5
   3d62a:	bf38      	it	cc
   3d62c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3d62e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d630:	b353      	cbz	r3, 3d688 <z_set_prio+0xe8>
	if (thread_1->base.prio < thread_2->base.prio) {
   3d632:	f994 600e 	ldrsb.w	r6, [r4, #14]
   3d636:	f993 500e 	ldrsb.w	r5, [r3, #14]
   3d63a:	42ae      	cmp	r6, r5
   3d63c:	db03      	blt.n	3d646 <z_set_prio+0xa6>
	return (node == list->tail) ? NULL : node->next;
   3d63e:	4298      	cmp	r0, r3
   3d640:	d022      	beq.n	3d688 <z_set_prio+0xe8>
   3d642:	681b      	ldr	r3, [r3, #0]
   3d644:	e7f4      	b.n	3d630 <z_set_prio+0x90>
	node->prev = successor->prev;
   3d646:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3d648:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3d64c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3d64e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   3d650:	2001      	movs	r0, #1
   3d652:	f7ff fabf 	bl	3cbd4 <update_cache>
   3d656:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d658:	4810      	ldr	r0, [pc, #64]	; (3d69c <z_set_prio+0xfc>)
   3d65a:	f000 fc7b 	bl	3df54 <z_spin_unlock_valid>
   3d65e:	b968      	cbnz	r0, 3d67c <z_set_prio+0xdc>
   3d660:	2384      	movs	r3, #132	; 0x84
   3d662:	4a0f      	ldr	r2, [pc, #60]	; (3d6a0 <z_set_prio+0x100>)
   3d664:	4917      	ldr	r1, [pc, #92]	; (3d6c4 <z_set_prio+0x124>)
   3d666:	4810      	ldr	r0, [pc, #64]	; (3d6a8 <z_set_prio+0x108>)
   3d668:	f003 feac 	bl	413c4 <printk>
   3d66c:	490b      	ldr	r1, [pc, #44]	; (3d69c <z_set_prio+0xfc>)
   3d66e:	4816      	ldr	r0, [pc, #88]	; (3d6c8 <z_set_prio+0x128>)
   3d670:	f003 fea8 	bl	413c4 <printk>
   3d674:	2184      	movs	r1, #132	; 0x84
   3d676:	480a      	ldr	r0, [pc, #40]	; (3d6a0 <z_set_prio+0x100>)
   3d678:	f004 f8c1 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3d67c:	f387 8811 	msr	BASEPRI, r7
   3d680:	f3bf 8f6f 	isb	sy
}
   3d684:	4620      	mov	r0, r4
   3d686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   3d688:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3d68c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3d68e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3d690:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   3d692:	e7dd      	b.n	3d650 <z_set_prio+0xb0>
			thread->base.prio = prio;
   3d694:	73a6      	strb	r6, [r4, #14]
   3d696:	2400      	movs	r4, #0
   3d698:	e7de      	b.n	3d658 <z_set_prio+0xb8>
   3d69a:	bf00      	nop
   3d69c:	20025d80 	.word	0x20025d80
   3d6a0:	000488fa 	.word	0x000488fa
   3d6a4:	00048920 	.word	0x00048920
   3d6a8:	00048156 	.word	0x00048156
   3d6ac:	00048935 	.word	0x00048935
   3d6b0:	20025d70 	.word	0x20025d70
   3d6b4:	20024368 	.word	0x20024368
   3d6b8:	0004ef09 	.word	0x0004ef09
   3d6bc:	0004eed0 	.word	0x0004eed0
   3d6c0:	20025d48 	.word	0x20025d48
   3d6c4:	0004894d 	.word	0x0004894d
   3d6c8:	00048964 	.word	0x00048964

0003d6cc <z_unpend_first_thread>:
{
   3d6cc:	b538      	push	{r3, r4, r5, lr}
   3d6ce:	4604      	mov	r4, r0
	__asm__ volatile(
   3d6d0:	f04f 0320 	mov.w	r3, #32
   3d6d4:	f3ef 8511 	mrs	r5, BASEPRI
   3d6d8:	f383 8811 	msr	BASEPRI, r3
   3d6dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d6e0:	4836      	ldr	r0, [pc, #216]	; (3d7bc <z_unpend_first_thread+0xf0>)
   3d6e2:	f000 fc29 	bl	3df38 <z_spin_lock_valid>
   3d6e6:	b968      	cbnz	r0, 3d704 <z_unpend_first_thread+0x38>
   3d6e8:	235c      	movs	r3, #92	; 0x5c
   3d6ea:	4a35      	ldr	r2, [pc, #212]	; (3d7c0 <z_unpend_first_thread+0xf4>)
   3d6ec:	4935      	ldr	r1, [pc, #212]	; (3d7c4 <z_unpend_first_thread+0xf8>)
   3d6ee:	4836      	ldr	r0, [pc, #216]	; (3d7c8 <z_unpend_first_thread+0xfc>)
   3d6f0:	f003 fe68 	bl	413c4 <printk>
   3d6f4:	4931      	ldr	r1, [pc, #196]	; (3d7bc <z_unpend_first_thread+0xf0>)
   3d6f6:	4835      	ldr	r0, [pc, #212]	; (3d7cc <z_unpend_first_thread+0x100>)
   3d6f8:	f003 fe64 	bl	413c4 <printk>
   3d6fc:	215c      	movs	r1, #92	; 0x5c
   3d6fe:	4830      	ldr	r0, [pc, #192]	; (3d7c0 <z_unpend_first_thread+0xf4>)
   3d700:	f004 f87d 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3d704:	482d      	ldr	r0, [pc, #180]	; (3d7bc <z_unpend_first_thread+0xf0>)
   3d706:	f000 fc35 	bl	3df74 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   3d70a:	4620      	mov	r0, r4
   3d70c:	f007 f972 	bl	449f4 <z_priq_dumb_best>
   3d710:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d712:	482a      	ldr	r0, [pc, #168]	; (3d7bc <z_unpend_first_thread+0xf0>)
   3d714:	f000 fc1e 	bl	3df54 <z_spin_unlock_valid>
   3d718:	b968      	cbnz	r0, 3d736 <z_unpend_first_thread+0x6a>
   3d71a:	2384      	movs	r3, #132	; 0x84
   3d71c:	4a28      	ldr	r2, [pc, #160]	; (3d7c0 <z_unpend_first_thread+0xf4>)
   3d71e:	492c      	ldr	r1, [pc, #176]	; (3d7d0 <z_unpend_first_thread+0x104>)
   3d720:	4829      	ldr	r0, [pc, #164]	; (3d7c8 <z_unpend_first_thread+0xfc>)
   3d722:	f003 fe4f 	bl	413c4 <printk>
   3d726:	4925      	ldr	r1, [pc, #148]	; (3d7bc <z_unpend_first_thread+0xf0>)
   3d728:	482a      	ldr	r0, [pc, #168]	; (3d7d4 <z_unpend_first_thread+0x108>)
   3d72a:	f003 fe4b 	bl	413c4 <printk>
   3d72e:	2184      	movs	r1, #132	; 0x84
   3d730:	4823      	ldr	r0, [pc, #140]	; (3d7c0 <z_unpend_first_thread+0xf4>)
   3d732:	f004 f864 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3d736:	f385 8811 	msr	BASEPRI, r5
   3d73a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   3d73e:	2c00      	cmp	r4, #0
   3d740:	d039      	beq.n	3d7b6 <z_unpend_first_thread+0xea>
	__asm__ volatile(
   3d742:	f04f 0320 	mov.w	r3, #32
   3d746:	f3ef 8511 	mrs	r5, BASEPRI
   3d74a:	f383 8811 	msr	BASEPRI, r3
   3d74e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d752:	481a      	ldr	r0, [pc, #104]	; (3d7bc <z_unpend_first_thread+0xf0>)
   3d754:	f000 fbf0 	bl	3df38 <z_spin_lock_valid>
   3d758:	b968      	cbnz	r0, 3d776 <z_unpend_first_thread+0xaa>
   3d75a:	235c      	movs	r3, #92	; 0x5c
   3d75c:	4a18      	ldr	r2, [pc, #96]	; (3d7c0 <z_unpend_first_thread+0xf4>)
   3d75e:	4919      	ldr	r1, [pc, #100]	; (3d7c4 <z_unpend_first_thread+0xf8>)
   3d760:	4819      	ldr	r0, [pc, #100]	; (3d7c8 <z_unpend_first_thread+0xfc>)
   3d762:	f003 fe2f 	bl	413c4 <printk>
   3d766:	4915      	ldr	r1, [pc, #84]	; (3d7bc <z_unpend_first_thread+0xf0>)
   3d768:	4818      	ldr	r0, [pc, #96]	; (3d7cc <z_unpend_first_thread+0x100>)
   3d76a:	f003 fe2b 	bl	413c4 <printk>
   3d76e:	215c      	movs	r1, #92	; 0x5c
   3d770:	4813      	ldr	r0, [pc, #76]	; (3d7c0 <z_unpend_first_thread+0xf4>)
   3d772:	f004 f844 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3d776:	4811      	ldr	r0, [pc, #68]	; (3d7bc <z_unpend_first_thread+0xf0>)
   3d778:	f000 fbfc 	bl	3df74 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   3d77c:	4620      	mov	r0, r4
   3d77e:	f007 f92a 	bl	449d6 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d782:	480e      	ldr	r0, [pc, #56]	; (3d7bc <z_unpend_first_thread+0xf0>)
   3d784:	f000 fbe6 	bl	3df54 <z_spin_unlock_valid>
   3d788:	b968      	cbnz	r0, 3d7a6 <z_unpend_first_thread+0xda>
   3d78a:	2384      	movs	r3, #132	; 0x84
   3d78c:	4a0c      	ldr	r2, [pc, #48]	; (3d7c0 <z_unpend_first_thread+0xf4>)
   3d78e:	4910      	ldr	r1, [pc, #64]	; (3d7d0 <z_unpend_first_thread+0x104>)
   3d790:	480d      	ldr	r0, [pc, #52]	; (3d7c8 <z_unpend_first_thread+0xfc>)
   3d792:	f003 fe17 	bl	413c4 <printk>
   3d796:	4909      	ldr	r1, [pc, #36]	; (3d7bc <z_unpend_first_thread+0xf0>)
   3d798:	480e      	ldr	r0, [pc, #56]	; (3d7d4 <z_unpend_first_thread+0x108>)
   3d79a:	f003 fe13 	bl	413c4 <printk>
   3d79e:	2184      	movs	r1, #132	; 0x84
   3d7a0:	4807      	ldr	r0, [pc, #28]	; (3d7c0 <z_unpend_first_thread+0xf4>)
   3d7a2:	f004 f82c 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3d7a6:	f385 8811 	msr	BASEPRI, r5
   3d7aa:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   3d7ae:	f104 0018 	add.w	r0, r4, #24
   3d7b2:	f000 fe2f 	bl	3e414 <z_abort_timeout>
}
   3d7b6:	4620      	mov	r0, r4
   3d7b8:	bd38      	pop	{r3, r4, r5, pc}
   3d7ba:	bf00      	nop
   3d7bc:	20025d80 	.word	0x20025d80
   3d7c0:	000488fa 	.word	0x000488fa
   3d7c4:	00048920 	.word	0x00048920
   3d7c8:	00048156 	.word	0x00048156
   3d7cc:	00048935 	.word	0x00048935
   3d7d0:	0004894d 	.word	0x0004894d
   3d7d4:	00048964 	.word	0x00048964

0003d7d8 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   3d7d8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   3d7da:	4b04      	ldr	r3, [pc, #16]	; (3d7ec <z_sched_init+0x14>)
   3d7dc:	4608      	mov	r0, r1
   3d7de:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   3d7e2:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   3d7e6:	f7ff b85f 	b.w	3c8a8 <k_sched_time_slice_set>
   3d7ea:	bf00      	nop
   3d7ec:	20025d48 	.word	0x20025d48

0003d7f0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   3d7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d7f2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3d7f6:	b173      	cbz	r3, 3d816 <z_impl_k_yield+0x26>
   3d7f8:	4946      	ldr	r1, [pc, #280]	; (3d914 <z_impl_k_yield+0x124>)
   3d7fa:	f240 4394 	movw	r3, #1172	; 0x494
   3d7fe:	4a46      	ldr	r2, [pc, #280]	; (3d918 <z_impl_k_yield+0x128>)
   3d800:	4846      	ldr	r0, [pc, #280]	; (3d91c <z_impl_k_yield+0x12c>)
   3d802:	f003 fddf 	bl	413c4 <printk>
   3d806:	4846      	ldr	r0, [pc, #280]	; (3d920 <z_impl_k_yield+0x130>)
   3d808:	f003 fddc 	bl	413c4 <printk>
   3d80c:	f240 4194 	movw	r1, #1172	; 0x494
   3d810:	4841      	ldr	r0, [pc, #260]	; (3d918 <z_impl_k_yield+0x128>)
   3d812:	f003 fff4 	bl	417fe <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   3d816:	4c43      	ldr	r4, [pc, #268]	; (3d924 <z_impl_k_yield+0x134>)
   3d818:	4e43      	ldr	r6, [pc, #268]	; (3d928 <z_impl_k_yield+0x138>)
   3d81a:	68a2      	ldr	r2, [r4, #8]
   3d81c:	42b2      	cmp	r2, r6
   3d81e:	d067      	beq.n	3d8f0 <z_impl_k_yield+0x100>
	__asm__ volatile(
   3d820:	f04f 0320 	mov.w	r3, #32
   3d824:	f3ef 8711 	mrs	r7, BASEPRI
   3d828:	f383 8811 	msr	BASEPRI, r3
   3d82c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d830:	483e      	ldr	r0, [pc, #248]	; (3d92c <z_impl_k_yield+0x13c>)
   3d832:	f000 fb81 	bl	3df38 <z_spin_lock_valid>
   3d836:	b968      	cbnz	r0, 3d854 <z_impl_k_yield+0x64>
   3d838:	235c      	movs	r3, #92	; 0x5c
   3d83a:	4a3d      	ldr	r2, [pc, #244]	; (3d930 <z_impl_k_yield+0x140>)
   3d83c:	493d      	ldr	r1, [pc, #244]	; (3d934 <z_impl_k_yield+0x144>)
   3d83e:	4837      	ldr	r0, [pc, #220]	; (3d91c <z_impl_k_yield+0x12c>)
   3d840:	f003 fdc0 	bl	413c4 <printk>
   3d844:	4939      	ldr	r1, [pc, #228]	; (3d92c <z_impl_k_yield+0x13c>)
   3d846:	483c      	ldr	r0, [pc, #240]	; (3d938 <z_impl_k_yield+0x148>)
   3d848:	f003 fdbc 	bl	413c4 <printk>
   3d84c:	215c      	movs	r1, #92	; 0x5c
   3d84e:	4838      	ldr	r0, [pc, #224]	; (3d930 <z_impl_k_yield+0x140>)
   3d850:	f003 ffd5 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3d854:	4835      	ldr	r0, [pc, #212]	; (3d92c <z_impl_k_yield+0x13c>)
   3d856:	f000 fb8d 	bl	3df74 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   3d85a:	68a1      	ldr	r1, [r4, #8]
   3d85c:	4837      	ldr	r0, [pc, #220]	; (3d93c <z_impl_k_yield+0x14c>)
   3d85e:	f7ff f93f 	bl	3cae0 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   3d862:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d864:	42b5      	cmp	r5, r6
   3d866:	d10b      	bne.n	3d880 <z_impl_k_yield+0x90>
   3d868:	4935      	ldr	r1, [pc, #212]	; (3d940 <z_impl_k_yield+0x150>)
   3d86a:	482c      	ldr	r0, [pc, #176]	; (3d91c <z_impl_k_yield+0x12c>)
   3d86c:	f240 3389 	movw	r3, #905	; 0x389
   3d870:	4a29      	ldr	r2, [pc, #164]	; (3d918 <z_impl_k_yield+0x128>)
   3d872:	f003 fda7 	bl	413c4 <printk>
   3d876:	f240 3189 	movw	r1, #905	; 0x389
   3d87a:	4827      	ldr	r0, [pc, #156]	; (3d918 <z_impl_k_yield+0x128>)
   3d87c:	f003 ffbf 	bl	417fe <assert_post_action>
	return list->head == list;
   3d880:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d882:	492e      	ldr	r1, [pc, #184]	; (3d93c <z_impl_k_yield+0x14c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3d884:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d886:	428b      	cmp	r3, r1
   3d888:	bf08      	it	eq
   3d88a:	2300      	moveq	r3, #0
   3d88c:	2b00      	cmp	r3, #0
   3d88e:	bf38      	it	cc
   3d890:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d892:	2b00      	cmp	r3, #0
   3d894:	d038      	beq.n	3d908 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
   3d896:	f995 600e 	ldrsb.w	r6, [r5, #14]
   3d89a:	f993 000e 	ldrsb.w	r0, [r3, #14]
   3d89e:	4286      	cmp	r6, r0
   3d8a0:	db03      	blt.n	3d8aa <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
   3d8a2:	4293      	cmp	r3, r2
   3d8a4:	d030      	beq.n	3d908 <z_impl_k_yield+0x118>
   3d8a6:	681b      	ldr	r3, [r3, #0]
   3d8a8:	e7f3      	b.n	3d892 <z_impl_k_yield+0xa2>
	node->prev = successor->prev;
   3d8aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3d8ac:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   3d8b0:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   3d8b2:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   3d8b4:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   3d8b6:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   3d8b8:	7b53      	ldrb	r3, [r2, #13]
   3d8ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3d8be:	7353      	strb	r3, [r2, #13]
   3d8c0:	f7ff f988 	bl	3cbd4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d8c4:	4819      	ldr	r0, [pc, #100]	; (3d92c <z_impl_k_yield+0x13c>)
   3d8c6:	f000 fb45 	bl	3df54 <z_spin_unlock_valid>
   3d8ca:	b968      	cbnz	r0, 3d8e8 <z_impl_k_yield+0xf8>
   3d8cc:	2384      	movs	r3, #132	; 0x84
   3d8ce:	4a18      	ldr	r2, [pc, #96]	; (3d930 <z_impl_k_yield+0x140>)
   3d8d0:	491c      	ldr	r1, [pc, #112]	; (3d944 <z_impl_k_yield+0x154>)
   3d8d2:	4812      	ldr	r0, [pc, #72]	; (3d91c <z_impl_k_yield+0x12c>)
   3d8d4:	f003 fd76 	bl	413c4 <printk>
   3d8d8:	4914      	ldr	r1, [pc, #80]	; (3d92c <z_impl_k_yield+0x13c>)
   3d8da:	481b      	ldr	r0, [pc, #108]	; (3d948 <z_impl_k_yield+0x158>)
   3d8dc:	f003 fd72 	bl	413c4 <printk>
   3d8e0:	2184      	movs	r1, #132	; 0x84
   3d8e2:	4813      	ldr	r0, [pc, #76]	; (3d930 <z_impl_k_yield+0x140>)
   3d8e4:	f003 ff8b 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3d8e8:	f387 8811 	msr	BASEPRI, r7
   3d8ec:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3d8f0:	f04f 0320 	mov.w	r3, #32
   3d8f4:	f3ef 8011 	mrs	r0, BASEPRI
   3d8f8:	f383 8811 	msr	BASEPRI, r3
   3d8fc:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   3d900:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3d904:	f7e9 b914 	b.w	26b30 <arch_swap>
	node->prev = list->tail;
   3d908:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
   3d90c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3d90e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3d910:	62e5      	str	r5, [r4, #44]	; 0x2c
}
   3d912:	e7cf      	b.n	3d8b4 <z_impl_k_yield+0xc4>
   3d914:	0004ee27 	.word	0x0004ee27
   3d918:	0004eed0 	.word	0x0004eed0
   3d91c:	00048156 	.word	0x00048156
   3d920:	00049046 	.word	0x00049046
   3d924:	20025d48 	.word	0x20025d48
   3d928:	20024368 	.word	0x20024368
   3d92c:	20025d80 	.word	0x20025d80
   3d930:	000488fa 	.word	0x000488fa
   3d934:	00048920 	.word	0x00048920
   3d938:	00048935 	.word	0x00048935
   3d93c:	20025d70 	.word	0x20025d70
   3d940:	0004ef09 	.word	0x0004ef09
   3d944:	0004894d 	.word	0x0004894d
   3d948:	00048964 	.word	0x00048964

0003d94c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
   3d94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d950:	4604      	mov	r4, r0
   3d952:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   3d956:	b173      	cbz	r3, 3d976 <z_tick_sleep+0x2a>
   3d958:	493b      	ldr	r1, [pc, #236]	; (3da48 <z_tick_sleep+0xfc>)
   3d95a:	f240 43b2 	movw	r3, #1202	; 0x4b2
   3d95e:	4a3b      	ldr	r2, [pc, #236]	; (3da4c <z_tick_sleep+0x100>)
   3d960:	483b      	ldr	r0, [pc, #236]	; (3da50 <z_tick_sleep+0x104>)
   3d962:	f003 fd2f 	bl	413c4 <printk>
   3d966:	483b      	ldr	r0, [pc, #236]	; (3da54 <z_tick_sleep+0x108>)
   3d968:	f003 fd2c 	bl	413c4 <printk>
   3d96c:	f240 41b2 	movw	r1, #1202	; 0x4b2
   3d970:	4836      	ldr	r0, [pc, #216]	; (3da4c <z_tick_sleep+0x100>)
   3d972:	f003 ff44 	bl	417fe <assert_post_action>

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   3d976:	b924      	cbnz	r4, 3d982 <z_tick_sleep+0x36>
	z_impl_k_yield();
   3d978:	f7ff ff3a 	bl	3d7f0 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   3d97c:	4620      	mov	r0, r4
   3d97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   3d982:	f007 f8d2 	bl	44b2a <z_tick_get_32>
	timeout = Z_TIMEOUT_TICKS(ticks);
   3d986:	4626      	mov	r6, r4
   3d988:	17e7      	asrs	r7, r4, #31
	expected_wakeup_time = ticks + z_tick_get_32();
   3d98a:	4404      	add	r4, r0
   3d98c:	f04f 0320 	mov.w	r3, #32
   3d990:	f3ef 8811 	mrs	r8, BASEPRI
   3d994:	f383 8811 	msr	BASEPRI, r3
   3d998:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d99c:	482e      	ldr	r0, [pc, #184]	; (3da58 <z_tick_sleep+0x10c>)
   3d99e:	f000 facb 	bl	3df38 <z_spin_lock_valid>
   3d9a2:	b968      	cbnz	r0, 3d9c0 <z_tick_sleep+0x74>
   3d9a4:	235c      	movs	r3, #92	; 0x5c
   3d9a6:	4a2d      	ldr	r2, [pc, #180]	; (3da5c <z_tick_sleep+0x110>)
   3d9a8:	492d      	ldr	r1, [pc, #180]	; (3da60 <z_tick_sleep+0x114>)
   3d9aa:	4829      	ldr	r0, [pc, #164]	; (3da50 <z_tick_sleep+0x104>)
   3d9ac:	f003 fd0a 	bl	413c4 <printk>
   3d9b0:	4929      	ldr	r1, [pc, #164]	; (3da58 <z_tick_sleep+0x10c>)
   3d9b2:	482c      	ldr	r0, [pc, #176]	; (3da64 <z_tick_sleep+0x118>)
   3d9b4:	f003 fd06 	bl	413c4 <printk>
   3d9b8:	215c      	movs	r1, #92	; 0x5c
   3d9ba:	4828      	ldr	r0, [pc, #160]	; (3da5c <z_tick_sleep+0x110>)
   3d9bc:	f003 ff1f 	bl	417fe <assert_post_action>
	pending_current = _current;
   3d9c0:	4d29      	ldr	r5, [pc, #164]	; (3da68 <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
   3d9c2:	4825      	ldr	r0, [pc, #148]	; (3da58 <z_tick_sleep+0x10c>)
   3d9c4:	f000 fad6 	bl	3df74 <z_spin_lock_set_owner>
   3d9c8:	68a8      	ldr	r0, [r5, #8]
   3d9ca:	4b28      	ldr	r3, [pc, #160]	; (3da6c <z_tick_sleep+0x120>)
   3d9cc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   3d9ce:	f7ff fcfb 	bl	3d3c8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   3d9d2:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3d9d4:	4632      	mov	r2, r6
   3d9d6:	463b      	mov	r3, r7
   3d9d8:	3018      	adds	r0, #24
   3d9da:	4925      	ldr	r1, [pc, #148]	; (3da70 <z_tick_sleep+0x124>)
   3d9dc:	f000 fc46 	bl	3e26c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   3d9e0:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d9e2:	481d      	ldr	r0, [pc, #116]	; (3da58 <z_tick_sleep+0x10c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3d9e4:	7b53      	ldrb	r3, [r2, #13]
   3d9e6:	f043 0310 	orr.w	r3, r3, #16
   3d9ea:	7353      	strb	r3, [r2, #13]
   3d9ec:	f000 fab2 	bl	3df54 <z_spin_unlock_valid>
   3d9f0:	b968      	cbnz	r0, 3da0e <z_tick_sleep+0xc2>
   3d9f2:	239b      	movs	r3, #155	; 0x9b
   3d9f4:	4a19      	ldr	r2, [pc, #100]	; (3da5c <z_tick_sleep+0x110>)
   3d9f6:	491f      	ldr	r1, [pc, #124]	; (3da74 <z_tick_sleep+0x128>)
   3d9f8:	4815      	ldr	r0, [pc, #84]	; (3da50 <z_tick_sleep+0x104>)
   3d9fa:	f003 fce3 	bl	413c4 <printk>
   3d9fe:	4916      	ldr	r1, [pc, #88]	; (3da58 <z_tick_sleep+0x10c>)
   3da00:	481d      	ldr	r0, [pc, #116]	; (3da78 <z_tick_sleep+0x12c>)
   3da02:	f003 fcdf 	bl	413c4 <printk>
   3da06:	219b      	movs	r1, #155	; 0x9b
   3da08:	4814      	ldr	r0, [pc, #80]	; (3da5c <z_tick_sleep+0x110>)
   3da0a:	f003 fef8 	bl	417fe <assert_post_action>
   3da0e:	4640      	mov	r0, r8
   3da10:	f7e9 f88e 	bl	26b30 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   3da14:	68ab      	ldr	r3, [r5, #8]
   3da16:	7b5b      	ldrb	r3, [r3, #13]
   3da18:	06db      	lsls	r3, r3, #27
   3da1a:	d50e      	bpl.n	3da3a <z_tick_sleep+0xee>
   3da1c:	4917      	ldr	r1, [pc, #92]	; (3da7c <z_tick_sleep+0x130>)
   3da1e:	f240 43d2 	movw	r3, #1234	; 0x4d2
   3da22:	4a0a      	ldr	r2, [pc, #40]	; (3da4c <z_tick_sleep+0x100>)
   3da24:	480a      	ldr	r0, [pc, #40]	; (3da50 <z_tick_sleep+0x104>)
   3da26:	f003 fccd 	bl	413c4 <printk>
   3da2a:	480a      	ldr	r0, [pc, #40]	; (3da54 <z_tick_sleep+0x108>)
   3da2c:	f003 fcca 	bl	413c4 <printk>
   3da30:	f240 41d2 	movw	r1, #1234	; 0x4d2
   3da34:	4805      	ldr	r0, [pc, #20]	; (3da4c <z_tick_sleep+0x100>)
   3da36:	f003 fee2 	bl	417fe <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   3da3a:	f007 f876 	bl	44b2a <z_tick_get_32>
   3da3e:	1a24      	subs	r4, r4, r0
   3da40:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3da44:	e79a      	b.n	3d97c <z_tick_sleep+0x30>
   3da46:	bf00      	nop
   3da48:	0004ee27 	.word	0x0004ee27
   3da4c:	0004eed0 	.word	0x0004eed0
   3da50:	00048156 	.word	0x00048156
   3da54:	00049046 	.word	0x00049046
   3da58:	20025d80 	.word	0x20025d80
   3da5c:	000488fa 	.word	0x000488fa
   3da60:	00048920 	.word	0x00048920
   3da64:	00048935 	.word	0x00048935
   3da68:	20025d48 	.word	0x20025d48
   3da6c:	20025d7c 	.word	0x20025d7c
   3da70:	0003cf55 	.word	0x0003cf55
   3da74:	0004894d 	.word	0x0004894d
   3da78:	00048964 	.word	0x00048964
   3da7c:	0004efa3 	.word	0x0004efa3

0003da80 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   3da80:	b538      	push	{r3, r4, r5, lr}
   3da82:	4604      	mov	r4, r0
   3da84:	460d      	mov	r5, r1
   3da86:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   3da8a:	b173      	cbz	r3, 3daaa <z_impl_k_sleep+0x2a>
   3da8c:	4912      	ldr	r1, [pc, #72]	; (3dad8 <z_impl_k_sleep+0x58>)
   3da8e:	f240 43e1 	movw	r3, #1249	; 0x4e1
   3da92:	4a12      	ldr	r2, [pc, #72]	; (3dadc <z_impl_k_sleep+0x5c>)
   3da94:	4812      	ldr	r0, [pc, #72]	; (3dae0 <z_impl_k_sleep+0x60>)
   3da96:	f003 fc95 	bl	413c4 <printk>
   3da9a:	4812      	ldr	r0, [pc, #72]	; (3dae4 <z_impl_k_sleep+0x64>)
   3da9c:	f003 fc92 	bl	413c4 <printk>
   3daa0:	f240 41e1 	movw	r1, #1249	; 0x4e1
   3daa4:	480d      	ldr	r0, [pc, #52]	; (3dadc <z_impl_k_sleep+0x5c>)
   3daa6:	f003 feaa 	bl	417fe <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3daaa:	3501      	adds	r5, #1
   3daac:	bf08      	it	eq
   3daae:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   3dab2:	d106      	bne.n	3dac2 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   3dab4:	4b0c      	ldr	r3, [pc, #48]	; (3dae8 <z_impl_k_sleep+0x68>)
   3dab6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   3dab8:	f7ff fb6c 	bl	3d194 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   3dabc:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   3dac0:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   3dac2:	4620      	mov	r0, r4
   3dac4:	f7ff ff42 	bl	3d94c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   3dac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3dacc:	fb80 0103 	smull	r0, r1, r0, r3
   3dad0:	0bc3      	lsrs	r3, r0, #15
   3dad2:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   3dad6:	e7f3      	b.n	3dac0 <z_impl_k_sleep+0x40>
   3dad8:	0004ee27 	.word	0x0004ee27
   3dadc:	0004eed0 	.word	0x0004eed0
   3dae0:	00048156 	.word	0x00048156
   3dae4:	00049046 	.word	0x00049046
   3dae8:	20025d48 	.word	0x20025d48

0003daec <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   3daec:	4b01      	ldr	r3, [pc, #4]	; (3daf4 <z_impl_k_current_get+0x8>)
   3daee:	6898      	ldr	r0, [r3, #8]
   3daf0:	4770      	bx	lr
   3daf2:	bf00      	nop
   3daf4:	20025d48 	.word	0x20025d48

0003daf8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   3daf8:	b538      	push	{r3, r4, r5, lr}
   3dafa:	4604      	mov	r4, r0
   3dafc:	f04f 0320 	mov.w	r3, #32
   3db00:	f3ef 8511 	mrs	r5, BASEPRI
   3db04:	f383 8811 	msr	BASEPRI, r3
   3db08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3db0c:	4817      	ldr	r0, [pc, #92]	; (3db6c <z_impl_k_sem_give+0x74>)
   3db0e:	f000 fa13 	bl	3df38 <z_spin_lock_valid>
   3db12:	b968      	cbnz	r0, 3db30 <z_impl_k_sem_give+0x38>
   3db14:	235c      	movs	r3, #92	; 0x5c
   3db16:	4a16      	ldr	r2, [pc, #88]	; (3db70 <z_impl_k_sem_give+0x78>)
   3db18:	4916      	ldr	r1, [pc, #88]	; (3db74 <z_impl_k_sem_give+0x7c>)
   3db1a:	4817      	ldr	r0, [pc, #92]	; (3db78 <z_impl_k_sem_give+0x80>)
   3db1c:	f003 fc52 	bl	413c4 <printk>
   3db20:	4912      	ldr	r1, [pc, #72]	; (3db6c <z_impl_k_sem_give+0x74>)
   3db22:	4816      	ldr	r0, [pc, #88]	; (3db7c <z_impl_k_sem_give+0x84>)
   3db24:	f003 fc4e 	bl	413c4 <printk>
   3db28:	215c      	movs	r1, #92	; 0x5c
   3db2a:	4811      	ldr	r0, [pc, #68]	; (3db70 <z_impl_k_sem_give+0x78>)
   3db2c:	f003 fe67 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3db30:	480e      	ldr	r0, [pc, #56]	; (3db6c <z_impl_k_sem_give+0x74>)
   3db32:	f000 fa1f 	bl	3df74 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   3db36:	4620      	mov	r0, r4
   3db38:	f7ff fdc8 	bl	3d6cc <z_unpend_first_thread>

	if (thread != NULL) {
   3db3c:	b148      	cbz	r0, 3db52 <z_impl_k_sem_give+0x5a>
   3db3e:	2200      	movs	r2, #0
   3db40:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   3db42:	f7ff f935 	bl	3cdb0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   3db46:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   3db48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3db4c:	4807      	ldr	r0, [pc, #28]	; (3db6c <z_impl_k_sem_give+0x74>)
   3db4e:	f7fe bf0b 	b.w	3c968 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3db52:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   3db56:	429a      	cmp	r2, r3
   3db58:	bf18      	it	ne
   3db5a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3db5c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3db5e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3db60:	f104 0010 	add.w	r0, r4, #16
   3db64:	f007 f85c 	bl	44c20 <z_handle_obj_poll_events>
}
   3db68:	e7ed      	b.n	3db46 <z_impl_k_sem_give+0x4e>
   3db6a:	bf00      	nop
   3db6c:	20025d8c 	.word	0x20025d8c
   3db70:	000488fa 	.word	0x000488fa
   3db74:	00048920 	.word	0x00048920
   3db78:	00048156 	.word	0x00048156
   3db7c:	00048935 	.word	0x00048935

0003db80 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   3db80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3db82:	4604      	mov	r4, r0
   3db84:	4616      	mov	r6, r2
   3db86:	461f      	mov	r7, r3
   3db88:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   3db8c:	b17b      	cbz	r3, 3dbae <z_impl_k_sem_take+0x2e>
   3db8e:	ea56 0307 	orrs.w	r3, r6, r7
   3db92:	d00c      	beq.n	3dbae <z_impl_k_sem_take+0x2e>
   3db94:	4935      	ldr	r1, [pc, #212]	; (3dc6c <z_impl_k_sem_take+0xec>)
   3db96:	238c      	movs	r3, #140	; 0x8c
   3db98:	4a35      	ldr	r2, [pc, #212]	; (3dc70 <z_impl_k_sem_take+0xf0>)
   3db9a:	4836      	ldr	r0, [pc, #216]	; (3dc74 <z_impl_k_sem_take+0xf4>)
   3db9c:	f003 fc12 	bl	413c4 <printk>
   3dba0:	4835      	ldr	r0, [pc, #212]	; (3dc78 <z_impl_k_sem_take+0xf8>)
   3dba2:	f003 fc0f 	bl	413c4 <printk>
   3dba6:	218c      	movs	r1, #140	; 0x8c
   3dba8:	4831      	ldr	r0, [pc, #196]	; (3dc70 <z_impl_k_sem_take+0xf0>)
   3dbaa:	f003 fe28 	bl	417fe <assert_post_action>
   3dbae:	f04f 0320 	mov.w	r3, #32
   3dbb2:	f3ef 8511 	mrs	r5, BASEPRI
   3dbb6:	f383 8811 	msr	BASEPRI, r3
   3dbba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3dbbe:	482f      	ldr	r0, [pc, #188]	; (3dc7c <z_impl_k_sem_take+0xfc>)
   3dbc0:	f000 f9ba 	bl	3df38 <z_spin_lock_valid>
   3dbc4:	b968      	cbnz	r0, 3dbe2 <z_impl_k_sem_take+0x62>
   3dbc6:	235c      	movs	r3, #92	; 0x5c
   3dbc8:	4a2d      	ldr	r2, [pc, #180]	; (3dc80 <z_impl_k_sem_take+0x100>)
   3dbca:	492e      	ldr	r1, [pc, #184]	; (3dc84 <z_impl_k_sem_take+0x104>)
   3dbcc:	4829      	ldr	r0, [pc, #164]	; (3dc74 <z_impl_k_sem_take+0xf4>)
   3dbce:	f003 fbf9 	bl	413c4 <printk>
   3dbd2:	492a      	ldr	r1, [pc, #168]	; (3dc7c <z_impl_k_sem_take+0xfc>)
   3dbd4:	482c      	ldr	r0, [pc, #176]	; (3dc88 <z_impl_k_sem_take+0x108>)
   3dbd6:	f003 fbf5 	bl	413c4 <printk>
   3dbda:	215c      	movs	r1, #92	; 0x5c
   3dbdc:	4828      	ldr	r0, [pc, #160]	; (3dc80 <z_impl_k_sem_take+0x100>)
   3dbde:	f003 fe0e 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3dbe2:	4826      	ldr	r0, [pc, #152]	; (3dc7c <z_impl_k_sem_take+0xfc>)
   3dbe4:	f000 f9c6 	bl	3df74 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   3dbe8:	68a3      	ldr	r3, [r4, #8]
   3dbea:	b1d3      	cbz	r3, 3dc22 <z_impl_k_sem_take+0xa2>
		sem->count--;
   3dbec:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3dbee:	4823      	ldr	r0, [pc, #140]	; (3dc7c <z_impl_k_sem_take+0xfc>)
   3dbf0:	60a3      	str	r3, [r4, #8]
   3dbf2:	f000 f9af 	bl	3df54 <z_spin_unlock_valid>
   3dbf6:	b968      	cbnz	r0, 3dc14 <z_impl_k_sem_take+0x94>
   3dbf8:	2384      	movs	r3, #132	; 0x84
   3dbfa:	4a21      	ldr	r2, [pc, #132]	; (3dc80 <z_impl_k_sem_take+0x100>)
   3dbfc:	4923      	ldr	r1, [pc, #140]	; (3dc8c <z_impl_k_sem_take+0x10c>)
   3dbfe:	481d      	ldr	r0, [pc, #116]	; (3dc74 <z_impl_k_sem_take+0xf4>)
   3dc00:	f003 fbe0 	bl	413c4 <printk>
   3dc04:	491d      	ldr	r1, [pc, #116]	; (3dc7c <z_impl_k_sem_take+0xfc>)
   3dc06:	4822      	ldr	r0, [pc, #136]	; (3dc90 <z_impl_k_sem_take+0x110>)
   3dc08:	f003 fbdc 	bl	413c4 <printk>
   3dc0c:	2184      	movs	r1, #132	; 0x84
   3dc0e:	481c      	ldr	r0, [pc, #112]	; (3dc80 <z_impl_k_sem_take+0x100>)
   3dc10:	f003 fdf5 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3dc14:	f385 8811 	msr	BASEPRI, r5
   3dc18:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   3dc1c:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   3dc1e:	b003      	add	sp, #12
   3dc20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3dc22:	ea56 0307 	orrs.w	r3, r6, r7
   3dc26:	d118      	bne.n	3dc5a <z_impl_k_sem_take+0xda>
   3dc28:	4814      	ldr	r0, [pc, #80]	; (3dc7c <z_impl_k_sem_take+0xfc>)
   3dc2a:	f000 f993 	bl	3df54 <z_spin_unlock_valid>
   3dc2e:	b968      	cbnz	r0, 3dc4c <z_impl_k_sem_take+0xcc>
   3dc30:	2384      	movs	r3, #132	; 0x84
   3dc32:	4a13      	ldr	r2, [pc, #76]	; (3dc80 <z_impl_k_sem_take+0x100>)
   3dc34:	4915      	ldr	r1, [pc, #84]	; (3dc8c <z_impl_k_sem_take+0x10c>)
   3dc36:	480f      	ldr	r0, [pc, #60]	; (3dc74 <z_impl_k_sem_take+0xf4>)
   3dc38:	f003 fbc4 	bl	413c4 <printk>
   3dc3c:	490f      	ldr	r1, [pc, #60]	; (3dc7c <z_impl_k_sem_take+0xfc>)
   3dc3e:	4814      	ldr	r0, [pc, #80]	; (3dc90 <z_impl_k_sem_take+0x110>)
   3dc40:	f003 fbc0 	bl	413c4 <printk>
   3dc44:	2184      	movs	r1, #132	; 0x84
   3dc46:	480e      	ldr	r0, [pc, #56]	; (3dc80 <z_impl_k_sem_take+0x100>)
   3dc48:	f003 fdd9 	bl	417fe <assert_post_action>
   3dc4c:	f385 8811 	msr	BASEPRI, r5
   3dc50:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   3dc54:	f06f 000f 	mvn.w	r0, #15
   3dc58:	e7e1      	b.n	3dc1e <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3dc5a:	4622      	mov	r2, r4
   3dc5c:	4629      	mov	r1, r5
   3dc5e:	e9cd 6700 	strd	r6, r7, [sp]
   3dc62:	4806      	ldr	r0, [pc, #24]	; (3dc7c <z_impl_k_sem_take+0xfc>)
   3dc64:	f7ff fc6c 	bl	3d540 <z_pend_curr>
	return ret;
   3dc68:	e7d9      	b.n	3dc1e <z_impl_k_sem_take+0x9e>
   3dc6a:	bf00      	nop
   3dc6c:	0004f003 	.word	0x0004f003
   3dc70:	0004efe3 	.word	0x0004efe3
   3dc74:	00048156 	.word	0x00048156
   3dc78:	00049046 	.word	0x00049046
   3dc7c:	20025d8c 	.word	0x20025d8c
   3dc80:	000488fa 	.word	0x000488fa
   3dc84:	00048920 	.word	0x00048920
   3dc88:	00048935 	.word	0x00048935
   3dc8c:	0004894d 	.word	0x0004894d
   3dc90:	00048964 	.word	0x00048964

0003dc94 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   3dc94:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   3dc96:	4c08      	ldr	r4, [pc, #32]	; (3dcb8 <k_sys_work_q_init+0x24>)
   3dc98:	f04f 33ff 	mov.w	r3, #4294967295
   3dc9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3dca0:	4620      	mov	r0, r4
   3dca2:	4906      	ldr	r1, [pc, #24]	; (3dcbc <k_sys_work_q_init+0x28>)
   3dca4:	f000 f96e 	bl	3df84 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   3dca8:	4905      	ldr	r1, [pc, #20]	; (3dcc0 <k_sys_work_q_init+0x2c>)
   3dcaa:	f104 0020 	add.w	r0, r4, #32
   3dcae:	f006 fed3 	bl	44a58 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   3dcb2:	2000      	movs	r0, #0
   3dcb4:	bd10      	pop	{r4, pc}
   3dcb6:	bf00      	nop
   3dcb8:	200244f8 	.word	0x200244f8
   3dcbc:	20032978 	.word	0x20032978
   3dcc0:	0004f050 	.word	0x0004f050

0003dcc4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   3dcc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3dcc8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   3dcca:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   3dccc:	2e0f      	cmp	r6, #15
{
   3dcce:	460f      	mov	r7, r1
   3dcd0:	4615      	mov	r5, r2
   3dcd2:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   3dcd4:	d12d      	bne.n	3dd32 <z_setup_new_thread+0x6e>
   3dcd6:	4b23      	ldr	r3, [pc, #140]	; (3dd64 <z_setup_new_thread+0xa0>)
   3dcd8:	4598      	cmp	r8, r3
   3dcda:	d12e      	bne.n	3dd3a <z_setup_new_thread+0x76>
	sys_dlist_init(&w->waitq);
   3dcdc:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   3dce0:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   3dce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   3dce6:	73a6      	strb	r6, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   3dce8:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   3dcea:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   3dcec:	2600      	movs	r6, #0
	thread_base->thread_state = (uint8_t)initial_state;
   3dcee:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3dcf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   3dcf2:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3dcf4:	9302      	str	r3, [sp, #8]
   3dcf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   3dcf8:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3dcfc:	9301      	str	r3, [sp, #4]
   3dcfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   3dd00:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   3dd02:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3dd06:	9300      	str	r3, [sp, #0]
   3dd08:	462a      	mov	r2, r5
   3dd0a:	4643      	mov	r3, r8
   3dd0c:	4639      	mov	r1, r7
   3dd0e:	4620      	mov	r0, r4
	node->prev = NULL;
   3dd10:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->sched_locked = 0U;
   3dd14:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   3dd16:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3dd18:	f7e8 ff82 	bl	26c20 <arch_new_thread>
	if (!_current) {
   3dd1c:	4b12      	ldr	r3, [pc, #72]	; (3dd68 <z_setup_new_thread+0xa4>)
	new_thread->fn_abort = NULL;
   3dd1e:	e9c4 6617 	strd	r6, r6, [r4, #92]	; 0x5c
	if (!_current) {
   3dd22:	689b      	ldr	r3, [r3, #8]
   3dd24:	b103      	cbz	r3, 3dd28 <z_setup_new_thread+0x64>
	new_thread->resource_pool = _current->resource_pool;
   3dd26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   3dd28:	4628      	mov	r0, r5
   3dd2a:	6763      	str	r3, [r4, #116]	; 0x74
   3dd2c:	b004      	add	sp, #16
   3dd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   3dd32:	f106 0310 	add.w	r3, r6, #16
   3dd36:	2b1e      	cmp	r3, #30
   3dd38:	d9d0      	bls.n	3dcdc <z_setup_new_thread+0x18>
   3dd3a:	f240 2313 	movw	r3, #531	; 0x213
   3dd3e:	4a0b      	ldr	r2, [pc, #44]	; (3dd6c <z_setup_new_thread+0xa8>)
   3dd40:	490b      	ldr	r1, [pc, #44]	; (3dd70 <z_setup_new_thread+0xac>)
   3dd42:	480c      	ldr	r0, [pc, #48]	; (3dd74 <z_setup_new_thread+0xb0>)
   3dd44:	f003 fb3e 	bl	413c4 <printk>
   3dd48:	4631      	mov	r1, r6
   3dd4a:	f06f 030f 	mvn.w	r3, #15
   3dd4e:	220e      	movs	r2, #14
   3dd50:	4809      	ldr	r0, [pc, #36]	; (3dd78 <z_setup_new_thread+0xb4>)
   3dd52:	f003 fb37 	bl	413c4 <printk>
   3dd56:	f240 2113 	movw	r1, #531	; 0x213
   3dd5a:	4804      	ldr	r0, [pc, #16]	; (3dd6c <z_setup_new_thread+0xa8>)
   3dd5c:	f003 fd4f 	bl	417fe <assert_post_action>
   3dd60:	e7bc      	b.n	3dcdc <z_setup_new_thread+0x18>
   3dd62:	bf00      	nop
   3dd64:	0003bb81 	.word	0x0003bb81
   3dd68:	20025d48 	.word	0x20025d48
   3dd6c:	0004f059 	.word	0x0004f059
   3dd70:	0004f07c 	.word	0x0004f07c
   3dd74:	00048156 	.word	0x00048156
   3dd78:	0004f0fc 	.word	0x0004f0fc

0003dd7c <z_impl_k_thread_create>:
{
   3dd7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3dd80:	b087      	sub	sp, #28
   3dd82:	4604      	mov	r4, r0
   3dd84:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   3dd88:	460d      	mov	r5, r1
   3dd8a:	4690      	mov	r8, r2
   3dd8c:	4699      	mov	r9, r3
   3dd8e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   3dd92:	b173      	cbz	r3, 3ddb2 <z_impl_k_thread_create+0x36>
   3dd94:	491b      	ldr	r1, [pc, #108]	; (3de04 <z_impl_k_thread_create+0x88>)
   3dd96:	f240 2373 	movw	r3, #627	; 0x273
   3dd9a:	4a1b      	ldr	r2, [pc, #108]	; (3de08 <z_impl_k_thread_create+0x8c>)
   3dd9c:	481b      	ldr	r0, [pc, #108]	; (3de0c <z_impl_k_thread_create+0x90>)
   3dd9e:	f003 fb11 	bl	413c4 <printk>
   3dda2:	481b      	ldr	r0, [pc, #108]	; (3de10 <z_impl_k_thread_create+0x94>)
   3dda4:	f003 fb0e 	bl	413c4 <printk>
   3dda8:	f240 2173 	movw	r1, #627	; 0x273
   3ddac:	4816      	ldr	r0, [pc, #88]	; (3de08 <z_impl_k_thread_create+0x8c>)
   3ddae:	f003 fd26 	bl	417fe <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3ddb2:	2300      	movs	r3, #0
   3ddb4:	9305      	str	r3, [sp, #20]
   3ddb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   3ddb8:	4642      	mov	r2, r8
   3ddba:	9304      	str	r3, [sp, #16]
   3ddbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   3ddbe:	4629      	mov	r1, r5
   3ddc0:	9303      	str	r3, [sp, #12]
   3ddc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3ddc4:	4620      	mov	r0, r4
   3ddc6:	9302      	str	r3, [sp, #8]
   3ddc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3ddca:	9301      	str	r3, [sp, #4]
   3ddcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3ddce:	9300      	str	r3, [sp, #0]
   3ddd0:	464b      	mov	r3, r9
   3ddd2:	f7ff ff77 	bl	3dcc4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   3ddd6:	1c7b      	adds	r3, r7, #1
   3ddd8:	bf08      	it	eq
   3ddda:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   3ddde:	d005      	beq.n	3ddec <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3dde0:	ea56 0307 	orrs.w	r3, r6, r7
   3dde4:	d106      	bne.n	3ddf4 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   3dde6:	4620      	mov	r0, r4
   3dde8:	f7ff f82a 	bl	3ce40 <z_sched_start>
}
   3ddec:	4620      	mov	r0, r4
   3ddee:	b007      	add	sp, #28
   3ddf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3ddf4:	4632      	mov	r2, r6
   3ddf6:	463b      	mov	r3, r7
   3ddf8:	4906      	ldr	r1, [pc, #24]	; (3de14 <z_impl_k_thread_create+0x98>)
   3ddfa:	f104 0018 	add.w	r0, r4, #24
   3ddfe:	f000 fa35 	bl	3e26c <z_add_timeout>
   3de02:	e7f3      	b.n	3ddec <z_impl_k_thread_create+0x70>
   3de04:	0004ee27 	.word	0x0004ee27
   3de08:	0004f059 	.word	0x0004f059
   3de0c:	00048156 	.word	0x00048156
   3de10:	0004f12d 	.word	0x0004f12d
   3de14:	0003cf55 	.word	0x0003cf55

0003de18 <z_init_static_threads>:
{
   3de18:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   3de1c:	4f3f      	ldr	r7, [pc, #252]	; (3df1c <z_init_static_threads+0x104>)
   3de1e:	4d40      	ldr	r5, [pc, #256]	; (3df20 <z_init_static_threads+0x108>)
   3de20:	463e      	mov	r6, r7
   3de22:	f8df 810c 	ldr.w	r8, [pc, #268]	; 3df30 <z_init_static_threads+0x118>
{
   3de26:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   3de28:	42bd      	cmp	r5, r7
   3de2a:	d90e      	bls.n	3de4a <z_init_static_threads+0x32>
   3de2c:	493d      	ldr	r1, [pc, #244]	; (3df24 <z_init_static_threads+0x10c>)
   3de2e:	f240 23e1 	movw	r3, #737	; 0x2e1
   3de32:	4642      	mov	r2, r8
   3de34:	483c      	ldr	r0, [pc, #240]	; (3df28 <z_init_static_threads+0x110>)
   3de36:	f003 fac5 	bl	413c4 <printk>
   3de3a:	483c      	ldr	r0, [pc, #240]	; (3df2c <z_init_static_threads+0x114>)
   3de3c:	f003 fac2 	bl	413c4 <printk>
   3de40:	f240 21e1 	movw	r1, #737	; 0x2e1
   3de44:	4640      	mov	r0, r8
   3de46:	f003 fcda 	bl	417fe <assert_post_action>
   3de4a:	42b5      	cmp	r5, r6
   3de4c:	f105 0430 	add.w	r4, r5, #48	; 0x30
   3de50:	d31f      	bcc.n	3de92 <z_init_static_threads+0x7a>
	k_sched_lock();
   3de52:	f7fe fdcd 	bl	3c9f0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   3de56:	4c32      	ldr	r4, [pc, #200]	; (3df20 <z_init_static_threads+0x108>)
   3de58:	4d35      	ldr	r5, [pc, #212]	; (3df30 <z_init_static_threads+0x118>)
   3de5a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 3df24 <z_init_static_threads+0x10c>
   3de5e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 3df28 <z_init_static_threads+0x110>
   3de62:	42b4      	cmp	r4, r6
   3de64:	d90e      	bls.n	3de84 <z_init_static_threads+0x6c>
   3de66:	4641      	mov	r1, r8
   3de68:	f44f 7340 	mov.w	r3, #768	; 0x300
   3de6c:	462a      	mov	r2, r5
   3de6e:	4648      	mov	r0, r9
   3de70:	f003 faa8 	bl	413c4 <printk>
   3de74:	482d      	ldr	r0, [pc, #180]	; (3df2c <z_init_static_threads+0x114>)
   3de76:	f003 faa5 	bl	413c4 <printk>
   3de7a:	f44f 7140 	mov.w	r1, #768	; 0x300
   3de7e:	4628      	mov	r0, r5
   3de80:	f003 fcbd 	bl	417fe <assert_post_action>
   3de84:	42b4      	cmp	r4, r6
   3de86:	d321      	bcc.n	3decc <z_init_static_threads+0xb4>
}
   3de88:	b006      	add	sp, #24
   3de8a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   3de8e:	f7fe bec5 	b.w	3cc1c <k_sched_unlock>
		z_setup_new_thread(
   3de92:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3de96:	9305      	str	r3, [sp, #20]
   3de98:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3de9c:	9304      	str	r3, [sp, #16]
   3de9e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3dea2:	9303      	str	r3, [sp, #12]
   3dea4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   3dea8:	9302      	str	r3, [sp, #8]
   3deaa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   3deae:	9301      	str	r3, [sp, #4]
   3deb0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   3deb4:	9300      	str	r3, [sp, #0]
   3deb6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3deba:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   3debe:	f7ff ff01 	bl	3dcc4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   3dec2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   3dec6:	65dd      	str	r5, [r3, #92]	; 0x5c
   3dec8:	4625      	mov	r5, r4
   3deca:	e7ad      	b.n	3de28 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   3decc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   3dece:	1c4b      	adds	r3, r1, #1
   3ded0:	d014      	beq.n	3defc <z_init_static_threads+0xe4>
   3ded2:	f240 32e7 	movw	r2, #999	; 0x3e7
   3ded6:	2300      	movs	r3, #0
   3ded8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   3dedc:	4693      	mov	fp, r2
   3dede:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   3dee0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   3dee4:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3dee8:	459c      	cmp	ip, r3
   3deea:	bf08      	it	eq
   3deec:	4593      	cmpeq	fp, r2
   3deee:	4658      	mov	r0, fp
   3def0:	4661      	mov	r1, ip
			schedule_new_thread(thread_data->init_thread,
   3def2:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3def4:	d104      	bne.n	3df00 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   3def6:	4638      	mov	r0, r7
   3def8:	f7fe ffa2 	bl	3ce40 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3defc:	3430      	adds	r4, #48	; 0x30
   3defe:	e7b0      	b.n	3de62 <z_init_static_threads+0x4a>
   3df00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3df04:	2300      	movs	r3, #0
   3df06:	f7de ffd9 	bl	1cebc <__aeabi_uldivmod>
   3df0a:	4602      	mov	r2, r0
   3df0c:	460b      	mov	r3, r1
   3df0e:	f107 0018 	add.w	r0, r7, #24
   3df12:	4908      	ldr	r1, [pc, #32]	; (3df34 <z_init_static_threads+0x11c>)
   3df14:	f000 f9aa 	bl	3e26c <z_add_timeout>
   3df18:	e7f0      	b.n	3defc <z_init_static_threads+0xe4>
   3df1a:	bf00      	nop
   3df1c:	20020b04 	.word	0x20020b04
   3df20:	20020aa4 	.word	0x20020aa4
   3df24:	0004f152 	.word	0x0004f152
   3df28:	00048156 	.word	0x00048156
   3df2c:	000490c4 	.word	0x000490c4
   3df30:	0004f059 	.word	0x0004f059
   3df34:	0003cf55 	.word	0x0003cf55

0003df38 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   3df38:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   3df3a:	b138      	cbz	r0, 3df4c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   3df3c:	4b04      	ldr	r3, [pc, #16]	; (3df50 <z_spin_lock_valid+0x18>)
   3df3e:	f000 0003 	and.w	r0, r0, #3
   3df42:	7d1b      	ldrb	r3, [r3, #20]
   3df44:	1ac0      	subs	r0, r0, r3
   3df46:	bf18      	it	ne
   3df48:	2001      	movne	r0, #1
   3df4a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   3df4c:	2001      	movs	r0, #1
}
   3df4e:	4770      	bx	lr
   3df50:	20025d48 	.word	0x20025d48

0003df54 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   3df54:	4a06      	ldr	r2, [pc, #24]	; (3df70 <z_spin_unlock_valid+0x1c>)
   3df56:	7d11      	ldrb	r1, [r2, #20]
   3df58:	6893      	ldr	r3, [r2, #8]
   3df5a:	6802      	ldr	r2, [r0, #0]
   3df5c:	430b      	orrs	r3, r1
   3df5e:	429a      	cmp	r2, r3
   3df60:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   3df64:	bf06      	itte	eq
   3df66:	6003      	streq	r3, [r0, #0]
	return true;
   3df68:	2001      	moveq	r0, #1
		return false;
   3df6a:	4618      	movne	r0, r3
}
   3df6c:	4770      	bx	lr
   3df6e:	bf00      	nop
   3df70:	20025d48 	.word	0x20025d48

0003df74 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   3df74:	4a02      	ldr	r2, [pc, #8]	; (3df80 <z_spin_lock_set_owner+0xc>)
   3df76:	7d11      	ldrb	r1, [r2, #20]
   3df78:	6893      	ldr	r3, [r2, #8]
   3df7a:	430b      	orrs	r3, r1
   3df7c:	6003      	str	r3, [r0, #0]
}
   3df7e:	4770      	bx	lr
   3df80:	20025d48 	.word	0x20025d48

0003df84 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   3df84:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   3df88:	b08a      	sub	sp, #40	; 0x28
   3df8a:	4604      	mov	r4, r0
   3df8c:	461d      	mov	r5, r3
   3df8e:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   3df92:	f006 fcef 	bl	44974 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   3df96:	f104 0620 	add.w	r6, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3df9a:	2000      	movs	r0, #0
   3df9c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   3dfa0:	f04f 0800 	mov.w	r8, #0
   3dfa4:	f04f 0900 	mov.w	r9, #0
   3dfa8:	e9cd 5003 	strd	r5, r0, [sp, #12]
   3dfac:	e9cd 0001 	strd	r0, r0, [sp, #4]
   3dfb0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   3dfb4:	4630      	mov	r0, r6
   3dfb6:	4b05      	ldr	r3, [pc, #20]	; (3dfcc <k_work_q_start+0x48>)
   3dfb8:	9400      	str	r4, [sp, #0]
   3dfba:	f7ff fedf 	bl	3dd7c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   3dfbe:	4630      	mov	r0, r6
   3dfc0:	4903      	ldr	r1, [pc, #12]	; (3dfd0 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   3dfc2:	b00a      	add	sp, #40	; 0x28
   3dfc4:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   3dfc8:	f006 bd46 	b.w	44a58 <z_impl_k_thread_name_set>
   3dfcc:	000247d1 	.word	0x000247d1
   3dfd0:	0004a300 	.word	0x0004a300

0003dfd4 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   3dfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3dfd8:	4680      	mov	r8, r0
   3dfda:	460d      	mov	r5, r1
   3dfdc:	4616      	mov	r6, r2
   3dfde:	461f      	mov	r7, r3
	__asm__ volatile(
   3dfe0:	f04f 0320 	mov.w	r3, #32
   3dfe4:	f3ef 8911 	mrs	r9, BASEPRI
   3dfe8:	f383 8811 	msr	BASEPRI, r3
   3dfec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3dff0:	4835      	ldr	r0, [pc, #212]	; (3e0c8 <k_delayed_work_submit_to_queue+0xf4>)
   3dff2:	f7ff ffa1 	bl	3df38 <z_spin_lock_valid>
   3dff6:	b968      	cbnz	r0, 3e014 <k_delayed_work_submit_to_queue+0x40>
   3dff8:	235c      	movs	r3, #92	; 0x5c
   3dffa:	4a34      	ldr	r2, [pc, #208]	; (3e0cc <k_delayed_work_submit_to_queue+0xf8>)
   3dffc:	4934      	ldr	r1, [pc, #208]	; (3e0d0 <k_delayed_work_submit_to_queue+0xfc>)
   3dffe:	4835      	ldr	r0, [pc, #212]	; (3e0d4 <k_delayed_work_submit_to_queue+0x100>)
   3e000:	f003 f9e0 	bl	413c4 <printk>
   3e004:	4930      	ldr	r1, [pc, #192]	; (3e0c8 <k_delayed_work_submit_to_queue+0xf4>)
   3e006:	4834      	ldr	r0, [pc, #208]	; (3e0d8 <k_delayed_work_submit_to_queue+0x104>)
   3e008:	f003 f9dc 	bl	413c4 <printk>
   3e00c:	215c      	movs	r1, #92	; 0x5c
   3e00e:	482f      	ldr	r0, [pc, #188]	; (3e0cc <k_delayed_work_submit_to_queue+0xf8>)
   3e010:	f003 fbf5 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3e014:	482c      	ldr	r0, [pc, #176]	; (3e0c8 <k_delayed_work_submit_to_queue+0xf4>)
   3e016:	f7ff ffad 	bl	3df74 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   3e01a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   3e01c:	b30b      	cbz	r3, 3e062 <k_delayed_work_submit_to_queue+0x8e>
   3e01e:	4543      	cmp	r3, r8
   3e020:	d14e      	bne.n	3e0c0 <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   3e022:	4628      	mov	r0, r5
   3e024:	f006 fd36 	bl	44a94 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   3e028:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   3e02c:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   3e02e:	d01b      	beq.n	3e068 <k_delayed_work_submit_to_queue+0x94>
			err = 0;
		} else if (err < 0) {
   3e030:	2800      	cmp	r0, #0
   3e032:	da1a      	bge.n	3e06a <k_delayed_work_submit_to_queue+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e034:	4824      	ldr	r0, [pc, #144]	; (3e0c8 <k_delayed_work_submit_to_queue+0xf4>)
   3e036:	f7ff ff8d 	bl	3df54 <z_spin_unlock_valid>
   3e03a:	b968      	cbnz	r0, 3e058 <k_delayed_work_submit_to_queue+0x84>
   3e03c:	2384      	movs	r3, #132	; 0x84
   3e03e:	4a23      	ldr	r2, [pc, #140]	; (3e0cc <k_delayed_work_submit_to_queue+0xf8>)
   3e040:	4926      	ldr	r1, [pc, #152]	; (3e0dc <k_delayed_work_submit_to_queue+0x108>)
   3e042:	4824      	ldr	r0, [pc, #144]	; (3e0d4 <k_delayed_work_submit_to_queue+0x100>)
   3e044:	f003 f9be 	bl	413c4 <printk>
   3e048:	491f      	ldr	r1, [pc, #124]	; (3e0c8 <k_delayed_work_submit_to_queue+0xf4>)
   3e04a:	4825      	ldr	r0, [pc, #148]	; (3e0e0 <k_delayed_work_submit_to_queue+0x10c>)
   3e04c:	f003 f9ba 	bl	413c4 <printk>
   3e050:	2184      	movs	r1, #132	; 0x84
   3e052:	481e      	ldr	r0, [pc, #120]	; (3e0cc <k_delayed_work_submit_to_queue+0xf8>)
   3e054:	f003 fbd3 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3e058:	f389 8811 	msr	BASEPRI, r9
   3e05c:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   3e060:	e023      	b.n	3e0aa <k_delayed_work_submit_to_queue+0xd6>
	if (work->work_q == work_q) {
   3e062:	f1b8 0f00 	cmp.w	r8, #0
   3e066:	d0dc      	beq.n	3e022 <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
   3e068:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3e06a:	ea56 0307 	orrs.w	r3, r6, r7
	work->work_q = work_q;
   3e06e:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3e072:	d11d      	bne.n	3e0b0 <k_delayed_work_submit_to_queue+0xdc>
   3e074:	4814      	ldr	r0, [pc, #80]	; (3e0c8 <k_delayed_work_submit_to_queue+0xf4>)
   3e076:	f7ff ff6d 	bl	3df54 <z_spin_unlock_valid>
   3e07a:	b968      	cbnz	r0, 3e098 <k_delayed_work_submit_to_queue+0xc4>
   3e07c:	2384      	movs	r3, #132	; 0x84
   3e07e:	4a13      	ldr	r2, [pc, #76]	; (3e0cc <k_delayed_work_submit_to_queue+0xf8>)
   3e080:	4916      	ldr	r1, [pc, #88]	; (3e0dc <k_delayed_work_submit_to_queue+0x108>)
   3e082:	4814      	ldr	r0, [pc, #80]	; (3e0d4 <k_delayed_work_submit_to_queue+0x100>)
   3e084:	f003 f99e 	bl	413c4 <printk>
   3e088:	490f      	ldr	r1, [pc, #60]	; (3e0c8 <k_delayed_work_submit_to_queue+0xf4>)
   3e08a:	4815      	ldr	r0, [pc, #84]	; (3e0e0 <k_delayed_work_submit_to_queue+0x10c>)
   3e08c:	f003 f99a 	bl	413c4 <printk>
   3e090:	2184      	movs	r1, #132	; 0x84
   3e092:	480e      	ldr	r0, [pc, #56]	; (3e0cc <k_delayed_work_submit_to_queue+0xf8>)
   3e094:	f003 fbb3 	bl	417fe <assert_post_action>
   3e098:	f389 8811 	msr	BASEPRI, r9
   3e09c:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   3e0a0:	4629      	mov	r1, r5
   3e0a2:	4640      	mov	r0, r8
   3e0a4:	f006 fcdd 	bl	44a62 <k_work_submit_to_queue>
		return 0;
   3e0a8:	2400      	movs	r4, #0
}
   3e0aa:	4620      	mov	r0, r4
   3e0ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   3e0b0:	4632      	mov	r2, r6
   3e0b2:	463b      	mov	r3, r7
   3e0b4:	490b      	ldr	r1, [pc, #44]	; (3e0e4 <k_delayed_work_submit_to_queue+0x110>)
   3e0b6:	f105 0010 	add.w	r0, r5, #16
   3e0ba:	f000 f8d7 	bl	3e26c <z_add_timeout>
   3e0be:	e7b9      	b.n	3e034 <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
   3e0c0:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   3e0c4:	e7b6      	b.n	3e034 <k_delayed_work_submit_to_queue+0x60>
   3e0c6:	bf00      	nop
   3e0c8:	20025d90 	.word	0x20025d90
   3e0cc:	000488fa 	.word	0x000488fa
   3e0d0:	00048920 	.word	0x00048920
   3e0d4:	00048156 	.word	0x00048156
   3e0d8:	00048935 	.word	0x00048935
   3e0dc:	0004894d 	.word	0x0004894d
   3e0e0:	00048964 	.word	0x00048964
   3e0e4:	00044a8b 	.word	0x00044a8b

0003e0e8 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   3e0e8:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   3e0ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   3e0ec:	4604      	mov	r4, r0
	if (!work->work_q) {
   3e0ee:	2b00      	cmp	r3, #0
   3e0f0:	d038      	beq.n	3e164 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   3e0f2:	f04f 0320 	mov.w	r3, #32
   3e0f6:	f3ef 8511 	mrs	r5, BASEPRI
   3e0fa:	f383 8811 	msr	BASEPRI, r3
   3e0fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e102:	481a      	ldr	r0, [pc, #104]	; (3e16c <k_delayed_work_cancel+0x84>)
   3e104:	f7ff ff18 	bl	3df38 <z_spin_lock_valid>
   3e108:	b968      	cbnz	r0, 3e126 <k_delayed_work_cancel+0x3e>
   3e10a:	235c      	movs	r3, #92	; 0x5c
   3e10c:	4a18      	ldr	r2, [pc, #96]	; (3e170 <k_delayed_work_cancel+0x88>)
   3e10e:	4919      	ldr	r1, [pc, #100]	; (3e174 <k_delayed_work_cancel+0x8c>)
   3e110:	4819      	ldr	r0, [pc, #100]	; (3e178 <k_delayed_work_cancel+0x90>)
   3e112:	f003 f957 	bl	413c4 <printk>
   3e116:	4915      	ldr	r1, [pc, #84]	; (3e16c <k_delayed_work_cancel+0x84>)
   3e118:	4818      	ldr	r0, [pc, #96]	; (3e17c <k_delayed_work_cancel+0x94>)
   3e11a:	f003 f953 	bl	413c4 <printk>
   3e11e:	215c      	movs	r1, #92	; 0x5c
   3e120:	4813      	ldr	r0, [pc, #76]	; (3e170 <k_delayed_work_cancel+0x88>)
   3e122:	f003 fb6c 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3e126:	4811      	ldr	r0, [pc, #68]	; (3e16c <k_delayed_work_cancel+0x84>)
   3e128:	f7ff ff24 	bl	3df74 <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   3e12c:	4620      	mov	r0, r4
   3e12e:	f006 fcb1 	bl	44a94 <work_cancel>
   3e132:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e134:	480d      	ldr	r0, [pc, #52]	; (3e16c <k_delayed_work_cancel+0x84>)
   3e136:	f7ff ff0d 	bl	3df54 <z_spin_unlock_valid>
   3e13a:	b968      	cbnz	r0, 3e158 <k_delayed_work_cancel+0x70>
   3e13c:	2384      	movs	r3, #132	; 0x84
   3e13e:	4a0c      	ldr	r2, [pc, #48]	; (3e170 <k_delayed_work_cancel+0x88>)
   3e140:	490f      	ldr	r1, [pc, #60]	; (3e180 <k_delayed_work_cancel+0x98>)
   3e142:	480d      	ldr	r0, [pc, #52]	; (3e178 <k_delayed_work_cancel+0x90>)
   3e144:	f003 f93e 	bl	413c4 <printk>
   3e148:	4908      	ldr	r1, [pc, #32]	; (3e16c <k_delayed_work_cancel+0x84>)
   3e14a:	480e      	ldr	r0, [pc, #56]	; (3e184 <k_delayed_work_cancel+0x9c>)
   3e14c:	f003 f93a 	bl	413c4 <printk>
   3e150:	2184      	movs	r1, #132	; 0x84
   3e152:	4807      	ldr	r0, [pc, #28]	; (3e170 <k_delayed_work_cancel+0x88>)
   3e154:	f003 fb53 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3e158:	f385 8811 	msr	BASEPRI, r5
   3e15c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   3e160:	4620      	mov	r0, r4
   3e162:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3e164:	f06f 0415 	mvn.w	r4, #21
   3e168:	e7fa      	b.n	3e160 <k_delayed_work_cancel+0x78>
   3e16a:	bf00      	nop
   3e16c:	20025d90 	.word	0x20025d90
   3e170:	000488fa 	.word	0x000488fa
   3e174:	00048920 	.word	0x00048920
   3e178:	00048156 	.word	0x00048156
   3e17c:	00048935 	.word	0x00048935
   3e180:	0004894d 	.word	0x0004894d
   3e184:	00048964 	.word	0x00048964

0003e188 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   3e188:	4b03      	ldr	r3, [pc, #12]	; (3e198 <elapsed+0x10>)
   3e18a:	681b      	ldr	r3, [r3, #0]
   3e18c:	b90b      	cbnz	r3, 3e192 <elapsed+0xa>
   3e18e:	f7e8 bbed 	b.w	2696c <z_clock_elapsed>
}
   3e192:	2000      	movs	r0, #0
   3e194:	4770      	bx	lr
   3e196:	bf00      	nop
   3e198:	20025d94 	.word	0x20025d94

0003e19c <remove_timeout>:
{
   3e19c:	b530      	push	{r4, r5, lr}
   3e19e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3e1a0:	b168      	cbz	r0, 3e1be <remove_timeout+0x22>
   3e1a2:	4a0a      	ldr	r2, [pc, #40]	; (3e1cc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   3e1a4:	6852      	ldr	r2, [r2, #4]
   3e1a6:	4290      	cmp	r0, r2
   3e1a8:	d009      	beq.n	3e1be <remove_timeout+0x22>
	if (next(t) != NULL) {
   3e1aa:	b143      	cbz	r3, 3e1be <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   3e1ac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   3e1b0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   3e1b4:	1912      	adds	r2, r2, r4
   3e1b6:	eb45 0101 	adc.w	r1, r5, r1
   3e1ba:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   3e1be:	6842      	ldr	r2, [r0, #4]
   3e1c0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3e1c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3e1c4:	2300      	movs	r3, #0
	node->prev = NULL;
   3e1c6:	e9c0 3300 	strd	r3, r3, [r0]
}
   3e1ca:	bd30      	pop	{r4, r5, pc}
   3e1cc:	20020754 	.word	0x20020754

0003e1d0 <next_timeout>:
	return list->head == list;
   3e1d0:	4b11      	ldr	r3, [pc, #68]	; (3e218 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   3e1d2:	b510      	push	{r4, lr}
   3e1d4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e1d6:	429c      	cmp	r4, r3
   3e1d8:	bf08      	it	eq
   3e1da:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   3e1dc:	f7ff ffd4 	bl	3e188 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   3e1e0:	b1bc      	cbz	r4, 3e212 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   3e1e2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   3e1e6:	1a12      	subs	r2, r2, r0
   3e1e8:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   3e1ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   3e1f0:	f173 0100 	sbcs.w	r1, r3, #0
   3e1f4:	da0d      	bge.n	3e212 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   3e1f6:	4619      	mov	r1, r3
   3e1f8:	2a00      	cmp	r2, #0
   3e1fa:	f171 0300 	sbcs.w	r3, r1, #0
   3e1fe:	4610      	mov	r0, r2
   3e200:	da00      	bge.n	3e204 <next_timeout+0x34>
   3e202:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   3e204:	4b05      	ldr	r3, [pc, #20]	; (3e21c <next_timeout+0x4c>)
   3e206:	691b      	ldr	r3, [r3, #16]
   3e208:	b113      	cbz	r3, 3e210 <next_timeout+0x40>
   3e20a:	4298      	cmp	r0, r3
   3e20c:	bfa8      	it	ge
   3e20e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3e210:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   3e212:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3e216:	e7f5      	b.n	3e204 <next_timeout+0x34>
   3e218:	20020754 	.word	0x20020754
   3e21c:	20025d48 	.word	0x20025d48

0003e220 <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   3e220:	6803      	ldr	r3, [r0, #0]
{
   3e222:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   3e224:	b1eb      	cbz	r3, 3e262 <timeout_rem+0x42>
	return list->head == list;
   3e226:	4a10      	ldr	r2, [pc, #64]	; (3e268 <timeout_rem+0x48>)
   3e228:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e22a:	4293      	cmp	r3, r2
   3e22c:	d016      	beq.n	3e25c <timeout_rem+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3e22e:	2400      	movs	r4, #0
   3e230:	2500      	movs	r5, #0
   3e232:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   3e234:	b93b      	cbnz	r3, 3e246 <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   3e236:	f7ff ffa7 	bl	3e188 <elapsed>
   3e23a:	1a24      	subs	r4, r4, r0
   3e23c:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   3e240:	4620      	mov	r0, r4
   3e242:	4629      	mov	r1, r5
   3e244:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   3e246:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   3e24a:	18a4      	adds	r4, r4, r2
   3e24c:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   3e250:	4283      	cmp	r3, r0
   3e252:	d0f0      	beq.n	3e236 <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   3e254:	428b      	cmp	r3, r1
   3e256:	d0ee      	beq.n	3e236 <timeout_rem+0x16>
   3e258:	681b      	ldr	r3, [r3, #0]
   3e25a:	e7eb      	b.n	3e234 <timeout_rem+0x14>
   3e25c:	2400      	movs	r4, #0
   3e25e:	2500      	movs	r5, #0
   3e260:	e7e9      	b.n	3e236 <timeout_rem+0x16>
		return 0;
   3e262:	2400      	movs	r4, #0
   3e264:	2500      	movs	r5, #0
   3e266:	e7eb      	b.n	3e240 <timeout_rem+0x20>
   3e268:	20020754 	.word	0x20020754

0003e26c <z_add_timeout>:
{
   3e26c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e270:	9101      	str	r1, [sp, #4]
   3e272:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3e274:	1c4b      	adds	r3, r1, #1
   3e276:	bf08      	it	eq
   3e278:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   3e27c:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3e27e:	f000 80a3 	beq.w	3e3c8 <z_add_timeout+0x15c>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   3e282:	f06f 0301 	mvn.w	r3, #1
   3e286:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   3e28a:	1c54      	adds	r4, r2, #1
   3e28c:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   3e290:	ebb3 0804 	subs.w	r8, r3, r4
   3e294:	eb6b 0905 	sbc.w	r9, fp, r5
   3e298:	f1b8 0f00 	cmp.w	r8, #0
   3e29c:	f179 0300 	sbcs.w	r3, r9, #0
   3e2a0:	db0f      	blt.n	3e2c2 <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   3e2a2:	f7ff ff71 	bl	3e188 <elapsed>
   3e2a6:	f06f 0301 	mvn.w	r3, #1
   3e2aa:	4a4e      	ldr	r2, [pc, #312]	; (3e3e4 <z_add_timeout+0x178>)
   3e2ac:	e9d2 1c00 	ldrd	r1, ip, [r2]
   3e2b0:	1a5b      	subs	r3, r3, r1
   3e2b2:	eb6b 020c 	sbc.w	r2, fp, ip
   3e2b6:	1b1e      	subs	r6, r3, r4
   3e2b8:	eb62 0705 	sbc.w	r7, r2, r5
   3e2bc:	1a34      	subs	r4, r6, r0
   3e2be:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3e2c2:	f8da 3000 	ldr.w	r3, [sl]
   3e2c6:	b163      	cbz	r3, 3e2e2 <z_add_timeout+0x76>
   3e2c8:	4947      	ldr	r1, [pc, #284]	; (3e3e8 <z_add_timeout+0x17c>)
   3e2ca:	2368      	movs	r3, #104	; 0x68
   3e2cc:	4a47      	ldr	r2, [pc, #284]	; (3e3ec <z_add_timeout+0x180>)
   3e2ce:	4848      	ldr	r0, [pc, #288]	; (3e3f0 <z_add_timeout+0x184>)
   3e2d0:	f003 f878 	bl	413c4 <printk>
   3e2d4:	4847      	ldr	r0, [pc, #284]	; (3e3f4 <z_add_timeout+0x188>)
   3e2d6:	f003 f875 	bl	413c4 <printk>
   3e2da:	2168      	movs	r1, #104	; 0x68
   3e2dc:	4843      	ldr	r0, [pc, #268]	; (3e3ec <z_add_timeout+0x180>)
   3e2de:	f003 fa8e 	bl	417fe <assert_post_action>
	to->fn = fn;
   3e2e2:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
   3e2e4:	2c01      	cmp	r4, #1
	to->fn = fn;
   3e2e6:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   3e2ea:	f175 0300 	sbcs.w	r3, r5, #0
   3e2ee:	bfbc      	itt	lt
   3e2f0:	2401      	movlt	r4, #1
   3e2f2:	2500      	movlt	r5, #0
	__asm__ volatile(
   3e2f4:	f04f 0320 	mov.w	r3, #32
   3e2f8:	f3ef 8611 	mrs	r6, BASEPRI
   3e2fc:	f383 8811 	msr	BASEPRI, r3
   3e300:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e304:	483c      	ldr	r0, [pc, #240]	; (3e3f8 <z_add_timeout+0x18c>)
   3e306:	f7ff fe17 	bl	3df38 <z_spin_lock_valid>
   3e30a:	b968      	cbnz	r0, 3e328 <z_add_timeout+0xbc>
   3e30c:	235c      	movs	r3, #92	; 0x5c
   3e30e:	4a3b      	ldr	r2, [pc, #236]	; (3e3fc <z_add_timeout+0x190>)
   3e310:	493b      	ldr	r1, [pc, #236]	; (3e400 <z_add_timeout+0x194>)
   3e312:	4837      	ldr	r0, [pc, #220]	; (3e3f0 <z_add_timeout+0x184>)
   3e314:	f003 f856 	bl	413c4 <printk>
   3e318:	4937      	ldr	r1, [pc, #220]	; (3e3f8 <z_add_timeout+0x18c>)
   3e31a:	483a      	ldr	r0, [pc, #232]	; (3e404 <z_add_timeout+0x198>)
   3e31c:	f003 f852 	bl	413c4 <printk>
   3e320:	215c      	movs	r1, #92	; 0x5c
   3e322:	4836      	ldr	r0, [pc, #216]	; (3e3fc <z_add_timeout+0x190>)
   3e324:	f003 fa6b 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3e328:	4833      	ldr	r0, [pc, #204]	; (3e3f8 <z_add_timeout+0x18c>)
   3e32a:	f7ff fe23 	bl	3df74 <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   3e32e:	f7ff ff2b 	bl	3e188 <elapsed>
	return list->head == list;
   3e332:	4b35      	ldr	r3, [pc, #212]	; (3e408 <z_add_timeout+0x19c>)
   3e334:	1824      	adds	r4, r4, r0
   3e336:	681a      	ldr	r2, [r3, #0]
   3e338:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e33c:	429a      	cmp	r2, r3
   3e33e:	e9ca 4504 	strd	r4, r5, [sl, #16]
   3e342:	d001      	beq.n	3e348 <z_add_timeout+0xdc>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3e344:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   3e346:	b952      	cbnz	r2, 3e35e <z_add_timeout+0xf2>
	node->prev = list->tail;
   3e348:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   3e34a:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   3e34e:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   3e352:	685a      	ldr	r2, [r3, #4]
   3e354:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   3e358:	f8c3 a004 	str.w	sl, [r3, #4]
}
   3e35c:	e014      	b.n	3e388 <z_add_timeout+0x11c>
			if (t->dticks > to->dticks) {
   3e35e:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   3e362:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   3e366:	4544      	cmp	r4, r8
   3e368:	eb75 0109 	sbcs.w	r1, r5, r9
   3e36c:	da2f      	bge.n	3e3ce <z_add_timeout+0x162>
				t->dticks -= to->dticks;
   3e36e:	ebb8 0004 	subs.w	r0, r8, r4
   3e372:	eb69 0105 	sbc.w	r1, r9, r5
   3e376:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   3e37a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   3e37c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   3e380:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   3e384:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   3e388:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e38a:	429a      	cmp	r2, r3
   3e38c:	d006      	beq.n	3e39c <z_add_timeout+0x130>
		if (to == first()) {
   3e38e:	4592      	cmp	sl, r2
   3e390:	d104      	bne.n	3e39c <z_add_timeout+0x130>
			z_clock_set_timeout(next_timeout(), false);
   3e392:	f7ff ff1d 	bl	3e1d0 <next_timeout>
   3e396:	2100      	movs	r1, #0
   3e398:	f7e8 fa82 	bl	268a0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e39c:	4816      	ldr	r0, [pc, #88]	; (3e3f8 <z_add_timeout+0x18c>)
   3e39e:	f7ff fdd9 	bl	3df54 <z_spin_unlock_valid>
   3e3a2:	b968      	cbnz	r0, 3e3c0 <z_add_timeout+0x154>
   3e3a4:	2384      	movs	r3, #132	; 0x84
   3e3a6:	4a15      	ldr	r2, [pc, #84]	; (3e3fc <z_add_timeout+0x190>)
   3e3a8:	4918      	ldr	r1, [pc, #96]	; (3e40c <z_add_timeout+0x1a0>)
   3e3aa:	4811      	ldr	r0, [pc, #68]	; (3e3f0 <z_add_timeout+0x184>)
   3e3ac:	f003 f80a 	bl	413c4 <printk>
   3e3b0:	4911      	ldr	r1, [pc, #68]	; (3e3f8 <z_add_timeout+0x18c>)
   3e3b2:	4817      	ldr	r0, [pc, #92]	; (3e410 <z_add_timeout+0x1a4>)
   3e3b4:	f003 f806 	bl	413c4 <printk>
   3e3b8:	2184      	movs	r1, #132	; 0x84
   3e3ba:	4810      	ldr	r0, [pc, #64]	; (3e3fc <z_add_timeout+0x190>)
   3e3bc:	f003 fa1f 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3e3c0:	f386 8811 	msr	BASEPRI, r6
   3e3c4:	f3bf 8f6f 	isb	sy
}
   3e3c8:	b003      	add	sp, #12
   3e3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   3e3ce:	ebb4 0008 	subs.w	r0, r4, r8
   3e3d2:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   3e3d6:	42ba      	cmp	r2, r7
   3e3d8:	e9ca 0104 	strd	r0, r1, [sl, #16]
   3e3dc:	d0b4      	beq.n	3e348 <z_add_timeout+0xdc>
   3e3de:	6812      	ldr	r2, [r2, #0]
   3e3e0:	e7b1      	b.n	3e346 <z_add_timeout+0xda>
   3e3e2:	bf00      	nop
   3e3e4:	200245e0 	.word	0x200245e0
   3e3e8:	0004f1a3 	.word	0x0004f1a3
   3e3ec:	0004f17f 	.word	0x0004f17f
   3e3f0:	00048156 	.word	0x00048156
   3e3f4:	00049046 	.word	0x00049046
   3e3f8:	20025d98 	.word	0x20025d98
   3e3fc:	000488fa 	.word	0x000488fa
   3e400:	00048920 	.word	0x00048920
   3e404:	00048935 	.word	0x00048935
   3e408:	20020754 	.word	0x20020754
   3e40c:	0004894d 	.word	0x0004894d
   3e410:	00048964 	.word	0x00048964

0003e414 <z_abort_timeout>:
{
   3e414:	b538      	push	{r3, r4, r5, lr}
   3e416:	4604      	mov	r4, r0
	__asm__ volatile(
   3e418:	f04f 0320 	mov.w	r3, #32
   3e41c:	f3ef 8511 	mrs	r5, BASEPRI
   3e420:	f383 8811 	msr	BASEPRI, r3
   3e424:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e428:	481a      	ldr	r0, [pc, #104]	; (3e494 <z_abort_timeout+0x80>)
   3e42a:	f7ff fd85 	bl	3df38 <z_spin_lock_valid>
   3e42e:	b968      	cbnz	r0, 3e44c <z_abort_timeout+0x38>
   3e430:	235c      	movs	r3, #92	; 0x5c
   3e432:	4a19      	ldr	r2, [pc, #100]	; (3e498 <z_abort_timeout+0x84>)
   3e434:	4919      	ldr	r1, [pc, #100]	; (3e49c <z_abort_timeout+0x88>)
   3e436:	481a      	ldr	r0, [pc, #104]	; (3e4a0 <z_abort_timeout+0x8c>)
   3e438:	f002 ffc4 	bl	413c4 <printk>
   3e43c:	4915      	ldr	r1, [pc, #84]	; (3e494 <z_abort_timeout+0x80>)
   3e43e:	4819      	ldr	r0, [pc, #100]	; (3e4a4 <z_abort_timeout+0x90>)
   3e440:	f002 ffc0 	bl	413c4 <printk>
   3e444:	215c      	movs	r1, #92	; 0x5c
   3e446:	4814      	ldr	r0, [pc, #80]	; (3e498 <z_abort_timeout+0x84>)
   3e448:	f003 f9d9 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3e44c:	4811      	ldr	r0, [pc, #68]	; (3e494 <z_abort_timeout+0x80>)
   3e44e:	f7ff fd91 	bl	3df74 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   3e452:	6823      	ldr	r3, [r4, #0]
   3e454:	b1db      	cbz	r3, 3e48e <z_abort_timeout+0x7a>
			remove_timeout(to);
   3e456:	4620      	mov	r0, r4
   3e458:	f7ff fea0 	bl	3e19c <remove_timeout>
			ret = 0;
   3e45c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e45e:	480d      	ldr	r0, [pc, #52]	; (3e494 <z_abort_timeout+0x80>)
   3e460:	f7ff fd78 	bl	3df54 <z_spin_unlock_valid>
   3e464:	b968      	cbnz	r0, 3e482 <z_abort_timeout+0x6e>
   3e466:	2384      	movs	r3, #132	; 0x84
   3e468:	4a0b      	ldr	r2, [pc, #44]	; (3e498 <z_abort_timeout+0x84>)
   3e46a:	490f      	ldr	r1, [pc, #60]	; (3e4a8 <z_abort_timeout+0x94>)
   3e46c:	480c      	ldr	r0, [pc, #48]	; (3e4a0 <z_abort_timeout+0x8c>)
   3e46e:	f002 ffa9 	bl	413c4 <printk>
   3e472:	4908      	ldr	r1, [pc, #32]	; (3e494 <z_abort_timeout+0x80>)
   3e474:	480d      	ldr	r0, [pc, #52]	; (3e4ac <z_abort_timeout+0x98>)
   3e476:	f002 ffa5 	bl	413c4 <printk>
   3e47a:	2184      	movs	r1, #132	; 0x84
   3e47c:	4806      	ldr	r0, [pc, #24]	; (3e498 <z_abort_timeout+0x84>)
   3e47e:	f003 f9be 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3e482:	f385 8811 	msr	BASEPRI, r5
   3e486:	f3bf 8f6f 	isb	sy
}
   3e48a:	4620      	mov	r0, r4
   3e48c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   3e48e:	f06f 0415 	mvn.w	r4, #21
   3e492:	e7e4      	b.n	3e45e <z_abort_timeout+0x4a>
   3e494:	20025d98 	.word	0x20025d98
   3e498:	000488fa 	.word	0x000488fa
   3e49c:	00048920 	.word	0x00048920
   3e4a0:	00048156 	.word	0x00048156
   3e4a4:	00048935 	.word	0x00048935
   3e4a8:	0004894d 	.word	0x0004894d
   3e4ac:	00048964 	.word	0x00048964

0003e4b0 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(struct _timeout *timeout)
{
   3e4b0:	b570      	push	{r4, r5, r6, lr}
   3e4b2:	4604      	mov	r4, r0
	__asm__ volatile(
   3e4b4:	f04f 0320 	mov.w	r3, #32
   3e4b8:	f3ef 8611 	mrs	r6, BASEPRI
   3e4bc:	f383 8811 	msr	BASEPRI, r3
   3e4c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e4c4:	4819      	ldr	r0, [pc, #100]	; (3e52c <z_timeout_remaining+0x7c>)
   3e4c6:	f7ff fd37 	bl	3df38 <z_spin_lock_valid>
   3e4ca:	b968      	cbnz	r0, 3e4e8 <z_timeout_remaining+0x38>
   3e4cc:	235c      	movs	r3, #92	; 0x5c
   3e4ce:	4a18      	ldr	r2, [pc, #96]	; (3e530 <z_timeout_remaining+0x80>)
   3e4d0:	4918      	ldr	r1, [pc, #96]	; (3e534 <z_timeout_remaining+0x84>)
   3e4d2:	4819      	ldr	r0, [pc, #100]	; (3e538 <z_timeout_remaining+0x88>)
   3e4d4:	f002 ff76 	bl	413c4 <printk>
   3e4d8:	4914      	ldr	r1, [pc, #80]	; (3e52c <z_timeout_remaining+0x7c>)
   3e4da:	4818      	ldr	r0, [pc, #96]	; (3e53c <z_timeout_remaining+0x8c>)
   3e4dc:	f002 ff72 	bl	413c4 <printk>
   3e4e0:	215c      	movs	r1, #92	; 0x5c
   3e4e2:	4813      	ldr	r0, [pc, #76]	; (3e530 <z_timeout_remaining+0x80>)
   3e4e4:	f003 f98b 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3e4e8:	4810      	ldr	r0, [pc, #64]	; (3e52c <z_timeout_remaining+0x7c>)
   3e4ea:	f7ff fd43 	bl	3df74 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   3e4ee:	4620      	mov	r0, r4
   3e4f0:	f7ff fe96 	bl	3e220 <timeout_rem>
   3e4f4:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e4f6:	480d      	ldr	r0, [pc, #52]	; (3e52c <z_timeout_remaining+0x7c>)
   3e4f8:	460c      	mov	r4, r1
   3e4fa:	f7ff fd2b 	bl	3df54 <z_spin_unlock_valid>
   3e4fe:	b968      	cbnz	r0, 3e51c <z_timeout_remaining+0x6c>
   3e500:	2384      	movs	r3, #132	; 0x84
   3e502:	4a0b      	ldr	r2, [pc, #44]	; (3e530 <z_timeout_remaining+0x80>)
   3e504:	490e      	ldr	r1, [pc, #56]	; (3e540 <z_timeout_remaining+0x90>)
   3e506:	480c      	ldr	r0, [pc, #48]	; (3e538 <z_timeout_remaining+0x88>)
   3e508:	f002 ff5c 	bl	413c4 <printk>
   3e50c:	4907      	ldr	r1, [pc, #28]	; (3e52c <z_timeout_remaining+0x7c>)
   3e50e:	480d      	ldr	r0, [pc, #52]	; (3e544 <z_timeout_remaining+0x94>)
   3e510:	f002 ff58 	bl	413c4 <printk>
   3e514:	2184      	movs	r1, #132	; 0x84
   3e516:	4806      	ldr	r0, [pc, #24]	; (3e530 <z_timeout_remaining+0x80>)
   3e518:	f003 f971 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3e51c:	f386 8811 	msr	BASEPRI, r6
   3e520:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   3e524:	4628      	mov	r0, r5
   3e526:	4621      	mov	r1, r4
   3e528:	bd70      	pop	{r4, r5, r6, pc}
   3e52a:	bf00      	nop
   3e52c:	20025d98 	.word	0x20025d98
   3e530:	000488fa 	.word	0x000488fa
   3e534:	00048920 	.word	0x00048920
   3e538:	00048156 	.word	0x00048156
   3e53c:	00048935 	.word	0x00048935
   3e540:	0004894d 	.word	0x0004894d
   3e544:	00048964 	.word	0x00048964

0003e548 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   3e548:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3e54a:	f04f 0320 	mov.w	r3, #32
   3e54e:	f3ef 8511 	mrs	r5, BASEPRI
   3e552:	f383 8811 	msr	BASEPRI, r3
   3e556:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e55a:	4818      	ldr	r0, [pc, #96]	; (3e5bc <z_get_next_timeout_expiry+0x74>)
   3e55c:	f7ff fcec 	bl	3df38 <z_spin_lock_valid>
   3e560:	b968      	cbnz	r0, 3e57e <z_get_next_timeout_expiry+0x36>
   3e562:	235c      	movs	r3, #92	; 0x5c
   3e564:	4a16      	ldr	r2, [pc, #88]	; (3e5c0 <z_get_next_timeout_expiry+0x78>)
   3e566:	4917      	ldr	r1, [pc, #92]	; (3e5c4 <z_get_next_timeout_expiry+0x7c>)
   3e568:	4817      	ldr	r0, [pc, #92]	; (3e5c8 <z_get_next_timeout_expiry+0x80>)
   3e56a:	f002 ff2b 	bl	413c4 <printk>
   3e56e:	4913      	ldr	r1, [pc, #76]	; (3e5bc <z_get_next_timeout_expiry+0x74>)
   3e570:	4816      	ldr	r0, [pc, #88]	; (3e5cc <z_get_next_timeout_expiry+0x84>)
   3e572:	f002 ff27 	bl	413c4 <printk>
   3e576:	215c      	movs	r1, #92	; 0x5c
   3e578:	4811      	ldr	r0, [pc, #68]	; (3e5c0 <z_get_next_timeout_expiry+0x78>)
   3e57a:	f003 f940 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3e57e:	480f      	ldr	r0, [pc, #60]	; (3e5bc <z_get_next_timeout_expiry+0x74>)
   3e580:	f7ff fcf8 	bl	3df74 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   3e584:	f7ff fe24 	bl	3e1d0 <next_timeout>
   3e588:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e58a:	480c      	ldr	r0, [pc, #48]	; (3e5bc <z_get_next_timeout_expiry+0x74>)
   3e58c:	f7ff fce2 	bl	3df54 <z_spin_unlock_valid>
   3e590:	b968      	cbnz	r0, 3e5ae <z_get_next_timeout_expiry+0x66>
   3e592:	2384      	movs	r3, #132	; 0x84
   3e594:	4a0a      	ldr	r2, [pc, #40]	; (3e5c0 <z_get_next_timeout_expiry+0x78>)
   3e596:	490e      	ldr	r1, [pc, #56]	; (3e5d0 <z_get_next_timeout_expiry+0x88>)
   3e598:	480b      	ldr	r0, [pc, #44]	; (3e5c8 <z_get_next_timeout_expiry+0x80>)
   3e59a:	f002 ff13 	bl	413c4 <printk>
   3e59e:	4907      	ldr	r1, [pc, #28]	; (3e5bc <z_get_next_timeout_expiry+0x74>)
   3e5a0:	480c      	ldr	r0, [pc, #48]	; (3e5d4 <z_get_next_timeout_expiry+0x8c>)
   3e5a2:	f002 ff0f 	bl	413c4 <printk>
   3e5a6:	2184      	movs	r1, #132	; 0x84
   3e5a8:	4805      	ldr	r0, [pc, #20]	; (3e5c0 <z_get_next_timeout_expiry+0x78>)
   3e5aa:	f003 f928 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3e5ae:	f385 8811 	msr	BASEPRI, r5
   3e5b2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   3e5b6:	4620      	mov	r0, r4
   3e5b8:	bd38      	pop	{r3, r4, r5, pc}
   3e5ba:	bf00      	nop
   3e5bc:	20025d98 	.word	0x20025d98
   3e5c0:	000488fa 	.word	0x000488fa
   3e5c4:	00048920 	.word	0x00048920
   3e5c8:	00048156 	.word	0x00048156
   3e5cc:	00048935 	.word	0x00048935
   3e5d0:	0004894d 	.word	0x0004894d
   3e5d4:	00048964 	.word	0x00048964

0003e5d8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   3e5d8:	b570      	push	{r4, r5, r6, lr}
   3e5da:	4604      	mov	r4, r0
   3e5dc:	460d      	mov	r5, r1
	__asm__ volatile(
   3e5de:	f04f 0320 	mov.w	r3, #32
   3e5e2:	f3ef 8611 	mrs	r6, BASEPRI
   3e5e6:	f383 8811 	msr	BASEPRI, r3
   3e5ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e5ee:	481b      	ldr	r0, [pc, #108]	; (3e65c <z_set_timeout_expiry+0x84>)
   3e5f0:	f7ff fca2 	bl	3df38 <z_spin_lock_valid>
   3e5f4:	b968      	cbnz	r0, 3e612 <z_set_timeout_expiry+0x3a>
   3e5f6:	235c      	movs	r3, #92	; 0x5c
   3e5f8:	4a19      	ldr	r2, [pc, #100]	; (3e660 <z_set_timeout_expiry+0x88>)
   3e5fa:	491a      	ldr	r1, [pc, #104]	; (3e664 <z_set_timeout_expiry+0x8c>)
   3e5fc:	481a      	ldr	r0, [pc, #104]	; (3e668 <z_set_timeout_expiry+0x90>)
   3e5fe:	f002 fee1 	bl	413c4 <printk>
   3e602:	4916      	ldr	r1, [pc, #88]	; (3e65c <z_set_timeout_expiry+0x84>)
   3e604:	4819      	ldr	r0, [pc, #100]	; (3e66c <z_set_timeout_expiry+0x94>)
   3e606:	f002 fedd 	bl	413c4 <printk>
   3e60a:	215c      	movs	r1, #92	; 0x5c
   3e60c:	4814      	ldr	r0, [pc, #80]	; (3e660 <z_set_timeout_expiry+0x88>)
   3e60e:	f003 f8f6 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3e612:	4812      	ldr	r0, [pc, #72]	; (3e65c <z_set_timeout_expiry+0x84>)
   3e614:	f7ff fcae 	bl	3df74 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   3e618:	f7ff fdda 	bl	3e1d0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3e61c:	2801      	cmp	r0, #1
   3e61e:	dd05      	ble.n	3e62c <z_set_timeout_expiry+0x54>
   3e620:	42a0      	cmp	r0, r4
   3e622:	dd03      	ble.n	3e62c <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, is_idle);
   3e624:	4629      	mov	r1, r5
   3e626:	4620      	mov	r0, r4
   3e628:	f7e8 f93a 	bl	268a0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e62c:	480b      	ldr	r0, [pc, #44]	; (3e65c <z_set_timeout_expiry+0x84>)
   3e62e:	f7ff fc91 	bl	3df54 <z_spin_unlock_valid>
   3e632:	b968      	cbnz	r0, 3e650 <z_set_timeout_expiry+0x78>
   3e634:	2384      	movs	r3, #132	; 0x84
   3e636:	4a0a      	ldr	r2, [pc, #40]	; (3e660 <z_set_timeout_expiry+0x88>)
   3e638:	490d      	ldr	r1, [pc, #52]	; (3e670 <z_set_timeout_expiry+0x98>)
   3e63a:	480b      	ldr	r0, [pc, #44]	; (3e668 <z_set_timeout_expiry+0x90>)
   3e63c:	f002 fec2 	bl	413c4 <printk>
   3e640:	4906      	ldr	r1, [pc, #24]	; (3e65c <z_set_timeout_expiry+0x84>)
   3e642:	480c      	ldr	r0, [pc, #48]	; (3e674 <z_set_timeout_expiry+0x9c>)
   3e644:	f002 febe 	bl	413c4 <printk>
   3e648:	2184      	movs	r1, #132	; 0x84
   3e64a:	4805      	ldr	r0, [pc, #20]	; (3e660 <z_set_timeout_expiry+0x88>)
   3e64c:	f003 f8d7 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3e650:	f386 8811 	msr	BASEPRI, r6
   3e654:	f3bf 8f6f 	isb	sy
		}
	}
}
   3e658:	bd70      	pop	{r4, r5, r6, pc}
   3e65a:	bf00      	nop
   3e65c:	20025d98 	.word	0x20025d98
   3e660:	000488fa 	.word	0x000488fa
   3e664:	00048920 	.word	0x00048920
   3e668:	00048156 	.word	0x00048156
   3e66c:	00048935 	.word	0x00048935
   3e670:	0004894d 	.word	0x0004894d
   3e674:	00048964 	.word	0x00048964

0003e678 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   3e678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e67c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3e67e:	f7fe fd11 	bl	3d0a4 <z_time_slice>
	__asm__ volatile(
   3e682:	f04f 0320 	mov.w	r3, #32
   3e686:	f3ef 8711 	mrs	r7, BASEPRI
   3e68a:	f383 8811 	msr	BASEPRI, r3
   3e68e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e692:	4854      	ldr	r0, [pc, #336]	; (3e7e4 <z_clock_announce+0x16c>)
   3e694:	f7ff fc50 	bl	3df38 <z_spin_lock_valid>
   3e698:	b968      	cbnz	r0, 3e6b6 <z_clock_announce+0x3e>
   3e69a:	235c      	movs	r3, #92	; 0x5c
   3e69c:	4a52      	ldr	r2, [pc, #328]	; (3e7e8 <z_clock_announce+0x170>)
   3e69e:	4953      	ldr	r1, [pc, #332]	; (3e7ec <z_clock_announce+0x174>)
   3e6a0:	4853      	ldr	r0, [pc, #332]	; (3e7f0 <z_clock_announce+0x178>)
   3e6a2:	f002 fe8f 	bl	413c4 <printk>
   3e6a6:	494f      	ldr	r1, [pc, #316]	; (3e7e4 <z_clock_announce+0x16c>)
   3e6a8:	4852      	ldr	r0, [pc, #328]	; (3e7f4 <z_clock_announce+0x17c>)
   3e6aa:	f002 fe8b 	bl	413c4 <printk>
   3e6ae:	215c      	movs	r1, #92	; 0x5c
   3e6b0:	484d      	ldr	r0, [pc, #308]	; (3e7e8 <z_clock_announce+0x170>)
   3e6b2:	f003 f8a4 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3e6b6:	4e50      	ldr	r6, [pc, #320]	; (3e7f8 <z_clock_announce+0x180>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   3e6b8:	4d50      	ldr	r5, [pc, #320]	; (3e7fc <z_clock_announce+0x184>)
   3e6ba:	46b3      	mov	fp, r6
   3e6bc:	4849      	ldr	r0, [pc, #292]	; (3e7e4 <z_clock_announce+0x16c>)
	return list->head == list;
   3e6be:	f8df a148 	ldr.w	sl, [pc, #328]	; 3e808 <z_clock_announce+0x190>
   3e6c2:	f7ff fc57 	bl	3df74 <z_spin_lock_set_owner>
   3e6c6:	602c      	str	r4, [r5, #0]
   3e6c8:	f8d5 c000 	ldr.w	ip, [r5]
   3e6cc:	e9d6 2300 	ldrd	r2, r3, [r6]
   3e6d0:	e9cd 2300 	strd	r2, r3, [sp]
   3e6d4:	4662      	mov	r2, ip
   3e6d6:	f8da 4000 	ldr.w	r4, [sl]
   3e6da:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e6dc:	4554      	cmp	r4, sl
   3e6de:	46e0      	mov	r8, ip
   3e6e0:	4699      	mov	r9, r3
   3e6e2:	d00c      	beq.n	3e6fe <z_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   3e6e4:	b15c      	cbz	r4, 3e6fe <z_clock_announce+0x86>
   3e6e6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   3e6ea:	458c      	cmp	ip, r1
   3e6ec:	eb79 0302 	sbcs.w	r3, r9, r2
   3e6f0:	da2e      	bge.n	3e750 <z_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   3e6f2:	ebb1 000c 	subs.w	r0, r1, ip
   3e6f6:	eb62 0109 	sbc.w	r1, r2, r9
   3e6fa:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   3e6fe:	464b      	mov	r3, r9
	announce_remaining = 0;
   3e700:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   3e702:	9a00      	ldr	r2, [sp, #0]
   3e704:	9901      	ldr	r1, [sp, #4]
   3e706:	eb18 0202 	adds.w	r2, r8, r2
   3e70a:	eb43 0101 	adc.w	r1, r3, r1
   3e70e:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   3e712:	602c      	str	r4, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   3e714:	f7ff fd5c 	bl	3e1d0 <next_timeout>
   3e718:	4621      	mov	r1, r4
   3e71a:	f7e8 f8c1 	bl	268a0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e71e:	4831      	ldr	r0, [pc, #196]	; (3e7e4 <z_clock_announce+0x16c>)
   3e720:	f7ff fc18 	bl	3df54 <z_spin_unlock_valid>
   3e724:	b968      	cbnz	r0, 3e742 <z_clock_announce+0xca>
   3e726:	2384      	movs	r3, #132	; 0x84
   3e728:	4a2f      	ldr	r2, [pc, #188]	; (3e7e8 <z_clock_announce+0x170>)
   3e72a:	4935      	ldr	r1, [pc, #212]	; (3e800 <z_clock_announce+0x188>)
   3e72c:	4830      	ldr	r0, [pc, #192]	; (3e7f0 <z_clock_announce+0x178>)
   3e72e:	f002 fe49 	bl	413c4 <printk>
   3e732:	492c      	ldr	r1, [pc, #176]	; (3e7e4 <z_clock_announce+0x16c>)
   3e734:	4833      	ldr	r0, [pc, #204]	; (3e804 <z_clock_announce+0x18c>)
   3e736:	f002 fe45 	bl	413c4 <printk>
   3e73a:	2184      	movs	r1, #132	; 0x84
   3e73c:	482a      	ldr	r0, [pc, #168]	; (3e7e8 <z_clock_announce+0x170>)
   3e73e:	f003 f85e 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3e742:	f387 8811 	msr	BASEPRI, r7
   3e746:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3e74a:	b003      	add	sp, #12
   3e74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   3e750:	2200      	movs	r2, #0
		curr_tick += dt;
   3e752:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   3e756:	2300      	movs	r3, #0
		curr_tick += dt;
   3e758:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   3e75c:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   3e760:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   3e764:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   3e766:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   3e76a:	4620      	mov	r0, r4
		curr_tick += dt;
   3e76c:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   3e770:	f7ff fd14 	bl	3e19c <remove_timeout>
   3e774:	481b      	ldr	r0, [pc, #108]	; (3e7e4 <z_clock_announce+0x16c>)
   3e776:	f7ff fbed 	bl	3df54 <z_spin_unlock_valid>
   3e77a:	b968      	cbnz	r0, 3e798 <z_clock_announce+0x120>
   3e77c:	2384      	movs	r3, #132	; 0x84
   3e77e:	4a1a      	ldr	r2, [pc, #104]	; (3e7e8 <z_clock_announce+0x170>)
   3e780:	491f      	ldr	r1, [pc, #124]	; (3e800 <z_clock_announce+0x188>)
   3e782:	481b      	ldr	r0, [pc, #108]	; (3e7f0 <z_clock_announce+0x178>)
   3e784:	f002 fe1e 	bl	413c4 <printk>
   3e788:	4916      	ldr	r1, [pc, #88]	; (3e7e4 <z_clock_announce+0x16c>)
   3e78a:	481e      	ldr	r0, [pc, #120]	; (3e804 <z_clock_announce+0x18c>)
   3e78c:	f002 fe1a 	bl	413c4 <printk>
   3e790:	2184      	movs	r1, #132	; 0x84
   3e792:	4815      	ldr	r0, [pc, #84]	; (3e7e8 <z_clock_announce+0x170>)
   3e794:	f003 f833 	bl	417fe <assert_post_action>
   3e798:	f387 8811 	msr	BASEPRI, r7
   3e79c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3e7a0:	4620      	mov	r0, r4
   3e7a2:	68a3      	ldr	r3, [r4, #8]
   3e7a4:	4798      	blx	r3
	__asm__ volatile(
   3e7a6:	f04f 0320 	mov.w	r3, #32
   3e7aa:	f3ef 8711 	mrs	r7, BASEPRI
   3e7ae:	f383 8811 	msr	BASEPRI, r3
   3e7b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e7b6:	480b      	ldr	r0, [pc, #44]	; (3e7e4 <z_clock_announce+0x16c>)
   3e7b8:	f7ff fbbe 	bl	3df38 <z_spin_lock_valid>
   3e7bc:	b968      	cbnz	r0, 3e7da <z_clock_announce+0x162>
   3e7be:	235c      	movs	r3, #92	; 0x5c
   3e7c0:	4a09      	ldr	r2, [pc, #36]	; (3e7e8 <z_clock_announce+0x170>)
   3e7c2:	490a      	ldr	r1, [pc, #40]	; (3e7ec <z_clock_announce+0x174>)
   3e7c4:	480a      	ldr	r0, [pc, #40]	; (3e7f0 <z_clock_announce+0x178>)
   3e7c6:	f002 fdfd 	bl	413c4 <printk>
   3e7ca:	4906      	ldr	r1, [pc, #24]	; (3e7e4 <z_clock_announce+0x16c>)
   3e7cc:	4809      	ldr	r0, [pc, #36]	; (3e7f4 <z_clock_announce+0x17c>)
   3e7ce:	f002 fdf9 	bl	413c4 <printk>
   3e7d2:	215c      	movs	r1, #92	; 0x5c
   3e7d4:	4804      	ldr	r0, [pc, #16]	; (3e7e8 <z_clock_announce+0x170>)
   3e7d6:	f003 f812 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3e7da:	4802      	ldr	r0, [pc, #8]	; (3e7e4 <z_clock_announce+0x16c>)
   3e7dc:	f7ff fbca 	bl	3df74 <z_spin_lock_set_owner>
	return k;
   3e7e0:	e772      	b.n	3e6c8 <z_clock_announce+0x50>
   3e7e2:	bf00      	nop
   3e7e4:	20025d98 	.word	0x20025d98
   3e7e8:	000488fa 	.word	0x000488fa
   3e7ec:	00048920 	.word	0x00048920
   3e7f0:	00048156 	.word	0x00048156
   3e7f4:	00048935 	.word	0x00048935
   3e7f8:	200245e0 	.word	0x200245e0
   3e7fc:	20025d94 	.word	0x20025d94
   3e800:	0004894d 	.word	0x0004894d
   3e804:	00048964 	.word	0x00048964
   3e808:	20020754 	.word	0x20020754

0003e80c <z_tick_get>:

int64_t z_tick_get(void)
{
   3e80c:	b570      	push	{r4, r5, r6, lr}
   3e80e:	f04f 0320 	mov.w	r3, #32
   3e812:	f3ef 8611 	mrs	r6, BASEPRI
   3e816:	f383 8811 	msr	BASEPRI, r3
   3e81a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e81e:	481b      	ldr	r0, [pc, #108]	; (3e88c <z_tick_get+0x80>)
   3e820:	f7ff fb8a 	bl	3df38 <z_spin_lock_valid>
   3e824:	b968      	cbnz	r0, 3e842 <z_tick_get+0x36>
   3e826:	235c      	movs	r3, #92	; 0x5c
   3e828:	4a19      	ldr	r2, [pc, #100]	; (3e890 <z_tick_get+0x84>)
   3e82a:	491a      	ldr	r1, [pc, #104]	; (3e894 <z_tick_get+0x88>)
   3e82c:	481a      	ldr	r0, [pc, #104]	; (3e898 <z_tick_get+0x8c>)
   3e82e:	f002 fdc9 	bl	413c4 <printk>
   3e832:	4916      	ldr	r1, [pc, #88]	; (3e88c <z_tick_get+0x80>)
   3e834:	4819      	ldr	r0, [pc, #100]	; (3e89c <z_tick_get+0x90>)
   3e836:	f002 fdc5 	bl	413c4 <printk>
   3e83a:	215c      	movs	r1, #92	; 0x5c
   3e83c:	4814      	ldr	r0, [pc, #80]	; (3e890 <z_tick_get+0x84>)
   3e83e:	f002 ffde 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3e842:	4812      	ldr	r0, [pc, #72]	; (3e88c <z_tick_get+0x80>)
   3e844:	f7ff fb96 	bl	3df74 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   3e848:	f7e8 f890 	bl	2696c <z_clock_elapsed>
   3e84c:	4b14      	ldr	r3, [pc, #80]	; (3e8a0 <z_tick_get+0x94>)
   3e84e:	e9d3 4500 	ldrd	r4, r5, [r3]
   3e852:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e854:	480d      	ldr	r0, [pc, #52]	; (3e88c <z_tick_get+0x80>)
   3e856:	f145 0500 	adc.w	r5, r5, #0
   3e85a:	f7ff fb7b 	bl	3df54 <z_spin_unlock_valid>
   3e85e:	b968      	cbnz	r0, 3e87c <z_tick_get+0x70>
   3e860:	2384      	movs	r3, #132	; 0x84
   3e862:	4a0b      	ldr	r2, [pc, #44]	; (3e890 <z_tick_get+0x84>)
   3e864:	490f      	ldr	r1, [pc, #60]	; (3e8a4 <z_tick_get+0x98>)
   3e866:	480c      	ldr	r0, [pc, #48]	; (3e898 <z_tick_get+0x8c>)
   3e868:	f002 fdac 	bl	413c4 <printk>
   3e86c:	4907      	ldr	r1, [pc, #28]	; (3e88c <z_tick_get+0x80>)
   3e86e:	480e      	ldr	r0, [pc, #56]	; (3e8a8 <z_tick_get+0x9c>)
   3e870:	f002 fda8 	bl	413c4 <printk>
   3e874:	2184      	movs	r1, #132	; 0x84
   3e876:	4806      	ldr	r0, [pc, #24]	; (3e890 <z_tick_get+0x84>)
   3e878:	f002 ffc1 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3e87c:	f386 8811 	msr	BASEPRI, r6
   3e880:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   3e884:	4620      	mov	r0, r4
   3e886:	4629      	mov	r1, r5
   3e888:	bd70      	pop	{r4, r5, r6, pc}
   3e88a:	bf00      	nop
   3e88c:	20025d98 	.word	0x20025d98
   3e890:	000488fa 	.word	0x000488fa
   3e894:	00048920 	.word	0x00048920
   3e898:	00048156 	.word	0x00048156
   3e89c:	00048935 	.word	0x00048935
   3e8a0:	200245e0 	.word	0x200245e0
   3e8a4:	0004894d 	.word	0x0004894d
   3e8a8:	00048964 	.word	0x00048964

0003e8ac <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, uint32_t state)
{
   3e8ac:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   3e8ae:	6883      	ldr	r3, [r0, #8]
{
   3e8b0:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   3e8b2:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   3e8b4:	b964      	cbnz	r4, 3e8d0 <k_poll_poller_cb+0x24>
   3e8b6:	4919      	ldr	r1, [pc, #100]	; (3e91c <k_poll_poller_cb+0x70>)
   3e8b8:	23df      	movs	r3, #223	; 0xdf
   3e8ba:	4a19      	ldr	r2, [pc, #100]	; (3e920 <k_poll_poller_cb+0x74>)
   3e8bc:	4819      	ldr	r0, [pc, #100]	; (3e924 <k_poll_poller_cb+0x78>)
   3e8be:	f002 fd81 	bl	413c4 <printk>
   3e8c2:	4819      	ldr	r0, [pc, #100]	; (3e928 <k_poll_poller_cb+0x7c>)
   3e8c4:	f002 fd7e 	bl	413c4 <printk>
   3e8c8:	21df      	movs	r1, #223	; 0xdf
   3e8ca:	4815      	ldr	r0, [pc, #84]	; (3e920 <k_poll_poller_cb+0x74>)
   3e8cc:	f002 ff97 	bl	417fe <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   3e8d0:	7b63      	ldrb	r3, [r4, #13]
   3e8d2:	079a      	lsls	r2, r3, #30
   3e8d4:	d515      	bpl.n	3e902 <k_poll_poller_cb+0x56>
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   3e8d6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   3e8da:	f04f 31ff 	mov.w	r1, #4294967295
   3e8de:	f06f 0001 	mvn.w	r0, #1
   3e8e2:	428b      	cmp	r3, r1
   3e8e4:	bf08      	it	eq
   3e8e6:	4282      	cmpeq	r2, r0
   3e8e8:	d014      	beq.n	3e914 <k_poll_poller_cb+0x68>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   3e8ea:	4620      	mov	r0, r4
   3e8ec:	f7fe f926 	bl	3cb3c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3e8f0:	2d08      	cmp	r5, #8
   3e8f2:	bf0c      	ite	eq
   3e8f4:	f06f 0303 	mvneq.w	r3, #3
   3e8f8:	2300      	movne	r3, #0
   3e8fa:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3e8fc:	7b63      	ldrb	r3, [r4, #13]
   3e8fe:	06db      	lsls	r3, r3, #27
   3e900:	d001      	beq.n	3e906 <k_poll_poller_cb+0x5a>
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
		return 0;
   3e902:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   3e904:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   3e906:	69a5      	ldr	r5, [r4, #24]
   3e908:	2d00      	cmp	r5, #0
   3e90a:	d1fa      	bne.n	3e902 <k_poll_poller_cb+0x56>
	z_ready_thread(thread);
   3e90c:	4620      	mov	r0, r4
   3e90e:	f7fe fa4f 	bl	3cdb0 <z_ready_thread>
	return 0;
   3e912:	e7f6      	b.n	3e902 <k_poll_poller_cb+0x56>
		return -EAGAIN;
   3e914:	f06f 000a 	mvn.w	r0, #10
   3e918:	e7f4      	b.n	3e904 <k_poll_poller_cb+0x58>
   3e91a:	bf00      	nop
   3e91c:	0004f1e4 	.word	0x0004f1e4
   3e920:	0004f1c3 	.word	0x0004f1c3
   3e924:	00048156 	.word	0x00048156
   3e928:	0004f1fa 	.word	0x0004f1fa

0003e92c <clear_event_registrations>:
{
   3e92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e930:	2414      	movs	r4, #20
   3e932:	4680      	mov	r8, r0
   3e934:	4616      	mov	r6, r2
	while (num_events--) {
   3e936:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   3e93a:	4d48      	ldr	r5, [pc, #288]	; (3ea5c <clear_event_registrations+0x130>)
   3e93c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 3ea98 <clear_event_registrations+0x16c>
   3e940:	4f47      	ldr	r7, [pc, #284]	; (3ea60 <clear_event_registrations+0x134>)
	while (num_events--) {
   3e942:	4544      	cmp	r4, r8
   3e944:	d101      	bne.n	3e94a <clear_event_registrations+0x1e>
}
   3e946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3e94a:	2300      	movs	r3, #0
   3e94c:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   3e950:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3e954:	f003 030f 	and.w	r3, r3, #15
   3e958:	2b04      	cmp	r3, #4
   3e95a:	d83d      	bhi.n	3e9d8 <clear_event_registrations+0xac>
   3e95c:	e8df f003 	tbb	[pc, r3]
   3e960:	3c032d49 	.word	0x3c032d49
   3e964:	1e          	.byte	0x1e
   3e965:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3e966:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3e96a:	b963      	cbnz	r3, 3e986 <clear_event_registrations+0x5a>
   3e96c:	493d      	ldr	r1, [pc, #244]	; (3ea64 <clear_event_registrations+0x138>)
   3e96e:	2395      	movs	r3, #149	; 0x95
   3e970:	462a      	mov	r2, r5
   3e972:	4638      	mov	r0, r7
   3e974:	f002 fd26 	bl	413c4 <printk>
   3e978:	483b      	ldr	r0, [pc, #236]	; (3ea68 <clear_event_registrations+0x13c>)
   3e97a:	f002 fd23 	bl	413c4 <printk>
   3e97e:	2195      	movs	r1, #149	; 0x95
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3e980:	4628      	mov	r0, r5
   3e982:	f002 ff3c 	bl	417fe <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   3e986:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3e98a:	b393      	cbz	r3, 3e9f2 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   3e98c:	f854 2c10 	ldr.w	r2, [r4, #-16]
   3e990:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3e992:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3e994:	2300      	movs	r3, #0
	node->prev = NULL;
   3e996:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   3e99a:	e02a      	b.n	3e9f2 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3e99c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3e9a0:	2b00      	cmp	r3, #0
   3e9a2:	d1f0      	bne.n	3e986 <clear_event_registrations+0x5a>
   3e9a4:	4931      	ldr	r1, [pc, #196]	; (3ea6c <clear_event_registrations+0x140>)
   3e9a6:	2399      	movs	r3, #153	; 0x99
   3e9a8:	462a      	mov	r2, r5
   3e9aa:	4638      	mov	r0, r7
   3e9ac:	f002 fd0a 	bl	413c4 <printk>
   3e9b0:	482f      	ldr	r0, [pc, #188]	; (3ea70 <clear_event_registrations+0x144>)
   3e9b2:	f002 fd07 	bl	413c4 <printk>
   3e9b6:	2199      	movs	r1, #153	; 0x99
   3e9b8:	e7e2      	b.n	3e980 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3e9ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3e9be:	2b00      	cmp	r3, #0
   3e9c0:	d1e1      	bne.n	3e986 <clear_event_registrations+0x5a>
   3e9c2:	492c      	ldr	r1, [pc, #176]	; (3ea74 <clear_event_registrations+0x148>)
   3e9c4:	239d      	movs	r3, #157	; 0x9d
   3e9c6:	462a      	mov	r2, r5
   3e9c8:	4638      	mov	r0, r7
   3e9ca:	f002 fcfb 	bl	413c4 <printk>
   3e9ce:	482a      	ldr	r0, [pc, #168]	; (3ea78 <clear_event_registrations+0x14c>)
   3e9d0:	f002 fcf8 	bl	413c4 <printk>
   3e9d4:	219d      	movs	r1, #157	; 0x9d
   3e9d6:	e7d3      	b.n	3e980 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   3e9d8:	4649      	mov	r1, r9
   3e9da:	23a4      	movs	r3, #164	; 0xa4
   3e9dc:	462a      	mov	r2, r5
   3e9de:	4638      	mov	r0, r7
   3e9e0:	f002 fcf0 	bl	413c4 <printk>
   3e9e4:	4825      	ldr	r0, [pc, #148]	; (3ea7c <clear_event_registrations+0x150>)
   3e9e6:	f002 fced 	bl	413c4 <printk>
   3e9ea:	21a4      	movs	r1, #164	; 0xa4
   3e9ec:	4628      	mov	r0, r5
   3e9ee:	f002 ff06 	bl	417fe <assert_post_action>
   3e9f2:	4823      	ldr	r0, [pc, #140]	; (3ea80 <clear_event_registrations+0x154>)
   3e9f4:	f7ff faae 	bl	3df54 <z_spin_unlock_valid>
   3e9f8:	b968      	cbnz	r0, 3ea16 <clear_event_registrations+0xea>
   3e9fa:	2384      	movs	r3, #132	; 0x84
   3e9fc:	4638      	mov	r0, r7
   3e9fe:	4a21      	ldr	r2, [pc, #132]	; (3ea84 <clear_event_registrations+0x158>)
   3ea00:	4921      	ldr	r1, [pc, #132]	; (3ea88 <clear_event_registrations+0x15c>)
   3ea02:	f002 fcdf 	bl	413c4 <printk>
   3ea06:	491e      	ldr	r1, [pc, #120]	; (3ea80 <clear_event_registrations+0x154>)
   3ea08:	4820      	ldr	r0, [pc, #128]	; (3ea8c <clear_event_registrations+0x160>)
   3ea0a:	f002 fcdb 	bl	413c4 <printk>
   3ea0e:	2184      	movs	r1, #132	; 0x84
   3ea10:	481c      	ldr	r0, [pc, #112]	; (3ea84 <clear_event_registrations+0x158>)
   3ea12:	f002 fef4 	bl	417fe <assert_post_action>
   3ea16:	f386 8811 	msr	BASEPRI, r6
   3ea1a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3ea1e:	f04f 0320 	mov.w	r3, #32
   3ea22:	f3ef 8611 	mrs	r6, BASEPRI
   3ea26:	f383 8811 	msr	BASEPRI, r3
   3ea2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ea2e:	4814      	ldr	r0, [pc, #80]	; (3ea80 <clear_event_registrations+0x154>)
   3ea30:	f7ff fa82 	bl	3df38 <z_spin_lock_valid>
   3ea34:	b968      	cbnz	r0, 3ea52 <clear_event_registrations+0x126>
   3ea36:	235c      	movs	r3, #92	; 0x5c
   3ea38:	4638      	mov	r0, r7
   3ea3a:	4a12      	ldr	r2, [pc, #72]	; (3ea84 <clear_event_registrations+0x158>)
   3ea3c:	4914      	ldr	r1, [pc, #80]	; (3ea90 <clear_event_registrations+0x164>)
   3ea3e:	f002 fcc1 	bl	413c4 <printk>
   3ea42:	490f      	ldr	r1, [pc, #60]	; (3ea80 <clear_event_registrations+0x154>)
   3ea44:	4813      	ldr	r0, [pc, #76]	; (3ea94 <clear_event_registrations+0x168>)
   3ea46:	f002 fcbd 	bl	413c4 <printk>
   3ea4a:	215c      	movs	r1, #92	; 0x5c
   3ea4c:	480d      	ldr	r0, [pc, #52]	; (3ea84 <clear_event_registrations+0x158>)
   3ea4e:	f002 fed6 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3ea52:	480b      	ldr	r0, [pc, #44]	; (3ea80 <clear_event_registrations+0x154>)
   3ea54:	f7ff fa8e 	bl	3df74 <z_spin_lock_set_owner>
	return k;
   3ea58:	3c14      	subs	r4, #20
   3ea5a:	e772      	b.n	3e942 <clear_event_registrations+0x16>
   3ea5c:	0004f1c3 	.word	0x0004f1c3
   3ea60:	00048156 	.word	0x00048156
   3ea64:	0004f219 	.word	0x0004f219
   3ea68:	0004f233 	.word	0x0004f233
   3ea6c:	0004f248 	.word	0x0004f248
   3ea70:	0004f264 	.word	0x0004f264
   3ea74:	0004f275 	.word	0x0004f275
   3ea78:	0004f292 	.word	0x0004f292
   3ea7c:	0004f2a9 	.word	0x0004f2a9
   3ea80:	20025d9c 	.word	0x20025d9c
   3ea84:	000488fa 	.word	0x000488fa
   3ea88:	0004894d 	.word	0x0004894d
   3ea8c:	00048964 	.word	0x00048964
   3ea90:	00048920 	.word	0x00048920
   3ea94:	00048935 	.word	0x00048935
   3ea98:	0004ef58 	.word	0x0004ef58

0003ea9c <register_events>:
{
   3ea9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   3eaa0:	2700      	movs	r7, #0
{
   3eaa2:	4615      	mov	r5, r2
   3eaa4:	4604      	mov	r4, r0
	int events_registered = 0;
   3eaa6:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3eaa8:	4e6a      	ldr	r6, [pc, #424]	; (3ec54 <register_events+0x1b8>)
   3eaaa:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 3ec90 <register_events+0x1f4>
   3eaae:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 3ec94 <register_events+0x1f8>
{
   3eab2:	9100      	str	r1, [sp, #0]
   3eab4:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   3eab6:	9b00      	ldr	r3, [sp, #0]
   3eab8:	429f      	cmp	r7, r3
   3eaba:	db03      	blt.n	3eac4 <register_events+0x28>
}
   3eabc:	4648      	mov	r0, r9
   3eabe:	b003      	add	sp, #12
   3eac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eac4:	f04f 0320 	mov.w	r3, #32
   3eac8:	f3ef 8b11 	mrs	fp, BASEPRI
   3eacc:	f383 8811 	msr	BASEPRI, r3
   3ead0:	f3bf 8f6f 	isb	sy
   3ead4:	4630      	mov	r0, r6
   3ead6:	f7ff fa2f 	bl	3df38 <z_spin_lock_valid>
   3eada:	b968      	cbnz	r0, 3eaf8 <register_events+0x5c>
   3eadc:	235c      	movs	r3, #92	; 0x5c
   3eade:	4642      	mov	r2, r8
   3eae0:	4651      	mov	r1, sl
   3eae2:	485d      	ldr	r0, [pc, #372]	; (3ec58 <register_events+0x1bc>)
   3eae4:	f002 fc6e 	bl	413c4 <printk>
   3eae8:	4631      	mov	r1, r6
   3eaea:	485c      	ldr	r0, [pc, #368]	; (3ec5c <register_events+0x1c0>)
   3eaec:	f002 fc6a 	bl	413c4 <printk>
   3eaf0:	215c      	movs	r1, #92	; 0x5c
   3eaf2:	4640      	mov	r0, r8
   3eaf4:	f002 fe83 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3eaf8:	4630      	mov	r0, r6
   3eafa:	f7ff fa3b 	bl	3df74 <z_spin_lock_set_owner>
	switch (event->type) {
   3eafe:	7b63      	ldrb	r3, [r4, #13]
   3eb00:	f003 030f 	and.w	r3, r3, #15
   3eb04:	2b04      	cmp	r3, #4
   3eb06:	d844      	bhi.n	3eb92 <register_events+0xf6>
   3eb08:	e8df f003 	tbb	[pc, r3]
   3eb0c:	43033d2d 	.word	0x43033d2d
   3eb10:	2a          	.byte	0x2a
   3eb11:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   3eb12:	6923      	ldr	r3, [r4, #16]
   3eb14:	689b      	ldr	r3, [r3, #8]
   3eb16:	b333      	cbz	r3, 3eb66 <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   3eb18:	2202      	movs	r2, #2
	event->poller = NULL;
   3eb1a:	2100      	movs	r1, #0
	event->state |= state;
   3eb1c:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   3eb1e:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   3eb20:	f3c3 3004 	ubfx	r0, r3, #12, #5
   3eb24:	4302      	orrs	r2, r0
   3eb26:	f362 3310 	bfi	r3, r2, #12, #5
   3eb2a:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   3eb2c:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3eb2e:	4630      	mov	r0, r6
   3eb30:	f7ff fa10 	bl	3df54 <z_spin_unlock_valid>
   3eb34:	b968      	cbnz	r0, 3eb52 <register_events+0xb6>
   3eb36:	2384      	movs	r3, #132	; 0x84
   3eb38:	4642      	mov	r2, r8
   3eb3a:	4949      	ldr	r1, [pc, #292]	; (3ec60 <register_events+0x1c4>)
   3eb3c:	4846      	ldr	r0, [pc, #280]	; (3ec58 <register_events+0x1bc>)
   3eb3e:	f002 fc41 	bl	413c4 <printk>
   3eb42:	4631      	mov	r1, r6
   3eb44:	4847      	ldr	r0, [pc, #284]	; (3ec64 <register_events+0x1c8>)
   3eb46:	f002 fc3d 	bl	413c4 <printk>
   3eb4a:	2184      	movs	r1, #132	; 0x84
   3eb4c:	4640      	mov	r0, r8
   3eb4e:	f002 fe56 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3eb52:	f38b 8811 	msr	BASEPRI, fp
   3eb56:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3eb5a:	3701      	adds	r7, #1
   3eb5c:	3414      	adds	r4, #20
   3eb5e:	e7aa      	b.n	3eab6 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   3eb60:	6923      	ldr	r3, [r4, #16]
   3eb62:	681b      	ldr	r3, [r3, #0]
   3eb64:	bb33      	cbnz	r3, 3ebb4 <register_events+0x118>
		} else if (!just_check && poller->is_polling) {
   3eb66:	9b01      	ldr	r3, [sp, #4]
   3eb68:	2b00      	cmp	r3, #0
   3eb6a:	d1e0      	bne.n	3eb2e <register_events+0x92>
   3eb6c:	782b      	ldrb	r3, [r5, #0]
   3eb6e:	2b00      	cmp	r3, #0
   3eb70:	d0dd      	beq.n	3eb2e <register_events+0x92>
	switch (event->type) {
   3eb72:	7b63      	ldrb	r3, [r4, #13]
   3eb74:	f003 030f 	and.w	r3, r3, #15
   3eb78:	2b04      	cmp	r3, #4
   3eb7a:	d85d      	bhi.n	3ec38 <register_events+0x19c>
   3eb7c:	e8df f003 	tbb	[pc, r3]
   3eb80:	5c1c4931 	.word	0x5c1c4931
   3eb84:	35          	.byte	0x35
   3eb85:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   3eb86:	6923      	ldr	r3, [r4, #16]
   3eb88:	689b      	ldr	r3, [r3, #8]
   3eb8a:	2b00      	cmp	r3, #0
   3eb8c:	d0eb      	beq.n	3eb66 <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   3eb8e:	2201      	movs	r2, #1
   3eb90:	e7c3      	b.n	3eb1a <register_events+0x7e>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   3eb92:	234f      	movs	r3, #79	; 0x4f
   3eb94:	4a34      	ldr	r2, [pc, #208]	; (3ec68 <register_events+0x1cc>)
   3eb96:	4935      	ldr	r1, [pc, #212]	; (3ec6c <register_events+0x1d0>)
   3eb98:	482f      	ldr	r0, [pc, #188]	; (3ec58 <register_events+0x1bc>)
   3eb9a:	f002 fc13 	bl	413c4 <printk>
   3eb9e:	7b61      	ldrb	r1, [r4, #13]
   3eba0:	4833      	ldr	r0, [pc, #204]	; (3ec70 <register_events+0x1d4>)
   3eba2:	f001 010f 	and.w	r1, r1, #15
   3eba6:	f002 fc0d 	bl	413c4 <printk>
   3ebaa:	214f      	movs	r1, #79	; 0x4f
   3ebac:	482e      	ldr	r0, [pc, #184]	; (3ec68 <register_events+0x1cc>)
   3ebae:	f002 fe26 	bl	417fe <assert_post_action>
		break;
   3ebb2:	e7d8      	b.n	3eb66 <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3ebb4:	2204      	movs	r2, #4
   3ebb6:	e7b0      	b.n	3eb1a <register_events+0x7e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3ebb8:	6923      	ldr	r3, [r4, #16]
   3ebba:	b963      	cbnz	r3, 3ebd6 <register_events+0x13a>
   3ebbc:	492d      	ldr	r1, [pc, #180]	; (3ec74 <register_events+0x1d8>)
   3ebbe:	2374      	movs	r3, #116	; 0x74
   3ebc0:	4a29      	ldr	r2, [pc, #164]	; (3ec68 <register_events+0x1cc>)
   3ebc2:	4825      	ldr	r0, [pc, #148]	; (3ec58 <register_events+0x1bc>)
   3ebc4:	f002 fbfe 	bl	413c4 <printk>
   3ebc8:	482b      	ldr	r0, [pc, #172]	; (3ec78 <register_events+0x1dc>)
   3ebca:	f002 fbfb 	bl	413c4 <printk>
   3ebce:	2174      	movs	r1, #116	; 0x74
   3ebd0:	4825      	ldr	r0, [pc, #148]	; (3ec68 <register_events+0x1cc>)
   3ebd2:	f002 fe14 	bl	417fe <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3ebd6:	462a      	mov	r2, r5
   3ebd8:	4621      	mov	r1, r4
   3ebda:	6920      	ldr	r0, [r4, #16]
   3ebdc:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   3ebde:	f005 ffee 	bl	44bbe <add_event>
	event->poller = poller;
   3ebe2:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   3ebe4:	f109 0901 	add.w	r9, r9, #1
   3ebe8:	e7a1      	b.n	3eb2e <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3ebea:	6923      	ldr	r3, [r4, #16]
   3ebec:	b963      	cbnz	r3, 3ec08 <register_events+0x16c>
   3ebee:	4923      	ldr	r1, [pc, #140]	; (3ec7c <register_events+0x1e0>)
   3ebf0:	2378      	movs	r3, #120	; 0x78
   3ebf2:	4a1d      	ldr	r2, [pc, #116]	; (3ec68 <register_events+0x1cc>)
   3ebf4:	4818      	ldr	r0, [pc, #96]	; (3ec58 <register_events+0x1bc>)
   3ebf6:	f002 fbe5 	bl	413c4 <printk>
   3ebfa:	4821      	ldr	r0, [pc, #132]	; (3ec80 <register_events+0x1e4>)
   3ebfc:	f002 fbe2 	bl	413c4 <printk>
   3ec00:	2178      	movs	r1, #120	; 0x78
   3ec02:	4819      	ldr	r0, [pc, #100]	; (3ec68 <register_events+0x1cc>)
   3ec04:	f002 fdfb 	bl	417fe <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3ec08:	6920      	ldr	r0, [r4, #16]
   3ec0a:	462a      	mov	r2, r5
   3ec0c:	4621      	mov	r1, r4
   3ec0e:	3014      	adds	r0, #20
   3ec10:	e7e5      	b.n	3ebde <register_events+0x142>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3ec12:	6923      	ldr	r3, [r4, #16]
   3ec14:	b963      	cbnz	r3, 3ec30 <register_events+0x194>
   3ec16:	491b      	ldr	r1, [pc, #108]	; (3ec84 <register_events+0x1e8>)
   3ec18:	237c      	movs	r3, #124	; 0x7c
   3ec1a:	4a13      	ldr	r2, [pc, #76]	; (3ec68 <register_events+0x1cc>)
   3ec1c:	480e      	ldr	r0, [pc, #56]	; (3ec58 <register_events+0x1bc>)
   3ec1e:	f002 fbd1 	bl	413c4 <printk>
   3ec22:	4819      	ldr	r0, [pc, #100]	; (3ec88 <register_events+0x1ec>)
   3ec24:	f002 fbce 	bl	413c4 <printk>
   3ec28:	217c      	movs	r1, #124	; 0x7c
   3ec2a:	480f      	ldr	r0, [pc, #60]	; (3ec68 <register_events+0x1cc>)
   3ec2c:	f002 fde7 	bl	417fe <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   3ec30:	462a      	mov	r2, r5
   3ec32:	4621      	mov	r1, r4
   3ec34:	6920      	ldr	r0, [r4, #16]
   3ec36:	e7d2      	b.n	3ebde <register_events+0x142>
		__ASSERT(false, "invalid event type\n");
   3ec38:	2383      	movs	r3, #131	; 0x83
   3ec3a:	4a0b      	ldr	r2, [pc, #44]	; (3ec68 <register_events+0x1cc>)
   3ec3c:	490b      	ldr	r1, [pc, #44]	; (3ec6c <register_events+0x1d0>)
   3ec3e:	4806      	ldr	r0, [pc, #24]	; (3ec58 <register_events+0x1bc>)
   3ec40:	f002 fbc0 	bl	413c4 <printk>
   3ec44:	4811      	ldr	r0, [pc, #68]	; (3ec8c <register_events+0x1f0>)
   3ec46:	f002 fbbd 	bl	413c4 <printk>
   3ec4a:	2183      	movs	r1, #131	; 0x83
   3ec4c:	4806      	ldr	r0, [pc, #24]	; (3ec68 <register_events+0x1cc>)
   3ec4e:	f002 fdd6 	bl	417fe <assert_post_action>
		break;
   3ec52:	e7c6      	b.n	3ebe2 <register_events+0x146>
   3ec54:	20025d9c 	.word	0x20025d9c
   3ec58:	00048156 	.word	0x00048156
   3ec5c:	00048935 	.word	0x00048935
   3ec60:	0004894d 	.word	0x0004894d
   3ec64:	00048964 	.word	0x00048964
   3ec68:	0004f1c3 	.word	0x0004f1c3
   3ec6c:	0004ef58 	.word	0x0004ef58
   3ec70:	0004f2bf 	.word	0x0004f2bf
   3ec74:	0004f219 	.word	0x0004f219
   3ec78:	0004f233 	.word	0x0004f233
   3ec7c:	0004f248 	.word	0x0004f248
   3ec80:	0004f264 	.word	0x0004f264
   3ec84:	0004f275 	.word	0x0004f275
   3ec88:	0004f292 	.word	0x0004f292
   3ec8c:	0004f2a9 	.word	0x0004f2a9
   3ec90:	000488fa 	.word	0x000488fa
   3ec94:	00048920 	.word	0x00048920

0003ec98 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   3ec98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ec9c:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   3ec9e:	2301      	movs	r3, #1
{
   3eca0:	b088      	sub	sp, #32
	struct _poller poller = { .is_polling = true,
   3eca2:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   3eca6:	4b73      	ldr	r3, [pc, #460]	; (3ee74 <z_impl_k_poll+0x1dc>)
{
   3eca8:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   3ecaa:	689b      	ldr	r3, [r3, #8]
{
   3ecac:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   3ecae:	9306      	str	r3, [sp, #24]
   3ecb0:	4b71      	ldr	r3, [pc, #452]	; (3ee78 <z_impl_k_poll+0x1e0>)
{
   3ecb2:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   3ecb4:	9307      	str	r3, [sp, #28]
   3ecb6:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   3ecba:	b163      	cbz	r3, 3ecd6 <z_impl_k_poll+0x3e>
   3ecbc:	496f      	ldr	r1, [pc, #444]	; (3ee7c <z_impl_k_poll+0x1e4>)
   3ecbe:	23ff      	movs	r3, #255	; 0xff
   3ecc0:	4a6f      	ldr	r2, [pc, #444]	; (3ee80 <z_impl_k_poll+0x1e8>)
   3ecc2:	4870      	ldr	r0, [pc, #448]	; (3ee84 <z_impl_k_poll+0x1ec>)
   3ecc4:	f002 fb7e 	bl	413c4 <printk>
   3ecc8:	486f      	ldr	r0, [pc, #444]	; (3ee88 <z_impl_k_poll+0x1f0>)
   3ecca:	f002 fb7b 	bl	413c4 <printk>
   3ecce:	21ff      	movs	r1, #255	; 0xff
   3ecd0:	486b      	ldr	r0, [pc, #428]	; (3ee80 <z_impl_k_poll+0x1e8>)
   3ecd2:	f002 fd94 	bl	417fe <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   3ecd6:	b974      	cbnz	r4, 3ecf6 <z_impl_k_poll+0x5e>
   3ecd8:	496c      	ldr	r1, [pc, #432]	; (3ee8c <z_impl_k_poll+0x1f4>)
   3ecda:	f44f 7380 	mov.w	r3, #256	; 0x100
   3ecde:	4a68      	ldr	r2, [pc, #416]	; (3ee80 <z_impl_k_poll+0x1e8>)
   3ece0:	4868      	ldr	r0, [pc, #416]	; (3ee84 <z_impl_k_poll+0x1ec>)
   3ece2:	f002 fb6f 	bl	413c4 <printk>
   3ece6:	486a      	ldr	r0, [pc, #424]	; (3ee90 <z_impl_k_poll+0x1f8>)
   3ece8:	f002 fb6c 	bl	413c4 <printk>
   3ecec:	f44f 7180 	mov.w	r1, #256	; 0x100
   3ecf0:	4863      	ldr	r0, [pc, #396]	; (3ee80 <z_impl_k_poll+0x1e8>)
   3ecf2:	f002 fd84 	bl	417fe <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   3ecf6:	2d00      	cmp	r5, #0
   3ecf8:	da0e      	bge.n	3ed18 <z_impl_k_poll+0x80>
   3ecfa:	4966      	ldr	r1, [pc, #408]	; (3ee94 <z_impl_k_poll+0x1fc>)
   3ecfc:	f240 1301 	movw	r3, #257	; 0x101
   3ed00:	4a5f      	ldr	r2, [pc, #380]	; (3ee80 <z_impl_k_poll+0x1e8>)
   3ed02:	4860      	ldr	r0, [pc, #384]	; (3ee84 <z_impl_k_poll+0x1ec>)
   3ed04:	f002 fb5e 	bl	413c4 <printk>
   3ed08:	4863      	ldr	r0, [pc, #396]	; (3ee98 <z_impl_k_poll+0x200>)
   3ed0a:	f002 fb5b 	bl	413c4 <printk>
   3ed0e:	f240 1101 	movw	r1, #257	; 0x101
   3ed12:	485b      	ldr	r0, [pc, #364]	; (3ee80 <z_impl_k_poll+0x1e8>)
   3ed14:	f002 fd73 	bl	417fe <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   3ed18:	ea56 0307 	orrs.w	r3, r6, r7
   3ed1c:	bf0c      	ite	eq
   3ed1e:	2301      	moveq	r3, #1
   3ed20:	2300      	movne	r3, #0
   3ed22:	4629      	mov	r1, r5
   3ed24:	4620      	mov	r0, r4
   3ed26:	aa05      	add	r2, sp, #20
   3ed28:	f7ff feb8 	bl	3ea9c <register_events>
   3ed2c:	4680      	mov	r8, r0
	__asm__ volatile(
   3ed2e:	f04f 0320 	mov.w	r3, #32
   3ed32:	f3ef 8511 	mrs	r5, BASEPRI
   3ed36:	f383 8811 	msr	BASEPRI, r3
   3ed3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ed3e:	4857      	ldr	r0, [pc, #348]	; (3ee9c <z_impl_k_poll+0x204>)
   3ed40:	f7ff f8fa 	bl	3df38 <z_spin_lock_valid>
   3ed44:	b968      	cbnz	r0, 3ed62 <z_impl_k_poll+0xca>
   3ed46:	235c      	movs	r3, #92	; 0x5c
   3ed48:	4a55      	ldr	r2, [pc, #340]	; (3eea0 <z_impl_k_poll+0x208>)
   3ed4a:	4956      	ldr	r1, [pc, #344]	; (3eea4 <z_impl_k_poll+0x20c>)
   3ed4c:	484d      	ldr	r0, [pc, #308]	; (3ee84 <z_impl_k_poll+0x1ec>)
   3ed4e:	f002 fb39 	bl	413c4 <printk>
   3ed52:	4952      	ldr	r1, [pc, #328]	; (3ee9c <z_impl_k_poll+0x204>)
   3ed54:	4854      	ldr	r0, [pc, #336]	; (3eea8 <z_impl_k_poll+0x210>)
   3ed56:	f002 fb35 	bl	413c4 <printk>
   3ed5a:	215c      	movs	r1, #92	; 0x5c
   3ed5c:	4850      	ldr	r0, [pc, #320]	; (3eea0 <z_impl_k_poll+0x208>)
   3ed5e:	f002 fd4e 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3ed62:	484e      	ldr	r0, [pc, #312]	; (3ee9c <z_impl_k_poll+0x204>)
   3ed64:	f7ff f906 	bl	3df74 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   3ed68:	f89d 3014 	ldrb.w	r3, [sp, #20]
   3ed6c:	b9fb      	cbnz	r3, 3edae <z_impl_k_poll+0x116>
		clear_event_registrations(events, events_registered, key);
   3ed6e:	4620      	mov	r0, r4
   3ed70:	462a      	mov	r2, r5
   3ed72:	4641      	mov	r1, r8
   3ed74:	f7ff fdda 	bl	3e92c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ed78:	4848      	ldr	r0, [pc, #288]	; (3ee9c <z_impl_k_poll+0x204>)
   3ed7a:	f7ff f8eb 	bl	3df54 <z_spin_unlock_valid>
   3ed7e:	b968      	cbnz	r0, 3ed9c <z_impl_k_poll+0x104>
   3ed80:	2384      	movs	r3, #132	; 0x84
   3ed82:	4a47      	ldr	r2, [pc, #284]	; (3eea0 <z_impl_k_poll+0x208>)
   3ed84:	4949      	ldr	r1, [pc, #292]	; (3eeac <z_impl_k_poll+0x214>)
   3ed86:	483f      	ldr	r0, [pc, #252]	; (3ee84 <z_impl_k_poll+0x1ec>)
   3ed88:	f002 fb1c 	bl	413c4 <printk>
   3ed8c:	4943      	ldr	r1, [pc, #268]	; (3ee9c <z_impl_k_poll+0x204>)
   3ed8e:	4848      	ldr	r0, [pc, #288]	; (3eeb0 <z_impl_k_poll+0x218>)
   3ed90:	f002 fb18 	bl	413c4 <printk>
   3ed94:	2184      	movs	r1, #132	; 0x84
   3ed96:	4842      	ldr	r0, [pc, #264]	; (3eea0 <z_impl_k_poll+0x208>)
   3ed98:	f002 fd31 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3ed9c:	f385 8811 	msr	BASEPRI, r5
   3eda0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   3eda4:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   3eda6:	4628      	mov	r0, r5
   3eda8:	b008      	add	sp, #32
   3edaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	poller.is_polling = false;
   3edae:	2300      	movs	r3, #0
   3edb0:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3edb4:	ea56 0307 	orrs.w	r3, r6, r7
   3edb8:	d118      	bne.n	3edec <z_impl_k_poll+0x154>
   3edba:	4838      	ldr	r0, [pc, #224]	; (3ee9c <z_impl_k_poll+0x204>)
   3edbc:	f7ff f8ca 	bl	3df54 <z_spin_unlock_valid>
   3edc0:	b968      	cbnz	r0, 3edde <z_impl_k_poll+0x146>
   3edc2:	2384      	movs	r3, #132	; 0x84
   3edc4:	4a36      	ldr	r2, [pc, #216]	; (3eea0 <z_impl_k_poll+0x208>)
   3edc6:	4939      	ldr	r1, [pc, #228]	; (3eeac <z_impl_k_poll+0x214>)
   3edc8:	482e      	ldr	r0, [pc, #184]	; (3ee84 <z_impl_k_poll+0x1ec>)
   3edca:	f002 fafb 	bl	413c4 <printk>
   3edce:	4933      	ldr	r1, [pc, #204]	; (3ee9c <z_impl_k_poll+0x204>)
   3edd0:	4837      	ldr	r0, [pc, #220]	; (3eeb0 <z_impl_k_poll+0x218>)
   3edd2:	f002 faf7 	bl	413c4 <printk>
   3edd6:	2184      	movs	r1, #132	; 0x84
   3edd8:	4831      	ldr	r0, [pc, #196]	; (3eea0 <z_impl_k_poll+0x208>)
   3edda:	f002 fd10 	bl	417fe <assert_post_action>
   3edde:	f385 8811 	msr	BASEPRI, r5
   3ede2:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3ede6:	f06f 050a 	mvn.w	r5, #10
   3edea:	e7dc      	b.n	3eda6 <z_impl_k_poll+0x10e>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3edec:	4629      	mov	r1, r5
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3edee:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3edf0:	e9cd 6700 	strd	r6, r7, [sp]
   3edf4:	4829      	ldr	r0, [pc, #164]	; (3ee9c <z_impl_k_poll+0x204>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3edf6:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3edfa:	f7fe fba1 	bl	3d540 <z_pend_curr>
   3edfe:	4605      	mov	r5, r0
	__asm__ volatile(
   3ee00:	f04f 0320 	mov.w	r3, #32
   3ee04:	f3ef 8611 	mrs	r6, BASEPRI
   3ee08:	f383 8811 	msr	BASEPRI, r3
   3ee0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ee10:	4822      	ldr	r0, [pc, #136]	; (3ee9c <z_impl_k_poll+0x204>)
   3ee12:	f7ff f891 	bl	3df38 <z_spin_lock_valid>
   3ee16:	b968      	cbnz	r0, 3ee34 <z_impl_k_poll+0x19c>
   3ee18:	235c      	movs	r3, #92	; 0x5c
   3ee1a:	4a21      	ldr	r2, [pc, #132]	; (3eea0 <z_impl_k_poll+0x208>)
   3ee1c:	4921      	ldr	r1, [pc, #132]	; (3eea4 <z_impl_k_poll+0x20c>)
   3ee1e:	4819      	ldr	r0, [pc, #100]	; (3ee84 <z_impl_k_poll+0x1ec>)
   3ee20:	f002 fad0 	bl	413c4 <printk>
   3ee24:	491d      	ldr	r1, [pc, #116]	; (3ee9c <z_impl_k_poll+0x204>)
   3ee26:	4820      	ldr	r0, [pc, #128]	; (3eea8 <z_impl_k_poll+0x210>)
   3ee28:	f002 facc 	bl	413c4 <printk>
   3ee2c:	215c      	movs	r1, #92	; 0x5c
   3ee2e:	481c      	ldr	r0, [pc, #112]	; (3eea0 <z_impl_k_poll+0x208>)
   3ee30:	f002 fce5 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3ee34:	4819      	ldr	r0, [pc, #100]	; (3ee9c <z_impl_k_poll+0x204>)
   3ee36:	f7ff f89d 	bl	3df74 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   3ee3a:	4620      	mov	r0, r4
   3ee3c:	4632      	mov	r2, r6
   3ee3e:	4641      	mov	r1, r8
   3ee40:	f7ff fd74 	bl	3e92c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ee44:	4815      	ldr	r0, [pc, #84]	; (3ee9c <z_impl_k_poll+0x204>)
   3ee46:	f7ff f885 	bl	3df54 <z_spin_unlock_valid>
   3ee4a:	b968      	cbnz	r0, 3ee68 <z_impl_k_poll+0x1d0>
   3ee4c:	2384      	movs	r3, #132	; 0x84
   3ee4e:	4a14      	ldr	r2, [pc, #80]	; (3eea0 <z_impl_k_poll+0x208>)
   3ee50:	4916      	ldr	r1, [pc, #88]	; (3eeac <z_impl_k_poll+0x214>)
   3ee52:	480c      	ldr	r0, [pc, #48]	; (3ee84 <z_impl_k_poll+0x1ec>)
   3ee54:	f002 fab6 	bl	413c4 <printk>
   3ee58:	4910      	ldr	r1, [pc, #64]	; (3ee9c <z_impl_k_poll+0x204>)
   3ee5a:	4815      	ldr	r0, [pc, #84]	; (3eeb0 <z_impl_k_poll+0x218>)
   3ee5c:	f002 fab2 	bl	413c4 <printk>
   3ee60:	2184      	movs	r1, #132	; 0x84
   3ee62:	480f      	ldr	r0, [pc, #60]	; (3eea0 <z_impl_k_poll+0x208>)
   3ee64:	f002 fccb 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3ee68:	f386 8811 	msr	BASEPRI, r6
   3ee6c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3ee70:	e799      	b.n	3eda6 <z_impl_k_poll+0x10e>
   3ee72:	bf00      	nop
   3ee74:	20025d48 	.word	0x20025d48
   3ee78:	0003e8ad 	.word	0x0003e8ad
   3ee7c:	0004ee27 	.word	0x0004ee27
   3ee80:	0004f1c3 	.word	0x0004f1c3
   3ee84:	00048156 	.word	0x00048156
   3ee88:	00049046 	.word	0x00049046
   3ee8c:	0004f2dc 	.word	0x0004f2dc
   3ee90:	0004f2f2 	.word	0x0004f2f2
   3ee94:	0004f301 	.word	0x0004f301
   3ee98:	0004f311 	.word	0x0004f311
   3ee9c:	20025d9c 	.word	0x20025d9c
   3eea0:	000488fa 	.word	0x000488fa
   3eea4:	00048920 	.word	0x00048920
   3eea8:	00048935 	.word	0x00048935
   3eeac:	0004894d 	.word	0x0004894d
   3eeb0:	00048964 	.word	0x00048964

0003eeb4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   3eeb4:	b570      	push	{r4, r5, r6, lr}
   3eeb6:	4604      	mov	r4, r0
   3eeb8:	460d      	mov	r5, r1
	__asm__ volatile(
   3eeba:	f04f 0320 	mov.w	r3, #32
   3eebe:	f3ef 8611 	mrs	r6, BASEPRI
   3eec2:	f383 8811 	msr	BASEPRI, r3
   3eec6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3eeca:	4821      	ldr	r0, [pc, #132]	; (3ef50 <z_impl_k_poll_signal_raise+0x9c>)
   3eecc:	f7ff f834 	bl	3df38 <z_spin_lock_valid>
   3eed0:	b968      	cbnz	r0, 3eeee <z_impl_k_poll_signal_raise+0x3a>
   3eed2:	235c      	movs	r3, #92	; 0x5c
   3eed4:	4a1f      	ldr	r2, [pc, #124]	; (3ef54 <z_impl_k_poll_signal_raise+0xa0>)
   3eed6:	4920      	ldr	r1, [pc, #128]	; (3ef58 <z_impl_k_poll_signal_raise+0xa4>)
   3eed8:	4820      	ldr	r0, [pc, #128]	; (3ef5c <z_impl_k_poll_signal_raise+0xa8>)
   3eeda:	f002 fa73 	bl	413c4 <printk>
   3eede:	491c      	ldr	r1, [pc, #112]	; (3ef50 <z_impl_k_poll_signal_raise+0x9c>)
   3eee0:	481f      	ldr	r0, [pc, #124]	; (3ef60 <z_impl_k_poll_signal_raise+0xac>)
   3eee2:	f002 fa6f 	bl	413c4 <printk>
   3eee6:	215c      	movs	r1, #92	; 0x5c
   3eee8:	481a      	ldr	r0, [pc, #104]	; (3ef54 <z_impl_k_poll_signal_raise+0xa0>)
   3eeea:	f002 fc88 	bl	417fe <assert_post_action>
	z_spin_lock_set_owner(l);
   3eeee:	4818      	ldr	r0, [pc, #96]	; (3ef50 <z_impl_k_poll_signal_raise+0x9c>)
   3eef0:	f7ff f840 	bl	3df74 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
	signal->signaled = 1U;
   3eef4:	2101      	movs	r1, #1
	return list->head == list;
   3eef6:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   3eef8:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   3eefa:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   3eefc:	60a1      	str	r1, [r4, #8]
   3eefe:	d117      	bne.n	3ef30 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ef00:	4813      	ldr	r0, [pc, #76]	; (3ef50 <z_impl_k_poll_signal_raise+0x9c>)
   3ef02:	f7ff f827 	bl	3df54 <z_spin_unlock_valid>
   3ef06:	b968      	cbnz	r0, 3ef24 <z_impl_k_poll_signal_raise+0x70>
   3ef08:	2384      	movs	r3, #132	; 0x84
   3ef0a:	4a12      	ldr	r2, [pc, #72]	; (3ef54 <z_impl_k_poll_signal_raise+0xa0>)
   3ef0c:	4915      	ldr	r1, [pc, #84]	; (3ef64 <z_impl_k_poll_signal_raise+0xb0>)
   3ef0e:	4813      	ldr	r0, [pc, #76]	; (3ef5c <z_impl_k_poll_signal_raise+0xa8>)
   3ef10:	f002 fa58 	bl	413c4 <printk>
   3ef14:	490e      	ldr	r1, [pc, #56]	; (3ef50 <z_impl_k_poll_signal_raise+0x9c>)
   3ef16:	4814      	ldr	r0, [pc, #80]	; (3ef68 <z_impl_k_poll_signal_raise+0xb4>)
   3ef18:	f002 fa54 	bl	413c4 <printk>
   3ef1c:	2184      	movs	r1, #132	; 0x84
   3ef1e:	480d      	ldr	r0, [pc, #52]	; (3ef54 <z_impl_k_poll_signal_raise+0xa0>)
   3ef20:	f002 fc6d 	bl	417fe <assert_post_action>
	__asm__ volatile(
   3ef24:	f386 8811 	msr	BASEPRI, r6
   3ef28:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   3ef2c:	2400      	movs	r4, #0
   3ef2e:	e00d      	b.n	3ef4c <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   3ef30:	e9d0 3200 	ldrd	r3, r2, [r0]
   3ef34:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3ef36:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3ef38:	2300      	movs	r3, #0
	node->prev = NULL;
   3ef3a:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3ef3e:	f005 fe23 	bl	44b88 <signal_poll_event>

	z_reschedule(&lock, key);
   3ef42:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3ef44:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   3ef46:	4802      	ldr	r0, [pc, #8]	; (3ef50 <z_impl_k_poll_signal_raise+0x9c>)
   3ef48:	f7fd fd0e 	bl	3c968 <z_reschedule>
	return rc;
}
   3ef4c:	4620      	mov	r0, r4
   3ef4e:	bd70      	pop	{r4, r5, r6, pc}
   3ef50:	20025d9c 	.word	0x20025d9c
   3ef54:	000488fa 	.word	0x000488fa
   3ef58:	00048920 	.word	0x00048920
   3ef5c:	00048156 	.word	0x00048156
   3ef60:	00048935 	.word	0x00048935
   3ef64:	0004894d 	.word	0x0004894d
   3ef68:	00048964 	.word	0x00048964

0003ef6c <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   3ef6c:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   3ef6e:	4801      	ldr	r0, [pc, #4]	; (3ef74 <k_malloc+0x8>)
   3ef70:	f005 be64 	b.w	44c3c <k_mem_pool_malloc>
   3ef74:	2002075c 	.word	0x2002075c

0003ef78 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   3ef78:	b507      	push	{r0, r1, r2, lr}
   3ef7a:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   3ef7c:	f005 fd64 	bl	44a48 <k_is_in_isr>
   3ef80:	9901      	ldr	r1, [sp, #4]
   3ef82:	b948      	cbnz	r0, 3ef98 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   3ef84:	4b07      	ldr	r3, [pc, #28]	; (3efa4 <z_thread_malloc+0x2c>)
   3ef86:	689b      	ldr	r3, [r3, #8]
   3ef88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (pool) {
   3ef8a:	b13b      	cbz	r3, 3ef9c <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   3ef8c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   3ef8e:	b003      	add	sp, #12
   3ef90:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   3ef94:	f005 be52 	b.w	44c3c <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   3ef98:	4b03      	ldr	r3, [pc, #12]	; (3efa8 <z_thread_malloc+0x30>)
   3ef9a:	e7f7      	b.n	3ef8c <z_thread_malloc+0x14>
}
   3ef9c:	b003      	add	sp, #12
   3ef9e:	f85d fb04 	ldr.w	pc, [sp], #4
   3efa2:	bf00      	nop
   3efa4:	20025d48 	.word	0x20025d48
   3efa8:	2002075c 	.word	0x2002075c

0003efac <fabs>:
   3efac:	ec51 0b10 	vmov	r0, r1, d0
   3efb0:	ee10 2a10 	vmov	r2, s0
   3efb4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   3efb8:	ec43 2b10 	vmov	d0, r2, r3
   3efbc:	4770      	bx	lr
   3efbe:	bf00      	nop

0003efc0 <__assert_func>:
   3efc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3efc2:	4614      	mov	r4, r2
   3efc4:	461a      	mov	r2, r3
   3efc6:	4b09      	ldr	r3, [pc, #36]	; (3efec <__assert_func+0x2c>)
   3efc8:	4605      	mov	r5, r0
   3efca:	681b      	ldr	r3, [r3, #0]
   3efcc:	68d8      	ldr	r0, [r3, #12]
   3efce:	b14c      	cbz	r4, 3efe4 <__assert_func+0x24>
   3efd0:	4b07      	ldr	r3, [pc, #28]	; (3eff0 <__assert_func+0x30>)
   3efd2:	9100      	str	r1, [sp, #0]
   3efd4:	4907      	ldr	r1, [pc, #28]	; (3eff4 <__assert_func+0x34>)
   3efd6:	e9cd 3401 	strd	r3, r4, [sp, #4]
   3efda:	462b      	mov	r3, r5
   3efdc:	f000 f80e 	bl	3effc <fiprintf>
   3efe0:	f006 f916 	bl	45210 <abort>
   3efe4:	4b04      	ldr	r3, [pc, #16]	; (3eff8 <__assert_func+0x38>)
   3efe6:	461c      	mov	r4, r3
   3efe8:	e7f3      	b.n	3efd2 <__assert_func+0x12>
   3efea:	bf00      	nop
   3efec:	20020760 	.word	0x20020760
   3eff0:	0004f31e 	.word	0x0004f31e
   3eff4:	0004f32b 	.word	0x0004f32b
   3eff8:	00049048 	.word	0x00049048

0003effc <fiprintf>:
   3effc:	b40e      	push	{r1, r2, r3}
   3effe:	b503      	push	{r0, r1, lr}
   3f000:	ab03      	add	r3, sp, #12
   3f002:	4601      	mov	r1, r0
   3f004:	4805      	ldr	r0, [pc, #20]	; (3f01c <fiprintf+0x20>)
   3f006:	f853 2b04 	ldr.w	r2, [r3], #4
   3f00a:	6800      	ldr	r0, [r0, #0]
   3f00c:	9301      	str	r3, [sp, #4]
   3f00e:	f000 f8c1 	bl	3f194 <_vfiprintf_r>
   3f012:	b002      	add	sp, #8
   3f014:	f85d eb04 	ldr.w	lr, [sp], #4
   3f018:	b003      	add	sp, #12
   3f01a:	4770      	bx	lr
   3f01c:	20020760 	.word	0x20020760

0003f020 <malloc>:
   3f020:	4b02      	ldr	r3, [pc, #8]	; (3f02c <malloc+0xc>)
   3f022:	4601      	mov	r1, r0
   3f024:	6818      	ldr	r0, [r3, #0]
   3f026:	f000 b85b 	b.w	3f0e0 <_malloc_r>
   3f02a:	bf00      	nop
   3f02c:	20020760 	.word	0x20020760

0003f030 <free>:
   3f030:	4b02      	ldr	r3, [pc, #8]	; (3f03c <free+0xc>)
   3f032:	4601      	mov	r1, r0
   3f034:	6818      	ldr	r0, [r3, #0]
   3f036:	f000 b803 	b.w	3f040 <_free_r>
   3f03a:	bf00      	nop
   3f03c:	20020760 	.word	0x20020760

0003f040 <_free_r>:
   3f040:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3f042:	2900      	cmp	r1, #0
   3f044:	d047      	beq.n	3f0d6 <_free_r+0x96>
   3f046:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3f04a:	1f0c      	subs	r4, r1, #4
   3f04c:	9001      	str	r0, [sp, #4]
   3f04e:	2b00      	cmp	r3, #0
   3f050:	bfb8      	it	lt
   3f052:	18e4      	addlt	r4, r4, r3
   3f054:	f001 fc26 	bl	408a4 <__malloc_lock>
   3f058:	4a20      	ldr	r2, [pc, #128]	; (3f0dc <_free_r+0x9c>)
   3f05a:	9801      	ldr	r0, [sp, #4]
   3f05c:	6813      	ldr	r3, [r2, #0]
   3f05e:	4615      	mov	r5, r2
   3f060:	b933      	cbnz	r3, 3f070 <_free_r+0x30>
   3f062:	6063      	str	r3, [r4, #4]
   3f064:	6014      	str	r4, [r2, #0]
   3f066:	b003      	add	sp, #12
   3f068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3f06c:	f001 bc20 	b.w	408b0 <__malloc_unlock>
   3f070:	42a3      	cmp	r3, r4
   3f072:	d90b      	bls.n	3f08c <_free_r+0x4c>
   3f074:	6821      	ldr	r1, [r4, #0]
   3f076:	1862      	adds	r2, r4, r1
   3f078:	4293      	cmp	r3, r2
   3f07a:	bf02      	ittt	eq
   3f07c:	681a      	ldreq	r2, [r3, #0]
   3f07e:	685b      	ldreq	r3, [r3, #4]
   3f080:	1852      	addeq	r2, r2, r1
   3f082:	6063      	str	r3, [r4, #4]
   3f084:	bf08      	it	eq
   3f086:	6022      	streq	r2, [r4, #0]
   3f088:	602c      	str	r4, [r5, #0]
   3f08a:	e7ec      	b.n	3f066 <_free_r+0x26>
   3f08c:	461a      	mov	r2, r3
   3f08e:	685b      	ldr	r3, [r3, #4]
   3f090:	b10b      	cbz	r3, 3f096 <_free_r+0x56>
   3f092:	42a3      	cmp	r3, r4
   3f094:	d9fa      	bls.n	3f08c <_free_r+0x4c>
   3f096:	6811      	ldr	r1, [r2, #0]
   3f098:	1855      	adds	r5, r2, r1
   3f09a:	42a5      	cmp	r5, r4
   3f09c:	d10b      	bne.n	3f0b6 <_free_r+0x76>
   3f09e:	6824      	ldr	r4, [r4, #0]
   3f0a0:	4421      	add	r1, r4
   3f0a2:	1854      	adds	r4, r2, r1
   3f0a4:	6011      	str	r1, [r2, #0]
   3f0a6:	42a3      	cmp	r3, r4
   3f0a8:	d1dd      	bne.n	3f066 <_free_r+0x26>
   3f0aa:	681c      	ldr	r4, [r3, #0]
   3f0ac:	685b      	ldr	r3, [r3, #4]
   3f0ae:	4421      	add	r1, r4
   3f0b0:	6053      	str	r3, [r2, #4]
   3f0b2:	6011      	str	r1, [r2, #0]
   3f0b4:	e7d7      	b.n	3f066 <_free_r+0x26>
   3f0b6:	d902      	bls.n	3f0be <_free_r+0x7e>
   3f0b8:	230c      	movs	r3, #12
   3f0ba:	6003      	str	r3, [r0, #0]
   3f0bc:	e7d3      	b.n	3f066 <_free_r+0x26>
   3f0be:	6825      	ldr	r5, [r4, #0]
   3f0c0:	1961      	adds	r1, r4, r5
   3f0c2:	428b      	cmp	r3, r1
   3f0c4:	bf02      	ittt	eq
   3f0c6:	6819      	ldreq	r1, [r3, #0]
   3f0c8:	685b      	ldreq	r3, [r3, #4]
   3f0ca:	1949      	addeq	r1, r1, r5
   3f0cc:	6063      	str	r3, [r4, #4]
   3f0ce:	bf08      	it	eq
   3f0d0:	6021      	streq	r1, [r4, #0]
   3f0d2:	6054      	str	r4, [r2, #4]
   3f0d4:	e7c7      	b.n	3f066 <_free_r+0x26>
   3f0d6:	b003      	add	sp, #12
   3f0d8:	bd30      	pop	{r4, r5, pc}
   3f0da:	bf00      	nop
   3f0dc:	2002a5dc 	.word	0x2002a5dc

0003f0e0 <_malloc_r>:
   3f0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f0e2:	1ccd      	adds	r5, r1, #3
   3f0e4:	4606      	mov	r6, r0
   3f0e6:	f025 0503 	bic.w	r5, r5, #3
   3f0ea:	3508      	adds	r5, #8
   3f0ec:	2d0c      	cmp	r5, #12
   3f0ee:	bf38      	it	cc
   3f0f0:	250c      	movcc	r5, #12
   3f0f2:	2d00      	cmp	r5, #0
   3f0f4:	db01      	blt.n	3f0fa <_malloc_r+0x1a>
   3f0f6:	42a9      	cmp	r1, r5
   3f0f8:	d903      	bls.n	3f102 <_malloc_r+0x22>
   3f0fa:	230c      	movs	r3, #12
   3f0fc:	6033      	str	r3, [r6, #0]
   3f0fe:	2000      	movs	r0, #0
   3f100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3f102:	f001 fbcf 	bl	408a4 <__malloc_lock>
   3f106:	4921      	ldr	r1, [pc, #132]	; (3f18c <_malloc_r+0xac>)
   3f108:	680a      	ldr	r2, [r1, #0]
   3f10a:	4614      	mov	r4, r2
   3f10c:	b99c      	cbnz	r4, 3f136 <_malloc_r+0x56>
   3f10e:	4f20      	ldr	r7, [pc, #128]	; (3f190 <_malloc_r+0xb0>)
   3f110:	683b      	ldr	r3, [r7, #0]
   3f112:	b923      	cbnz	r3, 3f11e <_malloc_r+0x3e>
   3f114:	4621      	mov	r1, r4
   3f116:	4630      	mov	r0, r6
   3f118:	f000 fd28 	bl	3fb6c <_sbrk_r>
   3f11c:	6038      	str	r0, [r7, #0]
   3f11e:	4629      	mov	r1, r5
   3f120:	4630      	mov	r0, r6
   3f122:	f000 fd23 	bl	3fb6c <_sbrk_r>
   3f126:	1c43      	adds	r3, r0, #1
   3f128:	d123      	bne.n	3f172 <_malloc_r+0x92>
   3f12a:	230c      	movs	r3, #12
   3f12c:	4630      	mov	r0, r6
   3f12e:	6033      	str	r3, [r6, #0]
   3f130:	f001 fbbe 	bl	408b0 <__malloc_unlock>
   3f134:	e7e3      	b.n	3f0fe <_malloc_r+0x1e>
   3f136:	6823      	ldr	r3, [r4, #0]
   3f138:	1b5b      	subs	r3, r3, r5
   3f13a:	d417      	bmi.n	3f16c <_malloc_r+0x8c>
   3f13c:	2b0b      	cmp	r3, #11
   3f13e:	d903      	bls.n	3f148 <_malloc_r+0x68>
   3f140:	6023      	str	r3, [r4, #0]
   3f142:	441c      	add	r4, r3
   3f144:	6025      	str	r5, [r4, #0]
   3f146:	e004      	b.n	3f152 <_malloc_r+0x72>
   3f148:	6863      	ldr	r3, [r4, #4]
   3f14a:	42a2      	cmp	r2, r4
   3f14c:	bf0c      	ite	eq
   3f14e:	600b      	streq	r3, [r1, #0]
   3f150:	6053      	strne	r3, [r2, #4]
   3f152:	4630      	mov	r0, r6
   3f154:	f001 fbac 	bl	408b0 <__malloc_unlock>
   3f158:	f104 000b 	add.w	r0, r4, #11
   3f15c:	1d23      	adds	r3, r4, #4
   3f15e:	f020 0007 	bic.w	r0, r0, #7
   3f162:	1ac2      	subs	r2, r0, r3
   3f164:	d0cc      	beq.n	3f100 <_malloc_r+0x20>
   3f166:	1a1b      	subs	r3, r3, r0
   3f168:	50a3      	str	r3, [r4, r2]
   3f16a:	e7c9      	b.n	3f100 <_malloc_r+0x20>
   3f16c:	4622      	mov	r2, r4
   3f16e:	6864      	ldr	r4, [r4, #4]
   3f170:	e7cc      	b.n	3f10c <_malloc_r+0x2c>
   3f172:	1cc4      	adds	r4, r0, #3
   3f174:	f024 0403 	bic.w	r4, r4, #3
   3f178:	42a0      	cmp	r0, r4
   3f17a:	d0e3      	beq.n	3f144 <_malloc_r+0x64>
   3f17c:	1a21      	subs	r1, r4, r0
   3f17e:	4630      	mov	r0, r6
   3f180:	f000 fcf4 	bl	3fb6c <_sbrk_r>
   3f184:	3001      	adds	r0, #1
   3f186:	d1dd      	bne.n	3f144 <_malloc_r+0x64>
   3f188:	e7cf      	b.n	3f12a <_malloc_r+0x4a>
   3f18a:	bf00      	nop
   3f18c:	2002a5dc 	.word	0x2002a5dc
   3f190:	2002a5e0 	.word	0x2002a5e0

0003f194 <_vfiprintf_r>:
   3f194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f198:	460d      	mov	r5, r1
   3f19a:	b09d      	sub	sp, #116	; 0x74
   3f19c:	4614      	mov	r4, r2
   3f19e:	4698      	mov	r8, r3
   3f1a0:	4606      	mov	r6, r0
   3f1a2:	b118      	cbz	r0, 3f1ac <_vfiprintf_r+0x18>
   3f1a4:	6983      	ldr	r3, [r0, #24]
   3f1a6:	b90b      	cbnz	r3, 3f1ac <_vfiprintf_r+0x18>
   3f1a8:	f001 f874 	bl	40294 <__sinit>
   3f1ac:	4b89      	ldr	r3, [pc, #548]	; (3f3d4 <_vfiprintf_r+0x240>)
   3f1ae:	429d      	cmp	r5, r3
   3f1b0:	d11b      	bne.n	3f1ea <_vfiprintf_r+0x56>
   3f1b2:	6875      	ldr	r5, [r6, #4]
   3f1b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3f1b6:	07d9      	lsls	r1, r3, #31
   3f1b8:	d405      	bmi.n	3f1c6 <_vfiprintf_r+0x32>
   3f1ba:	89ab      	ldrh	r3, [r5, #12]
   3f1bc:	059a      	lsls	r2, r3, #22
   3f1be:	d402      	bmi.n	3f1c6 <_vfiprintf_r+0x32>
   3f1c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3f1c2:	f006 fa19 	bl	455f8 <__retarget_lock_acquire_recursive>
   3f1c6:	89ab      	ldrh	r3, [r5, #12]
   3f1c8:	071b      	lsls	r3, r3, #28
   3f1ca:	d501      	bpl.n	3f1d0 <_vfiprintf_r+0x3c>
   3f1cc:	692b      	ldr	r3, [r5, #16]
   3f1ce:	b9eb      	cbnz	r3, 3f20c <_vfiprintf_r+0x78>
   3f1d0:	4629      	mov	r1, r5
   3f1d2:	4630      	mov	r0, r6
   3f1d4:	f000 fede 	bl	3ff94 <__swsetup_r>
   3f1d8:	b1c0      	cbz	r0, 3f20c <_vfiprintf_r+0x78>
   3f1da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3f1dc:	07dc      	lsls	r4, r3, #31
   3f1de:	d50e      	bpl.n	3f1fe <_vfiprintf_r+0x6a>
   3f1e0:	f04f 30ff 	mov.w	r0, #4294967295
   3f1e4:	b01d      	add	sp, #116	; 0x74
   3f1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f1ea:	4b7b      	ldr	r3, [pc, #492]	; (3f3d8 <_vfiprintf_r+0x244>)
   3f1ec:	429d      	cmp	r5, r3
   3f1ee:	d101      	bne.n	3f1f4 <_vfiprintf_r+0x60>
   3f1f0:	68b5      	ldr	r5, [r6, #8]
   3f1f2:	e7df      	b.n	3f1b4 <_vfiprintf_r+0x20>
   3f1f4:	4b79      	ldr	r3, [pc, #484]	; (3f3dc <_vfiprintf_r+0x248>)
   3f1f6:	429d      	cmp	r5, r3
   3f1f8:	bf08      	it	eq
   3f1fa:	68f5      	ldreq	r5, [r6, #12]
   3f1fc:	e7da      	b.n	3f1b4 <_vfiprintf_r+0x20>
   3f1fe:	89ab      	ldrh	r3, [r5, #12]
   3f200:	0598      	lsls	r0, r3, #22
   3f202:	d4ed      	bmi.n	3f1e0 <_vfiprintf_r+0x4c>
   3f204:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3f206:	f006 f9f8 	bl	455fa <__retarget_lock_release_recursive>
   3f20a:	e7e9      	b.n	3f1e0 <_vfiprintf_r+0x4c>
   3f20c:	2300      	movs	r3, #0
   3f20e:	f8cd 800c 	str.w	r8, [sp, #12]
   3f212:	f04f 0901 	mov.w	r9, #1
   3f216:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 3f3e0 <_vfiprintf_r+0x24c>
   3f21a:	9309      	str	r3, [sp, #36]	; 0x24
   3f21c:	2320      	movs	r3, #32
   3f21e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3f222:	2330      	movs	r3, #48	; 0x30
   3f224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3f228:	4623      	mov	r3, r4
   3f22a:	469a      	mov	sl, r3
   3f22c:	f813 2b01 	ldrb.w	r2, [r3], #1
   3f230:	b10a      	cbz	r2, 3f236 <_vfiprintf_r+0xa2>
   3f232:	2a25      	cmp	r2, #37	; 0x25
   3f234:	d1f9      	bne.n	3f22a <_vfiprintf_r+0x96>
   3f236:	ebba 0b04 	subs.w	fp, sl, r4
   3f23a:	d00b      	beq.n	3f254 <_vfiprintf_r+0xc0>
   3f23c:	465b      	mov	r3, fp
   3f23e:	4622      	mov	r2, r4
   3f240:	4629      	mov	r1, r5
   3f242:	4630      	mov	r0, r6
   3f244:	f005 fd8e 	bl	44d64 <__sfputs_r>
   3f248:	3001      	adds	r0, #1
   3f24a:	f000 80aa 	beq.w	3f3a2 <_vfiprintf_r+0x20e>
   3f24e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3f250:	445a      	add	r2, fp
   3f252:	9209      	str	r2, [sp, #36]	; 0x24
   3f254:	f89a 3000 	ldrb.w	r3, [sl]
   3f258:	2b00      	cmp	r3, #0
   3f25a:	f000 80a2 	beq.w	3f3a2 <_vfiprintf_r+0x20e>
   3f25e:	2300      	movs	r3, #0
   3f260:	f04f 32ff 	mov.w	r2, #4294967295
   3f264:	f10a 0a01 	add.w	sl, sl, #1
   3f268:	9304      	str	r3, [sp, #16]
   3f26a:	9307      	str	r3, [sp, #28]
   3f26c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3f270:	931a      	str	r3, [sp, #104]	; 0x68
   3f272:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3f276:	4654      	mov	r4, sl
   3f278:	2205      	movs	r2, #5
   3f27a:	4859      	ldr	r0, [pc, #356]	; (3f3e0 <_vfiprintf_r+0x24c>)
   3f27c:	f814 1b01 	ldrb.w	r1, [r4], #1
   3f280:	f005 fd15 	bl	44cae <memchr>
   3f284:	9a04      	ldr	r2, [sp, #16]
   3f286:	b9d8      	cbnz	r0, 3f2c0 <_vfiprintf_r+0x12c>
   3f288:	06d1      	lsls	r1, r2, #27
   3f28a:	bf44      	itt	mi
   3f28c:	2320      	movmi	r3, #32
   3f28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3f292:	0713      	lsls	r3, r2, #28
   3f294:	bf44      	itt	mi
   3f296:	232b      	movmi	r3, #43	; 0x2b
   3f298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3f29c:	f89a 3000 	ldrb.w	r3, [sl]
   3f2a0:	2b2a      	cmp	r3, #42	; 0x2a
   3f2a2:	d015      	beq.n	3f2d0 <_vfiprintf_r+0x13c>
   3f2a4:	9a07      	ldr	r2, [sp, #28]
   3f2a6:	4654      	mov	r4, sl
   3f2a8:	2000      	movs	r0, #0
   3f2aa:	f04f 0c0a 	mov.w	ip, #10
   3f2ae:	4621      	mov	r1, r4
   3f2b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   3f2b4:	3b30      	subs	r3, #48	; 0x30
   3f2b6:	2b09      	cmp	r3, #9
   3f2b8:	d94e      	bls.n	3f358 <_vfiprintf_r+0x1c4>
   3f2ba:	b1b0      	cbz	r0, 3f2ea <_vfiprintf_r+0x156>
   3f2bc:	9207      	str	r2, [sp, #28]
   3f2be:	e014      	b.n	3f2ea <_vfiprintf_r+0x156>
   3f2c0:	eba0 0308 	sub.w	r3, r0, r8
   3f2c4:	46a2      	mov	sl, r4
   3f2c6:	fa09 f303 	lsl.w	r3, r9, r3
   3f2ca:	4313      	orrs	r3, r2
   3f2cc:	9304      	str	r3, [sp, #16]
   3f2ce:	e7d2      	b.n	3f276 <_vfiprintf_r+0xe2>
   3f2d0:	9b03      	ldr	r3, [sp, #12]
   3f2d2:	1d19      	adds	r1, r3, #4
   3f2d4:	681b      	ldr	r3, [r3, #0]
   3f2d6:	2b00      	cmp	r3, #0
   3f2d8:	9103      	str	r1, [sp, #12]
   3f2da:	bfbb      	ittet	lt
   3f2dc:	425b      	neglt	r3, r3
   3f2de:	f042 0202 	orrlt.w	r2, r2, #2
   3f2e2:	9307      	strge	r3, [sp, #28]
   3f2e4:	9307      	strlt	r3, [sp, #28]
   3f2e6:	bfb8      	it	lt
   3f2e8:	9204      	strlt	r2, [sp, #16]
   3f2ea:	7823      	ldrb	r3, [r4, #0]
   3f2ec:	2b2e      	cmp	r3, #46	; 0x2e
   3f2ee:	d10c      	bne.n	3f30a <_vfiprintf_r+0x176>
   3f2f0:	7863      	ldrb	r3, [r4, #1]
   3f2f2:	2b2a      	cmp	r3, #42	; 0x2a
   3f2f4:	d135      	bne.n	3f362 <_vfiprintf_r+0x1ce>
   3f2f6:	9b03      	ldr	r3, [sp, #12]
   3f2f8:	3402      	adds	r4, #2
   3f2fa:	1d1a      	adds	r2, r3, #4
   3f2fc:	681b      	ldr	r3, [r3, #0]
   3f2fe:	2b00      	cmp	r3, #0
   3f300:	9203      	str	r2, [sp, #12]
   3f302:	bfb8      	it	lt
   3f304:	f04f 33ff 	movlt.w	r3, #4294967295
   3f308:	9305      	str	r3, [sp, #20]
   3f30a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 3f3f0 <_vfiprintf_r+0x25c>
   3f30e:	2203      	movs	r2, #3
   3f310:	7821      	ldrb	r1, [r4, #0]
   3f312:	4650      	mov	r0, sl
   3f314:	f005 fccb 	bl	44cae <memchr>
   3f318:	b140      	cbz	r0, 3f32c <_vfiprintf_r+0x198>
   3f31a:	2340      	movs	r3, #64	; 0x40
   3f31c:	eba0 000a 	sub.w	r0, r0, sl
   3f320:	3401      	adds	r4, #1
   3f322:	fa03 f000 	lsl.w	r0, r3, r0
   3f326:	9b04      	ldr	r3, [sp, #16]
   3f328:	4303      	orrs	r3, r0
   3f32a:	9304      	str	r3, [sp, #16]
   3f32c:	f814 1b01 	ldrb.w	r1, [r4], #1
   3f330:	2206      	movs	r2, #6
   3f332:	482c      	ldr	r0, [pc, #176]	; (3f3e4 <_vfiprintf_r+0x250>)
   3f334:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3f338:	f005 fcb9 	bl	44cae <memchr>
   3f33c:	2800      	cmp	r0, #0
   3f33e:	d03f      	beq.n	3f3c0 <_vfiprintf_r+0x22c>
   3f340:	4b29      	ldr	r3, [pc, #164]	; (3f3e8 <_vfiprintf_r+0x254>)
   3f342:	bb1b      	cbnz	r3, 3f38c <_vfiprintf_r+0x1f8>
   3f344:	9b03      	ldr	r3, [sp, #12]
   3f346:	3307      	adds	r3, #7
   3f348:	f023 0307 	bic.w	r3, r3, #7
   3f34c:	3308      	adds	r3, #8
   3f34e:	9303      	str	r3, [sp, #12]
   3f350:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3f352:	443b      	add	r3, r7
   3f354:	9309      	str	r3, [sp, #36]	; 0x24
   3f356:	e767      	b.n	3f228 <_vfiprintf_r+0x94>
   3f358:	fb0c 3202 	mla	r2, ip, r2, r3
   3f35c:	460c      	mov	r4, r1
   3f35e:	2001      	movs	r0, #1
   3f360:	e7a5      	b.n	3f2ae <_vfiprintf_r+0x11a>
   3f362:	2300      	movs	r3, #0
   3f364:	3401      	adds	r4, #1
   3f366:	f04f 0c0a 	mov.w	ip, #10
   3f36a:	4619      	mov	r1, r3
   3f36c:	9305      	str	r3, [sp, #20]
   3f36e:	4620      	mov	r0, r4
   3f370:	f810 2b01 	ldrb.w	r2, [r0], #1
   3f374:	3a30      	subs	r2, #48	; 0x30
   3f376:	2a09      	cmp	r2, #9
   3f378:	d903      	bls.n	3f382 <_vfiprintf_r+0x1ee>
   3f37a:	2b00      	cmp	r3, #0
   3f37c:	d0c5      	beq.n	3f30a <_vfiprintf_r+0x176>
   3f37e:	9105      	str	r1, [sp, #20]
   3f380:	e7c3      	b.n	3f30a <_vfiprintf_r+0x176>
   3f382:	fb0c 2101 	mla	r1, ip, r1, r2
   3f386:	4604      	mov	r4, r0
   3f388:	2301      	movs	r3, #1
   3f38a:	e7f0      	b.n	3f36e <_vfiprintf_r+0x1da>
   3f38c:	ab03      	add	r3, sp, #12
   3f38e:	462a      	mov	r2, r5
   3f390:	a904      	add	r1, sp, #16
   3f392:	4630      	mov	r0, r6
   3f394:	9300      	str	r3, [sp, #0]
   3f396:	4b15      	ldr	r3, [pc, #84]	; (3f3ec <_vfiprintf_r+0x258>)
   3f398:	f000 f82c 	bl	3f3f4 <_printf_float>
   3f39c:	4607      	mov	r7, r0
   3f39e:	1c78      	adds	r0, r7, #1
   3f3a0:	d1d6      	bne.n	3f350 <_vfiprintf_r+0x1bc>
   3f3a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3f3a4:	07d9      	lsls	r1, r3, #31
   3f3a6:	d405      	bmi.n	3f3b4 <_vfiprintf_r+0x220>
   3f3a8:	89ab      	ldrh	r3, [r5, #12]
   3f3aa:	059a      	lsls	r2, r3, #22
   3f3ac:	d402      	bmi.n	3f3b4 <_vfiprintf_r+0x220>
   3f3ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3f3b0:	f006 f923 	bl	455fa <__retarget_lock_release_recursive>
   3f3b4:	89ab      	ldrh	r3, [r5, #12]
   3f3b6:	065b      	lsls	r3, r3, #25
   3f3b8:	f53f af12 	bmi.w	3f1e0 <_vfiprintf_r+0x4c>
   3f3bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   3f3be:	e711      	b.n	3f1e4 <_vfiprintf_r+0x50>
   3f3c0:	ab03      	add	r3, sp, #12
   3f3c2:	462a      	mov	r2, r5
   3f3c4:	a904      	add	r1, sp, #16
   3f3c6:	4630      	mov	r0, r6
   3f3c8:	9300      	str	r3, [sp, #0]
   3f3ca:	4b08      	ldr	r3, [pc, #32]	; (3f3ec <_vfiprintf_r+0x258>)
   3f3cc:	f000 fa48 	bl	3f860 <_printf_i>
   3f3d0:	e7e4      	b.n	3f39c <_vfiprintf_r+0x208>
   3f3d2:	bf00      	nop
   3f3d4:	00047480 	.word	0x00047480
   3f3d8:	000474a0 	.word	0x000474a0
   3f3dc:	00047460 	.word	0x00047460
   3f3e0:	0004f45b 	.word	0x0004f45b
   3f3e4:	0004f465 	.word	0x0004f465
   3f3e8:	0003f3f5 	.word	0x0003f3f5
   3f3ec:	00044d65 	.word	0x00044d65
   3f3f0:	0004f461 	.word	0x0004f461

0003f3f4 <_printf_float>:
   3f3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f3f8:	ed2d 8b02 	vpush	{d8}
   3f3fc:	b08d      	sub	sp, #52	; 0x34
   3f3fe:	460c      	mov	r4, r1
   3f400:	4616      	mov	r6, r2
   3f402:	461f      	mov	r7, r3
   3f404:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   3f408:	4605      	mov	r5, r0
   3f40a:	f001 f9f5 	bl	407f8 <_localeconv_r>
   3f40e:	f8d0 a000 	ldr.w	sl, [r0]
   3f412:	4650      	mov	r0, sl
   3f414:	f7dd ff22 	bl	1d25c <strlen>
   3f418:	2300      	movs	r3, #0
   3f41a:	f894 b018 	ldrb.w	fp, [r4, #24]
   3f41e:	ee08 0a10 	vmov	s16, r0
   3f422:	930a      	str	r3, [sp, #40]	; 0x28
   3f424:	6823      	ldr	r3, [r4, #0]
   3f426:	9305      	str	r3, [sp, #20]
   3f428:	f8d8 3000 	ldr.w	r3, [r8]
   3f42c:	3307      	adds	r3, #7
   3f42e:	f023 0307 	bic.w	r3, r3, #7
   3f432:	f103 0208 	add.w	r2, r3, #8
   3f436:	f8c8 2000 	str.w	r2, [r8]
   3f43a:	e9d3 2300 	ldrd	r2, r3, [r3]
   3f43e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   3f442:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   3f446:	f04f 32ff 	mov.w	r2, #4294967295
   3f44a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   3f44e:	f8cd 8018 	str.w	r8, [sp, #24]
   3f452:	9307      	str	r3, [sp, #28]
   3f454:	4b9e      	ldr	r3, [pc, #632]	; (3f6d0 <_printf_float+0x2dc>)
   3f456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   3f45a:	f7dd fea9 	bl	1d1b0 <__aeabi_dcmpun>
   3f45e:	bb88      	cbnz	r0, 3f4c4 <_printf_float+0xd0>
   3f460:	f04f 32ff 	mov.w	r2, #4294967295
   3f464:	4b9a      	ldr	r3, [pc, #616]	; (3f6d0 <_printf_float+0x2dc>)
   3f466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   3f46a:	f7dd fc21 	bl	1ccb0 <__aeabi_dcmple>
   3f46e:	bb48      	cbnz	r0, 3f4c4 <_printf_float+0xd0>
   3f470:	2200      	movs	r2, #0
   3f472:	2300      	movs	r3, #0
   3f474:	4640      	mov	r0, r8
   3f476:	4649      	mov	r1, r9
   3f478:	f7dd fc10 	bl	1cc9c <__aeabi_dcmplt>
   3f47c:	b110      	cbz	r0, 3f484 <_printf_float+0x90>
   3f47e:	232d      	movs	r3, #45	; 0x2d
   3f480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3f484:	4b93      	ldr	r3, [pc, #588]	; (3f6d4 <_printf_float+0x2e0>)
   3f486:	4894      	ldr	r0, [pc, #592]	; (3f6d8 <_printf_float+0x2e4>)
   3f488:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   3f48c:	bf94      	ite	ls
   3f48e:	4698      	movls	r8, r3
   3f490:	4680      	movhi	r8, r0
   3f492:	2303      	movs	r3, #3
   3f494:	f04f 0900 	mov.w	r9, #0
   3f498:	6123      	str	r3, [r4, #16]
   3f49a:	9b05      	ldr	r3, [sp, #20]
   3f49c:	f023 0204 	bic.w	r2, r3, #4
   3f4a0:	6022      	str	r2, [r4, #0]
   3f4a2:	4633      	mov	r3, r6
   3f4a4:	aa0b      	add	r2, sp, #44	; 0x2c
   3f4a6:	4621      	mov	r1, r4
   3f4a8:	4628      	mov	r0, r5
   3f4aa:	9700      	str	r7, [sp, #0]
   3f4ac:	f005 fd0c 	bl	44ec8 <_printf_common>
   3f4b0:	3001      	adds	r0, #1
   3f4b2:	f040 8090 	bne.w	3f5d6 <_printf_float+0x1e2>
   3f4b6:	f04f 30ff 	mov.w	r0, #4294967295
   3f4ba:	b00d      	add	sp, #52	; 0x34
   3f4bc:	ecbd 8b02 	vpop	{d8}
   3f4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f4c4:	4642      	mov	r2, r8
   3f4c6:	464b      	mov	r3, r9
   3f4c8:	4640      	mov	r0, r8
   3f4ca:	4649      	mov	r1, r9
   3f4cc:	f7dd fe70 	bl	1d1b0 <__aeabi_dcmpun>
   3f4d0:	b140      	cbz	r0, 3f4e4 <_printf_float+0xf0>
   3f4d2:	464b      	mov	r3, r9
   3f4d4:	4881      	ldr	r0, [pc, #516]	; (3f6dc <_printf_float+0x2e8>)
   3f4d6:	2b00      	cmp	r3, #0
   3f4d8:	bfbc      	itt	lt
   3f4da:	232d      	movlt	r3, #45	; 0x2d
   3f4dc:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3f4e0:	4b7f      	ldr	r3, [pc, #508]	; (3f6e0 <_printf_float+0x2ec>)
   3f4e2:	e7d1      	b.n	3f488 <_printf_float+0x94>
   3f4e4:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   3f4e8:	6863      	ldr	r3, [r4, #4]
   3f4ea:	9206      	str	r2, [sp, #24]
   3f4ec:	1c5a      	adds	r2, r3, #1
   3f4ee:	d13f      	bne.n	3f570 <_printf_float+0x17c>
   3f4f0:	2306      	movs	r3, #6
   3f4f2:	6063      	str	r3, [r4, #4]
   3f4f4:	9b05      	ldr	r3, [sp, #20]
   3f4f6:	4628      	mov	r0, r5
   3f4f8:	6861      	ldr	r1, [r4, #4]
   3f4fa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   3f4fe:	2300      	movs	r3, #0
   3f500:	9303      	str	r3, [sp, #12]
   3f502:	ab0a      	add	r3, sp, #40	; 0x28
   3f504:	6022      	str	r2, [r4, #0]
   3f506:	e9cd b301 	strd	fp, r3, [sp, #4]
   3f50a:	ab09      	add	r3, sp, #36	; 0x24
   3f50c:	ec49 8b10 	vmov	d0, r8, r9
   3f510:	9300      	str	r3, [sp, #0]
   3f512:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   3f516:	f005 fc37 	bl	44d88 <__cvt>
   3f51a:	9b06      	ldr	r3, [sp, #24]
   3f51c:	4680      	mov	r8, r0
   3f51e:	9909      	ldr	r1, [sp, #36]	; 0x24
   3f520:	2b47      	cmp	r3, #71	; 0x47
   3f522:	d108      	bne.n	3f536 <_printf_float+0x142>
   3f524:	1cc8      	adds	r0, r1, #3
   3f526:	db02      	blt.n	3f52e <_printf_float+0x13a>
   3f528:	6863      	ldr	r3, [r4, #4]
   3f52a:	4299      	cmp	r1, r3
   3f52c:	dd41      	ble.n	3f5b2 <_printf_float+0x1be>
   3f52e:	f1ab 0b02 	sub.w	fp, fp, #2
   3f532:	fa5f fb8b 	uxtb.w	fp, fp
   3f536:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3f53a:	d820      	bhi.n	3f57e <_printf_float+0x18a>
   3f53c:	3901      	subs	r1, #1
   3f53e:	465a      	mov	r2, fp
   3f540:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3f544:	9109      	str	r1, [sp, #36]	; 0x24
   3f546:	f005 fc81 	bl	44e4c <__exponent>
   3f54a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3f54c:	4681      	mov	r9, r0
   3f54e:	1813      	adds	r3, r2, r0
   3f550:	2a01      	cmp	r2, #1
   3f552:	6123      	str	r3, [r4, #16]
   3f554:	dc02      	bgt.n	3f55c <_printf_float+0x168>
   3f556:	6822      	ldr	r2, [r4, #0]
   3f558:	07d2      	lsls	r2, r2, #31
   3f55a:	d501      	bpl.n	3f560 <_printf_float+0x16c>
   3f55c:	3301      	adds	r3, #1
   3f55e:	6123      	str	r3, [r4, #16]
   3f560:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   3f564:	2b00      	cmp	r3, #0
   3f566:	d09c      	beq.n	3f4a2 <_printf_float+0xae>
   3f568:	232d      	movs	r3, #45	; 0x2d
   3f56a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3f56e:	e798      	b.n	3f4a2 <_printf_float+0xae>
   3f570:	9a06      	ldr	r2, [sp, #24]
   3f572:	2a47      	cmp	r2, #71	; 0x47
   3f574:	d1be      	bne.n	3f4f4 <_printf_float+0x100>
   3f576:	2b00      	cmp	r3, #0
   3f578:	d1bc      	bne.n	3f4f4 <_printf_float+0x100>
   3f57a:	2301      	movs	r3, #1
   3f57c:	e7b9      	b.n	3f4f2 <_printf_float+0xfe>
   3f57e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   3f582:	d118      	bne.n	3f5b6 <_printf_float+0x1c2>
   3f584:	2900      	cmp	r1, #0
   3f586:	6863      	ldr	r3, [r4, #4]
   3f588:	dd0b      	ble.n	3f5a2 <_printf_float+0x1ae>
   3f58a:	6121      	str	r1, [r4, #16]
   3f58c:	b913      	cbnz	r3, 3f594 <_printf_float+0x1a0>
   3f58e:	6822      	ldr	r2, [r4, #0]
   3f590:	07d0      	lsls	r0, r2, #31
   3f592:	d502      	bpl.n	3f59a <_printf_float+0x1a6>
   3f594:	3301      	adds	r3, #1
   3f596:	440b      	add	r3, r1
   3f598:	6123      	str	r3, [r4, #16]
   3f59a:	f04f 0900 	mov.w	r9, #0
   3f59e:	65a1      	str	r1, [r4, #88]	; 0x58
   3f5a0:	e7de      	b.n	3f560 <_printf_float+0x16c>
   3f5a2:	b913      	cbnz	r3, 3f5aa <_printf_float+0x1b6>
   3f5a4:	6822      	ldr	r2, [r4, #0]
   3f5a6:	07d2      	lsls	r2, r2, #31
   3f5a8:	d501      	bpl.n	3f5ae <_printf_float+0x1ba>
   3f5aa:	3302      	adds	r3, #2
   3f5ac:	e7f4      	b.n	3f598 <_printf_float+0x1a4>
   3f5ae:	2301      	movs	r3, #1
   3f5b0:	e7f2      	b.n	3f598 <_printf_float+0x1a4>
   3f5b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
   3f5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f5b8:	4299      	cmp	r1, r3
   3f5ba:	db05      	blt.n	3f5c8 <_printf_float+0x1d4>
   3f5bc:	6823      	ldr	r3, [r4, #0]
   3f5be:	6121      	str	r1, [r4, #16]
   3f5c0:	07d8      	lsls	r0, r3, #31
   3f5c2:	d5ea      	bpl.n	3f59a <_printf_float+0x1a6>
   3f5c4:	1c4b      	adds	r3, r1, #1
   3f5c6:	e7e7      	b.n	3f598 <_printf_float+0x1a4>
   3f5c8:	2900      	cmp	r1, #0
   3f5ca:	bfd4      	ite	le
   3f5cc:	f1c1 0202 	rsble	r2, r1, #2
   3f5d0:	2201      	movgt	r2, #1
   3f5d2:	4413      	add	r3, r2
   3f5d4:	e7e0      	b.n	3f598 <_printf_float+0x1a4>
   3f5d6:	6823      	ldr	r3, [r4, #0]
   3f5d8:	055a      	lsls	r2, r3, #21
   3f5da:	d407      	bmi.n	3f5ec <_printf_float+0x1f8>
   3f5dc:	6923      	ldr	r3, [r4, #16]
   3f5de:	4642      	mov	r2, r8
   3f5e0:	4631      	mov	r1, r6
   3f5e2:	4628      	mov	r0, r5
   3f5e4:	47b8      	blx	r7
   3f5e6:	3001      	adds	r0, #1
   3f5e8:	d12c      	bne.n	3f644 <_printf_float+0x250>
   3f5ea:	e764      	b.n	3f4b6 <_printf_float+0xc2>
   3f5ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3f5f0:	f240 80e0 	bls.w	3f7b4 <_printf_float+0x3c0>
   3f5f4:	2200      	movs	r2, #0
   3f5f6:	2300      	movs	r3, #0
   3f5f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3f5fc:	f7dd fb44 	bl	1cc88 <__aeabi_dcmpeq>
   3f600:	2800      	cmp	r0, #0
   3f602:	d034      	beq.n	3f66e <_printf_float+0x27a>
   3f604:	2301      	movs	r3, #1
   3f606:	4a37      	ldr	r2, [pc, #220]	; (3f6e4 <_printf_float+0x2f0>)
   3f608:	4631      	mov	r1, r6
   3f60a:	4628      	mov	r0, r5
   3f60c:	47b8      	blx	r7
   3f60e:	3001      	adds	r0, #1
   3f610:	f43f af51 	beq.w	3f4b6 <_printf_float+0xc2>
   3f614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3f618:	429a      	cmp	r2, r3
   3f61a:	db02      	blt.n	3f622 <_printf_float+0x22e>
   3f61c:	6823      	ldr	r3, [r4, #0]
   3f61e:	07d8      	lsls	r0, r3, #31
   3f620:	d510      	bpl.n	3f644 <_printf_float+0x250>
   3f622:	ee18 3a10 	vmov	r3, s16
   3f626:	4652      	mov	r2, sl
   3f628:	4631      	mov	r1, r6
   3f62a:	4628      	mov	r0, r5
   3f62c:	47b8      	blx	r7
   3f62e:	3001      	adds	r0, #1
   3f630:	f43f af41 	beq.w	3f4b6 <_printf_float+0xc2>
   3f634:	f04f 0800 	mov.w	r8, #0
   3f638:	f104 091a 	add.w	r9, r4, #26
   3f63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f63e:	3b01      	subs	r3, #1
   3f640:	4543      	cmp	r3, r8
   3f642:	dc09      	bgt.n	3f658 <_printf_float+0x264>
   3f644:	6823      	ldr	r3, [r4, #0]
   3f646:	079b      	lsls	r3, r3, #30
   3f648:	f100 8105 	bmi.w	3f856 <_printf_float+0x462>
   3f64c:	68e0      	ldr	r0, [r4, #12]
   3f64e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3f650:	4298      	cmp	r0, r3
   3f652:	bfb8      	it	lt
   3f654:	4618      	movlt	r0, r3
   3f656:	e730      	b.n	3f4ba <_printf_float+0xc6>
   3f658:	2301      	movs	r3, #1
   3f65a:	464a      	mov	r2, r9
   3f65c:	4631      	mov	r1, r6
   3f65e:	4628      	mov	r0, r5
   3f660:	47b8      	blx	r7
   3f662:	3001      	adds	r0, #1
   3f664:	f43f af27 	beq.w	3f4b6 <_printf_float+0xc2>
   3f668:	f108 0801 	add.w	r8, r8, #1
   3f66c:	e7e6      	b.n	3f63c <_printf_float+0x248>
   3f66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3f670:	2b00      	cmp	r3, #0
   3f672:	dc39      	bgt.n	3f6e8 <_printf_float+0x2f4>
   3f674:	2301      	movs	r3, #1
   3f676:	4a1b      	ldr	r2, [pc, #108]	; (3f6e4 <_printf_float+0x2f0>)
   3f678:	4631      	mov	r1, r6
   3f67a:	4628      	mov	r0, r5
   3f67c:	47b8      	blx	r7
   3f67e:	3001      	adds	r0, #1
   3f680:	f43f af19 	beq.w	3f4b6 <_printf_float+0xc2>
   3f684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3f688:	4313      	orrs	r3, r2
   3f68a:	d102      	bne.n	3f692 <_printf_float+0x29e>
   3f68c:	6823      	ldr	r3, [r4, #0]
   3f68e:	07d9      	lsls	r1, r3, #31
   3f690:	d5d8      	bpl.n	3f644 <_printf_float+0x250>
   3f692:	ee18 3a10 	vmov	r3, s16
   3f696:	4652      	mov	r2, sl
   3f698:	4631      	mov	r1, r6
   3f69a:	4628      	mov	r0, r5
   3f69c:	47b8      	blx	r7
   3f69e:	3001      	adds	r0, #1
   3f6a0:	f43f af09 	beq.w	3f4b6 <_printf_float+0xc2>
   3f6a4:	f04f 0900 	mov.w	r9, #0
   3f6a8:	f104 0a1a 	add.w	sl, r4, #26
   3f6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3f6ae:	425b      	negs	r3, r3
   3f6b0:	454b      	cmp	r3, r9
   3f6b2:	dc01      	bgt.n	3f6b8 <_printf_float+0x2c4>
   3f6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f6b6:	e792      	b.n	3f5de <_printf_float+0x1ea>
   3f6b8:	2301      	movs	r3, #1
   3f6ba:	4652      	mov	r2, sl
   3f6bc:	4631      	mov	r1, r6
   3f6be:	4628      	mov	r0, r5
   3f6c0:	47b8      	blx	r7
   3f6c2:	3001      	adds	r0, #1
   3f6c4:	f43f aef7 	beq.w	3f4b6 <_printf_float+0xc2>
   3f6c8:	f109 0901 	add.w	r9, r9, #1
   3f6cc:	e7ee      	b.n	3f6ac <_printf_float+0x2b8>
   3f6ce:	bf00      	nop
   3f6d0:	7fefffff 	.word	0x7fefffff
   3f6d4:	0004f46c 	.word	0x0004f46c
   3f6d8:	00048ef3 	.word	0x00048ef3
   3f6dc:	0004f474 	.word	0x0004f474
   3f6e0:	0004f470 	.word	0x0004f470
   3f6e4:	0004ef58 	.word	0x0004ef58
   3f6e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3f6ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3f6ec:	429a      	cmp	r2, r3
   3f6ee:	bfa8      	it	ge
   3f6f0:	461a      	movge	r2, r3
   3f6f2:	2a00      	cmp	r2, #0
   3f6f4:	4691      	mov	r9, r2
   3f6f6:	dc37      	bgt.n	3f768 <_printf_float+0x374>
   3f6f8:	f04f 0b00 	mov.w	fp, #0
   3f6fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3f700:	f104 021a 	add.w	r2, r4, #26
   3f704:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3f706:	9305      	str	r3, [sp, #20]
   3f708:	eba3 0309 	sub.w	r3, r3, r9
   3f70c:	455b      	cmp	r3, fp
   3f70e:	dc33      	bgt.n	3f778 <_printf_float+0x384>
   3f710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3f714:	429a      	cmp	r2, r3
   3f716:	db3b      	blt.n	3f790 <_printf_float+0x39c>
   3f718:	6823      	ldr	r3, [r4, #0]
   3f71a:	07da      	lsls	r2, r3, #31
   3f71c:	d438      	bmi.n	3f790 <_printf_float+0x39c>
   3f71e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3f720:	9b05      	ldr	r3, [sp, #20]
   3f722:	9909      	ldr	r1, [sp, #36]	; 0x24
   3f724:	1ad3      	subs	r3, r2, r3
   3f726:	eba2 0901 	sub.w	r9, r2, r1
   3f72a:	4599      	cmp	r9, r3
   3f72c:	bfa8      	it	ge
   3f72e:	4699      	movge	r9, r3
   3f730:	f1b9 0f00 	cmp.w	r9, #0
   3f734:	dc35      	bgt.n	3f7a2 <_printf_float+0x3ae>
   3f736:	f04f 0800 	mov.w	r8, #0
   3f73a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3f73e:	f104 0a1a 	add.w	sl, r4, #26
   3f742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3f746:	1a9b      	subs	r3, r3, r2
   3f748:	eba3 0309 	sub.w	r3, r3, r9
   3f74c:	4543      	cmp	r3, r8
   3f74e:	f77f af79 	ble.w	3f644 <_printf_float+0x250>
   3f752:	2301      	movs	r3, #1
   3f754:	4652      	mov	r2, sl
   3f756:	4631      	mov	r1, r6
   3f758:	4628      	mov	r0, r5
   3f75a:	47b8      	blx	r7
   3f75c:	3001      	adds	r0, #1
   3f75e:	f43f aeaa 	beq.w	3f4b6 <_printf_float+0xc2>
   3f762:	f108 0801 	add.w	r8, r8, #1
   3f766:	e7ec      	b.n	3f742 <_printf_float+0x34e>
   3f768:	4613      	mov	r3, r2
   3f76a:	4631      	mov	r1, r6
   3f76c:	4642      	mov	r2, r8
   3f76e:	4628      	mov	r0, r5
   3f770:	47b8      	blx	r7
   3f772:	3001      	adds	r0, #1
   3f774:	d1c0      	bne.n	3f6f8 <_printf_float+0x304>
   3f776:	e69e      	b.n	3f4b6 <_printf_float+0xc2>
   3f778:	2301      	movs	r3, #1
   3f77a:	4631      	mov	r1, r6
   3f77c:	4628      	mov	r0, r5
   3f77e:	9205      	str	r2, [sp, #20]
   3f780:	47b8      	blx	r7
   3f782:	3001      	adds	r0, #1
   3f784:	f43f ae97 	beq.w	3f4b6 <_printf_float+0xc2>
   3f788:	f10b 0b01 	add.w	fp, fp, #1
   3f78c:	9a05      	ldr	r2, [sp, #20]
   3f78e:	e7b9      	b.n	3f704 <_printf_float+0x310>
   3f790:	ee18 3a10 	vmov	r3, s16
   3f794:	4652      	mov	r2, sl
   3f796:	4631      	mov	r1, r6
   3f798:	4628      	mov	r0, r5
   3f79a:	47b8      	blx	r7
   3f79c:	3001      	adds	r0, #1
   3f79e:	d1be      	bne.n	3f71e <_printf_float+0x32a>
   3f7a0:	e689      	b.n	3f4b6 <_printf_float+0xc2>
   3f7a2:	9a05      	ldr	r2, [sp, #20]
   3f7a4:	464b      	mov	r3, r9
   3f7a6:	4631      	mov	r1, r6
   3f7a8:	4628      	mov	r0, r5
   3f7aa:	4442      	add	r2, r8
   3f7ac:	47b8      	blx	r7
   3f7ae:	3001      	adds	r0, #1
   3f7b0:	d1c1      	bne.n	3f736 <_printf_float+0x342>
   3f7b2:	e680      	b.n	3f4b6 <_printf_float+0xc2>
   3f7b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3f7b6:	2a01      	cmp	r2, #1
   3f7b8:	dc01      	bgt.n	3f7be <_printf_float+0x3ca>
   3f7ba:	07db      	lsls	r3, r3, #31
   3f7bc:	d538      	bpl.n	3f830 <_printf_float+0x43c>
   3f7be:	2301      	movs	r3, #1
   3f7c0:	4642      	mov	r2, r8
   3f7c2:	4631      	mov	r1, r6
   3f7c4:	4628      	mov	r0, r5
   3f7c6:	47b8      	blx	r7
   3f7c8:	3001      	adds	r0, #1
   3f7ca:	f43f ae74 	beq.w	3f4b6 <_printf_float+0xc2>
   3f7ce:	ee18 3a10 	vmov	r3, s16
   3f7d2:	4652      	mov	r2, sl
   3f7d4:	4631      	mov	r1, r6
   3f7d6:	4628      	mov	r0, r5
   3f7d8:	47b8      	blx	r7
   3f7da:	3001      	adds	r0, #1
   3f7dc:	f43f ae6b 	beq.w	3f4b6 <_printf_float+0xc2>
   3f7e0:	2200      	movs	r2, #0
   3f7e2:	2300      	movs	r3, #0
   3f7e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3f7e8:	f7dd fa4e 	bl	1cc88 <__aeabi_dcmpeq>
   3f7ec:	b9d8      	cbnz	r0, 3f826 <_printf_float+0x432>
   3f7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f7f0:	f108 0201 	add.w	r2, r8, #1
   3f7f4:	3b01      	subs	r3, #1
   3f7f6:	4631      	mov	r1, r6
   3f7f8:	4628      	mov	r0, r5
   3f7fa:	47b8      	blx	r7
   3f7fc:	3001      	adds	r0, #1
   3f7fe:	d10e      	bne.n	3f81e <_printf_float+0x42a>
   3f800:	e659      	b.n	3f4b6 <_printf_float+0xc2>
   3f802:	2301      	movs	r3, #1
   3f804:	4652      	mov	r2, sl
   3f806:	4631      	mov	r1, r6
   3f808:	4628      	mov	r0, r5
   3f80a:	47b8      	blx	r7
   3f80c:	3001      	adds	r0, #1
   3f80e:	f43f ae52 	beq.w	3f4b6 <_printf_float+0xc2>
   3f812:	f108 0801 	add.w	r8, r8, #1
   3f816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f818:	3b01      	subs	r3, #1
   3f81a:	4543      	cmp	r3, r8
   3f81c:	dcf1      	bgt.n	3f802 <_printf_float+0x40e>
   3f81e:	464b      	mov	r3, r9
   3f820:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3f824:	e6dc      	b.n	3f5e0 <_printf_float+0x1ec>
   3f826:	f04f 0800 	mov.w	r8, #0
   3f82a:	f104 0a1a 	add.w	sl, r4, #26
   3f82e:	e7f2      	b.n	3f816 <_printf_float+0x422>
   3f830:	2301      	movs	r3, #1
   3f832:	4642      	mov	r2, r8
   3f834:	e7df      	b.n	3f7f6 <_printf_float+0x402>
   3f836:	2301      	movs	r3, #1
   3f838:	464a      	mov	r2, r9
   3f83a:	4631      	mov	r1, r6
   3f83c:	4628      	mov	r0, r5
   3f83e:	47b8      	blx	r7
   3f840:	3001      	adds	r0, #1
   3f842:	f43f ae38 	beq.w	3f4b6 <_printf_float+0xc2>
   3f846:	f108 0801 	add.w	r8, r8, #1
   3f84a:	68e3      	ldr	r3, [r4, #12]
   3f84c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3f84e:	1a5b      	subs	r3, r3, r1
   3f850:	4543      	cmp	r3, r8
   3f852:	dcf0      	bgt.n	3f836 <_printf_float+0x442>
   3f854:	e6fa      	b.n	3f64c <_printf_float+0x258>
   3f856:	f04f 0800 	mov.w	r8, #0
   3f85a:	f104 0919 	add.w	r9, r4, #25
   3f85e:	e7f4      	b.n	3f84a <_printf_float+0x456>

0003f860 <_printf_i>:
   3f860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   3f864:	460c      	mov	r4, r1
   3f866:	4691      	mov	r9, r2
   3f868:	4680      	mov	r8, r0
   3f86a:	469a      	mov	sl, r3
   3f86c:	7e27      	ldrb	r7, [r4, #24]
   3f86e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3f872:	990c      	ldr	r1, [sp, #48]	; 0x30
   3f874:	2f78      	cmp	r7, #120	; 0x78
   3f876:	d807      	bhi.n	3f888 <_printf_i+0x28>
   3f878:	2f62      	cmp	r7, #98	; 0x62
   3f87a:	d80a      	bhi.n	3f892 <_printf_i+0x32>
   3f87c:	2f00      	cmp	r7, #0
   3f87e:	f000 80d8 	beq.w	3fa32 <_printf_i+0x1d2>
   3f882:	2f58      	cmp	r7, #88	; 0x58
   3f884:	f000 80a3 	beq.w	3f9ce <_printf_i+0x16e>
   3f888:	f104 0642 	add.w	r6, r4, #66	; 0x42
   3f88c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   3f890:	e03a      	b.n	3f908 <_printf_i+0xa8>
   3f892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   3f896:	2b15      	cmp	r3, #21
   3f898:	d8f6      	bhi.n	3f888 <_printf_i+0x28>
   3f89a:	a001      	add	r0, pc, #4	; (adr r0, 3f8a0 <_printf_i+0x40>)
   3f89c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   3f8a0:	0003f8f9 	.word	0x0003f8f9
   3f8a4:	0003f90d 	.word	0x0003f90d
   3f8a8:	0003f889 	.word	0x0003f889
   3f8ac:	0003f889 	.word	0x0003f889
   3f8b0:	0003f889 	.word	0x0003f889
   3f8b4:	0003f889 	.word	0x0003f889
   3f8b8:	0003f90d 	.word	0x0003f90d
   3f8bc:	0003f889 	.word	0x0003f889
   3f8c0:	0003f889 	.word	0x0003f889
   3f8c4:	0003f889 	.word	0x0003f889
   3f8c8:	0003f889 	.word	0x0003f889
   3f8cc:	0003fa19 	.word	0x0003fa19
   3f8d0:	0003f93d 	.word	0x0003f93d
   3f8d4:	0003f9fb 	.word	0x0003f9fb
   3f8d8:	0003f889 	.word	0x0003f889
   3f8dc:	0003f889 	.word	0x0003f889
   3f8e0:	0003fa3b 	.word	0x0003fa3b
   3f8e4:	0003f889 	.word	0x0003f889
   3f8e8:	0003f93d 	.word	0x0003f93d
   3f8ec:	0003f889 	.word	0x0003f889
   3f8f0:	0003f889 	.word	0x0003f889
   3f8f4:	0003fa03 	.word	0x0003fa03
   3f8f8:	680b      	ldr	r3, [r1, #0]
   3f8fa:	f104 0642 	add.w	r6, r4, #66	; 0x42
   3f8fe:	1d1a      	adds	r2, r3, #4
   3f900:	681b      	ldr	r3, [r3, #0]
   3f902:	600a      	str	r2, [r1, #0]
   3f904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3f908:	2301      	movs	r3, #1
   3f90a:	e0a3      	b.n	3fa54 <_printf_i+0x1f4>
   3f90c:	6825      	ldr	r5, [r4, #0]
   3f90e:	6808      	ldr	r0, [r1, #0]
   3f910:	062e      	lsls	r6, r5, #24
   3f912:	f100 0304 	add.w	r3, r0, #4
   3f916:	d50a      	bpl.n	3f92e <_printf_i+0xce>
   3f918:	6805      	ldr	r5, [r0, #0]
   3f91a:	600b      	str	r3, [r1, #0]
   3f91c:	2d00      	cmp	r5, #0
   3f91e:	da03      	bge.n	3f928 <_printf_i+0xc8>
   3f920:	232d      	movs	r3, #45	; 0x2d
   3f922:	426d      	negs	r5, r5
   3f924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3f928:	485e      	ldr	r0, [pc, #376]	; (3faa4 <_printf_i+0x244>)
   3f92a:	230a      	movs	r3, #10
   3f92c:	e019      	b.n	3f962 <_printf_i+0x102>
   3f92e:	f015 0f40 	tst.w	r5, #64	; 0x40
   3f932:	6805      	ldr	r5, [r0, #0]
   3f934:	600b      	str	r3, [r1, #0]
   3f936:	bf18      	it	ne
   3f938:	b22d      	sxthne	r5, r5
   3f93a:	e7ef      	b.n	3f91c <_printf_i+0xbc>
   3f93c:	680b      	ldr	r3, [r1, #0]
   3f93e:	6825      	ldr	r5, [r4, #0]
   3f940:	1d18      	adds	r0, r3, #4
   3f942:	6008      	str	r0, [r1, #0]
   3f944:	0628      	lsls	r0, r5, #24
   3f946:	d501      	bpl.n	3f94c <_printf_i+0xec>
   3f948:	681d      	ldr	r5, [r3, #0]
   3f94a:	e002      	b.n	3f952 <_printf_i+0xf2>
   3f94c:	0669      	lsls	r1, r5, #25
   3f94e:	d5fb      	bpl.n	3f948 <_printf_i+0xe8>
   3f950:	881d      	ldrh	r5, [r3, #0]
   3f952:	2f6f      	cmp	r7, #111	; 0x6f
   3f954:	4853      	ldr	r0, [pc, #332]	; (3faa4 <_printf_i+0x244>)
   3f956:	bf0c      	ite	eq
   3f958:	2308      	moveq	r3, #8
   3f95a:	230a      	movne	r3, #10
   3f95c:	2100      	movs	r1, #0
   3f95e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3f962:	6866      	ldr	r6, [r4, #4]
   3f964:	2e00      	cmp	r6, #0
   3f966:	60a6      	str	r6, [r4, #8]
   3f968:	bfa2      	ittt	ge
   3f96a:	6821      	ldrge	r1, [r4, #0]
   3f96c:	f021 0104 	bicge.w	r1, r1, #4
   3f970:	6021      	strge	r1, [r4, #0]
   3f972:	b90d      	cbnz	r5, 3f978 <_printf_i+0x118>
   3f974:	2e00      	cmp	r6, #0
   3f976:	d04d      	beq.n	3fa14 <_printf_i+0x1b4>
   3f978:	4616      	mov	r6, r2
   3f97a:	fbb5 f1f3 	udiv	r1, r5, r3
   3f97e:	fb03 5711 	mls	r7, r3, r1, r5
   3f982:	5dc7      	ldrb	r7, [r0, r7]
   3f984:	f806 7d01 	strb.w	r7, [r6, #-1]!
   3f988:	462f      	mov	r7, r5
   3f98a:	460d      	mov	r5, r1
   3f98c:	42bb      	cmp	r3, r7
   3f98e:	d9f4      	bls.n	3f97a <_printf_i+0x11a>
   3f990:	2b08      	cmp	r3, #8
   3f992:	d10b      	bne.n	3f9ac <_printf_i+0x14c>
   3f994:	6823      	ldr	r3, [r4, #0]
   3f996:	07df      	lsls	r7, r3, #31
   3f998:	d508      	bpl.n	3f9ac <_printf_i+0x14c>
   3f99a:	6923      	ldr	r3, [r4, #16]
   3f99c:	6861      	ldr	r1, [r4, #4]
   3f99e:	4299      	cmp	r1, r3
   3f9a0:	bfde      	ittt	le
   3f9a2:	2330      	movle	r3, #48	; 0x30
   3f9a4:	f806 3c01 	strble.w	r3, [r6, #-1]
   3f9a8:	f106 36ff 	addle.w	r6, r6, #4294967295
   3f9ac:	1b92      	subs	r2, r2, r6
   3f9ae:	6122      	str	r2, [r4, #16]
   3f9b0:	464b      	mov	r3, r9
   3f9b2:	aa03      	add	r2, sp, #12
   3f9b4:	4621      	mov	r1, r4
   3f9b6:	4640      	mov	r0, r8
   3f9b8:	f8cd a000 	str.w	sl, [sp]
   3f9bc:	f005 fa84 	bl	44ec8 <_printf_common>
   3f9c0:	3001      	adds	r0, #1
   3f9c2:	d14c      	bne.n	3fa5e <_printf_i+0x1fe>
   3f9c4:	f04f 30ff 	mov.w	r0, #4294967295
   3f9c8:	b004      	add	sp, #16
   3f9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3f9ce:	4835      	ldr	r0, [pc, #212]	; (3faa4 <_printf_i+0x244>)
   3f9d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   3f9d4:	6823      	ldr	r3, [r4, #0]
   3f9d6:	680e      	ldr	r6, [r1, #0]
   3f9d8:	061f      	lsls	r7, r3, #24
   3f9da:	f856 5b04 	ldr.w	r5, [r6], #4
   3f9de:	600e      	str	r6, [r1, #0]
   3f9e0:	d514      	bpl.n	3fa0c <_printf_i+0x1ac>
   3f9e2:	07d9      	lsls	r1, r3, #31
   3f9e4:	bf44      	itt	mi
   3f9e6:	f043 0320 	orrmi.w	r3, r3, #32
   3f9ea:	6023      	strmi	r3, [r4, #0]
   3f9ec:	b91d      	cbnz	r5, 3f9f6 <_printf_i+0x196>
   3f9ee:	6823      	ldr	r3, [r4, #0]
   3f9f0:	f023 0320 	bic.w	r3, r3, #32
   3f9f4:	6023      	str	r3, [r4, #0]
   3f9f6:	2310      	movs	r3, #16
   3f9f8:	e7b0      	b.n	3f95c <_printf_i+0xfc>
   3f9fa:	6823      	ldr	r3, [r4, #0]
   3f9fc:	f043 0320 	orr.w	r3, r3, #32
   3fa00:	6023      	str	r3, [r4, #0]
   3fa02:	2378      	movs	r3, #120	; 0x78
   3fa04:	4828      	ldr	r0, [pc, #160]	; (3faa8 <_printf_i+0x248>)
   3fa06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   3fa0a:	e7e3      	b.n	3f9d4 <_printf_i+0x174>
   3fa0c:	065e      	lsls	r6, r3, #25
   3fa0e:	bf48      	it	mi
   3fa10:	b2ad      	uxthmi	r5, r5
   3fa12:	e7e6      	b.n	3f9e2 <_printf_i+0x182>
   3fa14:	4616      	mov	r6, r2
   3fa16:	e7bb      	b.n	3f990 <_printf_i+0x130>
   3fa18:	680b      	ldr	r3, [r1, #0]
   3fa1a:	6826      	ldr	r6, [r4, #0]
   3fa1c:	1d1d      	adds	r5, r3, #4
   3fa1e:	6960      	ldr	r0, [r4, #20]
   3fa20:	600d      	str	r5, [r1, #0]
   3fa22:	0635      	lsls	r5, r6, #24
   3fa24:	681b      	ldr	r3, [r3, #0]
   3fa26:	d501      	bpl.n	3fa2c <_printf_i+0x1cc>
   3fa28:	6018      	str	r0, [r3, #0]
   3fa2a:	e002      	b.n	3fa32 <_printf_i+0x1d2>
   3fa2c:	0671      	lsls	r1, r6, #25
   3fa2e:	d5fb      	bpl.n	3fa28 <_printf_i+0x1c8>
   3fa30:	8018      	strh	r0, [r3, #0]
   3fa32:	2300      	movs	r3, #0
   3fa34:	4616      	mov	r6, r2
   3fa36:	6123      	str	r3, [r4, #16]
   3fa38:	e7ba      	b.n	3f9b0 <_printf_i+0x150>
   3fa3a:	680b      	ldr	r3, [r1, #0]
   3fa3c:	1d1a      	adds	r2, r3, #4
   3fa3e:	600a      	str	r2, [r1, #0]
   3fa40:	2100      	movs	r1, #0
   3fa42:	681e      	ldr	r6, [r3, #0]
   3fa44:	6862      	ldr	r2, [r4, #4]
   3fa46:	4630      	mov	r0, r6
   3fa48:	f005 f931 	bl	44cae <memchr>
   3fa4c:	b108      	cbz	r0, 3fa52 <_printf_i+0x1f2>
   3fa4e:	1b80      	subs	r0, r0, r6
   3fa50:	6060      	str	r0, [r4, #4]
   3fa52:	6863      	ldr	r3, [r4, #4]
   3fa54:	6123      	str	r3, [r4, #16]
   3fa56:	2300      	movs	r3, #0
   3fa58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3fa5c:	e7a8      	b.n	3f9b0 <_printf_i+0x150>
   3fa5e:	6923      	ldr	r3, [r4, #16]
   3fa60:	4632      	mov	r2, r6
   3fa62:	4649      	mov	r1, r9
   3fa64:	4640      	mov	r0, r8
   3fa66:	47d0      	blx	sl
   3fa68:	3001      	adds	r0, #1
   3fa6a:	d0ab      	beq.n	3f9c4 <_printf_i+0x164>
   3fa6c:	6823      	ldr	r3, [r4, #0]
   3fa6e:	079b      	lsls	r3, r3, #30
   3fa70:	d413      	bmi.n	3fa9a <_printf_i+0x23a>
   3fa72:	68e0      	ldr	r0, [r4, #12]
   3fa74:	9b03      	ldr	r3, [sp, #12]
   3fa76:	4298      	cmp	r0, r3
   3fa78:	bfb8      	it	lt
   3fa7a:	4618      	movlt	r0, r3
   3fa7c:	e7a4      	b.n	3f9c8 <_printf_i+0x168>
   3fa7e:	2301      	movs	r3, #1
   3fa80:	4632      	mov	r2, r6
   3fa82:	4649      	mov	r1, r9
   3fa84:	4640      	mov	r0, r8
   3fa86:	47d0      	blx	sl
   3fa88:	3001      	adds	r0, #1
   3fa8a:	d09b      	beq.n	3f9c4 <_printf_i+0x164>
   3fa8c:	3501      	adds	r5, #1
   3fa8e:	68e3      	ldr	r3, [r4, #12]
   3fa90:	9903      	ldr	r1, [sp, #12]
   3fa92:	1a5b      	subs	r3, r3, r1
   3fa94:	42ab      	cmp	r3, r5
   3fa96:	dcf2      	bgt.n	3fa7e <_printf_i+0x21e>
   3fa98:	e7eb      	b.n	3fa72 <_printf_i+0x212>
   3fa9a:	2500      	movs	r5, #0
   3fa9c:	f104 0619 	add.w	r6, r4, #25
   3faa0:	e7f5      	b.n	3fa8e <_printf_i+0x22e>
   3faa2:	bf00      	nop
   3faa4:	0004f478 	.word	0x0004f478
   3faa8:	00048b38 	.word	0x00048b38

0003faac <srand>:
   3faac:	b538      	push	{r3, r4, r5, lr}
   3faae:	4b0d      	ldr	r3, [pc, #52]	; (3fae4 <srand+0x38>)
   3fab0:	4604      	mov	r4, r0
   3fab2:	681d      	ldr	r5, [r3, #0]
   3fab4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   3fab6:	b97b      	cbnz	r3, 3fad8 <srand+0x2c>
   3fab8:	2018      	movs	r0, #24
   3faba:	f7ff fab1 	bl	3f020 <malloc>
   3fabe:	4a0a      	ldr	r2, [pc, #40]	; (3fae8 <srand+0x3c>)
   3fac0:	4b0a      	ldr	r3, [pc, #40]	; (3faec <srand+0x40>)
   3fac2:	63a8      	str	r0, [r5, #56]	; 0x38
   3fac4:	e9c0 2300 	strd	r2, r3, [r0]
   3fac8:	4b09      	ldr	r3, [pc, #36]	; (3faf0 <srand+0x44>)
   3faca:	2201      	movs	r2, #1
   3facc:	6083      	str	r3, [r0, #8]
   3face:	230b      	movs	r3, #11
   3fad0:	8183      	strh	r3, [r0, #12]
   3fad2:	2300      	movs	r3, #0
   3fad4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3fad8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   3fada:	2200      	movs	r2, #0
   3fadc:	611c      	str	r4, [r3, #16]
   3fade:	615a      	str	r2, [r3, #20]
   3fae0:	bd38      	pop	{r3, r4, r5, pc}
   3fae2:	bf00      	nop
   3fae4:	20020760 	.word	0x20020760
   3fae8:	abcd330e 	.word	0xabcd330e
   3faec:	e66d1234 	.word	0xe66d1234
   3faf0:	0005deec 	.word	0x0005deec

0003faf4 <rand>:
   3faf4:	4b13      	ldr	r3, [pc, #76]	; (3fb44 <rand+0x50>)
   3faf6:	b510      	push	{r4, lr}
   3faf8:	681c      	ldr	r4, [r3, #0]
   3fafa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3fafc:	b97b      	cbnz	r3, 3fb1e <rand+0x2a>
   3fafe:	2018      	movs	r0, #24
   3fb00:	f7ff fa8e 	bl	3f020 <malloc>
   3fb04:	4a10      	ldr	r2, [pc, #64]	; (3fb48 <rand+0x54>)
   3fb06:	4b11      	ldr	r3, [pc, #68]	; (3fb4c <rand+0x58>)
   3fb08:	63a0      	str	r0, [r4, #56]	; 0x38
   3fb0a:	e9c0 2300 	strd	r2, r3, [r0]
   3fb0e:	4b10      	ldr	r3, [pc, #64]	; (3fb50 <rand+0x5c>)
   3fb10:	2201      	movs	r2, #1
   3fb12:	6083      	str	r3, [r0, #8]
   3fb14:	230b      	movs	r3, #11
   3fb16:	8183      	strh	r3, [r0, #12]
   3fb18:	2300      	movs	r3, #0
   3fb1a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3fb1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   3fb20:	480c      	ldr	r0, [pc, #48]	; (3fb54 <rand+0x60>)
   3fb22:	690a      	ldr	r2, [r1, #16]
   3fb24:	694b      	ldr	r3, [r1, #20]
   3fb26:	4c0c      	ldr	r4, [pc, #48]	; (3fb58 <rand+0x64>)
   3fb28:	4350      	muls	r0, r2
   3fb2a:	fb04 0003 	mla	r0, r4, r3, r0
   3fb2e:	fba2 3404 	umull	r3, r4, r2, r4
   3fb32:	1c5a      	adds	r2, r3, #1
   3fb34:	4404      	add	r4, r0
   3fb36:	f144 0000 	adc.w	r0, r4, #0
   3fb3a:	e9c1 2004 	strd	r2, r0, [r1, #16]
   3fb3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   3fb42:	bd10      	pop	{r4, pc}
   3fb44:	20020760 	.word	0x20020760
   3fb48:	abcd330e 	.word	0xabcd330e
   3fb4c:	e66d1234 	.word	0xe66d1234
   3fb50:	0005deec 	.word	0x0005deec
   3fb54:	5851f42d 	.word	0x5851f42d
   3fb58:	4c957f2d 	.word	0x4c957f2d

0003fb5c <realloc>:
   3fb5c:	4b02      	ldr	r3, [pc, #8]	; (3fb68 <realloc+0xc>)
   3fb5e:	460a      	mov	r2, r1
   3fb60:	4601      	mov	r1, r0
   3fb62:	6818      	ldr	r0, [r3, #0]
   3fb64:	f006 b924 	b.w	45db0 <_realloc_r>
   3fb68:	20020760 	.word	0x20020760

0003fb6c <_sbrk_r>:
   3fb6c:	b538      	push	{r3, r4, r5, lr}
   3fb6e:	2300      	movs	r3, #0
   3fb70:	4d05      	ldr	r5, [pc, #20]	; (3fb88 <_sbrk_r+0x1c>)
   3fb72:	4604      	mov	r4, r0
   3fb74:	4608      	mov	r0, r1
   3fb76:	602b      	str	r3, [r5, #0]
   3fb78:	f7e7 feee 	bl	27958 <_sbrk>
   3fb7c:	1c43      	adds	r3, r0, #1
   3fb7e:	d102      	bne.n	3fb86 <_sbrk_r+0x1a>
   3fb80:	682b      	ldr	r3, [r5, #0]
   3fb82:	b103      	cbz	r3, 3fb86 <_sbrk_r+0x1a>
   3fb84:	6023      	str	r3, [r4, #0]
   3fb86:	bd38      	pop	{r3, r4, r5, pc}
   3fb88:	2002d828 	.word	0x2002d828

0003fb8c <sniprintf>:
   3fb8c:	b40c      	push	{r2, r3}
   3fb8e:	4b18      	ldr	r3, [pc, #96]	; (3fbf0 <sniprintf+0x64>)
   3fb90:	b530      	push	{r4, r5, lr}
   3fb92:	1e0c      	subs	r4, r1, #0
   3fb94:	b09d      	sub	sp, #116	; 0x74
   3fb96:	681d      	ldr	r5, [r3, #0]
   3fb98:	da08      	bge.n	3fbac <sniprintf+0x20>
   3fb9a:	238b      	movs	r3, #139	; 0x8b
   3fb9c:	f04f 30ff 	mov.w	r0, #4294967295
   3fba0:	602b      	str	r3, [r5, #0]
   3fba2:	b01d      	add	sp, #116	; 0x74
   3fba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3fba8:	b002      	add	sp, #8
   3fbaa:	4770      	bx	lr
   3fbac:	f44f 7302 	mov.w	r3, #520	; 0x208
   3fbb0:	9002      	str	r0, [sp, #8]
   3fbb2:	9006      	str	r0, [sp, #24]
   3fbb4:	a902      	add	r1, sp, #8
   3fbb6:	f8ad 3014 	strh.w	r3, [sp, #20]
   3fbba:	bf14      	ite	ne
   3fbbc:	f104 33ff 	addne.w	r3, r4, #4294967295
   3fbc0:	4623      	moveq	r3, r4
   3fbc2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3fbc4:	4628      	mov	r0, r5
   3fbc6:	9304      	str	r3, [sp, #16]
   3fbc8:	9307      	str	r3, [sp, #28]
   3fbca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3fbce:	f8ad 3016 	strh.w	r3, [sp, #22]
   3fbd2:	ab21      	add	r3, sp, #132	; 0x84
   3fbd4:	9301      	str	r3, [sp, #4]
   3fbd6:	f000 ff39 	bl	40a4c <_svfiprintf_r>
   3fbda:	1c43      	adds	r3, r0, #1
   3fbdc:	bfbc      	itt	lt
   3fbde:	238b      	movlt	r3, #139	; 0x8b
   3fbe0:	602b      	strlt	r3, [r5, #0]
   3fbe2:	2c00      	cmp	r4, #0
   3fbe4:	d0dd      	beq.n	3fba2 <sniprintf+0x16>
   3fbe6:	9b02      	ldr	r3, [sp, #8]
   3fbe8:	2200      	movs	r2, #0
   3fbea:	701a      	strb	r2, [r3, #0]
   3fbec:	e7d9      	b.n	3fba2 <sniprintf+0x16>
   3fbee:	bf00      	nop
   3fbf0:	20020760 	.word	0x20020760

0003fbf4 <siscanf>:
   3fbf4:	b40e      	push	{r1, r2, r3}
   3fbf6:	b510      	push	{r4, lr}
   3fbf8:	b09f      	sub	sp, #124	; 0x7c
   3fbfa:	f44f 7101 	mov.w	r1, #516	; 0x204
   3fbfe:	ac21      	add	r4, sp, #132	; 0x84
   3fc00:	f8ad 101c 	strh.w	r1, [sp, #28]
   3fc04:	9004      	str	r0, [sp, #16]
   3fc06:	f854 2b04 	ldr.w	r2, [r4], #4
   3fc0a:	9008      	str	r0, [sp, #32]
   3fc0c:	9201      	str	r2, [sp, #4]
   3fc0e:	f7dd fb25 	bl	1d25c <strlen>
   3fc12:	4b0c      	ldr	r3, [pc, #48]	; (3fc44 <siscanf+0x50>)
   3fc14:	a904      	add	r1, sp, #16
   3fc16:	9005      	str	r0, [sp, #20]
   3fc18:	930d      	str	r3, [sp, #52]	; 0x34
   3fc1a:	2300      	movs	r3, #0
   3fc1c:	9009      	str	r0, [sp, #36]	; 0x24
   3fc1e:	9311      	str	r3, [sp, #68]	; 0x44
   3fc20:	9316      	str	r3, [sp, #88]	; 0x58
   3fc22:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3fc26:	4808      	ldr	r0, [pc, #32]	; (3fc48 <siscanf+0x54>)
   3fc28:	f8ad 301e 	strh.w	r3, [sp, #30]
   3fc2c:	4623      	mov	r3, r4
   3fc2e:	9a01      	ldr	r2, [sp, #4]
   3fc30:	6800      	ldr	r0, [r0, #0]
   3fc32:	9403      	str	r4, [sp, #12]
   3fc34:	f001 f80a 	bl	40c4c <__ssvfiscanf_r>
   3fc38:	b01f      	add	sp, #124	; 0x7c
   3fc3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3fc3e:	b003      	add	sp, #12
   3fc40:	4770      	bx	lr
   3fc42:	bf00      	nop
   3fc44:	00044fff 	.word	0x00044fff
   3fc48:	20020760 	.word	0x20020760

0003fc4c <strtod>:
   3fc4c:	460a      	mov	r2, r1
   3fc4e:	4601      	mov	r1, r0
   3fc50:	4802      	ldr	r0, [pc, #8]	; (3fc5c <strtod+0x10>)
   3fc52:	4b03      	ldr	r3, [pc, #12]	; (3fc60 <strtod+0x14>)
   3fc54:	6800      	ldr	r0, [r0, #0]
   3fc56:	f7df bc67 	b.w	1f528 <_strtod_l>
   3fc5a:	bf00      	nop
   3fc5c:	20020760 	.word	0x20020760
   3fc60:	200207c4 	.word	0x200207c4

0003fc64 <_strtol_l.isra.0>:
   3fc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3fc68:	468c      	mov	ip, r1
   3fc6a:	4686      	mov	lr, r0
   3fc6c:	4e38      	ldr	r6, [pc, #224]	; (3fd50 <_strtol_l.isra.0+0xec>)
   3fc6e:	4660      	mov	r0, ip
   3fc70:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3fc74:	5da5      	ldrb	r5, [r4, r6]
   3fc76:	f015 0508 	ands.w	r5, r5, #8
   3fc7a:	d1f8      	bne.n	3fc6e <_strtol_l.isra.0+0xa>
   3fc7c:	2c2d      	cmp	r4, #45	; 0x2d
   3fc7e:	d133      	bne.n	3fce8 <_strtol_l.isra.0+0x84>
   3fc80:	f89c 4000 	ldrb.w	r4, [ip]
   3fc84:	f04f 0801 	mov.w	r8, #1
   3fc88:	f100 0c02 	add.w	ip, r0, #2
   3fc8c:	2b00      	cmp	r3, #0
   3fc8e:	d05b      	beq.n	3fd48 <_strtol_l.isra.0+0xe4>
   3fc90:	2b10      	cmp	r3, #16
   3fc92:	d10c      	bne.n	3fcae <_strtol_l.isra.0+0x4a>
   3fc94:	2c30      	cmp	r4, #48	; 0x30
   3fc96:	d10a      	bne.n	3fcae <_strtol_l.isra.0+0x4a>
   3fc98:	f89c 0000 	ldrb.w	r0, [ip]
   3fc9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3fca0:	2858      	cmp	r0, #88	; 0x58
   3fca2:	d14c      	bne.n	3fd3e <_strtol_l.isra.0+0xda>
   3fca4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   3fca8:	2310      	movs	r3, #16
   3fcaa:	f10c 0c02 	add.w	ip, ip, #2
   3fcae:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   3fcb2:	2600      	movs	r6, #0
   3fcb4:	3f01      	subs	r7, #1
   3fcb6:	4630      	mov	r0, r6
   3fcb8:	fbb7 f9f3 	udiv	r9, r7, r3
   3fcbc:	fb03 7a19 	mls	sl, r3, r9, r7
   3fcc0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   3fcc4:	2d09      	cmp	r5, #9
   3fcc6:	d817      	bhi.n	3fcf8 <_strtol_l.isra.0+0x94>
   3fcc8:	462c      	mov	r4, r5
   3fcca:	42a3      	cmp	r3, r4
   3fccc:	dd23      	ble.n	3fd16 <_strtol_l.isra.0+0xb2>
   3fcce:	1c75      	adds	r5, r6, #1
   3fcd0:	d007      	beq.n	3fce2 <_strtol_l.isra.0+0x7e>
   3fcd2:	4581      	cmp	r9, r0
   3fcd4:	d31c      	bcc.n	3fd10 <_strtol_l.isra.0+0xac>
   3fcd6:	d101      	bne.n	3fcdc <_strtol_l.isra.0+0x78>
   3fcd8:	45a2      	cmp	sl, r4
   3fcda:	db19      	blt.n	3fd10 <_strtol_l.isra.0+0xac>
   3fcdc:	fb00 4003 	mla	r0, r0, r3, r4
   3fce0:	2601      	movs	r6, #1
   3fce2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3fce6:	e7eb      	b.n	3fcc0 <_strtol_l.isra.0+0x5c>
   3fce8:	2c2b      	cmp	r4, #43	; 0x2b
   3fcea:	46a8      	mov	r8, r5
   3fcec:	bf04      	itt	eq
   3fcee:	f89c 4000 	ldrbeq.w	r4, [ip]
   3fcf2:	f100 0c02 	addeq.w	ip, r0, #2
   3fcf6:	e7c9      	b.n	3fc8c <_strtol_l.isra.0+0x28>
   3fcf8:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   3fcfc:	2d19      	cmp	r5, #25
   3fcfe:	d801      	bhi.n	3fd04 <_strtol_l.isra.0+0xa0>
   3fd00:	3c37      	subs	r4, #55	; 0x37
   3fd02:	e7e2      	b.n	3fcca <_strtol_l.isra.0+0x66>
   3fd04:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   3fd08:	2d19      	cmp	r5, #25
   3fd0a:	d804      	bhi.n	3fd16 <_strtol_l.isra.0+0xb2>
   3fd0c:	3c57      	subs	r4, #87	; 0x57
   3fd0e:	e7dc      	b.n	3fcca <_strtol_l.isra.0+0x66>
   3fd10:	f04f 36ff 	mov.w	r6, #4294967295
   3fd14:	e7e5      	b.n	3fce2 <_strtol_l.isra.0+0x7e>
   3fd16:	1c73      	adds	r3, r6, #1
   3fd18:	d106      	bne.n	3fd28 <_strtol_l.isra.0+0xc4>
   3fd1a:	2322      	movs	r3, #34	; 0x22
   3fd1c:	4638      	mov	r0, r7
   3fd1e:	f8ce 3000 	str.w	r3, [lr]
   3fd22:	b942      	cbnz	r2, 3fd36 <_strtol_l.isra.0+0xd2>
   3fd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3fd28:	f1b8 0f00 	cmp.w	r8, #0
   3fd2c:	d000      	beq.n	3fd30 <_strtol_l.isra.0+0xcc>
   3fd2e:	4240      	negs	r0, r0
   3fd30:	2a00      	cmp	r2, #0
   3fd32:	d0f7      	beq.n	3fd24 <_strtol_l.isra.0+0xc0>
   3fd34:	b10e      	cbz	r6, 3fd3a <_strtol_l.isra.0+0xd6>
   3fd36:	f10c 31ff 	add.w	r1, ip, #4294967295
   3fd3a:	6011      	str	r1, [r2, #0]
   3fd3c:	e7f2      	b.n	3fd24 <_strtol_l.isra.0+0xc0>
   3fd3e:	2430      	movs	r4, #48	; 0x30
   3fd40:	2b00      	cmp	r3, #0
   3fd42:	d1b4      	bne.n	3fcae <_strtol_l.isra.0+0x4a>
   3fd44:	2308      	movs	r3, #8
   3fd46:	e7b2      	b.n	3fcae <_strtol_l.isra.0+0x4a>
   3fd48:	2c30      	cmp	r4, #48	; 0x30
   3fd4a:	d0a5      	beq.n	3fc98 <_strtol_l.isra.0+0x34>
   3fd4c:	230a      	movs	r3, #10
   3fd4e:	e7ae      	b.n	3fcae <_strtol_l.isra.0+0x4a>
   3fd50:	0004f35b 	.word	0x0004f35b

0003fd54 <strtol>:
   3fd54:	4613      	mov	r3, r2
   3fd56:	460a      	mov	r2, r1
   3fd58:	4601      	mov	r1, r0
   3fd5a:	4802      	ldr	r0, [pc, #8]	; (3fd64 <strtol+0x10>)
   3fd5c:	6800      	ldr	r0, [r0, #0]
   3fd5e:	f7ff bf81 	b.w	3fc64 <_strtol_l.isra.0>
   3fd62:	bf00      	nop
   3fd64:	20020760 	.word	0x20020760

0003fd68 <_strtoul_l.isra.0>:
   3fd68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3fd6c:	468c      	mov	ip, r1
   3fd6e:	4686      	mov	lr, r0
   3fd70:	4e39      	ldr	r6, [pc, #228]	; (3fe58 <_strtoul_l.isra.0+0xf0>)
   3fd72:	4660      	mov	r0, ip
   3fd74:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3fd78:	5da5      	ldrb	r5, [r4, r6]
   3fd7a:	f015 0508 	ands.w	r5, r5, #8
   3fd7e:	d1f8      	bne.n	3fd72 <_strtoul_l.isra.0+0xa>
   3fd80:	2c2d      	cmp	r4, #45	; 0x2d
   3fd82:	d134      	bne.n	3fdee <_strtoul_l.isra.0+0x86>
   3fd84:	f89c 4000 	ldrb.w	r4, [ip]
   3fd88:	f04f 0801 	mov.w	r8, #1
   3fd8c:	f100 0c02 	add.w	ip, r0, #2
   3fd90:	2b00      	cmp	r3, #0
   3fd92:	d05d      	beq.n	3fe50 <_strtoul_l.isra.0+0xe8>
   3fd94:	2b10      	cmp	r3, #16
   3fd96:	d10c      	bne.n	3fdb2 <_strtoul_l.isra.0+0x4a>
   3fd98:	2c30      	cmp	r4, #48	; 0x30
   3fd9a:	d10a      	bne.n	3fdb2 <_strtoul_l.isra.0+0x4a>
   3fd9c:	f89c 0000 	ldrb.w	r0, [ip]
   3fda0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3fda4:	2858      	cmp	r0, #88	; 0x58
   3fda6:	d14e      	bne.n	3fe46 <_strtoul_l.isra.0+0xde>
   3fda8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   3fdac:	2310      	movs	r3, #16
   3fdae:	f10c 0c02 	add.w	ip, ip, #2
   3fdb2:	f04f 37ff 	mov.w	r7, #4294967295
   3fdb6:	2500      	movs	r5, #0
   3fdb8:	fbb7 f7f3 	udiv	r7, r7, r3
   3fdbc:	fb03 f907 	mul.w	r9, r3, r7
   3fdc0:	4628      	mov	r0, r5
   3fdc2:	ea6f 0909 	mvn.w	r9, r9
   3fdc6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   3fdca:	2e09      	cmp	r6, #9
   3fdcc:	d817      	bhi.n	3fdfe <_strtoul_l.isra.0+0x96>
   3fdce:	4634      	mov	r4, r6
   3fdd0:	42a3      	cmp	r3, r4
   3fdd2:	dd23      	ble.n	3fe1c <_strtoul_l.isra.0+0xb4>
   3fdd4:	2d00      	cmp	r5, #0
   3fdd6:	db1e      	blt.n	3fe16 <_strtoul_l.isra.0+0xae>
   3fdd8:	4287      	cmp	r7, r0
   3fdda:	d31c      	bcc.n	3fe16 <_strtoul_l.isra.0+0xae>
   3fddc:	d101      	bne.n	3fde2 <_strtoul_l.isra.0+0x7a>
   3fdde:	45a1      	cmp	r9, r4
   3fde0:	db19      	blt.n	3fe16 <_strtoul_l.isra.0+0xae>
   3fde2:	fb00 4003 	mla	r0, r0, r3, r4
   3fde6:	2501      	movs	r5, #1
   3fde8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3fdec:	e7eb      	b.n	3fdc6 <_strtoul_l.isra.0+0x5e>
   3fdee:	2c2b      	cmp	r4, #43	; 0x2b
   3fdf0:	46a8      	mov	r8, r5
   3fdf2:	bf04      	itt	eq
   3fdf4:	f89c 4000 	ldrbeq.w	r4, [ip]
   3fdf8:	f100 0c02 	addeq.w	ip, r0, #2
   3fdfc:	e7c8      	b.n	3fd90 <_strtoul_l.isra.0+0x28>
   3fdfe:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   3fe02:	2e19      	cmp	r6, #25
   3fe04:	d801      	bhi.n	3fe0a <_strtoul_l.isra.0+0xa2>
   3fe06:	3c37      	subs	r4, #55	; 0x37
   3fe08:	e7e2      	b.n	3fdd0 <_strtoul_l.isra.0+0x68>
   3fe0a:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   3fe0e:	2e19      	cmp	r6, #25
   3fe10:	d804      	bhi.n	3fe1c <_strtoul_l.isra.0+0xb4>
   3fe12:	3c57      	subs	r4, #87	; 0x57
   3fe14:	e7dc      	b.n	3fdd0 <_strtoul_l.isra.0+0x68>
   3fe16:	f04f 35ff 	mov.w	r5, #4294967295
   3fe1a:	e7e5      	b.n	3fde8 <_strtoul_l.isra.0+0x80>
   3fe1c:	2d00      	cmp	r5, #0
   3fe1e:	da07      	bge.n	3fe30 <_strtoul_l.isra.0+0xc8>
   3fe20:	2322      	movs	r3, #34	; 0x22
   3fe22:	f04f 30ff 	mov.w	r0, #4294967295
   3fe26:	f8ce 3000 	str.w	r3, [lr]
   3fe2a:	b942      	cbnz	r2, 3fe3e <_strtoul_l.isra.0+0xd6>
   3fe2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3fe30:	f1b8 0f00 	cmp.w	r8, #0
   3fe34:	d000      	beq.n	3fe38 <_strtoul_l.isra.0+0xd0>
   3fe36:	4240      	negs	r0, r0
   3fe38:	2a00      	cmp	r2, #0
   3fe3a:	d0f7      	beq.n	3fe2c <_strtoul_l.isra.0+0xc4>
   3fe3c:	b10d      	cbz	r5, 3fe42 <_strtoul_l.isra.0+0xda>
   3fe3e:	f10c 31ff 	add.w	r1, ip, #4294967295
   3fe42:	6011      	str	r1, [r2, #0]
   3fe44:	e7f2      	b.n	3fe2c <_strtoul_l.isra.0+0xc4>
   3fe46:	2430      	movs	r4, #48	; 0x30
   3fe48:	2b00      	cmp	r3, #0
   3fe4a:	d1b2      	bne.n	3fdb2 <_strtoul_l.isra.0+0x4a>
   3fe4c:	2308      	movs	r3, #8
   3fe4e:	e7b0      	b.n	3fdb2 <_strtoul_l.isra.0+0x4a>
   3fe50:	2c30      	cmp	r4, #48	; 0x30
   3fe52:	d0a3      	beq.n	3fd9c <_strtoul_l.isra.0+0x34>
   3fe54:	230a      	movs	r3, #10
   3fe56:	e7ac      	b.n	3fdb2 <_strtoul_l.isra.0+0x4a>
   3fe58:	0004f35b 	.word	0x0004f35b

0003fe5c <strtoul>:
   3fe5c:	4613      	mov	r3, r2
   3fe5e:	460a      	mov	r2, r1
   3fe60:	4601      	mov	r1, r0
   3fe62:	4802      	ldr	r0, [pc, #8]	; (3fe6c <strtoul+0x10>)
   3fe64:	6800      	ldr	r0, [r0, #0]
   3fe66:	f7ff bf7f 	b.w	3fd68 <_strtoul_l.isra.0>
   3fe6a:	bf00      	nop
   3fe6c:	20020760 	.word	0x20020760

0003fe70 <vsniprintf>:
   3fe70:	b507      	push	{r0, r1, r2, lr}
   3fe72:	9300      	str	r3, [sp, #0]
   3fe74:	4613      	mov	r3, r2
   3fe76:	460a      	mov	r2, r1
   3fe78:	4601      	mov	r1, r0
   3fe7a:	4803      	ldr	r0, [pc, #12]	; (3fe88 <vsniprintf+0x18>)
   3fe7c:	6800      	ldr	r0, [r0, #0]
   3fe7e:	f005 f99b 	bl	451b8 <_vsniprintf_r>
   3fe82:	b003      	add	sp, #12
   3fe84:	f85d fb04 	ldr.w	pc, [sp], #4
   3fe88:	20020760 	.word	0x20020760

0003fe8c <_vsiprintf_r>:
   3fe8c:	b500      	push	{lr}
   3fe8e:	b09b      	sub	sp, #108	; 0x6c
   3fe90:	9100      	str	r1, [sp, #0]
   3fe92:	9104      	str	r1, [sp, #16]
   3fe94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3fe98:	9105      	str	r1, [sp, #20]
   3fe9a:	9102      	str	r1, [sp, #8]
   3fe9c:	4905      	ldr	r1, [pc, #20]	; (3feb4 <_vsiprintf_r+0x28>)
   3fe9e:	9103      	str	r1, [sp, #12]
   3fea0:	4669      	mov	r1, sp
   3fea2:	f000 fdd3 	bl	40a4c <_svfiprintf_r>
   3fea6:	9b00      	ldr	r3, [sp, #0]
   3fea8:	2200      	movs	r2, #0
   3feaa:	701a      	strb	r2, [r3, #0]
   3feac:	b01b      	add	sp, #108	; 0x6c
   3feae:	f85d fb04 	ldr.w	pc, [sp], #4
   3feb2:	bf00      	nop
   3feb4:	ffff0208 	.word	0xffff0208

0003feb8 <vsiprintf>:
   3feb8:	4613      	mov	r3, r2
   3feba:	460a      	mov	r2, r1
   3febc:	4601      	mov	r1, r0
   3febe:	4802      	ldr	r0, [pc, #8]	; (3fec8 <vsiprintf+0x10>)
   3fec0:	6800      	ldr	r0, [r0, #0]
   3fec2:	f7ff bfe3 	b.w	3fe8c <_vsiprintf_r>
   3fec6:	bf00      	nop
   3fec8:	20020760 	.word	0x20020760

0003fecc <__swbuf_r>:
   3fecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3fece:	460e      	mov	r6, r1
   3fed0:	4614      	mov	r4, r2
   3fed2:	4605      	mov	r5, r0
   3fed4:	b118      	cbz	r0, 3fede <__swbuf_r+0x12>
   3fed6:	6983      	ldr	r3, [r0, #24]
   3fed8:	b90b      	cbnz	r3, 3fede <__swbuf_r+0x12>
   3feda:	f000 f9db 	bl	40294 <__sinit>
   3fede:	4b21      	ldr	r3, [pc, #132]	; (3ff64 <__swbuf_r+0x98>)
   3fee0:	429c      	cmp	r4, r3
   3fee2:	d12b      	bne.n	3ff3c <__swbuf_r+0x70>
   3fee4:	686c      	ldr	r4, [r5, #4]
   3fee6:	69a3      	ldr	r3, [r4, #24]
   3fee8:	60a3      	str	r3, [r4, #8]
   3feea:	89a3      	ldrh	r3, [r4, #12]
   3feec:	071a      	lsls	r2, r3, #28
   3feee:	d52f      	bpl.n	3ff50 <__swbuf_r+0x84>
   3fef0:	6923      	ldr	r3, [r4, #16]
   3fef2:	b36b      	cbz	r3, 3ff50 <__swbuf_r+0x84>
   3fef4:	6923      	ldr	r3, [r4, #16]
   3fef6:	b2f6      	uxtb	r6, r6
   3fef8:	6820      	ldr	r0, [r4, #0]
   3fefa:	4637      	mov	r7, r6
   3fefc:	1ac0      	subs	r0, r0, r3
   3fefe:	6963      	ldr	r3, [r4, #20]
   3ff00:	4283      	cmp	r3, r0
   3ff02:	dc04      	bgt.n	3ff0e <__swbuf_r+0x42>
   3ff04:	4621      	mov	r1, r4
   3ff06:	4628      	mov	r0, r5
   3ff08:	f000 f946 	bl	40198 <_fflush_r>
   3ff0c:	bb30      	cbnz	r0, 3ff5c <__swbuf_r+0x90>
   3ff0e:	68a3      	ldr	r3, [r4, #8]
   3ff10:	3001      	adds	r0, #1
   3ff12:	3b01      	subs	r3, #1
   3ff14:	60a3      	str	r3, [r4, #8]
   3ff16:	6823      	ldr	r3, [r4, #0]
   3ff18:	1c5a      	adds	r2, r3, #1
   3ff1a:	6022      	str	r2, [r4, #0]
   3ff1c:	701e      	strb	r6, [r3, #0]
   3ff1e:	6963      	ldr	r3, [r4, #20]
   3ff20:	4283      	cmp	r3, r0
   3ff22:	d004      	beq.n	3ff2e <__swbuf_r+0x62>
   3ff24:	89a3      	ldrh	r3, [r4, #12]
   3ff26:	07db      	lsls	r3, r3, #31
   3ff28:	d506      	bpl.n	3ff38 <__swbuf_r+0x6c>
   3ff2a:	2e0a      	cmp	r6, #10
   3ff2c:	d104      	bne.n	3ff38 <__swbuf_r+0x6c>
   3ff2e:	4621      	mov	r1, r4
   3ff30:	4628      	mov	r0, r5
   3ff32:	f000 f931 	bl	40198 <_fflush_r>
   3ff36:	b988      	cbnz	r0, 3ff5c <__swbuf_r+0x90>
   3ff38:	4638      	mov	r0, r7
   3ff3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3ff3c:	4b0a      	ldr	r3, [pc, #40]	; (3ff68 <__swbuf_r+0x9c>)
   3ff3e:	429c      	cmp	r4, r3
   3ff40:	d101      	bne.n	3ff46 <__swbuf_r+0x7a>
   3ff42:	68ac      	ldr	r4, [r5, #8]
   3ff44:	e7cf      	b.n	3fee6 <__swbuf_r+0x1a>
   3ff46:	4b09      	ldr	r3, [pc, #36]	; (3ff6c <__swbuf_r+0xa0>)
   3ff48:	429c      	cmp	r4, r3
   3ff4a:	bf08      	it	eq
   3ff4c:	68ec      	ldreq	r4, [r5, #12]
   3ff4e:	e7ca      	b.n	3fee6 <__swbuf_r+0x1a>
   3ff50:	4621      	mov	r1, r4
   3ff52:	4628      	mov	r0, r5
   3ff54:	f000 f81e 	bl	3ff94 <__swsetup_r>
   3ff58:	2800      	cmp	r0, #0
   3ff5a:	d0cb      	beq.n	3fef4 <__swbuf_r+0x28>
   3ff5c:	f04f 37ff 	mov.w	r7, #4294967295
   3ff60:	e7ea      	b.n	3ff38 <__swbuf_r+0x6c>
   3ff62:	bf00      	nop
   3ff64:	00047480 	.word	0x00047480
   3ff68:	000474a0 	.word	0x000474a0
   3ff6c:	00047460 	.word	0x00047460

0003ff70 <_write_r>:
   3ff70:	b538      	push	{r3, r4, r5, lr}
   3ff72:	4604      	mov	r4, r0
   3ff74:	4d06      	ldr	r5, [pc, #24]	; (3ff90 <_write_r+0x20>)
   3ff76:	4608      	mov	r0, r1
   3ff78:	4611      	mov	r1, r2
   3ff7a:	2200      	movs	r2, #0
   3ff7c:	602a      	str	r2, [r5, #0]
   3ff7e:	461a      	mov	r2, r3
   3ff80:	f002 fb63 	bl	4264a <_write>
   3ff84:	1c43      	adds	r3, r0, #1
   3ff86:	d102      	bne.n	3ff8e <_write_r+0x1e>
   3ff88:	682b      	ldr	r3, [r5, #0]
   3ff8a:	b103      	cbz	r3, 3ff8e <_write_r+0x1e>
   3ff8c:	6023      	str	r3, [r4, #0]
   3ff8e:	bd38      	pop	{r3, r4, r5, pc}
   3ff90:	2002d828 	.word	0x2002d828

0003ff94 <__swsetup_r>:
   3ff94:	4b32      	ldr	r3, [pc, #200]	; (40060 <CONFIG_PM_SRAM_SIZE+0x60>)
   3ff96:	b570      	push	{r4, r5, r6, lr}
   3ff98:	681d      	ldr	r5, [r3, #0]
   3ff9a:	4606      	mov	r6, r0
   3ff9c:	460c      	mov	r4, r1
   3ff9e:	b125      	cbz	r5, 3ffaa <__swsetup_r+0x16>
   3ffa0:	69ab      	ldr	r3, [r5, #24]
   3ffa2:	b913      	cbnz	r3, 3ffaa <__swsetup_r+0x16>
   3ffa4:	4628      	mov	r0, r5
   3ffa6:	f000 f975 	bl	40294 <__sinit>
   3ffaa:	4b2e      	ldr	r3, [pc, #184]	; (40064 <CONFIG_PM_SRAM_SIZE+0x64>)
   3ffac:	429c      	cmp	r4, r3
   3ffae:	d10f      	bne.n	3ffd0 <__swsetup_r+0x3c>
   3ffb0:	686c      	ldr	r4, [r5, #4]
   3ffb2:	89a3      	ldrh	r3, [r4, #12]
   3ffb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3ffb8:	0719      	lsls	r1, r3, #28
   3ffba:	d42c      	bmi.n	40016 <CONFIG_PM_SRAM_SIZE+0x16>
   3ffbc:	06dd      	lsls	r5, r3, #27
   3ffbe:	d411      	bmi.n	3ffe4 <__swsetup_r+0x50>
   3ffc0:	2309      	movs	r3, #9
   3ffc2:	6033      	str	r3, [r6, #0]
   3ffc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   3ffc8:	f04f 30ff 	mov.w	r0, #4294967295
   3ffcc:	81a3      	strh	r3, [r4, #12]
   3ffce:	e03e      	b.n	4004e <CONFIG_PM_SRAM_SIZE+0x4e>
   3ffd0:	4b25      	ldr	r3, [pc, #148]	; (40068 <CONFIG_PM_SRAM_SIZE+0x68>)
   3ffd2:	429c      	cmp	r4, r3
   3ffd4:	d101      	bne.n	3ffda <__swsetup_r+0x46>
   3ffd6:	68ac      	ldr	r4, [r5, #8]
   3ffd8:	e7eb      	b.n	3ffb2 <__swsetup_r+0x1e>
   3ffda:	4b24      	ldr	r3, [pc, #144]	; (4006c <CONFIG_PM_SRAM_SIZE+0x6c>)
   3ffdc:	429c      	cmp	r4, r3
   3ffde:	bf08      	it	eq
   3ffe0:	68ec      	ldreq	r4, [r5, #12]
   3ffe2:	e7e6      	b.n	3ffb2 <__swsetup_r+0x1e>
   3ffe4:	0758      	lsls	r0, r3, #29
   3ffe6:	d512      	bpl.n	4000e <CONFIG_PM_SRAM_SIZE+0xe>
   3ffe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3ffea:	b141      	cbz	r1, 3fffe <__swsetup_r+0x6a>
   3ffec:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3fff0:	4299      	cmp	r1, r3
   3fff2:	d002      	beq.n	3fffa <__swsetup_r+0x66>
   3fff4:	4630      	mov	r0, r6
   3fff6:	f7ff f823 	bl	3f040 <_free_r>
   3fffa:	2300      	movs	r3, #0
   3fffc:	6363      	str	r3, [r4, #52]	; 0x34
   3fffe:	89a3      	ldrh	r3, [r4, #12]
   40000:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   40004:	81a3      	strh	r3, [r4, #12]
   40006:	2300      	movs	r3, #0
   40008:	6063      	str	r3, [r4, #4]
   4000a:	6923      	ldr	r3, [r4, #16]
   4000c:	6023      	str	r3, [r4, #0]
   4000e:	89a3      	ldrh	r3, [r4, #12]
   40010:	f043 0308 	orr.w	r3, r3, #8
   40014:	81a3      	strh	r3, [r4, #12]
   40016:	6923      	ldr	r3, [r4, #16]
   40018:	b94b      	cbnz	r3, 4002e <CONFIG_PM_SRAM_SIZE+0x2e>
   4001a:	89a3      	ldrh	r3, [r4, #12]
   4001c:	f403 7320 	and.w	r3, r3, #640	; 0x280
   40020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   40024:	d003      	beq.n	4002e <CONFIG_PM_SRAM_SIZE+0x2e>
   40026:	4621      	mov	r1, r4
   40028:	4630      	mov	r0, r6
   4002a:	f000 fbfb 	bl	40824 <__smakebuf_r>
   4002e:	89a0      	ldrh	r0, [r4, #12]
   40030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   40034:	f010 0301 	ands.w	r3, r0, #1
   40038:	d00a      	beq.n	40050 <CONFIG_PM_SRAM_SIZE+0x50>
   4003a:	2300      	movs	r3, #0
   4003c:	60a3      	str	r3, [r4, #8]
   4003e:	6963      	ldr	r3, [r4, #20]
   40040:	425b      	negs	r3, r3
   40042:	61a3      	str	r3, [r4, #24]
   40044:	6923      	ldr	r3, [r4, #16]
   40046:	b943      	cbnz	r3, 4005a <CONFIG_PM_SRAM_SIZE+0x5a>
   40048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   4004c:	d1ba      	bne.n	3ffc4 <__swsetup_r+0x30>
   4004e:	bd70      	pop	{r4, r5, r6, pc}
   40050:	0781      	lsls	r1, r0, #30
   40052:	bf58      	it	pl
   40054:	6963      	ldrpl	r3, [r4, #20]
   40056:	60a3      	str	r3, [r4, #8]
   40058:	e7f4      	b.n	40044 <CONFIG_PM_SRAM_SIZE+0x44>
   4005a:	2000      	movs	r0, #0
   4005c:	e7f7      	b.n	4004e <CONFIG_PM_SRAM_SIZE+0x4e>
   4005e:	bf00      	nop
   40060:	20020760 	.word	0x20020760
   40064:	00047480 	.word	0x00047480
   40068:	000474a0 	.word	0x000474a0
   4006c:	00047460 	.word	0x00047460

00040070 <_close_r>:
   40070:	b538      	push	{r3, r4, r5, lr}
   40072:	2300      	movs	r3, #0
   40074:	4d05      	ldr	r5, [pc, #20]	; (4008c <_close_r+0x1c>)
   40076:	4604      	mov	r4, r0
   40078:	4608      	mov	r0, r1
   4007a:	602b      	str	r3, [r5, #0]
   4007c:	f002 fae9 	bl	42652 <_close>
   40080:	1c43      	adds	r3, r0, #1
   40082:	d102      	bne.n	4008a <_close_r+0x1a>
   40084:	682b      	ldr	r3, [r5, #0]
   40086:	b103      	cbz	r3, 4008a <_close_r+0x1a>
   40088:	6023      	str	r3, [r4, #0]
   4008a:	bd38      	pop	{r3, r4, r5, pc}
   4008c:	2002d828 	.word	0x2002d828

00040090 <__sflush_r>:
   40090:	898a      	ldrh	r2, [r1, #12]
   40092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40096:	4605      	mov	r5, r0
   40098:	0710      	lsls	r0, r2, #28
   4009a:	460c      	mov	r4, r1
   4009c:	d458      	bmi.n	40150 <__sflush_r+0xc0>
   4009e:	684b      	ldr	r3, [r1, #4]
   400a0:	2b00      	cmp	r3, #0
   400a2:	dc05      	bgt.n	400b0 <__sflush_r+0x20>
   400a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   400a6:	2b00      	cmp	r3, #0
   400a8:	dc02      	bgt.n	400b0 <__sflush_r+0x20>
   400aa:	2000      	movs	r0, #0
   400ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   400b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   400b2:	2e00      	cmp	r6, #0
   400b4:	d0f9      	beq.n	400aa <__sflush_r+0x1a>
   400b6:	2300      	movs	r3, #0
   400b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   400bc:	682f      	ldr	r7, [r5, #0]
   400be:	602b      	str	r3, [r5, #0]
   400c0:	d032      	beq.n	40128 <__sflush_r+0x98>
   400c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
   400c4:	89a3      	ldrh	r3, [r4, #12]
   400c6:	075a      	lsls	r2, r3, #29
   400c8:	d505      	bpl.n	400d6 <__sflush_r+0x46>
   400ca:	6863      	ldr	r3, [r4, #4]
   400cc:	1ac0      	subs	r0, r0, r3
   400ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   400d0:	b10b      	cbz	r3, 400d6 <__sflush_r+0x46>
   400d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   400d4:	1ac0      	subs	r0, r0, r3
   400d6:	2300      	movs	r3, #0
   400d8:	4602      	mov	r2, r0
   400da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   400dc:	4628      	mov	r0, r5
   400de:	6a21      	ldr	r1, [r4, #32]
   400e0:	47b0      	blx	r6
   400e2:	1c43      	adds	r3, r0, #1
   400e4:	89a3      	ldrh	r3, [r4, #12]
   400e6:	d106      	bne.n	400f6 <__sflush_r+0x66>
   400e8:	6829      	ldr	r1, [r5, #0]
   400ea:	291d      	cmp	r1, #29
   400ec:	d82c      	bhi.n	40148 <__sflush_r+0xb8>
   400ee:	4a29      	ldr	r2, [pc, #164]	; (40194 <__sflush_r+0x104>)
   400f0:	40ca      	lsrs	r2, r1
   400f2:	07d6      	lsls	r6, r2, #31
   400f4:	d528      	bpl.n	40148 <__sflush_r+0xb8>
   400f6:	2200      	movs	r2, #0
   400f8:	04d9      	lsls	r1, r3, #19
   400fa:	6062      	str	r2, [r4, #4]
   400fc:	6922      	ldr	r2, [r4, #16]
   400fe:	6022      	str	r2, [r4, #0]
   40100:	d504      	bpl.n	4010c <__sflush_r+0x7c>
   40102:	1c42      	adds	r2, r0, #1
   40104:	d101      	bne.n	4010a <__sflush_r+0x7a>
   40106:	682b      	ldr	r3, [r5, #0]
   40108:	b903      	cbnz	r3, 4010c <__sflush_r+0x7c>
   4010a:	6560      	str	r0, [r4, #84]	; 0x54
   4010c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   4010e:	602f      	str	r7, [r5, #0]
   40110:	2900      	cmp	r1, #0
   40112:	d0ca      	beq.n	400aa <__sflush_r+0x1a>
   40114:	f104 0344 	add.w	r3, r4, #68	; 0x44
   40118:	4299      	cmp	r1, r3
   4011a:	d002      	beq.n	40122 <__sflush_r+0x92>
   4011c:	4628      	mov	r0, r5
   4011e:	f7fe ff8f 	bl	3f040 <_free_r>
   40122:	2000      	movs	r0, #0
   40124:	6360      	str	r0, [r4, #52]	; 0x34
   40126:	e7c1      	b.n	400ac <__sflush_r+0x1c>
   40128:	6a21      	ldr	r1, [r4, #32]
   4012a:	2301      	movs	r3, #1
   4012c:	4628      	mov	r0, r5
   4012e:	47b0      	blx	r6
   40130:	1c41      	adds	r1, r0, #1
   40132:	d1c7      	bne.n	400c4 <__sflush_r+0x34>
   40134:	682b      	ldr	r3, [r5, #0]
   40136:	2b00      	cmp	r3, #0
   40138:	d0c4      	beq.n	400c4 <__sflush_r+0x34>
   4013a:	2b1d      	cmp	r3, #29
   4013c:	d001      	beq.n	40142 <__sflush_r+0xb2>
   4013e:	2b16      	cmp	r3, #22
   40140:	d101      	bne.n	40146 <__sflush_r+0xb6>
   40142:	602f      	str	r7, [r5, #0]
   40144:	e7b1      	b.n	400aa <__sflush_r+0x1a>
   40146:	89a3      	ldrh	r3, [r4, #12]
   40148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4014c:	81a3      	strh	r3, [r4, #12]
   4014e:	e7ad      	b.n	400ac <__sflush_r+0x1c>
   40150:	690f      	ldr	r7, [r1, #16]
   40152:	2f00      	cmp	r7, #0
   40154:	d0a9      	beq.n	400aa <__sflush_r+0x1a>
   40156:	0793      	lsls	r3, r2, #30
   40158:	680e      	ldr	r6, [r1, #0]
   4015a:	600f      	str	r7, [r1, #0]
   4015c:	bf0c      	ite	eq
   4015e:	694b      	ldreq	r3, [r1, #20]
   40160:	2300      	movne	r3, #0
   40162:	eba6 0807 	sub.w	r8, r6, r7
   40166:	608b      	str	r3, [r1, #8]
   40168:	f1b8 0f00 	cmp.w	r8, #0
   4016c:	dd9d      	ble.n	400aa <__sflush_r+0x1a>
   4016e:	4643      	mov	r3, r8
   40170:	463a      	mov	r2, r7
   40172:	6a21      	ldr	r1, [r4, #32]
   40174:	4628      	mov	r0, r5
   40176:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   40178:	47b0      	blx	r6
   4017a:	2800      	cmp	r0, #0
   4017c:	dc06      	bgt.n	4018c <__sflush_r+0xfc>
   4017e:	89a3      	ldrh	r3, [r4, #12]
   40180:	f04f 30ff 	mov.w	r0, #4294967295
   40184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   40188:	81a3      	strh	r3, [r4, #12]
   4018a:	e78f      	b.n	400ac <__sflush_r+0x1c>
   4018c:	4407      	add	r7, r0
   4018e:	eba8 0800 	sub.w	r8, r8, r0
   40192:	e7e9      	b.n	40168 <__sflush_r+0xd8>
   40194:	20400001 	.word	0x20400001

00040198 <_fflush_r>:
   40198:	b538      	push	{r3, r4, r5, lr}
   4019a:	690b      	ldr	r3, [r1, #16]
   4019c:	4605      	mov	r5, r0
   4019e:	460c      	mov	r4, r1
   401a0:	b913      	cbnz	r3, 401a8 <_fflush_r+0x10>
   401a2:	2500      	movs	r5, #0
   401a4:	4628      	mov	r0, r5
   401a6:	bd38      	pop	{r3, r4, r5, pc}
   401a8:	b118      	cbz	r0, 401b2 <_fflush_r+0x1a>
   401aa:	6983      	ldr	r3, [r0, #24]
   401ac:	b90b      	cbnz	r3, 401b2 <_fflush_r+0x1a>
   401ae:	f000 f871 	bl	40294 <__sinit>
   401b2:	4b14      	ldr	r3, [pc, #80]	; (40204 <_fflush_r+0x6c>)
   401b4:	429c      	cmp	r4, r3
   401b6:	d11b      	bne.n	401f0 <_fflush_r+0x58>
   401b8:	686c      	ldr	r4, [r5, #4]
   401ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   401be:	2b00      	cmp	r3, #0
   401c0:	d0ef      	beq.n	401a2 <_fflush_r+0xa>
   401c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   401c4:	07d0      	lsls	r0, r2, #31
   401c6:	d404      	bmi.n	401d2 <_fflush_r+0x3a>
   401c8:	0599      	lsls	r1, r3, #22
   401ca:	d402      	bmi.n	401d2 <_fflush_r+0x3a>
   401cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   401ce:	f005 fa13 	bl	455f8 <__retarget_lock_acquire_recursive>
   401d2:	4628      	mov	r0, r5
   401d4:	4621      	mov	r1, r4
   401d6:	f7ff ff5b 	bl	40090 <__sflush_r>
   401da:	6e63      	ldr	r3, [r4, #100]	; 0x64
   401dc:	4605      	mov	r5, r0
   401de:	07da      	lsls	r2, r3, #31
   401e0:	d4e0      	bmi.n	401a4 <_fflush_r+0xc>
   401e2:	89a3      	ldrh	r3, [r4, #12]
   401e4:	059b      	lsls	r3, r3, #22
   401e6:	d4dd      	bmi.n	401a4 <_fflush_r+0xc>
   401e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   401ea:	f005 fa06 	bl	455fa <__retarget_lock_release_recursive>
   401ee:	e7d9      	b.n	401a4 <_fflush_r+0xc>
   401f0:	4b05      	ldr	r3, [pc, #20]	; (40208 <_fflush_r+0x70>)
   401f2:	429c      	cmp	r4, r3
   401f4:	d101      	bne.n	401fa <_fflush_r+0x62>
   401f6:	68ac      	ldr	r4, [r5, #8]
   401f8:	e7df      	b.n	401ba <_fflush_r+0x22>
   401fa:	4b04      	ldr	r3, [pc, #16]	; (4020c <_fflush_r+0x74>)
   401fc:	429c      	cmp	r4, r3
   401fe:	bf08      	it	eq
   40200:	68ec      	ldreq	r4, [r5, #12]
   40202:	e7da      	b.n	401ba <_fflush_r+0x22>
   40204:	00047480 	.word	0x00047480
   40208:	000474a0 	.word	0x000474a0
   4020c:	00047460 	.word	0x00047460

00040210 <std>:
   40210:	2300      	movs	r3, #0
   40212:	b510      	push	{r4, lr}
   40214:	4604      	mov	r4, r0
   40216:	6083      	str	r3, [r0, #8]
   40218:	8181      	strh	r1, [r0, #12]
   4021a:	4619      	mov	r1, r3
   4021c:	6643      	str	r3, [r0, #100]	; 0x64
   4021e:	81c2      	strh	r2, [r0, #14]
   40220:	2208      	movs	r2, #8
   40222:	6183      	str	r3, [r0, #24]
   40224:	e9c0 3300 	strd	r3, r3, [r0]
   40228:	e9c0 3304 	strd	r3, r3, [r0, #16]
   4022c:	305c      	adds	r0, #92	; 0x5c
   4022e:	f004 fd7a 	bl	44d26 <memset>
   40232:	4b05      	ldr	r3, [pc, #20]	; (40248 <std+0x38>)
   40234:	6224      	str	r4, [r4, #32]
   40236:	6263      	str	r3, [r4, #36]	; 0x24
   40238:	4b04      	ldr	r3, [pc, #16]	; (4024c <std+0x3c>)
   4023a:	62a3      	str	r3, [r4, #40]	; 0x28
   4023c:	4b04      	ldr	r3, [pc, #16]	; (40250 <std+0x40>)
   4023e:	62e3      	str	r3, [r4, #44]	; 0x2c
   40240:	4b04      	ldr	r3, [pc, #16]	; (40254 <std+0x44>)
   40242:	6323      	str	r3, [r4, #48]	; 0x30
   40244:	bd10      	pop	{r4, pc}
   40246:	bf00      	nop
   40248:	00044fdd 	.word	0x00044fdd
   4024c:	00045003 	.word	0x00045003
   40250:	0004503b 	.word	0x0004503b
   40254:	0004505f 	.word	0x0004505f

00040258 <_cleanup_r>:
   40258:	4901      	ldr	r1, [pc, #4]	; (40260 <_cleanup_r+0x8>)
   4025a:	f005 b885 	b.w	45368 <_fwalk_reent>
   4025e:	bf00      	nop
   40260:	00040199 	.word	0x00040199

00040264 <__sfp_lock_acquire>:
   40264:	4801      	ldr	r0, [pc, #4]	; (4026c <__sfp_lock_acquire+0x8>)
   40266:	f005 b9c7 	b.w	455f8 <__retarget_lock_acquire_recursive>
   4026a:	bf00      	nop
   4026c:	2002d834 	.word	0x2002d834

00040270 <__sfp_lock_release>:
   40270:	4801      	ldr	r0, [pc, #4]	; (40278 <__sfp_lock_release+0x8>)
   40272:	f005 b9c2 	b.w	455fa <__retarget_lock_release_recursive>
   40276:	bf00      	nop
   40278:	2002d834 	.word	0x2002d834

0004027c <__sinit_lock_acquire>:
   4027c:	4801      	ldr	r0, [pc, #4]	; (40284 <__sinit_lock_acquire+0x8>)
   4027e:	f005 b9bb 	b.w	455f8 <__retarget_lock_acquire_recursive>
   40282:	bf00      	nop
   40284:	2002d82f 	.word	0x2002d82f

00040288 <__sinit_lock_release>:
   40288:	4801      	ldr	r0, [pc, #4]	; (40290 <__sinit_lock_release+0x8>)
   4028a:	f005 b9b6 	b.w	455fa <__retarget_lock_release_recursive>
   4028e:	bf00      	nop
   40290:	2002d82f 	.word	0x2002d82f

00040294 <__sinit>:
   40294:	b510      	push	{r4, lr}
   40296:	4604      	mov	r4, r0
   40298:	f7ff fff0 	bl	4027c <__sinit_lock_acquire>
   4029c:	69a3      	ldr	r3, [r4, #24]
   4029e:	b11b      	cbz	r3, 402a8 <__sinit+0x14>
   402a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   402a4:	f7ff bff0 	b.w	40288 <__sinit_lock_release>
   402a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   402ac:	6523      	str	r3, [r4, #80]	; 0x50
   402ae:	4620      	mov	r0, r4
   402b0:	4b12      	ldr	r3, [pc, #72]	; (402fc <__sinit+0x68>)
   402b2:	4a13      	ldr	r2, [pc, #76]	; (40300 <__sinit+0x6c>)
   402b4:	681b      	ldr	r3, [r3, #0]
   402b6:	62a2      	str	r2, [r4, #40]	; 0x28
   402b8:	42a3      	cmp	r3, r4
   402ba:	bf04      	itt	eq
   402bc:	2301      	moveq	r3, #1
   402be:	61a3      	streq	r3, [r4, #24]
   402c0:	f000 f820 	bl	40304 <__sfp>
   402c4:	6060      	str	r0, [r4, #4]
   402c6:	4620      	mov	r0, r4
   402c8:	f000 f81c 	bl	40304 <__sfp>
   402cc:	60a0      	str	r0, [r4, #8]
   402ce:	4620      	mov	r0, r4
   402d0:	f000 f818 	bl	40304 <__sfp>
   402d4:	2200      	movs	r2, #0
   402d6:	2104      	movs	r1, #4
   402d8:	60e0      	str	r0, [r4, #12]
   402da:	6860      	ldr	r0, [r4, #4]
   402dc:	f7ff ff98 	bl	40210 <std>
   402e0:	2201      	movs	r2, #1
   402e2:	2109      	movs	r1, #9
   402e4:	68a0      	ldr	r0, [r4, #8]
   402e6:	f7ff ff93 	bl	40210 <std>
   402ea:	2202      	movs	r2, #2
   402ec:	2112      	movs	r1, #18
   402ee:	68e0      	ldr	r0, [r4, #12]
   402f0:	f7ff ff8e 	bl	40210 <std>
   402f4:	2301      	movs	r3, #1
   402f6:	61a3      	str	r3, [r4, #24]
   402f8:	e7d2      	b.n	402a0 <__sinit+0xc>
   402fa:	bf00      	nop
   402fc:	00047434 	.word	0x00047434
   40300:	00040259 	.word	0x00040259

00040304 <__sfp>:
   40304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   40306:	4607      	mov	r7, r0
   40308:	f7ff ffac 	bl	40264 <__sfp_lock_acquire>
   4030c:	4b1e      	ldr	r3, [pc, #120]	; (40388 <__sfp+0x84>)
   4030e:	681e      	ldr	r6, [r3, #0]
   40310:	69b3      	ldr	r3, [r6, #24]
   40312:	b913      	cbnz	r3, 4031a <__sfp+0x16>
   40314:	4630      	mov	r0, r6
   40316:	f7ff ffbd 	bl	40294 <__sinit>
   4031a:	3648      	adds	r6, #72	; 0x48
   4031c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   40320:	3b01      	subs	r3, #1
   40322:	d503      	bpl.n	4032c <__sfp+0x28>
   40324:	6833      	ldr	r3, [r6, #0]
   40326:	b30b      	cbz	r3, 4036c <__sfp+0x68>
   40328:	6836      	ldr	r6, [r6, #0]
   4032a:	e7f7      	b.n	4031c <__sfp+0x18>
   4032c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   40330:	b9d5      	cbnz	r5, 40368 <__sfp+0x64>
   40332:	4b16      	ldr	r3, [pc, #88]	; (4038c <__sfp+0x88>)
   40334:	f104 0058 	add.w	r0, r4, #88	; 0x58
   40338:	6665      	str	r5, [r4, #100]	; 0x64
   4033a:	60e3      	str	r3, [r4, #12]
   4033c:	f005 f95b 	bl	455f6 <__retarget_lock_init_recursive>
   40340:	f7ff ff96 	bl	40270 <__sfp_lock_release>
   40344:	2208      	movs	r2, #8
   40346:	4629      	mov	r1, r5
   40348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   4034c:	6025      	str	r5, [r4, #0]
   4034e:	61a5      	str	r5, [r4, #24]
   40350:	e9c4 5501 	strd	r5, r5, [r4, #4]
   40354:	e9c4 5504 	strd	r5, r5, [r4, #16]
   40358:	f004 fce5 	bl	44d26 <memset>
   4035c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   40360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   40364:	4620      	mov	r0, r4
   40366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   40368:	3468      	adds	r4, #104	; 0x68
   4036a:	e7d9      	b.n	40320 <__sfp+0x1c>
   4036c:	2104      	movs	r1, #4
   4036e:	4638      	mov	r0, r7
   40370:	f004 ffe4 	bl	4533c <__sfmoreglue>
   40374:	4604      	mov	r4, r0
   40376:	6030      	str	r0, [r6, #0]
   40378:	2800      	cmp	r0, #0
   4037a:	d1d5      	bne.n	40328 <__sfp+0x24>
   4037c:	f7ff ff78 	bl	40270 <__sfp_lock_release>
   40380:	230c      	movs	r3, #12
   40382:	603b      	str	r3, [r7, #0]
   40384:	e7ee      	b.n	40364 <__sfp+0x60>
   40386:	bf00      	nop
   40388:	00047434 	.word	0x00047434
   4038c:	ffff0001 	.word	0xffff0001

00040390 <__gethex>:
   40390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40394:	ed2d 8b02 	vpush	{d8}
   40398:	b089      	sub	sp, #36	; 0x24
   4039a:	ee08 0a10 	vmov	s16, r0
   4039e:	468b      	mov	fp, r1
   403a0:	4690      	mov	r8, r2
   403a2:	9304      	str	r3, [sp, #16]
   403a4:	4bbb      	ldr	r3, [pc, #748]	; (40694 <__gethex+0x304>)
   403a6:	681b      	ldr	r3, [r3, #0]
   403a8:	4618      	mov	r0, r3
   403aa:	9301      	str	r3, [sp, #4]
   403ac:	f7dc ff56 	bl	1d25c <strlen>
   403b0:	9b01      	ldr	r3, [sp, #4]
   403b2:	f8db 2000 	ldr.w	r2, [fp]
   403b6:	4682      	mov	sl, r0
   403b8:	4403      	add	r3, r0
   403ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   403be:	9305      	str	r3, [sp, #20]
   403c0:	1c93      	adds	r3, r2, #2
   403c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   403c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   403ca:	32fe      	adds	r2, #254	; 0xfe
   403cc:	18d1      	adds	r1, r2, r3
   403ce:	461f      	mov	r7, r3
   403d0:	f813 0b01 	ldrb.w	r0, [r3], #1
   403d4:	9100      	str	r1, [sp, #0]
   403d6:	2830      	cmp	r0, #48	; 0x30
   403d8:	d0f8      	beq.n	403cc <__gethex+0x3c>
   403da:	f005 f835 	bl	45448 <__hexdig_fun>
   403de:	4604      	mov	r4, r0
   403e0:	2800      	cmp	r0, #0
   403e2:	d139      	bne.n	40458 <__gethex+0xc8>
   403e4:	4652      	mov	r2, sl
   403e6:	9901      	ldr	r1, [sp, #4]
   403e8:	4638      	mov	r0, r7
   403ea:	f004 fe7c 	bl	450e6 <strncmp>
   403ee:	4605      	mov	r5, r0
   403f0:	2800      	cmp	r0, #0
   403f2:	d167      	bne.n	404c4 <__gethex+0x134>
   403f4:	f817 000a 	ldrb.w	r0, [r7, sl]
   403f8:	eb07 060a 	add.w	r6, r7, sl
   403fc:	f005 f824 	bl	45448 <__hexdig_fun>
   40400:	2800      	cmp	r0, #0
   40402:	d061      	beq.n	404c8 <__gethex+0x138>
   40404:	4633      	mov	r3, r6
   40406:	7818      	ldrb	r0, [r3, #0]
   40408:	461f      	mov	r7, r3
   4040a:	3301      	adds	r3, #1
   4040c:	2830      	cmp	r0, #48	; 0x30
   4040e:	d0fa      	beq.n	40406 <__gethex+0x76>
   40410:	f005 f81a 	bl	45448 <__hexdig_fun>
   40414:	fab0 f480 	clz	r4, r0
   40418:	2301      	movs	r3, #1
   4041a:	4635      	mov	r5, r6
   4041c:	0964      	lsrs	r4, r4, #5
   4041e:	9300      	str	r3, [sp, #0]
   40420:	463a      	mov	r2, r7
   40422:	4616      	mov	r6, r2
   40424:	3201      	adds	r2, #1
   40426:	7830      	ldrb	r0, [r6, #0]
   40428:	f005 f80e 	bl	45448 <__hexdig_fun>
   4042c:	2800      	cmp	r0, #0
   4042e:	d1f8      	bne.n	40422 <__gethex+0x92>
   40430:	4652      	mov	r2, sl
   40432:	9901      	ldr	r1, [sp, #4]
   40434:	4630      	mov	r0, r6
   40436:	f004 fe56 	bl	450e6 <strncmp>
   4043a:	b980      	cbnz	r0, 4045e <__gethex+0xce>
   4043c:	b94d      	cbnz	r5, 40452 <__gethex+0xc2>
   4043e:	eb06 050a 	add.w	r5, r6, sl
   40442:	462a      	mov	r2, r5
   40444:	4616      	mov	r6, r2
   40446:	3201      	adds	r2, #1
   40448:	7830      	ldrb	r0, [r6, #0]
   4044a:	f004 fffd 	bl	45448 <__hexdig_fun>
   4044e:	2800      	cmp	r0, #0
   40450:	d1f8      	bne.n	40444 <__gethex+0xb4>
   40452:	1bad      	subs	r5, r5, r6
   40454:	00ad      	lsls	r5, r5, #2
   40456:	e004      	b.n	40462 <__gethex+0xd2>
   40458:	2400      	movs	r4, #0
   4045a:	4625      	mov	r5, r4
   4045c:	e7e0      	b.n	40420 <__gethex+0x90>
   4045e:	2d00      	cmp	r5, #0
   40460:	d1f7      	bne.n	40452 <__gethex+0xc2>
   40462:	7833      	ldrb	r3, [r6, #0]
   40464:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   40468:	2b50      	cmp	r3, #80	; 0x50
   4046a:	d13b      	bne.n	404e4 <__gethex+0x154>
   4046c:	7873      	ldrb	r3, [r6, #1]
   4046e:	2b2b      	cmp	r3, #43	; 0x2b
   40470:	d02c      	beq.n	404cc <__gethex+0x13c>
   40472:	2b2d      	cmp	r3, #45	; 0x2d
   40474:	d02e      	beq.n	404d4 <__gethex+0x144>
   40476:	1c71      	adds	r1, r6, #1
   40478:	f04f 0900 	mov.w	r9, #0
   4047c:	7808      	ldrb	r0, [r1, #0]
   4047e:	f004 ffe3 	bl	45448 <__hexdig_fun>
   40482:	1e43      	subs	r3, r0, #1
   40484:	b2db      	uxtb	r3, r3
   40486:	2b18      	cmp	r3, #24
   40488:	d82c      	bhi.n	404e4 <__gethex+0x154>
   4048a:	f1a0 0210 	sub.w	r2, r0, #16
   4048e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   40492:	f004 ffd9 	bl	45448 <__hexdig_fun>
   40496:	1e43      	subs	r3, r0, #1
   40498:	b2db      	uxtb	r3, r3
   4049a:	2b18      	cmp	r3, #24
   4049c:	d91d      	bls.n	404da <__gethex+0x14a>
   4049e:	f1b9 0f00 	cmp.w	r9, #0
   404a2:	d000      	beq.n	404a6 <__gethex+0x116>
   404a4:	4252      	negs	r2, r2
   404a6:	4415      	add	r5, r2
   404a8:	f8cb 1000 	str.w	r1, [fp]
   404ac:	b1e4      	cbz	r4, 404e8 <__gethex+0x158>
   404ae:	9b00      	ldr	r3, [sp, #0]
   404b0:	2b00      	cmp	r3, #0
   404b2:	bf14      	ite	ne
   404b4:	2700      	movne	r7, #0
   404b6:	2706      	moveq	r7, #6
   404b8:	4638      	mov	r0, r7
   404ba:	b009      	add	sp, #36	; 0x24
   404bc:	ecbd 8b02 	vpop	{d8}
   404c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   404c4:	463e      	mov	r6, r7
   404c6:	4625      	mov	r5, r4
   404c8:	2401      	movs	r4, #1
   404ca:	e7ca      	b.n	40462 <__gethex+0xd2>
   404cc:	f04f 0900 	mov.w	r9, #0
   404d0:	1cb1      	adds	r1, r6, #2
   404d2:	e7d3      	b.n	4047c <__gethex+0xec>
   404d4:	f04f 0901 	mov.w	r9, #1
   404d8:	e7fa      	b.n	404d0 <__gethex+0x140>
   404da:	230a      	movs	r3, #10
   404dc:	fb03 0202 	mla	r2, r3, r2, r0
   404e0:	3a10      	subs	r2, #16
   404e2:	e7d4      	b.n	4048e <__gethex+0xfe>
   404e4:	4631      	mov	r1, r6
   404e6:	e7df      	b.n	404a8 <__gethex+0x118>
   404e8:	1bf3      	subs	r3, r6, r7
   404ea:	4621      	mov	r1, r4
   404ec:	3b01      	subs	r3, #1
   404ee:	2b07      	cmp	r3, #7
   404f0:	dc52      	bgt.n	40598 <__gethex+0x208>
   404f2:	ee18 0a10 	vmov	r0, s16
   404f6:	f04f 0b00 	mov.w	fp, #0
   404fa:	f005 f8cf 	bl	4569c <_Balloc>
   404fe:	f1ca 0301 	rsb	r3, sl, #1
   40502:	f100 0914 	add.w	r9, r0, #20
   40506:	4604      	mov	r4, r0
   40508:	f8cd b000 	str.w	fp, [sp]
   4050c:	f8cd 9008 	str.w	r9, [sp, #8]
   40510:	9306      	str	r3, [sp, #24]
   40512:	42b7      	cmp	r7, r6
   40514:	d343      	bcc.n	4059e <__gethex+0x20e>
   40516:	9802      	ldr	r0, [sp, #8]
   40518:	9b00      	ldr	r3, [sp, #0]
   4051a:	f840 3b04 	str.w	r3, [r0], #4
   4051e:	eba0 0009 	sub.w	r0, r0, r9
   40522:	1080      	asrs	r0, r0, #2
   40524:	0146      	lsls	r6, r0, #5
   40526:	6120      	str	r0, [r4, #16]
   40528:	4618      	mov	r0, r3
   4052a:	f005 f97f 	bl	4582c <__hi0bits>
   4052e:	1a30      	subs	r0, r6, r0
   40530:	f8d8 6000 	ldr.w	r6, [r8]
   40534:	42b0      	cmp	r0, r6
   40536:	dd66      	ble.n	40606 <__gethex+0x276>
   40538:	1b87      	subs	r7, r0, r6
   4053a:	4620      	mov	r0, r4
   4053c:	4639      	mov	r1, r7
   4053e:	f005 fc07 	bl	45d50 <__any_on>
   40542:	4682      	mov	sl, r0
   40544:	b1a8      	cbz	r0, 40572 <__gethex+0x1e2>
   40546:	1e7b      	subs	r3, r7, #1
   40548:	f04f 0a01 	mov.w	sl, #1
   4054c:	1159      	asrs	r1, r3, #5
   4054e:	f003 021f 	and.w	r2, r3, #31
   40552:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   40556:	fa0a f202 	lsl.w	r2, sl, r2
   4055a:	420a      	tst	r2, r1
   4055c:	d009      	beq.n	40572 <__gethex+0x1e2>
   4055e:	4553      	cmp	r3, sl
   40560:	dd05      	ble.n	4056e <__gethex+0x1de>
   40562:	1eb9      	subs	r1, r7, #2
   40564:	4620      	mov	r0, r4
   40566:	f005 fbf3 	bl	45d50 <__any_on>
   4056a:	2800      	cmp	r0, #0
   4056c:	d148      	bne.n	40600 <__gethex+0x270>
   4056e:	f04f 0a02 	mov.w	sl, #2
   40572:	443d      	add	r5, r7
   40574:	4639      	mov	r1, r7
   40576:	4620      	mov	r0, r4
   40578:	f004 ff15 	bl	453a6 <rshift>
   4057c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   40580:	42ab      	cmp	r3, r5
   40582:	da4f      	bge.n	40624 <__gethex+0x294>
   40584:	4621      	mov	r1, r4
   40586:	ee18 0a10 	vmov	r0, s16
   4058a:	f005 f8bb 	bl	45704 <_Bfree>
   4058e:	2300      	movs	r3, #0
   40590:	9a14      	ldr	r2, [sp, #80]	; 0x50
   40592:	27a3      	movs	r7, #163	; 0xa3
   40594:	6013      	str	r3, [r2, #0]
   40596:	e78f      	b.n	404b8 <__gethex+0x128>
   40598:	3101      	adds	r1, #1
   4059a:	105b      	asrs	r3, r3, #1
   4059c:	e7a7      	b.n	404ee <__gethex+0x15e>
   4059e:	1e73      	subs	r3, r6, #1
   405a0:	9a05      	ldr	r2, [sp, #20]
   405a2:	9303      	str	r3, [sp, #12]
   405a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   405a8:	4293      	cmp	r3, r2
   405aa:	d019      	beq.n	405e0 <__gethex+0x250>
   405ac:	f1bb 0f20 	cmp.w	fp, #32
   405b0:	d107      	bne.n	405c2 <__gethex+0x232>
   405b2:	9b02      	ldr	r3, [sp, #8]
   405b4:	9a00      	ldr	r2, [sp, #0]
   405b6:	f843 2b04 	str.w	r2, [r3], #4
   405ba:	9302      	str	r3, [sp, #8]
   405bc:	2300      	movs	r3, #0
   405be:	469b      	mov	fp, r3
   405c0:	9300      	str	r3, [sp, #0]
   405c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   405c6:	f004 ff3f 	bl	45448 <__hexdig_fun>
   405ca:	f000 000f 	and.w	r0, r0, #15
   405ce:	9b00      	ldr	r3, [sp, #0]
   405d0:	fa00 f00b 	lsl.w	r0, r0, fp
   405d4:	f10b 0b04 	add.w	fp, fp, #4
   405d8:	4303      	orrs	r3, r0
   405da:	9300      	str	r3, [sp, #0]
   405dc:	9b03      	ldr	r3, [sp, #12]
   405de:	e00d      	b.n	405fc <__gethex+0x26c>
   405e0:	9b03      	ldr	r3, [sp, #12]
   405e2:	9a06      	ldr	r2, [sp, #24]
   405e4:	4413      	add	r3, r2
   405e6:	42bb      	cmp	r3, r7
   405e8:	d3e0      	bcc.n	405ac <__gethex+0x21c>
   405ea:	4618      	mov	r0, r3
   405ec:	4652      	mov	r2, sl
   405ee:	9901      	ldr	r1, [sp, #4]
   405f0:	9307      	str	r3, [sp, #28]
   405f2:	f004 fd78 	bl	450e6 <strncmp>
   405f6:	9b07      	ldr	r3, [sp, #28]
   405f8:	2800      	cmp	r0, #0
   405fa:	d1d7      	bne.n	405ac <__gethex+0x21c>
   405fc:	461e      	mov	r6, r3
   405fe:	e788      	b.n	40512 <__gethex+0x182>
   40600:	f04f 0a03 	mov.w	sl, #3
   40604:	e7b5      	b.n	40572 <__gethex+0x1e2>
   40606:	da0a      	bge.n	4061e <__gethex+0x28e>
   40608:	1a37      	subs	r7, r6, r0
   4060a:	4621      	mov	r1, r4
   4060c:	ee18 0a10 	vmov	r0, s16
   40610:	463a      	mov	r2, r7
   40612:	1bed      	subs	r5, r5, r7
   40614:	f005 f9fe 	bl	45a14 <__lshift>
   40618:	4604      	mov	r4, r0
   4061a:	f100 0914 	add.w	r9, r0, #20
   4061e:	f04f 0a00 	mov.w	sl, #0
   40622:	e7ab      	b.n	4057c <__gethex+0x1ec>
   40624:	f8d8 0004 	ldr.w	r0, [r8, #4]
   40628:	42a8      	cmp	r0, r5
   4062a:	dd6f      	ble.n	4070c <__gethex+0x37c>
   4062c:	1b45      	subs	r5, r0, r5
   4062e:	42ae      	cmp	r6, r5
   40630:	dc32      	bgt.n	40698 <__gethex+0x308>
   40632:	f8d8 300c 	ldr.w	r3, [r8, #12]
   40636:	2b02      	cmp	r3, #2
   40638:	d023      	beq.n	40682 <__gethex+0x2f2>
   4063a:	2b03      	cmp	r3, #3
   4063c:	d025      	beq.n	4068a <__gethex+0x2fa>
   4063e:	2b01      	cmp	r3, #1
   40640:	d115      	bne.n	4066e <__gethex+0x2de>
   40642:	42ae      	cmp	r6, r5
   40644:	d113      	bne.n	4066e <__gethex+0x2de>
   40646:	2e01      	cmp	r6, #1
   40648:	d10b      	bne.n	40662 <__gethex+0x2d2>
   4064a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   4064e:	2762      	movs	r7, #98	; 0x62
   40650:	9a04      	ldr	r2, [sp, #16]
   40652:	6013      	str	r3, [r2, #0]
   40654:	2301      	movs	r3, #1
   40656:	6123      	str	r3, [r4, #16]
   40658:	f8c9 3000 	str.w	r3, [r9]
   4065c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   4065e:	601c      	str	r4, [r3, #0]
   40660:	e72a      	b.n	404b8 <__gethex+0x128>
   40662:	1e71      	subs	r1, r6, #1
   40664:	4620      	mov	r0, r4
   40666:	f005 fb73 	bl	45d50 <__any_on>
   4066a:	2800      	cmp	r0, #0
   4066c:	d1ed      	bne.n	4064a <__gethex+0x2ba>
   4066e:	4621      	mov	r1, r4
   40670:	ee18 0a10 	vmov	r0, s16
   40674:	f005 f846 	bl	45704 <_Bfree>
   40678:	2300      	movs	r3, #0
   4067a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   4067c:	2750      	movs	r7, #80	; 0x50
   4067e:	6013      	str	r3, [r2, #0]
   40680:	e71a      	b.n	404b8 <__gethex+0x128>
   40682:	9b15      	ldr	r3, [sp, #84]	; 0x54
   40684:	2b00      	cmp	r3, #0
   40686:	d1f2      	bne.n	4066e <__gethex+0x2de>
   40688:	e7df      	b.n	4064a <__gethex+0x2ba>
   4068a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   4068c:	2b00      	cmp	r3, #0
   4068e:	d1dc      	bne.n	4064a <__gethex+0x2ba>
   40690:	e7ed      	b.n	4066e <__gethex+0x2de>
   40692:	bf00      	nop
   40694:	000474c0 	.word	0x000474c0
   40698:	1e6f      	subs	r7, r5, #1
   4069a:	f1ba 0f00 	cmp.w	sl, #0
   4069e:	d132      	bne.n	40706 <__gethex+0x376>
   406a0:	b127      	cbz	r7, 406ac <__gethex+0x31c>
   406a2:	4639      	mov	r1, r7
   406a4:	4620      	mov	r0, r4
   406a6:	f005 fb53 	bl	45d50 <__any_on>
   406aa:	4682      	mov	sl, r0
   406ac:	117b      	asrs	r3, r7, #5
   406ae:	2101      	movs	r1, #1
   406b0:	f007 071f 	and.w	r7, r7, #31
   406b4:	4620      	mov	r0, r4
   406b6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   406ba:	1b76      	subs	r6, r6, r5
   406bc:	fa01 f707 	lsl.w	r7, r1, r7
   406c0:	4629      	mov	r1, r5
   406c2:	421f      	tst	r7, r3
   406c4:	f04f 0702 	mov.w	r7, #2
   406c8:	bf18      	it	ne
   406ca:	f04a 0a02 	orrne.w	sl, sl, #2
   406ce:	f004 fe6a 	bl	453a6 <rshift>
   406d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
   406d6:	f1ba 0f00 	cmp.w	sl, #0
   406da:	d048      	beq.n	4076e <__gethex+0x3de>
   406dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   406e0:	2b02      	cmp	r3, #2
   406e2:	d015      	beq.n	40710 <__gethex+0x380>
   406e4:	2b03      	cmp	r3, #3
   406e6:	d017      	beq.n	40718 <__gethex+0x388>
   406e8:	2b01      	cmp	r3, #1
   406ea:	d109      	bne.n	40700 <__gethex+0x370>
   406ec:	f01a 0f02 	tst.w	sl, #2
   406f0:	d006      	beq.n	40700 <__gethex+0x370>
   406f2:	f8d9 0000 	ldr.w	r0, [r9]
   406f6:	ea4a 0a00 	orr.w	sl, sl, r0
   406fa:	f01a 0f01 	tst.w	sl, #1
   406fe:	d10e      	bne.n	4071e <__gethex+0x38e>
   40700:	f047 0710 	orr.w	r7, r7, #16
   40704:	e033      	b.n	4076e <__gethex+0x3de>
   40706:	f04f 0a01 	mov.w	sl, #1
   4070a:	e7cf      	b.n	406ac <__gethex+0x31c>
   4070c:	2701      	movs	r7, #1
   4070e:	e7e2      	b.n	406d6 <__gethex+0x346>
   40710:	9b15      	ldr	r3, [sp, #84]	; 0x54
   40712:	f1c3 0301 	rsb	r3, r3, #1
   40716:	9315      	str	r3, [sp, #84]	; 0x54
   40718:	9b15      	ldr	r3, [sp, #84]	; 0x54
   4071a:	2b00      	cmp	r3, #0
   4071c:	d0f0      	beq.n	40700 <__gethex+0x370>
   4071e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   40722:	f104 0314 	add.w	r3, r4, #20
   40726:	f04f 0c00 	mov.w	ip, #0
   4072a:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   4072e:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   40732:	4618      	mov	r0, r3
   40734:	f853 2b04 	ldr.w	r2, [r3], #4
   40738:	f1b2 3fff 	cmp.w	r2, #4294967295
   4073c:	d01c      	beq.n	40778 <__gethex+0x3e8>
   4073e:	3201      	adds	r2, #1
   40740:	6002      	str	r2, [r0, #0]
   40742:	2f02      	cmp	r7, #2
   40744:	f104 0314 	add.w	r3, r4, #20
   40748:	d13a      	bne.n	407c0 <__gethex+0x430>
   4074a:	f8d8 2000 	ldr.w	r2, [r8]
   4074e:	3a01      	subs	r2, #1
   40750:	42b2      	cmp	r2, r6
   40752:	d10a      	bne.n	4076a <__gethex+0x3da>
   40754:	1171      	asrs	r1, r6, #5
   40756:	2201      	movs	r2, #1
   40758:	f006 061f 	and.w	r6, r6, #31
   4075c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   40760:	fa02 f606 	lsl.w	r6, r2, r6
   40764:	421e      	tst	r6, r3
   40766:	bf18      	it	ne
   40768:	4617      	movne	r7, r2
   4076a:	f047 0720 	orr.w	r7, r7, #32
   4076e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   40770:	601c      	str	r4, [r3, #0]
   40772:	9b04      	ldr	r3, [sp, #16]
   40774:	601d      	str	r5, [r3, #0]
   40776:	e69f      	b.n	404b8 <__gethex+0x128>
   40778:	4299      	cmp	r1, r3
   4077a:	f843 cc04 	str.w	ip, [r3, #-4]
   4077e:	d8d8      	bhi.n	40732 <__gethex+0x3a2>
   40780:	68a3      	ldr	r3, [r4, #8]
   40782:	4599      	cmp	r9, r3
   40784:	db14      	blt.n	407b0 <__gethex+0x420>
   40786:	6861      	ldr	r1, [r4, #4]
   40788:	ee18 0a10 	vmov	r0, s16
   4078c:	3101      	adds	r1, #1
   4078e:	f004 ff85 	bl	4569c <_Balloc>
   40792:	6922      	ldr	r2, [r4, #16]
   40794:	4682      	mov	sl, r0
   40796:	f104 010c 	add.w	r1, r4, #12
   4079a:	3202      	adds	r2, #2
   4079c:	300c      	adds	r0, #12
   4079e:	0092      	lsls	r2, r2, #2
   407a0:	f004 faa1 	bl	44ce6 <memcpy>
   407a4:	4621      	mov	r1, r4
   407a6:	4654      	mov	r4, sl
   407a8:	ee18 0a10 	vmov	r0, s16
   407ac:	f004 ffaa 	bl	45704 <_Bfree>
   407b0:	6923      	ldr	r3, [r4, #16]
   407b2:	1c5a      	adds	r2, r3, #1
   407b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   407b8:	6122      	str	r2, [r4, #16]
   407ba:	2201      	movs	r2, #1
   407bc:	615a      	str	r2, [r3, #20]
   407be:	e7c0      	b.n	40742 <__gethex+0x3b2>
   407c0:	6922      	ldr	r2, [r4, #16]
   407c2:	454a      	cmp	r2, r9
   407c4:	dd0b      	ble.n	407de <__gethex+0x44e>
   407c6:	2101      	movs	r1, #1
   407c8:	4620      	mov	r0, r4
   407ca:	f004 fdec 	bl	453a6 <rshift>
   407ce:	3501      	adds	r5, #1
   407d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   407d4:	42ab      	cmp	r3, r5
   407d6:	f6ff aed5 	blt.w	40584 <__gethex+0x1f4>
   407da:	2701      	movs	r7, #1
   407dc:	e7c5      	b.n	4076a <__gethex+0x3da>
   407de:	f016 061f 	ands.w	r6, r6, #31
   407e2:	d0fa      	beq.n	407da <__gethex+0x44a>
   407e4:	449b      	add	fp, r3
   407e6:	f1c6 0620 	rsb	r6, r6, #32
   407ea:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   407ee:	f005 f81d 	bl	4582c <__hi0bits>
   407f2:	42b0      	cmp	r0, r6
   407f4:	dbe7      	blt.n	407c6 <__gethex+0x436>
   407f6:	e7f0      	b.n	407da <__gethex+0x44a>

000407f8 <_localeconv_r>:
   407f8:	4800      	ldr	r0, [pc, #0]	; (407fc <_localeconv_r+0x4>)
   407fa:	4770      	bx	lr
   407fc:	200208b4 	.word	0x200208b4

00040800 <_lseek_r>:
   40800:	b538      	push	{r3, r4, r5, lr}
   40802:	4604      	mov	r4, r0
   40804:	4d06      	ldr	r5, [pc, #24]	; (40820 <_lseek_r+0x20>)
   40806:	4608      	mov	r0, r1
   40808:	4611      	mov	r1, r2
   4080a:	2200      	movs	r2, #0
   4080c:	602a      	str	r2, [r5, #0]
   4080e:	461a      	mov	r2, r3
   40810:	f001 ff22 	bl	42658 <_lseek>
   40814:	1c43      	adds	r3, r0, #1
   40816:	d102      	bne.n	4081e <_lseek_r+0x1e>
   40818:	682b      	ldr	r3, [r5, #0]
   4081a:	b103      	cbz	r3, 4081e <_lseek_r+0x1e>
   4081c:	6023      	str	r3, [r4, #0]
   4081e:	bd38      	pop	{r3, r4, r5, pc}
   40820:	2002d828 	.word	0x2002d828

00040824 <__smakebuf_r>:
   40824:	898b      	ldrh	r3, [r1, #12]
   40826:	b573      	push	{r0, r1, r4, r5, r6, lr}
   40828:	079d      	lsls	r5, r3, #30
   4082a:	4606      	mov	r6, r0
   4082c:	460c      	mov	r4, r1
   4082e:	d507      	bpl.n	40840 <__smakebuf_r+0x1c>
   40830:	f104 0347 	add.w	r3, r4, #71	; 0x47
   40834:	6023      	str	r3, [r4, #0]
   40836:	6123      	str	r3, [r4, #16]
   40838:	2301      	movs	r3, #1
   4083a:	6163      	str	r3, [r4, #20]
   4083c:	b002      	add	sp, #8
   4083e:	bd70      	pop	{r4, r5, r6, pc}
   40840:	ab01      	add	r3, sp, #4
   40842:	466a      	mov	r2, sp
   40844:	f004 feda 	bl	455fc <__swhatbuf_r>
   40848:	9900      	ldr	r1, [sp, #0]
   4084a:	4605      	mov	r5, r0
   4084c:	4630      	mov	r0, r6
   4084e:	f7fe fc47 	bl	3f0e0 <_malloc_r>
   40852:	b948      	cbnz	r0, 40868 <__smakebuf_r+0x44>
   40854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   40858:	059a      	lsls	r2, r3, #22
   4085a:	d4ef      	bmi.n	4083c <__smakebuf_r+0x18>
   4085c:	f023 0303 	bic.w	r3, r3, #3
   40860:	f043 0302 	orr.w	r3, r3, #2
   40864:	81a3      	strh	r3, [r4, #12]
   40866:	e7e3      	b.n	40830 <__smakebuf_r+0xc>
   40868:	4b0d      	ldr	r3, [pc, #52]	; (408a0 <__smakebuf_r+0x7c>)
   4086a:	62b3      	str	r3, [r6, #40]	; 0x28
   4086c:	89a3      	ldrh	r3, [r4, #12]
   4086e:	6020      	str	r0, [r4, #0]
   40870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   40874:	6120      	str	r0, [r4, #16]
   40876:	81a3      	strh	r3, [r4, #12]
   40878:	9b00      	ldr	r3, [sp, #0]
   4087a:	6163      	str	r3, [r4, #20]
   4087c:	9b01      	ldr	r3, [sp, #4]
   4087e:	b15b      	cbz	r3, 40898 <__smakebuf_r+0x74>
   40880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   40884:	4630      	mov	r0, r6
   40886:	f000 fce5 	bl	41254 <_isatty_r>
   4088a:	b128      	cbz	r0, 40898 <__smakebuf_r+0x74>
   4088c:	89a3      	ldrh	r3, [r4, #12]
   4088e:	f023 0303 	bic.w	r3, r3, #3
   40892:	f043 0301 	orr.w	r3, r3, #1
   40896:	81a3      	strh	r3, [r4, #12]
   40898:	89a0      	ldrh	r0, [r4, #12]
   4089a:	4305      	orrs	r5, r0
   4089c:	81a5      	strh	r5, [r4, #12]
   4089e:	e7cd      	b.n	4083c <__smakebuf_r+0x18>
   408a0:	00040259 	.word	0x00040259

000408a4 <__malloc_lock>:
   408a4:	4801      	ldr	r0, [pc, #4]	; (408ac <__malloc_lock+0x8>)
   408a6:	f004 bea7 	b.w	455f8 <__retarget_lock_acquire_recursive>
   408aa:	bf00      	nop
   408ac:	2002d830 	.word	0x2002d830

000408b0 <__malloc_unlock>:
   408b0:	4801      	ldr	r0, [pc, #4]	; (408b8 <__malloc_unlock+0x8>)
   408b2:	f004 bea2 	b.w	455fa <__retarget_lock_release_recursive>
   408b6:	bf00      	nop
   408b8:	2002d830 	.word	0x2002d830

000408bc <__pow5mult>:
   408bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   408c0:	4615      	mov	r5, r2
   408c2:	f012 0203 	ands.w	r2, r2, #3
   408c6:	4606      	mov	r6, r0
   408c8:	460f      	mov	r7, r1
   408ca:	d007      	beq.n	408dc <__pow5mult+0x20>
   408cc:	3a01      	subs	r2, #1
   408ce:	4c21      	ldr	r4, [pc, #132]	; (40954 <__pow5mult+0x98>)
   408d0:	2300      	movs	r3, #0
   408d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   408d6:	f004 ff2c 	bl	45732 <__multadd>
   408da:	4607      	mov	r7, r0
   408dc:	10ad      	asrs	r5, r5, #2
   408de:	d035      	beq.n	4094c <__pow5mult+0x90>
   408e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   408e2:	b93c      	cbnz	r4, 408f4 <__pow5mult+0x38>
   408e4:	2010      	movs	r0, #16
   408e6:	f7fe fb9b 	bl	3f020 <malloc>
   408ea:	6270      	str	r0, [r6, #36]	; 0x24
   408ec:	6004      	str	r4, [r0, #0]
   408ee:	60c4      	str	r4, [r0, #12]
   408f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   408f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   408f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   408fc:	b94c      	cbnz	r4, 40912 <__pow5mult+0x56>
   408fe:	f240 2171 	movw	r1, #625	; 0x271
   40902:	4630      	mov	r0, r6
   40904:	f004 ffe2 	bl	458cc <__i2b>
   40908:	2300      	movs	r3, #0
   4090a:	4604      	mov	r4, r0
   4090c:	f8c8 0008 	str.w	r0, [r8, #8]
   40910:	6003      	str	r3, [r0, #0]
   40912:	f04f 0900 	mov.w	r9, #0
   40916:	07eb      	lsls	r3, r5, #31
   40918:	d50a      	bpl.n	40930 <__pow5mult+0x74>
   4091a:	4639      	mov	r1, r7
   4091c:	4622      	mov	r2, r4
   4091e:	4630      	mov	r0, r6
   40920:	f004 ffdd 	bl	458de <__multiply>
   40924:	4680      	mov	r8, r0
   40926:	4639      	mov	r1, r7
   40928:	4630      	mov	r0, r6
   4092a:	4647      	mov	r7, r8
   4092c:	f004 feea 	bl	45704 <_Bfree>
   40930:	106d      	asrs	r5, r5, #1
   40932:	d00b      	beq.n	4094c <__pow5mult+0x90>
   40934:	6820      	ldr	r0, [r4, #0]
   40936:	b938      	cbnz	r0, 40948 <__pow5mult+0x8c>
   40938:	4622      	mov	r2, r4
   4093a:	4621      	mov	r1, r4
   4093c:	4630      	mov	r0, r6
   4093e:	f004 ffce 	bl	458de <__multiply>
   40942:	6020      	str	r0, [r4, #0]
   40944:	f8c0 9000 	str.w	r9, [r0]
   40948:	4604      	mov	r4, r0
   4094a:	e7e4      	b.n	40916 <__pow5mult+0x5a>
   4094c:	4638      	mov	r0, r7
   4094e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   40952:	bf00      	nop
   40954:	000474cc 	.word	0x000474cc

00040958 <__ulp>:
   40958:	b082      	sub	sp, #8
   4095a:	4913      	ldr	r1, [pc, #76]	; (409a8 <__ulp+0x50>)
   4095c:	ed8d 0b00 	vstr	d0, [sp]
   40960:	9b01      	ldr	r3, [sp, #4]
   40962:	4019      	ands	r1, r3
   40964:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   40968:	2900      	cmp	r1, #0
   4096a:	dd05      	ble.n	40978 <__ulp+0x20>
   4096c:	2200      	movs	r2, #0
   4096e:	460b      	mov	r3, r1
   40970:	ec43 2b10 	vmov	d0, r2, r3
   40974:	b002      	add	sp, #8
   40976:	4770      	bx	lr
   40978:	4249      	negs	r1, r1
   4097a:	2200      	movs	r2, #0
   4097c:	2300      	movs	r3, #0
   4097e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   40982:	ea4f 5021 	mov.w	r0, r1, asr #20
   40986:	da04      	bge.n	40992 <__ulp+0x3a>
   40988:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   4098c:	fa41 f300 	asr.w	r3, r1, r0
   40990:	e7ee      	b.n	40970 <__ulp+0x18>
   40992:	f1a0 0114 	sub.w	r1, r0, #20
   40996:	291e      	cmp	r1, #30
   40998:	bfd6      	itet	le
   4099a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   4099e:	2101      	movgt	r1, #1
   409a0:	fa20 f101 	lsrle.w	r1, r0, r1
   409a4:	460a      	mov	r2, r1
   409a6:	e7e3      	b.n	40970 <__ulp+0x18>
   409a8:	7ff00000 	.word	0x7ff00000

000409ac <__b2d>:
   409ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   409ae:	6905      	ldr	r5, [r0, #16]
   409b0:	f100 0714 	add.w	r7, r0, #20
   409b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   409b8:	f855 4c04 	ldr.w	r4, [r5, #-4]
   409bc:	1f2e      	subs	r6, r5, #4
   409be:	4620      	mov	r0, r4
   409c0:	f004 ff34 	bl	4582c <__hi0bits>
   409c4:	f1c0 0320 	rsb	r3, r0, #32
   409c8:	280a      	cmp	r0, #10
   409ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 40a48 <__b2d+0x9c>
   409ce:	600b      	str	r3, [r1, #0]
   409d0:	dc15      	bgt.n	409fe <__b2d+0x52>
   409d2:	f1c0 0e0b 	rsb	lr, r0, #11
   409d6:	42b7      	cmp	r7, r6
   409d8:	f100 0015 	add.w	r0, r0, #21
   409dc:	fa24 f10e 	lsr.w	r1, r4, lr
   409e0:	fa04 f000 	lsl.w	r0, r4, r0
   409e4:	ea41 030c 	orr.w	r3, r1, ip
   409e8:	bf34      	ite	cc
   409ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   409ee:	2100      	movcs	r1, #0
   409f0:	fa21 f10e 	lsr.w	r1, r1, lr
   409f4:	ea40 0201 	orr.w	r2, r0, r1
   409f8:	ec43 2b10 	vmov	d0, r2, r3
   409fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   409fe:	42b7      	cmp	r7, r6
   40a00:	bf3a      	itte	cc
   40a02:	f1a5 0608 	subcc.w	r6, r5, #8
   40a06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   40a0a:	2100      	movcs	r1, #0
   40a0c:	380b      	subs	r0, #11
   40a0e:	d017      	beq.n	40a40 <__b2d+0x94>
   40a10:	f1c0 0c20 	rsb	ip, r0, #32
   40a14:	fa04 f500 	lsl.w	r5, r4, r0
   40a18:	42be      	cmp	r6, r7
   40a1a:	fa01 f000 	lsl.w	r0, r1, r0
   40a1e:	fa21 f40c 	lsr.w	r4, r1, ip
   40a22:	ea45 0504 	orr.w	r5, r5, r4
   40a26:	bf8c      	ite	hi
   40a28:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   40a2c:	2400      	movls	r4, #0
   40a2e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   40a32:	fa24 f40c 	lsr.w	r4, r4, ip
   40a36:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   40a3a:	ea40 0204 	orr.w	r2, r0, r4
   40a3e:	e7db      	b.n	409f8 <__b2d+0x4c>
   40a40:	ea44 030c 	orr.w	r3, r4, ip
   40a44:	460a      	mov	r2, r1
   40a46:	e7d7      	b.n	409f8 <__b2d+0x4c>
   40a48:	3ff00000 	.word	0x3ff00000

00040a4c <_svfiprintf_r>:
   40a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40a50:	4698      	mov	r8, r3
   40a52:	898b      	ldrh	r3, [r1, #12]
   40a54:	b09d      	sub	sp, #116	; 0x74
   40a56:	4607      	mov	r7, r0
   40a58:	061b      	lsls	r3, r3, #24
   40a5a:	460d      	mov	r5, r1
   40a5c:	4614      	mov	r4, r2
   40a5e:	d50e      	bpl.n	40a7e <_svfiprintf_r+0x32>
   40a60:	690b      	ldr	r3, [r1, #16]
   40a62:	b963      	cbnz	r3, 40a7e <_svfiprintf_r+0x32>
   40a64:	2140      	movs	r1, #64	; 0x40
   40a66:	f7fe fb3b 	bl	3f0e0 <_malloc_r>
   40a6a:	6028      	str	r0, [r5, #0]
   40a6c:	6128      	str	r0, [r5, #16]
   40a6e:	b920      	cbnz	r0, 40a7a <_svfiprintf_r+0x2e>
   40a70:	230c      	movs	r3, #12
   40a72:	603b      	str	r3, [r7, #0]
   40a74:	f04f 30ff 	mov.w	r0, #4294967295
   40a78:	e0d1      	b.n	40c1e <_svfiprintf_r+0x1d2>
   40a7a:	2340      	movs	r3, #64	; 0x40
   40a7c:	616b      	str	r3, [r5, #20]
   40a7e:	2300      	movs	r3, #0
   40a80:	f8cd 800c 	str.w	r8, [sp, #12]
   40a84:	f04f 0901 	mov.w	r9, #1
   40a88:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 40c38 <_svfiprintf_r+0x1ec>
   40a8c:	9309      	str	r3, [sp, #36]	; 0x24
   40a8e:	2320      	movs	r3, #32
   40a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   40a94:	2330      	movs	r3, #48	; 0x30
   40a96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   40a9a:	4623      	mov	r3, r4
   40a9c:	469a      	mov	sl, r3
   40a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
   40aa2:	b10a      	cbz	r2, 40aa8 <_svfiprintf_r+0x5c>
   40aa4:	2a25      	cmp	r2, #37	; 0x25
   40aa6:	d1f9      	bne.n	40a9c <_svfiprintf_r+0x50>
   40aa8:	ebba 0b04 	subs.w	fp, sl, r4
   40aac:	d00b      	beq.n	40ac6 <_svfiprintf_r+0x7a>
   40aae:	465b      	mov	r3, fp
   40ab0:	4622      	mov	r2, r4
   40ab2:	4629      	mov	r1, r5
   40ab4:	4638      	mov	r0, r7
   40ab6:	f005 f9a1 	bl	45dfc <__ssputs_r>
   40aba:	3001      	adds	r0, #1
   40abc:	f000 80aa 	beq.w	40c14 <_svfiprintf_r+0x1c8>
   40ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   40ac2:	445a      	add	r2, fp
   40ac4:	9209      	str	r2, [sp, #36]	; 0x24
   40ac6:	f89a 3000 	ldrb.w	r3, [sl]
   40aca:	2b00      	cmp	r3, #0
   40acc:	f000 80a2 	beq.w	40c14 <_svfiprintf_r+0x1c8>
   40ad0:	2300      	movs	r3, #0
   40ad2:	f04f 32ff 	mov.w	r2, #4294967295
   40ad6:	f10a 0a01 	add.w	sl, sl, #1
   40ada:	9304      	str	r3, [sp, #16]
   40adc:	9307      	str	r3, [sp, #28]
   40ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   40ae2:	931a      	str	r3, [sp, #104]	; 0x68
   40ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
   40ae8:	4654      	mov	r4, sl
   40aea:	2205      	movs	r2, #5
   40aec:	4852      	ldr	r0, [pc, #328]	; (40c38 <_svfiprintf_r+0x1ec>)
   40aee:	f814 1b01 	ldrb.w	r1, [r4], #1
   40af2:	f004 f8dc 	bl	44cae <memchr>
   40af6:	9a04      	ldr	r2, [sp, #16]
   40af8:	b9d8      	cbnz	r0, 40b32 <_svfiprintf_r+0xe6>
   40afa:	06d0      	lsls	r0, r2, #27
   40afc:	bf44      	itt	mi
   40afe:	2320      	movmi	r3, #32
   40b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   40b04:	0711      	lsls	r1, r2, #28
   40b06:	bf44      	itt	mi
   40b08:	232b      	movmi	r3, #43	; 0x2b
   40b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   40b0e:	f89a 3000 	ldrb.w	r3, [sl]
   40b12:	2b2a      	cmp	r3, #42	; 0x2a
   40b14:	d015      	beq.n	40b42 <_svfiprintf_r+0xf6>
   40b16:	9a07      	ldr	r2, [sp, #28]
   40b18:	4654      	mov	r4, sl
   40b1a:	2000      	movs	r0, #0
   40b1c:	f04f 0c0a 	mov.w	ip, #10
   40b20:	4621      	mov	r1, r4
   40b22:	f811 3b01 	ldrb.w	r3, [r1], #1
   40b26:	3b30      	subs	r3, #48	; 0x30
   40b28:	2b09      	cmp	r3, #9
   40b2a:	d94e      	bls.n	40bca <_svfiprintf_r+0x17e>
   40b2c:	b1b0      	cbz	r0, 40b5c <_svfiprintf_r+0x110>
   40b2e:	9207      	str	r2, [sp, #28]
   40b30:	e014      	b.n	40b5c <_svfiprintf_r+0x110>
   40b32:	eba0 0308 	sub.w	r3, r0, r8
   40b36:	46a2      	mov	sl, r4
   40b38:	fa09 f303 	lsl.w	r3, r9, r3
   40b3c:	4313      	orrs	r3, r2
   40b3e:	9304      	str	r3, [sp, #16]
   40b40:	e7d2      	b.n	40ae8 <_svfiprintf_r+0x9c>
   40b42:	9b03      	ldr	r3, [sp, #12]
   40b44:	1d19      	adds	r1, r3, #4
   40b46:	681b      	ldr	r3, [r3, #0]
   40b48:	2b00      	cmp	r3, #0
   40b4a:	9103      	str	r1, [sp, #12]
   40b4c:	bfbb      	ittet	lt
   40b4e:	425b      	neglt	r3, r3
   40b50:	f042 0202 	orrlt.w	r2, r2, #2
   40b54:	9307      	strge	r3, [sp, #28]
   40b56:	9307      	strlt	r3, [sp, #28]
   40b58:	bfb8      	it	lt
   40b5a:	9204      	strlt	r2, [sp, #16]
   40b5c:	7823      	ldrb	r3, [r4, #0]
   40b5e:	2b2e      	cmp	r3, #46	; 0x2e
   40b60:	d10c      	bne.n	40b7c <_svfiprintf_r+0x130>
   40b62:	7863      	ldrb	r3, [r4, #1]
   40b64:	2b2a      	cmp	r3, #42	; 0x2a
   40b66:	d135      	bne.n	40bd4 <_svfiprintf_r+0x188>
   40b68:	9b03      	ldr	r3, [sp, #12]
   40b6a:	3402      	adds	r4, #2
   40b6c:	1d1a      	adds	r2, r3, #4
   40b6e:	681b      	ldr	r3, [r3, #0]
   40b70:	2b00      	cmp	r3, #0
   40b72:	9203      	str	r2, [sp, #12]
   40b74:	bfb8      	it	lt
   40b76:	f04f 33ff 	movlt.w	r3, #4294967295
   40b7a:	9305      	str	r3, [sp, #20]
   40b7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 40c48 <_svfiprintf_r+0x1fc>
   40b80:	2203      	movs	r2, #3
   40b82:	7821      	ldrb	r1, [r4, #0]
   40b84:	4650      	mov	r0, sl
   40b86:	f004 f892 	bl	44cae <memchr>
   40b8a:	b140      	cbz	r0, 40b9e <_svfiprintf_r+0x152>
   40b8c:	2340      	movs	r3, #64	; 0x40
   40b8e:	eba0 000a 	sub.w	r0, r0, sl
   40b92:	3401      	adds	r4, #1
   40b94:	fa03 f000 	lsl.w	r0, r3, r0
   40b98:	9b04      	ldr	r3, [sp, #16]
   40b9a:	4303      	orrs	r3, r0
   40b9c:	9304      	str	r3, [sp, #16]
   40b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
   40ba2:	2206      	movs	r2, #6
   40ba4:	4825      	ldr	r0, [pc, #148]	; (40c3c <_svfiprintf_r+0x1f0>)
   40ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   40baa:	f004 f880 	bl	44cae <memchr>
   40bae:	2800      	cmp	r0, #0
   40bb0:	d038      	beq.n	40c24 <_svfiprintf_r+0x1d8>
   40bb2:	4b23      	ldr	r3, [pc, #140]	; (40c40 <_svfiprintf_r+0x1f4>)
   40bb4:	bb1b      	cbnz	r3, 40bfe <_svfiprintf_r+0x1b2>
   40bb6:	9b03      	ldr	r3, [sp, #12]
   40bb8:	3307      	adds	r3, #7
   40bba:	f023 0307 	bic.w	r3, r3, #7
   40bbe:	3308      	adds	r3, #8
   40bc0:	9303      	str	r3, [sp, #12]
   40bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   40bc4:	4433      	add	r3, r6
   40bc6:	9309      	str	r3, [sp, #36]	; 0x24
   40bc8:	e767      	b.n	40a9a <_svfiprintf_r+0x4e>
   40bca:	fb0c 3202 	mla	r2, ip, r2, r3
   40bce:	460c      	mov	r4, r1
   40bd0:	2001      	movs	r0, #1
   40bd2:	e7a5      	b.n	40b20 <_svfiprintf_r+0xd4>
   40bd4:	2300      	movs	r3, #0
   40bd6:	3401      	adds	r4, #1
   40bd8:	f04f 0c0a 	mov.w	ip, #10
   40bdc:	4619      	mov	r1, r3
   40bde:	9305      	str	r3, [sp, #20]
   40be0:	4620      	mov	r0, r4
   40be2:	f810 2b01 	ldrb.w	r2, [r0], #1
   40be6:	3a30      	subs	r2, #48	; 0x30
   40be8:	2a09      	cmp	r2, #9
   40bea:	d903      	bls.n	40bf4 <_svfiprintf_r+0x1a8>
   40bec:	2b00      	cmp	r3, #0
   40bee:	d0c5      	beq.n	40b7c <_svfiprintf_r+0x130>
   40bf0:	9105      	str	r1, [sp, #20]
   40bf2:	e7c3      	b.n	40b7c <_svfiprintf_r+0x130>
   40bf4:	fb0c 2101 	mla	r1, ip, r1, r2
   40bf8:	4604      	mov	r4, r0
   40bfa:	2301      	movs	r3, #1
   40bfc:	e7f0      	b.n	40be0 <_svfiprintf_r+0x194>
   40bfe:	ab03      	add	r3, sp, #12
   40c00:	462a      	mov	r2, r5
   40c02:	a904      	add	r1, sp, #16
   40c04:	4638      	mov	r0, r7
   40c06:	9300      	str	r3, [sp, #0]
   40c08:	4b0e      	ldr	r3, [pc, #56]	; (40c44 <_svfiprintf_r+0x1f8>)
   40c0a:	f7fe fbf3 	bl	3f3f4 <_printf_float>
   40c0e:	1c42      	adds	r2, r0, #1
   40c10:	4606      	mov	r6, r0
   40c12:	d1d6      	bne.n	40bc2 <_svfiprintf_r+0x176>
   40c14:	89ab      	ldrh	r3, [r5, #12]
   40c16:	065b      	lsls	r3, r3, #25
   40c18:	f53f af2c 	bmi.w	40a74 <_svfiprintf_r+0x28>
   40c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
   40c1e:	b01d      	add	sp, #116	; 0x74
   40c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40c24:	ab03      	add	r3, sp, #12
   40c26:	462a      	mov	r2, r5
   40c28:	a904      	add	r1, sp, #16
   40c2a:	4638      	mov	r0, r7
   40c2c:	9300      	str	r3, [sp, #0]
   40c2e:	4b05      	ldr	r3, [pc, #20]	; (40c44 <_svfiprintf_r+0x1f8>)
   40c30:	f7fe fe16 	bl	3f860 <_printf_i>
   40c34:	e7eb      	b.n	40c0e <_svfiprintf_r+0x1c2>
   40c36:	bf00      	nop
   40c38:	0004f45b 	.word	0x0004f45b
   40c3c:	0004f465 	.word	0x0004f465
   40c40:	0003f3f5 	.word	0x0003f3f5
   40c44:	00045dfd 	.word	0x00045dfd
   40c48:	0004f461 	.word	0x0004f461

00040c4c <__ssvfiscanf_r>:
   40c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40c50:	460c      	mov	r4, r1
   40c52:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   40c56:	2100      	movs	r1, #0
   40c58:	4606      	mov	r6, r0
   40c5a:	f10d 0804 	add.w	r8, sp, #4
   40c5e:	4fb4      	ldr	r7, [pc, #720]	; (40f30 <__ssvfiscanf_r+0x2e4>)
   40c60:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 40f3c <__ssvfiscanf_r+0x2f0>
   40c64:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   40c68:	9300      	str	r3, [sp, #0]
   40c6a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   40c6e:	49b1      	ldr	r1, [pc, #708]	; (40f34 <__ssvfiscanf_r+0x2e8>)
   40c70:	91a0      	str	r1, [sp, #640]	; 0x280
   40c72:	49b1      	ldr	r1, [pc, #708]	; (40f38 <__ssvfiscanf_r+0x2ec>)
   40c74:	91a1      	str	r1, [sp, #644]	; 0x284
   40c76:	f892 a000 	ldrb.w	sl, [r2]
   40c7a:	f1ba 0f00 	cmp.w	sl, #0
   40c7e:	f000 8154 	beq.w	40f2a <__ssvfiscanf_r+0x2de>
   40c82:	f81a 3007 	ldrb.w	r3, [sl, r7]
   40c86:	1c55      	adds	r5, r2, #1
   40c88:	f013 0308 	ands.w	r3, r3, #8
   40c8c:	d019      	beq.n	40cc2 <__ssvfiscanf_r+0x76>
   40c8e:	6863      	ldr	r3, [r4, #4]
   40c90:	2b00      	cmp	r3, #0
   40c92:	dd0f      	ble.n	40cb4 <__ssvfiscanf_r+0x68>
   40c94:	6823      	ldr	r3, [r4, #0]
   40c96:	781a      	ldrb	r2, [r3, #0]
   40c98:	5cba      	ldrb	r2, [r7, r2]
   40c9a:	0712      	lsls	r2, r2, #28
   40c9c:	d401      	bmi.n	40ca2 <__ssvfiscanf_r+0x56>
   40c9e:	462a      	mov	r2, r5
   40ca0:	e7e9      	b.n	40c76 <__ssvfiscanf_r+0x2a>
   40ca2:	9a45      	ldr	r2, [sp, #276]	; 0x114
   40ca4:	3301      	adds	r3, #1
   40ca6:	3201      	adds	r2, #1
   40ca8:	6023      	str	r3, [r4, #0]
   40caa:	9245      	str	r2, [sp, #276]	; 0x114
   40cac:	6862      	ldr	r2, [r4, #4]
   40cae:	3a01      	subs	r2, #1
   40cb0:	6062      	str	r2, [r4, #4]
   40cb2:	e7ec      	b.n	40c8e <__ssvfiscanf_r+0x42>
   40cb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   40cb6:	4621      	mov	r1, r4
   40cb8:	4630      	mov	r0, r6
   40cba:	4798      	blx	r3
   40cbc:	2800      	cmp	r0, #0
   40cbe:	d0e9      	beq.n	40c94 <__ssvfiscanf_r+0x48>
   40cc0:	e7ed      	b.n	40c9e <__ssvfiscanf_r+0x52>
   40cc2:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   40cc6:	f040 8086 	bne.w	40dd6 <__ssvfiscanf_r+0x18a>
   40cca:	9341      	str	r3, [sp, #260]	; 0x104
   40ccc:	9343      	str	r3, [sp, #268]	; 0x10c
   40cce:	7853      	ldrb	r3, [r2, #1]
   40cd0:	2b2a      	cmp	r3, #42	; 0x2a
   40cd2:	bf04      	itt	eq
   40cd4:	2310      	moveq	r3, #16
   40cd6:	1c95      	addeq	r5, r2, #2
   40cd8:	f04f 020a 	mov.w	r2, #10
   40cdc:	bf08      	it	eq
   40cde:	9341      	streq	r3, [sp, #260]	; 0x104
   40ce0:	46ab      	mov	fp, r5
   40ce2:	f81b 1b01 	ldrb.w	r1, [fp], #1
   40ce6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   40cea:	2b09      	cmp	r3, #9
   40cec:	d91d      	bls.n	40d2a <__ssvfiscanf_r+0xde>
   40cee:	2203      	movs	r2, #3
   40cf0:	4892      	ldr	r0, [pc, #584]	; (40f3c <__ssvfiscanf_r+0x2f0>)
   40cf2:	f003 ffdc 	bl	44cae <memchr>
   40cf6:	b140      	cbz	r0, 40d0a <__ssvfiscanf_r+0xbe>
   40cf8:	2301      	movs	r3, #1
   40cfa:	eba0 0009 	sub.w	r0, r0, r9
   40cfe:	465d      	mov	r5, fp
   40d00:	fa03 f000 	lsl.w	r0, r3, r0
   40d04:	9b41      	ldr	r3, [sp, #260]	; 0x104
   40d06:	4318      	orrs	r0, r3
   40d08:	9041      	str	r0, [sp, #260]	; 0x104
   40d0a:	f815 3b01 	ldrb.w	r3, [r5], #1
   40d0e:	2b78      	cmp	r3, #120	; 0x78
   40d10:	d806      	bhi.n	40d20 <__ssvfiscanf_r+0xd4>
   40d12:	2b57      	cmp	r3, #87	; 0x57
   40d14:	d810      	bhi.n	40d38 <__ssvfiscanf_r+0xec>
   40d16:	2b25      	cmp	r3, #37	; 0x25
   40d18:	d05d      	beq.n	40dd6 <__ssvfiscanf_r+0x18a>
   40d1a:	d857      	bhi.n	40dcc <__ssvfiscanf_r+0x180>
   40d1c:	2b00      	cmp	r3, #0
   40d1e:	d075      	beq.n	40e0c <__ssvfiscanf_r+0x1c0>
   40d20:	2303      	movs	r3, #3
   40d22:	9347      	str	r3, [sp, #284]	; 0x11c
   40d24:	230a      	movs	r3, #10
   40d26:	9342      	str	r3, [sp, #264]	; 0x108
   40d28:	e082      	b.n	40e30 <__ssvfiscanf_r+0x1e4>
   40d2a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   40d2c:	465d      	mov	r5, fp
   40d2e:	fb02 1303 	mla	r3, r2, r3, r1
   40d32:	3b30      	subs	r3, #48	; 0x30
   40d34:	9343      	str	r3, [sp, #268]	; 0x10c
   40d36:	e7d3      	b.n	40ce0 <__ssvfiscanf_r+0x94>
   40d38:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   40d3c:	2a20      	cmp	r2, #32
   40d3e:	d8ef      	bhi.n	40d20 <__ssvfiscanf_r+0xd4>
   40d40:	a101      	add	r1, pc, #4	; (adr r1, 40d48 <__ssvfiscanf_r+0xfc>)
   40d42:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   40d46:	bf00      	nop
   40d48:	00040e1b 	.word	0x00040e1b
   40d4c:	00040d21 	.word	0x00040d21
   40d50:	00040d21 	.word	0x00040d21
   40d54:	00040e79 	.word	0x00040e79
   40d58:	00040d21 	.word	0x00040d21
   40d5c:	00040d21 	.word	0x00040d21
   40d60:	00040d21 	.word	0x00040d21
   40d64:	00040d21 	.word	0x00040d21
   40d68:	00040d21 	.word	0x00040d21
   40d6c:	00040d21 	.word	0x00040d21
   40d70:	00040d21 	.word	0x00040d21
   40d74:	00040e8f 	.word	0x00040e8f
   40d78:	00040e65 	.word	0x00040e65
   40d7c:	00040dd3 	.word	0x00040dd3
   40d80:	00040dd3 	.word	0x00040dd3
   40d84:	00040dd3 	.word	0x00040dd3
   40d88:	00040d21 	.word	0x00040d21
   40d8c:	00040e69 	.word	0x00040e69
   40d90:	00040d21 	.word	0x00040d21
   40d94:	00040d21 	.word	0x00040d21
   40d98:	00040d21 	.word	0x00040d21
   40d9c:	00040d21 	.word	0x00040d21
   40da0:	00040e9f 	.word	0x00040e9f
   40da4:	00040e71 	.word	0x00040e71
   40da8:	00040e13 	.word	0x00040e13
   40dac:	00040d21 	.word	0x00040d21
   40db0:	00040d21 	.word	0x00040d21
   40db4:	00040e9b 	.word	0x00040e9b
   40db8:	00040d21 	.word	0x00040d21
   40dbc:	00040e65 	.word	0x00040e65
   40dc0:	00040d21 	.word	0x00040d21
   40dc4:	00040d21 	.word	0x00040d21
   40dc8:	00040e1b 	.word	0x00040e1b
   40dcc:	3b45      	subs	r3, #69	; 0x45
   40dce:	2b02      	cmp	r3, #2
   40dd0:	d8a6      	bhi.n	40d20 <__ssvfiscanf_r+0xd4>
   40dd2:	2305      	movs	r3, #5
   40dd4:	e02b      	b.n	40e2e <__ssvfiscanf_r+0x1e2>
   40dd6:	6863      	ldr	r3, [r4, #4]
   40dd8:	2b00      	cmp	r3, #0
   40dda:	dd0d      	ble.n	40df8 <__ssvfiscanf_r+0x1ac>
   40ddc:	6823      	ldr	r3, [r4, #0]
   40dde:	781a      	ldrb	r2, [r3, #0]
   40de0:	4552      	cmp	r2, sl
   40de2:	f040 80a2 	bne.w	40f2a <__ssvfiscanf_r+0x2de>
   40de6:	3301      	adds	r3, #1
   40de8:	6862      	ldr	r2, [r4, #4]
   40dea:	6023      	str	r3, [r4, #0]
   40dec:	3a01      	subs	r2, #1
   40dee:	9b45      	ldr	r3, [sp, #276]	; 0x114
   40df0:	6062      	str	r2, [r4, #4]
   40df2:	3301      	adds	r3, #1
   40df4:	9345      	str	r3, [sp, #276]	; 0x114
   40df6:	e752      	b.n	40c9e <__ssvfiscanf_r+0x52>
   40df8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   40dfa:	4621      	mov	r1, r4
   40dfc:	4630      	mov	r0, r6
   40dfe:	4798      	blx	r3
   40e00:	2800      	cmp	r0, #0
   40e02:	d0eb      	beq.n	40ddc <__ssvfiscanf_r+0x190>
   40e04:	9844      	ldr	r0, [sp, #272]	; 0x110
   40e06:	2800      	cmp	r0, #0
   40e08:	f040 8085 	bne.w	40f16 <__ssvfiscanf_r+0x2ca>
   40e0c:	f04f 30ff 	mov.w	r0, #4294967295
   40e10:	e087      	b.n	40f22 <__ssvfiscanf_r+0x2d6>
   40e12:	9a41      	ldr	r2, [sp, #260]	; 0x104
   40e14:	f042 0220 	orr.w	r2, r2, #32
   40e18:	9241      	str	r2, [sp, #260]	; 0x104
   40e1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   40e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   40e20:	9241      	str	r2, [sp, #260]	; 0x104
   40e22:	2210      	movs	r2, #16
   40e24:	2b6f      	cmp	r3, #111	; 0x6f
   40e26:	9242      	str	r2, [sp, #264]	; 0x108
   40e28:	bf34      	ite	cc
   40e2a:	2303      	movcc	r3, #3
   40e2c:	2304      	movcs	r3, #4
   40e2e:	9347      	str	r3, [sp, #284]	; 0x11c
   40e30:	6863      	ldr	r3, [r4, #4]
   40e32:	2b00      	cmp	r3, #0
   40e34:	dd42      	ble.n	40ebc <__ssvfiscanf_r+0x270>
   40e36:	9b41      	ldr	r3, [sp, #260]	; 0x104
   40e38:	0659      	lsls	r1, r3, #25
   40e3a:	d404      	bmi.n	40e46 <__ssvfiscanf_r+0x1fa>
   40e3c:	6823      	ldr	r3, [r4, #0]
   40e3e:	781a      	ldrb	r2, [r3, #0]
   40e40:	5cba      	ldrb	r2, [r7, r2]
   40e42:	0712      	lsls	r2, r2, #28
   40e44:	d441      	bmi.n	40eca <__ssvfiscanf_r+0x27e>
   40e46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   40e48:	2b02      	cmp	r3, #2
   40e4a:	dc50      	bgt.n	40eee <__ssvfiscanf_r+0x2a2>
   40e4c:	466b      	mov	r3, sp
   40e4e:	4622      	mov	r2, r4
   40e50:	a941      	add	r1, sp, #260	; 0x104
   40e52:	4630      	mov	r0, r6
   40e54:	f000 f876 	bl	40f44 <_scanf_chars>
   40e58:	2801      	cmp	r0, #1
   40e5a:	d066      	beq.n	40f2a <__ssvfiscanf_r+0x2de>
   40e5c:	2802      	cmp	r0, #2
   40e5e:	f47f af1e 	bne.w	40c9e <__ssvfiscanf_r+0x52>
   40e62:	e7cf      	b.n	40e04 <__ssvfiscanf_r+0x1b8>
   40e64:	220a      	movs	r2, #10
   40e66:	e7dd      	b.n	40e24 <__ssvfiscanf_r+0x1d8>
   40e68:	2300      	movs	r3, #0
   40e6a:	9342      	str	r3, [sp, #264]	; 0x108
   40e6c:	2303      	movs	r3, #3
   40e6e:	e7de      	b.n	40e2e <__ssvfiscanf_r+0x1e2>
   40e70:	2308      	movs	r3, #8
   40e72:	9342      	str	r3, [sp, #264]	; 0x108
   40e74:	2304      	movs	r3, #4
   40e76:	e7da      	b.n	40e2e <__ssvfiscanf_r+0x1e2>
   40e78:	4629      	mov	r1, r5
   40e7a:	4640      	mov	r0, r8
   40e7c:	f005 f873 	bl	45f66 <__sccl>
   40e80:	9b41      	ldr	r3, [sp, #260]	; 0x104
   40e82:	4605      	mov	r5, r0
   40e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   40e88:	9341      	str	r3, [sp, #260]	; 0x104
   40e8a:	2301      	movs	r3, #1
   40e8c:	e7cf      	b.n	40e2e <__ssvfiscanf_r+0x1e2>
   40e8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   40e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   40e94:	9341      	str	r3, [sp, #260]	; 0x104
   40e96:	2300      	movs	r3, #0
   40e98:	e7c9      	b.n	40e2e <__ssvfiscanf_r+0x1e2>
   40e9a:	2302      	movs	r3, #2
   40e9c:	e7c7      	b.n	40e2e <__ssvfiscanf_r+0x1e2>
   40e9e:	9841      	ldr	r0, [sp, #260]	; 0x104
   40ea0:	06c3      	lsls	r3, r0, #27
   40ea2:	f53f aefc 	bmi.w	40c9e <__ssvfiscanf_r+0x52>
   40ea6:	9b00      	ldr	r3, [sp, #0]
   40ea8:	07c0      	lsls	r0, r0, #31
   40eaa:	9a45      	ldr	r2, [sp, #276]	; 0x114
   40eac:	f103 0104 	add.w	r1, r3, #4
   40eb0:	9100      	str	r1, [sp, #0]
   40eb2:	681b      	ldr	r3, [r3, #0]
   40eb4:	bf4c      	ite	mi
   40eb6:	801a      	strhmi	r2, [r3, #0]
   40eb8:	601a      	strpl	r2, [r3, #0]
   40eba:	e6f0      	b.n	40c9e <__ssvfiscanf_r+0x52>
   40ebc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   40ebe:	4621      	mov	r1, r4
   40ec0:	4630      	mov	r0, r6
   40ec2:	4798      	blx	r3
   40ec4:	2800      	cmp	r0, #0
   40ec6:	d0b6      	beq.n	40e36 <__ssvfiscanf_r+0x1ea>
   40ec8:	e79c      	b.n	40e04 <__ssvfiscanf_r+0x1b8>
   40eca:	9a45      	ldr	r2, [sp, #276]	; 0x114
   40ecc:	3201      	adds	r2, #1
   40ece:	9245      	str	r2, [sp, #276]	; 0x114
   40ed0:	6862      	ldr	r2, [r4, #4]
   40ed2:	3a01      	subs	r2, #1
   40ed4:	2a00      	cmp	r2, #0
   40ed6:	6062      	str	r2, [r4, #4]
   40ed8:	dd02      	ble.n	40ee0 <__ssvfiscanf_r+0x294>
   40eda:	3301      	adds	r3, #1
   40edc:	6023      	str	r3, [r4, #0]
   40ede:	e7ad      	b.n	40e3c <__ssvfiscanf_r+0x1f0>
   40ee0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   40ee2:	4621      	mov	r1, r4
   40ee4:	4630      	mov	r0, r6
   40ee6:	4798      	blx	r3
   40ee8:	2800      	cmp	r0, #0
   40eea:	d0a7      	beq.n	40e3c <__ssvfiscanf_r+0x1f0>
   40eec:	e78a      	b.n	40e04 <__ssvfiscanf_r+0x1b8>
   40eee:	2b04      	cmp	r3, #4
   40ef0:	dc06      	bgt.n	40f00 <__ssvfiscanf_r+0x2b4>
   40ef2:	466b      	mov	r3, sp
   40ef4:	4622      	mov	r2, r4
   40ef6:	a941      	add	r1, sp, #260	; 0x104
   40ef8:	4630      	mov	r0, r6
   40efa:	f000 f87b 	bl	40ff4 <_scanf_i>
   40efe:	e7ab      	b.n	40e58 <__ssvfiscanf_r+0x20c>
   40f00:	4b0f      	ldr	r3, [pc, #60]	; (40f40 <__ssvfiscanf_r+0x2f4>)
   40f02:	2b00      	cmp	r3, #0
   40f04:	f43f aecb 	beq.w	40c9e <__ssvfiscanf_r+0x52>
   40f08:	466b      	mov	r3, sp
   40f0a:	4622      	mov	r2, r4
   40f0c:	a941      	add	r1, sp, #260	; 0x104
   40f0e:	4630      	mov	r0, r6
   40f10:	e000      	b.n	40f14 <__ssvfiscanf_r+0x2c8>
   40f12:	bf00      	nop
   40f14:	e7a0      	b.n	40e58 <__ssvfiscanf_r+0x20c>
   40f16:	89a3      	ldrh	r3, [r4, #12]
   40f18:	f013 0f40 	tst.w	r3, #64	; 0x40
   40f1c:	bf18      	it	ne
   40f1e:	f04f 30ff 	movne.w	r0, #4294967295
   40f22:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   40f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40f2a:	9844      	ldr	r0, [sp, #272]	; 0x110
   40f2c:	e7f9      	b.n	40f22 <__ssvfiscanf_r+0x2d6>
   40f2e:	bf00      	nop
   40f30:	0004f35b 	.word	0x0004f35b
   40f34:	00045eb3 	.word	0x00045eb3
   40f38:	00045f2d 	.word	0x00045f2d
   40f3c:	0004f461 	.word	0x0004f461
   40f40:	00000000 	.word	0x00000000

00040f44 <_scanf_chars>:
   40f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   40f48:	4615      	mov	r5, r2
   40f4a:	688a      	ldr	r2, [r1, #8]
   40f4c:	4680      	mov	r8, r0
   40f4e:	460c      	mov	r4, r1
   40f50:	b932      	cbnz	r2, 40f60 <_scanf_chars+0x1c>
   40f52:	698a      	ldr	r2, [r1, #24]
   40f54:	2a00      	cmp	r2, #0
   40f56:	bf0c      	ite	eq
   40f58:	2201      	moveq	r2, #1
   40f5a:	f04f 32ff 	movne.w	r2, #4294967295
   40f5e:	608a      	str	r2, [r1, #8]
   40f60:	6822      	ldr	r2, [r4, #0]
   40f62:	2700      	movs	r7, #0
   40f64:	f8df 9088 	ldr.w	r9, [pc, #136]	; 40ff0 <_scanf_chars+0xac>
   40f68:	06d1      	lsls	r1, r2, #27
   40f6a:	bf5f      	itttt	pl
   40f6c:	681a      	ldrpl	r2, [r3, #0]
   40f6e:	1d11      	addpl	r1, r2, #4
   40f70:	6019      	strpl	r1, [r3, #0]
   40f72:	6816      	ldrpl	r6, [r2, #0]
   40f74:	69a0      	ldr	r0, [r4, #24]
   40f76:	b188      	cbz	r0, 40f9c <_scanf_chars+0x58>
   40f78:	2801      	cmp	r0, #1
   40f7a:	d107      	bne.n	40f8c <_scanf_chars+0x48>
   40f7c:	682b      	ldr	r3, [r5, #0]
   40f7e:	781a      	ldrb	r2, [r3, #0]
   40f80:	6963      	ldr	r3, [r4, #20]
   40f82:	5c9b      	ldrb	r3, [r3, r2]
   40f84:	b953      	cbnz	r3, 40f9c <_scanf_chars+0x58>
   40f86:	bb27      	cbnz	r7, 40fd2 <_scanf_chars+0x8e>
   40f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   40f8c:	2802      	cmp	r0, #2
   40f8e:	d120      	bne.n	40fd2 <_scanf_chars+0x8e>
   40f90:	682b      	ldr	r3, [r5, #0]
   40f92:	781b      	ldrb	r3, [r3, #0]
   40f94:	f813 3009 	ldrb.w	r3, [r3, r9]
   40f98:	071b      	lsls	r3, r3, #28
   40f9a:	d41a      	bmi.n	40fd2 <_scanf_chars+0x8e>
   40f9c:	6823      	ldr	r3, [r4, #0]
   40f9e:	3701      	adds	r7, #1
   40fa0:	06da      	lsls	r2, r3, #27
   40fa2:	bf5e      	ittt	pl
   40fa4:	682b      	ldrpl	r3, [r5, #0]
   40fa6:	781b      	ldrbpl	r3, [r3, #0]
   40fa8:	f806 3b01 	strbpl.w	r3, [r6], #1
   40fac:	682a      	ldr	r2, [r5, #0]
   40fae:	686b      	ldr	r3, [r5, #4]
   40fb0:	3201      	adds	r2, #1
   40fb2:	3b01      	subs	r3, #1
   40fb4:	602a      	str	r2, [r5, #0]
   40fb6:	68a2      	ldr	r2, [r4, #8]
   40fb8:	606b      	str	r3, [r5, #4]
   40fba:	3a01      	subs	r2, #1
   40fbc:	60a2      	str	r2, [r4, #8]
   40fbe:	b142      	cbz	r2, 40fd2 <_scanf_chars+0x8e>
   40fc0:	2b00      	cmp	r3, #0
   40fc2:	dcd7      	bgt.n	40f74 <_scanf_chars+0x30>
   40fc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   40fc8:	4629      	mov	r1, r5
   40fca:	4640      	mov	r0, r8
   40fcc:	4798      	blx	r3
   40fce:	2800      	cmp	r0, #0
   40fd0:	d0d0      	beq.n	40f74 <_scanf_chars+0x30>
   40fd2:	6823      	ldr	r3, [r4, #0]
   40fd4:	f013 0310 	ands.w	r3, r3, #16
   40fd8:	d105      	bne.n	40fe6 <_scanf_chars+0xa2>
   40fda:	68e2      	ldr	r2, [r4, #12]
   40fdc:	3201      	adds	r2, #1
   40fde:	60e2      	str	r2, [r4, #12]
   40fe0:	69a2      	ldr	r2, [r4, #24]
   40fe2:	b102      	cbz	r2, 40fe6 <_scanf_chars+0xa2>
   40fe4:	7033      	strb	r3, [r6, #0]
   40fe6:	6923      	ldr	r3, [r4, #16]
   40fe8:	2000      	movs	r0, #0
   40fea:	441f      	add	r7, r3
   40fec:	6127      	str	r7, [r4, #16]
   40fee:	e7cb      	b.n	40f88 <_scanf_chars+0x44>
   40ff0:	0004f35b 	.word	0x0004f35b

00040ff4 <_scanf_i>:
   40ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40ff8:	4698      	mov	r8, r3
   40ffa:	b087      	sub	sp, #28
   40ffc:	4b72      	ldr	r3, [pc, #456]	; (411c8 <_scanf_i+0x1d4>)
   40ffe:	460c      	mov	r4, r1
   41000:	4682      	mov	sl, r0
   41002:	4616      	mov	r6, r2
   41004:	4627      	mov	r7, r4
   41006:	f04f 0b00 	mov.w	fp, #0
   4100a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   4100e:	ab03      	add	r3, sp, #12
   41010:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   41014:	4b6d      	ldr	r3, [pc, #436]	; (411cc <_scanf_i+0x1d8>)
   41016:	69a1      	ldr	r1, [r4, #24]
   41018:	4a6d      	ldr	r2, [pc, #436]	; (411d0 <_scanf_i+0x1dc>)
   4101a:	2903      	cmp	r1, #3
   4101c:	bf18      	it	ne
   4101e:	461a      	movne	r2, r3
   41020:	68a3      	ldr	r3, [r4, #8]
   41022:	9201      	str	r2, [sp, #4]
   41024:	1e5a      	subs	r2, r3, #1
   41026:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   4102a:	bf89      	itett	hi
   4102c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   41030:	f04f 0900 	movls.w	r9, #0
   41034:	eb03 0905 	addhi.w	r9, r3, r5
   41038:	f240 135d 	movwhi	r3, #349	; 0x15d
   4103c:	bf88      	it	hi
   4103e:	60a3      	strhi	r3, [r4, #8]
   41040:	f857 3b1c 	ldr.w	r3, [r7], #28
   41044:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   41048:	463d      	mov	r5, r7
   4104a:	6023      	str	r3, [r4, #0]
   4104c:	6831      	ldr	r1, [r6, #0]
   4104e:	ab03      	add	r3, sp, #12
   41050:	2202      	movs	r2, #2
   41052:	7809      	ldrb	r1, [r1, #0]
   41054:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   41058:	f003 fe29 	bl	44cae <memchr>
   4105c:	b328      	cbz	r0, 410aa <_scanf_i+0xb6>
   4105e:	f1bb 0f01 	cmp.w	fp, #1
   41062:	d159      	bne.n	41118 <_scanf_i+0x124>
   41064:	6862      	ldr	r2, [r4, #4]
   41066:	b92a      	cbnz	r2, 41074 <_scanf_i+0x80>
   41068:	6822      	ldr	r2, [r4, #0]
   4106a:	2308      	movs	r3, #8
   4106c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   41070:	6063      	str	r3, [r4, #4]
   41072:	6022      	str	r2, [r4, #0]
   41074:	6822      	ldr	r2, [r4, #0]
   41076:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   4107a:	6022      	str	r2, [r4, #0]
   4107c:	68a2      	ldr	r2, [r4, #8]
   4107e:	1e51      	subs	r1, r2, #1
   41080:	60a1      	str	r1, [r4, #8]
   41082:	b192      	cbz	r2, 410aa <_scanf_i+0xb6>
   41084:	6832      	ldr	r2, [r6, #0]
   41086:	1c51      	adds	r1, r2, #1
   41088:	6031      	str	r1, [r6, #0]
   4108a:	7812      	ldrb	r2, [r2, #0]
   4108c:	f805 2b01 	strb.w	r2, [r5], #1
   41090:	6872      	ldr	r2, [r6, #4]
   41092:	3a01      	subs	r2, #1
   41094:	2a00      	cmp	r2, #0
   41096:	6072      	str	r2, [r6, #4]
   41098:	dc07      	bgt.n	410aa <_scanf_i+0xb6>
   4109a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   4109e:	4631      	mov	r1, r6
   410a0:	4650      	mov	r0, sl
   410a2:	4790      	blx	r2
   410a4:	2800      	cmp	r0, #0
   410a6:	f040 8085 	bne.w	411b4 <_scanf_i+0x1c0>
   410aa:	f10b 0b01 	add.w	fp, fp, #1
   410ae:	f1bb 0f03 	cmp.w	fp, #3
   410b2:	d1cb      	bne.n	4104c <_scanf_i+0x58>
   410b4:	6863      	ldr	r3, [r4, #4]
   410b6:	b90b      	cbnz	r3, 410bc <_scanf_i+0xc8>
   410b8:	230a      	movs	r3, #10
   410ba:	6063      	str	r3, [r4, #4]
   410bc:	6863      	ldr	r3, [r4, #4]
   410be:	f04f 0b00 	mov.w	fp, #0
   410c2:	4944      	ldr	r1, [pc, #272]	; (411d4 <_scanf_i+0x1e0>)
   410c4:	6960      	ldr	r0, [r4, #20]
   410c6:	1ac9      	subs	r1, r1, r3
   410c8:	f004 ff4d 	bl	45f66 <__sccl>
   410cc:	68a3      	ldr	r3, [r4, #8]
   410ce:	6822      	ldr	r2, [r4, #0]
   410d0:	2b00      	cmp	r3, #0
   410d2:	d03d      	beq.n	41150 <_scanf_i+0x15c>
   410d4:	6831      	ldr	r1, [r6, #0]
   410d6:	6960      	ldr	r0, [r4, #20]
   410d8:	f891 c000 	ldrb.w	ip, [r1]
   410dc:	f810 000c 	ldrb.w	r0, [r0, ip]
   410e0:	2800      	cmp	r0, #0
   410e2:	d035      	beq.n	41150 <_scanf_i+0x15c>
   410e4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   410e8:	d124      	bne.n	41134 <_scanf_i+0x140>
   410ea:	0510      	lsls	r0, r2, #20
   410ec:	d522      	bpl.n	41134 <_scanf_i+0x140>
   410ee:	f10b 0b01 	add.w	fp, fp, #1
   410f2:	f1b9 0f00 	cmp.w	r9, #0
   410f6:	d003      	beq.n	41100 <_scanf_i+0x10c>
   410f8:	3301      	adds	r3, #1
   410fa:	f109 39ff 	add.w	r9, r9, #4294967295
   410fe:	60a3      	str	r3, [r4, #8]
   41100:	6873      	ldr	r3, [r6, #4]
   41102:	3b01      	subs	r3, #1
   41104:	2b00      	cmp	r3, #0
   41106:	6073      	str	r3, [r6, #4]
   41108:	dd1b      	ble.n	41142 <_scanf_i+0x14e>
   4110a:	6833      	ldr	r3, [r6, #0]
   4110c:	3301      	adds	r3, #1
   4110e:	6033      	str	r3, [r6, #0]
   41110:	68a3      	ldr	r3, [r4, #8]
   41112:	3b01      	subs	r3, #1
   41114:	60a3      	str	r3, [r4, #8]
   41116:	e7d9      	b.n	410cc <_scanf_i+0xd8>
   41118:	f1bb 0f02 	cmp.w	fp, #2
   4111c:	d1ae      	bne.n	4107c <_scanf_i+0x88>
   4111e:	6822      	ldr	r2, [r4, #0]
   41120:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   41124:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   41128:	d1bf      	bne.n	410aa <_scanf_i+0xb6>
   4112a:	2310      	movs	r3, #16
   4112c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   41130:	6063      	str	r3, [r4, #4]
   41132:	e7a2      	b.n	4107a <_scanf_i+0x86>
   41134:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   41138:	6022      	str	r2, [r4, #0]
   4113a:	780b      	ldrb	r3, [r1, #0]
   4113c:	f805 3b01 	strb.w	r3, [r5], #1
   41140:	e7de      	b.n	41100 <_scanf_i+0x10c>
   41142:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   41146:	4631      	mov	r1, r6
   41148:	4650      	mov	r0, sl
   4114a:	4798      	blx	r3
   4114c:	2800      	cmp	r0, #0
   4114e:	d0df      	beq.n	41110 <_scanf_i+0x11c>
   41150:	6823      	ldr	r3, [r4, #0]
   41152:	05d9      	lsls	r1, r3, #23
   41154:	d50d      	bpl.n	41172 <_scanf_i+0x17e>
   41156:	42bd      	cmp	r5, r7
   41158:	d909      	bls.n	4116e <_scanf_i+0x17a>
   4115a:	f105 39ff 	add.w	r9, r5, #4294967295
   4115e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   41162:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   41166:	4632      	mov	r2, r6
   41168:	464d      	mov	r5, r9
   4116a:	4650      	mov	r0, sl
   4116c:	4798      	blx	r3
   4116e:	42bd      	cmp	r5, r7
   41170:	d028      	beq.n	411c4 <_scanf_i+0x1d0>
   41172:	6822      	ldr	r2, [r4, #0]
   41174:	f012 0210 	ands.w	r2, r2, #16
   41178:	d113      	bne.n	411a2 <_scanf_i+0x1ae>
   4117a:	702a      	strb	r2, [r5, #0]
   4117c:	4639      	mov	r1, r7
   4117e:	6863      	ldr	r3, [r4, #4]
   41180:	4650      	mov	r0, sl
   41182:	9e01      	ldr	r6, [sp, #4]
   41184:	47b0      	blx	r6
   41186:	f8d8 3000 	ldr.w	r3, [r8]
   4118a:	6821      	ldr	r1, [r4, #0]
   4118c:	1d1a      	adds	r2, r3, #4
   4118e:	f011 0f20 	tst.w	r1, #32
   41192:	f8c8 2000 	str.w	r2, [r8]
   41196:	681b      	ldr	r3, [r3, #0]
   41198:	d00f      	beq.n	411ba <_scanf_i+0x1c6>
   4119a:	6018      	str	r0, [r3, #0]
   4119c:	68e3      	ldr	r3, [r4, #12]
   4119e:	3301      	adds	r3, #1
   411a0:	60e3      	str	r3, [r4, #12]
   411a2:	1bed      	subs	r5, r5, r7
   411a4:	2000      	movs	r0, #0
   411a6:	44ab      	add	fp, r5
   411a8:	6925      	ldr	r5, [r4, #16]
   411aa:	445d      	add	r5, fp
   411ac:	6125      	str	r5, [r4, #16]
   411ae:	b007      	add	sp, #28
   411b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   411b4:	f04f 0b00 	mov.w	fp, #0
   411b8:	e7ca      	b.n	41150 <_scanf_i+0x15c>
   411ba:	07ca      	lsls	r2, r1, #31
   411bc:	bf4c      	ite	mi
   411be:	8018      	strhmi	r0, [r3, #0]
   411c0:	6018      	strpl	r0, [r3, #0]
   411c2:	e7eb      	b.n	4119c <_scanf_i+0x1a8>
   411c4:	2001      	movs	r0, #1
   411c6:	e7f2      	b.n	411ae <_scanf_i+0x1ba>
   411c8:	00046598 	.word	0x00046598
   411cc:	000451b5 	.word	0x000451b5
   411d0:	000451b1 	.word	0x000451b1
   411d4:	0004f4b5 	.word	0x0004f4b5

000411d8 <_read_r>:
   411d8:	b538      	push	{r3, r4, r5, lr}
   411da:	4604      	mov	r4, r0
   411dc:	4d06      	ldr	r5, [pc, #24]	; (411f8 <_read_r+0x20>)
   411de:	4608      	mov	r0, r1
   411e0:	4611      	mov	r1, r2
   411e2:	2200      	movs	r2, #0
   411e4:	602a      	str	r2, [r5, #0]
   411e6:	461a      	mov	r2, r3
   411e8:	f001 fa2b 	bl	42642 <_read>
   411ec:	1c43      	adds	r3, r0, #1
   411ee:	d102      	bne.n	411f6 <_read_r+0x1e>
   411f0:	682b      	ldr	r3, [r5, #0]
   411f2:	b103      	cbz	r3, 411f6 <_read_r+0x1e>
   411f4:	6023      	str	r3, [r4, #0]
   411f6:	bd38      	pop	{r3, r4, r5, pc}
   411f8:	2002d828 	.word	0x2002d828

000411fc <raise>:
   411fc:	4b02      	ldr	r3, [pc, #8]	; (41208 <raise+0xc>)
   411fe:	4601      	mov	r1, r0
   41200:	6818      	ldr	r0, [r3, #0]
   41202:	f004 bee9 	b.w	45fd8 <_raise_r>
   41206:	bf00      	nop
   41208:	20020760 	.word	0x20020760

0004120c <_kill_r>:
   4120c:	b538      	push	{r3, r4, r5, lr}
   4120e:	2300      	movs	r3, #0
   41210:	4d06      	ldr	r5, [pc, #24]	; (4122c <_kill_r+0x20>)
   41212:	4604      	mov	r4, r0
   41214:	4608      	mov	r0, r1
   41216:	4611      	mov	r1, r2
   41218:	602b      	str	r3, [r5, #0]
   4121a:	f001 fa21 	bl	42660 <_kill>
   4121e:	1c43      	adds	r3, r0, #1
   41220:	d102      	bne.n	41228 <_kill_r+0x1c>
   41222:	682b      	ldr	r3, [r5, #0]
   41224:	b103      	cbz	r3, 41228 <_kill_r+0x1c>
   41226:	6023      	str	r3, [r4, #0]
   41228:	bd38      	pop	{r3, r4, r5, pc}
   4122a:	bf00      	nop
   4122c:	2002d828 	.word	0x2002d828

00041230 <_fstat_r>:
   41230:	b538      	push	{r3, r4, r5, lr}
   41232:	2300      	movs	r3, #0
   41234:	4d06      	ldr	r5, [pc, #24]	; (41250 <_fstat_r+0x20>)
   41236:	4604      	mov	r4, r0
   41238:	4608      	mov	r0, r1
   4123a:	4611      	mov	r1, r2
   4123c:	602b      	str	r3, [r5, #0]
   4123e:	f001 fa13 	bl	42668 <_fstat>
   41242:	1c43      	adds	r3, r0, #1
   41244:	d102      	bne.n	4124c <_fstat_r+0x1c>
   41246:	682b      	ldr	r3, [r5, #0]
   41248:	b103      	cbz	r3, 4124c <_fstat_r+0x1c>
   4124a:	6023      	str	r3, [r4, #0]
   4124c:	bd38      	pop	{r3, r4, r5, pc}
   4124e:	bf00      	nop
   41250:	2002d828 	.word	0x2002d828

00041254 <_isatty_r>:
   41254:	b538      	push	{r3, r4, r5, lr}
   41256:	2300      	movs	r3, #0
   41258:	4d05      	ldr	r5, [pc, #20]	; (41270 <_isatty_r+0x1c>)
   4125a:	4604      	mov	r4, r0
   4125c:	4608      	mov	r0, r1
   4125e:	602b      	str	r3, [r5, #0]
   41260:	f001 f9fc 	bl	4265c <_isatty>
   41264:	1c43      	adds	r3, r0, #1
   41266:	d102      	bne.n	4126e <_isatty_r+0x1a>
   41268:	682b      	ldr	r3, [r5, #0]
   4126a:	b103      	cbz	r3, 4126e <_isatty_r+0x1a>
   4126c:	6023      	str	r3, [r4, #0]
   4126e:	bd38      	pop	{r3, r4, r5, pc}
   41270:	2002d828 	.word	0x2002d828

00041274 <cloud_send>:
	if (backend == NULL || backend->api == NULL ||
   41274:	b120      	cbz	r0, 41280 <cloud_send+0xc>
   41276:	6803      	ldr	r3, [r0, #0]
   41278:	b113      	cbz	r3, 41280 <cloud_send+0xc>
	    backend->api->send == NULL) {
   4127a:	691b      	ldr	r3, [r3, #16]
	if (backend == NULL || backend->api == NULL ||
   4127c:	b103      	cbz	r3, 41280 <cloud_send+0xc>
	return backend->api->send(backend, msg);
   4127e:	4718      	bx	r3
}
   41280:	f06f 0085 	mvn.w	r0, #133	; 0x85
   41284:	4770      	bx	lr

00041286 <atomic_set>:
{
   41286:	4603      	mov	r3, r0
}
   41288:	e8d3 0fef 	ldaex	r0, [r3]
   4128c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   41290:	2a00      	cmp	r2, #0
   41292:	d1f9      	bne.n	41288 <atomic_set+0x2>
   41294:	4770      	bx	lr

00041296 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   41296:	e8d0 0faf 	lda	r0, [r0]
}
   4129a:	4770      	bx	lr

0004129c <k_uptime_get>:
{
   4129c:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   4129e:	f003 fc48 	bl	44b32 <z_impl_k_uptime_ticks>
   412a2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   412a6:	fba0 2304 	umull	r2, r3, r0, r4
   412aa:	fb04 3301 	mla	r3, r4, r1, r3
   412ae:	0bd0      	lsrs	r0, r2, #15
}
   412b0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   412b4:	0bd9      	lsrs	r1, r3, #15
   412b6:	bd10      	pop	{r4, pc}

000412b8 <cloud_reboot_handler>:
	error_handler(ERROR_CLOUD, -ETIMEDOUT);
   412b8:	f06f 0173 	mvn.w	r1, #115	; 0x73
   412bc:	2000      	movs	r0, #0
   412be:	f7e0 bac9 	b.w	21854 <error_handler>

000412c2 <cloud_error_handler>:
{
   412c2:	4601      	mov	r1, r0
	error_handler(ERROR_CLOUD, err);
   412c4:	2000      	movs	r0, #0
   412c6:	f7e0 bac5 	b.w	21854 <error_handler>

000412ca <bsd_recoverable_error_handler>:
{
   412ca:	4601      	mov	r1, r0
	error_handler(ERROR_BSD_RECOVERABLE, (int)err);
   412cc:	2001      	movs	r0, #1
   412ce:	f7e0 bac1 	b.w	21854 <error_handler>

000412d2 <sensors_start_work_fn>:
	sensors_start();
   412d2:	f7e0 bddb 	b.w	21e8c <sensors_start>

000412d6 <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
   412d6:	6883      	ldr	r3, [r0, #8]
   412d8:	691b      	ldr	r3, [r3, #16]
   412da:	4718      	bx	r3

000412dc <motion_simulate_trigger>:

void motion_simulate_trigger(void)
{
	sensor_trigger_handler(NULL, NULL);
   412dc:	f7e1 b952 	b.w	22584 <sensor_trigger_handler.isra.0>

000412e0 <ui_led_set_color>:
}
   412e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   412e4:	4770      	bx	lr

000412e6 <json_value_string_compare>:
{
   412e6:	b510      	push	{r4, lr}
   412e8:	460c      	mov	r4, r1
	char *json_str = cJSON_GetStringValue(obj);
   412ea:	f002 fbca 	bl	43a82 <cJSON_GetStringValue>
	if ((json_str == NULL) || (str == NULL)) {
   412ee:	b130      	cbz	r0, 412fe <json_value_string_compare+0x18>
   412f0:	b134      	cbz	r4, 41300 <json_value_string_compare+0x1a>
	return (strcmp(json_str, str) == 0);
   412f2:	4621      	mov	r1, r4
   412f4:	f7db ffa8 	bl	1d248 <strcmp>
   412f8:	fab0 f080 	clz	r0, r0
   412fc:	0940      	lsrs	r0, r0, #5
}
   412fe:	bd10      	pop	{r4, pc}
		return false;
   41300:	4620      	mov	r0, r4
   41302:	e7fc      	b.n	412fe <json_value_string_compare+0x18>

00041304 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   41304:	b108      	cbz	r0, 4130a <json_object_decode+0x6>
   41306:	f002 bb6b 	b.w	439e0 <cJSON_GetObjectItem>
}
   4130a:	4770      	bx	lr

0004130c <add_array_obj>:
{
   4130c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   41310:	4681      	mov	r9, r0
   41312:	4688      	mov	r8, r1
   41314:	4617      	mov	r7, r2
	if ((obj == NULL) || (item_name == NULL)) {
   41316:	461d      	mov	r5, r3
   41318:	b32b      	cbz	r3, 41366 <add_array_obj+0x5a>
	obj_to_add = cJSON_CreateArray();
   4131a:	f7e7 ffe5 	bl	292e8 <cJSON_CreateArray>
	if (obj_to_add == NULL) {
   4131e:	4604      	mov	r4, r0
   41320:	b1d0      	cbz	r0, 41358 <add_array_obj+0x4c>
	for (uint32_t cnt = 0; cnt < item_cnt; ++cnt) {
   41322:	2600      	movs	r6, #0
   41324:	4546      	cmp	r6, r8
   41326:	d10d      	bne.n	41344 <add_array_obj+0x38>
	if (cJSON_GetArraySize(obj_to_add) == 0) {
   41328:	4620      	mov	r0, r4
   4132a:	f002 fb51 	bl	439d0 <cJSON_GetArraySize>
   4132e:	b908      	cbnz	r0, 41334 <add_array_obj+0x28>
		obj_to_add->type = cJSON_NULL;
   41330:	2304      	movs	r3, #4
   41332:	60e3      	str	r3, [r4, #12]
	cJSON_AddItemToObject(obj, item_name, obj_to_add);
   41334:	4628      	mov	r0, r5
   41336:	4622      	mov	r2, r4
   41338:	4639      	mov	r1, r7
   4133a:	f002 fb60 	bl	439fe <cJSON_AddItemToObject>
	return 0;
   4133e:	2000      	movs	r0, #0
}
   41340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (items[cnt] != NULL) {
   41344:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   41348:	b158      	cbz	r0, 41362 <add_array_obj+0x56>
			str = cJSON_CreateString(items[cnt]);
   4134a:	f7e7 ffb5 	bl	292b8 <cJSON_CreateString>
			if (str == NULL) {
   4134e:	4601      	mov	r1, r0
				cJSON_Delete(obj_to_add);
   41350:	4620      	mov	r0, r4
			if (str == NULL) {
   41352:	b921      	cbnz	r1, 4135e <add_array_obj+0x52>
				cJSON_Delete(obj_to_add);
   41354:	f7e7 ff00 	bl	29158 <cJSON_Delete>
		return -ENOMEM;
   41358:	f06f 000b 	mvn.w	r0, #11
   4135c:	e7f0      	b.n	41340 <add_array_obj+0x34>
			cJSON_AddItemToArray(obj_to_add, str);
   4135e:	f002 fb4c 	bl	439fa <cJSON_AddItemToArray>
	for (uint32_t cnt = 0; cnt < item_cnt; ++cnt) {
   41362:	3601      	adds	r6, #1
   41364:	e7de      	b.n	41324 <add_array_obj+0x18>
		return -EINVAL;
   41366:	f06f 0015 	mvn.w	r0, #21
   4136a:	e7e9      	b.n	41340 <add_array_obj+0x34>

0004136c <env_sensors_get_air_quality>:
}
   4136c:	f04f 30ff 	mov.w	r0, #4294967295
   41370:	4770      	bx	lr

00041372 <sys_notify_validate>:
	if (notify == NULL) {
   41372:	b140      	cbz	r0, 41386 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   41374:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   41376:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   4137a:	2b02      	cmp	r3, #2
   4137c:	d006      	beq.n	4138c <sys_notify_validate+0x1a>
   4137e:	2b03      	cmp	r3, #3
   41380:	d004      	beq.n	4138c <sys_notify_validate+0x1a>
   41382:	2b01      	cmp	r3, #1
   41384:	d005      	beq.n	41392 <sys_notify_validate+0x20>
		return -EINVAL;
   41386:	f06f 0015 	mvn.w	r0, #21
}
   4138a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   4138c:	6803      	ldr	r3, [r0, #0]
   4138e:	2b00      	cmp	r3, #0
   41390:	d0f9      	beq.n	41386 <sys_notify_validate+0x14>
		notify->result = 0;
   41392:	2300      	movs	r3, #0
   41394:	6083      	str	r3, [r0, #8]
   41396:	4618      	mov	r0, r3
   41398:	4770      	bx	lr

0004139a <arch_printk_char_out>:
}
   4139a:	2000      	movs	r0, #0
   4139c:	4770      	bx	lr

0004139e <str_out>:
{
   4139e:	b530      	push	{r4, r5, lr}
   413a0:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   413a2:	680c      	ldr	r4, [r1, #0]
   413a4:	1c55      	adds	r5, r2, #1
   413a6:	b114      	cbz	r4, 413ae <str_out+0x10>
   413a8:	684b      	ldr	r3, [r1, #4]
   413aa:	4293      	cmp	r3, r2
   413ac:	dc01      	bgt.n	413b2 <str_out+0x14>
		ctx->count++;
   413ae:	608d      	str	r5, [r1, #8]
}
   413b0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   413b2:	3b01      	subs	r3, #1
   413b4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   413b6:	bf08      	it	eq
   413b8:	2200      	moveq	r2, #0
   413ba:	608d      	str	r5, [r1, #8]
   413bc:	bf0c      	ite	eq
   413be:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   413c0:	54a0      	strbne	r0, [r4, r2]
   413c2:	e7f5      	b.n	413b0 <str_out+0x12>

000413c4 <printk>:
{
   413c4:	b40f      	push	{r0, r1, r2, r3}
   413c6:	b507      	push	{r0, r1, r2, lr}
   413c8:	a904      	add	r1, sp, #16
   413ca:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   413ce:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   413d0:	f7e2 fe8c 	bl	240ec <vprintk>
}
   413d4:	b003      	add	sp, #12
   413d6:	f85d eb04 	ldr.w	lr, [sp], #4
   413da:	b004      	add	sp, #16
   413dc:	4770      	bx	lr

000413de <snprintk>:
{
   413de:	b40c      	push	{r2, r3}
   413e0:	b507      	push	{r0, r1, r2, lr}
   413e2:	ab04      	add	r3, sp, #16
   413e4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   413e8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   413ea:	f7e2 fe8d 	bl	24108 <vsnprintk>
}
   413ee:	b003      	add	sp, #12
   413f0:	f85d eb04 	ldr.w	lr, [sp], #4
   413f4:	b002      	add	sp, #8
   413f6:	4770      	bx	lr

000413f8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   413f8:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   413fa:	f013 0307 	ands.w	r3, r3, #7
   413fe:	d105      	bne.n	4140c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   41400:	6803      	ldr	r3, [r0, #0]
   41402:	2b00      	cmp	r3, #0
		evt = EVT_START;
   41404:	bf0c      	ite	eq
   41406:	2000      	moveq	r0, #0
   41408:	2003      	movne	r0, #3
   4140a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   4140c:	2b02      	cmp	r3, #2
   4140e:	d105      	bne.n	4141c <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   41410:	8bc3      	ldrh	r3, [r0, #30]
   41412:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   41414:	bf14      	ite	ne
   41416:	2000      	movne	r0, #0
   41418:	2004      	moveq	r0, #4
   4141a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   4141c:	2b01      	cmp	r3, #1
   4141e:	d105      	bne.n	4142c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   41420:	6803      	ldr	r3, [r0, #0]
   41422:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   41424:	bf0c      	ite	eq
   41426:	2000      	moveq	r0, #0
   41428:	2005      	movne	r0, #5
   4142a:	4770      	bx	lr
	int evt = EVT_NOP;
   4142c:	2000      	movs	r0, #0
}
   4142e:	4770      	bx	lr

00041430 <notify_one>:
{
   41430:	b573      	push	{r0, r1, r4, r5, r6, lr}
   41432:	460d      	mov	r5, r1
   41434:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   41436:	4619      	mov	r1, r3
   41438:	1d28      	adds	r0, r5, #4
{
   4143a:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   4143c:	9300      	str	r3, [sp, #0]
   4143e:	f7e2 fc9b 	bl	23d78 <sys_notify_finalize>
	if (cb) {
   41442:	4604      	mov	r4, r0
   41444:	b140      	cbz	r0, 41458 <notify_one+0x28>
		cb(mgr, cli, state, res);
   41446:	e9dd 3200 	ldrd	r3, r2, [sp]
   4144a:	4629      	mov	r1, r5
   4144c:	4630      	mov	r0, r6
   4144e:	46a4      	mov	ip, r4
}
   41450:	b002      	add	sp, #8
   41452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   41456:	4760      	bx	ip
}
   41458:	b002      	add	sp, #8
   4145a:	bd70      	pop	{r4, r5, r6, pc}

0004145c <validate_args>:
{
   4145c:	b510      	push	{r4, lr}
   4145e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   41460:	b140      	cbz	r0, 41474 <validate_args+0x18>
   41462:	b139      	cbz	r1, 41474 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   41464:	1d08      	adds	r0, r1, #4
   41466:	f7ff ff84 	bl	41372 <sys_notify_validate>
	if ((rv == 0)
   4146a:	b928      	cbnz	r0, 41478 <validate_args+0x1c>
	    && ((cli->notify.flags
   4146c:	68a3      	ldr	r3, [r4, #8]
   4146e:	f033 0303 	bics.w	r3, r3, #3
   41472:	d001      	beq.n	41478 <validate_args+0x1c>
		rv = -EINVAL;
   41474:	f06f 0015 	mvn.w	r0, #21
}
   41478:	bd10      	pop	{r4, pc}

0004147a <onoff_manager_init>:
{
   4147a:	b538      	push	{r3, r4, r5, lr}
   4147c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   4147e:	4605      	mov	r5, r0
   41480:	b158      	cbz	r0, 4149a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   41482:	b151      	cbz	r1, 4149a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   41484:	680b      	ldr	r3, [r1, #0]
   41486:	b143      	cbz	r3, 4149a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   41488:	684b      	ldr	r3, [r1, #4]
   4148a:	b133      	cbz	r3, 4149a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   4148c:	2220      	movs	r2, #32
   4148e:	2100      	movs	r1, #0
   41490:	f003 fc49 	bl	44d26 <memset>
	return 0;
   41494:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   41496:	612c      	str	r4, [r5, #16]
}
   41498:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   4149a:	f06f 0015 	mvn.w	r0, #21
   4149e:	e7fb      	b.n	41498 <onoff_manager_init+0x1e>

000414a0 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   414a0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   414a2:	f7fc fb29 	bl	3daf8 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   414a6:	2000      	movs	r0, #0
   414a8:	bd08      	pop	{r3, pc}

000414aa <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   414aa:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   414ac:	f7fc fb68 	bl	3db80 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   414b0:	f110 0f0b 	cmn.w	r0, #11
   414b4:	d005      	beq.n	414c2 <sys_sem_take+0x18>
   414b6:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   414ba:	bf08      	it	eq
   414bc:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   414c0:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   414c2:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   414c6:	e7fb      	b.n	414c0 <sys_sem_take+0x16>

000414c8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   414c8:	4604      	mov	r4, r0
   414ca:	b508      	push	{r3, lr}
   414cc:	4608      	mov	r0, r1
   414ce:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   414d0:	461a      	mov	r2, r3
   414d2:	47a0      	blx	r4
	return z_impl_k_current_get();
   414d4:	f7fc fb0a 	bl	3daec <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   414d8:	f7e5 ffca 	bl	27470 <z_impl_k_thread_abort>

000414dc <chunk_field>:
	if (big_heap(h)) {
   414dc:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   414de:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   414e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   414e6:	bf2c      	ite	cs
   414e8:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   414ec:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   414f0:	4770      	bx	lr

000414f2 <chunk_set>:
	void *cmem = &buf[c];
   414f2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   414f6:	6880      	ldr	r0, [r0, #8]
   414f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   414fc:	bf2c      	ite	cs
   414fe:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   41502:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   41506:	4770      	bx	lr

00041508 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   41508:	2201      	movs	r2, #1
{
   4150a:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   4150c:	f7ff ffe6 	bl	414dc <chunk_field>
}
   41510:	0840      	lsrs	r0, r0, #1
   41512:	bd08      	pop	{r3, pc}

00041514 <set_chunk_used>:
	if (big_heap(h)) {
   41514:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   41516:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   4151a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   4151e:	d308      	bcc.n	41532 <set_chunk_used+0x1e>
		if (used) {
   41520:	684b      	ldr	r3, [r1, #4]
   41522:	b11a      	cbz	r2, 4152c <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   41524:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   41528:	604b      	str	r3, [r1, #4]
   4152a:	4770      	bx	lr
   4152c:	f023 0301 	bic.w	r3, r3, #1
   41530:	e7fa      	b.n	41528 <set_chunk_used+0x14>
		if (used) {
   41532:	884b      	ldrh	r3, [r1, #2]
   41534:	b11a      	cbz	r2, 4153e <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   41536:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   4153a:	804b      	strh	r3, [r1, #2]
}
   4153c:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   4153e:	f023 0301 	bic.w	r3, r3, #1
   41542:	e7fa      	b.n	4153a <set_chunk_used+0x26>

00041544 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   41544:	0053      	lsls	r3, r2, #1
   41546:	2201      	movs	r2, #1
   41548:	f7ff bfd3 	b.w	414f2 <chunk_set>

0004154c <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   4154c:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   4154e:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   41550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   41554:	bf2c      	ite	cs
   41556:	2008      	movcs	r0, #8
   41558:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   4155a:	4408      	add	r0, r1
}
   4155c:	08c0      	lsrs	r0, r0, #3
   4155e:	4770      	bx	lr

00041560 <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   41560:	460a      	mov	r2, r1
   41562:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   41564:	2101      	movs	r1, #1
   41566:	f7ff fff1 	bl	4154c <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   4156a:	3201      	adds	r2, #1
   4156c:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   4156e:	fab0 f080 	clz	r0, r0
}
   41572:	f1c0 001f 	rsb	r0, r0, #31
   41576:	bd08      	pop	{r3, pc}

00041578 <merge_chunks>:
{
   41578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4157a:	4616      	mov	r6, r2
   4157c:	4604      	mov	r4, r0
   4157e:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   41580:	f7ff ffc2 	bl	41508 <chunk_size>
   41584:	4631      	mov	r1, r6
   41586:	4605      	mov	r5, r0
   41588:	4620      	mov	r0, r4
   4158a:	f7ff ffbd 	bl	41508 <chunk_size>
   4158e:	182b      	adds	r3, r5, r0
	set_chunk_size(h, lc, newsz);
   41590:	461a      	mov	r2, r3
   41592:	4639      	mov	r1, r7
   41594:	4620      	mov	r0, r4
   41596:	9301      	str	r3, [sp, #4]
   41598:	f7ff ffd4 	bl	41544 <set_chunk_size>
	return c + chunk_size(h, c);
   4159c:	4631      	mov	r1, r6
   4159e:	4620      	mov	r0, r4
   415a0:	f7ff ffb2 	bl	41508 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   415a4:	2200      	movs	r2, #0
   415a6:	1831      	adds	r1, r6, r0
   415a8:	4620      	mov	r0, r4
   415aa:	9b01      	ldr	r3, [sp, #4]
}
   415ac:	b003      	add	sp, #12
   415ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   415b2:	f7ff bf9e 	b.w	414f2 <chunk_set>

000415b6 <split_chunks>:
{
   415b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   415b8:	4614      	mov	r4, r2
   415ba:	460e      	mov	r6, r1
   415bc:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   415be:	f7ff ffa3 	bl	41508 <chunk_size>
	size_t lsz = rc - lc;
   415c2:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   415c4:	1b32      	subs	r2, r6, r4
   415c6:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   415c8:	4631      	mov	r1, r6
   415ca:	461a      	mov	r2, r3
   415cc:	4628      	mov	r0, r5
   415ce:	9301      	str	r3, [sp, #4]
   415d0:	f7ff ffb8 	bl	41544 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   415d4:	463a      	mov	r2, r7
   415d6:	4621      	mov	r1, r4
   415d8:	4628      	mov	r0, r5
   415da:	f7ff ffb3 	bl	41544 <set_chunk_size>
   415de:	9b01      	ldr	r3, [sp, #4]
   415e0:	2200      	movs	r2, #0
   415e2:	4621      	mov	r1, r4
   415e4:	4628      	mov	r0, r5
   415e6:	f7ff ff84 	bl	414f2 <chunk_set>
	return c + chunk_size(h, c);
   415ea:	4621      	mov	r1, r4
   415ec:	4628      	mov	r0, r5
   415ee:	f7ff ff8b 	bl	41508 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   415f2:	463b      	mov	r3, r7
   415f4:	1821      	adds	r1, r4, r0
   415f6:	2200      	movs	r2, #0
   415f8:	4628      	mov	r0, r5
}
   415fa:	b003      	add	sp, #12
   415fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   41600:	f7ff bf77 	b.w	414f2 <chunk_set>

00041604 <free_list_remove_bidx>:
{
   41604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41608:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   4160a:	2203      	movs	r2, #3
   4160c:	460e      	mov	r6, r1
   4160e:	4604      	mov	r4, r0
   41610:	f7ff ff64 	bl	414dc <chunk_field>
	if (next_free_chunk(h, c) == c) {
   41614:	4286      	cmp	r6, r0
   41616:	4605      	mov	r5, r0
   41618:	f107 0804 	add.w	r8, r7, #4
   4161c:	d10b      	bne.n	41636 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   4161e:	2301      	movs	r3, #1
   41620:	fa03 f707 	lsl.w	r7, r3, r7
   41624:	68e3      	ldr	r3, [r4, #12]
   41626:	ea23 0307 	bic.w	r3, r3, r7
   4162a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   4162c:	2300      	movs	r3, #0
   4162e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   41632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   41636:	4631      	mov	r1, r6
   41638:	2202      	movs	r2, #2
   4163a:	4620      	mov	r0, r4
   4163c:	f7ff ff4e 	bl	414dc <chunk_field>
   41640:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   41642:	462b      	mov	r3, r5
   41644:	4601      	mov	r1, r0
   41646:	2203      	movs	r2, #3
   41648:	4620      	mov	r0, r4
		b->next = second;
   4164a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   4164e:	f7ff ff50 	bl	414f2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   41652:	4633      	mov	r3, r6
   41654:	4629      	mov	r1, r5
   41656:	4620      	mov	r0, r4
}
   41658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   4165c:	2202      	movs	r2, #2
   4165e:	f7ff bf48 	b.w	414f2 <chunk_set>

00041662 <free_list_remove>:
{
   41662:	b538      	push	{r3, r4, r5, lr}
   41664:	4604      	mov	r4, r0
   41666:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   41668:	f7ff ff4e 	bl	41508 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   4166c:	68a3      	ldr	r3, [r4, #8]
   4166e:	4601      	mov	r1, r0
   41670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   41674:	d301      	bcc.n	4167a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   41676:	2801      	cmp	r0, #1
   41678:	d009      	beq.n	4168e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   4167a:	4620      	mov	r0, r4
   4167c:	f7ff ff70 	bl	41560 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   41680:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   41682:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   41684:	4620      	mov	r0, r4
}
   41686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   4168a:	f7ff bfbb 	b.w	41604 <free_list_remove_bidx>
}
   4168e:	bd38      	pop	{r3, r4, r5, pc}

00041690 <alloc_chunk>:
{
   41690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   41694:	4604      	mov	r4, r0
   41696:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   41698:	f7ff ff62 	bl	41560 <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   4169c:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   4169e:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   416a0:	4620      	mov	r0, r4
   416a2:	f7ff ff5d 	bl	41560 <bucket_idx>
   416a6:	42a8      	cmp	r0, r5
   416a8:	da04      	bge.n	416b4 <alloc_chunk+0x24>
		return 0;
   416aa:	2100      	movs	r1, #0
}
   416ac:	4608      	mov	r0, r1
   416ae:	b003      	add	sp, #12
   416b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   416b4:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   416b8:	f8d9 8010 	ldr.w	r8, [r9, #16]
   416bc:	f1b8 0f00 	cmp.w	r8, #0
   416c0:	d019      	beq.n	416f6 <alloc_chunk+0x66>
   416c2:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   416c4:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   416c8:	4620      	mov	r0, r4
   416ca:	9101      	str	r1, [sp, #4]
   416cc:	f7ff ff1c 	bl	41508 <chunk_size>
   416d0:	42b8      	cmp	r0, r7
   416d2:	9901      	ldr	r1, [sp, #4]
   416d4:	d305      	bcc.n	416e2 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   416d6:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   416d8:	4620      	mov	r0, r4
   416da:	f7ff ff93 	bl	41604 <free_list_remove_bidx>
   416de:	9901      	ldr	r1, [sp, #4]
		return c;
   416e0:	e7e4      	b.n	416ac <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   416e2:	2203      	movs	r2, #3
   416e4:	4620      	mov	r0, r4
   416e6:	f7ff fef9 	bl	414dc <chunk_field>
		} while (--i && b->next != first);
   416ea:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   416ec:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   416f0:	d001      	beq.n	416f6 <alloc_chunk+0x66>
   416f2:	4580      	cmp	r8, r0
   416f4:	d1e6      	bne.n	416c4 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   416f6:	f04f 32ff 	mov.w	r2, #4294967295
   416fa:	68e3      	ldr	r3, [r4, #12]
   416fc:	3501      	adds	r5, #1
   416fe:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0) {
   41700:	401a      	ands	r2, r3
   41702:	d0d2      	beq.n	416aa <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   41704:	fa92 f2a2 	rbit	r2, r2
   41708:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   4170c:	1d13      	adds	r3, r2, #4
   4170e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   41712:	9101      	str	r1, [sp, #4]
   41714:	e7e0      	b.n	416d8 <alloc_chunk+0x48>

00041716 <free_list_add>:
{
   41716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4171a:	4604      	mov	r4, r0
   4171c:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   4171e:	f7ff fef3 	bl	41508 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   41722:	68a3      	ldr	r3, [r4, #8]
   41724:	4601      	mov	r1, r0
   41726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   4172a:	d301      	bcc.n	41730 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   4172c:	2801      	cmp	r0, #1
   4172e:	d035      	beq.n	4179c <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   41730:	4620      	mov	r0, r4
   41732:	f7ff ff15 	bl	41560 <bucket_idx>
	if (b->next == 0) {
   41736:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   4173a:	6916      	ldr	r6, [r2, #16]
   4173c:	b99e      	cbnz	r6, 41766 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   4173e:	2301      	movs	r3, #1
   41740:	fa03 f000 	lsl.w	r0, r3, r0
   41744:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   41746:	4629      	mov	r1, r5
   41748:	4303      	orrs	r3, r0
   4174a:	60e3      	str	r3, [r4, #12]
   4174c:	4620      	mov	r0, r4
		b->next = c;
   4174e:	6115      	str	r5, [r2, #16]
   41750:	462b      	mov	r3, r5
   41752:	2202      	movs	r2, #2
   41754:	f7ff fecd 	bl	414f2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   41758:	2203      	movs	r2, #3
   4175a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   4175c:	4620      	mov	r0, r4
}
   4175e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41762:	f7ff bec6 	b.w	414f2 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   41766:	2202      	movs	r2, #2
   41768:	4631      	mov	r1, r6
   4176a:	4620      	mov	r0, r4
   4176c:	f7ff feb6 	bl	414dc <chunk_field>
   41770:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   41772:	4603      	mov	r3, r0
   41774:	2202      	movs	r2, #2
   41776:	4629      	mov	r1, r5
   41778:	4620      	mov	r0, r4
   4177a:	f7ff feba 	bl	414f2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   4177e:	4633      	mov	r3, r6
   41780:	2203      	movs	r2, #3
   41782:	4629      	mov	r1, r5
   41784:	4620      	mov	r0, r4
   41786:	f7ff feb4 	bl	414f2 <chunk_set>
   4178a:	2203      	movs	r2, #3
   4178c:	4639      	mov	r1, r7
   4178e:	462b      	mov	r3, r5
   41790:	4620      	mov	r0, r4
   41792:	f7ff feae 	bl	414f2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   41796:	2202      	movs	r2, #2
   41798:	4631      	mov	r1, r6
   4179a:	e7df      	b.n	4175c <free_list_add+0x46>
   4179c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000417a0 <sys_heap_alloc>:
{
   417a0:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   417a2:	b909      	cbnz	r1, 417a8 <sys_heap_alloc+0x8>
		return NULL;
   417a4:	2000      	movs	r0, #0
}
   417a6:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   417a8:	6804      	ldr	r4, [r0, #0]
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   417aa:	4620      	mov	r0, r4
   417ac:	f7ff fece 	bl	4154c <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   417b0:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   417b2:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   417b4:	4620      	mov	r0, r4
   417b6:	f7ff ff6b 	bl	41690 <alloc_chunk>
	if (c == 0) {
   417ba:	4605      	mov	r5, r0
   417bc:	2800      	cmp	r0, #0
   417be:	d0f1      	beq.n	417a4 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   417c0:	4601      	mov	r1, r0
   417c2:	4620      	mov	r0, r4
   417c4:	f7ff fea0 	bl	41508 <chunk_size>
   417c8:	42b0      	cmp	r0, r6
   417ca:	d909      	bls.n	417e0 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   417cc:	442e      	add	r6, r5
   417ce:	4629      	mov	r1, r5
   417d0:	4620      	mov	r0, r4
   417d2:	4632      	mov	r2, r6
   417d4:	f7ff feef 	bl	415b6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   417d8:	4631      	mov	r1, r6
   417da:	4620      	mov	r0, r4
   417dc:	f7ff ff9b 	bl	41716 <free_list_add>
	set_chunk_used(h, c, true);
   417e0:	4620      	mov	r0, r4
   417e2:	2201      	movs	r2, #1
   417e4:	4629      	mov	r1, r5
   417e6:	f7ff fe95 	bl	41514 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   417ea:	68a3      	ldr	r3, [r4, #8]
   417ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   417f0:	bf2c      	ite	cs
   417f2:	2008      	movcs	r0, #8
   417f4:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   417f6:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   417fa:	4420      	add	r0, r4
	return chunk_mem(h, c);
   417fc:	e7d3      	b.n	417a6 <sys_heap_alloc+0x6>

000417fe <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   417fe:	4040      	eors	r0, r0
   41800:	f380 8811 	msr	BASEPRI, r0
   41804:	f04f 0004 	mov.w	r0, #4
   41808:	df02      	svc	2
}
   4180a:	4770      	bx	lr

0004180c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   4180c:	4770      	bx	lr

0004180e <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   4180e:	f7f9 bdd9 	b.w	3b3c4 <SystemInit>

00041812 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   41812:	6843      	ldr	r3, [r0, #4]
}
   41814:	7958      	ldrb	r0, [r3, #5]
   41816:	4770      	bx	lr

00041818 <k_cycle_get_32_wrapper>:
   41818:	f7e5 b8f8 	b.w	26a0c <z_timer_cycle_get_32>

0004181c <dummy_timestamp>:
   4181c:	2000      	movs	r0, #0
   4181e:	4770      	bx	lr

00041820 <log_string_sync>:
{
   41820:	b40e      	push	{r1, r2, r3}
   41822:	b503      	push	{r0, r1, lr}
   41824:	aa03      	add	r2, sp, #12
   41826:	f852 1b04 	ldr.w	r1, [r2], #4
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   4182a:	2300      	movs	r3, #0
	va_start(ap, fmt);
   4182c:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   4182e:	f7e3 f959 	bl	24ae4 <log_generic>
}
   41832:	b002      	add	sp, #8
   41834:	f85d eb04 	ldr.w	lr, [sp], #4
   41838:	b003      	add	sp, #12
   4183a:	4770      	bx	lr

0004183c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   4183c:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   4183e:	f7e3 f9c7 	bl	24bd0 <log_init>
	}

	return 0;
}
   41842:	2000      	movs	r0, #0
   41844:	bd08      	pop	{r3, pc}

00041846 <log_strdup>:
}
   41846:	4770      	bx	lr

00041848 <out_func>:
{
   41848:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   4184a:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   4184e:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   41850:	2101      	movs	r1, #1
   41852:	6852      	ldr	r2, [r2, #4]
   41854:	a801      	add	r0, sp, #4
   41856:	4798      	blx	r3
}
   41858:	2000      	movs	r0, #0
   4185a:	b003      	add	sp, #12
   4185c:	f85d fb04 	ldr.w	pc, [sp], #4

00041860 <buffer_write>:
{
   41860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41862:	4606      	mov	r6, r0
   41864:	460d      	mov	r5, r1
   41866:	4614      	mov	r4, r2
   41868:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   4186a:	4621      	mov	r1, r4
   4186c:	4628      	mov	r0, r5
   4186e:	463a      	mov	r2, r7
   41870:	47b0      	blx	r6
	} while (len != 0);
   41872:	1a24      	subs	r4, r4, r0
		buf += processed;
   41874:	4405      	add	r5, r0
	} while (len != 0);
   41876:	d1f8      	bne.n	4186a <buffer_write+0xa>
}
   41878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004187a <log_output_flush>:
		     log_output->control_block->offset,
   4187a:	6842      	ldr	r2, [r0, #4]
{
   4187c:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   4187e:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   41882:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   41884:	6881      	ldr	r1, [r0, #8]
   41886:	6800      	ldr	r0, [r0, #0]
   41888:	f7ff ffea 	bl	41860 <buffer_write>
	log_output->control_block->offset = 0;
   4188c:	2200      	movs	r2, #0
   4188e:	6863      	ldr	r3, [r4, #4]
   41890:	601a      	str	r2, [r3, #0]
}
   41892:	bd10      	pop	{r4, pc}

00041894 <fcb_append_to_scratch>:
{
   41894:	b538      	push	{r3, r4, r5, lr}
   41896:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   41898:	6a41      	ldr	r1, [r0, #36]	; 0x24
   4189a:	f000 fa11 	bl	41cc0 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   4189e:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   418a0:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   418a2:	4298      	cmp	r0, r3
   418a4:	d00f      	beq.n	418c6 <fcb_append_to_scratch+0x32>
	if (!sector) {
   418a6:	b170      	cbz	r0, 418c6 <fcb_append_to_scratch+0x32>
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   418a8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   418aa:	4601      	mov	r1, r0
   418ac:	3201      	adds	r2, #1
   418ae:	4620      	mov	r0, r4
   418b0:	b292      	uxth	r2, r2
   418b2:	f000 f8b2 	bl	41a1a <fcb_sector_hdr_init>
	if (rc) {
   418b6:	b928      	cbnz	r0, 418c4 <fcb_append_to_scratch+0x30>
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   418b8:	2308      	movs	r3, #8
   418ba:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   418bc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   418be:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   418c0:	3301      	adds	r3, #1
   418c2:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   418c4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   418c6:	f06f 001b 	mvn.w	r0, #27
   418ca:	e7fb      	b.n	418c4 <fcb_append_to_scratch+0x30>

000418cc <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   418cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   418ce:	b083      	sub	sp, #12
   418d0:	4604      	mov	r4, r0
   418d2:	460d      	mov	r5, r1
	int rc;
	uint8_t crc8[fcb->f_align];
   418d4:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   418d8:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   418da:	1dd3      	adds	r3, r2, #7
   418dc:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   418e0:	ebad 0d03 	sub.w	sp, sp, r3
   418e4:	ae02      	add	r6, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   418e6:	21ff      	movs	r1, #255	; 0xff
   418e8:	4630      	mov	r0, r6
   418ea:	f003 fa1c 	bl	44d26 <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   418ee:	4632      	mov	r2, r6
   418f0:	4629      	mov	r1, r5
   418f2:	4620      	mov	r0, r4
   418f4:	f000 f93b 	bl	41b6e <fcb_elem_crc8>
	if (rc) {
   418f8:	b9b0      	cbnz	r0, 41928 <fcb_append_finish+0x5c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   418fa:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   418fe:	89aa      	ldrh	r2, [r5, #12]
	if (fcb->f_align <= 1U) {
   41900:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   41902:	bf82      	ittt	hi
   41904:	f102 32ff 	addhi.w	r2, r2, #4294967295
   41908:	18d2      	addhi	r2, r2, r3
   4190a:	4258      	neghi	r0, r3
   4190c:	68a9      	ldr	r1, [r5, #8]
   4190e:	bf88      	it	hi
   41910:	4002      	andhi	r2, r0

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   41912:	9300      	str	r3, [sp, #0]
   41914:	440a      	add	r2, r1
   41916:	4633      	mov	r3, r6
   41918:	4620      	mov	r0, r4
   4191a:	6829      	ldr	r1, [r5, #0]
   4191c:	f000 f821 	bl	41962 <fcb_flash_write>
	if (rc) {
   41920:	2800      	cmp	r0, #0
		return -EIO;
   41922:	bf18      	it	ne
   41924:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   41928:	3704      	adds	r7, #4
   4192a:	46bd      	mov	sp, r7
   4192c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004192e <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   4192e:	6b80      	ldr	r0, [r0, #56]	; 0x38
   41930:	b108      	cbz	r0, 41936 <fcb_get_align+0x8>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   41932:	f000 bc6d 	b.w	42210 <flash_area_align>

	return align;
}
   41936:	4770      	bx	lr

00041938 <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   41938:	b570      	push	{r4, r5, r6, lr}
   4193a:	4614      	mov	r4, r2
   4193c:	461a      	mov	r2, r3
   4193e:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   41940:	684d      	ldr	r5, [r1, #4]
   41942:	18e6      	adds	r6, r4, r3
   41944:	42ae      	cmp	r6, r5
   41946:	d809      	bhi.n	4195c <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   41948:	6b80      	ldr	r0, [r0, #56]	; 0x38
   4194a:	b120      	cbz	r0, 41956 <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   4194c:	6809      	ldr	r1, [r1, #0]
   4194e:	4421      	add	r1, r4
   41950:	f000 fbf2 	bl	42138 <flash_area_read>

	if (rc != 0) {
   41954:	b108      	cbz	r0, 4195a <fcb_flash_read+0x22>
		return -EIO;
   41956:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   4195a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   4195c:	f06f 0015 	mvn.w	r0, #21
   41960:	e7fb      	b.n	4195a <fcb_flash_read+0x22>

00041962 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   41962:	b570      	push	{r4, r5, r6, lr}
   41964:	4614      	mov	r4, r2
   41966:	461a      	mov	r2, r3
   41968:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   4196a:	684d      	ldr	r5, [r1, #4]
   4196c:	18e6      	adds	r6, r4, r3
   4196e:	42ae      	cmp	r6, r5
   41970:	d809      	bhi.n	41986 <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   41972:	6b80      	ldr	r0, [r0, #56]	; 0x38
   41974:	b120      	cbz	r0, 41980 <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   41976:	6809      	ldr	r1, [r1, #0]
   41978:	4421      	add	r1, r4
   4197a:	f000 fbfa 	bl	42172 <flash_area_write>

	if (rc != 0) {
   4197e:	b108      	cbz	r0, 41984 <fcb_flash_write+0x22>
		return -EIO;
   41980:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   41984:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   41986:	f06f 0015 	mvn.w	r0, #21
   4198a:	e7fb      	b.n	41984 <fcb_flash_write+0x22>

0004198c <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   4198c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   4198e:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   41990:	b120      	cbz	r0, 4199c <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   41992:	e9d1 1200 	ldrd	r1, r2, [r1]
   41996:	f000 fc15 	bl	421c4 <flash_area_erase>

	if (rc != 0) {
   4199a:	b108      	cbz	r0, 419a0 <fcb_erase_sector+0x14>
		return -EIO;
   4199c:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   419a0:	bd08      	pop	{r3, pc}

000419a2 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   419a2:	b538      	push	{r3, r4, r5, lr}
   419a4:	4604      	mov	r4, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   419a6:	2500      	movs	r5, #0
	fa = fcb->f_active.fe_sector;
   419a8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   419aa:	7963      	ldrb	r3, [r4, #5]
   419ac:	42ab      	cmp	r3, r5
   419ae:	dc01      	bgt.n	419b4 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   419b0:	4628      	mov	r0, r5
   419b2:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   419b4:	4620      	mov	r0, r4
   419b6:	f000 f983 	bl	41cc0 <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   419ba:	6a23      	ldr	r3, [r4, #32]
		fa = fcb_getnext_sector(fcb, fa);
   419bc:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   419be:	4283      	cmp	r3, r0
   419c0:	d0f6      	beq.n	419b0 <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   419c2:	3501      	adds	r5, #1
   419c4:	e7f1      	b.n	419aa <fcb_free_sector_cnt+0x8>

000419c6 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   419c6:	297f      	cmp	r1, #127	; 0x7f
   419c8:	d802      	bhi.n	419d0 <fcb_put_len+0xa>
		buf[0] = len;
   419ca:	7001      	strb	r1, [r0, #0]
		return 1;
   419cc:	2001      	movs	r0, #1
   419ce:	4770      	bx	lr
	} else if (len < FCB_MAX_LEN) {
   419d0:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   419d4:	4299      	cmp	r1, r3
		buf[0] = (len & 0x7f) | 0x80;
   419d6:	bf9f      	itttt	ls
   419d8:	f061 037f 	ornls	r3, r1, #127	; 0x7f
		buf[1] = len >> 7;
   419dc:	09c9      	lsrls	r1, r1, #7
		buf[0] = (len & 0x7f) | 0x80;
   419de:	7003      	strbls	r3, [r0, #0]
		buf[1] = len >> 7;
   419e0:	7041      	strbls	r1, [r0, #1]
		return 2;
   419e2:	bf94      	ite	ls
   419e4:	2002      	movls	r0, #2
	} else {
		return -EINVAL;
   419e6:	f06f 0015 	mvnhi.w	r0, #21
	}
}
   419ea:	4770      	bx	lr

000419ec <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
	int rc;

	if (buf[0] & 0x80) {
   419ec:	f990 2000 	ldrsb.w	r2, [r0]
   419f0:	7803      	ldrb	r3, [r0, #0]
   419f2:	2a00      	cmp	r2, #0
   419f4:	da0b      	bge.n	41a0e <fcb_get_len+0x22>
		if (buf[0] == 0xff && buf[1] == 0xff) {
   419f6:	7842      	ldrb	r2, [r0, #1]
   419f8:	ea03 0002 	and.w	r0, r3, r2
   419fc:	28ff      	cmp	r0, #255	; 0xff
   419fe:	d009      	beq.n	41a14 <fcb_get_len+0x28>
			return -ENOTSUP;
		}
		*len = (buf[0] & 0x7f) | (buf[1] << 7);
   41a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41a04:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
		rc = 2;
   41a08:	2002      	movs	r0, #2
		*len = (buf[0] & 0x7f) | (buf[1] << 7);
   41a0a:	800b      	strh	r3, [r1, #0]
		rc = 2;
   41a0c:	4770      	bx	lr
	} else {
		*len = buf[0];
		rc = 1;
   41a0e:	2001      	movs	r0, #1
		*len = buf[0];
   41a10:	800b      	strh	r3, [r1, #0]
		rc = 1;
   41a12:	4770      	bx	lr
			return -ENOTSUP;
   41a14:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}
	return rc;
}
   41a18:	4770      	bx	lr

00041a1a <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   41a1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb->f_magic;
	fda.fd_ver = fcb->f_version;
   41a1c:	7903      	ldrb	r3, [r0, #4]
	fda.fd_magic = fcb->f_magic;
   41a1e:	6804      	ldr	r4, [r0, #0]
	fda.fd_ver = fcb->f_version;
   41a20:	f88d 300c 	strb.w	r3, [sp, #12]
	fda._pad = 0xff;
   41a24:	23ff      	movs	r3, #255	; 0xff
   41a26:	f88d 300d 	strb.w	r3, [sp, #13]
	fda.fd_id = id;

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   41a2a:	2308      	movs	r3, #8
	fda.fd_id = id;
   41a2c:	f8ad 200e 	strh.w	r2, [sp, #14]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   41a30:	9300      	str	r3, [sp, #0]
   41a32:	2200      	movs	r2, #0
   41a34:	446b      	add	r3, sp
	fda.fd_magic = fcb->f_magic;
   41a36:	9402      	str	r4, [sp, #8]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   41a38:	f7ff ff93 	bl	41962 <fcb_flash_write>
	if (rc != 0) {
   41a3c:	2800      	cmp	r0, #0
		return -EIO;
	}
	return 0;
}
   41a3e:	bf18      	it	ne
   41a40:	f06f 0004 	mvnne.w	r0, #4
   41a44:	b004      	add	sp, #16
   41a46:	bd10      	pop	{r4, pc}

00041a48 <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   41a48:	b530      	push	{r4, r5, lr}
   41a4a:	4605      	mov	r5, r0
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   41a4c:	4614      	mov	r4, r2
{
   41a4e:	b085      	sub	sp, #20
	if (!fdap) {
   41a50:	b902      	cbnz	r2, 41a54 <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   41a52:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   41a54:	2308      	movs	r3, #8
   41a56:	2200      	movs	r2, #0
   41a58:	9300      	str	r3, [sp, #0]
   41a5a:	4628      	mov	r0, r5
   41a5c:	4623      	mov	r3, r4
   41a5e:	f7ff ff6b 	bl	41938 <fcb_flash_read>
	if (rc) {
   41a62:	b950      	cbnz	r0, 41a7a <fcb_sector_hdr_read+0x32>
		return -EIO;
	}
	if (fdap->fd_magic == 0xffffffff) {
   41a64:	6823      	ldr	r3, [r4, #0]
   41a66:	1c5a      	adds	r2, r3, #1
   41a68:	d005      	beq.n	41a76 <fcb_sector_hdr_read+0x2e>
		return 0;
	}
	if (fdap->fd_magic != fcb->f_magic) {
   41a6a:	682a      	ldr	r2, [r5, #0]
		return -ENOMSG;
   41a6c:	4293      	cmp	r3, r2
   41a6e:	bf0c      	ite	eq
   41a70:	2001      	moveq	r0, #1
   41a72:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   41a76:	b005      	add	sp, #20
   41a78:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   41a7a:	f06f 0004 	mvn.w	r0, #4
   41a7e:	e7fa      	b.n	41a76 <fcb_sector_hdr_read+0x2e>

00041a80 <fcb_init>:
{
   41a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   41a84:	688b      	ldr	r3, [r1, #8]
{
   41a86:	460c      	mov	r4, r1
   41a88:	b085      	sub	sp, #20
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   41a8a:	b92b      	cbnz	r3, 41a98 <fcb_init+0x18>
		return -EINVAL;
   41a8c:	f06f 0515 	mvn.w	r5, #21
}
   41a90:	4628      	mov	r0, r5
   41a92:	b005      	add	sp, #20
   41a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   41a98:	794b      	ldrb	r3, [r1, #5]
   41a9a:	798a      	ldrb	r2, [r1, #6]
   41a9c:	1a9b      	subs	r3, r3, r2
   41a9e:	2b00      	cmp	r3, #0
   41aa0:	ddf4      	ble.n	41a8c <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   41aa2:	3138      	adds	r1, #56	; 0x38
   41aa4:	b2c0      	uxtb	r0, r0
   41aa6:	f7e3 fdd3 	bl	25650 <flash_area_open>
	if (rc != 0) {
   41aaa:	4606      	mov	r6, r0
   41aac:	2800      	cmp	r0, #0
   41aae:	d1ed      	bne.n	41a8c <fcb_init+0xc>
	align = fcb_get_align(fcb);
   41ab0:	4620      	mov	r0, r4
   41ab2:	f7ff ff3c 	bl	4192e <fcb_get_align>
	if (align == 0U) {
   41ab6:	4681      	mov	r9, r0
   41ab8:	2800      	cmp	r0, #0
   41aba:	d0e7      	beq.n	41a8c <fcb_init+0xc>
	int oldest = -1, newest = -1;
   41abc:	f04f 3bff 	mov.w	fp, #4294967295
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   41ac0:	46b2      	mov	sl, r6
   41ac2:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   41ac4:	46d8      	mov	r8, fp
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   41ac6:	7963      	ldrb	r3, [r4, #5]
   41ac8:	42b3      	cmp	r3, r6
   41aca:	dc24      	bgt.n	41b16 <fcb_init+0x96>
	if (oldest < 0) {
   41acc:	f1b8 3fff 	cmp.w	r8, #4294967295
   41ad0:	d149      	bne.n	41b66 <fcb_init+0xe6>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   41ad2:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   41ad4:	2200      	movs	r2, #0
   41ad6:	4639      	mov	r1, r7
   41ad8:	4620      	mov	r0, r4
   41ada:	f7ff ff9e 	bl	41a1a <fcb_sector_hdr_init>
		if (rc) {
   41ade:	4605      	mov	r5, r0
   41ae0:	2800      	cmp	r0, #0
   41ae2:	d1d5      	bne.n	41a90 <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   41ae4:	46ba      	mov	sl, r7
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   41ae6:	2308      	movs	r3, #8
	fcb->f_active.fe_sector = newest_sector;
   41ae8:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_align = align;
   41aec:	f884 9036 	strb.w	r9, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   41af0:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   41af2:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   41af4:	f104 0624 	add.w	r6, r4, #36	; 0x24
   41af8:	4631      	mov	r1, r6
   41afa:	4620      	mov	r0, r4
   41afc:	f000 f8bd 	bl	41c7a <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   41b00:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   41b04:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   41b06:	d030      	beq.n	41b6a <fcb_init+0xea>
		if (rc != 0) {
   41b08:	2800      	cmp	r0, #0
   41b0a:	d0f5      	beq.n	41af8 <fcb_init+0x78>
	return z_impl_k_mutex_init(mutex);
   41b0c:	f104 000c 	add.w	r0, r4, #12
   41b10:	f002 ff1d 	bl	4494e <z_impl_k_mutex_init>
   41b14:	e7bc      	b.n	41a90 <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   41b16:	68a1      	ldr	r1, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   41b18:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   41b1a:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   41b1e:	aa02      	add	r2, sp, #8
   41b20:	9101      	str	r1, [sp, #4]
   41b22:	f7ff ff91 	bl	41a48 <fcb_sector_hdr_read>
		if (rc < 0) {
   41b26:	1e05      	subs	r5, r0, #0
   41b28:	dbb2      	blt.n	41a90 <fcb_init+0x10>
		if (rc == 0) {
   41b2a:	d009      	beq.n	41b40 <fcb_init+0xc0>
		if (oldest < 0) {
   41b2c:	f1b8 3fff 	cmp.w	r8, #4294967295
   41b30:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   41b34:	9901      	ldr	r1, [sp, #4]
   41b36:	d105      	bne.n	41b44 <fcb_init+0xc4>
			oldest = newest = fda.fd_id;
   41b38:	4698      	mov	r8, r3
			oldest_sector = newest_sector = sector;
   41b3a:	468a      	mov	sl, r1
   41b3c:	460f      	mov	r7, r1
			oldest = newest = fda.fd_id;
   41b3e:	469b      	mov	fp, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   41b40:	3601      	adds	r6, #1
   41b42:	e7c0      	b.n	41ac6 <fcb_init+0x46>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   41b44:	b21d      	sxth	r5, r3
   41b46:	fa0f f08b 	sxth.w	r0, fp
   41b4a:	1a28      	subs	r0, r5, r0
   41b4c:	2800      	cmp	r0, #0
   41b4e:	dd02      	ble.n	41b56 <fcb_init+0xd6>
			newest = fda.fd_id;
   41b50:	469b      	mov	fp, r3
			newest_sector = sector;
   41b52:	468a      	mov	sl, r1
   41b54:	e7f4      	b.n	41b40 <fcb_init+0xc0>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   41b56:	fa0f f288 	sxth.w	r2, r8
   41b5a:	1b52      	subs	r2, r2, r5
			oldest = fda.fd_id;
   41b5c:	2a00      	cmp	r2, #0
   41b5e:	bfc4      	itt	gt
   41b60:	4698      	movgt	r8, r3
   41b62:	460f      	movgt	r7, r1
   41b64:	e7ec      	b.n	41b40 <fcb_init+0xc0>
   41b66:	465d      	mov	r5, fp
   41b68:	e7bd      	b.n	41ae6 <fcb_init+0x66>
			rc = 0;
   41b6a:	2500      	movs	r5, #0
   41b6c:	e7ce      	b.n	41b0c <fcb_init+0x8c>

00041b6e <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   41b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41b72:	460c      	mov	r4, r1
   41b74:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   41b76:	e9d1 1200 	ldrd	r1, r2, [r1]
   41b7a:	684b      	ldr	r3, [r1, #4]
   41b7c:	1c95      	adds	r5, r2, #2
   41b7e:	429d      	cmp	r5, r3
{
   41b80:	4606      	mov	r6, r0
   41b82:	b08c      	sub	sp, #48	; 0x30
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   41b84:	d84b      	bhi.n	41c1e <fcb_elem_crc8+0xb0>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   41b86:	2302      	movs	r3, #2
   41b88:	9300      	str	r3, [sp, #0]
   41b8a:	ab04      	add	r3, sp, #16
   41b8c:	f7ff fed4 	bl	41938 <fcb_flash_read>
	if (rc) {
   41b90:	b120      	cbz	r0, 41b9c <fcb_elem_crc8+0x2e>
		return -EIO;
   41b92:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   41b96:	b00c      	add	sp, #48	; 0x30
   41b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(tmp_str, &len);
   41b9c:	f10d 010e 	add.w	r1, sp, #14
   41ba0:	a804      	add	r0, sp, #16
   41ba2:	f7ff ff23 	bl	419ec <fcb_get_len>
	if (cnt < 0) {
   41ba6:	2800      	cmp	r0, #0
   41ba8:	dbf5      	blt.n	41b96 <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   41baa:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   41bae:	b283      	uxth	r3, r0
   41bb0:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   41bb2:	bf84      	itt	hi
   41bb4:	f102 35ff 	addhi.w	r5, r2, #4294967295
   41bb8:	195b      	addhi	r3, r3, r5
   41bba:	6861      	ldr	r1, [r4, #4]
   41bbc:	bf84      	itt	hi
   41bbe:	4252      	neghi	r2, r2
   41bc0:	4013      	andhi	r3, r2
   41bc2:	440b      	add	r3, r1
   41bc4:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   41bc6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   41bca:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   41bcc:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   41bce:	20ff      	movs	r0, #255	; 0xff
   41bd0:	a904      	add	r1, sp, #16
   41bd2:	f7e2 f815 	bl	23c00 <crc8_ccitt>
   41bd6:	4605      	mov	r5, r0
	off = loc->fe_data_off;
   41bd8:	f8d4 8008 	ldr.w	r8, [r4, #8]
	end = loc->fe_data_off + len;
   41bdc:	f8bd a00e 	ldrh.w	sl, [sp, #14]
   41be0:	44c2      	add	sl, r8
	for (; off < end; off += blk_sz) {
   41be2:	45d0      	cmp	r8, sl
   41be4:	d302      	bcc.n	41bec <fcb_elem_crc8+0x7e>
	return 0;
   41be6:	2000      	movs	r0, #0
	*c8p = crc8;
   41be8:	703d      	strb	r5, [r7, #0]
	return 0;
   41bea:	e7d4      	b.n	41b96 <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   41bec:	ebaa 0908 	sub.w	r9, sl, r8
   41bf0:	f1b9 0f20 	cmp.w	r9, #32
   41bf4:	bf28      	it	cs
   41bf6:	f04f 0920 	movcs.w	r9, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   41bfa:	4642      	mov	r2, r8
   41bfc:	4630      	mov	r0, r6
   41bfe:	6821      	ldr	r1, [r4, #0]
   41c00:	f8cd 9000 	str.w	r9, [sp]
   41c04:	ab04      	add	r3, sp, #16
   41c06:	f7ff fe97 	bl	41938 <fcb_flash_read>
		if (rc) {
   41c0a:	2800      	cmp	r0, #0
   41c0c:	d1c1      	bne.n	41b92 <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   41c0e:	4628      	mov	r0, r5
   41c10:	464a      	mov	r2, r9
   41c12:	a904      	add	r1, sp, #16
   41c14:	f7e1 fff4 	bl	23c00 <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   41c18:	44c8      	add	r8, r9
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   41c1a:	4605      	mov	r5, r0
	for (; off < end; off += blk_sz) {
   41c1c:	e7e1      	b.n	41be2 <fcb_elem_crc8+0x74>
		return -ENOTSUP;
   41c1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   41c22:	e7b8      	b.n	41b96 <fcb_elem_crc8+0x28>

00041c24 <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   41c24:	b530      	push	{r4, r5, lr}
   41c26:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   41c28:	f10d 020e 	add.w	r2, sp, #14
{
   41c2c:	4605      	mov	r5, r0
   41c2e:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   41c30:	f7ff ff9d 	bl	41b6e <fcb_elem_crc8>
	if (rc) {
   41c34:	b9e0      	cbnz	r0, 41c70 <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   41c36:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   41c3a:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   41c3c:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   41c3e:	bf81      	itttt	hi
   41c40:	f102 32ff 	addhi.w	r2, r2, #4294967295
   41c44:	18d2      	addhi	r2, r2, r3
   41c46:	425b      	neghi	r3, r3
   41c48:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   41c4a:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   41c4c:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   41c4e:	9300      	str	r3, [sp, #0]
   41c50:	440a      	add	r2, r1
   41c52:	4628      	mov	r0, r5
   41c54:	6821      	ldr	r1, [r4, #0]
   41c56:	f10d 030f 	add.w	r3, sp, #15
   41c5a:	f7ff fe6d 	bl	41938 <fcb_flash_read>
	if (rc) {
   41c5e:	b948      	cbnz	r0, 41c74 <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   41c60:	f89d 200f 	ldrb.w	r2, [sp, #15]
   41c64:	f89d 300e 	ldrb.w	r3, [sp, #14]
   41c68:	429a      	cmp	r2, r3
		return -EBADMSG;
   41c6a:	bf18      	it	ne
   41c6c:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   41c70:	b005      	add	sp, #20
   41c72:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   41c74:	f06f 0004 	mvn.w	r0, #4
   41c78:	e7fa      	b.n	41c70 <fcb_elem_info+0x4c>

00041c7a <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   41c7a:	b538      	push	{r3, r4, r5, lr}
   41c7c:	4604      	mov	r4, r0
   41c7e:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   41c80:	f7ff ffd0 	bl	41c24 <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   41c84:	b110      	cbz	r0, 41c8c <fcb_getnext_in_sector+0x12>
   41c86:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   41c8a:	d118      	bne.n	41cbe <fcb_getnext_in_sector+0x44>
		do {
			loc->fe_elem_off = loc->fe_data_off +
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   41c8c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   41c90:	89ab      	ldrh	r3, [r5, #12]
	if (fcb->f_align <= 1U) {
   41c92:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   41c94:	bf88      	it	hi
   41c96:	f103 33ff 	addhi.w	r3, r3, #4294967295
			loc->fe_elem_off = loc->fe_data_off +
   41c9a:	68aa      	ldr	r2, [r5, #8]
   41c9c:	bf82      	ittt	hi
   41c9e:	185b      	addhi	r3, r3, r1
   41ca0:	4248      	neghi	r0, r1
   41ca2:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   41ca4:	2901      	cmp	r1, #1
   41ca6:	4413      	add	r3, r2
		return len;
   41ca8:	bf92      	itee	ls
   41caa:	2201      	movls	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   41cac:	424a      	neghi	r2, r1
   41cae:	400a      	andhi	r2, r1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   41cb0:	4413      	add	r3, r2
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   41cb2:	4629      	mov	r1, r5
   41cb4:	4620      	mov	r0, r4
			loc->fe_elem_off = loc->fe_data_off +
   41cb6:	606b      	str	r3, [r5, #4]
			rc = fcb_elem_info(fcb, loc);
   41cb8:	f7ff ffb4 	bl	41c24 <fcb_elem_info>
			if (rc != -EBADMSG) {
   41cbc:	e7e3      	b.n	41c86 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   41cbe:	bd38      	pop	{r3, r4, r5, pc}

00041cc0 <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   41cc0:	6882      	ldr	r2, [r0, #8]
   41cc2:	7943      	ldrb	r3, [r0, #5]
	sector++;
   41cc4:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   41cc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   41cca:	4299      	cmp	r1, r3
   41ccc:	bf34      	ite	cc
   41cce:	4608      	movcc	r0, r1
   41cd0:	4610      	movcs	r0, r2
   41cd2:	4770      	bx	lr

00041cd4 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   41cd4:	680b      	ldr	r3, [r1, #0]
{
   41cd6:	b570      	push	{r4, r5, r6, lr}
   41cd8:	4605      	mov	r5, r0
   41cda:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   41cdc:	b90b      	cbnz	r3, 41ce2 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   41cde:	6a03      	ldr	r3, [r0, #32]
   41ce0:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   41ce2:	6863      	ldr	r3, [r4, #4]
   41ce4:	b95b      	cbnz	r3, 41cfe <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   41ce6:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   41ce8:	4621      	mov	r1, r4
   41cea:	4628      	mov	r0, r5
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   41cec:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   41cee:	f7ff ff99 	bl	41c24 <fcb_elem_info>
		switch (rc) {
   41cf2:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   41cf6:	d021      	beq.n	41d3c <fcb_getnext_nolock+0x68>
   41cf8:	b950      	cbnz	r0, 41d10 <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   41cfa:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   41cfc:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   41cfe:	4621      	mov	r1, r4
   41d00:	4628      	mov	r0, r5
   41d02:	f7ff ffba 	bl	41c7a <fcb_getnext_in_sector>
		if (rc == 0) {
   41d06:	2800      	cmp	r0, #0
   41d08:	d0f7      	beq.n	41cfa <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   41d0a:	f110 0f86 	cmn.w	r0, #134	; 0x86
   41d0e:	d113      	bne.n	41d38 <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   41d10:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   41d12:	6821      	ldr	r1, [r4, #0]
   41d14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   41d16:	4299      	cmp	r1, r3
   41d18:	d019      	beq.n	41d4e <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   41d1a:	4628      	mov	r0, r5
   41d1c:	f7ff ffd0 	bl	41cc0 <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   41d20:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   41d22:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   41d26:	4628      	mov	r0, r5
   41d28:	f7ff ff7c 	bl	41c24 <fcb_elem_info>
			switch (rc) {
   41d2c:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   41d30:	d004      	beq.n	41d3c <fcb_getnext_nolock+0x68>
   41d32:	2800      	cmp	r0, #0
   41d34:	d0e1      	beq.n	41cfa <fcb_getnext_nolock+0x26>
   41d36:	e7ec      	b.n	41d12 <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   41d38:	304d      	adds	r0, #77	; 0x4d
   41d3a:	d1de      	bne.n	41cfa <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   41d3c:	4621      	mov	r1, r4
   41d3e:	4628      	mov	r0, r5
   41d40:	f7ff ff9b 	bl	41c7a <fcb_getnext_in_sector>
		if (rc == 0) {
   41d44:	2800      	cmp	r0, #0
   41d46:	d0d8      	beq.n	41cfa <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   41d48:	304d      	adds	r0, #77	; 0x4d
   41d4a:	d0f7      	beq.n	41d3c <fcb_getnext_nolock+0x68>
next_sector:
   41d4c:	e7e0      	b.n	41d10 <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   41d4e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   41d52:	e7d3      	b.n	41cfc <fcb_getnext_nolock+0x28>

00041d54 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   41d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   41d56:	4604      	mov	r4, r0
   41d58:	9101      	str	r1, [sp, #4]
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   41d5a:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   41d5e:	f04f 32ff 	mov.w	r2, #4294967295
   41d62:	f04f 33ff 	mov.w	r3, #4294967295
   41d66:	4628      	mov	r0, r5
   41d68:	f7fa faa8 	bl	3c2bc <z_impl_k_mutex_lock>
	if (rc) {
   41d6c:	b950      	cbnz	r0, 41d84 <fcb_getnext+0x30>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   41d6e:	4620      	mov	r0, r4
   41d70:	9901      	ldr	r1, [sp, #4]
   41d72:	f7ff ffaf 	bl	41cd4 <fcb_getnext_nolock>
   41d76:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   41d78:	4628      	mov	r0, r5
   41d7a:	f7fa fb99 	bl	3c4b0 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   41d7e:	4620      	mov	r0, r4
   41d80:	b003      	add	sp, #12
   41d82:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   41d84:	f06f 0415 	mvn.w	r4, #21
   41d88:	e7f9      	b.n	41d7e <fcb_getnext+0x2a>

00041d8a <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   41d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41d8c:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   41d8e:	f100 070c 	add.w	r7, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   41d92:	f04f 32ff 	mov.w	r2, #4294967295
   41d96:	f04f 33ff 	mov.w	r3, #4294967295
   41d9a:	4638      	mov	r0, r7
   41d9c:	f7fa fa8e 	bl	3c2bc <z_impl_k_mutex_lock>
	if (rc) {
   41da0:	bb48      	cbnz	r0, 41df6 <fcb_rotate+0x6c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   41da2:	4620      	mov	r0, r4
   41da4:	6a21      	ldr	r1, [r4, #32]
   41da6:	f7ff fdf1 	bl	4198c <fcb_erase_sector>
	if (rc) {
   41daa:	bb08      	cbnz	r0, 41df0 <fcb_rotate+0x66>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   41dac:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   41db0:	4299      	cmp	r1, r3
   41db2:	d112      	bne.n	41dda <fcb_rotate+0x50>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   41db4:	4620      	mov	r0, r4
   41db6:	f7ff ff83 	bl	41cc0 <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   41dba:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   41dbc:	4601      	mov	r1, r0
   41dbe:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   41dc0:	4606      	mov	r6, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   41dc2:	b292      	uxth	r2, r2
   41dc4:	4620      	mov	r0, r4
   41dc6:	f7ff fe28 	bl	41a1a <fcb_sector_hdr_init>
		if (rc) {
   41dca:	4605      	mov	r5, r0
   41dcc:	b958      	cbnz	r0, 41de6 <fcb_rotate+0x5c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   41dce:	2308      	movs	r3, #8
   41dd0:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   41dd2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   41dd4:	6266      	str	r6, [r4, #36]	; 0x24
		fcb->f_active_id++;
   41dd6:	3301      	adds	r3, #1
   41dd8:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   41dda:	4620      	mov	r0, r4
   41ddc:	6a21      	ldr	r1, [r4, #32]
   41dde:	f7ff ff6f 	bl	41cc0 <fcb_getnext_sector>
   41de2:	2500      	movs	r5, #0
   41de4:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   41de6:	4638      	mov	r0, r7
   41de8:	f7fa fb62 	bl	3c4b0 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   41dec:	4628      	mov	r0, r5
   41dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   41df0:	f06f 0504 	mvn.w	r5, #4
   41df4:	e7f7      	b.n	41de6 <fcb_rotate+0x5c>
		return -EINVAL;
   41df6:	f06f 0515 	mvn.w	r5, #21
   41dfa:	e7f7      	b.n	41dec <fcb_rotate+0x62>

00041dfc <boot_flag_read.constprop.0>:
static int boot_flag_read(int flag, uint8_t bank_id)
   41dfc:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   41dfe:	2003      	movs	r0, #3
   41e00:	a901      	add	r1, sp, #4
   41e02:	f7e3 fc25 	bl	25650 <flash_area_open>
	if (rc) {
   41e06:	b950      	cbnz	r0, 41e1e <boot_flag_read.constprop.0+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   41e08:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   41e0a:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   41e0c:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   41e0e:	f10d 0203 	add.w	r2, sp, #3
   41e12:	3918      	subs	r1, #24
   41e14:	f000 f990 	bl	42138 <flash_area_read>
	if (rc != 0) {
   41e18:	b908      	cbnz	r0, 41e1e <boot_flag_read.constprop.0+0x22>
	return flag_val;
   41e1a:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   41e1e:	b003      	add	sp, #12
   41e20:	f85d fb04 	ldr.w	pc, [sp], #4

00041e24 <boot_flag_write.constprop.0>:
static int boot_flag_write(int flag, uint8_t bank_id)
   41e24:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   41e26:	a901      	add	r1, sp, #4
   41e28:	f7e3 fc12 	bl	25650 <flash_area_open>
	if (rc) {
   41e2c:	4604      	mov	r4, r0
   41e2e:	b948      	cbnz	r0, 41e44 <boot_flag_write.constprop.0+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   41e30:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   41e32:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   41e34:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   41e36:	3918      	subs	r1, #24
   41e38:	f7e3 f9c0 	bl	251bc <boot_write_trailer_byte>
   41e3c:	4604      	mov	r4, r0
	flash_area_close(fa);
   41e3e:	9801      	ldr	r0, [sp, #4]
   41e40:	f000 f979 	bl	42136 <flash_area_close>
}
   41e44:	4620      	mov	r0, r4
   41e46:	b002      	add	sp, #8
   41e48:	bd10      	pop	{r4, pc}

00041e4a <boot_write_img_confirmed>:
{
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   41e4a:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   41e4c:	f7ff ffd6 	bl	41dfc <boot_flag_read.constprop.0>
	rc = flash_area_open(bank_id, &fa);
   41e50:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   41e52:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   41e54:	2003      	movs	r0, #3
   41e56:	f7e3 fbfb 	bl	25650 <flash_area_open>
	if (rc) {
   41e5a:	2800      	cmp	r0, #0
		return -EINVAL;
   41e5c:	bf0c      	ite	eq
   41e5e:	23ff      	moveq	r3, #255	; 0xff
   41e60:	f06f 0315 	mvnne.w	r3, #21
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   41e64:	42a3      	cmp	r3, r4
   41e66:	d104      	bne.n	41e72 <boot_write_img_confirmed+0x28>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   41e68:	2003      	movs	r0, #3
   41e6a:	f7ff ffdb 	bl	41e24 <boot_flag_write.constprop.0>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   41e6e:	b002      	add	sp, #8
   41e70:	bd10      	pop	{r4, pc}
		return 0;
   41e72:	2000      	movs	r0, #0
   41e74:	e7fb      	b.n	41e6e <boot_write_img_confirmed+0x24>

00041e76 <flash_img_buffered_write>:
	     "CONFIG_IMG_BLOCK_BUF_SIZE is not a multiple of "
	     "FLASH_WRITE_BLOCK_SIZE");

int flash_img_buffered_write(struct flash_img_context *ctx, const uint8_t *data,
			     size_t len, bool flush)
{
   41e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;

	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   41e78:	f500 7701 	add.w	r7, r0, #516	; 0x204
{
   41e7c:	4605      	mov	r5, r0
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   41e7e:	4638      	mov	r0, r7
{
   41e80:	461e      	mov	r6, r3
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   41e82:	f000 f9da 	bl	4223a <stream_flash_buffered_write>
   41e86:	4604      	mov	r4, r0
	if (!flush) {
   41e88:	b186      	cbz	r6, 41eac <flash_img_buffered_write+0x36>
		return rc;
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	rc = stream_flash_erase_page(&ctx->stream,
				ctx->flash_area->fa_off +
   41e8a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	rc = stream_flash_erase_page(&ctx->stream,
   41e8e:	4638      	mov	r0, r7
				ctx->flash_area->fa_off +
   41e90:	6899      	ldr	r1, [r3, #8]
   41e92:	685b      	ldr	r3, [r3, #4]
   41e94:	3920      	subs	r1, #32
	rc = stream_flash_erase_page(&ctx->stream,
   41e96:	4419      	add	r1, r3
   41e98:	f7e3 fc16 	bl	256c8 <stream_flash_erase_page>
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
	if (rc) {
   41e9c:	4604      	mov	r4, r0
   41e9e:	b928      	cbnz	r0, 41eac <flash_img_buffered_write+0x36>
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   41ea0:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   41ea4:	f000 f947 	bl	42136 <flash_area_close>
	ctx->flash_area = NULL;
   41ea8:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200

	return rc;
}
   41eac:	4620      	mov	r0, r4
   41eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00041eb0 <flash_img_bytes_written>:

size_t flash_img_bytes_written(struct flash_img_context *ctx)
{
	return stream_flash_bytes_written(&ctx->stream);
   41eb0:	f500 7001 	add.w	r0, r0, #516	; 0x204
   41eb4:	f000 ba2b 	b.w	4230e <stream_flash_bytes_written>

00041eb8 <flash_img_init_id>:
}

int flash_img_init_id(struct flash_img_context *ctx, uint8_t area_id)
{
   41eb8:	b530      	push	{r4, r5, lr}
   41eba:	4605      	mov	r5, r0
   41ebc:	b085      	sub	sp, #20
   41ebe:	4608      	mov	r0, r1
	int rc;
	const struct device *flash_dev;

	rc = flash_area_open(area_id,
   41ec0:	f505 7100 	add.w	r1, r5, #512	; 0x200
   41ec4:	f7e3 fbc4 	bl	25650 <flash_area_open>
			       (const struct flash_area **)&(ctx->flash_area));
	if (rc) {
   41ec8:	4604      	mov	r4, r0
   41eca:	b998      	cbnz	r0, 41ef4 <flash_img_init_id+0x3c>
		return rc;
	}

	flash_dev = flash_area_get_device(ctx->flash_area);
   41ecc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   41ed0:	f000 f9a7 	bl	42222 <flash_area_get_device>

	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
			CONFIG_IMG_BLOCK_BUF_SIZE, ctx->flash_area->fa_off,
   41ed4:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   41ed8:	9402      	str	r4, [sp, #8]
   41eda:	689a      	ldr	r2, [r3, #8]
	flash_dev = flash_area_get_device(ctx->flash_area);
   41edc:	4601      	mov	r1, r0
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   41ede:	9201      	str	r2, [sp, #4]
   41ee0:	685b      	ldr	r3, [r3, #4]
   41ee2:	462a      	mov	r2, r5
   41ee4:	9300      	str	r3, [sp, #0]
   41ee6:	f505 7001 	add.w	r0, r5, #516	; 0x204
   41eea:	f44f 7300 	mov.w	r3, #512	; 0x200
   41eee:	f7e3 fcab 	bl	25848 <stream_flash_init>
   41ef2:	4604      	mov	r4, r0
			ctx->flash_area->fa_size, NULL);
}
   41ef4:	4620      	mov	r0, r4
   41ef6:	b005      	add	sp, #20
   41ef8:	bd30      	pop	{r4, r5, pc}

00041efa <flash_img_init>:

int flash_img_init(struct flash_img_context *ctx)
{
	return flash_img_init_id(ctx, FLASH_AREA_IMAGE_SECONDARY);
   41efa:	2107      	movs	r1, #7
   41efc:	f7ff bfdc 	b.w	41eb8 <flash_img_init_id>

00041f00 <sntp_init>:
{
   41f00:	b570      	push	{r4, r5, r6, lr}
   41f02:	460d      	mov	r5, r1
   41f04:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   41f06:	4604      	mov	r4, r0
   41f08:	b330      	cbz	r0, 41f58 <sntp_init+0x58>
   41f0a:	b329      	cbz	r1, 41f58 <sntp_init+0x58>
   41f0c:	2214      	movs	r2, #20
   41f0e:	2100      	movs	r1, #0
   41f10:	f002 ff09 	bl	44d26 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   41f14:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   41f16:	2211      	movs	r2, #17
   41f18:	2102      	movs	r1, #2
   41f1a:	f7e3 f9a9 	bl	25270 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   41f1e:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   41f20:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   41f22:	da04      	bge.n	41f2e <sntp_init+0x2e>
		return -errno;
   41f24:	f000 fba5 	bl	42672 <__errno>
   41f28:	6800      	ldr	r0, [r0, #0]
   41f2a:	4240      	negs	r0, r0
}
   41f2c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   41f2e:	4632      	mov	r2, r6
   41f30:	4629      	mov	r1, r5
   41f32:	f000 f843 	bl	41fbc <z_impl_zsock_connect>
	if (ret < 0) {
   41f36:	2800      	cmp	r0, #0
   41f38:	68e0      	ldr	r0, [r4, #12]
   41f3a:	da02      	bge.n	41f42 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   41f3c:	f000 f827 	bl	41f8e <z_impl_zsock_close>
   41f40:	e7f0      	b.n	41f24 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   41f42:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   41f44:	68a3      	ldr	r3, [r4, #8]
   41f46:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   41f4a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   41f4e:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   41f50:	8091      	strh	r1, [r2, #4]
	return 0;
   41f52:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   41f54:	60a3      	str	r3, [r4, #8]
	return 0;
   41f56:	e7e9      	b.n	41f2c <sntp_init+0x2c>
		return -EFAULT;
   41f58:	f06f 000d 	mvn.w	r0, #13
   41f5c:	e7e6      	b.n	41f2c <sntp_init+0x2c>

00041f5e <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   41f5e:	b110      	cbz	r0, 41f66 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   41f60:	68c0      	ldr	r0, [r0, #12]
   41f62:	f000 b814 	b.w	41f8e <z_impl_zsock_close>
	}
}
   41f66:	4770      	bx	lr

00041f68 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   41f68:	f7e3 bafa 	b.w	25560 <socket_offload_getaddrinfo>

00041f6c <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   41f6c:	f7e3 bb2c 	b.w	255c8 <socket_offload_freeaddrinfo>

00041f70 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   41f70:	b40c      	push	{r2, r3}
   41f72:	4603      	mov	r3, r0
   41f74:	b507      	push	{r0, r1, r2, lr}
   41f76:	aa04      	add	r2, sp, #16
   41f78:	4608      	mov	r0, r1
   41f7a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   41f7e:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   41f80:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   41f82:	4798      	blx	r3
	va_end(args);

	return res;
}
   41f84:	b003      	add	sp, #12
   41f86:	f85d eb04 	ldr.w	lr, [sp], #4
   41f8a:	b002      	add	sp, #8
   41f8c:	4770      	bx	lr

00041f8e <z_impl_zsock_close>:
{
   41f8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   41f90:	a901      	add	r1, sp, #4
{
   41f92:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   41f94:	f7e1 fe80 	bl	23c98 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   41f98:	b940      	cbnz	r0, 41fac <z_impl_zsock_close+0x1e>
		errno = EBADF;
   41f9a:	f000 fb6a 	bl	42672 <__errno>
   41f9e:	2309      	movs	r3, #9
		return -1;
   41fa0:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   41fa4:	6003      	str	r3, [r0, #0]
}
   41fa6:	4620      	mov	r0, r4
   41fa8:	b003      	add	sp, #12
   41faa:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   41fac:	9b01      	ldr	r3, [sp, #4]
   41fae:	689b      	ldr	r3, [r3, #8]
   41fb0:	4798      	blx	r3
   41fb2:	4604      	mov	r4, r0
	z_free_fd(sock);
   41fb4:	4628      	mov	r0, r5
   41fb6:	f7e1 febf 	bl	23d38 <z_free_fd>
	return ret;
   41fba:	e7f4      	b.n	41fa6 <z_impl_zsock_close+0x18>

00041fbc <z_impl_zsock_connect>:
{
   41fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   41fbe:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   41fc0:	a903      	add	r1, sp, #12
{
   41fc2:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   41fc4:	f7e1 fe68 	bl	23c98 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   41fc8:	b118      	cbz	r0, 41fd2 <z_impl_zsock_connect+0x16>
   41fca:	9b03      	ldr	r3, [sp, #12]
   41fcc:	9a01      	ldr	r2, [sp, #4]
   41fce:	695b      	ldr	r3, [r3, #20]
   41fd0:	b93b      	cbnz	r3, 41fe2 <z_impl_zsock_connect+0x26>
   41fd2:	f000 fb4e 	bl	42672 <__errno>
   41fd6:	2309      	movs	r3, #9
   41fd8:	6003      	str	r3, [r0, #0]
   41fda:	f04f 30ff 	mov.w	r0, #4294967295
}
   41fde:	b004      	add	sp, #16
   41fe0:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   41fe2:	4621      	mov	r1, r4
   41fe4:	4798      	blx	r3
   41fe6:	e7fa      	b.n	41fde <z_impl_zsock_connect+0x22>

00041fe8 <z_impl_zsock_sendto>:
{
   41fe8:	b530      	push	{r4, r5, lr}
   41fea:	b087      	sub	sp, #28
   41fec:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   41fee:	a905      	add	r1, sp, #20
{
   41ff0:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   41ff4:	f7e1 fe50 	bl	23c98 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   41ff8:	b120      	cbz	r0, 42004 <z_impl_zsock_sendto+0x1c>
   41ffa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   41ffe:	9905      	ldr	r1, [sp, #20]
   42000:	6a0d      	ldr	r5, [r1, #32]
   42002:	b93d      	cbnz	r5, 42014 <z_impl_zsock_sendto+0x2c>
   42004:	f000 fb35 	bl	42672 <__errno>
   42008:	2309      	movs	r3, #9
   4200a:	6003      	str	r3, [r0, #0]
   4200c:	f04f 30ff 	mov.w	r0, #4294967295
}
   42010:	b007      	add	sp, #28
   42012:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   42014:	990b      	ldr	r1, [sp, #44]	; 0x2c
   42016:	9101      	str	r1, [sp, #4]
   42018:	990a      	ldr	r1, [sp, #40]	; 0x28
   4201a:	9100      	str	r1, [sp, #0]
   4201c:	4621      	mov	r1, r4
   4201e:	47a8      	blx	r5
   42020:	e7f6      	b.n	42010 <z_impl_zsock_sendto+0x28>

00042022 <z_impl_zsock_sendmsg>:
{
   42022:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   42024:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   42026:	a903      	add	r1, sp, #12
{
   42028:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   4202a:	f7e1 fe35 	bl	23c98 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   4202e:	b118      	cbz	r0, 42038 <z_impl_zsock_sendmsg+0x16>
   42030:	9b03      	ldr	r3, [sp, #12]
   42032:	9a01      	ldr	r2, [sp, #4]
   42034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   42036:	b93b      	cbnz	r3, 42048 <z_impl_zsock_sendmsg+0x26>
   42038:	f000 fb1b 	bl	42672 <__errno>
   4203c:	2309      	movs	r3, #9
   4203e:	6003      	str	r3, [r0, #0]
   42040:	f04f 30ff 	mov.w	r0, #4294967295
}
   42044:	b004      	add	sp, #16
   42046:	bd10      	pop	{r4, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   42048:	4621      	mov	r1, r4
   4204a:	4798      	blx	r3
   4204c:	e7fa      	b.n	42044 <z_impl_zsock_sendmsg+0x22>

0004204e <z_impl_zsock_recvfrom>:
{
   4204e:	b530      	push	{r4, r5, lr}
   42050:	b087      	sub	sp, #28
   42052:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   42054:	a905      	add	r1, sp, #20
{
   42056:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   4205a:	f7e1 fe1d 	bl	23c98 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   4205e:	b120      	cbz	r0, 4206a <z_impl_zsock_recvfrom+0x1c>
   42060:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   42064:	9905      	ldr	r1, [sp, #20]
   42066:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   42068:	b93d      	cbnz	r5, 4207a <z_impl_zsock_recvfrom+0x2c>
   4206a:	f000 fb02 	bl	42672 <__errno>
   4206e:	2309      	movs	r3, #9
   42070:	6003      	str	r3, [r0, #0]
   42072:	f04f 30ff 	mov.w	r0, #4294967295
}
   42076:	b007      	add	sp, #28
   42078:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   4207a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   4207c:	9101      	str	r1, [sp, #4]
   4207e:	990a      	ldr	r1, [sp, #40]	; 0x28
   42080:	9100      	str	r1, [sp, #0]
   42082:	4621      	mov	r1, r4
   42084:	47a8      	blx	r5
   42086:	e7f6      	b.n	42076 <z_impl_zsock_recvfrom+0x28>

00042088 <z_impl_zsock_getsockopt>:
	return -1;
}

int z_impl_zsock_getsockopt(int sock, int level, int optname,
			    void *optval, socklen_t *optlen)
{
   42088:	b530      	push	{r4, r5, lr}
   4208a:	b087      	sub	sp, #28
   4208c:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   4208e:	a905      	add	r1, sp, #20
{
   42090:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   42094:	f7e1 fe00 	bl	23c98 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   42098:	b120      	cbz	r0, 420a4 <z_impl_zsock_getsockopt+0x1c>
   4209a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   4209e:	9905      	ldr	r1, [sp, #20]
   420a0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   420a2:	b93d      	cbnz	r5, 420b4 <z_impl_zsock_getsockopt+0x2c>
   420a4:	f000 fae5 	bl	42672 <__errno>
   420a8:	2309      	movs	r3, #9
   420aa:	6003      	str	r3, [r0, #0]
   420ac:	f04f 30ff 	mov.w	r0, #4294967295
}
   420b0:	b007      	add	sp, #28
   420b2:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   420b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   420b6:	9100      	str	r1, [sp, #0]
   420b8:	4621      	mov	r1, r4
   420ba:	47a8      	blx	r5
   420bc:	e7f8      	b.n	420b0 <z_impl_zsock_getsockopt+0x28>

000420be <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   420be:	b530      	push	{r4, r5, lr}
   420c0:	b087      	sub	sp, #28
   420c2:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   420c4:	a905      	add	r1, sp, #20
{
   420c6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   420ca:	f7e1 fde5 	bl	23c98 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   420ce:	b120      	cbz	r0, 420da <z_impl_zsock_setsockopt+0x1c>
   420d0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   420d4:	9905      	ldr	r1, [sp, #20]
   420d6:	6acd      	ldr	r5, [r1, #44]	; 0x2c
   420d8:	b93d      	cbnz	r5, 420ea <z_impl_zsock_setsockopt+0x2c>
   420da:	f000 faca 	bl	42672 <__errno>
   420de:	2309      	movs	r3, #9
   420e0:	6003      	str	r3, [r0, #0]
   420e2:	f04f 30ff 	mov.w	r0, #4294967295
}
   420e6:	b007      	add	sp, #28
   420e8:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   420ea:	990a      	ldr	r1, [sp, #40]	; 0x28
   420ec:	9100      	str	r1, [sp, #0]
   420ee:	4621      	mov	r1, r4
   420f0:	47a8      	blx	r5
   420f2:	e7f8      	b.n	420e6 <z_impl_zsock_setsockopt+0x28>

000420f4 <z_impl_flash_write_protection_set>:
						    bool enable)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
   420f4:	6883      	ldr	r3, [r0, #8]
   420f6:	68db      	ldr	r3, [r3, #12]
   420f8:	4718      	bx	r3

000420fa <get_sectors_cb>:
{
   420fa:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   420fc:	6802      	ldr	r2, [r0, #0]
   420fe:	684c      	ldr	r4, [r1, #4]
   42100:	42a2      	cmp	r2, r4
   42102:	d316      	bcc.n	42132 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   42104:	688b      	ldr	r3, [r1, #8]
   42106:	4423      	add	r3, r4
   42108:	429a      	cmp	r2, r3
   4210a:	d206      	bcs.n	4211a <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   4210c:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   42110:	42ab      	cmp	r3, r5
   42112:	d304      	bcc.n	4211e <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   42114:	f06f 030b 	mvn.w	r3, #11
   42118:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   4211a:	2000      	movs	r0, #0
   4211c:	e00a      	b.n	42134 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   4211e:	68cd      	ldr	r5, [r1, #12]
   42120:	1b12      	subs	r2, r2, r4
   42122:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   42126:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   42128:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   4212c:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   4212e:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   42130:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   42132:	2001      	movs	r0, #1
}
   42134:	bd70      	pop	{r4, r5, r6, pc}

00042136 <flash_area_close>:
}
   42136:	4770      	bx	lr

00042138 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   42138:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4213a:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   4213c:	6883      	ldr	r3, [r0, #8]
{
   4213e:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   42140:	428b      	cmp	r3, r1
{
   42142:	460c      	mov	r4, r1
   42144:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   42146:	d310      	bcc.n	4216a <flash_area_read+0x32>
   42148:	1871      	adds	r1, r6, r1
   4214a:	428b      	cmp	r3, r1
   4214c:	d30d      	bcc.n	4216a <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   4214e:	68c0      	ldr	r0, [r0, #12]
   42150:	f7f9 fc6e 	bl	3ba30 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   42154:	6869      	ldr	r1, [r5, #4]
   42156:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   42158:	6883      	ldr	r3, [r0, #8]
   4215a:	9a01      	ldr	r2, [sp, #4]
   4215c:	681c      	ldr	r4, [r3, #0]
   4215e:	4633      	mov	r3, r6
   42160:	46a4      	mov	ip, r4
}
   42162:	b002      	add	sp, #8
   42164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   42168:	4760      	bx	ip
   4216a:	f06f 0015 	mvn.w	r0, #21
   4216e:	b002      	add	sp, #8
   42170:	bd70      	pop	{r4, r5, r6, pc}

00042172 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   42172:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   42176:	4698      	mov	r8, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   42178:	6883      	ldr	r3, [r0, #8]
{
   4217a:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   4217c:	428b      	cmp	r3, r1
{
   4217e:	460d      	mov	r5, r1
   42180:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   42182:	d31c      	bcc.n	421be <flash_area_write+0x4c>
   42184:	4441      	add	r1, r8
   42186:	428b      	cmp	r3, r1
   42188:	d319      	bcc.n	421be <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   4218a:	68c0      	ldr	r0, [r0, #12]
   4218c:	f7f9 fc50 	bl	3ba30 <z_impl_device_get_binding>
   42190:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   42192:	2100      	movs	r1, #0
   42194:	f7ff ffae 	bl	420f4 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   42198:	4604      	mov	r4, r0
   4219a:	b960      	cbnz	r0, 421b6 <flash_area_write+0x44>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   4219c:	6879      	ldr	r1, [r7, #4]
   4219e:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   421a0:	68b3      	ldr	r3, [r6, #8]
   421a2:	4630      	mov	r0, r6
   421a4:	685c      	ldr	r4, [r3, #4]
   421a6:	9a01      	ldr	r2, [sp, #4]
   421a8:	4643      	mov	r3, r8
   421aa:	47a0      	blx	r4
   421ac:	4604      	mov	r4, r0
   421ae:	2101      	movs	r1, #1
   421b0:	4630      	mov	r0, r6
   421b2:	f7ff ff9f 	bl	420f4 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   421b6:	4620      	mov	r0, r4
   421b8:	b002      	add	sp, #8
   421ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   421be:	f06f 0415 	mvn.w	r4, #21
   421c2:	e7f8      	b.n	421b6 <flash_area_write+0x44>

000421c4 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   421c4:	6883      	ldr	r3, [r0, #8]
{
   421c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   421ca:	428b      	cmp	r3, r1
{
   421cc:	4607      	mov	r7, r0
   421ce:	460d      	mov	r5, r1
   421d0:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   421d2:	d31a      	bcc.n	4220a <flash_area_erase+0x46>
   421d4:	440a      	add	r2, r1
   421d6:	4293      	cmp	r3, r2
   421d8:	d317      	bcc.n	4220a <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   421da:	68c0      	ldr	r0, [r0, #12]
   421dc:	f7f9 fc28 	bl	3ba30 <z_impl_device_get_binding>
   421e0:	4606      	mov	r6, r0
   421e2:	2100      	movs	r1, #0
   421e4:	f7ff ff86 	bl	420f4 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   421e8:	4604      	mov	r4, r0
   421ea:	b958      	cbnz	r0, 42204 <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   421ec:	6879      	ldr	r1, [r7, #4]
   421ee:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   421f0:	68b3      	ldr	r3, [r6, #8]
   421f2:	4642      	mov	r2, r8
   421f4:	4630      	mov	r0, r6
   421f6:	689b      	ldr	r3, [r3, #8]
   421f8:	4798      	blx	r3
   421fa:	4604      	mov	r4, r0
   421fc:	2101      	movs	r1, #1
   421fe:	4630      	mov	r0, r6
   42200:	f7ff ff78 	bl	420f4 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   42204:	4620      	mov	r0, r4
   42206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   4220a:	f06f 0415 	mvn.w	r4, #21
   4220e:	e7f9      	b.n	42204 <flash_area_erase+0x40>

00042210 <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
   42210:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   42212:	68c0      	ldr	r0, [r0, #12]
   42214:	f7f9 fc0c 	bl	3ba30 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
   42218:	6883      	ldr	r3, [r0, #8]
   4221a:	691b      	ldr	r3, [r3, #16]
   4221c:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   4221e:	7800      	ldrb	r0, [r0, #0]
   42220:	bd08      	pop	{r3, pc}

00042222 <flash_area_get_device>:
	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   42222:	68c0      	ldr	r0, [r0, #12]
   42224:	f7f9 bc04 	b.w	3ba30 <z_impl_device_get_binding>

00042228 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   42228:	6883      	ldr	r3, [r0, #8]
   4222a:	68db      	ldr	r3, [r3, #12]
   4222c:	4718      	bx	r3

0004222e <flash_get_write_block_size>:
}


extern size_t z_impl_flash_get_write_block_size(const struct device * dev);
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   4222e:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   42230:	6883      	ldr	r3, [r0, #8]
   42232:	691b      	ldr	r3, [r3, #16]
   42234:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   42236:	6800      	ldr	r0, [r0, #0]
   42238:	bd08      	pop	{r3, pc}

0004223a <stream_flash_buffered_write>:
{
   4223a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   4223e:	4688      	mov	r8, r1
   42240:	4616      	mov	r6, r2
   42242:	461f      	mov	r7, r3
	if (!ctx) {
   42244:	4604      	mov	r4, r0
   42246:	2800      	cmp	r0, #0
   42248:	d059      	beq.n	422fe <stream_flash_buffered_write+0xc4>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   4224a:	6882      	ldr	r2, [r0, #8]
   4224c:	6903      	ldr	r3, [r0, #16]
   4224e:	4413      	add	r3, r2
   42250:	6982      	ldr	r2, [r0, #24]
   42252:	4433      	add	r3, r6
   42254:	4293      	cmp	r3, r2
   42256:	d855      	bhi.n	42304 <stream_flash_buffered_write+0xca>
	int processed = 0;
   42258:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   4225a:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
	while ((len - processed) >=
   4225e:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   42262:	eba2 0900 	sub.w	r9, r2, r0
	while ((len - processed) >=
   42266:	45ca      	cmp	sl, r9
   42268:	d239      	bcs.n	422de <stream_flash_buffered_write+0xa4>
	if (processed < len) {
   4226a:	42b5      	cmp	r5, r6
   4226c:	d209      	bcs.n	42282 <stream_flash_buffered_write+0x48>
		memcpy(ctx->buf + ctx->buf_bytes,
   4226e:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   42270:	4652      	mov	r2, sl
   42272:	4418      	add	r0, r3
   42274:	eb08 0105 	add.w	r1, r8, r5
   42278:	f002 fd35 	bl	44ce6 <memcpy>
		ctx->buf_bytes += len - processed;
   4227c:	68a3      	ldr	r3, [r4, #8]
   4227e:	4453      	add	r3, sl
   42280:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   42282:	2f00      	cmp	r7, #0
   42284:	d041      	beq.n	4230a <stream_flash_buffered_write+0xd0>
   42286:	68a0      	ldr	r0, [r4, #8]
   42288:	b330      	cbz	r0, 422d8 <stream_flash_buffered_write+0x9e>
		fill_length = flash_get_write_block_size(ctx->fdev);
   4228a:	68e0      	ldr	r0, [r4, #12]
   4228c:	f7ff ffcf 	bl	4222e <flash_get_write_block_size>
		if (ctx->buf_bytes % fill_length) {
   42290:	68a3      	ldr	r3, [r4, #8]
		fill_length = flash_get_write_block_size(ctx->fdev);
   42292:	4606      	mov	r6, r0
		if (ctx->buf_bytes % fill_length) {
   42294:	fbb3 f5f0 	udiv	r5, r3, r0
   42298:	fb00 3515 	mls	r5, r0, r5, r3
   4229c:	b1b5      	cbz	r5, 422cc <stream_flash_buffered_write+0x92>
					ctx->offset + ctx->bytes_written,
   4229e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
			rc = flash_read(ctx->fdev,
   422a2:	68e0      	ldr	r0, [r4, #12]
					ctx->offset + ctx->bytes_written,
   422a4:	4419      	add	r1, r3
	return api->read(dev, offset, data, len);
   422a6:	6883      	ldr	r3, [r0, #8]
   422a8:	f10d 0207 	add.w	r2, sp, #7
   422ac:	681f      	ldr	r7, [r3, #0]
   422ae:	2301      	movs	r3, #1
   422b0:	47b8      	blx	r7
			if (rc != 0) {
   422b2:	b988      	cbnz	r0, 422d8 <stream_flash_buffered_write+0x9e>
			memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   422b4:	68a3      	ldr	r3, [r4, #8]
   422b6:	6820      	ldr	r0, [r4, #0]
			fill_length -= ctx->buf_bytes % fill_length;
   422b8:	1b75      	subs	r5, r6, r5
__ssp_bos_icheck3(memset, void *, int)
   422ba:	4418      	add	r0, r3
   422bc:	462a      	mov	r2, r5
   422be:	f89d 1007 	ldrb.w	r1, [sp, #7]
   422c2:	f002 fd30 	bl	44d26 <memset>
			ctx->buf_bytes += fill_length;
   422c6:	68a3      	ldr	r3, [r4, #8]
   422c8:	442b      	add	r3, r5
   422ca:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   422cc:	4620      	mov	r0, r4
   422ce:	f7e3 fa41 	bl	25754 <flash_sync>
		ctx->bytes_written -= fill_length;
   422d2:	6923      	ldr	r3, [r4, #16]
   422d4:	1b5d      	subs	r5, r3, r5
   422d6:	6125      	str	r5, [r4, #16]
}
   422d8:	b002      	add	sp, #8
   422da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   422de:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   422e0:	464a      	mov	r2, r9
   422e2:	4418      	add	r0, r3
   422e4:	eb08 0105 	add.w	r1, r8, r5
   422e8:	f002 fcfd 	bl	44ce6 <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   422ec:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
   422ee:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
   422f0:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   422f2:	f7e3 fa2f 	bl	25754 <flash_sync>
		if (rc != 0) {
   422f6:	2800      	cmp	r0, #0
   422f8:	d1ee      	bne.n	422d8 <stream_flash_buffered_write+0x9e>
		processed += buf_empty_bytes;
   422fa:	444d      	add	r5, r9
   422fc:	e7ad      	b.n	4225a <stream_flash_buffered_write+0x20>
		return -EFAULT;
   422fe:	f06f 000d 	mvn.w	r0, #13
   42302:	e7e9      	b.n	422d8 <stream_flash_buffered_write+0x9e>
		return -ENOMEM;
   42304:	f06f 000b 	mvn.w	r0, #11
   42308:	e7e6      	b.n	422d8 <stream_flash_buffered_write+0x9e>
   4230a:	4638      	mov	r0, r7
   4230c:	e7e4      	b.n	422d8 <stream_flash_buffered_write+0x9e>

0004230e <stream_flash_bytes_written>:
}
   4230e:	6900      	ldr	r0, [r0, #16]
   42310:	4770      	bx	lr

00042312 <settings_name_steq>:
{
   42312:	b530      	push	{r4, r5, lr}
	if (next) {
   42314:	b10a      	cbz	r2, 4231a <settings_name_steq+0x8>
		*next = NULL;
   42316:	2300      	movs	r3, #0
   42318:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   4231a:	b190      	cbz	r0, 42342 <settings_name_steq+0x30>
   4231c:	b151      	cbz	r1, 42334 <settings_name_steq+0x22>
   4231e:	3901      	subs	r1, #1
	while ((*key != '\0') && (*key == *name) &&
   42320:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   42324:	4604      	mov	r4, r0
   42326:	f810 3b01 	ldrb.w	r3, [r0], #1
   4232a:	b15d      	cbz	r5, 42344 <settings_name_steq+0x32>
   4232c:	429d      	cmp	r5, r3
   4232e:	d101      	bne.n	42334 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   42330:	2d3d      	cmp	r5, #61	; 0x3d
   42332:	d1f5      	bne.n	42320 <settings_name_steq+0xe>
	return 0;
   42334:	2000      	movs	r0, #0
   42336:	e004      	b.n	42342 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   42338:	2b3d      	cmp	r3, #61	; 0x3d
   4233a:	d008      	beq.n	4234e <settings_name_steq+0x3c>
   4233c:	fab3 f083 	clz	r0, r3
   42340:	0940      	lsrs	r0, r0, #5
}
   42342:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   42344:	2b2f      	cmp	r3, #47	; 0x2f
   42346:	d1f7      	bne.n	42338 <settings_name_steq+0x26>
		if (next) {
   42348:	b10a      	cbz	r2, 4234e <settings_name_steq+0x3c>
			*next = name + 1;
   4234a:	3401      	adds	r4, #1
   4234c:	6014      	str	r4, [r2, #0]
		return 1;
   4234e:	2001      	movs	r0, #1
   42350:	e7f7      	b.n	42342 <settings_name_steq+0x30>

00042352 <settings_line_len_calc>:
{
   42352:	b510      	push	{r4, lr}
   42354:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   42356:	f7da ff81 	bl	1d25c <strlen>
   4235a:	3401      	adds	r4, #1
}
   4235c:	4420      	add	r0, r4
   4235e:	bd10      	pop	{r4, pc}

00042360 <settings_line_raw_read>:
{
   42360:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   42362:	9c04      	ldr	r4, [sp, #16]
   42364:	9401      	str	r4, [sp, #4]
   42366:	2400      	movs	r4, #0
   42368:	9400      	str	r4, [sp, #0]
   4236a:	f7e3 fc73 	bl	25c54 <settings_line_raw_read_until>
}
   4236e:	b002      	add	sp, #8
   42370:	bd10      	pop	{r4, pc}

00042372 <settings_line_read_cb>:
{
   42372:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   42374:	6803      	ldr	r3, [r0, #0]
   42376:	9300      	str	r3, [sp, #0]
   42378:	6840      	ldr	r0, [r0, #4]
   4237a:	ab03      	add	r3, sp, #12
   4237c:	f7ff fff0 	bl	42360 <settings_line_raw_read>
	if (rc == 0) {
   42380:	b918      	cbnz	r0, 4238a <settings_line_read_cb+0x18>
		return len_read;
   42382:	9803      	ldr	r0, [sp, #12]
}
   42384:	b005      	add	sp, #20
   42386:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   4238a:	f04f 30ff 	mov.w	r0, #4294967295
   4238e:	e7f9      	b.n	42384 <settings_line_read_cb+0x12>

00042390 <settings_line_name_read>:
{
   42390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   42392:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   42394:	9301      	str	r3, [sp, #4]
   42396:	f10d 030f 	add.w	r3, sp, #15
   4239a:	9300      	str	r3, [sp, #0]
   4239c:	4613      	mov	r3, r2
   4239e:	460a      	mov	r2, r1
   423a0:	4601      	mov	r1, r0
   423a2:	2000      	movs	r0, #0
	char const until_char = '=';
   423a4:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   423a8:	f7e3 fc54 	bl	25c54 <settings_line_raw_read_until>
}
   423ac:	b004      	add	sp, #16
   423ae:	bd10      	pop	{r4, pc}

000423b0 <settings_line_dup_check_cb>:
{
   423b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   423b4:	460f      	mov	r7, r1
   423b6:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   423b8:	6819      	ldr	r1, [r3, #0]
{
   423ba:	4690      	mov	r8, r2
   423bc:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   423be:	f7da ff43 	bl	1d248 <strcmp>
   423c2:	4606      	mov	r6, r0
   423c4:	b940      	cbnz	r0, 423d8 <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   423c6:	4639      	mov	r1, r7
   423c8:	4640      	mov	r0, r8
   423ca:	f7e3 fd03 	bl	25dd4 <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   423ce:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   423d0:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   423d2:	4283      	cmp	r3, r0
   423d4:	d004      	beq.n	423e0 <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   423d6:	60e6      	str	r6, [r4, #12]
}
   423d8:	2000      	movs	r0, #0
   423da:	b008      	add	sp, #32
   423dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   423e0:	b913      	cbnz	r3, 423e8 <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   423e2:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   423e4:	60e3      	str	r3, [r4, #12]
   423e6:	e7f7      	b.n	423d8 <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   423e8:	f8d4 a004 	ldr.w	sl, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   423ec:	2d10      	cmp	r5, #16
   423ee:	46a9      	mov	r9, r5
   423f0:	bf28      	it	cs
   423f2:	f04f 0910 	movcs.w	r9, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   423f6:	9700      	str	r7, [sp, #0]
   423f8:	464a      	mov	r2, r9
   423fa:	ab03      	add	r3, sp, #12
   423fc:	a904      	add	r1, sp, #16
   423fe:	eb08 0006 	add.w	r0, r8, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   42402:	f8cd 900c 	str.w	r9, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   42406:	f7ff ffab 	bl	42360 <settings_line_raw_read>
		if (rc) {
   4240a:	b970      	cbnz	r0, 4242a <settings_line_dup_check_cb+0x7a>
		if (len_read != exp_len) {
   4240c:	9b03      	ldr	r3, [sp, #12]
   4240e:	4599      	cmp	r9, r3
   42410:	d10b      	bne.n	4242a <settings_line_dup_check_cb+0x7a>
		rc = memcmp(val, buf, len_read);
   42412:	464a      	mov	r2, r9
   42414:	4650      	mov	r0, sl
   42416:	a904      	add	r1, sp, #16
   42418:	f002 fc57 	bl	44cca <memcmp>
		if (rc) {
   4241c:	b928      	cbnz	r0, 4242a <settings_line_dup_check_cb+0x7a>
		val += len_read;
   4241e:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   42420:	1aed      	subs	r5, r5, r3
		val += len_read;
   42422:	449a      	add	sl, r3
		off += len_read;
   42424:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   42426:	d1e1      	bne.n	423ec <settings_line_dup_check_cb+0x3c>
   42428:	e7db      	b.n	423e2 <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   4242a:	2300      	movs	r3, #0
   4242c:	e7da      	b.n	423e4 <settings_line_dup_check_cb+0x34>

0004242e <get_len_cb>:
}
   4242e:	8980      	ldrh	r0, [r0, #12]
   42430:	4770      	bx	lr

00042432 <write_handler>:
{
   42432:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   42434:	6804      	ldr	r4, [r0, #0]
   42436:	6885      	ldr	r5, [r0, #8]
   42438:	6824      	ldr	r4, [r4, #0]
   4243a:	4429      	add	r1, r5
	return flash_area_write(entry_ctx->fap,
   4243c:	4421      	add	r1, r4
   4243e:	6900      	ldr	r0, [r0, #16]
}
   42440:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   42442:	f7ff be96 	b.w	42172 <flash_area_write>

00042446 <read_handler>:
{
   42446:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   42448:	8984      	ldrh	r4, [r0, #12]
   4244a:	428c      	cmp	r4, r1
   4244c:	dc03      	bgt.n	42456 <read_handler+0x10>
}
   4244e:	bc30      	pop	{r4, r5}
		*len = 0;
   42450:	2000      	movs	r0, #0
   42452:	6018      	str	r0, [r3, #0]
}
   42454:	4770      	bx	lr
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   42456:	681d      	ldr	r5, [r3, #0]
   42458:	440d      	add	r5, r1
   4245a:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   4245c:	bf84      	itt	hi
   4245e:	1a64      	subhi	r4, r4, r1
   42460:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   42462:	6804      	ldr	r4, [r0, #0]
   42464:	6885      	ldr	r5, [r0, #8]
   42466:	6824      	ldr	r4, [r4, #0]
   42468:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   4246a:	4421      	add	r1, r4
   4246c:	681b      	ldr	r3, [r3, #0]
   4246e:	6900      	ldr	r0, [r0, #16]
}
   42470:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   42472:	f7ff be61 	b.w	42138 <flash_area_read>

00042476 <uart_poll_out>:
	api->poll_out(dev, out_char);
   42476:	6883      	ldr	r3, [r0, #8]
   42478:	685b      	ldr	r3, [r3, #4]
   4247a:	4718      	bx	r3

0004247c <debug_hook_out_nop>:
}
   4247c:	2000      	movs	r0, #0
   4247e:	4770      	bx	lr

00042480 <set_starting_state>:
{
   42480:	b510      	push	{r4, lr}
	__asm__ volatile(
   42482:	f04f 0320 	mov.w	r3, #32
   42486:	f3ef 8211 	mrs	r2, BASEPRI
   4248a:	f383 8811 	msr	BASEPRI, r3
   4248e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   42492:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   42494:	f003 0407 	and.w	r4, r3, #7
   42498:	2c01      	cmp	r4, #1
   4249a:	d106      	bne.n	424aa <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   4249c:	6001      	str	r1, [r0, #0]
	int err = 0;
   4249e:	2000      	movs	r0, #0
	__asm__ volatile(
   424a0:	f382 8811 	msr	BASEPRI, r2
   424a4:	f3bf 8f6f 	isb	sy
}
   424a8:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   424aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   424ae:	428b      	cmp	r3, r1
		err = -EBUSY;
   424b0:	bf14      	ite	ne
   424b2:	f04f 30ff 	movne.w	r0, #4294967295
   424b6:	f06f 000f 	mvneq.w	r0, #15
   424ba:	e7f1      	b.n	424a0 <set_starting_state+0x20>

000424bc <set_on_state>:
	__asm__ volatile(
   424bc:	f04f 0320 	mov.w	r3, #32
   424c0:	f3ef 8211 	mrs	r2, BASEPRI
   424c4:	f383 8811 	msr	BASEPRI, r3
   424c8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   424cc:	6803      	ldr	r3, [r0, #0]
   424ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   424d2:	f043 0302 	orr.w	r3, r3, #2
   424d6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   424d8:	f382 8811 	msr	BASEPRI, r2
   424dc:	f3bf 8f6f 	isb	sy
}
   424e0:	4770      	bx	lr

000424e2 <onoff_started_callback>:
	return &data->mgr[type];
   424e2:	68c0      	ldr	r0, [r0, #12]
   424e4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   424e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   424ea:	2100      	movs	r1, #0
   424ec:	4710      	bx	r2

000424ee <api_stop>:
	return stop(dev, subsys, CTX_API);
   424ee:	2280      	movs	r2, #128	; 0x80
   424f0:	f7e3 bf20 	b.w	26334 <stop>

000424f4 <blocking_start_callback>:
{
   424f4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   424f6:	f7fb baff 	b.w	3daf8 <z_impl_k_sem_give>

000424fa <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   424fa:	2000      	movs	r0, #0
   424fc:	f7f9 b842 	b.w	3b584 <nrfx_clock_stop>

00042500 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   42500:	2000      	movs	r0, #0
   42502:	f7f8 bfe9 	b.w	3b4d8 <nrfx_clock_start>

00042506 <api_start>:
{
   42506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   42508:	240c      	movs	r4, #12
   4250a:	b2c9      	uxtb	r1, r1
   4250c:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   4250e:	68c5      	ldr	r5, [r0, #12]
{
   42510:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   42512:	f104 0048 	add.w	r0, r4, #72	; 0x48
   42516:	2180      	movs	r1, #128	; 0x80
   42518:	4428      	add	r0, r5
{
   4251a:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   4251c:	f7ff ffb0 	bl	42480 <set_starting_state>
	if (err < 0) {
   42520:	2800      	cmp	r0, #0
   42522:	db08      	blt.n	42536 <api_start+0x30>
	subdata->cb = data->cb;
   42524:	687b      	ldr	r3, [r7, #4]
   42526:	4425      	add	r5, r4
   42528:	642b      	str	r3, [r5, #64]	; 0x40
	subdata->user_data = data->user_data;
   4252a:	68bb      	ldr	r3, [r7, #8]
   4252c:	646b      	str	r3, [r5, #68]	; 0x44
	 get_sub_config(dev, type)->start();
   4252e:	6873      	ldr	r3, [r6, #4]
   42530:	591b      	ldr	r3, [r3, r4]
   42532:	4798      	blx	r3
	return 0;
   42534:	2000      	movs	r0, #0
}
   42536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00042538 <wdt_nrf_disable>:
}
   42538:	f04f 30ff 	mov.w	r0, #4294967295
   4253c:	4770      	bx	lr

0004253e <wdt_nrf_feed>:
{
   4253e:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   42540:	68c3      	ldr	r3, [r0, #12]
   42542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   42546:	428b      	cmp	r3, r1
   42548:	db05      	blt.n	42556 <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   4254a:	6840      	ldr	r0, [r0, #4]
   4254c:	b2c9      	uxtb	r1, r1
   4254e:	f7f9 f9fd 	bl	3b94c <nrfx_wdt_channel_feed>
	return 0;
   42552:	2000      	movs	r0, #0
}
   42554:	bd08      	pop	{r3, pc}
		return -EINVAL;
   42556:	f06f 0015 	mvn.w	r0, #21
   4255a:	e7fb      	b.n	42554 <wdt_nrf_feed+0x16>

0004255c <wdt_nrf_setup>:
{
   4255c:	b538      	push	{r3, r4, r5, lr}
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   4255e:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   42560:	f001 0301 	and.w	r3, r1, #1
   42564:	f1c3 0309 	rsb	r3, r3, #9
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   42568:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   4256a:	6825      	ldr	r5, [r4, #0]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   4256c:	b2db      	uxtb	r3, r3
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   4256e:	bf48      	it	mi
   42570:	f003 03f7 	andmi.w	r3, r3, #247	; 0xf7
    p_reg->CONFIG = behaviour;
   42574:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   42578:	68c3      	ldr	r3, [r0, #12]
			   / 1000));
   4257a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   4257e:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   42580:	2300      	movs	r3, #0
   42582:	03c8      	lsls	r0, r1, #15
   42584:	0c49      	lsrs	r1, r1, #17
   42586:	f7da fc99 	bl	1cebc <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   4258a:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   4258e:	4620      	mov	r0, r4
   42590:	f7f9 f95e 	bl	3b850 <nrfx_wdt_enable>
}
   42594:	2000      	movs	r0, #0
   42596:	bd38      	pop	{r3, r4, r5, pc}

00042598 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   42598:	4770      	bx	lr

0004259a <sys_clock_disable>:
   4259a:	4770      	bx	lr

0004259c <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   4259c:	b510      	push	{r4, lr}
   4259e:	b40f      	push	{r0, r1, r2, r3}
   425a0:	f7fa fa26 	bl	3c9f0 <k_sched_lock>
   425a4:	bc0f      	pop	{r0, r1, r2, r3}
   425a6:	f7d5 fd1f 	bl	17fe8 <spm_request_random_number_nse>
   425aa:	b40f      	push	{r0, r1, r2, r3}
   425ac:	f7fa fb36 	bl	3cc1c <k_sched_unlock>
   425b0:	bc0f      	pop	{r0, r1, r2, r3}
   425b2:	bd10      	pop	{r4, pc}

000425b4 <spm_request_read>:
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   425b4:	b510      	push	{r4, lr}
   425b6:	b40f      	push	{r0, r1, r2, r3}
   425b8:	f7fa fa1a 	bl	3c9f0 <k_sched_lock>
   425bc:	bc0f      	pop	{r0, r1, r2, r3}
   425be:	f7d5 fd17 	bl	17ff0 <spm_request_read_nse>
   425c2:	b40f      	push	{r0, r1, r2, r3}
   425c4:	f7fa fb2a 	bl	3cc1c <k_sched_unlock>
   425c8:	bc0f      	pop	{r0, r1, r2, r3}
   425ca:	bd10      	pop	{r4, pc}

000425cc <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   425cc:	2100      	movs	r1, #0
   425ce:	2001      	movs	r0, #1
   425d0:	f7e4 bb6a 	b.w	26ca8 <z_arm_fatal_error>

000425d4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   425d4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   425d6:	f383 880b 	msr	PSPLIM, r3
}
   425da:	4770      	bx	lr

000425dc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   425dc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   425de:	6800      	ldr	r0, [r0, #0]
   425e0:	f7e4 bb62 	b.w	26ca8 <z_arm_fatal_error>

000425e4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   425e4:	b508      	push	{r3, lr}
	handler();
   425e6:	f7e4 fc83 	bl	26ef0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   425ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   425ee:	f7e4 bcc5 	b.w	26f7c <z_arm_exc_exit>

000425f2 <mpu_configure_region>:
{
   425f2:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   425f4:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   425f6:	680c      	ldr	r4, [r1, #0]
{
   425f8:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   425fa:	890a      	ldrh	r2, [r1, #8]
   425fc:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   425fe:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   42600:	3b01      	subs	r3, #1
   42602:	f024 041f 	bic.w	r4, r4, #31
   42606:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   42608:	f002 021f 	and.w	r2, r2, #31
   4260c:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   42610:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   42614:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   42616:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   4261a:	9303      	str	r3, [sp, #12]
   4261c:	f7e4 ff96 	bl	2754c <region_allocate_and_init>
}
   42620:	b005      	add	sp, #20
   42622:	bd30      	pop	{r4, r5, pc}

00042624 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   42624:	e840 f000 	tt	r0, r0
   42628:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   4262a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   4262e:	bf14      	ite	ne
   42630:	4618      	movne	r0, r3
   42632:	f06f 0015 	mvneq.w	r0, #21
   42636:	4770      	bx	lr

00042638 <_stdout_hook_default>:
}
   42638:	f04f 30ff 	mov.w	r0, #4294967295
   4263c:	4770      	bx	lr

0004263e <_stdin_hook_default>:
}
   4263e:	2000      	movs	r0, #0
   42640:	4770      	bx	lr

00042642 <_read>:
{
   42642:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   42644:	4611      	mov	r1, r2
   42646:	f7e5 b953 	b.w	278f0 <z_impl_zephyr_read_stdin>

0004264a <_write>:
{
   4264a:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   4264c:	4611      	mov	r1, r2
   4264e:	f7e5 b963 	b.w	27918 <z_impl_zephyr_write_stdout>

00042652 <_close>:
   42652:	f04f 30ff 	mov.w	r0, #4294967295
   42656:	4770      	bx	lr

00042658 <_lseek>:
}
   42658:	2000      	movs	r0, #0
   4265a:	4770      	bx	lr

0004265c <_isatty>:
}
   4265c:	2001      	movs	r0, #1
   4265e:	4770      	bx	lr

00042660 <_kill>:
}
   42660:	2000      	movs	r0, #0
   42662:	4770      	bx	lr

00042664 <_getpid>:
}
   42664:	2000      	movs	r0, #0
   42666:	4770      	bx	lr

00042668 <_fstat>:
	st->st_mode = S_IFCHR;
   42668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   4266c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   4266e:	604b      	str	r3, [r1, #4]
}
   42670:	4770      	bx	lr

00042672 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   42672:	f7f9 ba05 	b.w	3ba80 <z_impl_z_errno>

00042676 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   42676:	b508      	push	{r3, lr}
	net_if_init();
   42678:	f7e5 fa24 	bl	27ac4 <net_if_init>
	net_if_post_init();
   4267c:	f7e5 fa56 	bl	27b2c <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   42680:	2000      	movs	r0, #0
   42682:	bd08      	pop	{r3, pc}

00042684 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   42684:	b110      	cbz	r0, 4268c <net_if_l2+0x8>
   42686:	6800      	ldr	r0, [r0, #0]
   42688:	b100      	cbz	r0, 4268c <net_if_l2+0x8>
	return iface->if_dev->l2;
   4268a:	6840      	ldr	r0, [r0, #4]
}
   4268c:	4770      	bx	lr

0004268e <l2_flags_get>:
{
   4268e:	b510      	push	{r4, lr}
   42690:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   42692:	f7ff fff7 	bl	42684 <net_if_l2>
   42696:	b128      	cbz	r0, 426a4 <l2_flags_get+0x16>
   42698:	68c2      	ldr	r2, [r0, #12]
   4269a:	b11a      	cbz	r2, 426a4 <l2_flags_get+0x16>
}
   4269c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   426a0:	4618      	mov	r0, r3
   426a2:	4710      	bx	r2
}
   426a4:	2000      	movs	r0, #0
   426a6:	bd10      	pop	{r4, pc}

000426a8 <net_byte_to_hex>:
{
   426a8:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   426aa:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   426ac:	b1bb      	cbz	r3, 426de <net_byte_to_hex+0x36>
		if (val < 10) {
   426ae:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   426b0:	b26b      	sxtb	r3, r5
   426b2:	bf86      	itte	hi
   426b4:	f1a2 050a 	subhi.w	r5, r2, #10
   426b8:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   426ba:	3330      	addls	r3, #48	; 0x30
   426bc:	1c44      	adds	r4, r0, #1
   426be:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   426c0:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   426c4:	4619      	mov	r1, r3
   426c6:	2b09      	cmp	r3, #9
	*ptr = '\0';
   426c8:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   426cc:	bf83      	ittte	hi
   426ce:	3a0a      	subhi	r2, #10
   426d0:	1889      	addhi	r1, r1, r2
   426d2:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   426d4:	3130      	addls	r1, #48	; 0x30
   426d6:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   426d8:	7063      	strb	r3, [r4, #1]
   426da:	1c60      	adds	r0, r4, #1
}
   426dc:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   426de:	2d00      	cmp	r5, #0
   426e0:	d1e5      	bne.n	426ae <net_byte_to_hex+0x6>
   426e2:	4604      	mov	r4, r0
   426e4:	e7ec      	b.n	426c0 <net_byte_to_hex+0x18>

000426e6 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   426e6:	e9d0 2300 	ldrd	r2, r3, [r0]
   426ea:	1a9b      	subs	r3, r3, r2
   426ec:	2b01      	cmp	r3, #1
{
   426ee:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   426f0:	d90c      	bls.n	4270c <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   426f2:	4614      	mov	r4, r2
   426f4:	1c53      	adds	r3, r2, #1
   426f6:	6003      	str	r3, [r0, #0]
   426f8:	f814 3b02 	ldrb.w	r3, [r4], #2
   426fc:	021b      	lsls	r3, r3, #8
   426fe:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   42700:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   42702:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   42704:	7852      	ldrb	r2, [r2, #1]
   42706:	4313      	orrs	r3, r2
   42708:	800b      	strh	r3, [r1, #0]
}
   4270a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   4270c:	f06f 0015 	mvn.w	r0, #21
   42710:	e7fb      	b.n	4270a <unpack_uint16+0x24>

00042712 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   42712:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   42714:	e9d0 3400 	ldrd	r3, r4, [r0]
   42718:	429c      	cmp	r4, r3
   4271a:	d01f      	beq.n	4275c <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   4271c:	1c5c      	adds	r4, r3, #1
   4271e:	6004      	str	r4, [r0, #0]
   42720:	781b      	ldrb	r3, [r3, #0]
   42722:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   42724:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   42726:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   42728:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   4272a:	6804      	ldr	r4, [r0, #0]
   4272c:	42bc      	cmp	r4, r7
   4272e:	d218      	bcs.n	42762 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   42730:	4625      	mov	r5, r4
   42732:	f815 3b01 	ldrb.w	r3, [r5], #1
   42736:	6816      	ldr	r6, [r2, #0]
   42738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   4273c:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   4273e:	4433      	add	r3, r6
   42740:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   42742:	6005      	str	r5, [r0, #0]
   42744:	f994 4000 	ldrsb.w	r4, [r4]
   42748:	2c00      	cmp	r4, #0
   4274a:	db04      	blt.n	42756 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   4274c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   42750:	d204      	bcs.n	4275c <fixed_header_decode+0x4a>
	return 0;
   42752:	2000      	movs	r0, #0
   42754:	e004      	b.n	42760 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   42756:	3107      	adds	r1, #7
   42758:	291c      	cmp	r1, #28
   4275a:	d1e6      	bne.n	4272a <fixed_header_decode+0x18>
		return -EINVAL;
   4275c:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   42760:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   42762:	f06f 000a 	mvn.w	r0, #10
   42766:	e7fb      	b.n	42760 <fixed_header_decode+0x4e>

00042768 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   42768:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   4276a:	e9d1 3500 	ldrd	r3, r5, [r1]
   4276e:	429d      	cmp	r5, r3
   42770:	d102      	bne.n	42778 <connect_ack_decode+0x10>
		return -EINVAL;
   42772:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   42776:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   42778:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   4277a:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   4277c:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   4277e:	d0f8      	beq.n	42772 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   42780:	461d      	mov	r5, r3
   42782:	f815 4b02 	ldrb.w	r4, [r5], #2
   42786:	600d      	str	r5, [r1, #0]
   42788:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   4278a:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
	return 0;
   4278e:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   42790:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   42792:	bf04      	itt	eq
   42794:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   42798:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   4279a:	7051      	strb	r1, [r2, #1]
	return 0;
   4279c:	e7eb      	b.n	42776 <connect_ack_decode+0xe>

0004279e <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   4279e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   427a2:	461c      	mov	r4, r3
   427a4:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   427a6:	7da2      	ldrb	r2, [r4, #22]
   427a8:	0043      	lsls	r3, r0, #1
   427aa:	f022 0203 	bic.w	r2, r2, #3
   427ae:	f003 0302 	and.w	r3, r3, #2
   427b2:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   427b4:	f3c0 0041 	ubfx	r0, r0, #1, #2
   427b8:	7220      	strb	r0, [r4, #8]
{
   427ba:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   427bc:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   427be:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   427c0:	f10d 0106 	add.w	r1, sp, #6
   427c4:	f7ff ff8f 	bl	426e6 <unpack_uint16>
	if (err_code != 0) {
   427c8:	4606      	mov	r6, r0
   427ca:	b9c0      	cbnz	r0, 427fe <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   427cc:	683b      	ldr	r3, [r7, #0]
   427ce:	687a      	ldr	r2, [r7, #4]
   427d0:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   427d4:	1ad2      	subs	r2, r2, r3
   427d6:	42aa      	cmp	r2, r5
   427d8:	da02      	bge.n	427e0 <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   427da:	f06f 0615 	mvn.w	r6, #21
   427de:	e00e      	b.n	427fe <publish_decode+0x60>
	str->size = utf8_strlen;
   427e0:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   427e2:	b185      	cbz	r5, 42806 <publish_decode+0x68>
		str->utf8 = buf->cur;
   427e4:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   427e6:	442b      	add	r3, r5
   427e8:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   427ea:	7a23      	ldrb	r3, [r4, #8]
   427ec:	b96b      	cbnz	r3, 4280a <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   427ee:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   427f0:	4545      	cmp	r5, r8
   427f2:	d8f2      	bhi.n	427da <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   427f4:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   427f6:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   427fa:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   427fc:	6125      	str	r5, [r4, #16]

	return 0;
}
   427fe:	4630      	mov	r0, r6
   42800:	b002      	add	sp, #8
   42802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   42806:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   42808:	e7ef      	b.n	427ea <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   4280a:	4638      	mov	r0, r7
   4280c:	f104 0114 	add.w	r1, r4, #20
   42810:	f7ff ff69 	bl	426e6 <unpack_uint16>
		if (err_code != 0) {
   42814:	b908      	cbnz	r0, 4281a <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   42816:	3504      	adds	r5, #4
   42818:	e7ea      	b.n	427f0 <publish_decode+0x52>
   4281a:	4606      	mov	r6, r0
   4281c:	e7ef      	b.n	427fe <publish_decode+0x60>

0004281e <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   4281e:	f7ff bf62 	b.w	426e6 <unpack_uint16>

00042822 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   42822:	f7ff bf60 	b.w	426e6 <unpack_uint16>

00042826 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   42826:	f7ff bf5e 	b.w	426e6 <unpack_uint16>

0004282a <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   4282a:	f7ff bf5c 	b.w	426e6 <unpack_uint16>

0004282e <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   4282e:	b538      	push	{r3, r4, r5, lr}
   42830:	4605      	mov	r5, r0
   42832:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   42834:	f7ff ff57 	bl	426e6 <unpack_uint16>
	if (err_code != 0) {
   42838:	b930      	cbnz	r0, 42848 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   4283a:	e9d5 2300 	ldrd	r2, r3, [r5]
   4283e:	1a99      	subs	r1, r3, r2
	str->len = length;
   42840:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   42842:	b111      	cbz	r1, 4284a <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   42844:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   42846:	602b      	str	r3, [r5, #0]
}
   42848:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   4284a:	6060      	str	r0, [r4, #4]
   4284c:	e7fc      	b.n	42848 <subscribe_ack_decode+0x1a>

0004284e <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   4284e:	f7ff bf4a 	b.w	426e6 <unpack_uint16>

00042852 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   42852:	e9d1 3200 	ldrd	r3, r2, [r1]
   42856:	1ad2      	subs	r2, r2, r3
   42858:	2a01      	cmp	r2, #1
   4285a:	d909      	bls.n	42870 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   4285c:	1c5a      	adds	r2, r3, #1
   4285e:	600a      	str	r2, [r1, #0]
   42860:	0a02      	lsrs	r2, r0, #8
   42862:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   42864:	680b      	ldr	r3, [r1, #0]
   42866:	1c5a      	adds	r2, r3, #1
   42868:	600a      	str	r2, [r1, #0]
   4286a:	7018      	strb	r0, [r3, #0]
	return 0;
   4286c:	2000      	movs	r0, #0
   4286e:	4770      	bx	lr
		return -ENOMEM;
   42870:	f06f 000b 	mvn.w	r0, #11
}
   42874:	4770      	bx	lr

00042876 <pack_utf8_str>:
{
   42876:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   42878:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   4287c:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   4287e:	6840      	ldr	r0, [r0, #4]
   42880:	1a9b      	subs	r3, r3, r2
   42882:	1c82      	adds	r2, r0, #2
   42884:	4293      	cmp	r3, r2
{
   42886:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   42888:	d30d      	bcc.n	428a6 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   4288a:	b280      	uxth	r0, r0
   4288c:	f7ff ffe1 	bl	42852 <pack_uint16>
   42890:	e9d5 1200 	ldrd	r1, r2, [r5]
   42894:	6820      	ldr	r0, [r4, #0]
   42896:	f002 fa26 	bl	44ce6 <memcpy>
	return 0;
   4289a:	2000      	movs	r0, #0
	buf->cur += str->size;
   4289c:	6823      	ldr	r3, [r4, #0]
   4289e:	686a      	ldr	r2, [r5, #4]
   428a0:	4413      	add	r3, r2
   428a2:	6023      	str	r3, [r4, #0]
}
   428a4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   428a6:	f06f 000b 	mvn.w	r0, #11
   428aa:	e7fb      	b.n	428a4 <pack_utf8_str+0x2e>

000428ac <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   428ac:	6813      	ldr	r3, [r2, #0]
{
   428ae:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   428b0:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   428b2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   428b6:	d227      	bcs.n	42908 <mqtt_encode_fixed_header+0x5c>
   428b8:	4625      	mov	r5, r4
   428ba:	2600      	movs	r6, #0
	} while (length > 0);
   428bc:	09ed      	lsrs	r5, r5, #7
   428be:	b2f3      	uxtb	r3, r6
   428c0:	f106 0601 	add.w	r6, r6, #1
   428c4:	d1fa      	bne.n	428bc <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   428c6:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   428c8:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   428ca:	b2db      	uxtb	r3, r3
   428cc:	425d      	negs	r5, r3
   428ce:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   428d0:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   428d2:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   428d4:	bf1e      	ittt	ne
   428d6:	3301      	addne	r3, #1
   428d8:	6013      	strne	r3, [r2, #0]
   428da:	5548      	strbne	r0, [r1, r5]
	return 0;
   428dc:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   428de:	6813      	ldr	r3, [r2, #0]
   428e0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   428e4:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   428e6:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   428e8:	bf1f      	itttt	ne
   428ea:	6811      	ldrne	r1, [r2, #0]
   428ec:	780b      	ldrbne	r3, [r1, #0]
   428ee:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   428f2:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   428f4:	6813      	ldr	r3, [r2, #0]
   428f6:	3301      	adds	r3, #1
   428f8:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   428fa:	2800      	cmp	r0, #0
   428fc:	d1ef      	bne.n	428de <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   428fe:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   42900:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   42902:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   42904:	6053      	str	r3, [r2, #4]
}
   42906:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   42908:	f06f 0079 	mvn.w	r0, #121	; 0x79
   4290c:	e7fb      	b.n	42906 <mqtt_encode_fixed_header+0x5a>

0004290e <mqtt_message_id_only_enc>:
{
   4290e:	b570      	push	{r4, r5, r6, lr}
   42910:	4606      	mov	r6, r0
   42912:	4614      	mov	r4, r2
	if (message_id == 0U) {
   42914:	4608      	mov	r0, r1
   42916:	b169      	cbz	r1, 42934 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   42918:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   4291a:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   4291c:	3505      	adds	r5, #5
   4291e:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   42920:	f7ff ff97 	bl	42852 <pack_uint16>
	if (err_code != 0) {
   42924:	b940      	cbnz	r0, 42938 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   42926:	4622      	mov	r2, r4
   42928:	4629      	mov	r1, r5
   4292a:	4630      	mov	r0, r6
}
   4292c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   42930:	f7ff bfbc 	b.w	428ac <mqtt_encode_fixed_header>
		return -EINVAL;
   42934:	f06f 0015 	mvn.w	r0, #21
}
   42938:	bd70      	pop	{r4, r5, r6, pc}

0004293a <publish_encode>:
{
   4293a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   4293e:	7d87      	ldrb	r7, [r0, #22]
   42940:	7a04      	ldrb	r4, [r0, #8]
   42942:	f007 0801 	and.w	r8, r7, #1
{
   42946:	4605      	mov	r5, r0
   42948:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   4294a:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   4294e:	b10c      	cbz	r4, 42954 <publish_encode+0x1a>
   42950:	8a83      	ldrh	r3, [r0, #20]
   42952:	b383      	cbz	r3, 429b6 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   42954:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   42958:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   4295a:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   4295c:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   4295e:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   42962:	f7ff ff88 	bl	42876 <pack_utf8_str>
	if (err_code != 0) {
   42966:	b9b0      	cbnz	r0, 42996 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   42968:	7a2b      	ldrb	r3, [r5, #8]
   4296a:	b9b3      	cbnz	r3, 4299a <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   4296c:	0060      	lsls	r0, r4, #1
   4296e:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   42972:	692a      	ldr	r2, [r5, #16]
   42974:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   42978:	4338      	orrs	r0, r7
   4297a:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   4297e:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   42980:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   42984:	464a      	mov	r2, r9
   42986:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   42988:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   4298c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   42990:	f7ff ff8c 	bl	428ac <mqtt_encode_fixed_header>
	if (err_code != 0) {
   42994:	b140      	cbz	r0, 429a8 <publish_encode+0x6e>
}
   42996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   4299a:	4649      	mov	r1, r9
   4299c:	8aa8      	ldrh	r0, [r5, #20]
   4299e:	f7ff ff58 	bl	42852 <pack_uint16>
		if (err_code != 0) {
   429a2:	2800      	cmp	r0, #0
   429a4:	d0e2      	beq.n	4296c <publish_encode+0x32>
   429a6:	e7f6      	b.n	42996 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   429a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   429ac:	692a      	ldr	r2, [r5, #16]
   429ae:	1a9b      	subs	r3, r3, r2
   429b0:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   429b4:	e7ef      	b.n	42996 <publish_encode+0x5c>
		return -EINVAL;
   429b6:	f06f 0015 	mvn.w	r0, #21
   429ba:	e7ec      	b.n	42996 <publish_encode+0x5c>

000429bc <publish_ack_encode>:
{
   429bc:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   429be:	8801      	ldrh	r1, [r0, #0]
   429c0:	2040      	movs	r0, #64	; 0x40
   429c2:	f7ff bfa4 	b.w	4290e <mqtt_message_id_only_enc>

000429c6 <subscribe_encode>:
{
   429c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   429ca:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   429cc:	88c0      	ldrh	r0, [r0, #6]
{
   429ce:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   429d0:	b330      	cbz	r0, 42a20 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   429d2:	680f      	ldr	r7, [r1, #0]
   429d4:	3705      	adds	r7, #5
   429d6:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   429d8:	f7ff ff3b 	bl	42852 <pack_uint16>
	if (err_code != 0) {
   429dc:	4604      	mov	r4, r0
   429de:	bb08      	cbnz	r0, 42a24 <subscribe_encode+0x5e>
   429e0:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   429e4:	88b3      	ldrh	r3, [r6, #4]
   429e6:	42a3      	cmp	r3, r4
   429e8:	dc06      	bgt.n	429f8 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   429ea:	462a      	mov	r2, r5
   429ec:	4639      	mov	r1, r7
}
   429ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   429f2:	2082      	movs	r0, #130	; 0x82
   429f4:	f7ff bf5a 	b.w	428ac <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   429f8:	fb08 f904 	mul.w	r9, r8, r4
   429fc:	6830      	ldr	r0, [r6, #0]
   429fe:	4629      	mov	r1, r5
   42a00:	4448      	add	r0, r9
   42a02:	f7ff ff38 	bl	42876 <pack_utf8_str>
		if (err_code != 0) {
   42a06:	b980      	cbnz	r0, 42a2a <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   42a08:	6833      	ldr	r3, [r6, #0]
   42a0a:	444b      	add	r3, r9
   42a0c:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   42a0e:	e9d5 3100 	ldrd	r3, r1, [r5]
   42a12:	4299      	cmp	r1, r3
   42a14:	d00b      	beq.n	42a2e <subscribe_encode+0x68>
	*(buf->cur++) = val;
   42a16:	1c59      	adds	r1, r3, #1
   42a18:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   42a1a:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   42a1c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   42a1e:	e7e1      	b.n	429e4 <subscribe_encode+0x1e>
		return -EINVAL;
   42a20:	f06f 0415 	mvn.w	r4, #21
}
   42a24:	4620      	mov	r0, r4
   42a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   42a2a:	4604      	mov	r4, r0
   42a2c:	e7fa      	b.n	42a24 <subscribe_encode+0x5e>
		return -ENOMEM;
   42a2e:	f06f 040b 	mvn.w	r4, #11
   42a32:	e7f7      	b.n	42a24 <subscribe_encode+0x5e>

00042a34 <unsubscribe_encode>:
{
   42a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   42a38:	680f      	ldr	r7, [r1, #0]
{
   42a3a:	4606      	mov	r6, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   42a3c:	3705      	adds	r7, #5
	err_code = pack_uint16(param->message_id, buf);
   42a3e:	88c0      	ldrh	r0, [r0, #6]
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   42a40:	600f      	str	r7, [r1, #0]
{
   42a42:	460d      	mov	r5, r1
	err_code = pack_uint16(param->message_id, buf);
   42a44:	f7ff ff05 	bl	42852 <pack_uint16>
	if (err_code != 0) {
   42a48:	4604      	mov	r4, r0
   42a4a:	b9a8      	cbnz	r0, 42a78 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   42a4c:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   42a50:	88b3      	ldrh	r3, [r6, #4]
   42a52:	42a3      	cmp	r3, r4
   42a54:	dc06      	bgt.n	42a64 <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   42a56:	462a      	mov	r2, r5
   42a58:	4639      	mov	r1, r7
}
   42a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   42a5e:	20a2      	movs	r0, #162	; 0xa2
   42a60:	f7ff bf24 	b.w	428ac <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   42a64:	6830      	ldr	r0, [r6, #0]
   42a66:	4629      	mov	r1, r5
   42a68:	fb08 0004 	mla	r0, r8, r4, r0
   42a6c:	f7ff ff03 	bl	42876 <pack_utf8_str>
		if (err_code != 0) {
   42a70:	b908      	cbnz	r0, 42a76 <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   42a72:	3401      	adds	r4, #1
   42a74:	e7ec      	b.n	42a50 <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   42a76:	4604      	mov	r4, r0
}
   42a78:	4620      	mov	r0, r4
   42a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00042a7e <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   42a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42a80:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   42a82:	e9d1 3100 	ldrd	r3, r1, [r1]
   42a86:	1acb      	subs	r3, r1, r3
   42a88:	4293      	cmp	r3, r2
{
   42a8a:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   42a8c:	d301      	bcc.n	42a92 <mqtt_read_message_chunk+0x14>
		return 0;
   42a8e:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   42a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   42a92:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   42a94:	190f      	adds	r7, r1, r4
   42a96:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
   42a9a:	4413      	add	r3, r2
   42a9c:	429f      	cmp	r7, r3
   42a9e:	d813      	bhi.n	42ac8 <mqtt_read_message_chunk+0x4a>
   42aa0:	4297      	cmp	r7, r2
   42aa2:	d311      	bcc.n	42ac8 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   42aa4:	2300      	movs	r3, #0
   42aa6:	4622      	mov	r2, r4
   42aa8:	f7e5 fa1e 	bl	27ee8 <mqtt_transport_read>
	if (len < 0) {
   42aac:	2800      	cmp	r0, #0
   42aae:	dbef      	blt.n	42a90 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   42ab0:	d00d      	beq.n	42ace <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   42ab2:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   42ab4:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   42ab6:	4403      	add	r3, r0
   42ab8:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   42aba:	686b      	ldr	r3, [r5, #4]
   42abc:	4403      	add	r3, r0
   42abe:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   42ac0:	d2e5      	bcs.n	42a8e <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   42ac2:	f06f 000a 	mvn.w	r0, #10
   42ac6:	e7e3      	b.n	42a90 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   42ac8:	f06f 000b 	mvn.w	r0, #11
   42acc:	e7e0      	b.n	42a90 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   42ace:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   42ad2:	e7dd      	b.n	42a90 <mqtt_read_message_chunk+0x12>

00042ad4 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   42ad4:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   42ad6:	6e83      	ldr	r3, [r0, #104]	; 0x68
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   42ad8:	69c2      	ldr	r2, [r0, #28]
{
   42ada:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   42adc:	9302      	str	r3, [sp, #8]
{
   42ade:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   42ae0:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   42ae2:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   42ae4:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   42ae6:	4628      	mov	r0, r5
   42ae8:	a902      	add	r1, sp, #8
   42aea:	f7ff ffc8 	bl	42a7e <mqtt_read_message_chunk>
		if (err_code < 0) {
   42aee:	1e04      	subs	r4, r0, #0
   42af0:	db2d      	blt.n	42b4e <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   42af2:	6eab      	ldr	r3, [r5, #104]	; 0x68
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   42af4:	aa01      	add	r2, sp, #4
   42af6:	f10d 0103 	add.w	r1, sp, #3
   42afa:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   42afc:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   42afe:	f7ff fe08 	bl	42712 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   42b02:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   42b06:	4604      	mov	r4, r0
		chunk_size = 1U;
   42b08:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   42b0c:	d0eb      	beq.n	42ae6 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   42b0e:	2800      	cmp	r0, #0
   42b10:	db21      	blt.n	42b56 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   42b12:	f89d 6003 	ldrb.w	r6, [sp, #3]
   42b16:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   42b1a:	2b30      	cmp	r3, #48	; 0x30
   42b1c:	d11e      	bne.n	42b5c <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   42b1e:	2202      	movs	r2, #2
   42b20:	4628      	mov	r0, r5
   42b22:	a902      	add	r1, sp, #8
   42b24:	f7ff ffab 	bl	42a7e <mqtt_read_message_chunk>
	if (err_code < 0) {
   42b28:	1e04      	subs	r4, r0, #0
   42b2a:	db10      	blt.n	42b4e <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   42b2c:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   42b2e:	f016 0f06 	tst.w	r6, #6
   42b32:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   42b34:	4628      	mov	r0, r5
   42b36:	ba52      	rev16	r2, r2
   42b38:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   42b3a:	bf0c      	ite	eq
   42b3c:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   42b3e:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   42b40:	a902      	add	r1, sp, #8
   42b42:	f7ff ff9c 	bl	42a7e <mqtt_read_message_chunk>
	if (err_code < 0) {
   42b46:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   42b4a:	2c00      	cmp	r4, #0
   42b4c:	da0d      	bge.n	42b6a <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   42b4e:	f114 0f0b 	cmn.w	r4, #11
   42b52:	d100      	bne.n	42b56 <mqtt_handle_rx+0x82>
   42b54:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   42b56:	4620      	mov	r0, r4
   42b58:	b00c      	add	sp, #48	; 0x30
   42b5a:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   42b5c:	4628      	mov	r0, r5
   42b5e:	9a01      	ldr	r2, [sp, #4]
   42b60:	a902      	add	r1, sp, #8
   42b62:	f7ff ff8c 	bl	42a7e <mqtt_read_message_chunk>
   42b66:	4604      	mov	r4, r0
   42b68:	e7ef      	b.n	42b4a <mqtt_handle_rx+0x76>
	evt.result = 0;
   42b6a:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   42b6c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   42b70:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   42b72:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   42b76:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   42b78:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   42b7a:	d066      	beq.n	42c4a <mqtt_handle_rx+0x176>
   42b7c:	d813      	bhi.n	42ba6 <mqtt_handle_rx+0xd2>
   42b7e:	2b40      	cmp	r3, #64	; 0x40
   42b80:	d059      	beq.n	42c36 <mqtt_handle_rx+0x162>
   42b82:	d806      	bhi.n	42b92 <mqtt_handle_rx+0xbe>
   42b84:	2b20      	cmp	r3, #32
   42b86:	d02f      	beq.n	42be8 <mqtt_handle_rx+0x114>
   42b88:	2b30      	cmp	r3, #48	; 0x30
   42b8a:	d048      	beq.n	42c1e <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   42b8c:	2400      	movs	r4, #0
   42b8e:	61ec      	str	r4, [r5, #28]
	return 0;
   42b90:	e7e1      	b.n	42b56 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   42b92:	2b50      	cmp	r3, #80	; 0x50
   42b94:	d1fa      	bne.n	42b8c <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   42b96:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   42b98:	a905      	add	r1, sp, #20
   42b9a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   42b9c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   42ba0:	f7ff fe3f 	bl	42822 <publish_receive_decode>
   42ba4:	e04e      	b.n	42c44 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   42ba6:	2bb0      	cmp	r3, #176	; 0xb0
   42ba8:	d05f      	beq.n	42c6a <mqtt_handle_rx+0x196>
   42baa:	d80b      	bhi.n	42bc4 <mqtt_handle_rx+0xf0>
   42bac:	2b70      	cmp	r3, #112	; 0x70
   42bae:	d054      	beq.n	42c5a <mqtt_handle_rx+0x186>
   42bb0:	2b90      	cmp	r3, #144	; 0x90
   42bb2:	d1eb      	bne.n	42b8c <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   42bb4:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   42bb6:	a905      	add	r1, sp, #20
   42bb8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   42bba:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   42bbe:	f7ff fe36 	bl	4282e <subscribe_ack_decode>
   42bc2:	e03f      	b.n	42c44 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   42bc4:	2bd0      	cmp	r3, #208	; 0xd0
   42bc6:	d1e1      	bne.n	42b8c <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   42bc8:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	int err_code = 0;
   42bcc:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   42bce:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   42bd0:	bfc8      	it	gt
   42bd2:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   42bd6:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   42bda:	bfc8      	it	gt
   42bdc:	b252      	sxtbgt	r2, r2
   42bde:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
		evt.type = MQTT_EVT_PINGRESP;
   42be2:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   42be6:	e010      	b.n	42c0a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   42be8:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   42bec:	4628      	mov	r0, r5
   42bee:	aa05      	add	r2, sp, #20
   42bf0:	a902      	add	r1, sp, #8
   42bf2:	f7ff fdb9 	bl	42768 <connect_ack_decode>
		if (err_code == 0) {
   42bf6:	4604      	mov	r4, r0
   42bf8:	bb28      	cbnz	r0, 42c46 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   42bfa:	f89d 2015 	ldrb.w	r2, [sp, #21]
   42bfe:	b95a      	cbnz	r2, 42c18 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   42c00:	69ab      	ldr	r3, [r5, #24]
   42c02:	f043 0304 	orr.w	r3, r3, #4
   42c06:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   42c08:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   42c0a:	4628      	mov	r0, r5
   42c0c:	a904      	add	r1, sp, #16
   42c0e:	f000 f8bd 	bl	42d8c <event_notify>
	if (err_code < 0) {
   42c12:	2c00      	cmp	r4, #0
   42c14:	daba      	bge.n	42b8c <mqtt_handle_rx+0xb8>
   42c16:	e79e      	b.n	42b56 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   42c18:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   42c1c:	e7f4      	b.n	42c08 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   42c1e:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   42c20:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   42c22:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   42c26:	ab05      	add	r3, sp, #20
   42c28:	f7ff fdb9 	bl	4279e <publish_decode>
		client->internal.remaining_payload =
   42c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   42c2e:	4604      	mov	r4, r0
		evt.result = err_code;
   42c30:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   42c32:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   42c34:	e7e9      	b.n	42c0a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   42c36:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   42c38:	a905      	add	r1, sp, #20
   42c3a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   42c3c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   42c40:	f7ff fded 	bl	4281e <publish_ack_decode>
   42c44:	4604      	mov	r4, r0
		evt.result = err_code;
   42c46:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   42c48:	e7df      	b.n	42c0a <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   42c4a:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   42c4c:	a905      	add	r1, sp, #20
   42c4e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   42c50:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   42c54:	f7ff fde7 	bl	42826 <publish_release_decode>
   42c58:	e7f4      	b.n	42c44 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   42c5a:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   42c5c:	a905      	add	r1, sp, #20
   42c5e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   42c60:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   42c64:	f7ff fde1 	bl	4282a <publish_complete_decode>
   42c68:	e7ec      	b.n	42c44 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   42c6a:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   42c6c:	a905      	add	r1, sp, #20
   42c6e:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   42c72:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   42c76:	f7ff fdea 	bl	4284e <unsubscribe_ack_decode>
   42c7a:	e7e3      	b.n	42c44 <mqtt_handle_rx+0x170>

00042c7c <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   42c7c:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   42c7e:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   42c80:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   42c82:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   42c84:	2206      	movs	r2, #6
   42c86:	2101      	movs	r1, #1
   42c88:	f7e2 faf2 	bl	25270 <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   42c8c:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   42c8e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   42c90:	da04      	bge.n	42c9c <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   42c92:	f7ff fcee 	bl	42672 <__errno>
   42c96:	6800      	ldr	r0, [r0, #0]
   42c98:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   42c9a:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   42c9c:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   42c9e:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (broker->sa_family == AF_INET) {
   42ca0:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   42ca2:	bf14      	ite	ne
   42ca4:	2218      	movne	r2, #24
   42ca6:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   42ca8:	f7ff f988 	bl	41fbc <z_impl_zsock_connect>
	if (ret < 0) {
   42cac:	2800      	cmp	r0, #0
   42cae:	da03      	bge.n	42cb8 <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   42cb0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   42cb2:	f7ff f96c 	bl	41f8e <z_impl_zsock_close>
   42cb6:	e7ec      	b.n	42c92 <mqtt_client_tcp_connect+0x16>
	return 0;
   42cb8:	2000      	movs	r0, #0
   42cba:	e7ee      	b.n	42c9a <mqtt_client_tcp_connect+0x1e>

00042cbc <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   42cbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   42cc0:	2400      	movs	r4, #0
{
   42cc2:	4606      	mov	r6, r0
   42cc4:	460f      	mov	r7, r1
   42cc6:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   42cc8:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   42cca:	42ac      	cmp	r4, r5
   42ccc:	d301      	bcc.n	42cd2 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   42cce:	2000      	movs	r0, #0
   42cd0:	e00d      	b.n	42cee <mqtt_client_tcp_write+0x32>
		ret = send(client->transport.tcp.sock, data + offset,
   42cd2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   42cd4:	2300      	movs	r3, #0
   42cd6:	e9cd 8800 	strd	r8, r8, [sp]
   42cda:	1b2a      	subs	r2, r5, r4
   42cdc:	1939      	adds	r1, r7, r4
   42cde:	f7ff f983 	bl	41fe8 <z_impl_zsock_sendto>
		if (ret < 0) {
   42ce2:	1e03      	subs	r3, r0, #0
   42ce4:	da06      	bge.n	42cf4 <mqtt_client_tcp_write+0x38>
			return -errno;
   42ce6:	f7ff fcc4 	bl	42672 <__errno>
   42cea:	6800      	ldr	r0, [r0, #0]
   42cec:	4240      	negs	r0, r0
}
   42cee:	b002      	add	sp, #8
   42cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   42cf4:	441c      	add	r4, r3
   42cf6:	e7e8      	b.n	42cca <mqtt_client_tcp_write+0xe>

00042cf8 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   42cf8:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   42cfa:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   42cfc:	2200      	movs	r2, #0
   42cfe:	f7ff f990 	bl	42022 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   42d02:	2800      	cmp	r0, #0
   42d04:	da04      	bge.n	42d10 <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   42d06:	f7ff fcb4 	bl	42672 <__errno>
   42d0a:	6800      	ldr	r0, [r0, #0]
   42d0c:	4240      	negs	r0, r0
	}

	return 0;
}
   42d0e:	bd08      	pop	{r3, pc}
	return 0;
   42d10:	2000      	movs	r0, #0
   42d12:	e7fc      	b.n	42d0e <mqtt_client_tcp_write_msg+0x16>

00042d14 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   42d14:	b513      	push	{r0, r1, r4, lr}
   42d16:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   42d18:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   42d1a:	bf14      	ite	ne
   42d1c:	4623      	movne	r3, r4
   42d1e:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   42d20:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   42d22:	e9cd 4400 	strd	r4, r4, [sp]
   42d26:	f7ff f992 	bl	4204e <z_impl_zsock_recvfrom>
	if (ret < 0) {
   42d2a:	2800      	cmp	r0, #0
   42d2c:	da03      	bge.n	42d36 <mqtt_client_tcp_read+0x22>
		return -errno;
   42d2e:	f7ff fca0 	bl	42672 <__errno>
   42d32:	6800      	ldr	r0, [r0, #0]
   42d34:	4240      	negs	r0, r0
	}

	return ret;
}
   42d36:	b002      	add	sp, #8
   42d38:	bd10      	pop	{r4, pc}

00042d3a <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   42d3a:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   42d3c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   42d3e:	f7ff f926 	bl	41f8e <z_impl_zsock_close>
	if (ret < 0) {
   42d42:	2800      	cmp	r0, #0
   42d44:	da04      	bge.n	42d50 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   42d46:	f7ff fc94 	bl	42672 <__errno>
   42d4a:	6800      	ldr	r0, [r0, #0]
   42d4c:	4240      	negs	r0, r0
	}

	return 0;
}
   42d4e:	bd08      	pop	{r3, pc}
	return 0;
   42d50:	2000      	movs	r0, #0
   42d52:	e7fc      	b.n	42d4e <mqtt_client_tcp_disconnect+0x14>

00042d54 <k_uptime_get>:
{
   42d54:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   42d56:	f001 feec 	bl	44b32 <z_impl_k_uptime_ticks>
   42d5a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   42d5e:	fba0 2304 	umull	r2, r3, r0, r4
   42d62:	fb04 3301 	mla	r3, r4, r1, r3
   42d66:	0bd0      	lsrs	r0, r2, #15
}
   42d68:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   42d6c:	0bd9      	lsrs	r1, r3, #15
   42d6e:	bd10      	pop	{r4, pc}

00042d70 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   42d70:	b538      	push	{r3, r4, r5, lr}
   42d72:	4604      	mov	r4, r0
   42d74:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   42d76:	6f42      	ldr	r2, [r0, #116]	; 0x74
   42d78:	2100      	movs	r1, #0
   42d7a:	6f00      	ldr	r0, [r0, #112]	; 0x70
   42d7c:	f001 ffd3 	bl	44d26 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   42d80:	6f23      	ldr	r3, [r4, #112]	; 0x70
	buf->end = client->tx_buf + client->tx_buf_size;
   42d82:	6f62      	ldr	r2, [r4, #116]	; 0x74
	buf->cur = client->tx_buf;
   42d84:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   42d86:	4413      	add	r3, r2
   42d88:	606b      	str	r3, [r5, #4]
}
   42d8a:	bd38      	pop	{r3, r4, r5, pc}

00042d8c <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   42d8c:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   42d8e:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   42d90:	4604      	mov	r4, r0
   42d92:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   42d94:	b15b      	cbz	r3, 42dae <event_notify+0x22>
		mqtt_mutex_unlock(client);
   42d96:	f7e5 f8bf 	bl	27f18 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   42d9a:	4620      	mov	r0, r4
   42d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   42d9e:	9901      	ldr	r1, [sp, #4]
   42da0:	4798      	blx	r3

		mqtt_mutex_lock(client);
   42da2:	4620      	mov	r0, r4
	}
}
   42da4:	b002      	add	sp, #8
   42da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   42daa:	f7e5 b8e1 	b.w	27f70 <mqtt_mutex_lock>
}
   42dae:	b002      	add	sp, #8
   42db0:	bd10      	pop	{r4, pc}

00042db2 <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   42db2:	b530      	push	{r4, r5, lr}
   42db4:	b089      	sub	sp, #36	; 0x24
   42db6:	4604      	mov	r4, r0
   42db8:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   42dba:	f7e5 f8a3 	bl	27f04 <mqtt_transport_disconnect>
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	if (notify) {
		struct mqtt_evt evt = {
   42dbe:	221c      	movs	r2, #28
   42dc0:	2100      	movs	r1, #0
   42dc2:	4668      	mov	r0, sp
   42dc4:	f001 ffaf 	bl	44d26 <memset>
   42dc8:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   42dca:	4669      	mov	r1, sp
   42dcc:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   42dce:	f88d 3000 	strb.w	r3, [sp]
   42dd2:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   42dd4:	f7ff ffda 	bl	42d8c <event_notify>
	MQTT_STATE_INIT(client);
   42dd8:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   42dda:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   42dde:	e9c4 3307 	strd	r3, r3, [r4, #28]
	}

	/* Reset internal state. */
	client_reset(client);
}
   42de2:	b009      	add	sp, #36	; 0x24
   42de4:	bd30      	pop	{r4, r5, pc}

00042de6 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   42de6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   42de8:	4617      	mov	r7, r2
   42dea:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   42dec:	4605      	mov	r5, r0
{
   42dee:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   42df0:	b320      	cbz	r0, 42e3c <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   42df2:	f7e5 f8bd 	bl	27f70 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   42df6:	6a2c      	ldr	r4, [r5, #32]
   42df8:	b1b4      	cbz	r4, 42e28 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   42dfa:	42bc      	cmp	r4, r7
   42dfc:	4622      	mov	r2, r4
   42dfe:	4633      	mov	r3, r6
   42e00:	bf28      	it	cs
   42e02:	463a      	movcs	r2, r7
   42e04:	4628      	mov	r0, r5
   42e06:	9901      	ldr	r1, [sp, #4]
   42e08:	f7e5 f86e 	bl	27ee8 <mqtt_transport_read>
   42e0c:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   42e0e:	b916      	cbnz	r6, 42e16 <read_publish_payload+0x30>
   42e10:	f110 0f0b 	cmn.w	r0, #11
   42e14:	d008      	beq.n	42e28 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   42e16:	2c00      	cmp	r4, #0
   42e18:	dc0c      	bgt.n	42e34 <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   42e1a:	bf08      	it	eq
   42e1c:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   42e20:	4628      	mov	r0, r5
   42e22:	4621      	mov	r1, r4
   42e24:	f7ff ffc5 	bl	42db2 <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   42e28:	4628      	mov	r0, r5
   42e2a:	f7e5 f875 	bl	27f18 <mqtt_mutex_unlock>

	return ret;
}
   42e2e:	4620      	mov	r0, r4
   42e30:	b003      	add	sp, #12
   42e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   42e34:	6a2b      	ldr	r3, [r5, #32]
   42e36:	1b1b      	subs	r3, r3, r4
   42e38:	622b      	str	r3, [r5, #32]
   42e3a:	e7f5      	b.n	42e28 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   42e3c:	f06f 0415 	mvn.w	r4, #21
   42e40:	e7f5      	b.n	42e2e <read_publish_payload+0x48>

00042e42 <client_write>:
{
   42e42:	b538      	push	{r3, r4, r5, lr}
   42e44:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   42e46:	f7e5 f835 	bl	27eb4 <mqtt_transport_write>
	if (err_code < 0) {
   42e4a:	1e04      	subs	r4, r0, #0
   42e4c:	da05      	bge.n	42e5a <client_write+0x18>
		client_disconnect(client, err_code, true);
   42e4e:	4621      	mov	r1, r4
   42e50:	4628      	mov	r0, r5
   42e52:	f7ff ffae 	bl	42db2 <client_disconnect.constprop.0>
}
   42e56:	4620      	mov	r0, r4
   42e58:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   42e5a:	f7ff ff7b 	bl	42d54 <k_uptime_get>
	return 0;
   42e5e:	2400      	movs	r4, #0
   42e60:	6168      	str	r0, [r5, #20]
   42e62:	e7f8      	b.n	42e56 <client_write+0x14>

00042e64 <mqtt_client_init>:
{
   42e64:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   42e66:	4604      	mov	r4, r0
   42e68:	b1a0      	cbz	r0, 42e94 <mqtt_client_init+0x30>
	MQTT_STATE_INIT(client);
   42e6a:	2500      	movs	r5, #0
   42e6c:	2280      	movs	r2, #128	; 0x80
   42e6e:	2100      	movs	r1, #0
   42e70:	f001 ff59 	bl	44d26 <memset>
   42e74:	61a5      	str	r5, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   42e76:	4620      	mov	r0, r4
   42e78:	f001 fd69 	bl	4494e <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   42e7c:	2304      	movs	r3, #4
   42e7e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client->clean_session = MQTT_CLEAN_SESSION;
   42e82:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   42e86:	f365 0341 	bfi	r3, r5, #1, #1
   42e8a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	client->keepalive = MQTT_KEEPALIVE;
   42e8e:	2378      	movs	r3, #120	; 0x78
   42e90:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
}
   42e94:	bd38      	pop	{r3, r4, r5, pc}

00042e96 <mqtt_connect>:
{
   42e96:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   42e98:	4605      	mov	r5, r0
   42e9a:	2800      	cmp	r0, #0
   42e9c:	d03b      	beq.n	42f16 <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   42e9e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   42ea0:	2b00      	cmp	r3, #0
   42ea2:	d038      	beq.n	42f16 <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   42ea4:	f7e5 f864 	bl	27f70 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   42ea8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   42eaa:	b38b      	cbz	r3, 42f10 <mqtt_connect+0x7a>
   42eac:	6eab      	ldr	r3, [r5, #104]	; 0x68
   42eae:	b37b      	cbz	r3, 42f10 <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   42eb0:	4628      	mov	r0, r5
   42eb2:	f7e4 fff5 	bl	27ea0 <mqtt_transport_connect>
	if (err_code < 0) {
   42eb6:	1e04      	subs	r4, r0, #0
   42eb8:	db24      	blt.n	42f04 <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   42eba:	4669      	mov	r1, sp
   42ebc:	4628      	mov	r0, r5
   42ebe:	f7ff ff57 	bl	42d70 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   42ec2:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   42ec4:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   42ec6:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   42eca:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   42ecc:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   42ece:	f7e4 ff43 	bl	27d58 <connect_request_encode>
	if (err_code < 0) {
   42ed2:	1e04      	subs	r4, r0, #0
   42ed4:	db13      	blt.n	42efe <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   42ed6:	e9dd 1200 	ldrd	r1, r2, [sp]
   42eda:	4628      	mov	r0, r5
   42edc:	1a52      	subs	r2, r2, r1
   42ede:	f7e4 ffe9 	bl	27eb4 <mqtt_transport_write>
	if (err_code < 0) {
   42ee2:	1e04      	subs	r4, r0, #0
   42ee4:	db0b      	blt.n	42efe <mqtt_connect+0x68>
   42ee6:	f7ff ff35 	bl	42d54 <k_uptime_get>
	client->unacked_ping = 0;
   42eea:	2400      	movs	r4, #0
   42eec:	6168      	str	r0, [r5, #20]
   42eee:	f885 407b 	strb.w	r4, [r5, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   42ef2:	4628      	mov	r0, r5
   42ef4:	f7e5 f810 	bl	27f18 <mqtt_mutex_unlock>
}
   42ef8:	4620      	mov	r0, r4
   42efa:	b003      	add	sp, #12
   42efc:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   42efe:	4628      	mov	r0, r5
   42f00:	f7e5 f800 	bl	27f04 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   42f04:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   42f06:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   42f0a:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   42f0e:	e7f0      	b.n	42ef2 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   42f10:	f06f 040b 	mvn.w	r4, #11
   42f14:	e7f6      	b.n	42f04 <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   42f16:	f06f 0415 	mvn.w	r4, #21
   42f1a:	e7ed      	b.n	42ef8 <mqtt_connect+0x62>

00042f1c <mqtt_publish>:
{
   42f1c:	b570      	push	{r4, r5, r6, lr}
   42f1e:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   42f20:	4605      	mov	r5, r0
{
   42f22:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   42f24:	2800      	cmp	r0, #0
   42f26:	d03b      	beq.n	42fa0 <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   42f28:	2900      	cmp	r1, #0
   42f2a:	d039      	beq.n	42fa0 <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   42f2c:	f7e5 f820 	bl	27f70 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   42f30:	4628      	mov	r0, r5
   42f32:	a901      	add	r1, sp, #4
   42f34:	f7ff ff1c 	bl	42d70 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   42f38:	69ab      	ldr	r3, [r5, #24]
   42f3a:	075b      	lsls	r3, r3, #29
   42f3c:	d52d      	bpl.n	42f9a <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   42f3e:	4630      	mov	r0, r6
   42f40:	a901      	add	r1, sp, #4
   42f42:	f7ff fcfa 	bl	4293a <publish_encode>
	if (err_code < 0) {
   42f46:	1e04      	subs	r4, r0, #0
   42f48:	db1c      	blt.n	42f84 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   42f4a:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   42f4c:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   42f4e:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   42f50:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   42f52:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   42f54:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   42f56:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   42f58:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   42f5a:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   42f5c:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   42f5e:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   42f62:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   42f64:	f001 fedf 	bl	44d26 <memset>
	msg.msg_iov = io_vector;
   42f68:	ab03      	add	r3, sp, #12
   42f6a:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   42f6c:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   42f6e:	4628      	mov	r0, r5
   42f70:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   42f72:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   42f74:	f7e4 ffaa 	bl	27ecc <mqtt_transport_write_msg>
	if (err_code < 0) {
   42f78:	1e04      	subs	r4, r0, #0
   42f7a:	da09      	bge.n	42f90 <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   42f7c:	4621      	mov	r1, r4
   42f7e:	4628      	mov	r0, r5
   42f80:	f7ff ff17 	bl	42db2 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   42f84:	4628      	mov	r0, r5
   42f86:	f7e4 ffc7 	bl	27f18 <mqtt_mutex_unlock>
}
   42f8a:	4620      	mov	r0, r4
   42f8c:	b00e      	add	sp, #56	; 0x38
   42f8e:	bd70      	pop	{r4, r5, r6, pc}
   42f90:	f7ff fee0 	bl	42d54 <k_uptime_get>
	return 0;
   42f94:	2400      	movs	r4, #0
   42f96:	6168      	str	r0, [r5, #20]
   42f98:	e7f4      	b.n	42f84 <mqtt_publish+0x68>
		return -ENOTCONN;
   42f9a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   42f9e:	e7f1      	b.n	42f84 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   42fa0:	f06f 0415 	mvn.w	r4, #21
   42fa4:	e7f1      	b.n	42f8a <mqtt_publish+0x6e>

00042fa6 <mqtt_publish_qos1_ack>:
{
   42fa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   42fa8:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   42faa:	4605      	mov	r5, r0
   42fac:	b1f8      	cbz	r0, 42fee <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   42fae:	b1f1      	cbz	r1, 42fee <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   42fb0:	f7e4 ffde 	bl	27f70 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   42fb4:	4669      	mov	r1, sp
   42fb6:	4628      	mov	r0, r5
   42fb8:	f7ff feda 	bl	42d70 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   42fbc:	69ab      	ldr	r3, [r5, #24]
   42fbe:	075b      	lsls	r3, r3, #29
   42fc0:	d512      	bpl.n	42fe8 <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   42fc2:	4620      	mov	r0, r4
   42fc4:	4669      	mov	r1, sp
   42fc6:	f7ff fcf9 	bl	429bc <publish_ack_encode>
	if (err_code < 0) {
   42fca:	1e04      	subs	r4, r0, #0
   42fcc:	db06      	blt.n	42fdc <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   42fce:	e9dd 1200 	ldrd	r1, r2, [sp]
   42fd2:	4628      	mov	r0, r5
   42fd4:	1a52      	subs	r2, r2, r1
   42fd6:	f7ff ff34 	bl	42e42 <client_write>
   42fda:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   42fdc:	4628      	mov	r0, r5
   42fde:	f7e4 ff9b 	bl	27f18 <mqtt_mutex_unlock>
}
   42fe2:	4620      	mov	r0, r4
   42fe4:	b003      	add	sp, #12
   42fe6:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   42fe8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   42fec:	e7f6      	b.n	42fdc <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   42fee:	f06f 0415 	mvn.w	r4, #21
   42ff2:	e7f6      	b.n	42fe2 <mqtt_publish_qos1_ack+0x3c>

00042ff4 <mqtt_disconnect>:
{
   42ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   42ff6:	4605      	mov	r5, r0
   42ff8:	b310      	cbz	r0, 43040 <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   42ffa:	f7e4 ffb9 	bl	27f70 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   42ffe:	4669      	mov	r1, sp
   43000:	4628      	mov	r0, r5
   43002:	f7ff feb5 	bl	42d70 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   43006:	69ab      	ldr	r3, [r5, #24]
   43008:	075b      	lsls	r3, r3, #29
   4300a:	d516      	bpl.n	4303a <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   4300c:	4668      	mov	r0, sp
   4300e:	f7e4 ff23 	bl	27e58 <disconnect_encode>
	if (err_code < 0) {
   43012:	1e04      	subs	r4, r0, #0
   43014:	db0b      	blt.n	4302e <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   43016:	e9dd 1200 	ldrd	r1, r2, [sp]
   4301a:	4628      	mov	r0, r5
   4301c:	1a52      	subs	r2, r2, r1
   4301e:	f7ff ff10 	bl	42e42 <client_write>
	if (err_code < 0) {
   43022:	1e04      	subs	r4, r0, #0
   43024:	db03      	blt.n	4302e <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   43026:	2100      	movs	r1, #0
   43028:	4628      	mov	r0, r5
   4302a:	f7ff fec2 	bl	42db2 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   4302e:	4628      	mov	r0, r5
   43030:	f7e4 ff72 	bl	27f18 <mqtt_mutex_unlock>
}
   43034:	4620      	mov	r0, r4
   43036:	b003      	add	sp, #12
   43038:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   4303a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   4303e:	e7f6      	b.n	4302e <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   43040:	f06f 0415 	mvn.w	r4, #21
   43044:	e7f6      	b.n	43034 <mqtt_disconnect+0x40>

00043046 <mqtt_subscribe>:
{
   43046:	b537      	push	{r0, r1, r2, r4, r5, lr}
   43048:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   4304a:	4605      	mov	r5, r0
   4304c:	b1f8      	cbz	r0, 4308e <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   4304e:	b1f1      	cbz	r1, 4308e <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   43050:	f7e4 ff8e 	bl	27f70 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   43054:	4669      	mov	r1, sp
   43056:	4628      	mov	r0, r5
   43058:	f7ff fe8a 	bl	42d70 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   4305c:	69ab      	ldr	r3, [r5, #24]
   4305e:	075b      	lsls	r3, r3, #29
   43060:	d512      	bpl.n	43088 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   43062:	4620      	mov	r0, r4
   43064:	4669      	mov	r1, sp
   43066:	f7ff fcae 	bl	429c6 <subscribe_encode>
	if (err_code < 0) {
   4306a:	1e04      	subs	r4, r0, #0
   4306c:	db06      	blt.n	4307c <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   4306e:	e9dd 1200 	ldrd	r1, r2, [sp]
   43072:	4628      	mov	r0, r5
   43074:	1a52      	subs	r2, r2, r1
   43076:	f7ff fee4 	bl	42e42 <client_write>
   4307a:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   4307c:	4628      	mov	r0, r5
   4307e:	f7e4 ff4b 	bl	27f18 <mqtt_mutex_unlock>
}
   43082:	4620      	mov	r0, r4
   43084:	b003      	add	sp, #12
   43086:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   43088:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   4308c:	e7f6      	b.n	4307c <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   4308e:	f06f 0415 	mvn.w	r4, #21
   43092:	e7f6      	b.n	43082 <mqtt_subscribe+0x3c>

00043094 <mqtt_unsubscribe>:
{
   43094:	b537      	push	{r0, r1, r2, r4, r5, lr}
   43096:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   43098:	4605      	mov	r5, r0
   4309a:	b1f8      	cbz	r0, 430dc <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   4309c:	b1f1      	cbz	r1, 430dc <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   4309e:	f7e4 ff67 	bl	27f70 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   430a2:	4669      	mov	r1, sp
   430a4:	4628      	mov	r0, r5
   430a6:	f7ff fe63 	bl	42d70 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   430aa:	69ab      	ldr	r3, [r5, #24]
   430ac:	075b      	lsls	r3, r3, #29
   430ae:	d512      	bpl.n	430d6 <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   430b0:	4620      	mov	r0, r4
   430b2:	4669      	mov	r1, sp
   430b4:	f7ff fcbe 	bl	42a34 <unsubscribe_encode>
	if (err_code < 0) {
   430b8:	1e04      	subs	r4, r0, #0
   430ba:	db06      	blt.n	430ca <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   430bc:	e9dd 1200 	ldrd	r1, r2, [sp]
   430c0:	4628      	mov	r0, r5
   430c2:	1a52      	subs	r2, r2, r1
   430c4:	f7ff febd 	bl	42e42 <client_write>
   430c8:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   430ca:	4628      	mov	r0, r5
   430cc:	f7e4 ff24 	bl	27f18 <mqtt_mutex_unlock>
}
   430d0:	4620      	mov	r0, r4
   430d2:	b003      	add	sp, #12
   430d4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   430d6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   430da:	e7f6      	b.n	430ca <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   430dc:	f06f 0415 	mvn.w	r4, #21
   430e0:	e7f6      	b.n	430d0 <mqtt_unsubscribe+0x3c>

000430e2 <mqtt_ping>:
{
   430e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   430e4:	4605      	mov	r5, r0
   430e6:	b320      	cbz	r0, 43132 <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   430e8:	f7e4 ff42 	bl	27f70 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   430ec:	4669      	mov	r1, sp
   430ee:	4628      	mov	r0, r5
   430f0:	f7ff fe3e 	bl	42d70 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   430f4:	69ab      	ldr	r3, [r5, #24]
   430f6:	075b      	lsls	r3, r3, #29
   430f8:	d518      	bpl.n	4312c <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   430fa:	4668      	mov	r0, sp
   430fc:	f7e4 febe 	bl	27e7c <ping_request_encode>
	if (err_code < 0) {
   43100:	1e04      	subs	r4, r0, #0
   43102:	db0d      	blt.n	43120 <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   43104:	e9dd 1200 	ldrd	r1, r2, [sp]
   43108:	4628      	mov	r0, r5
   4310a:	1a52      	subs	r2, r2, r1
   4310c:	f7ff fe99 	bl	42e42 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   43110:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   43114:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   43116:	2b7f      	cmp	r3, #127	; 0x7f
   43118:	d002      	beq.n	43120 <mqtt_ping+0x3e>
		client->unacked_ping++;
   4311a:	3301      	adds	r3, #1
   4311c:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   43120:	4628      	mov	r0, r5
   43122:	f7e4 fef9 	bl	27f18 <mqtt_mutex_unlock>
}
   43126:	4620      	mov	r0, r4
   43128:	b003      	add	sp, #12
   4312a:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   4312c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   43130:	e7f6      	b.n	43120 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   43132:	f06f 0415 	mvn.w	r4, #21
   43136:	e7f6      	b.n	43126 <mqtt_ping+0x44>

00043138 <mqtt_live>:
{
   43138:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   4313a:	4606      	mov	r6, r0
   4313c:	b300      	cbz	r0, 43180 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   4313e:	f7e4 ff17 	bl	27f70 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   43142:	6974      	ldr	r4, [r6, #20]
   43144:	f7ff fe06 	bl	42d54 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   43148:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   4314a:	f8b6 4078 	ldrh.w	r4, [r6, #120]	; 0x78

	if (diff < 0) {
		return 0;
   4314e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   43152:	b19c      	cbz	r4, 4317c <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   43154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   43158:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   4315a:	4284      	cmp	r4, r0
   4315c:	d80d      	bhi.n	4317a <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   4315e:	4630      	mov	r0, r6
   43160:	f7ff ffbf 	bl	430e2 <mqtt_ping>
		ping_sent = true;
   43164:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   43166:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   43168:	4630      	mov	r0, r6
   4316a:	f7e4 fed5 	bl	27f18 <mqtt_mutex_unlock>
		return -EAGAIN;
   4316e:	2c00      	cmp	r4, #0
   43170:	bf08      	it	eq
   43172:	f06f 050a 	mvneq.w	r5, #10
}
   43176:	4628      	mov	r0, r5
   43178:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   4317a:	2400      	movs	r4, #0
	int err_code = 0;
   4317c:	4625      	mov	r5, r4
   4317e:	e7f3      	b.n	43168 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   43180:	f06f 0515 	mvn.w	r5, #21
   43184:	e7f7      	b.n	43176 <mqtt_live+0x3e>

00043186 <mqtt_keepalive_time_left>:
{
   43186:	b538      	push	{r3, r4, r5, lr}
   43188:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   4318a:	6945      	ldr	r5, [r0, #20]
   4318c:	f7ff fde2 	bl	42d54 <k_uptime_get>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   43190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   43194:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
	int32_t diff = k_uptime_get_32() - last_activity;
   43198:	1b42      	subs	r2, r0, r5
   4319a:	434b      	muls	r3, r1
		return 0;
   4319c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   431a0:	b119      	cbz	r1, 431aa <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   431a2:	4293      	cmp	r3, r2
   431a4:	d904      	bls.n	431b0 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   431a6:	1a98      	subs	r0, r3, r2
}
   431a8:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   431aa:	f04f 30ff 	mov.w	r0, #4294967295
   431ae:	e7fb      	b.n	431a8 <mqtt_keepalive_time_left+0x22>
		return 0;
   431b0:	2000      	movs	r0, #0
   431b2:	e7f9      	b.n	431a8 <mqtt_keepalive_time_left+0x22>

000431b4 <mqtt_input>:
{
   431b4:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   431b6:	4605      	mov	r5, r0
   431b8:	b1d0      	cbz	r0, 431f0 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   431ba:	f7e4 fed9 	bl	27f70 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   431be:	69ab      	ldr	r3, [r5, #24]
   431c0:	079b      	lsls	r3, r3, #30
   431c2:	d50f      	bpl.n	431e4 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   431c4:	6a2b      	ldr	r3, [r5, #32]
   431c6:	b983      	cbnz	r3, 431ea <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   431c8:	4628      	mov	r0, r5
   431ca:	f7ff fc83 	bl	42ad4 <mqtt_handle_rx>
	if (err_code < 0) {
   431ce:	1e04      	subs	r4, r0, #0
   431d0:	da03      	bge.n	431da <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   431d2:	4621      	mov	r1, r4
   431d4:	4628      	mov	r0, r5
   431d6:	f7ff fdec 	bl	42db2 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   431da:	4628      	mov	r0, r5
   431dc:	f7e4 fe9c 	bl	27f18 <mqtt_mutex_unlock>
}
   431e0:	4620      	mov	r0, r4
   431e2:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   431e4:	f06f 040c 	mvn.w	r4, #12
   431e8:	e7f7      	b.n	431da <mqtt_input+0x26>
		return -EBUSY;
   431ea:	f06f 040f 	mvn.w	r4, #15
   431ee:	e7f4      	b.n	431da <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   431f0:	f06f 0415 	mvn.w	r4, #21
   431f4:	e7f4      	b.n	431e0 <mqtt_input+0x2c>

000431f6 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   431f6:	2301      	movs	r3, #1
   431f8:	f7ff bdf5 	b.w	42de6 <read_publish_payload>

000431fc <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   431fc:	b570      	push	{r4, r5, r6, lr}
   431fe:	4606      	mov	r6, r0
   43200:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   43202:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   43204:	42ac      	cmp	r4, r5
   43206:	d301      	bcc.n	4320c <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   43208:	2000      	movs	r0, #0
}
   4320a:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   4320c:	4621      	mov	r1, r4
   4320e:	4630      	mov	r0, r6
   43210:	1b2a      	subs	r2, r5, r4
   43212:	f7ff fff0 	bl	431f6 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   43216:	2800      	cmp	r0, #0
   43218:	dbf7      	blt.n	4320a <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   4321a:	d001      	beq.n	43220 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   4321c:	4404      	add	r4, r0
   4321e:	e7f1      	b.n	43204 <mqtt_readall_publish_payload+0x8>
			return -EIO;
   43220:	f06f 0004 	mvn.w	r0, #4
   43224:	e7f1      	b.n	4320a <mqtt_readall_publish_payload+0xe>

00043226 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   43226:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct sockaddr *broker = client->broker;
   43228:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   4322a:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   4322c:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   4322e:	f44f 7281 	mov.w	r2, #258	; 0x102
   43232:	2101      	movs	r1, #1
   43234:	f7e2 f81c 	bl	25270 <z_impl_zsock_socket>
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   43238:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   4323a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   4323c:	da05      	bge.n	4324a <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   4323e:	f7ff fa18 	bl	42672 <__errno>
   43242:	6800      	ldr	r0, [r0, #0]
   43244:	4240      	negs	r0, r0
}
   43246:	b004      	add	sp, #16
   43248:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   4324a:	2304      	movs	r3, #4
   4324c:	2205      	movs	r2, #5
   4324e:	9300      	str	r3, [sp, #0]
   43250:	f44f 718d 	mov.w	r1, #282	; 0x11a
   43254:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   43258:	f7fe ff31 	bl	420be <z_impl_zsock_setsockopt>
	if (ret < 0) {
   4325c:	2800      	cmp	r0, #0
   4325e:	da03      	bge.n	43268 <mqtt_client_tls_connect+0x42>
	(void)close(client->transport.tls.sock);
   43260:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   43262:	f7fe fe94 	bl	41f8e <z_impl_zsock_close>
   43266:	e7ea      	b.n	4323e <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   43268:	6b63      	ldr	r3, [r4, #52]	; 0x34
   4326a:	bb03      	cbnz	r3, 432ae <mqtt_client_tls_connect+0x88>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   4326c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   4326e:	bb63      	cbnz	r3, 432ca <mqtt_client_tls_connect+0xa4>
	if (tls_config->hostname) {
   43270:	6c23      	ldr	r3, [r4, #64]	; 0x40
   43272:	2b00      	cmp	r3, #0
   43274:	d137      	bne.n	432e6 <mqtt_client_tls_connect+0xc0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   43276:	6c63      	ldr	r3, [r4, #68]	; 0x44
   43278:	2b01      	cmp	r3, #1
   4327a:	d10b      	bne.n	43294 <mqtt_client_tls_connect+0x6e>
   4327c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   4327e:	2304      	movs	r3, #4
   43280:	2207      	movs	r2, #7
   43282:	9300      	str	r3, [sp, #0]
   43284:	f44f 718d 	mov.w	r1, #282	; 0x11a
   43288:	f104 0344 	add.w	r3, r4, #68	; 0x44
   4328c:	f7fe ff17 	bl	420be <z_impl_zsock_setsockopt>
		if (ret < 0) {
   43290:	2800      	cmp	r0, #0
   43292:	dbe5      	blt.n	43260 <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   43294:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   43296:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   43298:	2b01      	cmp	r3, #1
   4329a:	bf0c      	ite	eq
   4329c:	2208      	moveq	r2, #8
   4329e:	2218      	movne	r2, #24
	ret = connect(client->transport.tls.sock, client->broker,
   432a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
	return z_impl_zsock_connect(sock, addr, addrlen);
   432a2:	f7fe fe8b 	bl	41fbc <z_impl_zsock_connect>
	if (ret < 0) {
   432a6:	2800      	cmp	r0, #0
   432a8:	dbda      	blt.n	43260 <mqtt_client_tls_connect+0x3a>
	return 0;
   432aa:	2000      	movs	r0, #0
   432ac:	e7cb      	b.n	43246 <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   432ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
   432b0:	2a00      	cmp	r2, #0
   432b2:	d0db      	beq.n	4326c <mqtt_client_tls_connect+0x46>
   432b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   432b6:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   432b8:	9200      	str	r2, [sp, #0]
   432ba:	f44f 718d 	mov.w	r1, #282	; 0x11a
   432be:	2203      	movs	r2, #3
   432c0:	f7fe fefd 	bl	420be <z_impl_zsock_setsockopt>
		if (ret < 0) {
   432c4:	2800      	cmp	r0, #0
   432c6:	dad1      	bge.n	4326c <mqtt_client_tls_connect+0x46>
   432c8:	e7ca      	b.n	43260 <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   432ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   432cc:	2a00      	cmp	r2, #0
   432ce:	d0cf      	beq.n	43270 <mqtt_client_tls_connect+0x4a>
   432d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   432d2:	0092      	lsls	r2, r2, #2
   432d4:	9200      	str	r2, [sp, #0]
   432d6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   432da:	2201      	movs	r2, #1
   432dc:	f7fe feef 	bl	420be <z_impl_zsock_setsockopt>
		if (ret < 0) {
   432e0:	2800      	cmp	r0, #0
   432e2:	dac5      	bge.n	43270 <mqtt_client_tls_connect+0x4a>
   432e4:	e7bc      	b.n	43260 <mqtt_client_tls_connect+0x3a>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   432e6:	4618      	mov	r0, r3
   432e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   432ea:	9303      	str	r3, [sp, #12]
   432ec:	f7d9 ffb6 	bl	1d25c <strlen>
   432f0:	2202      	movs	r2, #2
   432f2:	9000      	str	r0, [sp, #0]
   432f4:	f44f 718d 	mov.w	r1, #282	; 0x11a
   432f8:	4630      	mov	r0, r6
   432fa:	9b03      	ldr	r3, [sp, #12]
   432fc:	f7fe fedf 	bl	420be <z_impl_zsock_setsockopt>
		if (ret < 0) {
   43300:	2800      	cmp	r0, #0
   43302:	dab8      	bge.n	43276 <mqtt_client_tls_connect+0x50>
   43304:	e7ac      	b.n	43260 <mqtt_client_tls_connect+0x3a>

00043306 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   43306:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   4330a:	2400      	movs	r4, #0
{
   4330c:	4606      	mov	r6, r0
   4330e:	460f      	mov	r7, r1
   43310:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   43312:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   43314:	42ac      	cmp	r4, r5
   43316:	d301      	bcc.n	4331c <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   43318:	2000      	movs	r0, #0
   4331a:	e00d      	b.n	43338 <mqtt_client_tls_write+0x32>
		ret = send(client->transport.tls.sock, data + offset,
   4331c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   4331e:	2300      	movs	r3, #0
   43320:	e9cd 8800 	strd	r8, r8, [sp]
   43324:	1b2a      	subs	r2, r5, r4
   43326:	1939      	adds	r1, r7, r4
   43328:	f7fe fe5e 	bl	41fe8 <z_impl_zsock_sendto>
		if (ret < 0) {
   4332c:	1e03      	subs	r3, r0, #0
   4332e:	da06      	bge.n	4333e <mqtt_client_tls_write+0x38>
			return -errno;
   43330:	f7ff f99f 	bl	42672 <__errno>
   43334:	6800      	ldr	r0, [r0, #0]
   43336:	4240      	negs	r0, r0
}
   43338:	b002      	add	sp, #8
   4333a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   4333e:	441c      	add	r4, r3
   43340:	e7e8      	b.n	43314 <mqtt_client_tls_write+0xe>

00043342 <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   43342:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tls.sock, message, 0);
   43344:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   43346:	2200      	movs	r2, #0
   43348:	f7fe fe6b 	bl	42022 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   4334c:	2800      	cmp	r0, #0
   4334e:	da04      	bge.n	4335a <mqtt_client_tls_write_msg+0x18>
		return -errno;
   43350:	f7ff f98f 	bl	42672 <__errno>
   43354:	6800      	ldr	r0, [r0, #0]
   43356:	4240      	negs	r0, r0
	}

	return 0;
}
   43358:	bd08      	pop	{r3, pc}
	return 0;
   4335a:	2000      	movs	r0, #0
   4335c:	e7fc      	b.n	43358 <mqtt_client_tls_write_msg+0x16>

0004335e <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   4335e:	b513      	push	{r0, r1, r4, lr}
   43360:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   43362:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   43364:	bf14      	ite	ne
   43366:	4623      	movne	r3, r4
   43368:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   4336a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   4336c:	e9cd 4400 	strd	r4, r4, [sp]
   43370:	f7fe fe6d 	bl	4204e <z_impl_zsock_recvfrom>
	if (ret < 0) {
   43374:	2800      	cmp	r0, #0
   43376:	da03      	bge.n	43380 <mqtt_client_tls_read+0x22>
		return -errno;
   43378:	f7ff f97b 	bl	42672 <__errno>
   4337c:	6800      	ldr	r0, [r0, #0]
   4337e:	4240      	negs	r0, r0
	}

	return ret;
}
   43380:	b002      	add	sp, #8
   43382:	bd10      	pop	{r4, pc}

00043384 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   43384:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   43386:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   43388:	f7fe fe01 	bl	41f8e <z_impl_zsock_close>
	if (ret < 0) {
   4338c:	2800      	cmp	r0, #0
   4338e:	da04      	bge.n	4339a <mqtt_client_tls_disconnect+0x16>
		return -errno;
   43390:	f7ff f96f 	bl	42672 <__errno>
   43394:	6800      	ldr	r0, [r0, #0]
   43396:	4240      	negs	r0, r0
	}

	return 0;
}
   43398:	bd08      	pop	{r3, pc}
	return 0;
   4339a:	2000      	movs	r0, #0
   4339c:	e7fc      	b.n	43398 <mqtt_client_tls_disconnect+0x14>

0004339e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4339e:	6843      	ldr	r3, [r0, #4]
}
   433a0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   433a2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   433a4:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   433a6:	600b      	str	r3, [r1, #0]
}
   433a8:	4770      	bx	lr

000433aa <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   433aa:	6843      	ldr	r3, [r0, #4]
   433ac:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   433ae:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   433b0:	4042      	eors	r2, r0
   433b2:	400a      	ands	r2, r1
   433b4:	4042      	eors	r2, r0
    p_reg->OUT = value;
   433b6:	605a      	str	r2, [r3, #4]
}
   433b8:	2000      	movs	r0, #0
   433ba:	4770      	bx	lr

000433bc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   433bc:	6843      	ldr	r3, [r0, #4]
}
   433be:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   433c0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   433c2:	6099      	str	r1, [r3, #8]
}
   433c4:	4770      	bx	lr

000433c6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   433c6:	6843      	ldr	r3, [r0, #4]
}
   433c8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   433ca:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   433cc:	60d9      	str	r1, [r3, #12]
}
   433ce:	4770      	bx	lr

000433d0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   433d0:	6843      	ldr	r3, [r0, #4]
}
   433d2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   433d4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   433d6:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   433d8:	4059      	eors	r1, r3
    p_reg->OUT = value;
   433da:	6051      	str	r1, [r2, #4]
}
   433dc:	4770      	bx	lr

000433de <nrf_gpio_cfg_sense_set>:
{
   433de:	b513      	push	{r0, r1, r4, lr}
   433e0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   433e2:	a801      	add	r0, sp, #4
{
   433e4:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   433e6:	f7e4 fe3b 	bl	28060 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   433ea:	9b01      	ldr	r3, [sp, #4]
   433ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   433f0:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   433f4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   433f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   433fc:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   43400:	b002      	add	sp, #8
   43402:	bd10      	pop	{r4, pc}

00043404 <flash_nrf_write_protection>:
}
   43404:	2000      	movs	r0, #0
   43406:	4770      	bx	lr

00043408 <is_regular_addr_valid>:
{
   43408:	b538      	push	{r3, r4, r5, lr}
   4340a:	4604      	mov	r4, r0
   4340c:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   4340e:	f001 fa6d 	bl	448ec <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   43412:	4284      	cmp	r4, r0
   43414:	d209      	bcs.n	4342a <is_regular_addr_valid+0x22>
   43416:	2c00      	cmp	r4, #0
   43418:	db07      	blt.n	4342a <is_regular_addr_valid+0x22>
	    addr < 0 ||
   4341a:	42a8      	cmp	r0, r5
   4341c:	d305      	bcc.n	4342a <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   4341e:	1961      	adds	r1, r4, r5
	    len > flash_size ||
   43420:	4281      	cmp	r1, r0
   43422:	bf8c      	ite	hi
   43424:	2000      	movhi	r0, #0
   43426:	2001      	movls	r0, #1
}
   43428:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   4342a:	2000      	movs	r0, #0
   4342c:	e7fc      	b.n	43428 <is_regular_addr_valid+0x20>

0004342e <flash_nrf_read>:
{
   4342e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   43430:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   43432:	4619      	mov	r1, r3
   43434:	4620      	mov	r0, r4
{
   43436:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   43438:	9301      	str	r3, [sp, #4]
   4343a:	f7ff ffe5 	bl	43408 <is_regular_addr_valid>
   4343e:	b180      	cbz	r0, 43462 <flash_nrf_read+0x34>
	if (!len) {
   43440:	9a01      	ldr	r2, [sp, #4]
   43442:	b18a      	cbz	r2, 43468 <flash_nrf_read+0x3a>
	if (addr < PM_APP_ADDRESS) {
   43444:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   43448:	4621      	mov	r1, r4
   4344a:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   4344c:	da04      	bge.n	43458 <flash_nrf_read+0x2a>
}
   4344e:	b003      	add	sp, #12
   43450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return spm_request_read(data, addr, len);
   43454:	f7ff b8ae 	b.w	425b4 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   43458:	f001 fc45 	bl	44ce6 <memcpy>
   4345c:	2000      	movs	r0, #0
}
   4345e:	b003      	add	sp, #12
   43460:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   43462:	f06f 0015 	mvn.w	r0, #21
   43466:	e7fa      	b.n	4345e <flash_nrf_read+0x30>
		return 0;
   43468:	4610      	mov	r0, r2
   4346a:	e7f8      	b.n	4345e <flash_nrf_read+0x30>

0004346c <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   4346c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   43470:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   43472:	6883      	ldr	r3, [r0, #8]
{
   43474:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   43476:	695b      	ldr	r3, [r3, #20]
   43478:	4669      	mov	r1, sp
{
   4347a:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   4347c:	aa01      	add	r2, sp, #4
   4347e:	4798      	blx	r3

	while (layout_size--) {
   43480:	e9dd 1000 	ldrd	r1, r0, [sp]
   43484:	2300      	movs	r3, #0
	off_t end = 0;
   43486:	461d      	mov	r5, r3
	off_t group_offs = 0;
   43488:	469e      	mov	lr, r3
	size_t page_count = 0;
   4348a:	469c      	mov	ip, r3
   4348c:	f100 38ff 	add.w	r8, r0, #4294967295
	while (layout_size--) {
   43490:	f1b8 3fff 	cmp.w	r8, #4294967295
   43494:	d102      	bne.n	4349c <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   43496:	f06f 0015 	mvn.w	r0, #21
   4349a:	e018      	b.n	434ce <flash_get_page_info+0x62>
		if (use_addr) {
   4349c:	680a      	ldr	r2, [r1, #0]
   4349e:	b1cf      	cbz	r7, 434d4 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   434a0:	6848      	ldr	r0, [r1, #4]
   434a2:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   434a6:	42a5      	cmp	r5, r4
   434a8:	f108 38ff 	add.w	r8, r8, #4294967295
   434ac:	dd17      	ble.n	434de <flash_get_page_info+0x72>
   434ae:	b103      	cbz	r3, 434b2 <flash_get_page_info+0x46>
   434b0:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   434b2:	9b00      	ldr	r3, [sp, #0]
   434b4:	685b      	ldr	r3, [r3, #4]
   434b6:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   434b8:	b177      	cbz	r7, 434d8 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   434ba:	eba4 040e 	sub.w	r4, r4, lr
   434be:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   434c2:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   434c4:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   434c8:	4464      	add	r4, ip
			info->start_offset = group_offs +
   434ca:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   434cc:	60b4      	str	r4, [r6, #8]
}
   434ce:	b002      	add	sp, #8
   434d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   434d4:	4415      	add	r5, r2
   434d6:	e7e6      	b.n	434a6 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   434d8:	eba4 040c 	sub.w	r4, r4, ip
   434dc:	e7f1      	b.n	434c2 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   434de:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   434e0:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   434e2:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   434e6:	3108      	adds	r1, #8
   434e8:	2301      	movs	r3, #1
   434ea:	e7d1      	b.n	43490 <flash_get_page_info+0x24>

000434ec <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   434ec:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   434ee:	2201      	movs	r2, #1
   434f0:	f7ff bfbc 	b.w	4346c <flash_get_page_info>

000434f4 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   434f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   434f8:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   434fa:	6883      	ldr	r3, [r0, #8]
{
   434fc:	b086      	sub	sp, #24
   434fe:	4688      	mov	r8, r1
   43500:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   43502:	695b      	ldr	r3, [r3, #20]
   43504:	aa02      	add	r2, sp, #8
   43506:	a901      	add	r1, sp, #4
   43508:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   4350a:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   4350c:	4625      	mov	r5, r4
   4350e:	9b02      	ldr	r3, [sp, #8]
   43510:	42ab      	cmp	r3, r5
   43512:	d802      	bhi.n	4351a <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   43514:	b006      	add	sp, #24
   43516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   4351a:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   4351c:	9f01      	ldr	r7, [sp, #4]
   4351e:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   43522:	687b      	ldr	r3, [r7, #4]
   43524:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   43526:	683a      	ldr	r2, [r7, #0]
   43528:	eb0a 0306 	add.w	r3, sl, r6
   4352c:	42b2      	cmp	r2, r6
   4352e:	d802      	bhi.n	43536 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   43530:	469a      	mov	sl, r3
   43532:	3501      	adds	r5, #1
   43534:	e7eb      	b.n	4350e <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   43536:	4649      	mov	r1, r9
   43538:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   4353a:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   4353c:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   4353e:	47c0      	blx	r8
   43540:	2800      	cmp	r0, #0
   43542:	d0e7      	beq.n	43514 <flash_page_foreach+0x20>
			off += page_info.size;
   43544:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   43546:	3601      	adds	r6, #1
			off += page_info.size;
   43548:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   4354a:	e7ec      	b.n	43526 <flash_page_foreach+0x32>

0004354c <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   4354c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   4354e:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   43550:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   43552:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   43554:	7b91      	ldrb	r1, [r2, #14]
   43556:	b159      	cbz	r1, 43570 <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43558:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   4355c:	b141      	cbz	r1, 43570 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   4355e:	f44f 7180 	mov.w	r1, #256	; 0x100
   43562:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43566:	2101      	movs	r1, #1
   43568:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   4356a:	2300      	movs	r3, #0
   4356c:	7393      	strb	r3, [r2, #14]
		return;
   4356e:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43570:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   43574:	b121      	cbz	r1, 43580 <uarte_nrfx_isr_int+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43576:	2100      	movs	r1, #0
   43578:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   4357c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   43580:	6813      	ldr	r3, [r2, #0]
   43582:	b10b      	cbz	r3, 43588 <uarte_nrfx_isr_int+0x3c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   43584:	6851      	ldr	r1, [r2, #4]
   43586:	4718      	bx	r3
}
   43588:	4770      	bx	lr

0004358a <uarte_nrfx_config_get>:
{
   4358a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   4358c:	68c2      	ldr	r2, [r0, #12]
   4358e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   43592:	e883 0003 	stmia.w	r3, {r0, r1}
}
   43596:	2000      	movs	r0, #0
   43598:	4770      	bx	lr

0004359a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   4359a:	6843      	ldr	r3, [r0, #4]
   4359c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   4359e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   435a2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   435a6:	4770      	bx	lr

000435a8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   435a8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   435aa:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   435ac:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   435ae:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   435b2:	b148      	cbz	r0, 435c8 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   435b4:	2000      	movs	r0, #0
	*c = data->rx_data;
   435b6:	7d12      	ldrb	r2, [r2, #20]
   435b8:	700a      	strb	r2, [r1, #0]
   435ba:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   435be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   435c2:	2201      	movs	r2, #1
   435c4:	601a      	str	r2, [r3, #0]
	return 0;
   435c6:	4770      	bx	lr
		return -1;
   435c8:	f04f 30ff 	mov.w	r0, #4294967295
}
   435cc:	4770      	bx	lr

000435ce <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   435ce:	6843      	ldr	r3, [r0, #4]
{
   435d0:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   435d2:	681c      	ldr	r4, [r3, #0]
{
   435d4:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   435d6:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   435da:	b1a0      	cbz	r0, 43606 <uarte_nrfx_fifo_fill+0x38>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   435dc:	68ed      	ldr	r5, [r5, #12]
	if (len > data->int_driven->tx_buff_size) {
   435de:	68eb      	ldr	r3, [r5, #12]
   435e0:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   435e2:	2300      	movs	r3, #0
   435e4:	4290      	cmp	r0, r2
   435e6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   435ea:	bfa8      	it	ge
   435ec:	4610      	movge	r0, r2
   435ee:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   435f2:	68ea      	ldr	r2, [r5, #12]
   435f4:	4283      	cmp	r3, r0
   435f6:	6892      	ldr	r2, [r2, #8]
   435f8:	db06      	blt.n	43608 <uarte_nrfx_fifo_fill+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   435fa:	2301      	movs	r3, #1

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   435fc:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   43600:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43604:	60a3      	str	r3, [r4, #8]
}
   43606:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   43608:	5cce      	ldrb	r6, [r1, r3]
   4360a:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   4360c:	3301      	adds	r3, #1
   4360e:	e7f0      	b.n	435f2 <uarte_nrfx_fifo_fill+0x24>

00043610 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   43610:	6843      	ldr	r3, [r0, #4]
   43612:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43614:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   43618:	b153      	cbz	r3, 43630 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   4361a:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4361c:	2000      	movs	r0, #0
   4361e:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   43622:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43626:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   43628:	7d1b      	ldrb	r3, [r3, #20]
   4362a:	700b      	strb	r3, [r1, #0]
   4362c:	6010      	str	r0, [r2, #0]
}
   4362e:	4770      	bx	lr
	int num_rx = 0;
   43630:	4618      	mov	r0, r3
}
   43632:	4770      	bx	lr

00043634 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   43634:	2100      	movs	r1, #0
   43636:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   43638:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   4363a:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   4363c:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   4363e:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   43640:	f44f 7280 	mov.w	r2, #256	; 0x100
   43644:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   43648:	4770      	bx	lr

0004364a <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   4364a:	2201      	movs	r2, #1
   4364c:	68c3      	ldr	r3, [r0, #12]
   4364e:	68db      	ldr	r3, [r3, #12]
   43650:	739a      	strb	r2, [r3, #14]
}
   43652:	4770      	bx	lr

00043654 <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   43654:	68c3      	ldr	r3, [r0, #12]
   43656:	68db      	ldr	r3, [r3, #12]
   43658:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   4365a:	b94b      	cbnz	r3, 43670 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   4365c:	6843      	ldr	r3, [r0, #4]
   4365e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43660:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   43664:	b128      	cbz	r0, 43672 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   43666:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   4366a:	f3c0 2000 	ubfx	r0, r0, #8, #1
   4366e:	4770      	bx	lr
   43670:	2000      	movs	r0, #0
}
   43672:	4770      	bx	lr

00043674 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   43674:	6843      	ldr	r3, [r0, #4]
   43676:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43678:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   4367c:	3800      	subs	r0, #0
   4367e:	bf18      	it	ne
   43680:	2001      	movne	r0, #1
   43682:	4770      	bx	lr

00043684 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   43684:	2210      	movs	r2, #16
	return config->uarte_regs;
   43686:	6843      	ldr	r3, [r0, #4]
   43688:	681b      	ldr	r3, [r3, #0]
   4368a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   4368e:	4770      	bx	lr

00043690 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   43690:	2210      	movs	r2, #16
	return config->uarte_regs;
   43692:	6843      	ldr	r3, [r0, #4]
   43694:	681b      	ldr	r3, [r3, #0]
   43696:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   4369a:	4770      	bx	lr

0004369c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   4369c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   436a0:	6843      	ldr	r3, [r0, #4]
   436a2:	681b      	ldr	r3, [r3, #0]
   436a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   436a8:	4770      	bx	lr

000436aa <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   436aa:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   436ae:	6843      	ldr	r3, [r0, #4]
   436b0:	681b      	ldr	r3, [r3, #0]
   436b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   436b6:	4770      	bx	lr

000436b8 <uarte_nrfx_irq_update>:
}
   436b8:	2001      	movs	r0, #1
   436ba:	4770      	bx	lr

000436bc <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   436bc:	68c3      	ldr	r3, [r0, #12]
   436be:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   436c0:	e9c3 1200 	strd	r1, r2, [r3]
}
   436c4:	4770      	bx	lr

000436c6 <uarte_nrfx_irq_is_pending>:
{
   436c6:	b508      	push	{r3, lr}
	return config->uarte_regs;
   436c8:	6843      	ldr	r3, [r0, #4]
{
   436ca:	4602      	mov	r2, r0
	return config->uarte_regs;
   436cc:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   436ce:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   436d2:	05db      	lsls	r3, r3, #23
   436d4:	d405      	bmi.n	436e2 <uarte_nrfx_irq_is_pending+0x1c>
   436d6:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   436da:	f010 0010 	ands.w	r0, r0, #16
   436de:	d106      	bne.n	436ee <uarte_nrfx_irq_is_pending+0x28>
}
   436e0:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   436e2:	f7ff ffb7 	bl	43654 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   436e6:	2800      	cmp	r0, #0
   436e8:	d0f5      	beq.n	436d6 <uarte_nrfx_irq_is_pending+0x10>
		||
   436ea:	2001      	movs	r0, #1
   436ec:	e7f8      	b.n	436e0 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   436ee:	4610      	mov	r0, r2
   436f0:	f7ff ffc0 	bl	43674 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   436f4:	3800      	subs	r0, #0
   436f6:	bf18      	it	ne
   436f8:	2001      	movne	r0, #1
   436fa:	e7f1      	b.n	436e0 <uarte_nrfx_irq_is_pending+0x1a>

000436fc <uarte_nrfx_poll_out>:
{
   436fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   43700:	6843      	ldr	r3, [r0, #4]
{
   43702:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   43706:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   43708:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   4370a:	f001 f99d 	bl	44a48 <k_is_in_isr>
   4370e:	bb98      	cbnz	r0, 43778 <uarte_nrfx_poll_out+0x7c>
		lock = &data->poll_out_lock;
   43710:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   43712:	f04f 0801 	mov.w	r8, #1
   43716:	f106 0710 	add.w	r7, r6, #16
   4371a:	e8d7 3fef 	ldaex	r3, [r7]
   4371e:	2b00      	cmp	r3, #0
   43720:	d103      	bne.n	4372a <uarte_nrfx_poll_out+0x2e>
   43722:	e8c7 8fe2 	stlex	r2, r8, [r7]
   43726:	2a00      	cmp	r2, #0
   43728:	d1f7      	bne.n	4371a <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   4372a:	d007      	beq.n	4373c <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   4372c:	2021      	movs	r0, #33	; 0x21
   4372e:	2100      	movs	r1, #0
   43730:	3d01      	subs	r5, #1
   43732:	f7fa f9a5 	bl	3da80 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   43736:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   4373a:	d1ee      	bne.n	4371a <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4373c:	2300      	movs	r3, #0
   4373e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   43742:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   43746:	f10d 0307 	add.w	r3, sp, #7
   4374a:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   4374e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43750:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   43754:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43758:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4375a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   4375e:	b923      	cbnz	r3, 4376a <uarte_nrfx_poll_out+0x6e>
   43760:	2001      	movs	r0, #1
   43762:	f001 f8c1 	bl	448e8 <nrfx_busy_wait>
   43766:	3d01      	subs	r5, #1
   43768:	d1f7      	bne.n	4375a <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4376a:	2301      	movs	r3, #1
   4376c:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   4376e:	2300      	movs	r3, #0
   43770:	6133      	str	r3, [r6, #16]
}
   43772:	b002      	add	sp, #8
   43774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   43778:	2301      	movs	r3, #1
   4377a:	6133      	str	r3, [r6, #16]
   4377c:	e7de      	b.n	4373c <uarte_nrfx_poll_out+0x40>

0004377e <uarte_instance_init.constprop.0>:
static int uarte_instance_init(const struct device *dev,
   4377e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   43782:	f04f 0800 	mov.w	r8, #0
	return config->uarte_regs;
   43786:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   43788:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   4378a:	681c      	ldr	r4, [r3, #0]
   4378c:	680b      	ldr	r3, [r1, #0]
   4378e:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   43792:	4606      	mov	r6, r0
	data->dev = dev;
   43794:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   43796:	a801      	add	r0, sp, #4
static int uarte_instance_init(const struct device *dev,
   43798:	460d      	mov	r5, r1
   4379a:	9301      	str	r3, [sp, #4]
   4379c:	f7e4 fff4 	bl	28788 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   437a0:	2301      	movs	r3, #1
   437a2:	9a01      	ldr	r2, [sp, #4]
   437a4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   437a6:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   437a8:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   437aa:	a801      	add	r0, sp, #4
   437ac:	9301      	str	r3, [sp, #4]
   437ae:	f7e4 ffeb 	bl	28788 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   437b2:	2203      	movs	r2, #3
   437b4:	9b01      	ldr	r3, [sp, #4]
   437b6:	3380      	adds	r3, #128	; 0x80
   437b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   437bc:	686b      	ldr	r3, [r5, #4]
   437be:	1c58      	adds	r0, r3, #1
   437c0:	d007      	beq.n	437d2 <uarte_instance_init.constprop.0+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   437c2:	a801      	add	r0, sp, #4
   437c4:	9301      	str	r3, [sp, #4]
   437c6:	f7e4 ffdf 	bl	28788 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   437ca:	9b01      	ldr	r3, [sp, #4]
   437cc:	3380      	adds	r3, #128	; 0x80
   437ce:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   437d2:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   437d6:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   437da:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   437de:	68ab      	ldr	r3, [r5, #8]
   437e0:	1c59      	adds	r1, r3, #1
   437e2:	d008      	beq.n	437f6 <uarte_instance_init.constprop.0+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   437e4:	a801      	add	r0, sp, #4
   437e6:	9301      	str	r3, [sp, #4]
   437e8:	f7e4 ffce 	bl	28788 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   437ec:	2200      	movs	r2, #0
   437ee:	9b01      	ldr	r3, [sp, #4]
   437f0:	3380      	adds	r3, #128	; 0x80
   437f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   437f6:	68eb      	ldr	r3, [r5, #12]
   437f8:	1c5a      	adds	r2, r3, #1
   437fa:	d011      	beq.n	43820 <uarte_instance_init.constprop.0+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   437fc:	a801      	add	r0, sp, #4
   437fe:	9301      	str	r3, [sp, #4]
   43800:	f7e4 ffc2 	bl	28788 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   43804:	2301      	movs	r3, #1
   43806:	9a01      	ldr	r2, [sp, #4]
   43808:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   4380a:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   4380c:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4380e:	a801      	add	r0, sp, #4
   43810:	9301      	str	r3, [sp, #4]
   43812:	f7e4 ffb9 	bl	28788 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   43816:	2203      	movs	r2, #3
   43818:	9b01      	ldr	r3, [sp, #4]
   4381a:	3380      	adds	r3, #128	; 0x80
   4381c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   43820:	68f1      	ldr	r1, [r6, #12]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   43822:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   43826:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   43828:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   4382c:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   4382e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   43832:	f7e4 fef3 	bl	2861c <uarte_nrfx_configure>
	if (err) {
   43836:	b9d8      	cbnz	r0, 43870 <uarte_instance_init.constprop.0+0xf2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   43838:	2308      	movs	r3, #8
   4383a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   4383e:	686b      	ldr	r3, [r5, #4]
   43840:	3301      	adds	r3, #1
   43842:	d00b      	beq.n	4385c <uarte_instance_init.constprop.0+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43844:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   43848:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   4384c:	f107 0314 	add.w	r3, r7, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   43850:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   43854:	2301      	movs	r3, #1
   43856:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4385a:	6023      	str	r3, [r4, #0]
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   4385c:	68fb      	ldr	r3, [r7, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   4385e:	689b      	ldr	r3, [r3, #8]
   43860:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   43864:	2300      	movs	r3, #0
   43866:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4386a:	2301      	movs	r3, #1
   4386c:	60a3      	str	r3, [r4, #8]
   4386e:	60e3      	str	r3, [r4, #12]
}
   43870:	b002      	add	sp, #8
   43872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00043876 <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   43876:	2000      	movs	r0, #0
   43878:	4770      	bx	lr

0004387a <parse_hex4>:
    for (i = 0; i < 4; i++)
   4387a:	2200      	movs	r2, #0
{
   4387c:	b510      	push	{r4, lr}
   4387e:	4604      	mov	r4, r0
    unsigned int h = 0;
   43880:	4610      	mov	r0, r2
        if ((input[i] >= '0') && (input[i] <= '9'))
   43882:	5ca1      	ldrb	r1, [r4, r2]
   43884:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   43888:	2b09      	cmp	r3, #9
   4388a:	d80b      	bhi.n	438a4 <parse_hex4+0x2a>
            h += (unsigned int) input[i] - '0';
   4388c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        if (i < 3)
   43890:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   43892:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   43896:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   4389a:	bf18      	it	ne
   4389c:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   4389e:	2a04      	cmp	r2, #4
   438a0:	d1ef      	bne.n	43882 <parse_hex4+0x8>
}
   438a2:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   438a4:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   438a8:	2b05      	cmp	r3, #5
   438aa:	d802      	bhi.n	438b2 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   438ac:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   438b0:	e7ee      	b.n	43890 <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   438b2:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   438b6:	2b05      	cmp	r3, #5
   438b8:	d802      	bhi.n	438c0 <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   438ba:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   438be:	e7e7      	b.n	43890 <parse_hex4+0x16>
            return 0;
   438c0:	2000      	movs	r0, #0
   438c2:	e7ee      	b.n	438a2 <parse_hex4+0x28>

000438c4 <buffer_skip_whitespace>:
{
   438c4:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   438c6:	b140      	cbz	r0, 438da <buffer_skip_whitespace+0x16>
   438c8:	6801      	ldr	r1, [r0, #0]
   438ca:	b171      	cbz	r1, 438ea <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   438cc:	6842      	ldr	r2, [r0, #4]
   438ce:	6883      	ldr	r3, [r0, #8]
   438d0:	4293      	cmp	r3, r2
   438d2:	d206      	bcs.n	438e2 <buffer_skip_whitespace+0x1e>
   438d4:	5ccc      	ldrb	r4, [r1, r3]
   438d6:	2c20      	cmp	r4, #32
   438d8:	d900      	bls.n	438dc <buffer_skip_whitespace+0x18>
}
   438da:	bd10      	pop	{r4, pc}
       buffer->offset++;
   438dc:	3301      	adds	r3, #1
   438de:	6083      	str	r3, [r0, #8]
   438e0:	e7f5      	b.n	438ce <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   438e2:	d1fa      	bne.n	438da <buffer_skip_whitespace+0x16>
        buffer->offset--;
   438e4:	3a01      	subs	r2, #1
   438e6:	6082      	str	r2, [r0, #8]
   438e8:	e7f7      	b.n	438da <buffer_skip_whitespace+0x16>
        return NULL;
   438ea:	4608      	mov	r0, r1
   438ec:	e7f5      	b.n	438da <buffer_skip_whitespace+0x16>

000438ee <update_offset>:
{
   438ee:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   438f0:	4604      	mov	r4, r0
   438f2:	b140      	cbz	r0, 43906 <update_offset+0x18>
   438f4:	6803      	ldr	r3, [r0, #0]
   438f6:	b133      	cbz	r3, 43906 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   438f8:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   438fa:	4418      	add	r0, r3
   438fc:	f7d9 fcae 	bl	1d25c <strlen>
   43900:	68a3      	ldr	r3, [r4, #8]
   43902:	4418      	add	r0, r3
   43904:	60a0      	str	r0, [r4, #8]
}
   43906:	bd10      	pop	{r4, pc}

00043908 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   43908:	b161      	cbz	r1, 43924 <add_item_to_array+0x1c>
   4390a:	b160      	cbz	r0, 43926 <add_item_to_array+0x1e>
    child = array->child;
   4390c:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   4390e:	b913      	cbnz	r3, 43916 <add_item_to_array+0xe>
        array->child = item;
   43910:	6081      	str	r1, [r0, #8]
}
   43912:	2001      	movs	r0, #1
   43914:	4770      	bx	lr
        while (child->next)
   43916:	461a      	mov	r2, r3
   43918:	681b      	ldr	r3, [r3, #0]
   4391a:	2b00      	cmp	r3, #0
   4391c:	d1fb      	bne.n	43916 <add_item_to_array+0xe>
    prev->next = item;
   4391e:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   43920:	604a      	str	r2, [r1, #4]
   43922:	e7f6      	b.n	43912 <add_item_to_array+0xa>
        return false;
   43924:	4608      	mov	r0, r1
}
   43926:	4770      	bx	lr

00043928 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   43928:	4603      	mov	r3, r0
   4392a:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   4392c:	2028      	movs	r0, #40	; 0x28
   4392e:	4798      	blx	r3
    if (node)
   43930:	4604      	mov	r4, r0
   43932:	b118      	cbz	r0, 4393c <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   43934:	2228      	movs	r2, #40	; 0x28
   43936:	2100      	movs	r1, #0
   43938:	f001 f9f5 	bl	44d26 <memset>
}
   4393c:	4620      	mov	r0, r4
   4393e:	bd10      	pop	{r4, pc}

00043940 <ensure>:
{
   43940:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   43942:	4604      	mov	r4, r0
   43944:	b1b8      	cbz	r0, 43976 <ensure+0x36>
   43946:	6805      	ldr	r5, [r0, #0]
   43948:	b165      	cbz	r5, 43964 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   4394a:	6842      	ldr	r2, [r0, #4]
   4394c:	b112      	cbz	r2, 43954 <ensure+0x14>
   4394e:	6883      	ldr	r3, [r0, #8]
   43950:	429a      	cmp	r2, r3
   43952:	d910      	bls.n	43976 <ensure+0x36>
    if (needed > INT_MAX)
   43954:	2900      	cmp	r1, #0
   43956:	db0e      	blt.n	43976 <ensure+0x36>
    needed += p->offset + 1;
   43958:	68a0      	ldr	r0, [r4, #8]
   4395a:	4401      	add	r1, r0
   4395c:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   4395e:	429a      	cmp	r2, r3
   43960:	d302      	bcc.n	43968 <ensure+0x28>
        return p->buffer + p->offset;
   43962:	4405      	add	r5, r0
}
   43964:	4628      	mov	r0, r5
   43966:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   43968:	6922      	ldr	r2, [r4, #16]
   4396a:	b922      	cbnz	r2, 43976 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   4396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   43970:	d303      	bcc.n	4397a <ensure+0x3a>
        if (needed <= INT_MAX)
   43972:	2b00      	cmp	r3, #0
   43974:	da0f      	bge.n	43996 <ensure+0x56>
        return NULL;
   43976:	2500      	movs	r5, #0
   43978:	e7f4      	b.n	43964 <ensure+0x24>
        newsize = needed + 1;
   4397a:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   4397c:	6a23      	ldr	r3, [r4, #32]
   4397e:	b16b      	cbz	r3, 4399c <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   43980:	4628      	mov	r0, r5
   43982:	4631      	mov	r1, r6
   43984:	4798      	blx	r3
        if (newbuffer == NULL)
   43986:	4605      	mov	r5, r0
   43988:	b9b0      	cbnz	r0, 439b8 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   4398a:	69e3      	ldr	r3, [r4, #28]
   4398c:	6820      	ldr	r0, [r4, #0]
   4398e:	4798      	blx	r3
            p->buffer = NULL;
   43990:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   43994:	e7e6      	b.n	43964 <ensure+0x24>
            newsize = INT_MAX;
   43996:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   4399a:	e7ef      	b.n	4397c <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   4399c:	4630      	mov	r0, r6
   4399e:	69a3      	ldr	r3, [r4, #24]
   439a0:	4798      	blx	r3
        if (!newbuffer)
   439a2:	4605      	mov	r5, r0
   439a4:	2800      	cmp	r0, #0
   439a6:	d0f0      	beq.n	4398a <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   439a8:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   439aa:	6821      	ldr	r1, [r4, #0]
   439ac:	3201      	adds	r2, #1
   439ae:	f001 f99a 	bl	44ce6 <memcpy>
        p->hooks.deallocate(p->buffer);
   439b2:	69e3      	ldr	r3, [r4, #28]
   439b4:	6820      	ldr	r0, [r4, #0]
   439b6:	4798      	blx	r3
    return newbuffer + p->offset;
   439b8:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   439ba:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   439be:	441d      	add	r5, r3
   439c0:	e7d0      	b.n	43964 <ensure+0x24>

000439c2 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   439c2:	2200      	movs	r2, #0
   439c4:	4611      	mov	r1, r2
   439c6:	f7e5 bbeb 	b.w	291a0 <cJSON_ParseWithOpts>

000439ca <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   439ca:	2100      	movs	r1, #0
   439cc:	f7e5 bb54 	b.w	29078 <print.constprop.0>

000439d0 <cJSON_GetArraySize>:
    if (array == NULL)
   439d0:	b110      	cbz	r0, 439d8 <cJSON_GetArraySize+0x8>
    child = array->child;
   439d2:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   439d4:	2000      	movs	r0, #0
    while(child != NULL)
   439d6:	b903      	cbnz	r3, 439da <cJSON_GetArraySize+0xa>
}
   439d8:	4770      	bx	lr
        child = child->next;
   439da:	681b      	ldr	r3, [r3, #0]
        size++;
   439dc:	3001      	adds	r0, #1
        child = child->next;
   439de:	e7fa      	b.n	439d6 <cJSON_GetArraySize+0x6>

000439e0 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   439e0:	2200      	movs	r2, #0
   439e2:	f7e5 b873 	b.w	28acc <get_object_item>

000439e6 <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, true);
   439e6:	2201      	movs	r2, #1
   439e8:	f7e5 b870 	b.w	28acc <get_object_item>

000439ec <cJSON_HasObjectItem>:
{
   439ec:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   439ee:	f7ff fff7 	bl	439e0 <cJSON_GetObjectItem>
}
   439f2:	3800      	subs	r0, #0
   439f4:	bf18      	it	ne
   439f6:	2001      	movne	r0, #1
   439f8:	bd08      	pop	{r3, pc}

000439fa <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   439fa:	f7ff bf85 	b.w	43908 <add_item_to_array>

000439fe <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   439fe:	2300      	movs	r3, #0
   43a00:	f7e5 bb12 	b.w	29028 <add_item_to_object.constprop.0>

00043a04 <cJSON_DetachItemViaPointer>:
    if ((parent == NULL) || (item == NULL))
   43a04:	b180      	cbz	r0, 43a28 <cJSON_DetachItemViaPointer+0x24>
   43a06:	b169      	cbz	r1, 43a24 <cJSON_DetachItemViaPointer+0x20>
    if (item->prev != NULL)
   43a08:	684a      	ldr	r2, [r1, #4]
   43a0a:	b10a      	cbz	r2, 43a10 <cJSON_DetachItemViaPointer+0xc>
   43a0c:	680b      	ldr	r3, [r1, #0]
        item->prev->next = item->next;
   43a0e:	6013      	str	r3, [r2, #0]
    if (item->next != NULL)
   43a10:	680b      	ldr	r3, [r1, #0]
   43a12:	b103      	cbz	r3, 43a16 <cJSON_DetachItemViaPointer+0x12>
        item->next->prev = item->prev;
   43a14:	605a      	str	r2, [r3, #4]
    if (item == parent->child)
   43a16:	6882      	ldr	r2, [r0, #8]
   43a18:	428a      	cmp	r2, r1
        parent->child = item->next;
   43a1a:	bf08      	it	eq
   43a1c:	6083      	streq	r3, [r0, #8]
    item->prev = NULL;
   43a1e:	2300      	movs	r3, #0
    item->next = NULL;
   43a20:	e9c1 3300 	strd	r3, r3, [r1]
}
   43a24:	4608      	mov	r0, r1
   43a26:	4770      	bx	lr
        return NULL;
   43a28:	4601      	mov	r1, r0
   43a2a:	e7fb      	b.n	43a24 <cJSON_DetachItemViaPointer+0x20>

00043a2c <cJSON_DetachItemFromObject>:
{
   43a2c:	b510      	push	{r4, lr}
   43a2e:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   43a30:	f7ff ffd6 	bl	439e0 <cJSON_GetObjectItem>
   43a34:	4601      	mov	r1, r0
    return cJSON_DetachItemViaPointer(object, to_detach);
   43a36:	4620      	mov	r0, r4
}
   43a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   43a3c:	f7ff bfe2 	b.w	43a04 <cJSON_DetachItemViaPointer>

00043a40 <cJSON_IsTrue>:
    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
    if (item == NULL)
   43a40:	b118      	cbz	r0, 43a4a <cJSON_IsTrue+0xa>
    {
        return false;
    }

    return (item->type & 0xff) == cJSON_True;
   43a42:	7b00      	ldrb	r0, [r0, #12]
   43a44:	1e83      	subs	r3, r0, #2
   43a46:	4258      	negs	r0, r3
   43a48:	4158      	adcs	r0, r3
}
   43a4a:	4770      	bx	lr

00043a4c <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
   43a4c:	b120      	cbz	r0, 43a58 <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
   43a4e:	68c0      	ldr	r0, [r0, #12]
   43a50:	f010 0003 	ands.w	r0, r0, #3
   43a54:	bf18      	it	ne
   43a56:	2001      	movne	r0, #1
}
   43a58:	4770      	bx	lr

00043a5a <cJSON_IsNull>:
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
    if (item == NULL)
   43a5a:	b118      	cbz	r0, 43a64 <cJSON_IsNull+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_NULL;
   43a5c:	7b00      	ldrb	r0, [r0, #12]
   43a5e:	1f03      	subs	r3, r0, #4
   43a60:	4258      	negs	r0, r3
   43a62:	4158      	adcs	r0, r3
}
   43a64:	4770      	bx	lr

00043a66 <cJSON_IsNumber>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   43a66:	b120      	cbz	r0, 43a72 <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   43a68:	7b00      	ldrb	r0, [r0, #12]
   43a6a:	f1a0 0308 	sub.w	r3, r0, #8
   43a6e:	4258      	negs	r0, r3
   43a70:	4158      	adcs	r0, r3
}
   43a72:	4770      	bx	lr

00043a74 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   43a74:	b120      	cbz	r0, 43a80 <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   43a76:	7b00      	ldrb	r0, [r0, #12]
   43a78:	f1a0 0310 	sub.w	r3, r0, #16
   43a7c:	4258      	negs	r0, r3
   43a7e:	4158      	adcs	r0, r3
}
   43a80:	4770      	bx	lr

00043a82 <cJSON_GetStringValue>:
CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {
   43a82:	b508      	push	{r3, lr}
   43a84:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) {
   43a86:	f7ff fff5 	bl	43a74 <cJSON_IsString>
   43a8a:	b100      	cbz	r0, 43a8e <cJSON_GetStringValue+0xc>
    return item->valuestring;
   43a8c:	6910      	ldr	r0, [r2, #16]
}
   43a8e:	bd08      	pop	{r3, pc}

00043a90 <cJSON_IsObject>:
    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
    if (item == NULL)
   43a90:	b120      	cbz	r0, 43a9c <cJSON_IsObject+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Object;
   43a92:	7b00      	ldrb	r0, [r0, #12]
   43a94:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   43a98:	4258      	negs	r0, r3
   43a9a:	4158      	adcs	r0, r3
}
   43a9c:	4770      	bx	lr

00043a9e <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   43a9e:	f001 b8e5 	b.w	44c6c <k_free>

00043aa2 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   43aa2:	f7fb ba63 	b.w	3ef6c <k_malloc>

00043aa6 <bsdlib_shutdown>:

int bsdlib_shutdown(void)
{
   43aa6:	b508      	push	{r3, lr}
#ifdef CONFIG_LTE_LINK_CONTROL
	lte_lc_deinit();
   43aa8:	f7e7 fef6 	bl	2b898 <lte_lc_deinit>
#endif
	bsd_shutdown();
   43aac:	f7f5 fab4 	bl	39018 <bsd_shutdown>

	return 0;
}
   43ab0:	2000      	movs	r0, #0
   43ab2:	bd08      	pop	{r3, pc}

00043ab4 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   43ab4:	4668      	mov	r0, sp
   43ab6:	f020 0107 	bic.w	r1, r0, #7
   43aba:	468d      	mov	sp, r1
   43abc:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   43abe:	f7ef fae7 	bl	33090 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   43ac2:	f7e3 f89f 	bl	26c04 <_arch_isr_direct_pm>
   43ac6:	f7e3 fa59 	bl	26f7c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   43aca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   43ace:	4685      	mov	sp, r0
   43ad0:	4770      	bx	lr

00043ad2 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   43ad2:	4668      	mov	r0, sp
   43ad4:	f020 0107 	bic.w	r1, r0, #7
   43ad8:	468d      	mov	sp, r1
   43ada:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   43adc:	f7ef fe7e 	bl	337dc <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   43ae0:	f7e3 f890 	bl	26c04 <_arch_isr_direct_pm>
   43ae4:	f7e3 fa4a 	bl	26f7c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   43ae8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   43aec:	4685      	mov	sp, r0
   43aee:	4770      	bx	lr

00043af0 <trace_task_create>:
{
   43af0:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   43af2:	201d      	movs	r0, #29
   43af4:	2200      	movs	r2, #0
   43af6:	2106      	movs	r1, #6
   43af8:	f7e3 f852 	bl	26ba0 <z_arm_irq_priority_set>
}
   43afc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   43b00:	201d      	movs	r0, #29
   43b02:	f7e3 b82f 	b.w	26b64 <arch_irq_enable>

00043b06 <read_task_create>:
{
   43b06:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   43b08:	201c      	movs	r0, #28
   43b0a:	2200      	movs	r2, #0
   43b0c:	2106      	movs	r1, #6
   43b0e:	f7e3 f847 	bl	26ba0 <z_arm_irq_priority_set>
}
   43b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   43b16:	201c      	movs	r0, #28
   43b18:	f7e3 b824 	b.w	26b64 <arch_irq_enable>

00043b1c <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   43b1c:	2000      	movs	r0, #0
   43b1e:	4770      	bx	lr

00043b20 <z_to_nrf_flags>:
{
   43b20:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   43b22:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   43b26:	bf18      	it	ne
   43b28:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   43b2a:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   43b2c:	bf48      	it	mi
   43b2e:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   43b32:	06db      	lsls	r3, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   43b34:	bf48      	it	mi
   43b36:	f040 0020 	orrmi.w	r0, r0, #32
}
   43b3a:	4770      	bx	lr

00043b3c <z_to_nrf_family>:
	switch (z_family) {
   43b3c:	2806      	cmp	r0, #6
   43b3e:	d80a      	bhi.n	43b56 <z_to_nrf_family+0x1a>
   43b40:	b198      	cbz	r0, 43b6a <z_to_nrf_family+0x2e>
   43b42:	3801      	subs	r0, #1
   43b44:	2805      	cmp	r0, #5
   43b46:	d810      	bhi.n	43b6a <z_to_nrf_family+0x2e>
   43b48:	e8df f000 	tbb	[pc, r0]
   43b4c:	0f0d0312 	.word	0x0f0d0312
   43b50:	0b0f      	.short	0x0b0f
   43b52:	200a      	movs	r0, #10
   43b54:	4770      	bx	lr
   43b56:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   43b58:	bf14      	ite	ne
   43b5a:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   43b5e:	2066      	moveq	r0, #102	; 0x66
   43b60:	4770      	bx	lr
		return NRF_AF_LOCAL;
   43b62:	2001      	movs	r0, #1
   43b64:	4770      	bx	lr
		return NRF_AF_PACKET;
   43b66:	2005      	movs	r0, #5
   43b68:	4770      	bx	lr
		return -EAFNOSUPPORT;
   43b6a:	f06f 0069 	mvn.w	r0, #105	; 0x69
   43b6e:	4770      	bx	lr
		return NRF_AF_INET;
   43b70:	2002      	movs	r0, #2
}
   43b72:	4770      	bx	lr

00043b74 <z_to_nrf_protocol>:
	switch (proto) {
   43b74:	f240 1311 	movw	r3, #273	; 0x111
   43b78:	4298      	cmp	r0, r3
   43b7a:	d023      	beq.n	43bc4 <z_to_nrf_protocol+0x50>
   43b7c:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   43b80:	da11      	bge.n	43ba6 <z_to_nrf_protocol+0x32>
   43b82:	2811      	cmp	r0, #17
   43b84:	d021      	beq.n	43bca <z_to_nrf_protocol+0x56>
   43b86:	dc06      	bgt.n	43b96 <z_to_nrf_protocol+0x22>
   43b88:	b300      	cbz	r0, 43bcc <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   43b8a:	2806      	cmp	r0, #6
   43b8c:	bf14      	ite	ne
   43b8e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   43b92:	2001      	moveq	r0, #1
   43b94:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   43b96:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   43b9a:	bf14      	ite	ne
   43b9c:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   43ba0:	f44f 7082 	moveq.w	r0, #260	; 0x104
   43ba4:	4770      	bx	lr
	switch (proto) {
   43ba6:	f240 2302 	movw	r3, #514	; 0x202
   43baa:	4298      	cmp	r0, r3
   43bac:	d00e      	beq.n	43bcc <z_to_nrf_protocol+0x58>
   43bae:	f240 2303 	movw	r3, #515	; 0x203
   43bb2:	4298      	cmp	r0, r3
   43bb4:	d00a      	beq.n	43bcc <z_to_nrf_protocol+0x58>
   43bb6:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   43bba:	4298      	cmp	r0, r3
   43bbc:	bf18      	it	ne
   43bbe:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   43bc2:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   43bc4:	f44f 7087 	mov.w	r0, #270	; 0x10e
   43bc8:	4770      	bx	lr
	switch (proto) {
   43bca:	2002      	movs	r0, #2
}
   43bcc:	4770      	bx	lr

00043bce <nrf91_socket_is_supported>:
}
   43bce:	2001      	movs	r0, #1
   43bd0:	4770      	bx	lr

00043bd2 <nrf91_bsdlib_socket_offload_init>:
}
   43bd2:	2000      	movs	r0, #0
   43bd4:	4770      	bx	lr

00043bd6 <nrf91_socket_offload_getsockopt>:
{
   43bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43bda:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   43bdc:	2300      	movs	r3, #0
{
   43bde:	b086      	sub	sp, #24
   43be0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   43be4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   43be8:	f8d8 3000 	ldr.w	r3, [r8]
{
   43bec:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   43bee:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   43bf0:	f240 2302 	movw	r3, #514	; 0x202
   43bf4:	4299      	cmp	r1, r3
{
   43bf6:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   43bf8:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   43bfc:	d005      	beq.n	43c0a <nrf91_socket_offload_getsockopt+0x34>
   43bfe:	dc30      	bgt.n	43c62 <nrf91_socket_offload_getsockopt+0x8c>
   43c00:	2901      	cmp	r1, #1
   43c02:	d002      	beq.n	43c0a <nrf91_socket_offload_getsockopt+0x34>
   43c04:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   43c08:	d13c      	bne.n	43c84 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   43c0a:	4631      	mov	r1, r6
   43c0c:	4620      	mov	r0, r4
   43c0e:	aa02      	add	r2, sp, #8
   43c10:	f7e5 fee6 	bl	299e0 <z_to_nrf_optname>
   43c14:	2800      	cmp	r0, #0
   43c16:	db35      	blt.n	43c84 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   43c18:	2c01      	cmp	r4, #1
   43c1a:	d126      	bne.n	43c6a <nrf91_socket_offload_getsockopt+0x94>
   43c1c:	f1a6 0314 	sub.w	r3, r6, #20
   43c20:	2b01      	cmp	r3, #1
   43c22:	d822      	bhi.n	43c6a <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   43c24:	2308      	movs	r3, #8
   43c26:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   43c28:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   43c2a:	aa03      	add	r2, sp, #12
   43c2c:	4638      	mov	r0, r7
   43c2e:	9200      	str	r2, [sp, #0]
   43c30:	4621      	mov	r1, r4
   43c32:	9a02      	ldr	r2, [sp, #8]
   43c34:	f7f5 fd92 	bl	3975c <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   43c38:	4607      	mov	r7, r0
   43c3a:	b970      	cbnz	r0, 43c5a <nrf91_socket_offload_getsockopt+0x84>
   43c3c:	b16d      	cbz	r5, 43c5a <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   43c3e:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   43c40:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   43c42:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   43c46:	d108      	bne.n	43c5a <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   43c48:	2e04      	cmp	r6, #4
   43c4a:	d110      	bne.n	43c6e <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   43c4c:	6828      	ldr	r0, [r5, #0]
   43c4e:	f7e5 fd05 	bl	2965c <bsd_os_errno_set>
				*(int *)optval = errno;
   43c52:	f7fe fd0e 	bl	42672 <__errno>
   43c56:	6803      	ldr	r3, [r0, #0]
   43c58:	602b      	str	r3, [r5, #0]
}
   43c5a:	4638      	mov	r0, r7
   43c5c:	b006      	add	sp, #24
   43c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   43c62:	f240 2303 	movw	r3, #515	; 0x203
   43c66:	4299      	cmp	r1, r3
   43c68:	e7ce      	b.n	43c08 <nrf91_socket_offload_getsockopt+0x32>
   43c6a:	462b      	mov	r3, r5
   43c6c:	e7dd      	b.n	43c2a <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   43c6e:	3e14      	subs	r6, #20
   43c70:	2e01      	cmp	r6, #1
   43c72:	d8f2      	bhi.n	43c5a <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   43c74:	9b04      	ldr	r3, [sp, #16]
   43c76:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   43c78:	9b05      	ldr	r3, [sp, #20]
   43c7a:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   43c7c:	2308      	movs	r3, #8
   43c7e:	f8c8 3000 	str.w	r3, [r8]
   43c82:	e7ea      	b.n	43c5a <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   43c84:	f7fe fcf5 	bl	42672 <__errno>
   43c88:	236d      	movs	r3, #109	; 0x6d
	return retval;
   43c8a:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   43c8e:	6003      	str	r3, [r0, #0]
	return retval;
   43c90:	e7e3      	b.n	43c5a <nrf91_socket_offload_getsockopt+0x84>

00043c92 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   43c92:	3801      	subs	r0, #1
   43c94:	f7f5 bd0e 	b.w	396b4 <nrf_listen>

00043c98 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   43c98:	3801      	subs	r0, #1
   43c9a:	f7f5 bc6d 	b.w	39578 <nrf_close>

00043c9e <nrf91_socket_offload_freeaddrinfo>:
{
   43c9e:	b538      	push	{r3, r4, r5, lr}
   43ca0:	4604      	mov	r4, r0
	while (next != NULL) {
   43ca2:	b904      	cbnz	r4, 43ca6 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   43ca4:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   43ca6:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   43ca8:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   43caa:	f000 ffdf 	bl	44c6c <k_free>
		k_free(this);
   43cae:	4620      	mov	r0, r4
   43cb0:	f000 ffdc 	bl	44c6c <k_free>
		next = next->ai_next;
   43cb4:	462c      	mov	r4, r5
   43cb6:	e7f4      	b.n	43ca2 <nrf91_socket_offload_freeaddrinfo+0x4>

00043cb8 <z_to_nrf_addrinfo_hints>:
{
   43cb8:	b538      	push	{r3, r4, r5, lr}
   43cba:	460c      	mov	r4, r1
   43cbc:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   43cbe:	221c      	movs	r2, #28
   43cc0:	2100      	movs	r1, #0
   43cc2:	1d20      	adds	r0, r4, #4
   43cc4:	f001 f82f 	bl	44d26 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   43cc8:	2300      	movs	r3, #0
   43cca:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   43ccc:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   43cce:	2b03      	cmp	r3, #3
   43cd0:	d003      	beq.n	43cda <z_to_nrf_addrinfo_hints+0x22>
   43cd2:	2b04      	cmp	r3, #4
   43cd4:	bf08      	it	eq
   43cd6:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   43cda:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   43cdc:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   43cde:	f7ff ff2d 	bl	43b3c <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   43ce2:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   43ce6:	d00b      	beq.n	43d00 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   43ce8:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   43cea:	6928      	ldr	r0, [r5, #16]
   43cec:	f7ff ff42 	bl	43b74 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   43cf0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   43cf4:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   43cf6:	d003      	beq.n	43d00 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   43cf8:	69e8      	ldr	r0, [r5, #28]
   43cfa:	b108      	cbz	r0, 43d00 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   43cfc:	61a0      	str	r0, [r4, #24]
	return 0;
   43cfe:	2000      	movs	r0, #0
}
   43d00:	bd38      	pop	{r3, r4, r5, pc}

00043d02 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   43d02:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   43d04:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   43d06:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   43d08:	4603      	mov	r3, r0
{
   43d0a:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   43d0c:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   43d10:	f101 0420 	add.w	r4, r1, #32
   43d14:	f101 0210 	add.w	r2, r1, #16
   43d18:	f852 5b04 	ldr.w	r5, [r2], #4
   43d1c:	42a2      	cmp	r2, r4
   43d1e:	f843 5b04 	str.w	r5, [r3], #4
   43d22:	d1f9      	bne.n	43d18 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   43d24:	6a0b      	ldr	r3, [r1, #32]
   43d26:	7503      	strb	r3, [r0, #20]
}
   43d28:	bd30      	pop	{r4, r5, pc}

00043d2a <nrf91_socket_offload_recvfrom>:
{
   43d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   43d2c:	1e45      	subs	r5, r0, #1
{
   43d2e:	b08f      	sub	sp, #60	; 0x3c
   43d30:	4618      	mov	r0, r3
   43d32:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   43d36:	9203      	str	r2, [sp, #12]
   43d38:	f7ff fef2 	bl	43b20 <z_to_nrf_flags>
	if (from == NULL) {
   43d3c:	9a03      	ldr	r2, [sp, #12]
   43d3e:	4603      	mov	r3, r0
   43d40:	b944      	cbnz	r4, 43d54 <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   43d42:	4628      	mov	r0, r5
   43d44:	e9cd 4400 	strd	r4, r4, [sp]
   43d48:	f7f5 fc56 	bl	395f8 <nrf_recvfrom>
   43d4c:	4605      	mov	r5, r0
}
   43d4e:	4628      	mov	r0, r5
   43d50:	b00f      	add	sp, #60	; 0x3c
   43d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   43d54:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   43d56:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   43d58:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   43d5a:	a804      	add	r0, sp, #16
   43d5c:	9001      	str	r0, [sp, #4]
   43d5e:	9700      	str	r7, [sp, #0]
   43d60:	4628      	mov	r0, r5
   43d62:	f7f5 fc49 	bl	395f8 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   43d66:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   43d68:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   43d6a:	2b02      	cmp	r3, #2
   43d6c:	d109      	bne.n	43d82 <nrf91_socket_offload_recvfrom+0x58>
	ptr->sin_port = nrf_in->sin_port;
   43d6e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   43d72:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   43d74:	2301      	movs	r3, #1
   43d76:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   43d78:	9b08      	ldr	r3, [sp, #32]
   43d7a:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   43d7c:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   43d7e:	6033      	str	r3, [r6, #0]
	return retval;
   43d80:	e7e5      	b.n	43d4e <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   43d82:	2b0a      	cmp	r3, #10
   43d84:	d1e3      	bne.n	43d4e <nrf91_socket_offload_recvfrom+0x24>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   43d86:	4639      	mov	r1, r7
   43d88:	4620      	mov	r0, r4
   43d8a:	f7ff ffba 	bl	43d02 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   43d8e:	2318      	movs	r3, #24
   43d90:	e7f5      	b.n	43d7e <nrf91_socket_offload_recvfrom+0x54>

00043d92 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   43d92:	2300      	movs	r3, #0
{
   43d94:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   43d96:	e9cd 3300 	strd	r3, r3, [sp]
   43d9a:	f7ff ffc6 	bl	43d2a <nrf91_socket_offload_recvfrom>
}
   43d9e:	b003      	add	sp, #12
   43da0:	f85d fb04 	ldr.w	pc, [sp], #4

00043da4 <nrf91_socket_offload_getaddrinfo>:
{
   43da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   43da8:	4614      	mov	r4, r2
   43daa:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   43dac:	2100      	movs	r1, #0
{
   43dae:	b093      	sub	sp, #76	; 0x4c
   43db0:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   43db2:	2220      	movs	r2, #32
   43db4:	a802      	add	r0, sp, #8
{
   43db6:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   43db8:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   43dba:	f000 ffb4 	bl	44d26 <memset>
	if (hints != NULL) {
   43dbe:	b194      	cbz	r4, 43de6 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   43dc0:	4620      	mov	r0, r4
   43dc2:	a902      	add	r1, sp, #8
   43dc4:	f7ff ff78 	bl	43cb8 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   43dc8:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   43dcc:	f000 80d0 	beq.w	43f70 <nrf91_socket_offload_getaddrinfo+0x1cc>
		} else if (error == -EAFNOSUPPORT) {
   43dd0:	306a      	adds	r0, #106	; 0x6a
   43dd2:	f000 80d0 	beq.w	43f76 <nrf91_socket_offload_getaddrinfo+0x1d2>
		if (hints->ai_next != NULL) {
   43dd6:	6820      	ldr	r0, [r4, #0]
   43dd8:	b120      	cbz	r0, 43de4 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   43dda:	ac0a      	add	r4, sp, #40	; 0x28
   43ddc:	4621      	mov	r1, r4
   43dde:	f7ff ff6b 	bl	43cb8 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   43de2:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   43de4:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   43de6:	4628      	mov	r0, r5
   43de8:	4622      	mov	r2, r4
   43dea:	4631      	mov	r1, r6
   43dec:	ab01      	add	r3, sp, #4
   43dee:	f7f5 fcd1 	bl	39794 <nrf_getaddrinfo>
	if (retval != 0) {
   43df2:	4605      	mov	r5, r0
   43df4:	b300      	cbz	r0, 43e38 <nrf91_socket_offload_getaddrinfo+0x94>
	switch (nrf_error) {
   43df6:	282f      	cmp	r0, #47	; 0x2f
   43df8:	f000 80c0 	beq.w	43f7c <nrf91_socket_offload_getaddrinfo+0x1d8>
   43dfc:	dc0c      	bgt.n	43e18 <nrf91_socket_offload_getaddrinfo+0x74>
   43dfe:	280c      	cmp	r0, #12
   43e00:	f000 80bf 	beq.w	43f82 <nrf91_socket_offload_getaddrinfo+0x1de>
		return DNS_EAI_AGAIN;
   43e04:	2823      	cmp	r0, #35	; 0x23
   43e06:	bf14      	ite	ne
   43e08:	f06f 050a 	mvnne.w	r5, #10
   43e0c:	f06f 0502 	mvneq.w	r5, #2
}
   43e10:	4628      	mov	r0, r5
   43e12:	b013      	add	sp, #76	; 0x4c
   43e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   43e18:	2833      	cmp	r0, #51	; 0x33
   43e1a:	d006      	beq.n	43e2a <nrf91_socket_offload_getaddrinfo+0x86>
		return DNS_EAI_INPROGRESS;
   43e1c:	2873      	cmp	r0, #115	; 0x73
   43e1e:	bf14      	ite	ne
   43e20:	f06f 050a 	mvnne.w	r5, #10
   43e24:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   43e28:	e7f2      	b.n	43e10 <nrf91_socket_offload_getaddrinfo+0x6c>
		errno = ENETUNREACH;
   43e2a:	f7fe fc22 	bl	42672 <__errno>
   43e2e:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   43e30:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   43e34:	6003      	str	r3, [r0, #0]
   43e36:	e7eb      	b.n	43e10 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   43e38:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   43e3a:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   43e3c:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   43e3e:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   43e40:	b91e      	cbnz	r6, 43e4a <nrf91_socket_offload_getaddrinfo+0xa6>
	nrf_freeaddrinfo(nrf_res);
   43e42:	9801      	ldr	r0, [sp, #4]
   43e44:	f7f5 fca8 	bl	39798 <nrf_freeaddrinfo>
	return retval;
   43e48:	e7e2      	b.n	43e10 <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   43e4a:	2050      	movs	r0, #80	; 0x50
   43e4c:	f7fb f88e 	bl	3ef6c <k_malloc>
		if (next_z_res == NULL) {
   43e50:	4604      	mov	r4, r0
   43e52:	2800      	cmp	r0, #0
   43e54:	f000 8081 	beq.w	43f5a <nrf91_socket_offload_getaddrinfo+0x1b6>
	family = nrf_to_z_family(nrf_in->ai_family);
   43e58:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   43e5a:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   43e5c:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   43e5e:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   43e62:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   43e66:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   43e6a:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   43e6c:	dc23      	bgt.n	43eb6 <nrf91_socket_offload_getaddrinfo+0x112>
   43e6e:	2900      	cmp	r1, #0
   43e70:	dd23      	ble.n	43eba <nrf91_socket_offload_getaddrinfo+0x116>
   43e72:	1e4b      	subs	r3, r1, #1
   43e74:	2b09      	cmp	r3, #9
   43e76:	d820      	bhi.n	43eba <nrf91_socket_offload_getaddrinfo+0x116>
   43e78:	e8df f003 	tbb	[pc, r3]
   43e7c:	1f1f2905 	.word	0x1f1f2905
   43e80:	1f1f1f25 	.word	0x1f1f1f25
   43e84:	271f      	.short	0x271f
		return AF_LOCAL;
   43e86:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   43e88:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   43e8a:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   43e8c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   43e90:	d04b      	beq.n	43f2a <nrf91_socket_offload_getaddrinfo+0x186>
   43e92:	dc26      	bgt.n	43ee2 <nrf91_socket_offload_getaddrinfo+0x13e>
   43e94:	2a02      	cmp	r2, #2
   43e96:	d04c      	beq.n	43f32 <nrf91_socket_offload_getaddrinfo+0x18e>
   43e98:	dc1d      	bgt.n	43ed6 <nrf91_socket_offload_getaddrinfo+0x132>
   43e9a:	b372      	cbz	r2, 43efa <nrf91_socket_offload_getaddrinfo+0x156>
   43e9c:	2a01      	cmp	r2, #1
   43e9e:	d04a      	beq.n	43f36 <nrf91_socket_offload_getaddrinfo+0x192>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   43ea0:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   43ea4:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   43ea6:	2300      	movs	r3, #0
   43ea8:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   43eaa:	4620      	mov	r0, r4
   43eac:	f000 fede 	bl	44c6c <k_free>
			retval = DNS_EAI_SOCKTYPE;
   43eb0:	f06f 0506 	mvn.w	r5, #6
   43eb4:	e053      	b.n	43f5e <nrf91_socket_offload_getaddrinfo+0x1ba>
	switch (nrf_family) {
   43eb6:	2966      	cmp	r1, #102	; 0x66
   43eb8:	d00b      	beq.n	43ed2 <nrf91_socket_offload_getaddrinfo+0x12e>
			k_free(next_z_res);
   43eba:	4620      	mov	r0, r4
   43ebc:	f000 fed6 	bl	44c6c <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   43ec0:	f06f 0508 	mvn.w	r5, #8
   43ec4:	e04b      	b.n	43f5e <nrf91_socket_offload_getaddrinfo+0x1ba>
		return AF_PACKET;
   43ec6:	2303      	movs	r3, #3
   43ec8:	e7de      	b.n	43e88 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_INET6;
   43eca:	2302      	movs	r3, #2
   43ecc:	e7dc      	b.n	43e88 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (nrf_family) {
   43ece:	2301      	movs	r3, #1
   43ed0:	e7da      	b.n	43e88 <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_LTE;
   43ed2:	460b      	mov	r3, r1
   43ed4:	e7d8      	b.n	43e88 <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (proto) {
   43ed6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   43eda:	d1e1      	bne.n	43ea0 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   43edc:	f44f 7381 	mov.w	r3, #258	; 0x102
   43ee0:	e025      	b.n	43f2e <nrf91_socket_offload_getaddrinfo+0x18a>
	switch (proto) {
   43ee2:	f240 2302 	movw	r3, #514	; 0x202
   43ee6:	429a      	cmp	r2, r3
   43ee8:	d007      	beq.n	43efa <nrf91_socket_offload_getaddrinfo+0x156>
   43eea:	f240 2303 	movw	r3, #515	; 0x203
   43eee:	429a      	cmp	r2, r3
   43ef0:	d003      	beq.n	43efa <nrf91_socket_offload_getaddrinfo+0x156>
   43ef2:	f240 2301 	movw	r3, #513	; 0x201
   43ef6:	429a      	cmp	r2, r3
   43ef8:	d1d2      	bne.n	43ea0 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   43efa:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   43efc:	2902      	cmp	r1, #2
   43efe:	d11c      	bne.n	43f3a <nrf91_socket_offload_getaddrinfo+0x196>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   43f00:	2008      	movs	r0, #8
   43f02:	f7fb f833 	bl	3ef6c <k_malloc>
   43f06:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   43f08:	b320      	cbz	r0, 43f54 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   43f0a:	2308      	movs	r3, #8
   43f0c:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   43f0e:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   43f10:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   43f12:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   43f14:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   43f16:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   43f18:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   43f1a:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   43f1c:	f1b8 0f00 	cmp.w	r8, #0
   43f20:	d123      	bne.n	43f6a <nrf91_socket_offload_getaddrinfo+0x1c6>
			*res = next_z_res;
   43f22:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   43f24:	46a0      	mov	r8, r4
   43f26:	69f6      	ldr	r6, [r6, #28]
   43f28:	e78a      	b.n	43e40 <nrf91_socket_offload_getaddrinfo+0x9c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   43f2a:	f240 1311 	movw	r3, #273	; 0x111
   43f2e:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   43f30:	e7e4      	b.n	43efc <nrf91_socket_offload_getaddrinfo+0x158>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   43f32:	2311      	movs	r3, #17
   43f34:	e7fb      	b.n	43f2e <nrf91_socket_offload_getaddrinfo+0x18a>
   43f36:	2306      	movs	r3, #6
   43f38:	e7f9      	b.n	43f2e <nrf91_socket_offload_getaddrinfo+0x18a>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   43f3a:	290a      	cmp	r1, #10
   43f3c:	d1b5      	bne.n	43eaa <nrf91_socket_offload_getaddrinfo+0x106>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   43f3e:	2018      	movs	r0, #24
   43f40:	f7fb f814 	bl	3ef6c <k_malloc>
   43f44:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   43f46:	b128      	cbz	r0, 43f54 <nrf91_socket_offload_getaddrinfo+0x1b0>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   43f48:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   43f4a:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   43f4c:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   43f4e:	f7ff fed8 	bl	43d02 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   43f52:	e7e3      	b.n	43f1c <nrf91_socket_offload_getaddrinfo+0x178>
			k_free(next_z_res);
   43f54:	4620      	mov	r0, r4
   43f56:	f000 fe89 	bl	44c6c <k_free>
			retval = DNS_EAI_MEMORY;
   43f5a:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   43f5e:	6838      	ldr	r0, [r7, #0]
   43f60:	f7ff fe9d 	bl	43c9e <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   43f64:	2300      	movs	r3, #0
   43f66:	603b      	str	r3, [r7, #0]
   43f68:	e76b      	b.n	43e42 <nrf91_socket_offload_getaddrinfo+0x9e>
			latest_z_res->ai_next = next_z_res;
   43f6a:	f8c8 4000 	str.w	r4, [r8]
   43f6e:	e7d9      	b.n	43f24 <nrf91_socket_offload_getaddrinfo+0x180>
			return DNS_EAI_SOCKTYPE;
   43f70:	f06f 0506 	mvn.w	r5, #6
   43f74:	e74c      	b.n	43e10 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   43f76:	f06f 0508 	mvn.w	r5, #8
   43f7a:	e749      	b.n	43e10 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   43f7c:	f06f 0501 	mvn.w	r5, #1
   43f80:	e746      	b.n	43e10 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   43f82:	f06f 0509 	mvn.w	r5, #9
   43f86:	e743      	b.n	43e10 <nrf91_socket_offload_getaddrinfo+0x6c>

00043f88 <z_to_nrf_ipv6>:
{
   43f88:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   43f8a:	2124      	movs	r1, #36	; 0x24
   43f8c:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   43f8e:	8841      	ldrh	r1, [r0, #2]
{
   43f90:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   43f92:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   43f94:	210a      	movs	r1, #10
{
   43f96:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   43f98:	6059      	str	r1, [r3, #4]
   43f9a:	1d04      	adds	r4, r0, #4
   43f9c:	f103 0610 	add.w	r6, r3, #16
   43fa0:	f100 0714 	add.w	r7, r0, #20
   43fa4:	4635      	mov	r5, r6
   43fa6:	6820      	ldr	r0, [r4, #0]
   43fa8:	6861      	ldr	r1, [r4, #4]
   43faa:	3408      	adds	r4, #8
   43fac:	c503      	stmia	r5!, {r0, r1}
   43fae:	42bc      	cmp	r4, r7
   43fb0:	462e      	mov	r6, r5
   43fb2:	d1f7      	bne.n	43fa4 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   43fb4:	7d12      	ldrb	r2, [r2, #20]
   43fb6:	621a      	str	r2, [r3, #32]
}
   43fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00043fba <nrf91_socket_offload_sendto>:
{
   43fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43fbe:	b08e      	sub	sp, #56	; 0x38
   43fc0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   43fc2:	460e      	mov	r6, r1
   43fc4:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   43fc6:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   43fc8:	b974      	cbnz	r4, 43fe8 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   43fca:	4618      	mov	r0, r3
   43fcc:	9203      	str	r2, [sp, #12]
   43fce:	f7ff fda7 	bl	43b20 <z_to_nrf_flags>
   43fd2:	4603      	mov	r3, r0
   43fd4:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   43fd8:	4631      	mov	r1, r6
   43fda:	4628      	mov	r0, r5
   43fdc:	9a03      	ldr	r2, [sp, #12]
   43fde:	f7f5 fad9 	bl	39594 <nrf_sendto>
}
   43fe2:	b00e      	add	sp, #56	; 0x38
   43fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   43fe8:	8823      	ldrh	r3, [r4, #0]
   43fea:	9203      	str	r2, [sp, #12]
   43fec:	2b01      	cmp	r3, #1
   43fee:	d111      	bne.n	44014 <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   43ff0:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   43ff2:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   43ff4:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   43ff8:	2302      	movs	r3, #2
   43ffa:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   43ffc:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   43ffe:	4638      	mov	r0, r7
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   44000:	f88d 1014 	strb.w	r1, [sp, #20]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   44004:	9308      	str	r3, [sp, #32]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   44006:	f7ff fd8b 	bl	43b20 <z_to_nrf_flags>
   4400a:	9101      	str	r1, [sp, #4]
   4400c:	a905      	add	r1, sp, #20
   4400e:	4603      	mov	r3, r0
   44010:	9100      	str	r1, [sp, #0]
   44012:	e7e1      	b.n	43fd8 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   44014:	2b02      	cmp	r3, #2
   44016:	d10d      	bne.n	44034 <nrf91_socket_offload_sendto+0x7a>
		z_to_nrf_ipv6(to, &ipv6);
   44018:	f10d 0814 	add.w	r8, sp, #20
   4401c:	4641      	mov	r1, r8
   4401e:	4620      	mov	r0, r4
   44020:	f7ff ffb2 	bl	43f88 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   44024:	4638      	mov	r0, r7
   44026:	f7ff fd7b 	bl	43b20 <z_to_nrf_flags>
   4402a:	2124      	movs	r1, #36	; 0x24
   4402c:	4603      	mov	r3, r0
   4402e:	e9cd 8100 	strd	r8, r1, [sp]
   44032:	e7d1      	b.n	43fd8 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   44034:	f7fe fb1d 	bl	42672 <__errno>
   44038:	2386      	movs	r3, #134	; 0x86
   4403a:	6003      	str	r3, [r0, #0]
	return retval;
   4403c:	f04f 30ff 	mov.w	r0, #4294967295
   44040:	e7cf      	b.n	43fe2 <nrf91_socket_offload_sendto+0x28>

00044042 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   44042:	2300      	movs	r3, #0
{
   44044:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   44046:	e9cd 3300 	strd	r3, r3, [sp]
   4404a:	f7ff ffb6 	bl	43fba <nrf91_socket_offload_sendto>
}
   4404e:	b003      	add	sp, #12
   44050:	f85d fb04 	ldr.w	pc, [sp], #4

00044054 <nrf91_socket_offload_connect>:
{
   44054:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   44056:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   44058:	8808      	ldrh	r0, [r1, #0]
{
   4405a:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   4405c:	2801      	cmp	r0, #1
{
   4405e:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   44060:	d10f      	bne.n	44082 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   44062:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   44064:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   44066:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   4406a:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   4406c:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   4406e:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   44072:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   44074:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   44076:	4620      	mov	r0, r4
   44078:	a901      	add	r1, sp, #4
   4407a:	f7f5 fb09 	bl	39690 <nrf_connect>
}
   4407e:	b00a      	add	sp, #40	; 0x28
   44080:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   44082:	2802      	cmp	r0, #2
   44084:	d105      	bne.n	44092 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   44086:	4618      	mov	r0, r3
   44088:	a901      	add	r1, sp, #4
   4408a:	f7ff ff7d 	bl	43f88 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   4408e:	2224      	movs	r2, #36	; 0x24
   44090:	e7f1      	b.n	44076 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   44092:	4620      	mov	r0, r4
   44094:	f7f5 fafc 	bl	39690 <nrf_connect>
		if (retval < 0) {
   44098:	2800      	cmp	r0, #0
   4409a:	daf0      	bge.n	4407e <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   4409c:	f7fe fae9 	bl	42672 <__errno>
   440a0:	2386      	movs	r3, #134	; 0x86
   440a2:	6003      	str	r3, [r0, #0]
   440a4:	f04f 30ff 	mov.w	r0, #4294967295
   440a8:	e7e9      	b.n	4407e <nrf91_socket_offload_connect+0x2a>

000440aa <nrf91_socket_offload_setsockopt>:
{
   440aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   440ae:	461e      	mov	r6, r3
	switch (z_in_level) {
   440b0:	f240 2302 	movw	r3, #514	; 0x202
{
   440b4:	b086      	sub	sp, #24
	switch (z_in_level) {
   440b6:	4299      	cmp	r1, r3
{
   440b8:	460c      	mov	r4, r1
   440ba:	4615      	mov	r5, r2
   440bc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   440be:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   440c2:	d005      	beq.n	440d0 <nrf91_socket_offload_setsockopt+0x26>
   440c4:	dc20      	bgt.n	44108 <nrf91_socket_offload_setsockopt+0x5e>
   440c6:	2901      	cmp	r1, #1
   440c8:	d002      	beq.n	440d0 <nrf91_socket_offload_setsockopt+0x26>
   440ca:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   440ce:	d126      	bne.n	4411e <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   440d0:	4629      	mov	r1, r5
   440d2:	4620      	mov	r0, r4
   440d4:	aa03      	add	r2, sp, #12
   440d6:	f7e5 fc83 	bl	299e0 <z_to_nrf_optname>
   440da:	2800      	cmp	r0, #0
   440dc:	db1f      	blt.n	4411e <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   440de:	2c01      	cmp	r4, #1
   440e0:	d116      	bne.n	44110 <nrf91_socket_offload_setsockopt+0x66>
   440e2:	3d14      	subs	r5, #20
   440e4:	2d01      	cmp	r5, #1
   440e6:	d805      	bhi.n	440f4 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   440e8:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   440ea:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   440ec:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   440ee:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   440f0:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   440f2:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   440f4:	4633      	mov	r3, r6
   440f6:	4621      	mov	r1, r4
   440f8:	4640      	mov	r0, r8
   440fa:	9a03      	ldr	r2, [sp, #12]
   440fc:	9700      	str	r7, [sp, #0]
   440fe:	f7f5 fb11 	bl	39724 <nrf_setsockopt>
}
   44102:	b006      	add	sp, #24
   44104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   44108:	f240 2303 	movw	r3, #515	; 0x203
   4410c:	4299      	cmp	r1, r3
   4410e:	e7de      	b.n	440ce <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   44110:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   44114:	d1ee      	bne.n	440f4 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   44116:	2d07      	cmp	r5, #7
   44118:	bf08      	it	eq
   4411a:	2701      	moveq	r7, #1
   4411c:	e7ea      	b.n	440f4 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   4411e:	f7fe faa8 	bl	42672 <__errno>
   44122:	236d      	movs	r3, #109	; 0x6d
   44124:	6003      	str	r3, [r0, #0]
   44126:	f04f 30ff 	mov.w	r0, #4294967295
   4412a:	e7ea      	b.n	44102 <nrf91_socket_offload_setsockopt+0x58>

0004412c <nrf91_socket_offload_bind>:
{
   4412c:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   4412e:	880a      	ldrh	r2, [r1, #0]
{
   44130:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   44132:	2a01      	cmp	r2, #1
{
   44134:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   44136:	f100 34ff 	add.w	r4, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   4413a:	d10f      	bne.n	4415c <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   4413c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   4413e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   44140:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   44144:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   44146:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   44148:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   4414c:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   4414e:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   44150:	4620      	mov	r0, r4
   44152:	a901      	add	r1, sp, #4
   44154:	f7f5 fad4 	bl	39700 <nrf_bind>
}
   44158:	b00a      	add	sp, #40	; 0x28
   4415a:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   4415c:	2a02      	cmp	r2, #2
   4415e:	d105      	bne.n	4416c <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   44160:	4618      	mov	r0, r3
   44162:	a901      	add	r1, sp, #4
   44164:	f7ff ff10 	bl	43f88 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   44168:	2224      	movs	r2, #36	; 0x24
   4416a:	e7f1      	b.n	44150 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   4416c:	f7fe fa81 	bl	42672 <__errno>
   44170:	2386      	movs	r3, #134	; 0x86
   44172:	6003      	str	r3, [r0, #0]
   44174:	f04f 30ff 	mov.w	r0, #4294967295
   44178:	e7ee      	b.n	44158 <nrf91_socket_offload_bind+0x2c>

0004417a <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   4417a:	ea40 0301 	orr.w	r3, r0, r1
   4417e:	f033 030f 	bics.w	r3, r3, #15
   44182:	d101      	bne.n	44188 <dk_set_leds_state+0xe>
   44184:	f7e5 bf5a 	b.w	2a03c <dk_set_leds_state.part.0>
}
   44188:	f06f 0015 	mvn.w	r0, #21
   4418c:	4770      	bx	lr

0004418e <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   4418e:	210f      	movs	r1, #15
   44190:	f7ff bff3 	b.w	4417a <dk_set_leds_state>

00044194 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   44194:	6883      	ldr	r3, [r0, #8]
   44196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   44198:	b103      	cbz	r3, 4419c <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   4419a:	4718      	bx	r3
}
   4419c:	4770      	bx	lr

0004419e <response_handler>:
	write_uart_string(response);
   4419e:	4608      	mov	r0, r1
   441a0:	f7e6 be2a 	b.w	2adf8 <write_uart_string>

000441a4 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   441a4:	280d      	cmp	r0, #13
   441a6:	d004      	beq.n	441b2 <is_lfcr+0xe>
   441a8:	f1a0 030a 	sub.w	r3, r0, #10
   441ac:	4258      	negs	r0, r3
   441ae:	4158      	adcs	r0, r3
   441b0:	4770      	bx	lr
		return true;
   441b2:	2001      	movs	r0, #1
}
   441b4:	4770      	bx	lr

000441b6 <skip_command_prefix>:
{
   441b6:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   441b8:	6801      	ldr	r1, [r0, #0]
{
   441ba:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   441bc:	1c8b      	adds	r3, r1, #2
   441be:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   441c0:	788c      	ldrb	r4, [r1, #2]
   441c2:	4620      	mov	r0, r4
   441c4:	f7ff ffee 	bl	441a4 <is_lfcr>
   441c8:	b910      	cbnz	r0, 441d0 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   441ca:	b10c      	cbz	r4, 441d0 <skip_command_prefix+0x1a>
	(*cmd)++;
   441cc:	3103      	adds	r1, #3
   441ce:	6011      	str	r1, [r2, #0]
}
   441d0:	bd10      	pop	{r4, pc}

000441d2 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   441d2:	6813      	ldr	r3, [r2, #0]
   441d4:	f7e7 b954 	b.w	2b480 <at_parser_max_params_from_str>

000441d8 <at_params_list_init>:
{
   441d8:	b538      	push	{r3, r4, r5, lr}
   441da:	460d      	mov	r5, r1
	if (list == NULL) {
   441dc:	4604      	mov	r4, r0
   441de:	b140      	cbz	r0, 441f2 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   441e0:	210c      	movs	r1, #12
   441e2:	4628      	mov	r0, r5
   441e4:	f000 fd47 	bl	44c76 <k_calloc>
   441e8:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   441ea:	b128      	cbz	r0, 441f8 <at_params_list_init+0x20>
	return 0;
   441ec:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   441ee:	6025      	str	r5, [r4, #0]
}
   441f0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   441f2:	f06f 0015 	mvn.w	r0, #21
   441f6:	e7fb      	b.n	441f0 <at_params_list_init+0x18>
		return -ENOMEM;
   441f8:	f06f 000b 	mvn.w	r0, #11
   441fc:	e7f8      	b.n	441f0 <at_params_list_init+0x18>

000441fe <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   441fe:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   44200:	4604      	mov	r4, r0
   44202:	b148      	cbz	r0, 44218 <at_params_list_free+0x1a>
   44204:	6843      	ldr	r3, [r0, #4]
   44206:	b13b      	cbz	r3, 44218 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   44208:	2500      	movs	r5, #0
	at_params_list_clear(list);
   4420a:	f7e7 fa35 	bl	2b678 <at_params_list_clear>
	k_free(list->params);
   4420e:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   44210:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   44212:	f000 fd2b 	bl	44c6c <k_free>
	list->params = NULL;
   44216:	6065      	str	r5, [r4, #4]
}
   44218:	bd38      	pop	{r3, r4, r5, pc}

0004421a <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   4421a:	b538      	push	{r3, r4, r5, lr}
   4421c:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   4421e:	b910      	cbnz	r0, 44226 <at_params_short_put+0xc>
		return -EINVAL;
   44220:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
}
   44224:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   44226:	6843      	ldr	r3, [r0, #4]
   44228:	2b00      	cmp	r3, #0
   4422a:	d0f9      	beq.n	44220 <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   4422c:	f7e7 f9b8 	bl	2b5a0 <at_params_get>
	if (param == NULL) {
   44230:	4604      	mov	r4, r0
   44232:	2800      	cmp	r0, #0
   44234:	d0f4      	beq.n	44220 <at_params_short_put+0x6>
	at_param_clear(param);
   44236:	f7e7 f9fd 	bl	2b634 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   4423a:	2301      	movs	r3, #1
	return 0;
   4423c:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   4423e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   44240:	60a5      	str	r5, [r4, #8]
	return 0;
   44242:	e7ef      	b.n	44224 <at_params_short_put+0xa>

00044244 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   44244:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   44246:	b910      	cbnz	r0, 4424e <at_params_empty_put+0xa>
		return -EINVAL;
   44248:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   4424c:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   4424e:	6843      	ldr	r3, [r0, #4]
   44250:	2b00      	cmp	r3, #0
   44252:	d0f9      	beq.n	44248 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   44254:	f7e7 f9a4 	bl	2b5a0 <at_params_get>
	if (param == NULL) {
   44258:	4604      	mov	r4, r0
   4425a:	2800      	cmp	r0, #0
   4425c:	d0f4      	beq.n	44248 <at_params_empty_put+0x4>
	at_param_clear(param);
   4425e:	f7e7 f9e9 	bl	2b634 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   44262:	2305      	movs	r3, #5
	param->value.int_val = 0;
   44264:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   44266:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   44268:	60a0      	str	r0, [r4, #8]
	return 0;
   4426a:	e7ef      	b.n	4424c <at_params_empty_put+0x8>

0004426c <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   4426c:	b538      	push	{r3, r4, r5, lr}
   4426e:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   44270:	b910      	cbnz	r0, 44278 <at_params_int_put+0xc>
		return -EINVAL;
   44272:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   44276:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   44278:	6843      	ldr	r3, [r0, #4]
   4427a:	2b00      	cmp	r3, #0
   4427c:	d0f9      	beq.n	44272 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   4427e:	f7e7 f98f 	bl	2b5a0 <at_params_get>
	if (param == NULL) {
   44282:	4604      	mov	r4, r0
   44284:	2800      	cmp	r0, #0
   44286:	d0f4      	beq.n	44272 <at_params_int_put+0x6>
	at_param_clear(param);
   44288:	f7e7 f9d4 	bl	2b634 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   4428c:	2302      	movs	r3, #2
	return 0;
   4428e:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   44290:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   44292:	60a5      	str	r5, [r4, #8]
	return 0;
   44294:	e7ef      	b.n	44276 <at_params_int_put+0xa>

00044296 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   44296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44298:	4617      	mov	r7, r2
   4429a:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   4429c:	b910      	cbnz	r0, 442a4 <at_params_string_put+0xe>
		return -EINVAL;
   4429e:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   442a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   442a4:	6843      	ldr	r3, [r0, #4]
   442a6:	2b00      	cmp	r3, #0
   442a8:	d0f9      	beq.n	4429e <at_params_string_put+0x8>
   442aa:	2a00      	cmp	r2, #0
   442ac:	d0f7      	beq.n	4429e <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   442ae:	f7e7 f977 	bl	2b5a0 <at_params_get>
	if (param == NULL) {
   442b2:	4604      	mov	r4, r0
   442b4:	2800      	cmp	r0, #0
   442b6:	d0f2      	beq.n	4429e <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   442b8:	1c68      	adds	r0, r5, #1
   442ba:	f7fa fe57 	bl	3ef6c <k_malloc>
	if (param_value == NULL) {
   442be:	4606      	mov	r6, r0
   442c0:	b160      	cbz	r0, 442dc <at_params_string_put+0x46>
   442c2:	462a      	mov	r2, r5
   442c4:	4639      	mov	r1, r7
   442c6:	f000 fd0e 	bl	44ce6 <memcpy>
	at_param_clear(param);
   442ca:	4620      	mov	r0, r4
   442cc:	f7e7 f9b2 	bl	2b634 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   442d0:	2303      	movs	r3, #3
	return 0;
   442d2:	2000      	movs	r0, #0
	param->size = str_len;
   442d4:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   442d6:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   442d8:	60a6      	str	r6, [r4, #8]
	return 0;
   442da:	e7e2      	b.n	442a2 <at_params_string_put+0xc>
		return -ENOMEM;
   442dc:	f06f 000b 	mvn.w	r0, #11
   442e0:	e7df      	b.n	442a2 <at_params_string_put+0xc>

000442e2 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   442e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   442e4:	4617      	mov	r7, r2
   442e6:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   442e8:	b910      	cbnz	r0, 442f0 <at_params_array_put+0xe>
		return -EINVAL;
   442ea:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   442ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   442f0:	6843      	ldr	r3, [r0, #4]
   442f2:	2b00      	cmp	r3, #0
   442f4:	d0f9      	beq.n	442ea <at_params_array_put+0x8>
   442f6:	2a00      	cmp	r2, #0
   442f8:	d0f7      	beq.n	442ea <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   442fa:	f7e7 f951 	bl	2b5a0 <at_params_get>
	if (param == NULL) {
   442fe:	4604      	mov	r4, r0
   44300:	2800      	cmp	r0, #0
   44302:	d0f2      	beq.n	442ea <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   44304:	4628      	mov	r0, r5
   44306:	f7fa fe31 	bl	3ef6c <k_malloc>
	if (param_value == NULL) {
   4430a:	4606      	mov	r6, r0
   4430c:	b160      	cbz	r0, 44328 <at_params_array_put+0x46>
   4430e:	462a      	mov	r2, r5
   44310:	4639      	mov	r1, r7
   44312:	f000 fce8 	bl	44ce6 <memcpy>
	at_param_clear(param);
   44316:	4620      	mov	r0, r4
   44318:	f7e7 f98c 	bl	2b634 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   4431c:	2304      	movs	r3, #4
	return 0;
   4431e:	2000      	movs	r0, #0
	param->size = array_len;
   44320:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   44322:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   44324:	60a6      	str	r6, [r4, #8]
	return 0;
   44326:	e7e2      	b.n	442ee <at_params_array_put+0xc>
		return -ENOMEM;
   44328:	f06f 000b 	mvn.w	r0, #11
   4432c:	e7df      	b.n	442ee <at_params_array_put+0xc>

0004432e <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   4432e:	b510      	push	{r4, lr}
   44330:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   44332:	b910      	cbnz	r0, 4433a <at_params_short_get+0xc>
		return -EINVAL;
   44334:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   44338:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   4433a:	6843      	ldr	r3, [r0, #4]
   4433c:	2b00      	cmp	r3, #0
   4433e:	d0f9      	beq.n	44334 <at_params_short_get+0x6>
   44340:	2a00      	cmp	r2, #0
   44342:	d0f7      	beq.n	44334 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   44344:	f7e7 f92c 	bl	2b5a0 <at_params_get>
	if (param == NULL) {
   44348:	2800      	cmp	r0, #0
   4434a:	d0f3      	beq.n	44334 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   4434c:	7803      	ldrb	r3, [r0, #0]
   4434e:	2b01      	cmp	r3, #1
   44350:	d1f0      	bne.n	44334 <at_params_short_get+0x6>
	*value = (uint16_t)param->value.int_val;
   44352:	6883      	ldr	r3, [r0, #8]
	return 0;
   44354:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   44356:	8023      	strh	r3, [r4, #0]
	return 0;
   44358:	e7ee      	b.n	44338 <at_params_short_get+0xa>

0004435a <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   4435a:	b510      	push	{r4, lr}
   4435c:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   4435e:	b910      	cbnz	r0, 44366 <at_params_int_get+0xc>
		return -EINVAL;
   44360:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   44364:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   44366:	6843      	ldr	r3, [r0, #4]
   44368:	2b00      	cmp	r3, #0
   4436a:	d0f9      	beq.n	44360 <at_params_int_get+0x6>
   4436c:	2a00      	cmp	r2, #0
   4436e:	d0f7      	beq.n	44360 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   44370:	f7e7 f916 	bl	2b5a0 <at_params_get>
	if (param == NULL) {
   44374:	2800      	cmp	r0, #0
   44376:	d0f3      	beq.n	44360 <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   44378:	7803      	ldrb	r3, [r0, #0]
   4437a:	3b01      	subs	r3, #1
   4437c:	2b01      	cmp	r3, #1
   4437e:	d8ef      	bhi.n	44360 <at_params_int_get+0x6>
	*value = param->value.int_val;
   44380:	6883      	ldr	r3, [r0, #8]
	return 0;
   44382:	2000      	movs	r0, #0
	*value = param->value.int_val;
   44384:	6023      	str	r3, [r4, #0]
	return 0;
   44386:	e7ed      	b.n	44364 <at_params_int_get+0xa>

00044388 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   44388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4438a:	4617      	mov	r7, r2
   4438c:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   4438e:	b910      	cbnz	r0, 44396 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   44390:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   44394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   44396:	6843      	ldr	r3, [r0, #4]
   44398:	2b00      	cmp	r3, #0
   4439a:	d0f9      	beq.n	44390 <at_params_string_get+0x8>
   4439c:	2a00      	cmp	r2, #0
   4439e:	d0f7      	beq.n	44390 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   443a0:	2c00      	cmp	r4, #0
   443a2:	d0f5      	beq.n	44390 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   443a4:	f7e7 f8fc 	bl	2b5a0 <at_params_get>
	if (param == NULL) {
   443a8:	4606      	mov	r6, r0
   443aa:	2800      	cmp	r0, #0
   443ac:	d0f0      	beq.n	44390 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   443ae:	7803      	ldrb	r3, [r0, #0]
   443b0:	2b03      	cmp	r3, #3
   443b2:	d1ed      	bne.n	44390 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   443b4:	f7e7 f916 	bl	2b5e4 <at_param_size>
	if (*len < param_len) {
   443b8:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   443ba:	4605      	mov	r5, r0
	if (*len < param_len) {
   443bc:	4283      	cmp	r3, r0
   443be:	d307      	bcc.n	443d0 <at_params_string_get+0x48>
   443c0:	4602      	mov	r2, r0
   443c2:	68b1      	ldr	r1, [r6, #8]
   443c4:	4638      	mov	r0, r7
   443c6:	f000 fc8e 	bl	44ce6 <memcpy>
	return 0;
   443ca:	2000      	movs	r0, #0
	*len = param_len;
   443cc:	6025      	str	r5, [r4, #0]
	return 0;
   443ce:	e7e1      	b.n	44394 <at_params_string_get+0xc>
		return -ENOMEM;
   443d0:	f06f 000b 	mvn.w	r0, #11
   443d4:	e7de      	b.n	44394 <at_params_string_get+0xc>

000443d6 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   443d6:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   443d8:	4605      	mov	r5, r0
   443da:	b180      	cbz	r0, 443fe <at_params_valid_count_get+0x28>
   443dc:	6843      	ldr	r3, [r0, #4]
   443de:	b173      	cbz	r3, 443fe <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   443e0:	2100      	movs	r1, #0
   443e2:	f7e7 f8dd 	bl	2b5a0 <at_params_get>
	size_t valid_i = 0;
   443e6:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   443e8:	b108      	cbz	r0, 443ee <at_params_valid_count_get+0x18>
   443ea:	7803      	ldrb	r3, [r0, #0]
   443ec:	b90b      	cbnz	r3, 443f2 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   443ee:	4620      	mov	r0, r4
   443f0:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   443f2:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   443f4:	4621      	mov	r1, r4
   443f6:	4628      	mov	r0, r5
   443f8:	f7e7 f8d2 	bl	2b5a0 <at_params_get>
   443fc:	e7f4      	b.n	443e8 <at_params_valid_count_get+0x12>
		return -EINVAL;
   443fe:	f06f 0415 	mvn.w	r4, #21
   44402:	e7f4      	b.n	443ee <at_params_valid_count_get+0x18>

00044404 <response_is_valid>:
{
   44404:	b537      	push	{r0, r1, r2, r4, r5, lr}
   44406:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   44408:	4610      	mov	r0, r2
{
   4440a:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   4440c:	9201      	str	r2, [sp, #4]
   4440e:	f7d8 ff25 	bl	1d25c <strlen>
   44412:	42a0      	cmp	r0, r4
   44414:	d809      	bhi.n	4442a <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   44416:	4622      	mov	r2, r4
   44418:	4628      	mov	r0, r5
   4441a:	9901      	ldr	r1, [sp, #4]
   4441c:	f000 fc55 	bl	44cca <memcmp>
	if ((response_len < strlen(check)) ||
   44420:	fab0 f080 	clz	r0, r0
   44424:	0940      	lsrs	r0, r0, #5
}
   44426:	b003      	add	sp, #12
   44428:	bd30      	pop	{r4, r5, pc}
		return false;
   4442a:	2000      	movs	r0, #0
   4442c:	e7fb      	b.n	44426 <response_is_valid+0x22>

0004442e <lte_lc_init_and_connect>:
{
   4442e:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   44430:	f7e7 fc0a 	bl	2bc48 <w_lte_lc_init>
	if (ret) {
   44434:	b920      	cbnz	r0, 44440 <lte_lc_init_and_connect+0x12>
}
   44436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   4443a:	2001      	movs	r0, #1
   4443c:	f7e7 bacc 	b.w	2b9d8 <w_lte_lc_connect>
}
   44440:	bd08      	pop	{r3, pc}

00044442 <json_add_str>:
{
   44442:	b513      	push	{r0, r1, r4, lr}
	if (parent == NULL || str == NULL || item == NULL) {
   44444:	4604      	mov	r4, r0
{
   44446:	9101      	str	r1, [sp, #4]
	if (parent == NULL || str == NULL || item == NULL) {
   44448:	b160      	cbz	r0, 44464 <json_add_str+0x22>
   4444a:	b15a      	cbz	r2, 44464 <json_add_str+0x22>
	json_str = cJSON_CreateString(item);
   4444c:	4610      	mov	r0, r2
   4444e:	f7e4 ff33 	bl	292b8 <cJSON_CreateString>
	if (json_str == NULL) {
   44452:	4602      	mov	r2, r0
   44454:	b148      	cbz	r0, 4446a <json_add_str+0x28>
	cJSON_AddItemToObject(parent, str, item);
   44456:	4620      	mov	r0, r4
   44458:	9901      	ldr	r1, [sp, #4]
   4445a:	f7ff fad0 	bl	439fe <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   4445e:	2000      	movs	r0, #0
}
   44460:	b002      	add	sp, #8
   44462:	bd10      	pop	{r4, pc}
		return -EINVAL;
   44464:	f06f 0015 	mvn.w	r0, #21
   44468:	e7fa      	b.n	44460 <json_add_str+0x1e>
		return -ENOMEM;
   4446a:	f06f 000b 	mvn.w	r0, #11
   4446e:	e7f7      	b.n	44460 <json_add_str+0x1e>

00044470 <json_add_data>:
{
   44470:	b570      	push	{r4, r5, r6, lr}
   44472:	460e      	mov	r6, r1
	if (param == NULL || json_obj == NULL) {
   44474:	4604      	mov	r4, r0
{
   44476:	b09c      	sub	sp, #112	; 0x70
	if (param == NULL || json_obj == NULL) {
   44478:	b920      	cbnz	r0, 44484 <json_add_data+0x14>
		return -EINVAL;
   4447a:	f06f 0415 	mvn.w	r4, #21
}
   4447e:	4620      	mov	r0, r4
   44480:	b01c      	add	sp, #112	; 0x70
   44482:	bd70      	pop	{r4, r5, r6, pc}
	if (param == NULL || json_obj == NULL) {
   44484:	2900      	cmp	r1, #0
   44486:	d0f8      	beq.n	4447a <json_add_data+0xa>
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   44488:	2264      	movs	r2, #100	; 0x64
   4448a:	2100      	movs	r1, #0
   4448c:	a803      	add	r0, sp, #12
   4448e:	f000 fc4a 	bl	44d26 <memset>
	ret = modem_info_name_get(param->type,
   44492:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   44496:	a903      	add	r1, sp, #12
   44498:	f7e7 fd90 	bl	2bfbc <modem_info_name_get>
	if (ret < 0) {
   4449c:	1e05      	subs	r5, r0, #0
   4449e:	dbec      	blt.n	4447a <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   444a0:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   444a4:	f7e7 fd80 	bl	2bfa8 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   444a8:	2803      	cmp	r0, #3
   444aa:	d114      	bne.n	444d6 <json_add_data+0x66>
   444ac:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   444b0:	2b03      	cmp	r3, #3
   444b2:	d010      	beq.n	444d6 <json_add_data+0x66>
		total_len += strlen(param->value_string);
   444b4:	1ca2      	adds	r2, r4, #2
   444b6:	4610      	mov	r0, r2
   444b8:	9201      	str	r2, [sp, #4]
   444ba:	f7d8 fecf 	bl	1d25c <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   444be:	9a01      	ldr	r2, [sp, #4]
		total_len += strlen(param->value_string);
   444c0:	4604      	mov	r4, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   444c2:	a903      	add	r1, sp, #12
   444c4:	4630      	mov	r0, r6
   444c6:	f7ff ffbc 	bl	44442 <json_add_str>
   444ca:	4428      	add	r0, r5
	if (ret < 0) {
   444cc:	ea34 0420 	bics.w	r4, r4, r0, asr #32
   444d0:	bf28      	it	cs
   444d2:	4604      	movcs	r4, r0
   444d4:	e7d3      	b.n	4447e <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   444d6:	8820      	ldrh	r0, [r4, #0]
   444d8:	f7d8 f8f4 	bl	1c6c4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   444dc:	ec41 0b10 	vmov	d0, r0, r1
   444e0:	f7d9 fa86 	bl	1d9f0 <cJSON_CreateNumber>
	if (json_num == NULL) {
   444e4:	4602      	mov	r2, r0
   444e6:	b138      	cbz	r0, 444f8 <json_add_data+0x88>
	cJSON_AddItemToObject(parent, str, item);
   444e8:	4630      	mov	r0, r6
   444ea:	a903      	add	r1, sp, #12
   444ec:	f7ff fa87 	bl	439fe <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   444f0:	2000      	movs	r0, #0
		total_len += sizeof(uint16_t);
   444f2:	2402      	movs	r4, #2
		ret += json_add_num(json_obj, data_name, param->value);
   444f4:	4428      	add	r0, r5
   444f6:	e7e9      	b.n	444cc <json_add_data+0x5c>
		return -ENOMEM;
   444f8:	f06f 000b 	mvn.w	r0, #11
   444fc:	e7f9      	b.n	444f2 <json_add_data+0x82>

000444fe <sim_data_add>:
{
   444fe:	b570      	push	{r4, r5, r6, lr}
   44500:	460e      	mov	r6, r1
	if (sim == NULL || json_obj == NULL) {
   44502:	4605      	mov	r5, r0
   44504:	b180      	cbz	r0, 44528 <sim_data_add+0x2a>
   44506:	b179      	cbz	r1, 44528 <sim_data_add+0x2a>
	total_len = json_add_data(&sim->uicc, json_obj);
   44508:	f7ff ffb2 	bl	44470 <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   4450c:	4631      	mov	r1, r6
	total_len = json_add_data(&sim->uicc, json_obj);
   4450e:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   44510:	f105 0070 	add.w	r0, r5, #112	; 0x70
   44514:	f7ff ffac 	bl	44470 <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   44518:	4631      	mov	r1, r6
	total_len += json_add_data(&sim->iccid, json_obj);
   4451a:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   4451c:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   44520:	f7ff ffa6 	bl	44470 <json_add_data>
   44524:	4420      	add	r0, r4
}
   44526:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   44528:	f06f 0015 	mvn.w	r0, #21
   4452c:	e7fb      	b.n	44526 <sim_data_add+0x28>

0004452e <k_uptime_get>:
{
   4452e:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   44530:	f000 faff 	bl	44b32 <z_impl_k_uptime_ticks>
   44534:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   44538:	fba0 2304 	umull	r2, r3, r0, r4
   4453c:	fb04 3301 	mla	r3, r4, r1, r3
   44540:	0bd0      	lsrs	r0, r2, #15
}
   44542:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   44546:	0bd9      	lsrs	r1, r3, #15
   44548:	bd10      	pop	{r4, pc}

0004454a <date_time_timestamp_clear>:
	return 0;
}

int date_time_timestamp_clear(int64_t *unix_timestamp)
{
	if (unix_timestamp == NULL) {
   4454a:	b128      	cbz	r0, 44558 <date_time_timestamp_clear+0xe>
		return -EINVAL;
	}

	*unix_timestamp = 0;
   4454c:	2200      	movs	r2, #0
   4454e:	2300      	movs	r3, #0
   44550:	e9c0 2300 	strd	r2, r3, [r0]

	return 0;
   44554:	2000      	movs	r0, #0
   44556:	4770      	bx	lr
		return -EINVAL;
   44558:	f06f 0015 	mvn.w	r0, #21
}
   4455c:	4770      	bx	lr

0004455e <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
				      struct cloud_event *evt,
				      void *user_data)
{
	if (backend->config->handler) {
   4455e:	6843      	ldr	r3, [r0, #4]
   44560:	685b      	ldr	r3, [r3, #4]
   44562:	b103      	cbz	r3, 44566 <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   44564:	4718      	bx	r3
	}
}
   44566:	4770      	bx	lr

00044568 <api_user_data_set>:
	backend->config->user_data = user_data;
   44568:	6843      	ldr	r3, [r0, #4]
}
   4456a:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   4456c:	60d9      	str	r1, [r3, #12]
}
   4456e:	4770      	bx	lr

00044570 <atomic_set>:
{
   44570:	4603      	mov	r3, r0
}
   44572:	e8d3 0fef 	ldaex	r0, [r3]
   44576:	e8c3 1fe2 	stlex	r2, r1, [r3]
   4457a:	2a00      	cmp	r2, #0
   4457c:	d1f9      	bne.n	44572 <atomic_set+0x2>
   4457e:	4770      	bx	lr

00044580 <api_ping>:
{
   44580:	b508      	push	{r3, lr}
	nct_process();
   44582:	f7ea fbdb 	bl	2ed3c <nct_process>
}
   44586:	2000      	movs	r0, #0
   44588:	bd08      	pop	{r3, pc}

0004458a <api_keepalive_time_left>:
	return nct_keepalive_time_left();
   4458a:	f7ea bbe3 	b.w	2ed54 <nct_keepalive_time_left>

0004458e <api_input>:
   4458e:	b508      	push	{r3, lr}
   44590:	f7ea fbd4 	bl	2ed3c <nct_process>
   44594:	2000      	movs	r0, #0
   44596:	bd08      	pop	{r3, pc}

00044598 <api_disconnect>:
	return nrf_cloud_disconnect();
   44598:	f7e8 be06 	b.w	2d1a8 <nrf_cloud_disconnect>

0004459c <json_add_str>:
{
   4459c:	b513      	push	{r0, r1, r4, lr}
   4459e:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   445a0:	4610      	mov	r0, r2
{
   445a2:	9101      	str	r1, [sp, #4]
	json_str = cJSON_CreateString(item);
   445a4:	f7e4 fe88 	bl	292b8 <cJSON_CreateString>
	if (json_str == NULL) {
   445a8:	4602      	mov	r2, r0
   445aa:	b130      	cbz	r0, 445ba <json_add_str+0x1e>
	cJSON_AddItemToObject(parent, str, item);
   445ac:	4620      	mov	r0, r4
   445ae:	9901      	ldr	r1, [sp, #4]
   445b0:	f7ff fa25 	bl	439fe <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   445b4:	2000      	movs	r0, #0
}
   445b6:	b002      	add	sp, #8
   445b8:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   445ba:	f06f 000b 	mvn.w	r0, #11
   445be:	e7fa      	b.n	445b6 <json_add_str+0x1a>

000445c0 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   445c0:	b108      	cbz	r0, 445c6 <json_object_decode+0x6>
   445c2:	f7ff ba0d 	b.w	439e0 <cJSON_GetObjectItem>
}
   445c6:	4770      	bx	lr

000445c8 <json_add_null>:
{
   445c8:	b513      	push	{r0, r1, r4, lr}
   445ca:	4604      	mov	r4, r0
   445cc:	9101      	str	r1, [sp, #4]
	json_null = cJSON_CreateNull();
   445ce:	f7e4 fe57 	bl	29280 <cJSON_CreateNull>
	if (json_null == NULL) {
   445d2:	4602      	mov	r2, r0
   445d4:	b130      	cbz	r0, 445e4 <json_add_null+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   445d6:	4620      	mov	r0, r4
   445d8:	9901      	ldr	r1, [sp, #4]
   445da:	f7ff fa10 	bl	439fe <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   445de:	2000      	movs	r0, #0
}
   445e0:	b002      	add	sp, #8
   445e2:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   445e4:	f06f 000b 	mvn.w	r0, #11
   445e8:	e7fa      	b.n	445e0 <json_add_null+0x18>

000445ea <json_decode_and_alloc>:
{
   445ea:	b538      	push	{r3, r4, r5, lr}
   445ec:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   445ee:	4604      	mov	r4, r0
   445f0:	b110      	cbz	r0, 445f8 <json_decode_and_alloc+0xe>
   445f2:	68c3      	ldr	r3, [r0, #12]
   445f4:	2b10      	cmp	r3, #16
   445f6:	d004      	beq.n	44602 <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   445f8:	2300      	movs	r3, #0
		return -ENOENT;
   445fa:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   445fe:	606b      	str	r3, [r5, #4]
}
   44600:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   44602:	6900      	ldr	r0, [r0, #16]
   44604:	f7d8 fe2a 	bl	1d25c <strlen>
   44608:	6028      	str	r0, [r5, #0]
	data->ptr = nrf_cloud_malloc(data->len + 1);
   4460a:	3001      	adds	r0, #1
   4460c:	f7fa fcae 	bl	3ef6c <k_malloc>
   44610:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   44612:	b130      	cbz	r0, 44622 <json_decode_and_alloc+0x38>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   44614:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   44616:	6921      	ldr	r1, [r4, #16]
   44618:	3201      	adds	r2, #1
   4461a:	f000 fd76 	bl	4510a <strncpy>
	return 0;
   4461e:	2000      	movs	r0, #0
   44620:	e7ee      	b.n	44600 <json_decode_and_alloc+0x16>
		return -ENOMEM;
   44622:	f06f 000b 	mvn.w	r0, #11
   44626:	e7eb      	b.n	44600 <json_decode_and_alloc+0x16>

00044628 <nrf_codec_init>:
{
   44628:	b508      	push	{r3, lr}
	cJSON_Init();
   4462a:	f7e4 fe75 	bl	29318 <cJSON_Init>
}
   4462e:	2000      	movs	r0, #0
   44630:	bd08      	pop	{r3, pc}

00044632 <cc_disconnection_handler>:
}

static int cc_disconnection_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}
   44632:	2000      	movs	r0, #0
   44634:	4770      	bx	lr

00044636 <disconnection_handler>:
{
   44636:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct nrf_cloud_evt evt = {
   44638:	2218      	movs	r2, #24
   4463a:	2100      	movs	r1, #0
   4463c:	4668      	mov	r0, sp
   4463e:	f000 fb72 	bl	44d26 <memset>
   44642:	2308      	movs	r3, #8
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   44644:	4669      	mov	r1, sp
   44646:	2001      	movs	r0, #1
	const struct nrf_cloud_evt evt = {
   44648:	f88d 3000 	strb.w	r3, [sp]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   4464c:	f7e8 fd34 	bl	2d0b8 <nfsm_set_current_state_and_notify>
}
   44650:	2000      	movs	r0, #0
   44652:	b007      	add	sp, #28
   44654:	f85d fb04 	ldr.w	pc, [sp], #4

00044658 <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   44658:	b510      	push	{r4, lr}
	struct nrf_cloud_evt cloud_evt = {
   4465a:	2306      	movs	r3, #6
   4465c:	2400      	movs	r4, #0
{
   4465e:	b086      	sub	sp, #24
	struct nrf_cloud_evt cloud_evt = {
   44660:	e9cd 4400 	strd	r4, r4, [sp]
   44664:	f88d 3000 	strb.w	r3, [sp]
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
   44668:	6843      	ldr	r3, [r0, #4]
	struct nrf_cloud_evt cloud_evt = {
   4466a:	aa02      	add	r2, sp, #8
   4466c:	e893 0003 	ldmia.w	r3, {r0, r1}
   44670:	e882 0003 	stmia.w	r2, {r0, r1}
   44674:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   44678:	ab06      	add	r3, sp, #24
   4467a:	e903 0003 	stmdb	r3, {r0, r1}
		.topic = nct_evt->param.dc->topic,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   4467e:	f7e8 fd15 	bl	2d0ac <nfsm_get_current_state>
   44682:	4669      	mov	r1, sp
   44684:	f7e8 fd18 	bl	2d0b8 <nfsm_set_current_state_and_notify>

	return 0;
}
   44688:	4620      	mov	r0, r4
   4468a:	b006      	add	sp, #24
   4468c:	bd10      	pop	{r4, pc}

0004468e <dc_connection_handler>:
{
   4468e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   44690:	6801      	ldr	r1, [r0, #0]
   44692:	b951      	cbnz	r1, 446aa <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   44694:	2218      	movs	r2, #24
   44696:	4668      	mov	r0, sp
   44698:	f000 fb45 	bl	44d26 <memset>
   4469c:	2304      	movs	r3, #4
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   4469e:	4669      	mov	r1, sp
   446a0:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   446a2:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   446a6:	f7e8 fd07 	bl	2d0b8 <nfsm_set_current_state_and_notify>
}
   446aa:	2000      	movs	r0, #0
   446ac:	b007      	add	sp, #28
   446ae:	f85d fb04 	ldr.w	pc, [sp], #4

000446b2 <cc_tx_ack_in_state_requested_handler>:
{
   446b2:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   446b4:	f241 632e 	movw	r3, #5678	; 0x162e
   446b8:	6842      	ldr	r2, [r0, #4]
   446ba:	429a      	cmp	r2, r3
   446bc:	d103      	bne.n	446c6 <cc_tx_ack_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   446be:	2100      	movs	r1, #0
   446c0:	2005      	movs	r0, #5
   446c2:	f7e8 fcf9 	bl	2d0b8 <nfsm_set_current_state_and_notify>
}
   446c6:	2000      	movs	r0, #0
   446c8:	bd08      	pop	{r3, pc}

000446ca <dc_disconnection_handler>:
   446ca:	2000      	movs	r0, #0
   446cc:	4770      	bx	lr

000446ce <dc_tx_ack_handler>:
   446ce:	2000      	movs	r0, #0
   446d0:	4770      	bx	lr

000446d2 <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   446d2:	2101      	movs	r1, #1
   446d4:	f7e9 bd6a 	b.w	2e1ac <dc_send>

000446d8 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   446d8:	2100      	movs	r1, #0
   446da:	f7e9 bd67 	b.w	2e1ac <dc_send>

000446de <request_send>:
	switch (dl->proto) {
   446de:	f8d0 3824 	ldr.w	r3, [r0, #2084]	; 0x824
   446e2:	2b06      	cmp	r3, #6
   446e4:	d002      	beq.n	446ec <request_send+0xe>
   446e6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   446ea:	d101      	bne.n	446f0 <request_send+0x12>
		return http_get_request_send(dl);
   446ec:	f7eb bd5e 	b.w	301ac <http_get_request_send>
}
   446f0:	2000      	movs	r0, #0
   446f2:	4770      	bx	lr

000446f4 <error_evt_send.isra.0>:
static int error_evt_send(const struct download_client *dl, int error)
   446f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   446f6:	2300      	movs	r3, #0
   446f8:	9301      	str	r3, [sp, #4]
   446fa:	9303      	str	r3, [sp, #12]
   446fc:	2301      	movs	r3, #1
		.error = -error
   446fe:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   44700:	f88d 3004 	strb.w	r3, [sp, #4]
   44704:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   44706:	6803      	ldr	r3, [r0, #0]
   44708:	a801      	add	r0, sp, #4
   4470a:	4798      	blx	r3
}
   4470c:	b005      	add	sp, #20
   4470e:	f85d fb04 	ldr.w	pc, [sp], #4

00044712 <socket_send>:
{
   44712:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	size_t off = 0;
   44716:	2500      	movs	r5, #0
{
   44718:	4606      	mov	r6, r0
   4471a:	460c      	mov	r4, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   4471c:	462f      	mov	r7, r5
		sent = send(client->fd, client->buf + off, len, 0);
   4471e:	f100 0804 	add.w	r8, r0, #4
	while (len) {
   44722:	b90c      	cbnz	r4, 44728 <socket_send+0x16>
	return 0;
   44724:	4620      	mov	r0, r4
   44726:	e00e      	b.n	44746 <socket_send+0x34>
		sent = send(client->fd, client->buf + off, len, 0);
   44728:	6830      	ldr	r0, [r6, #0]
   4472a:	2300      	movs	r3, #0
   4472c:	4622      	mov	r2, r4
   4472e:	e9cd 7700 	strd	r7, r7, [sp]
   44732:	eb08 0105 	add.w	r1, r8, r5
   44736:	f7fd fc57 	bl	41fe8 <z_impl_zsock_sendto>
		if (sent <= 0) {
   4473a:	1e03      	subs	r3, r0, #0
   4473c:	dc06      	bgt.n	4474c <socket_send+0x3a>
			return -errno;
   4473e:	f7fd ff98 	bl	42672 <__errno>
   44742:	6800      	ldr	r0, [r0, #0]
   44744:	4240      	negs	r0, r0
}
   44746:	b002      	add	sp, #8
   44748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		off += sent;
   4474c:	441d      	add	r5, r3
		len -= sent;
   4474e:	1ae4      	subs	r4, r4, r3
   44750:	e7e7      	b.n	44722 <socket_send+0x10>

00044752 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   44752:	b128      	cbz	r0, 44760 <download_client_file_size_get+0xe>
   44754:	b121      	cbz	r1, 44760 <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   44756:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

	return 0;
   4475a:	2000      	movs	r0, #0
	*size = client->file_size;
   4475c:	600b      	str	r3, [r1, #0]
	return 0;
   4475e:	4770      	bx	lr
		return -EINVAL;
   44760:	f06f 0015 	mvn.w	r0, #21
}
   44764:	4770      	bx	lr

00044766 <swallow>:
{
   44766:	b570      	push	{r4, r5, r6, lr}
   44768:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   4476a:	6800      	ldr	r0, [r0, #0]
{
   4476c:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   4476e:	f000 fcec 	bl	4514a <strstr>
	if (!p) {
   44772:	4604      	mov	r4, r0
   44774:	b130      	cbz	r0, 44784 <swallow+0x1e>
	*str = p + strlen(swallow);
   44776:	4630      	mov	r0, r6
   44778:	f7d8 fd70 	bl	1d25c <strlen>
   4477c:	4404      	add	r4, r0
	return 0;
   4477e:	2000      	movs	r0, #0
	*str = p + strlen(swallow);
   44780:	602c      	str	r4, [r5, #0]
}
   44782:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   44784:	2001      	movs	r0, #1
   44786:	e7fc      	b.n	44782 <swallow+0x1c>

00044788 <aws_jobs_cmp>:

bool aws_jobs_cmp(const char *sub, const char *pub, size_t pub_len,
		 const uint8_t *suffix)
{
   44788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4478c:	460d      	mov	r5, r1
   4478e:	4690      	mov	r8, r2
   44790:	461f      	mov	r7, r3
	int ret;

	if (sub == NULL || pub == NULL || suffix == NULL ||
   44792:	4606      	mov	r6, r0
   44794:	b328      	cbz	r0, 447e2 <aws_jobs_cmp+0x5a>
   44796:	b331      	cbz	r1, 447e6 <aws_jobs_cmp+0x5e>
   44798:	b33b      	cbz	r3, 447ea <aws_jobs_cmp+0x62>
   4479a:	7804      	ldrb	r4, [r0, #0]
   4479c:	b33c      	cbz	r4, 447ee <aws_jobs_cmp+0x66>
	    sub[0] == '\0' || pub[0] == '\0') {
   4479e:	780c      	ldrb	r4, [r1, #0]
   447a0:	b32c      	cbz	r4, 447ee <aws_jobs_cmp+0x66>
		return false;
	}

	size_t sub_len = strlen(sub);
   447a2:	f7d8 fd5b 	bl	1d25c <strlen>
   447a6:	4604      	mov	r4, r0
	size_t suff_len = strlen(suffix);
   447a8:	4638      	mov	r0, r7
   447aa:	f7d8 fd57 	bl	1d25c <strlen>

	if (sub[sub_len - 1] == '#') {
   447ae:	1933      	adds	r3, r6, r4
   447b0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
	size_t suff_len = strlen(suffix);
   447b4:	4681      	mov	r9, r0
	if (sub[sub_len - 1] == '#') {
   447b6:	2b23      	cmp	r3, #35	; 0x23
		/* Strip trailing '/#' */
		sub_len -= 2;
   447b8:	bf08      	it	eq
   447ba:	3c02      	subeq	r4, #2
	}

	ret = strncmp(sub, pub, sub_len);
   447bc:	4622      	mov	r2, r4
   447be:	4629      	mov	r1, r5
   447c0:	4630      	mov	r0, r6
   447c2:	f000 fc90 	bl	450e6 <strncmp>
	if (ret == 0 && suff_len > 0) {
   447c6:	b948      	cbnz	r0, 447dc <aws_jobs_cmp+0x54>
   447c8:	f1b9 0f00 	cmp.w	r9, #0
   447cc:	d006      	beq.n	447dc <aws_jobs_cmp+0x54>
		/* Everything up until suffix is correct, check suffix */
		return strncmp(&pub[pub_len - suff_len], suffix, suff_len) == 0;
   447ce:	eba8 0009 	sub.w	r0, r8, r9
   447d2:	464a      	mov	r2, r9
   447d4:	4639      	mov	r1, r7
   447d6:	4428      	add	r0, r5
   447d8:	f000 fc85 	bl	450e6 <strncmp>
	} else {
		return ret == 0;
   447dc:	fab0 f080 	clz	r0, r0
   447e0:	0940      	lsrs	r0, r0, #5
	}
}
   447e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return false;
   447e6:	4608      	mov	r0, r1
   447e8:	e7fb      	b.n	447e2 <aws_jobs_cmp+0x5a>
   447ea:	4618      	mov	r0, r3
   447ec:	e7f9      	b.n	447e2 <aws_jobs_cmp+0x5a>
   447ee:	4620      	mov	r0, r4
   447f0:	e7f7      	b.n	447e2 <aws_jobs_cmp+0x5a>

000447f2 <strncpy_nullterm>:
{
   447f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   447f4:	4604      	mov	r4, r0
	size_t len = strlen(src) + 1;
   447f6:	4608      	mov	r0, r1
{
   447f8:	4615      	mov	r5, r2
	size_t len = strlen(src) + 1;
   447fa:	9101      	str	r1, [sp, #4]
   447fc:	f7d8 fd2e 	bl	1d25c <strlen>
   44800:	1c46      	adds	r6, r0, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   44802:	42ae      	cmp	r6, r5
   44804:	4632      	mov	r2, r6
   44806:	4620      	mov	r0, r4
   44808:	bf28      	it	cs
   4480a:	462a      	movcs	r2, r5
   4480c:	9901      	ldr	r1, [sp, #4]
   4480e:	f000 fa6a 	bl	44ce6 <memcpy>
	if (len > maxlen) {
   44812:	42ae      	cmp	r6, r5
		dst[maxlen - 1] = '\0';
   44814:	bf82      	ittt	hi
   44816:	2300      	movhi	r3, #0
   44818:	1964      	addhi	r4, r4, r5
   4481a:	f804 3c01 	strbhi.w	r3, [r4, #-1]
}
   4481e:	b002      	add	sp, #8
   44820:	bd70      	pop	{r4, r5, r6, pc}

00044822 <sensor_sim_attr_set>:
}
   44822:	2000      	movs	r0, #0
   44824:	4770      	bx	lr

00044826 <sensor_sim_thread>:
{
   44826:	b570      	push	{r4, r5, r6, lr}
   44828:	4604      	mov	r4, r0
	struct sensor_sim_data *drv_data = dev->data;
   4482a:	68c5      	ldr	r5, [r0, #12]
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   4482c:	f105 0634 	add.w	r6, r5, #52	; 0x34
	return z_impl_k_sleep(timeout);
   44830:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   44834:	2100      	movs	r1, #0
   44836:	f7f9 f923 	bl	3da80 <z_impl_k_sleep>
		if (drv_data->drdy_handler != NULL) {
   4483a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   4483c:	2b00      	cmp	r3, #0
   4483e:	d0f7      	beq.n	44830 <sensor_sim_thread+0xa>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   44840:	4631      	mov	r1, r6
   44842:	4620      	mov	r0, r4
   44844:	4798      	blx	r3
   44846:	e7f3      	b.n	44830 <sensor_sim_thread+0xa>

00044848 <notify_event>:
	if (drv_data->handler) {
   44848:	68c3      	ldr	r3, [r0, #12]
   4484a:	685b      	ldr	r3, [r3, #4]
   4484c:	b103      	cbz	r3, 44850 <notify_event+0x8>
		drv_data->handler(dev, evt);
   4484e:	4718      	bx	r3
}
   44850:	4770      	bx	lr

00044852 <stop_work_fn>:
{
   44852:	b510      	push	{r4, lr}
	const struct device *dev = drv_data->dev;
   44854:	f6a0 1018 	subw	r0, r0, #2328	; 0x918
{
   44858:	b0b0      	sub	sp, #192	; 0xc0
	const struct device *dev = drv_data->dev;
   4485a:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   4485c:	22c0      	movs	r2, #192	; 0xc0
   4485e:	2100      	movs	r1, #0
   44860:	4668      	mov	r0, sp
   44862:	f000 fa60 	bl	44d26 <memset>
   44866:	2301      	movs	r3, #1
	notify_event(dev, &evt);
   44868:	4669      	mov	r1, sp
   4486a:	4620      	mov	r0, r4
	struct gps_event evt = {
   4486c:	f88d 3000 	strb.w	r3, [sp]
	notify_event(dev, &evt);
   44870:	f7ff ffea 	bl	44848 <notify_event>
}
   44874:	b030      	add	sp, #192	; 0xc0
   44876:	bd10      	pop	{r4, pc}

00044878 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   44878:	e8d0 0faf 	lda	r0, [r0]
}
   4487c:	4770      	bx	lr

0004487e <atomic_set>:
{
   4487e:	4603      	mov	r3, r0
}
   44880:	e8d3 0fef 	ldaex	r0, [r3]
   44884:	e8c3 1fe2 	stlex	r2, r1, [r3]
   44888:	2a00      	cmp	r2, #0
   4488a:	d1f9      	bne.n	44880 <atomic_set+0x2>
   4488c:	4770      	bx	lr

0004488e <timeout_work_fn>:
{
   4488e:	b530      	push	{r4, r5, lr}
   44890:	b0b1      	sub	sp, #196	; 0xc4
	struct gps_event evt = {
   44892:	22c0      	movs	r2, #192	; 0xc0
	const struct device *dev = drv_data->dev;
   44894:	f6a0 1348 	subw	r3, r0, #2376	; 0x948
{
   44898:	4604      	mov	r4, r0
	struct gps_event evt = {
   4489a:	2100      	movs	r1, #0
   4489c:	4668      	mov	r0, sp
	const struct device *dev = drv_data->dev;
   4489e:	681d      	ldr	r5, [r3, #0]
	struct gps_event evt = {
   448a0:	f000 fa41 	bl	44d26 <memset>
   448a4:	2302      	movs	r3, #2
	atomic_set(&drv_data->timeout_occurred, 1);
   448a6:	2101      	movs	r1, #1
   448a8:	f6a4 1024 	subw	r0, r4, #2340	; 0x924
	struct gps_event evt = {
   448ac:	f88d 3000 	strb.w	r3, [sp]
	atomic_set(&drv_data->timeout_occurred, 1);
   448b0:	f7ff ffe5 	bl	4487e <atomic_set>
	notify_event(dev, &evt);
   448b4:	4669      	mov	r1, sp
   448b6:	4628      	mov	r0, r5
   448b8:	f7ff ffc6 	bl	44848 <notify_event>
}
   448bc:	b031      	add	sp, #196	; 0xc4
   448be:	bd30      	pop	{r4, r5, pc}

000448c0 <setup>:
	drv_data->socket = -1;
   448c0:	f04f 33ff 	mov.w	r3, #4294967295
{
   448c4:	b510      	push	{r4, lr}
	struct gps_drv_data *drv_data = dev->data;
   448c6:	68c4      	ldr	r4, [r0, #12]
	atomic_set(&drv_data->is_active, 0);
   448c8:	2100      	movs	r1, #0
	drv_data->socket = -1;
   448ca:	62a3      	str	r3, [r4, #40]	; 0x28
	drv_data->dev = dev;
   448cc:	4623      	mov	r3, r4
   448ce:	f843 0b1c 	str.w	r0, [r3], #28
	atomic_set(&drv_data->is_active, 0);
   448d2:	4618      	mov	r0, r3
   448d4:	f7ff ffd3 	bl	4487e <atomic_set>
	atomic_set(&drv_data->timeout_occurred, 0);
   448d8:	2100      	movs	r1, #0
   448da:	f104 0024 	add.w	r0, r4, #36	; 0x24
   448de:	f7ff ffce 	bl	4487e <atomic_set>
}
   448e2:	2000      	movs	r0, #0
   448e4:	bd10      	pop	{r4, pc}

000448e6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   448e6:	4700      	bx	r0

000448e8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   448e8:	f000 b8b4 	b.w	44a54 <z_impl_k_busy_wait>

000448ec <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   448ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   448f0:	4770      	bx	lr

000448f2 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   448f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   448f6:	4770      	bx	lr

000448f8 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   448f8:	f44f 7080 	mov.w	r0, #256	; 0x100
   448fc:	4770      	bx	lr

000448fe <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   448fe:	f7fd be4b 	b.w	42598 <z_clock_idle_exit>

00044902 <k_heap_init>:
{
   44902:	b410      	push	{r4}
   44904:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   44908:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   4490c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   44910:	f7e0 b82e 	b.w	24970 <sys_heap_init>

00044914 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   44914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44916:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   4491a:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   4491c:	6800      	ldr	r0, [r0, #0]
{
   4491e:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   44920:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   44922:	4632      	mov	r2, r6
   44924:	463b      	mov	r3, r7
   44926:	4621      	mov	r1, r4
   44928:	f7f7 fa3a 	bl	3bda0 <k_heap_alloc>
   4492c:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   4492e:	b144      	cbz	r4, 44942 <k_mem_pool_alloc+0x2e>
   44930:	b938      	cbnz	r0, 44942 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   44932:	ea56 0307 	orrs.w	r3, r6, r7
   44936:	bf0c      	ite	eq
   44938:	f06f 000b 	mvneq.w	r0, #11
   4493c:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   44940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   44942:	2000      	movs	r0, #0
   44944:	e7fc      	b.n	44940 <k_mem_pool_alloc+0x2c>

00044946 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   44946:	e9d0 1000 	ldrd	r1, r0, [r0]
   4494a:	f7f7 bad7 	b.w	3befc <k_heap_free>

0004494e <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   4494e:	2300      	movs	r3, #0
   44950:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   44954:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   44958:	4618      	mov	r0, r3
   4495a:	4770      	bx	lr

0004495c <z_queue_node_peek>:
{
   4495c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   4495e:	4604      	mov	r4, r0
   44960:	b130      	cbz	r0, 44970 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   44962:	6802      	ldr	r2, [r0, #0]
   44964:	0793      	lsls	r3, r2, #30
   44966:	d003      	beq.n	44970 <z_queue_node_peek+0x14>
		ret = anode->data;
   44968:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   4496a:	b109      	cbz	r1, 44970 <z_queue_node_peek+0x14>
			k_free(anode);
   4496c:	f000 f97e 	bl	44c6c <k_free>
}
   44970:	4620      	mov	r0, r4
   44972:	bd10      	pop	{r4, pc}

00044974 <z_impl_k_queue_init>:
	list->head = NULL;
   44974:	2300      	movs	r3, #0
	list->tail = NULL;
   44976:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   4497a:	6083      	str	r3, [r0, #8]
   4497c:	f100 030c 	add.w	r3, r0, #12
   44980:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   44984:	f100 0314 	add.w	r3, r0, #20
   44988:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   4498c:	4770      	bx	lr

0004498e <k_queue_append>:
{
   4498e:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   44990:	2300      	movs	r3, #0
   44992:	6841      	ldr	r1, [r0, #4]
   44994:	f7f7 be58 	b.w	3c648 <queue_insert>

00044998 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   44998:	f990 000e 	ldrsb.w	r0, [r0, #14]
   4499c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   449a0:	4298      	cmp	r0, r3
   449a2:	bfac      	ite	ge
   449a4:	2000      	movge	r0, #0
   449a6:	2001      	movlt	r0, #1
   449a8:	4770      	bx	lr

000449aa <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   449aa:	4603      	mov	r3, r0
   449ac:	b920      	cbnz	r0, 449b8 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   449ae:	f3ef 8205 	mrs	r2, IPSR
   449b2:	b90a      	cbnz	r2, 449b8 <z_reschedule_irqlock+0xe>
   449b4:	f7e2 b8bc 	b.w	26b30 <arch_swap>
   449b8:	f383 8811 	msr	BASEPRI, r3
   449bc:	f3bf 8f6f 	isb	sy
}
   449c0:	4770      	bx	lr

000449c2 <z_reschedule_unlocked>:
	__asm__ volatile(
   449c2:	f04f 0320 	mov.w	r3, #32
   449c6:	f3ef 8011 	mrs	r0, BASEPRI
   449ca:	f383 8811 	msr	BASEPRI, r3
   449ce:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   449d2:	f7ff bfea 	b.w	449aa <z_reschedule_irqlock>

000449d6 <unpend_thread_no_timeout>:
{
   449d6:	b510      	push	{r4, lr}
   449d8:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   449da:	3008      	adds	r0, #8
   449dc:	f7f7 ff36 	bl	3c84c <pended_on.isra.0>
   449e0:	4621      	mov	r1, r4
   449e2:	f7f8 f87d 	bl	3cae0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   449e6:	7b63      	ldrb	r3, [r4, #13]
   449e8:	f023 0302 	bic.w	r3, r3, #2
   449ec:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   449ee:	2300      	movs	r3, #0
   449f0:	60a3      	str	r3, [r4, #8]
}
   449f2:	bd10      	pop	{r4, pc}

000449f4 <z_priq_dumb_best>:
	return list->head == list;
   449f4:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   449f6:	4298      	cmp	r0, r3
   449f8:	d004      	beq.n	44a04 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   449fa:	2b00      	cmp	r3, #0
   449fc:	bf38      	it	cc
   449fe:	2300      	movcc	r3, #0
   44a00:	4618      	mov	r0, r3
   44a02:	4770      	bx	lr
	struct k_thread *thread = NULL;
   44a04:	2000      	movs	r0, #0
}
   44a06:	4770      	bx	lr

00044a08 <z_unpend_all>:
{
   44a08:	b538      	push	{r3, r4, r5, lr}
   44a0a:	4605      	mov	r5, r0
	int need_sched = 0;
   44a0c:	2000      	movs	r0, #0
	return list->head == list;
   44a0e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   44a10:	42a5      	cmp	r5, r4
   44a12:	d000      	beq.n	44a16 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   44a14:	b904      	cbnz	r4, 44a18 <z_unpend_all+0x10>
}
   44a16:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   44a18:	4620      	mov	r0, r4
   44a1a:	f7f8 f88f 	bl	3cb3c <z_unpend_thread>
		z_ready_thread(thread);
   44a1e:	4620      	mov	r0, r4
   44a20:	f7f8 f9c6 	bl	3cdb0 <z_ready_thread>
		need_sched = 1;
   44a24:	2001      	movs	r0, #1
   44a26:	e7f2      	b.n	44a0e <z_unpend_all+0x6>

00044a28 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   44a28:	b15a      	cbz	r2, 44a42 <z_impl_k_sem_init+0x1a>
   44a2a:	428a      	cmp	r2, r1
   44a2c:	d309      	bcc.n	44a42 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   44a2e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   44a32:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   44a36:	e9c0 0000 	strd	r0, r0, [r0]
   44a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   44a3e:	2000      	movs	r0, #0
   44a40:	4770      	bx	lr
		return -EINVAL;
   44a42:	f06f 0015 	mvn.w	r0, #21
}
   44a46:	4770      	bx	lr

00044a48 <k_is_in_isr>:
   44a48:	f3ef 8005 	mrs	r0, IPSR
}
   44a4c:	3800      	subs	r0, #0
   44a4e:	bf18      	it	ne
   44a50:	2001      	movne	r0, #1
   44a52:	4770      	bx	lr

00044a54 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   44a54:	f7e0 b83c 	b.w	24ad0 <arch_busy_wait>

00044a58 <z_impl_k_thread_name_set>:
}
   44a58:	f06f 0057 	mvn.w	r0, #87	; 0x57
   44a5c:	4770      	bx	lr

00044a5e <k_thread_name_get>:
}
   44a5e:	2000      	movs	r0, #0
   44a60:	4770      	bx	lr

00044a62 <k_work_submit_to_queue>:
{
   44a62:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   44a64:	f101 0308 	add.w	r3, r1, #8
   44a68:	e8d3 2fef 	ldaex	r2, [r3]
   44a6c:	f042 0c01 	orr.w	ip, r2, #1
   44a70:	e8c3 cfee 	stlex	lr, ip, [r3]
   44a74:	f1be 0f00 	cmp.w	lr, #0
   44a78:	d1f6      	bne.n	44a68 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   44a7a:	07d3      	lsls	r3, r2, #31
   44a7c:	d403      	bmi.n	44a86 <k_work_submit_to_queue+0x24>
}
   44a7e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   44a82:	f7ff bf84 	b.w	4498e <k_queue_append>
}
   44a86:	f85d fb04 	ldr.w	pc, [sp], #4

00044a8a <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   44a8a:	f1a0 0110 	sub.w	r1, r0, #16
   44a8e:	6980      	ldr	r0, [r0, #24]
   44a90:	f7ff bfe7 	b.w	44a62 <k_work_submit_to_queue>

00044a94 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   44a94:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   44a96:	b570      	push	{r4, r5, r6, lr}
   44a98:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   44a9a:	b913      	cbnz	r3, 44aa2 <work_cancel+0xe>
		return -EALREADY;
   44a9c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   44aa0:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   44aa2:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   44aa6:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   44aaa:	07db      	lsls	r3, r3, #31
   44aac:	d52f      	bpl.n	44b0e <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   44aae:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   44ab0:	6a82      	ldr	r2, [r0, #40]	; 0x28
   44ab2:	6813      	ldr	r3, [r2, #0]
   44ab4:	b913      	cbnz	r3, 44abc <work_cancel+0x28>
			return -EINVAL;
   44ab6:	f06f 0015 	mvn.w	r0, #21
   44aba:	e7f1      	b.n	44aa0 <work_cancel+0xc>
   44abc:	429c      	cmp	r4, r3
   44abe:	d121      	bne.n	44b04 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   44ac0:	6823      	ldr	r3, [r4, #0]
   44ac2:	6856      	ldr	r6, [r2, #4]
   44ac4:	f023 0003 	bic.w	r0, r3, #3
   44ac8:	b991      	cbnz	r1, 44af0 <work_cancel+0x5c>
   44aca:	42b4      	cmp	r4, r6
	list->head = node;
   44acc:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   44ace:	d100      	bne.n	44ad2 <work_cancel+0x3e>
	list->tail = node;
   44ad0:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   44ad2:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   44ad4:	f003 0303 	and.w	r3, r3, #3
   44ad8:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   44ada:	2000      	movs	r0, #0
   44adc:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   44ade:	e8d5 3fef 	ldaex	r3, [r5]
   44ae2:	f023 0301 	bic.w	r3, r3, #1
   44ae6:	e8c5 3fe2 	stlex	r2, r3, [r5]
   44aea:	2a00      	cmp	r2, #0
   44aec:	d0d8      	beq.n	44aa0 <work_cancel+0xc>
   44aee:	e7f6      	b.n	44ade <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   44af0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   44af2:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   44af4:	f003 0303 	and.w	r3, r3, #3
   44af8:	ea43 0300 	orr.w	r3, r3, r0
   44afc:	600b      	str	r3, [r1, #0]
	list->tail = node;
   44afe:	bf08      	it	eq
   44b00:	6051      	streq	r1, [r2, #4]
}
   44b02:	e7e6      	b.n	44ad2 <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   44b04:	6818      	ldr	r0, [r3, #0]
   44b06:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   44b08:	f020 0303 	bic.w	r3, r0, #3
   44b0c:	e7d2      	b.n	44ab4 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   44b0e:	3010      	adds	r0, #16
   44b10:	f7f9 fc80 	bl	3e414 <z_abort_timeout>
		if (err) {
   44b14:	2800      	cmp	r0, #0
   44b16:	d0e0      	beq.n	44ada <work_cancel+0x46>
   44b18:	e7c0      	b.n	44a9c <work_cancel+0x8>

00044b1a <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   44b1a:	2300      	movs	r3, #0
   44b1c:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   44b20:	e9c0 3304 	strd	r3, r3, [r0, #16]
   44b24:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   44b26:	6283      	str	r3, [r0, #40]	; 0x28
}
   44b28:	4770      	bx	lr

00044b2a <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   44b2a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   44b2c:	f7f9 fe6e 	bl	3e80c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   44b30:	bd08      	pop	{r3, pc}

00044b32 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   44b32:	f7f9 be6b 	b.w	3e80c <z_tick_get>

00044b36 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   44b36:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   44b38:	1c4b      	adds	r3, r1, #1
   44b3a:	bf08      	it	eq
   44b3c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   44b40:	4604      	mov	r4, r0
   44b42:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   44b44:	d013      	beq.n	44b6e <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   44b46:	ea54 0105 	orrs.w	r1, r4, r5
   44b4a:	d103      	bne.n	44b54 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   44b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   44b50:	f7f9 be5c 	b.w	3e80c <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   44b54:	f06f 0101 	mvn.w	r1, #1
   44b58:	1a0a      	subs	r2, r1, r0
   44b5a:	f04f 31ff 	mov.w	r1, #4294967295
   44b5e:	eb61 0305 	sbc.w	r3, r1, r5
   44b62:	2a00      	cmp	r2, #0
   44b64:	f173 0100 	sbcs.w	r1, r3, #0
   44b68:	db02      	blt.n	44b70 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   44b6a:	4610      	mov	r0, r2
   44b6c:	4619      	mov	r1, r3
}
   44b6e:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   44b70:	f7f9 fe4c 	bl	3e80c <z_tick_get>
   44b74:	2c01      	cmp	r4, #1
   44b76:	f175 0300 	sbcs.w	r3, r5, #0
   44b7a:	bfbc      	itt	lt
   44b7c:	2401      	movlt	r4, #1
   44b7e:	2500      	movlt	r5, #0
   44b80:	1820      	adds	r0, r4, r0
   44b82:	eb45 0101 	adc.w	r1, r5, r1
   44b86:	e7f2      	b.n	44b6e <z_timeout_end_calc+0x38>

00044b88 <signal_poll_event>:
{
   44b88:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   44b8a:	6884      	ldr	r4, [r0, #8]
{
   44b8c:	4605      	mov	r5, r0
   44b8e:	460e      	mov	r6, r1
	if (poller) {
   44b90:	b19c      	cbz	r4, 44bba <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   44b92:	68a3      	ldr	r3, [r4, #8]
   44b94:	b95b      	cbnz	r3, 44bae <signal_poll_event+0x26>
	int retcode = 0;
   44b96:	4618      	mov	r0, r3
		poller->is_polling = false;
   44b98:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   44b9a:	2300      	movs	r3, #0
   44b9c:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   44b9e:	68eb      	ldr	r3, [r5, #12]
   44ba0:	f3c3 3104 	ubfx	r1, r3, #12, #5
   44ba4:	430e      	orrs	r6, r1
   44ba6:	f366 3310 	bfi	r3, r6, #12, #5
   44baa:	60eb      	str	r3, [r5, #12]
	return retcode;
   44bac:	e004      	b.n	44bb8 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   44bae:	4798      	blx	r3
		poller->is_polling = false;
   44bb0:	2300      	movs	r3, #0
		if (retcode < 0) {
   44bb2:	2800      	cmp	r0, #0
		poller->is_polling = false;
   44bb4:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   44bb6:	daf0      	bge.n	44b9a <signal_poll_event+0x12>
}
   44bb8:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   44bba:	4620      	mov	r0, r4
   44bbc:	e7ed      	b.n	44b9a <signal_poll_event+0x12>

00044bbe <add_event>:
{
   44bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44bc0:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   44bc2:	e9d0 2300 	ldrd	r2, r3, [r0]
   44bc6:	4290      	cmp	r0, r2
   44bc8:	4604      	mov	r4, r0
   44bca:	460d      	mov	r5, r1
   44bcc:	d106      	bne.n	44bdc <add_event+0x1e>
	node->prev = list->tail;
   44bce:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   44bd0:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   44bd2:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   44bd4:	6863      	ldr	r3, [r4, #4]
   44bd6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   44bd8:	6065      	str	r5, [r4, #4]
}
   44bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   44bdc:	2b00      	cmp	r3, #0
   44bde:	d0f6      	beq.n	44bce <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   44be0:	689b      	ldr	r3, [r3, #8]
   44be2:	6879      	ldr	r1, [r7, #4]
   44be4:	6858      	ldr	r0, [r3, #4]
   44be6:	f7ff fed7 	bl	44998 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   44bea:	2800      	cmp	r0, #0
   44bec:	d1ef      	bne.n	44bce <add_event+0x10>
	return list->head == list;
   44bee:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   44bf0:	42b4      	cmp	r4, r6
   44bf2:	d0ec      	beq.n	44bce <add_event+0x10>
   44bf4:	2e00      	cmp	r6, #0
   44bf6:	bf38      	it	cc
   44bf8:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   44bfa:	2e00      	cmp	r6, #0
   44bfc:	d0e7      	beq.n	44bce <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   44bfe:	68b3      	ldr	r3, [r6, #8]
   44c00:	6878      	ldr	r0, [r7, #4]
   44c02:	6859      	ldr	r1, [r3, #4]
   44c04:	f7ff fec8 	bl	44998 <z_is_t1_higher_prio_than_t2>
   44c08:	b128      	cbz	r0, 44c16 <add_event+0x58>
	node->prev = successor->prev;
   44c0a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   44c0c:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   44c10:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   44c12:	6075      	str	r5, [r6, #4]
			return;
   44c14:	e7e1      	b.n	44bda <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   44c16:	6863      	ldr	r3, [r4, #4]
   44c18:	42b3      	cmp	r3, r6
   44c1a:	d0d8      	beq.n	44bce <add_event+0x10>
   44c1c:	6836      	ldr	r6, [r6, #0]
   44c1e:	e7ec      	b.n	44bfa <add_event+0x3c>

00044c20 <z_handle_obj_poll_events>:
{
   44c20:	4603      	mov	r3, r0
	return list->head == list;
   44c22:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   44c24:	4283      	cmp	r3, r0
   44c26:	d008      	beq.n	44c3a <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   44c28:	e9d0 3200 	ldrd	r3, r2, [r0]
   44c2c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   44c2e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   44c30:	2300      	movs	r3, #0
	node->prev = NULL;
   44c32:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   44c36:	f7ff bfa7 	b.w	44b88 <signal_poll_event>
}
   44c3a:	4770      	bx	lr

00044c3c <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   44c3c:	2208      	movs	r2, #8
{
   44c3e:	b530      	push	{r4, r5, lr}
   44c40:	188a      	adds	r2, r1, r2
   44c42:	b085      	sub	sp, #20
   44c44:	d207      	bcs.n	44c56 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   44c46:	2400      	movs	r4, #0
   44c48:	2500      	movs	r5, #0
   44c4a:	a902      	add	r1, sp, #8
   44c4c:	e9cd 4500 	strd	r4, r5, [sp]
   44c50:	f7ff fe60 	bl	44914 <k_mem_pool_alloc>
   44c54:	b110      	cbz	r0, 44c5c <k_mem_pool_malloc+0x20>
		return NULL;
   44c56:	2000      	movs	r0, #0
}
   44c58:	b005      	add	sp, #20
   44c5a:	bd30      	pop	{r4, r5, pc}
   44c5c:	9a02      	ldr	r2, [sp, #8]
   44c5e:	ab02      	add	r3, sp, #8
   44c60:	cb03      	ldmia	r3!, {r0, r1}
   44c62:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   44c64:	9802      	ldr	r0, [sp, #8]
   44c66:	6051      	str	r1, [r2, #4]
   44c68:	3008      	adds	r0, #8
   44c6a:	e7f5      	b.n	44c58 <k_mem_pool_malloc+0x1c>

00044c6c <k_free>:
	if (ptr != NULL) {
   44c6c:	b110      	cbz	r0, 44c74 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   44c6e:	3808      	subs	r0, #8
   44c70:	f7ff be69 	b.w	44946 <k_mem_pool_free_id>
}
   44c74:	4770      	bx	lr

00044c76 <k_calloc>:
{
   44c76:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   44c78:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   44c7c:	b118      	cbz	r0, 44c86 <k_calloc+0x10>
   44c7e:	fbb2 f0f0 	udiv	r0, r2, r0
   44c82:	4281      	cmp	r1, r0
   44c84:	d10c      	bne.n	44ca0 <k_calloc+0x2a>
	ret = k_malloc(bounds);
   44c86:	4610      	mov	r0, r2
   44c88:	9201      	str	r2, [sp, #4]
   44c8a:	f7fa f96f 	bl	3ef6c <k_malloc>
	if (ret != NULL) {
   44c8e:	4604      	mov	r4, r0
   44c90:	b118      	cbz	r0, 44c9a <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   44c92:	2100      	movs	r1, #0
   44c94:	9a01      	ldr	r2, [sp, #4]
   44c96:	f000 f846 	bl	44d26 <memset>
}
   44c9a:	4620      	mov	r0, r4
   44c9c:	b002      	add	sp, #8
   44c9e:	bd10      	pop	{r4, pc}
		return NULL;
   44ca0:	2400      	movs	r4, #0
   44ca2:	e7fa      	b.n	44c9a <k_calloc+0x24>

00044ca4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   44ca4:	4770      	bx	lr

00044ca6 <atoi>:
   44ca6:	220a      	movs	r2, #10
   44ca8:	2100      	movs	r1, #0
   44caa:	f7fb b853 	b.w	3fd54 <strtol>

00044cae <memchr>:
   44cae:	b2c9      	uxtb	r1, r1
   44cb0:	4402      	add	r2, r0
   44cb2:	b510      	push	{r4, lr}
   44cb4:	4290      	cmp	r0, r2
   44cb6:	4603      	mov	r3, r0
   44cb8:	d101      	bne.n	44cbe <memchr+0x10>
   44cba:	2300      	movs	r3, #0
   44cbc:	e003      	b.n	44cc6 <memchr+0x18>
   44cbe:	781c      	ldrb	r4, [r3, #0]
   44cc0:	3001      	adds	r0, #1
   44cc2:	428c      	cmp	r4, r1
   44cc4:	d1f6      	bne.n	44cb4 <memchr+0x6>
   44cc6:	4618      	mov	r0, r3
   44cc8:	bd10      	pop	{r4, pc}

00044cca <memcmp>:
   44cca:	b530      	push	{r4, r5, lr}
   44ccc:	3901      	subs	r1, #1
   44cce:	2400      	movs	r4, #0
   44cd0:	42a2      	cmp	r2, r4
   44cd2:	d101      	bne.n	44cd8 <memcmp+0xe>
   44cd4:	2000      	movs	r0, #0
   44cd6:	e005      	b.n	44ce4 <memcmp+0x1a>
   44cd8:	5d03      	ldrb	r3, [r0, r4]
   44cda:	3401      	adds	r4, #1
   44cdc:	5d0d      	ldrb	r5, [r1, r4]
   44cde:	42ab      	cmp	r3, r5
   44ce0:	d0f6      	beq.n	44cd0 <memcmp+0x6>
   44ce2:	1b58      	subs	r0, r3, r5
   44ce4:	bd30      	pop	{r4, r5, pc}

00044ce6 <memcpy>:
   44ce6:	440a      	add	r2, r1
   44ce8:	1e43      	subs	r3, r0, #1
   44cea:	4291      	cmp	r1, r2
   44cec:	d100      	bne.n	44cf0 <memcpy+0xa>
   44cee:	4770      	bx	lr
   44cf0:	b510      	push	{r4, lr}
   44cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
   44cf6:	4291      	cmp	r1, r2
   44cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
   44cfc:	d1f9      	bne.n	44cf2 <memcpy+0xc>
   44cfe:	bd10      	pop	{r4, pc}

00044d00 <__memcpy_chk>:
   44d00:	429a      	cmp	r2, r3
   44d02:	b508      	push	{r3, lr}
   44d04:	d901      	bls.n	44d0a <__memcpy_chk+0xa>
   44d06:	f7e2 fe49 	bl	2799c <__chk_fail>
   44d0a:	4281      	cmp	r1, r0
   44d0c:	d804      	bhi.n	44d18 <__memcpy_chk+0x18>
   44d0e:	188b      	adds	r3, r1, r2
   44d10:	4298      	cmp	r0, r3
   44d12:	d3f8      	bcc.n	44d06 <__memcpy_chk+0x6>
   44d14:	4281      	cmp	r1, r0
   44d16:	d102      	bne.n	44d1e <__memcpy_chk+0x1e>
   44d18:	1883      	adds	r3, r0, r2
   44d1a:	4299      	cmp	r1, r3
   44d1c:	d3f3      	bcc.n	44d06 <__memcpy_chk+0x6>
   44d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   44d22:	f7ff bfe0 	b.w	44ce6 <memcpy>

00044d26 <memset>:
   44d26:	4402      	add	r2, r0
   44d28:	4603      	mov	r3, r0
   44d2a:	4293      	cmp	r3, r2
   44d2c:	d100      	bne.n	44d30 <memset+0xa>
   44d2e:	4770      	bx	lr
   44d30:	f803 1b01 	strb.w	r1, [r3], #1
   44d34:	e7f9      	b.n	44d2a <memset+0x4>

00044d36 <__sfputc_r>:
   44d36:	6893      	ldr	r3, [r2, #8]
   44d38:	3b01      	subs	r3, #1
   44d3a:	2b00      	cmp	r3, #0
   44d3c:	6093      	str	r3, [r2, #8]
   44d3e:	b410      	push	{r4}
   44d40:	da08      	bge.n	44d54 <__sfputc_r+0x1e>
   44d42:	6994      	ldr	r4, [r2, #24]
   44d44:	42a3      	cmp	r3, r4
   44d46:	db01      	blt.n	44d4c <__sfputc_r+0x16>
   44d48:	290a      	cmp	r1, #10
   44d4a:	d103      	bne.n	44d54 <__sfputc_r+0x1e>
   44d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
   44d50:	f7fb b8bc 	b.w	3fecc <__swbuf_r>
   44d54:	6813      	ldr	r3, [r2, #0]
   44d56:	1c58      	adds	r0, r3, #1
   44d58:	6010      	str	r0, [r2, #0]
   44d5a:	4608      	mov	r0, r1
   44d5c:	7019      	strb	r1, [r3, #0]
   44d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
   44d62:	4770      	bx	lr

00044d64 <__sfputs_r>:
   44d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44d66:	4606      	mov	r6, r0
   44d68:	460f      	mov	r7, r1
   44d6a:	4614      	mov	r4, r2
   44d6c:	18d5      	adds	r5, r2, r3
   44d6e:	42ac      	cmp	r4, r5
   44d70:	d101      	bne.n	44d76 <__sfputs_r+0x12>
   44d72:	2000      	movs	r0, #0
   44d74:	e007      	b.n	44d86 <__sfputs_r+0x22>
   44d76:	463a      	mov	r2, r7
   44d78:	f814 1b01 	ldrb.w	r1, [r4], #1
   44d7c:	4630      	mov	r0, r6
   44d7e:	f7ff ffda 	bl	44d36 <__sfputc_r>
   44d82:	1c43      	adds	r3, r0, #1
   44d84:	d1f3      	bne.n	44d6e <__sfputs_r+0xa>
   44d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00044d88 <__cvt>:
   44d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   44d8c:	ec55 4b10 	vmov	r4, r5, d0
   44d90:	2d00      	cmp	r5, #0
   44d92:	460e      	mov	r6, r1
   44d94:	4619      	mov	r1, r3
   44d96:	462b      	mov	r3, r5
   44d98:	bfb4      	ite	lt
   44d9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   44d9e:	2300      	movge	r3, #0
   44da0:	4691      	mov	r9, r2
   44da2:	bfbf      	itttt	lt
   44da4:	4622      	movlt	r2, r4
   44da6:	461d      	movlt	r5, r3
   44da8:	232d      	movlt	r3, #45	; 0x2d
   44daa:	4614      	movlt	r4, r2
   44dac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   44db0:	700b      	strb	r3, [r1, #0]
   44db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   44db4:	f023 0820 	bic.w	r8, r3, #32
   44db8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   44dbc:	d005      	beq.n	44dca <__cvt+0x42>
   44dbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   44dc2:	d100      	bne.n	44dc6 <__cvt+0x3e>
   44dc4:	3601      	adds	r6, #1
   44dc6:	2102      	movs	r1, #2
   44dc8:	e000      	b.n	44dcc <__cvt+0x44>
   44dca:	2103      	movs	r1, #3
   44dcc:	ab03      	add	r3, sp, #12
   44dce:	4632      	mov	r2, r6
   44dd0:	9301      	str	r3, [sp, #4]
   44dd2:	ab02      	add	r3, sp, #8
   44dd4:	ec45 4b10 	vmov	d0, r4, r5
   44dd8:	9300      	str	r3, [sp, #0]
   44dda:	4653      	mov	r3, sl
   44ddc:	f7db f9b4 	bl	20148 <_dtoa_r>
   44de0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   44de4:	4607      	mov	r7, r0
   44de6:	d102      	bne.n	44dee <__cvt+0x66>
   44de8:	f019 0f01 	tst.w	r9, #1
   44dec:	d022      	beq.n	44e34 <__cvt+0xac>
   44dee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   44df2:	eb07 0906 	add.w	r9, r7, r6
   44df6:	d110      	bne.n	44e1a <__cvt+0x92>
   44df8:	783b      	ldrb	r3, [r7, #0]
   44dfa:	2b30      	cmp	r3, #48	; 0x30
   44dfc:	d10a      	bne.n	44e14 <__cvt+0x8c>
   44dfe:	2200      	movs	r2, #0
   44e00:	2300      	movs	r3, #0
   44e02:	4620      	mov	r0, r4
   44e04:	4629      	mov	r1, r5
   44e06:	f7d7 ff3f 	bl	1cc88 <__aeabi_dcmpeq>
   44e0a:	b918      	cbnz	r0, 44e14 <__cvt+0x8c>
   44e0c:	f1c6 0601 	rsb	r6, r6, #1
   44e10:	f8ca 6000 	str.w	r6, [sl]
   44e14:	f8da 3000 	ldr.w	r3, [sl]
   44e18:	4499      	add	r9, r3
   44e1a:	2200      	movs	r2, #0
   44e1c:	2300      	movs	r3, #0
   44e1e:	4620      	mov	r0, r4
   44e20:	4629      	mov	r1, r5
   44e22:	f7d7 ff31 	bl	1cc88 <__aeabi_dcmpeq>
   44e26:	b108      	cbz	r0, 44e2c <__cvt+0xa4>
   44e28:	f8cd 900c 	str.w	r9, [sp, #12]
   44e2c:	2230      	movs	r2, #48	; 0x30
   44e2e:	9b03      	ldr	r3, [sp, #12]
   44e30:	454b      	cmp	r3, r9
   44e32:	d307      	bcc.n	44e44 <__cvt+0xbc>
   44e34:	9b03      	ldr	r3, [sp, #12]
   44e36:	4638      	mov	r0, r7
   44e38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   44e3a:	1bdb      	subs	r3, r3, r7
   44e3c:	6013      	str	r3, [r2, #0]
   44e3e:	b004      	add	sp, #16
   44e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   44e44:	1c59      	adds	r1, r3, #1
   44e46:	9103      	str	r1, [sp, #12]
   44e48:	701a      	strb	r2, [r3, #0]
   44e4a:	e7f0      	b.n	44e2e <__cvt+0xa6>

00044e4c <__exponent>:
   44e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   44e4e:	2900      	cmp	r1, #0
   44e50:	4603      	mov	r3, r0
   44e52:	bfb8      	it	lt
   44e54:	4249      	neglt	r1, r1
   44e56:	f803 2b02 	strb.w	r2, [r3], #2
   44e5a:	bfb4      	ite	lt
   44e5c:	222d      	movlt	r2, #45	; 0x2d
   44e5e:	222b      	movge	r2, #43	; 0x2b
   44e60:	2909      	cmp	r1, #9
   44e62:	7042      	strb	r2, [r0, #1]
   44e64:	dd2a      	ble.n	44ebc <__exponent+0x70>
   44e66:	f10d 0407 	add.w	r4, sp, #7
   44e6a:	270a      	movs	r7, #10
   44e6c:	46a4      	mov	ip, r4
   44e6e:	460a      	mov	r2, r1
   44e70:	46a6      	mov	lr, r4
   44e72:	3c01      	subs	r4, #1
   44e74:	2a63      	cmp	r2, #99	; 0x63
   44e76:	fb91 f6f7 	sdiv	r6, r1, r7
   44e7a:	fb07 1516 	mls	r5, r7, r6, r1
   44e7e:	4631      	mov	r1, r6
   44e80:	f105 0530 	add.w	r5, r5, #48	; 0x30
   44e84:	f80e 5c01 	strb.w	r5, [lr, #-1]
   44e88:	dcf1      	bgt.n	44e6e <__exponent+0x22>
   44e8a:	3130      	adds	r1, #48	; 0x30
   44e8c:	f1ae 0502 	sub.w	r5, lr, #2
   44e90:	f804 1c01 	strb.w	r1, [r4, #-1]
   44e94:	1c44      	adds	r4, r0, #1
   44e96:	4629      	mov	r1, r5
   44e98:	4561      	cmp	r1, ip
   44e9a:	d30a      	bcc.n	44eb2 <__exponent+0x66>
   44e9c:	f10d 0209 	add.w	r2, sp, #9
   44ea0:	eba2 020e 	sub.w	r2, r2, lr
   44ea4:	4565      	cmp	r5, ip
   44ea6:	bf88      	it	hi
   44ea8:	2200      	movhi	r2, #0
   44eaa:	4413      	add	r3, r2
   44eac:	1a18      	subs	r0, r3, r0
   44eae:	b003      	add	sp, #12
   44eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   44eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
   44eb6:	f804 2f01 	strb.w	r2, [r4, #1]!
   44eba:	e7ed      	b.n	44e98 <__exponent+0x4c>
   44ebc:	2330      	movs	r3, #48	; 0x30
   44ebe:	3130      	adds	r1, #48	; 0x30
   44ec0:	7083      	strb	r3, [r0, #2]
   44ec2:	1d03      	adds	r3, r0, #4
   44ec4:	70c1      	strb	r1, [r0, #3]
   44ec6:	e7f1      	b.n	44eac <__exponent+0x60>

00044ec8 <_printf_common>:
   44ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   44ecc:	4616      	mov	r6, r2
   44ece:	4699      	mov	r9, r3
   44ed0:	688a      	ldr	r2, [r1, #8]
   44ed2:	4607      	mov	r7, r0
   44ed4:	690b      	ldr	r3, [r1, #16]
   44ed6:	460c      	mov	r4, r1
   44ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   44edc:	4293      	cmp	r3, r2
   44ede:	bfb8      	it	lt
   44ee0:	4613      	movlt	r3, r2
   44ee2:	6033      	str	r3, [r6, #0]
   44ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   44ee8:	b10a      	cbz	r2, 44eee <_printf_common+0x26>
   44eea:	3301      	adds	r3, #1
   44eec:	6033      	str	r3, [r6, #0]
   44eee:	6823      	ldr	r3, [r4, #0]
   44ef0:	0699      	lsls	r1, r3, #26
   44ef2:	bf42      	ittt	mi
   44ef4:	6833      	ldrmi	r3, [r6, #0]
   44ef6:	3302      	addmi	r3, #2
   44ef8:	6033      	strmi	r3, [r6, #0]
   44efa:	6825      	ldr	r5, [r4, #0]
   44efc:	f015 0506 	ands.w	r5, r5, #6
   44f00:	d106      	bne.n	44f10 <_printf_common+0x48>
   44f02:	f104 0a19 	add.w	sl, r4, #25
   44f06:	68e3      	ldr	r3, [r4, #12]
   44f08:	6832      	ldr	r2, [r6, #0]
   44f0a:	1a9b      	subs	r3, r3, r2
   44f0c:	42ab      	cmp	r3, r5
   44f0e:	dc29      	bgt.n	44f64 <_printf_common+0x9c>
   44f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   44f14:	1e13      	subs	r3, r2, #0
   44f16:	6822      	ldr	r2, [r4, #0]
   44f18:	bf18      	it	ne
   44f1a:	2301      	movne	r3, #1
   44f1c:	0692      	lsls	r2, r2, #26
   44f1e:	d42e      	bmi.n	44f7e <_printf_common+0xb6>
   44f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
   44f24:	4649      	mov	r1, r9
   44f26:	4638      	mov	r0, r7
   44f28:	47c0      	blx	r8
   44f2a:	3001      	adds	r0, #1
   44f2c:	d021      	beq.n	44f72 <_printf_common+0xaa>
   44f2e:	6823      	ldr	r3, [r4, #0]
   44f30:	341a      	adds	r4, #26
   44f32:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   44f36:	f003 0306 	and.w	r3, r3, #6
   44f3a:	6832      	ldr	r2, [r6, #0]
   44f3c:	2600      	movs	r6, #0
   44f3e:	2b04      	cmp	r3, #4
   44f40:	f854 3c12 	ldr.w	r3, [r4, #-18]
   44f44:	bf08      	it	eq
   44f46:	1aad      	subeq	r5, r5, r2
   44f48:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   44f4c:	bf14      	ite	ne
   44f4e:	2500      	movne	r5, #0
   44f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   44f54:	4293      	cmp	r3, r2
   44f56:	bfc4      	itt	gt
   44f58:	1a9b      	subgt	r3, r3, r2
   44f5a:	18ed      	addgt	r5, r5, r3
   44f5c:	42b5      	cmp	r5, r6
   44f5e:	d11a      	bne.n	44f96 <_printf_common+0xce>
   44f60:	2000      	movs	r0, #0
   44f62:	e008      	b.n	44f76 <_printf_common+0xae>
   44f64:	2301      	movs	r3, #1
   44f66:	4652      	mov	r2, sl
   44f68:	4649      	mov	r1, r9
   44f6a:	4638      	mov	r0, r7
   44f6c:	47c0      	blx	r8
   44f6e:	3001      	adds	r0, #1
   44f70:	d103      	bne.n	44f7a <_printf_common+0xb2>
   44f72:	f04f 30ff 	mov.w	r0, #4294967295
   44f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   44f7a:	3501      	adds	r5, #1
   44f7c:	e7c3      	b.n	44f06 <_printf_common+0x3e>
   44f7e:	18e1      	adds	r1, r4, r3
   44f80:	1c5a      	adds	r2, r3, #1
   44f82:	2030      	movs	r0, #48	; 0x30
   44f84:	3302      	adds	r3, #2
   44f86:	4422      	add	r2, r4
   44f88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   44f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   44f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   44f94:	e7c4      	b.n	44f20 <_printf_common+0x58>
   44f96:	2301      	movs	r3, #1
   44f98:	4622      	mov	r2, r4
   44f9a:	4649      	mov	r1, r9
   44f9c:	4638      	mov	r0, r7
   44f9e:	47c0      	blx	r8
   44fa0:	3001      	adds	r0, #1
   44fa2:	d0e6      	beq.n	44f72 <_printf_common+0xaa>
   44fa4:	3601      	adds	r6, #1
   44fa6:	e7d9      	b.n	44f5c <_printf_common+0x94>

00044fa8 <__sprintf_chk>:
   44fa8:	b408      	push	{r3}
   44faa:	b517      	push	{r0, r1, r2, r4, lr}
   44fac:	ab05      	add	r3, sp, #20
   44fae:	1e14      	subs	r4, r2, #0
   44fb0:	f853 1b04 	ldr.w	r1, [r3], #4
   44fb4:	9301      	str	r3, [sp, #4]
   44fb6:	da07      	bge.n	44fc8 <__sprintf_chk+0x20>
   44fb8:	461a      	mov	r2, r3
   44fba:	f7fa ff7d 	bl	3feb8 <vsiprintf>
   44fbe:	b003      	add	sp, #12
   44fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   44fc4:	b001      	add	sp, #4
   44fc6:	4770      	bx	lr
   44fc8:	460a      	mov	r2, r1
   44fca:	4621      	mov	r1, r4
   44fcc:	f7fa ff50 	bl	3fe70 <vsniprintf>
   44fd0:	2800      	cmp	r0, #0
   44fd2:	dbf4      	blt.n	44fbe <__sprintf_chk+0x16>
   44fd4:	42a0      	cmp	r0, r4
   44fd6:	d3f2      	bcc.n	44fbe <__sprintf_chk+0x16>
   44fd8:	f7e2 fce0 	bl	2799c <__chk_fail>

00044fdc <__sread>:
   44fdc:	b510      	push	{r4, lr}
   44fde:	460c      	mov	r4, r1
   44fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   44fe4:	f7fc f8f8 	bl	411d8 <_read_r>
   44fe8:	2800      	cmp	r0, #0
   44fea:	bfab      	itete	ge
   44fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   44fee:	89a3      	ldrhlt	r3, [r4, #12]
   44ff0:	181b      	addge	r3, r3, r0
   44ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   44ff6:	bfac      	ite	ge
   44ff8:	6563      	strge	r3, [r4, #84]	; 0x54
   44ffa:	81a3      	strhlt	r3, [r4, #12]
   44ffc:	bd10      	pop	{r4, pc}

00044ffe <__seofread>:
   44ffe:	2000      	movs	r0, #0
   45000:	4770      	bx	lr

00045002 <__swrite>:
   45002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45006:	461f      	mov	r7, r3
   45008:	898b      	ldrh	r3, [r1, #12]
   4500a:	4605      	mov	r5, r0
   4500c:	460c      	mov	r4, r1
   4500e:	05db      	lsls	r3, r3, #23
   45010:	4616      	mov	r6, r2
   45012:	d505      	bpl.n	45020 <__swrite+0x1e>
   45014:	2302      	movs	r3, #2
   45016:	2200      	movs	r2, #0
   45018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4501c:	f7fb fbf0 	bl	40800 <_lseek_r>
   45020:	89a3      	ldrh	r3, [r4, #12]
   45022:	4632      	mov	r2, r6
   45024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   45028:	4628      	mov	r0, r5
   4502a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   4502e:	81a3      	strh	r3, [r4, #12]
   45030:	463b      	mov	r3, r7
   45032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   45036:	f7fa bf9b 	b.w	3ff70 <_write_r>

0004503a <__sseek>:
   4503a:	b510      	push	{r4, lr}
   4503c:	460c      	mov	r4, r1
   4503e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45042:	f7fb fbdd 	bl	40800 <_lseek_r>
   45046:	1c43      	adds	r3, r0, #1
   45048:	89a3      	ldrh	r3, [r4, #12]
   4504a:	bf15      	itete	ne
   4504c:	6560      	strne	r0, [r4, #84]	; 0x54
   4504e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   45052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   45056:	81a3      	strheq	r3, [r4, #12]
   45058:	bf18      	it	ne
   4505a:	81a3      	strhne	r3, [r4, #12]
   4505c:	bd10      	pop	{r4, pc}

0004505e <__sclose>:
   4505e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45062:	f7fb b805 	b.w	40070 <_close_r>

00045066 <strcat>:
   45066:	4602      	mov	r2, r0
   45068:	b510      	push	{r4, lr}
   4506a:	7814      	ldrb	r4, [r2, #0]
   4506c:	4613      	mov	r3, r2
   4506e:	3201      	adds	r2, #1
   45070:	2c00      	cmp	r4, #0
   45072:	d1fa      	bne.n	4506a <strcat+0x4>
   45074:	3b01      	subs	r3, #1
   45076:	f811 2b01 	ldrb.w	r2, [r1], #1
   4507a:	f803 2f01 	strb.w	r2, [r3, #1]!
   4507e:	2a00      	cmp	r2, #0
   45080:	d1f9      	bne.n	45076 <strcat+0x10>
   45082:	bd10      	pop	{r4, pc}

00045084 <strchr>:
   45084:	b2c9      	uxtb	r1, r1
   45086:	4603      	mov	r3, r0
   45088:	f810 2b01 	ldrb.w	r2, [r0], #1
   4508c:	b11a      	cbz	r2, 45096 <strchr+0x12>
   4508e:	428a      	cmp	r2, r1
   45090:	d1f9      	bne.n	45086 <strchr+0x2>
   45092:	4618      	mov	r0, r3
   45094:	4770      	bx	lr
   45096:	2900      	cmp	r1, #0
   45098:	bf18      	it	ne
   4509a:	2300      	movne	r3, #0
   4509c:	e7f9      	b.n	45092 <strchr+0xe>

0004509e <strcpy>:
   4509e:	4603      	mov	r3, r0
   450a0:	f811 2b01 	ldrb.w	r2, [r1], #1
   450a4:	f803 2b01 	strb.w	r2, [r3], #1
   450a8:	2a00      	cmp	r2, #0
   450aa:	d1f9      	bne.n	450a0 <strcpy+0x2>
   450ac:	4770      	bx	lr

000450ae <__strcpy_chk>:
   450ae:	b570      	push	{r4, r5, r6, lr}
   450b0:	4605      	mov	r5, r0
   450b2:	4608      	mov	r0, r1
   450b4:	4616      	mov	r6, r2
   450b6:	460c      	mov	r4, r1
   450b8:	f7d8 f8d0 	bl	1d25c <strlen>
   450bc:	1c42      	adds	r2, r0, #1
   450be:	42b2      	cmp	r2, r6
   450c0:	d901      	bls.n	450c6 <__strcpy_chk+0x18>
   450c2:	f7e2 fc6b 	bl	2799c <__chk_fail>
   450c6:	42ac      	cmp	r4, r5
   450c8:	d804      	bhi.n	450d4 <__strcpy_chk+0x26>
   450ca:	18a3      	adds	r3, r4, r2
   450cc:	429d      	cmp	r5, r3
   450ce:	d3f8      	bcc.n	450c2 <__strcpy_chk+0x14>
   450d0:	42ac      	cmp	r4, r5
   450d2:	d102      	bne.n	450da <__strcpy_chk+0x2c>
   450d4:	18ab      	adds	r3, r5, r2
   450d6:	429c      	cmp	r4, r3
   450d8:	d3f3      	bcc.n	450c2 <__strcpy_chk+0x14>
   450da:	4621      	mov	r1, r4
   450dc:	4628      	mov	r0, r5
   450de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   450e2:	f7ff be00 	b.w	44ce6 <memcpy>

000450e6 <strncmp>:
   450e6:	b510      	push	{r4, lr}
   450e8:	b16a      	cbz	r2, 45106 <strncmp+0x20>
   450ea:	3901      	subs	r1, #1
   450ec:	1884      	adds	r4, r0, r2
   450ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   450f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   450f6:	4293      	cmp	r3, r2
   450f8:	d103      	bne.n	45102 <strncmp+0x1c>
   450fa:	42a0      	cmp	r0, r4
   450fc:	d001      	beq.n	45102 <strncmp+0x1c>
   450fe:	2b00      	cmp	r3, #0
   45100:	d1f5      	bne.n	450ee <strncmp+0x8>
   45102:	1a98      	subs	r0, r3, r2
   45104:	bd10      	pop	{r4, pc}
   45106:	4610      	mov	r0, r2
   45108:	e7fc      	b.n	45104 <strncmp+0x1e>

0004510a <strncpy>:
   4510a:	3901      	subs	r1, #1
   4510c:	4603      	mov	r3, r0
   4510e:	b510      	push	{r4, lr}
   45110:	b132      	cbz	r2, 45120 <strncpy+0x16>
   45112:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   45116:	3a01      	subs	r2, #1
   45118:	f803 4b01 	strb.w	r4, [r3], #1
   4511c:	2c00      	cmp	r4, #0
   4511e:	d1f7      	bne.n	45110 <strncpy+0x6>
   45120:	441a      	add	r2, r3
   45122:	2100      	movs	r1, #0
   45124:	4293      	cmp	r3, r2
   45126:	d100      	bne.n	4512a <strncpy+0x20>
   45128:	bd10      	pop	{r4, pc}
   4512a:	f803 1b01 	strb.w	r1, [r3], #1
   4512e:	e7f9      	b.n	45124 <strncpy+0x1a>

00045130 <strnlen>:
   45130:	4602      	mov	r2, r0
   45132:	4401      	add	r1, r0
   45134:	b510      	push	{r4, lr}
   45136:	428a      	cmp	r2, r1
   45138:	4613      	mov	r3, r2
   4513a:	d101      	bne.n	45140 <strnlen+0x10>
   4513c:	1a18      	subs	r0, r3, r0
   4513e:	bd10      	pop	{r4, pc}
   45140:	781c      	ldrb	r4, [r3, #0]
   45142:	3201      	adds	r2, #1
   45144:	2c00      	cmp	r4, #0
   45146:	d1f6      	bne.n	45136 <strnlen+0x6>
   45148:	e7f8      	b.n	4513c <strnlen+0xc>

0004514a <strstr>:
   4514a:	b5f0      	push	{r4, r5, r6, r7, lr}
   4514c:	780c      	ldrb	r4, [r1, #0]
   4514e:	b164      	cbz	r4, 4516a <strstr+0x20>
   45150:	4603      	mov	r3, r0
   45152:	781a      	ldrb	r2, [r3, #0]
   45154:	4618      	mov	r0, r3
   45156:	1c5e      	adds	r6, r3, #1
   45158:	b90a      	cbnz	r2, 4515e <strstr+0x14>
   4515a:	4610      	mov	r0, r2
   4515c:	e005      	b.n	4516a <strstr+0x20>
   4515e:	4294      	cmp	r4, r2
   45160:	d108      	bne.n	45174 <strstr+0x2a>
   45162:	460d      	mov	r5, r1
   45164:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   45168:	b902      	cbnz	r2, 4516c <strstr+0x22>
   4516a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4516c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   45170:	4297      	cmp	r7, r2
   45172:	d0f7      	beq.n	45164 <strstr+0x1a>
   45174:	4633      	mov	r3, r6
   45176:	e7ec      	b.n	45152 <strstr+0x8>

00045178 <sulp>:
   45178:	b570      	push	{r4, r5, r6, lr}
   4517a:	4604      	mov	r4, r0
   4517c:	460d      	mov	r5, r1
   4517e:	4616      	mov	r6, r2
   45180:	ec45 4b10 	vmov	d0, r4, r5
   45184:	f7fb fbe8 	bl	40958 <__ulp>
   45188:	ec51 0b10 	vmov	r0, r1, d0
   4518c:	b17e      	cbz	r6, 451ae <sulp+0x36>
   4518e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   45192:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   45196:	2b00      	cmp	r3, #0
   45198:	dd09      	ble.n	451ae <sulp+0x36>
   4519a:	051b      	lsls	r3, r3, #20
   4519c:	2400      	movs	r4, #0
   4519e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   451a2:	4622      	mov	r2, r4
   451a4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   451a8:	462b      	mov	r3, r5
   451aa:	f7d7 fb05 	bl	1c7b8 <__aeabi_dmul>
   451ae:	bd70      	pop	{r4, r5, r6, pc}

000451b0 <_strtol_r>:
   451b0:	f7fa bd58 	b.w	3fc64 <_strtol_l.isra.0>

000451b4 <_strtoul_r>:
   451b4:	f7fa bdd8 	b.w	3fd68 <_strtoul_l.isra.0>

000451b8 <_vsniprintf_r>:
   451b8:	b530      	push	{r4, r5, lr}
   451ba:	1e14      	subs	r4, r2, #0
   451bc:	4605      	mov	r5, r0
   451be:	b09b      	sub	sp, #108	; 0x6c
   451c0:	4618      	mov	r0, r3
   451c2:	da05      	bge.n	451d0 <_vsniprintf_r+0x18>
   451c4:	238b      	movs	r3, #139	; 0x8b
   451c6:	f04f 30ff 	mov.w	r0, #4294967295
   451ca:	602b      	str	r3, [r5, #0]
   451cc:	b01b      	add	sp, #108	; 0x6c
   451ce:	bd30      	pop	{r4, r5, pc}
   451d0:	f44f 7302 	mov.w	r3, #520	; 0x208
   451d4:	4602      	mov	r2, r0
   451d6:	9100      	str	r1, [sp, #0]
   451d8:	4628      	mov	r0, r5
   451da:	f8ad 300c 	strh.w	r3, [sp, #12]
   451de:	bf14      	ite	ne
   451e0:	f104 33ff 	addne.w	r3, r4, #4294967295
   451e4:	4623      	moveq	r3, r4
   451e6:	9104      	str	r1, [sp, #16]
   451e8:	4669      	mov	r1, sp
   451ea:	9302      	str	r3, [sp, #8]
   451ec:	9305      	str	r3, [sp, #20]
   451ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   451f2:	f8ad 300e 	strh.w	r3, [sp, #14]
   451f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   451f8:	f7fb fc28 	bl	40a4c <_svfiprintf_r>
   451fc:	1c43      	adds	r3, r0, #1
   451fe:	bfbc      	itt	lt
   45200:	238b      	movlt	r3, #139	; 0x8b
   45202:	602b      	strlt	r3, [r5, #0]
   45204:	2c00      	cmp	r4, #0
   45206:	d0e1      	beq.n	451cc <_vsniprintf_r+0x14>
   45208:	9b00      	ldr	r3, [sp, #0]
   4520a:	2200      	movs	r2, #0
   4520c:	701a      	strb	r2, [r3, #0]
   4520e:	e7dd      	b.n	451cc <_vsniprintf_r+0x14>

00045210 <abort>:
   45210:	2006      	movs	r0, #6
   45212:	b508      	push	{r3, lr}
   45214:	f7fb fff2 	bl	411fc <raise>
   45218:	2001      	movs	r0, #1
   4521a:	f7e2 fb95 	bl	27948 <_exit>

0004521e <quorem>:
   4521e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45222:	6903      	ldr	r3, [r0, #16]
   45224:	4607      	mov	r7, r0
   45226:	690c      	ldr	r4, [r1, #16]
   45228:	42a3      	cmp	r3, r4
   4522a:	f2c0 8085 	blt.w	45338 <quorem+0x11a>
   4522e:	3c01      	subs	r4, #1
   45230:	f100 0514 	add.w	r5, r0, #20
   45234:	f101 0814 	add.w	r8, r1, #20
   45238:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   4523c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   45240:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   45244:	9301      	str	r3, [sp, #4]
   45246:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   4524a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   4524e:	3301      	adds	r3, #1
   45250:	429a      	cmp	r2, r3
   45252:	fbb2 f6f3 	udiv	r6, r2, r3
   45256:	d333      	bcc.n	452c0 <quorem+0xa2>
   45258:	f04f 0e00 	mov.w	lr, #0
   4525c:	4640      	mov	r0, r8
   4525e:	46ac      	mov	ip, r5
   45260:	46f2      	mov	sl, lr
   45262:	f850 2b04 	ldr.w	r2, [r0], #4
   45266:	b293      	uxth	r3, r2
   45268:	4581      	cmp	r9, r0
   4526a:	ea4f 4212 	mov.w	r2, r2, lsr #16
   4526e:	fb06 e303 	mla	r3, r6, r3, lr
   45272:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   45276:	b29b      	uxth	r3, r3
   45278:	fb06 e202 	mla	r2, r6, r2, lr
   4527c:	ebaa 0303 	sub.w	r3, sl, r3
   45280:	f8dc a000 	ldr.w	sl, [ip]
   45284:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   45288:	fa1f fa8a 	uxth.w	sl, sl
   4528c:	4453      	add	r3, sl
   4528e:	fa1f fa82 	uxth.w	sl, r2
   45292:	f8dc 2000 	ldr.w	r2, [ip]
   45296:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   4529a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   4529e:	b29b      	uxth	r3, r3
   452a0:	ea4f 4a22 	mov.w	sl, r2, asr #16
   452a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   452a8:	f84c 3b04 	str.w	r3, [ip], #4
   452ac:	d2d9      	bcs.n	45262 <quorem+0x44>
   452ae:	f855 300b 	ldr.w	r3, [r5, fp]
   452b2:	b92b      	cbnz	r3, 452c0 <quorem+0xa2>
   452b4:	9b01      	ldr	r3, [sp, #4]
   452b6:	3b04      	subs	r3, #4
   452b8:	429d      	cmp	r5, r3
   452ba:	461a      	mov	r2, r3
   452bc:	d330      	bcc.n	45320 <quorem+0x102>
   452be:	613c      	str	r4, [r7, #16]
   452c0:	4638      	mov	r0, r7
   452c2:	f000 fc06 	bl	45ad2 <__mcmp>
   452c6:	2800      	cmp	r0, #0
   452c8:	db26      	blt.n	45318 <quorem+0xfa>
   452ca:	3601      	adds	r6, #1
   452cc:	4628      	mov	r0, r5
   452ce:	f04f 0c00 	mov.w	ip, #0
   452d2:	f858 1b04 	ldr.w	r1, [r8], #4
   452d6:	f8d0 e000 	ldr.w	lr, [r0]
   452da:	b28b      	uxth	r3, r1
   452dc:	45c1      	cmp	r9, r8
   452de:	fa1f f28e 	uxth.w	r2, lr
   452e2:	ebac 0303 	sub.w	r3, ip, r3
   452e6:	4413      	add	r3, r2
   452e8:	ea4f 4211 	mov.w	r2, r1, lsr #16
   452ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   452f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   452f4:	b29b      	uxth	r3, r3
   452f6:	ea4f 4c22 	mov.w	ip, r2, asr #16
   452fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   452fe:	f840 3b04 	str.w	r3, [r0], #4
   45302:	d2e6      	bcs.n	452d2 <quorem+0xb4>
   45304:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   45308:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   4530c:	b922      	cbnz	r2, 45318 <quorem+0xfa>
   4530e:	3b04      	subs	r3, #4
   45310:	429d      	cmp	r5, r3
   45312:	461a      	mov	r2, r3
   45314:	d30a      	bcc.n	4532c <quorem+0x10e>
   45316:	613c      	str	r4, [r7, #16]
   45318:	4630      	mov	r0, r6
   4531a:	b003      	add	sp, #12
   4531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45320:	6812      	ldr	r2, [r2, #0]
   45322:	3b04      	subs	r3, #4
   45324:	2a00      	cmp	r2, #0
   45326:	d1ca      	bne.n	452be <quorem+0xa0>
   45328:	3c01      	subs	r4, #1
   4532a:	e7c5      	b.n	452b8 <quorem+0x9a>
   4532c:	6812      	ldr	r2, [r2, #0]
   4532e:	3b04      	subs	r3, #4
   45330:	2a00      	cmp	r2, #0
   45332:	d1f0      	bne.n	45316 <quorem+0xf8>
   45334:	3c01      	subs	r4, #1
   45336:	e7eb      	b.n	45310 <quorem+0xf2>
   45338:	2000      	movs	r0, #0
   4533a:	e7ee      	b.n	4531a <quorem+0xfc>

0004533c <__sfmoreglue>:
   4533c:	b570      	push	{r4, r5, r6, lr}
   4533e:	1e4a      	subs	r2, r1, #1
   45340:	2568      	movs	r5, #104	; 0x68
   45342:	460e      	mov	r6, r1
   45344:	4355      	muls	r5, r2
   45346:	f105 0174 	add.w	r1, r5, #116	; 0x74
   4534a:	f7f9 fec9 	bl	3f0e0 <_malloc_r>
   4534e:	4604      	mov	r4, r0
   45350:	b140      	cbz	r0, 45364 <__sfmoreglue+0x28>
   45352:	2100      	movs	r1, #0
   45354:	f105 0268 	add.w	r2, r5, #104	; 0x68
   45358:	e9c0 1600 	strd	r1, r6, [r0]
   4535c:	300c      	adds	r0, #12
   4535e:	60a0      	str	r0, [r4, #8]
   45360:	f7ff fce1 	bl	44d26 <memset>
   45364:	4620      	mov	r0, r4
   45366:	bd70      	pop	{r4, r5, r6, pc}

00045368 <_fwalk_reent>:
   45368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4536c:	4606      	mov	r6, r0
   4536e:	4688      	mov	r8, r1
   45370:	f100 0448 	add.w	r4, r0, #72	; 0x48
   45374:	2700      	movs	r7, #0
   45376:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   4537a:	f1b9 0901 	subs.w	r9, r9, #1
   4537e:	d505      	bpl.n	4538c <_fwalk_reent+0x24>
   45380:	6824      	ldr	r4, [r4, #0]
   45382:	2c00      	cmp	r4, #0
   45384:	d1f7      	bne.n	45376 <_fwalk_reent+0xe>
   45386:	4638      	mov	r0, r7
   45388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4538c:	89ab      	ldrh	r3, [r5, #12]
   4538e:	2b01      	cmp	r3, #1
   45390:	d907      	bls.n	453a2 <_fwalk_reent+0x3a>
   45392:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   45396:	3301      	adds	r3, #1
   45398:	d003      	beq.n	453a2 <_fwalk_reent+0x3a>
   4539a:	4629      	mov	r1, r5
   4539c:	4630      	mov	r0, r6
   4539e:	47c0      	blx	r8
   453a0:	4307      	orrs	r7, r0
   453a2:	3568      	adds	r5, #104	; 0x68
   453a4:	e7e9      	b.n	4537a <_fwalk_reent+0x12>

000453a6 <rshift>:
   453a6:	6903      	ldr	r3, [r0, #16]
   453a8:	114a      	asrs	r2, r1, #5
   453aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   453ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   453b2:	f100 0414 	add.w	r4, r0, #20
   453b6:	dd45      	ble.n	45444 <rshift+0x9e>
   453b8:	f011 011f 	ands.w	r1, r1, #31
   453bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   453c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   453c4:	d10c      	bne.n	453e0 <rshift+0x3a>
   453c6:	f100 0710 	add.w	r7, r0, #16
   453ca:	4629      	mov	r1, r5
   453cc:	42b1      	cmp	r1, r6
   453ce:	d334      	bcc.n	4543a <rshift+0x94>
   453d0:	1a9b      	subs	r3, r3, r2
   453d2:	1eea      	subs	r2, r5, #3
   453d4:	009b      	lsls	r3, r3, #2
   453d6:	4296      	cmp	r6, r2
   453d8:	bf38      	it	cc
   453da:	2300      	movcc	r3, #0
   453dc:	4423      	add	r3, r4
   453de:	e015      	b.n	4540c <rshift+0x66>
   453e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   453e4:	f1c1 0820 	rsb	r8, r1, #32
   453e8:	f105 0e04 	add.w	lr, r5, #4
   453ec:	46a1      	mov	r9, r4
   453ee:	40cf      	lsrs	r7, r1
   453f0:	4576      	cmp	r6, lr
   453f2:	46f4      	mov	ip, lr
   453f4:	d815      	bhi.n	45422 <rshift+0x7c>
   453f6:	1a9b      	subs	r3, r3, r2
   453f8:	3501      	adds	r5, #1
   453fa:	009a      	lsls	r2, r3, #2
   453fc:	3a04      	subs	r2, #4
   453fe:	42ae      	cmp	r6, r5
   45400:	bf38      	it	cc
   45402:	2200      	movcc	r2, #0
   45404:	18a3      	adds	r3, r4, r2
   45406:	50a7      	str	r7, [r4, r2]
   45408:	b107      	cbz	r7, 4540c <rshift+0x66>
   4540a:	3304      	adds	r3, #4
   4540c:	1b1a      	subs	r2, r3, r4
   4540e:	42a3      	cmp	r3, r4
   45410:	ea4f 02a2 	mov.w	r2, r2, asr #2
   45414:	bf08      	it	eq
   45416:	2300      	moveq	r3, #0
   45418:	6102      	str	r2, [r0, #16]
   4541a:	bf08      	it	eq
   4541c:	6143      	streq	r3, [r0, #20]
   4541e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   45422:	f8dc c000 	ldr.w	ip, [ip]
   45426:	fa0c fc08 	lsl.w	ip, ip, r8
   4542a:	ea4c 0707 	orr.w	r7, ip, r7
   4542e:	f849 7b04 	str.w	r7, [r9], #4
   45432:	f85e 7b04 	ldr.w	r7, [lr], #4
   45436:	40cf      	lsrs	r7, r1
   45438:	e7da      	b.n	453f0 <rshift+0x4a>
   4543a:	f851 cb04 	ldr.w	ip, [r1], #4
   4543e:	f847 cf04 	str.w	ip, [r7, #4]!
   45442:	e7c3      	b.n	453cc <rshift+0x26>
   45444:	4623      	mov	r3, r4
   45446:	e7e1      	b.n	4540c <rshift+0x66>

00045448 <__hexdig_fun>:
   45448:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   4544c:	2b09      	cmp	r3, #9
   4544e:	d802      	bhi.n	45456 <__hexdig_fun+0xe>
   45450:	3820      	subs	r0, #32
   45452:	b2c0      	uxtb	r0, r0
   45454:	4770      	bx	lr
   45456:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   4545a:	2b05      	cmp	r3, #5
   4545c:	d801      	bhi.n	45462 <__hexdig_fun+0x1a>
   4545e:	3847      	subs	r0, #71	; 0x47
   45460:	e7f7      	b.n	45452 <__hexdig_fun+0xa>
   45462:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   45466:	2b05      	cmp	r3, #5
   45468:	d801      	bhi.n	4546e <__hexdig_fun+0x26>
   4546a:	3827      	subs	r0, #39	; 0x27
   4546c:	e7f1      	b.n	45452 <__hexdig_fun+0xa>
   4546e:	2000      	movs	r0, #0
   45470:	4770      	bx	lr

00045472 <L_shift>:
   45472:	f1c2 0208 	rsb	r2, r2, #8
   45476:	0092      	lsls	r2, r2, #2
   45478:	b570      	push	{r4, r5, r6, lr}
   4547a:	f1c2 0620 	rsb	r6, r2, #32
   4547e:	6843      	ldr	r3, [r0, #4]
   45480:	6804      	ldr	r4, [r0, #0]
   45482:	fa03 f506 	lsl.w	r5, r3, r6
   45486:	40d3      	lsrs	r3, r2
   45488:	432c      	orrs	r4, r5
   4548a:	6004      	str	r4, [r0, #0]
   4548c:	f840 3f04 	str.w	r3, [r0, #4]!
   45490:	4288      	cmp	r0, r1
   45492:	d3f4      	bcc.n	4547e <L_shift+0xc>
   45494:	bd70      	pop	{r4, r5, r6, pc}

00045496 <__match>:
   45496:	6803      	ldr	r3, [r0, #0]
   45498:	3301      	adds	r3, #1
   4549a:	b530      	push	{r4, r5, lr}
   4549c:	f811 4b01 	ldrb.w	r4, [r1], #1
   454a0:	b914      	cbnz	r4, 454a8 <__match+0x12>
   454a2:	6003      	str	r3, [r0, #0]
   454a4:	2001      	movs	r0, #1
   454a6:	bd30      	pop	{r4, r5, pc}
   454a8:	f813 2b01 	ldrb.w	r2, [r3], #1
   454ac:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   454b0:	2d19      	cmp	r5, #25
   454b2:	bf98      	it	ls
   454b4:	3220      	addls	r2, #32
   454b6:	42a2      	cmp	r2, r4
   454b8:	d0f0      	beq.n	4549c <__match+0x6>
   454ba:	2000      	movs	r0, #0
   454bc:	e7f3      	b.n	454a6 <__match+0x10>

000454be <__hexnan>:
   454be:	680b      	ldr	r3, [r1, #0]
   454c0:	6801      	ldr	r1, [r0, #0]
   454c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   454c6:	115e      	asrs	r6, r3, #5
   454c8:	f013 031f 	ands.w	r3, r3, #31
   454cc:	f04f 0500 	mov.w	r5, #0
   454d0:	b087      	sub	sp, #28
   454d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   454d6:	4682      	mov	sl, r0
   454d8:	4690      	mov	r8, r2
   454da:	46ab      	mov	fp, r5
   454dc:	bf18      	it	ne
   454de:	3604      	addne	r6, #4
   454e0:	9301      	str	r3, [sp, #4]
   454e2:	9502      	str	r5, [sp, #8]
   454e4:	1f37      	subs	r7, r6, #4
   454e6:	f846 5c04 	str.w	r5, [r6, #-4]
   454ea:	46b9      	mov	r9, r7
   454ec:	463c      	mov	r4, r7
   454ee:	1c4b      	adds	r3, r1, #1
   454f0:	784a      	ldrb	r2, [r1, #1]
   454f2:	9303      	str	r3, [sp, #12]
   454f4:	b342      	cbz	r2, 45548 <__hexnan+0x8a>
   454f6:	4610      	mov	r0, r2
   454f8:	9105      	str	r1, [sp, #20]
   454fa:	9204      	str	r2, [sp, #16]
   454fc:	f7ff ffa4 	bl	45448 <__hexdig_fun>
   45500:	2800      	cmp	r0, #0
   45502:	d14f      	bne.n	455a4 <__hexnan+0xe6>
   45504:	9a04      	ldr	r2, [sp, #16]
   45506:	9905      	ldr	r1, [sp, #20]
   45508:	2a20      	cmp	r2, #32
   4550a:	d818      	bhi.n	4553e <__hexnan+0x80>
   4550c:	9b02      	ldr	r3, [sp, #8]
   4550e:	459b      	cmp	fp, r3
   45510:	dd13      	ble.n	4553a <__hexnan+0x7c>
   45512:	454c      	cmp	r4, r9
   45514:	d206      	bcs.n	45524 <__hexnan+0x66>
   45516:	2d07      	cmp	r5, #7
   45518:	dc04      	bgt.n	45524 <__hexnan+0x66>
   4551a:	462a      	mov	r2, r5
   4551c:	4649      	mov	r1, r9
   4551e:	4620      	mov	r0, r4
   45520:	f7ff ffa7 	bl	45472 <L_shift>
   45524:	4544      	cmp	r4, r8
   45526:	d94f      	bls.n	455c8 <__hexnan+0x10a>
   45528:	2300      	movs	r3, #0
   4552a:	f1a4 0904 	sub.w	r9, r4, #4
   4552e:	f8cd b008 	str.w	fp, [sp, #8]
   45532:	f844 3c04 	str.w	r3, [r4, #-4]
   45536:	461d      	mov	r5, r3
   45538:	464c      	mov	r4, r9
   4553a:	9903      	ldr	r1, [sp, #12]
   4553c:	e7d7      	b.n	454ee <__hexnan+0x30>
   4553e:	2a29      	cmp	r2, #41	; 0x29
   45540:	d155      	bne.n	455ee <__hexnan+0x130>
   45542:	3102      	adds	r1, #2
   45544:	f8ca 1000 	str.w	r1, [sl]
   45548:	f1bb 0f00 	cmp.w	fp, #0
   4554c:	d04f      	beq.n	455ee <__hexnan+0x130>
   4554e:	454c      	cmp	r4, r9
   45550:	d206      	bcs.n	45560 <__hexnan+0xa2>
   45552:	2d07      	cmp	r5, #7
   45554:	dc04      	bgt.n	45560 <__hexnan+0xa2>
   45556:	462a      	mov	r2, r5
   45558:	4649      	mov	r1, r9
   4555a:	4620      	mov	r0, r4
   4555c:	f7ff ff89 	bl	45472 <L_shift>
   45560:	4544      	cmp	r4, r8
   45562:	d933      	bls.n	455cc <__hexnan+0x10e>
   45564:	f1a8 0204 	sub.w	r2, r8, #4
   45568:	4623      	mov	r3, r4
   4556a:	f853 1b04 	ldr.w	r1, [r3], #4
   4556e:	429f      	cmp	r7, r3
   45570:	f842 1f04 	str.w	r1, [r2, #4]!
   45574:	d2f9      	bcs.n	4556a <__hexnan+0xac>
   45576:	1b3b      	subs	r3, r7, r4
   45578:	3e03      	subs	r6, #3
   4557a:	3401      	adds	r4, #1
   4557c:	2200      	movs	r2, #0
   4557e:	f023 0303 	bic.w	r3, r3, #3
   45582:	3304      	adds	r3, #4
   45584:	42b4      	cmp	r4, r6
   45586:	bf88      	it	hi
   45588:	2304      	movhi	r3, #4
   4558a:	4443      	add	r3, r8
   4558c:	f843 2b04 	str.w	r2, [r3], #4
   45590:	429f      	cmp	r7, r3
   45592:	d2fb      	bcs.n	4558c <__hexnan+0xce>
   45594:	683b      	ldr	r3, [r7, #0]
   45596:	b91b      	cbnz	r3, 455a0 <__hexnan+0xe2>
   45598:	4547      	cmp	r7, r8
   4559a:	d126      	bne.n	455ea <__hexnan+0x12c>
   4559c:	2301      	movs	r3, #1
   4559e:	603b      	str	r3, [r7, #0]
   455a0:	2005      	movs	r0, #5
   455a2:	e025      	b.n	455f0 <__hexnan+0x132>
   455a4:	3501      	adds	r5, #1
   455a6:	f10b 0b01 	add.w	fp, fp, #1
   455aa:	2d08      	cmp	r5, #8
   455ac:	dd05      	ble.n	455ba <__hexnan+0xfc>
   455ae:	4544      	cmp	r4, r8
   455b0:	d9c3      	bls.n	4553a <__hexnan+0x7c>
   455b2:	2300      	movs	r3, #0
   455b4:	3c04      	subs	r4, #4
   455b6:	2501      	movs	r5, #1
   455b8:	6023      	str	r3, [r4, #0]
   455ba:	6822      	ldr	r2, [r4, #0]
   455bc:	f000 000f 	and.w	r0, r0, #15
   455c0:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   455c4:	6022      	str	r2, [r4, #0]
   455c6:	e7b8      	b.n	4553a <__hexnan+0x7c>
   455c8:	2508      	movs	r5, #8
   455ca:	e7b6      	b.n	4553a <__hexnan+0x7c>
   455cc:	9b01      	ldr	r3, [sp, #4]
   455ce:	2b00      	cmp	r3, #0
   455d0:	d0e0      	beq.n	45594 <__hexnan+0xd6>
   455d2:	f04f 32ff 	mov.w	r2, #4294967295
   455d6:	f1c3 0320 	rsb	r3, r3, #32
   455da:	fa22 f303 	lsr.w	r3, r2, r3
   455de:	f856 2c04 	ldr.w	r2, [r6, #-4]
   455e2:	401a      	ands	r2, r3
   455e4:	f846 2c04 	str.w	r2, [r6, #-4]
   455e8:	e7d4      	b.n	45594 <__hexnan+0xd6>
   455ea:	3f04      	subs	r7, #4
   455ec:	e7d2      	b.n	45594 <__hexnan+0xd6>
   455ee:	2004      	movs	r0, #4
   455f0:	b007      	add	sp, #28
   455f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000455f6 <__retarget_lock_init_recursive>:
   455f6:	4770      	bx	lr

000455f8 <__retarget_lock_acquire_recursive>:
   455f8:	4770      	bx	lr

000455fa <__retarget_lock_release_recursive>:
   455fa:	4770      	bx	lr

000455fc <__swhatbuf_r>:
   455fc:	b570      	push	{r4, r5, r6, lr}
   455fe:	460e      	mov	r6, r1
   45600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45604:	b096      	sub	sp, #88	; 0x58
   45606:	4614      	mov	r4, r2
   45608:	2900      	cmp	r1, #0
   4560a:	461d      	mov	r5, r3
   4560c:	da07      	bge.n	4561e <__swhatbuf_r+0x22>
   4560e:	2300      	movs	r3, #0
   45610:	602b      	str	r3, [r5, #0]
   45612:	89b3      	ldrh	r3, [r6, #12]
   45614:	061a      	lsls	r2, r3, #24
   45616:	d410      	bmi.n	4563a <__swhatbuf_r+0x3e>
   45618:	f44f 6380 	mov.w	r3, #1024	; 0x400
   4561c:	e00e      	b.n	4563c <__swhatbuf_r+0x40>
   4561e:	466a      	mov	r2, sp
   45620:	f7fb fe06 	bl	41230 <_fstat_r>
   45624:	2800      	cmp	r0, #0
   45626:	dbf2      	blt.n	4560e <__swhatbuf_r+0x12>
   45628:	9a01      	ldr	r2, [sp, #4]
   4562a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   4562e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   45632:	425a      	negs	r2, r3
   45634:	415a      	adcs	r2, r3
   45636:	602a      	str	r2, [r5, #0]
   45638:	e7ee      	b.n	45618 <__swhatbuf_r+0x1c>
   4563a:	2340      	movs	r3, #64	; 0x40
   4563c:	2000      	movs	r0, #0
   4563e:	6023      	str	r3, [r4, #0]
   45640:	b016      	add	sp, #88	; 0x58
   45642:	bd70      	pop	{r4, r5, r6, pc}

00045644 <__ascii_mbtowc>:
   45644:	b082      	sub	sp, #8
   45646:	b901      	cbnz	r1, 4564a <__ascii_mbtowc+0x6>
   45648:	a901      	add	r1, sp, #4
   4564a:	b142      	cbz	r2, 4565e <__ascii_mbtowc+0x1a>
   4564c:	b14b      	cbz	r3, 45662 <__ascii_mbtowc+0x1e>
   4564e:	7813      	ldrb	r3, [r2, #0]
   45650:	600b      	str	r3, [r1, #0]
   45652:	7812      	ldrb	r2, [r2, #0]
   45654:	1e10      	subs	r0, r2, #0
   45656:	bf18      	it	ne
   45658:	2001      	movne	r0, #1
   4565a:	b002      	add	sp, #8
   4565c:	4770      	bx	lr
   4565e:	4610      	mov	r0, r2
   45660:	e7fb      	b.n	4565a <__ascii_mbtowc+0x16>
   45662:	f06f 0001 	mvn.w	r0, #1
   45666:	e7f8      	b.n	4565a <__ascii_mbtowc+0x16>

00045668 <memmove>:
   45668:	4288      	cmp	r0, r1
   4566a:	b510      	push	{r4, lr}
   4566c:	eb01 0402 	add.w	r4, r1, r2
   45670:	d902      	bls.n	45678 <memmove+0x10>
   45672:	4284      	cmp	r4, r0
   45674:	4623      	mov	r3, r4
   45676:	d807      	bhi.n	45688 <memmove+0x20>
   45678:	1e43      	subs	r3, r0, #1
   4567a:	42a1      	cmp	r1, r4
   4567c:	d008      	beq.n	45690 <memmove+0x28>
   4567e:	f811 2b01 	ldrb.w	r2, [r1], #1
   45682:	f803 2f01 	strb.w	r2, [r3, #1]!
   45686:	e7f8      	b.n	4567a <memmove+0x12>
   45688:	4402      	add	r2, r0
   4568a:	4601      	mov	r1, r0
   4568c:	428a      	cmp	r2, r1
   4568e:	d100      	bne.n	45692 <memmove+0x2a>
   45690:	bd10      	pop	{r4, pc}
   45692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   45696:	f802 4d01 	strb.w	r4, [r2, #-1]!
   4569a:	e7f7      	b.n	4568c <memmove+0x24>

0004569c <_Balloc>:
   4569c:	b570      	push	{r4, r5, r6, lr}
   4569e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   456a0:	4604      	mov	r4, r0
   456a2:	460d      	mov	r5, r1
   456a4:	b93e      	cbnz	r6, 456b6 <_Balloc+0x1a>
   456a6:	2010      	movs	r0, #16
   456a8:	f7f9 fcba 	bl	3f020 <malloc>
   456ac:	6260      	str	r0, [r4, #36]	; 0x24
   456ae:	6006      	str	r6, [r0, #0]
   456b0:	60c6      	str	r6, [r0, #12]
   456b2:	e9c0 6601 	strd	r6, r6, [r0, #4]
   456b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   456b8:	68f3      	ldr	r3, [r6, #12]
   456ba:	b183      	cbz	r3, 456de <_Balloc+0x42>
   456bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   456be:	68db      	ldr	r3, [r3, #12]
   456c0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   456c4:	b9b8      	cbnz	r0, 456f6 <_Balloc+0x5a>
   456c6:	2101      	movs	r1, #1
   456c8:	4620      	mov	r0, r4
   456ca:	fa01 f605 	lsl.w	r6, r1, r5
   456ce:	1d72      	adds	r2, r6, #5
   456d0:	0092      	lsls	r2, r2, #2
   456d2:	f000 fb5e 	bl	45d92 <_calloc_r>
   456d6:	b160      	cbz	r0, 456f2 <_Balloc+0x56>
   456d8:	e9c0 5601 	strd	r5, r6, [r0, #4]
   456dc:	e00e      	b.n	456fc <_Balloc+0x60>
   456de:	2221      	movs	r2, #33	; 0x21
   456e0:	2104      	movs	r1, #4
   456e2:	4620      	mov	r0, r4
   456e4:	f000 fb55 	bl	45d92 <_calloc_r>
   456e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   456ea:	60f0      	str	r0, [r6, #12]
   456ec:	68db      	ldr	r3, [r3, #12]
   456ee:	2b00      	cmp	r3, #0
   456f0:	d1e4      	bne.n	456bc <_Balloc+0x20>
   456f2:	2000      	movs	r0, #0
   456f4:	bd70      	pop	{r4, r5, r6, pc}
   456f6:	6802      	ldr	r2, [r0, #0]
   456f8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   456fc:	2300      	movs	r3, #0
   456fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
   45702:	e7f7      	b.n	456f4 <_Balloc+0x58>

00045704 <_Bfree>:
   45704:	b570      	push	{r4, r5, r6, lr}
   45706:	6a46      	ldr	r6, [r0, #36]	; 0x24
   45708:	4605      	mov	r5, r0
   4570a:	460c      	mov	r4, r1
   4570c:	b93e      	cbnz	r6, 4571e <_Bfree+0x1a>
   4570e:	2010      	movs	r0, #16
   45710:	f7f9 fc86 	bl	3f020 <malloc>
   45714:	6268      	str	r0, [r5, #36]	; 0x24
   45716:	6006      	str	r6, [r0, #0]
   45718:	60c6      	str	r6, [r0, #12]
   4571a:	e9c0 6601 	strd	r6, r6, [r0, #4]
   4571e:	b13c      	cbz	r4, 45730 <_Bfree+0x2c>
   45720:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   45722:	6862      	ldr	r2, [r4, #4]
   45724:	68db      	ldr	r3, [r3, #12]
   45726:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   4572a:	6021      	str	r1, [r4, #0]
   4572c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   45730:	bd70      	pop	{r4, r5, r6, pc}

00045732 <__multadd>:
   45732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45736:	4607      	mov	r7, r0
   45738:	4698      	mov	r8, r3
   4573a:	460c      	mov	r4, r1
   4573c:	690e      	ldr	r6, [r1, #16]
   4573e:	f101 0014 	add.w	r0, r1, #20
   45742:	2300      	movs	r3, #0
   45744:	6805      	ldr	r5, [r0, #0]
   45746:	3301      	adds	r3, #1
   45748:	b2a9      	uxth	r1, r5
   4574a:	429e      	cmp	r6, r3
   4574c:	ea4f 4515 	mov.w	r5, r5, lsr #16
   45750:	fb02 8101 	mla	r1, r2, r1, r8
   45754:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   45758:	b289      	uxth	r1, r1
   4575a:	fb02 c505 	mla	r5, r2, r5, ip
   4575e:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   45762:	ea4f 4815 	mov.w	r8, r5, lsr #16
   45766:	f840 1b04 	str.w	r1, [r0], #4
   4576a:	dceb      	bgt.n	45744 <__multadd+0x12>
   4576c:	f1b8 0f00 	cmp.w	r8, #0
   45770:	d01b      	beq.n	457aa <__multadd+0x78>
   45772:	68a3      	ldr	r3, [r4, #8]
   45774:	42b3      	cmp	r3, r6
   45776:	dc12      	bgt.n	4579e <__multadd+0x6c>
   45778:	6861      	ldr	r1, [r4, #4]
   4577a:	4638      	mov	r0, r7
   4577c:	3101      	adds	r1, #1
   4577e:	f7ff ff8d 	bl	4569c <_Balloc>
   45782:	6922      	ldr	r2, [r4, #16]
   45784:	4605      	mov	r5, r0
   45786:	f104 010c 	add.w	r1, r4, #12
   4578a:	3202      	adds	r2, #2
   4578c:	300c      	adds	r0, #12
   4578e:	0092      	lsls	r2, r2, #2
   45790:	f7ff faa9 	bl	44ce6 <memcpy>
   45794:	4621      	mov	r1, r4
   45796:	462c      	mov	r4, r5
   45798:	4638      	mov	r0, r7
   4579a:	f7ff ffb3 	bl	45704 <_Bfree>
   4579e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   457a2:	3601      	adds	r6, #1
   457a4:	f8c3 8014 	str.w	r8, [r3, #20]
   457a8:	6126      	str	r6, [r4, #16]
   457aa:	4620      	mov	r0, r4
   457ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000457b0 <__s2b>:
   457b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   457b4:	4615      	mov	r5, r2
   457b6:	461f      	mov	r7, r3
   457b8:	2209      	movs	r2, #9
   457ba:	3308      	adds	r3, #8
   457bc:	460c      	mov	r4, r1
   457be:	4606      	mov	r6, r0
   457c0:	2100      	movs	r1, #0
   457c2:	fb93 f3f2 	sdiv	r3, r3, r2
   457c6:	2201      	movs	r2, #1
   457c8:	429a      	cmp	r2, r3
   457ca:	db20      	blt.n	4580e <__s2b+0x5e>
   457cc:	4630      	mov	r0, r6
   457ce:	f7ff ff65 	bl	4569c <_Balloc>
   457d2:	9b08      	ldr	r3, [sp, #32]
   457d4:	2d09      	cmp	r5, #9
   457d6:	6143      	str	r3, [r0, #20]
   457d8:	f04f 0301 	mov.w	r3, #1
   457dc:	6103      	str	r3, [r0, #16]
   457de:	dd19      	ble.n	45814 <__s2b+0x64>
   457e0:	f104 0909 	add.w	r9, r4, #9
   457e4:	442c      	add	r4, r5
   457e6:	46c8      	mov	r8, r9
   457e8:	f818 3b01 	ldrb.w	r3, [r8], #1
   457ec:	4601      	mov	r1, r0
   457ee:	220a      	movs	r2, #10
   457f0:	4630      	mov	r0, r6
   457f2:	3b30      	subs	r3, #48	; 0x30
   457f4:	f7ff ff9d 	bl	45732 <__multadd>
   457f8:	45a0      	cmp	r8, r4
   457fa:	d1f5      	bne.n	457e8 <__s2b+0x38>
   457fc:	f1a5 0408 	sub.w	r4, r5, #8
   45800:	444c      	add	r4, r9
   45802:	1b2d      	subs	r5, r5, r4
   45804:	1963      	adds	r3, r4, r5
   45806:	42bb      	cmp	r3, r7
   45808:	db07      	blt.n	4581a <__s2b+0x6a>
   4580a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4580e:	0052      	lsls	r2, r2, #1
   45810:	3101      	adds	r1, #1
   45812:	e7d9      	b.n	457c8 <__s2b+0x18>
   45814:	340a      	adds	r4, #10
   45816:	2509      	movs	r5, #9
   45818:	e7f3      	b.n	45802 <__s2b+0x52>
   4581a:	f814 3b01 	ldrb.w	r3, [r4], #1
   4581e:	4601      	mov	r1, r0
   45820:	220a      	movs	r2, #10
   45822:	4630      	mov	r0, r6
   45824:	3b30      	subs	r3, #48	; 0x30
   45826:	f7ff ff84 	bl	45732 <__multadd>
   4582a:	e7eb      	b.n	45804 <__s2b+0x54>

0004582c <__hi0bits>:
   4582c:	0c03      	lsrs	r3, r0, #16
   4582e:	041b      	lsls	r3, r3, #16
   45830:	b9d3      	cbnz	r3, 45868 <__hi0bits+0x3c>
   45832:	0400      	lsls	r0, r0, #16
   45834:	2310      	movs	r3, #16
   45836:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   4583a:	bf04      	itt	eq
   4583c:	0200      	lsleq	r0, r0, #8
   4583e:	3308      	addeq	r3, #8
   45840:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   45844:	bf04      	itt	eq
   45846:	0100      	lsleq	r0, r0, #4
   45848:	3304      	addeq	r3, #4
   4584a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   4584e:	bf04      	itt	eq
   45850:	0080      	lsleq	r0, r0, #2
   45852:	3302      	addeq	r3, #2
   45854:	2800      	cmp	r0, #0
   45856:	db05      	blt.n	45864 <__hi0bits+0x38>
   45858:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   4585c:	f103 0301 	add.w	r3, r3, #1
   45860:	bf08      	it	eq
   45862:	2320      	moveq	r3, #32
   45864:	4618      	mov	r0, r3
   45866:	4770      	bx	lr
   45868:	2300      	movs	r3, #0
   4586a:	e7e4      	b.n	45836 <__hi0bits+0xa>

0004586c <__lo0bits>:
   4586c:	6803      	ldr	r3, [r0, #0]
   4586e:	4601      	mov	r1, r0
   45870:	f013 0207 	ands.w	r2, r3, #7
   45874:	d00b      	beq.n	4588e <__lo0bits+0x22>
   45876:	07da      	lsls	r2, r3, #31
   45878:	d424      	bmi.n	458c4 <__lo0bits+0x58>
   4587a:	0798      	lsls	r0, r3, #30
   4587c:	bf47      	ittee	mi
   4587e:	085b      	lsrmi	r3, r3, #1
   45880:	2001      	movmi	r0, #1
   45882:	089b      	lsrpl	r3, r3, #2
   45884:	2002      	movpl	r0, #2
   45886:	bf4c      	ite	mi
   45888:	600b      	strmi	r3, [r1, #0]
   4588a:	600b      	strpl	r3, [r1, #0]
   4588c:	4770      	bx	lr
   4588e:	b298      	uxth	r0, r3
   45890:	b9b0      	cbnz	r0, 458c0 <__lo0bits+0x54>
   45892:	0c1b      	lsrs	r3, r3, #16
   45894:	2010      	movs	r0, #16
   45896:	f013 0fff 	tst.w	r3, #255	; 0xff
   4589a:	bf04      	itt	eq
   4589c:	0a1b      	lsreq	r3, r3, #8
   4589e:	3008      	addeq	r0, #8
   458a0:	071a      	lsls	r2, r3, #28
   458a2:	bf04      	itt	eq
   458a4:	091b      	lsreq	r3, r3, #4
   458a6:	3004      	addeq	r0, #4
   458a8:	079a      	lsls	r2, r3, #30
   458aa:	bf04      	itt	eq
   458ac:	089b      	lsreq	r3, r3, #2
   458ae:	3002      	addeq	r0, #2
   458b0:	07da      	lsls	r2, r3, #31
   458b2:	d403      	bmi.n	458bc <__lo0bits+0x50>
   458b4:	085b      	lsrs	r3, r3, #1
   458b6:	f100 0001 	add.w	r0, r0, #1
   458ba:	d005      	beq.n	458c8 <__lo0bits+0x5c>
   458bc:	600b      	str	r3, [r1, #0]
   458be:	4770      	bx	lr
   458c0:	4610      	mov	r0, r2
   458c2:	e7e8      	b.n	45896 <__lo0bits+0x2a>
   458c4:	2000      	movs	r0, #0
   458c6:	4770      	bx	lr
   458c8:	2020      	movs	r0, #32
   458ca:	4770      	bx	lr

000458cc <__i2b>:
   458cc:	b510      	push	{r4, lr}
   458ce:	460c      	mov	r4, r1
   458d0:	2101      	movs	r1, #1
   458d2:	f7ff fee3 	bl	4569c <_Balloc>
   458d6:	2201      	movs	r2, #1
   458d8:	6144      	str	r4, [r0, #20]
   458da:	6102      	str	r2, [r0, #16]
   458dc:	bd10      	pop	{r4, pc}

000458de <__multiply>:
   458de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   458e2:	4615      	mov	r5, r2
   458e4:	690a      	ldr	r2, [r1, #16]
   458e6:	460c      	mov	r4, r1
   458e8:	b085      	sub	sp, #20
   458ea:	692b      	ldr	r3, [r5, #16]
   458ec:	429a      	cmp	r2, r3
   458ee:	bfbe      	ittt	lt
   458f0:	460b      	movlt	r3, r1
   458f2:	462c      	movlt	r4, r5
   458f4:	461d      	movlt	r5, r3
   458f6:	6927      	ldr	r7, [r4, #16]
   458f8:	68a3      	ldr	r3, [r4, #8]
   458fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
   458fe:	6861      	ldr	r1, [r4, #4]
   45900:	eb07 0609 	add.w	r6, r7, r9
   45904:	42b3      	cmp	r3, r6
   45906:	bfb8      	it	lt
   45908:	3101      	addlt	r1, #1
   4590a:	f7ff fec7 	bl	4569c <_Balloc>
   4590e:	f100 0114 	add.w	r1, r0, #20
   45912:	2200      	movs	r2, #0
   45914:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   45918:	460b      	mov	r3, r1
   4591a:	4543      	cmp	r3, r8
   4591c:	d31d      	bcc.n	4595a <__multiply+0x7c>
   4591e:	f104 0314 	add.w	r3, r4, #20
   45922:	f105 0214 	add.w	r2, r5, #20
   45926:	f104 0515 	add.w	r5, r4, #21
   4592a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   4592e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   45932:	9302      	str	r3, [sp, #8]
   45934:	1b3b      	subs	r3, r7, r4
   45936:	3b15      	subs	r3, #21
   45938:	f023 0303 	bic.w	r3, r3, #3
   4593c:	3304      	adds	r3, #4
   4593e:	42af      	cmp	r7, r5
   45940:	bf38      	it	cc
   45942:	2304      	movcc	r3, #4
   45944:	9301      	str	r3, [sp, #4]
   45946:	9b02      	ldr	r3, [sp, #8]
   45948:	9203      	str	r2, [sp, #12]
   4594a:	4293      	cmp	r3, r2
   4594c:	d808      	bhi.n	45960 <__multiply+0x82>
   4594e:	2e00      	cmp	r6, #0
   45950:	dc5a      	bgt.n	45a08 <__multiply+0x12a>
   45952:	6106      	str	r6, [r0, #16]
   45954:	b005      	add	sp, #20
   45956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4595a:	f843 2b04 	str.w	r2, [r3], #4
   4595e:	e7dc      	b.n	4591a <__multiply+0x3c>
   45960:	f8b2 a000 	ldrh.w	sl, [r2]
   45964:	f1ba 0f00 	cmp.w	sl, #0
   45968:	d024      	beq.n	459b4 <__multiply+0xd6>
   4596a:	f104 0e14 	add.w	lr, r4, #20
   4596e:	4689      	mov	r9, r1
   45970:	f04f 0c00 	mov.w	ip, #0
   45974:	f85e 5b04 	ldr.w	r5, [lr], #4
   45978:	f8d9 b000 	ldr.w	fp, [r9]
   4597c:	b2ab      	uxth	r3, r5
   4597e:	4577      	cmp	r7, lr
   45980:	fa1f fb8b 	uxth.w	fp, fp
   45984:	fb0a b303 	mla	r3, sl, r3, fp
   45988:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   4598c:	f8d9 5000 	ldr.w	r5, [r9]
   45990:	4463      	add	r3, ip
   45992:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   45996:	fb0a c50b 	mla	r5, sl, fp, ip
   4599a:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   4599e:	b29b      	uxth	r3, r3
   459a0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   459a4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   459a8:	f849 3b04 	str.w	r3, [r9], #4
   459ac:	d8e2      	bhi.n	45974 <__multiply+0x96>
   459ae:	9b01      	ldr	r3, [sp, #4]
   459b0:	f841 c003 	str.w	ip, [r1, r3]
   459b4:	9b03      	ldr	r3, [sp, #12]
   459b6:	3204      	adds	r2, #4
   459b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   459bc:	f1b9 0f00 	cmp.w	r9, #0
   459c0:	d020      	beq.n	45a04 <__multiply+0x126>
   459c2:	680b      	ldr	r3, [r1, #0]
   459c4:	f104 0c14 	add.w	ip, r4, #20
   459c8:	468e      	mov	lr, r1
   459ca:	f04f 0a00 	mov.w	sl, #0
   459ce:	f8bc 5000 	ldrh.w	r5, [ip]
   459d2:	b29b      	uxth	r3, r3
   459d4:	f8be b002 	ldrh.w	fp, [lr, #2]
   459d8:	fb09 b505 	mla	r5, r9, r5, fp
   459dc:	44aa      	add	sl, r5
   459de:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   459e2:	f84e 3b04 	str.w	r3, [lr], #4
   459e6:	f85c 3b04 	ldr.w	r3, [ip], #4
   459ea:	f8be 5000 	ldrh.w	r5, [lr]
   459ee:	0c1b      	lsrs	r3, r3, #16
   459f0:	4567      	cmp	r7, ip
   459f2:	fb09 5303 	mla	r3, r9, r3, r5
   459f6:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   459fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   459fe:	d8e6      	bhi.n	459ce <__multiply+0xf0>
   45a00:	9d01      	ldr	r5, [sp, #4]
   45a02:	514b      	str	r3, [r1, r5]
   45a04:	3104      	adds	r1, #4
   45a06:	e79e      	b.n	45946 <__multiply+0x68>
   45a08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   45a0c:	2b00      	cmp	r3, #0
   45a0e:	d1a0      	bne.n	45952 <__multiply+0x74>
   45a10:	3e01      	subs	r6, #1
   45a12:	e79c      	b.n	4594e <__multiply+0x70>

00045a14 <__lshift>:
   45a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   45a18:	460c      	mov	r4, r1
   45a1a:	4607      	mov	r7, r0
   45a1c:	4691      	mov	r9, r2
   45a1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   45a22:	6923      	ldr	r3, [r4, #16]
   45a24:	6849      	ldr	r1, [r1, #4]
   45a26:	eb03 1862 	add.w	r8, r3, r2, asr #5
   45a2a:	68a3      	ldr	r3, [r4, #8]
   45a2c:	f108 0601 	add.w	r6, r8, #1
   45a30:	42b3      	cmp	r3, r6
   45a32:	db3f      	blt.n	45ab4 <__lshift+0xa0>
   45a34:	4638      	mov	r0, r7
   45a36:	f7ff fe31 	bl	4569c <_Balloc>
   45a3a:	2300      	movs	r3, #0
   45a3c:	4605      	mov	r5, r0
   45a3e:	f100 0114 	add.w	r1, r0, #20
   45a42:	f100 0210 	add.w	r2, r0, #16
   45a46:	4618      	mov	r0, r3
   45a48:	4553      	cmp	r3, sl
   45a4a:	db36      	blt.n	45aba <__lshift+0xa6>
   45a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   45a50:	f104 0314 	add.w	r3, r4, #20
   45a54:	6920      	ldr	r0, [r4, #16]
   45a56:	f019 091f 	ands.w	r9, r9, #31
   45a5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   45a5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   45a62:	d02e      	beq.n	45ac2 <__lshift+0xae>
   45a64:	f1c9 0e20 	rsb	lr, r9, #32
   45a68:	468a      	mov	sl, r1
   45a6a:	2200      	movs	r2, #0
   45a6c:	6818      	ldr	r0, [r3, #0]
   45a6e:	fa00 f009 	lsl.w	r0, r0, r9
   45a72:	4302      	orrs	r2, r0
   45a74:	f84a 2b04 	str.w	r2, [sl], #4
   45a78:	f853 2b04 	ldr.w	r2, [r3], #4
   45a7c:	459c      	cmp	ip, r3
   45a7e:	fa22 f20e 	lsr.w	r2, r2, lr
   45a82:	d8f3      	bhi.n	45a6c <__lshift+0x58>
   45a84:	ebac 0304 	sub.w	r3, ip, r4
   45a88:	f104 0015 	add.w	r0, r4, #21
   45a8c:	3b15      	subs	r3, #21
   45a8e:	f023 0303 	bic.w	r3, r3, #3
   45a92:	3304      	adds	r3, #4
   45a94:	4560      	cmp	r0, ip
   45a96:	bf88      	it	hi
   45a98:	2304      	movhi	r3, #4
   45a9a:	50ca      	str	r2, [r1, r3]
   45a9c:	b10a      	cbz	r2, 45aa2 <__lshift+0x8e>
   45a9e:	f108 0602 	add.w	r6, r8, #2
   45aa2:	3e01      	subs	r6, #1
   45aa4:	4638      	mov	r0, r7
   45aa6:	4621      	mov	r1, r4
   45aa8:	612e      	str	r6, [r5, #16]
   45aaa:	f7ff fe2b 	bl	45704 <_Bfree>
   45aae:	4628      	mov	r0, r5
   45ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   45ab4:	3101      	adds	r1, #1
   45ab6:	005b      	lsls	r3, r3, #1
   45ab8:	e7ba      	b.n	45a30 <__lshift+0x1c>
   45aba:	3301      	adds	r3, #1
   45abc:	f842 0f04 	str.w	r0, [r2, #4]!
   45ac0:	e7c2      	b.n	45a48 <__lshift+0x34>
   45ac2:	3904      	subs	r1, #4
   45ac4:	f853 2b04 	ldr.w	r2, [r3], #4
   45ac8:	459c      	cmp	ip, r3
   45aca:	f841 2f04 	str.w	r2, [r1, #4]!
   45ace:	d8f9      	bhi.n	45ac4 <__lshift+0xb0>
   45ad0:	e7e7      	b.n	45aa2 <__lshift+0x8e>

00045ad2 <__mcmp>:
   45ad2:	6902      	ldr	r2, [r0, #16]
   45ad4:	b530      	push	{r4, r5, lr}
   45ad6:	690c      	ldr	r4, [r1, #16]
   45ad8:	1b12      	subs	r2, r2, r4
   45ada:	d10e      	bne.n	45afa <__mcmp+0x28>
   45adc:	f100 0314 	add.w	r3, r0, #20
   45ae0:	3114      	adds	r1, #20
   45ae2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   45ae6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   45aea:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   45aee:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   45af2:	42a5      	cmp	r5, r4
   45af4:	d003      	beq.n	45afe <__mcmp+0x2c>
   45af6:	d305      	bcc.n	45b04 <__mcmp+0x32>
   45af8:	2201      	movs	r2, #1
   45afa:	4610      	mov	r0, r2
   45afc:	bd30      	pop	{r4, r5, pc}
   45afe:	4283      	cmp	r3, r0
   45b00:	d3f3      	bcc.n	45aea <__mcmp+0x18>
   45b02:	e7fa      	b.n	45afa <__mcmp+0x28>
   45b04:	f04f 32ff 	mov.w	r2, #4294967295
   45b08:	e7f7      	b.n	45afa <__mcmp+0x28>

00045b0a <__mdiff>:
   45b0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45b0e:	460c      	mov	r4, r1
   45b10:	4606      	mov	r6, r0
   45b12:	4611      	mov	r1, r2
   45b14:	4692      	mov	sl, r2
   45b16:	4620      	mov	r0, r4
   45b18:	f7ff ffdb 	bl	45ad2 <__mcmp>
   45b1c:	1e05      	subs	r5, r0, #0
   45b1e:	d108      	bne.n	45b32 <__mdiff+0x28>
   45b20:	4629      	mov	r1, r5
   45b22:	4630      	mov	r0, r6
   45b24:	f7ff fdba 	bl	4569c <_Balloc>
   45b28:	2301      	movs	r3, #1
   45b2a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   45b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45b32:	bfa3      	ittte	ge
   45b34:	4653      	movge	r3, sl
   45b36:	46a2      	movge	sl, r4
   45b38:	2500      	movge	r5, #0
   45b3a:	2501      	movlt	r5, #1
   45b3c:	bfa8      	it	ge
   45b3e:	461c      	movge	r4, r3
   45b40:	f8da 1004 	ldr.w	r1, [sl, #4]
   45b44:	4630      	mov	r0, r6
   45b46:	f7ff fda9 	bl	4569c <_Balloc>
   45b4a:	f104 0914 	add.w	r9, r4, #20
   45b4e:	f8da 7010 	ldr.w	r7, [sl, #16]
   45b52:	f100 0814 	add.w	r8, r0, #20
   45b56:	6926      	ldr	r6, [r4, #16]
   45b58:	f10a 0210 	add.w	r2, sl, #16
   45b5c:	60c5      	str	r5, [r0, #12]
   45b5e:	f10a 0514 	add.w	r5, sl, #20
   45b62:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   45b66:	46c2      	mov	sl, r8
   45b68:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   45b6c:	f04f 0c00 	mov.w	ip, #0
   45b70:	f852 bf04 	ldr.w	fp, [r2, #4]!
   45b74:	f859 3b04 	ldr.w	r3, [r9], #4
   45b78:	fa1f f18b 	uxth.w	r1, fp
   45b7c:	454e      	cmp	r6, r9
   45b7e:	4461      	add	r1, ip
   45b80:	fa1f fc83 	uxth.w	ip, r3
   45b84:	ea4f 4313 	mov.w	r3, r3, lsr #16
   45b88:	eba1 010c 	sub.w	r1, r1, ip
   45b8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   45b90:	eb03 4321 	add.w	r3, r3, r1, asr #16
   45b94:	b289      	uxth	r1, r1
   45b96:	ea4f 4c23 	mov.w	ip, r3, asr #16
   45b9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   45b9e:	f84a 3b04 	str.w	r3, [sl], #4
   45ba2:	d8e5      	bhi.n	45b70 <__mdiff+0x66>
   45ba4:	1b33      	subs	r3, r6, r4
   45ba6:	3415      	adds	r4, #21
   45ba8:	3b15      	subs	r3, #21
   45baa:	f023 0303 	bic.w	r3, r3, #3
   45bae:	3304      	adds	r3, #4
   45bb0:	42a6      	cmp	r6, r4
   45bb2:	bf38      	it	cc
   45bb4:	2304      	movcc	r3, #4
   45bb6:	441d      	add	r5, r3
   45bb8:	4443      	add	r3, r8
   45bba:	462c      	mov	r4, r5
   45bbc:	461e      	mov	r6, r3
   45bbe:	4574      	cmp	r4, lr
   45bc0:	d30e      	bcc.n	45be0 <__mdiff+0xd6>
   45bc2:	f10e 0203 	add.w	r2, lr, #3
   45bc6:	1b52      	subs	r2, r2, r5
   45bc8:	3d03      	subs	r5, #3
   45bca:	f022 0203 	bic.w	r2, r2, #3
   45bce:	45ae      	cmp	lr, r5
   45bd0:	bf38      	it	cc
   45bd2:	2200      	movcc	r2, #0
   45bd4:	441a      	add	r2, r3
   45bd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   45bda:	b18b      	cbz	r3, 45c00 <__mdiff+0xf6>
   45bdc:	6107      	str	r7, [r0, #16]
   45bde:	e7a6      	b.n	45b2e <__mdiff+0x24>
   45be0:	f854 8b04 	ldr.w	r8, [r4], #4
   45be4:	fa1f f288 	uxth.w	r2, r8
   45be8:	4462      	add	r2, ip
   45bea:	1411      	asrs	r1, r2, #16
   45bec:	b292      	uxth	r2, r2
   45bee:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   45bf2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   45bf6:	ea4f 4c21 	mov.w	ip, r1, asr #16
   45bfa:	f846 2b04 	str.w	r2, [r6], #4
   45bfe:	e7de      	b.n	45bbe <__mdiff+0xb4>
   45c00:	3f01      	subs	r7, #1
   45c02:	e7e8      	b.n	45bd6 <__mdiff+0xcc>

00045c04 <__d2b>:
   45c04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   45c08:	ec57 6b10 	vmov	r6, r7, d0
   45c0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   45c10:	4689      	mov	r9, r1
   45c12:	2101      	movs	r1, #1
   45c14:	4690      	mov	r8, r2
   45c16:	f7ff fd41 	bl	4569c <_Balloc>
   45c1a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   45c1e:	4604      	mov	r4, r0
   45c20:	bb35      	cbnz	r5, 45c70 <__d2b+0x6c>
   45c22:	2e00      	cmp	r6, #0
   45c24:	9301      	str	r3, [sp, #4]
   45c26:	d028      	beq.n	45c7a <__d2b+0x76>
   45c28:	4668      	mov	r0, sp
   45c2a:	9600      	str	r6, [sp, #0]
   45c2c:	f7ff fe1e 	bl	4586c <__lo0bits>
   45c30:	9900      	ldr	r1, [sp, #0]
   45c32:	b300      	cbz	r0, 45c76 <__d2b+0x72>
   45c34:	9a01      	ldr	r2, [sp, #4]
   45c36:	f1c0 0320 	rsb	r3, r0, #32
   45c3a:	fa02 f303 	lsl.w	r3, r2, r3
   45c3e:	40c2      	lsrs	r2, r0
   45c40:	430b      	orrs	r3, r1
   45c42:	9201      	str	r2, [sp, #4]
   45c44:	6163      	str	r3, [r4, #20]
   45c46:	9b01      	ldr	r3, [sp, #4]
   45c48:	2b00      	cmp	r3, #0
   45c4a:	61a3      	str	r3, [r4, #24]
   45c4c:	bf14      	ite	ne
   45c4e:	2202      	movne	r2, #2
   45c50:	2201      	moveq	r2, #1
   45c52:	6122      	str	r2, [r4, #16]
   45c54:	b1d5      	cbz	r5, 45c8c <__d2b+0x88>
   45c56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   45c5a:	4405      	add	r5, r0
   45c5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   45c60:	f8c9 5000 	str.w	r5, [r9]
   45c64:	f8c8 0000 	str.w	r0, [r8]
   45c68:	4620      	mov	r0, r4
   45c6a:	b003      	add	sp, #12
   45c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   45c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   45c74:	e7d5      	b.n	45c22 <__d2b+0x1e>
   45c76:	6161      	str	r1, [r4, #20]
   45c78:	e7e5      	b.n	45c46 <__d2b+0x42>
   45c7a:	a801      	add	r0, sp, #4
   45c7c:	f7ff fdf6 	bl	4586c <__lo0bits>
   45c80:	9b01      	ldr	r3, [sp, #4]
   45c82:	2201      	movs	r2, #1
   45c84:	3020      	adds	r0, #32
   45c86:	6163      	str	r3, [r4, #20]
   45c88:	6122      	str	r2, [r4, #16]
   45c8a:	e7e3      	b.n	45c54 <__d2b+0x50>
   45c8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   45c90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   45c94:	f8c9 0000 	str.w	r0, [r9]
   45c98:	6918      	ldr	r0, [r3, #16]
   45c9a:	f7ff fdc7 	bl	4582c <__hi0bits>
   45c9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   45ca2:	e7df      	b.n	45c64 <__d2b+0x60>

00045ca4 <__ratio>:
   45ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45ca8:	4688      	mov	r8, r1
   45caa:	4681      	mov	r9, r0
   45cac:	4669      	mov	r1, sp
   45cae:	f7fa fe7d 	bl	409ac <__b2d>
   45cb2:	a901      	add	r1, sp, #4
   45cb4:	4640      	mov	r0, r8
   45cb6:	ec55 4b10 	vmov	r4, r5, d0
   45cba:	f7fa fe77 	bl	409ac <__b2d>
   45cbe:	f8d9 3010 	ldr.w	r3, [r9, #16]
   45cc2:	f8d8 2010 	ldr.w	r2, [r8, #16]
   45cc6:	462f      	mov	r7, r5
   45cc8:	eba3 0c02 	sub.w	ip, r3, r2
   45ccc:	e9dd 3200 	ldrd	r3, r2, [sp]
   45cd0:	ec51 0b10 	vmov	r0, r1, d0
   45cd4:	1a9b      	subs	r3, r3, r2
   45cd6:	468b      	mov	fp, r1
   45cd8:	4620      	mov	r0, r4
   45cda:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   45cde:	2b00      	cmp	r3, #0
   45ce0:	bfd5      	itete	le
   45ce2:	460a      	movle	r2, r1
   45ce4:	462a      	movgt	r2, r5
   45ce6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   45cea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   45cee:	bfd8      	it	le
   45cf0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   45cf4:	ee10 2a10 	vmov	r2, s0
   45cf8:	4639      	mov	r1, r7
   45cfa:	465b      	mov	r3, fp
   45cfc:	f7d6 fe86 	bl	1ca0c <__aeabi_ddiv>
   45d00:	ec41 0b10 	vmov	d0, r0, r1
   45d04:	b003      	add	sp, #12
   45d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00045d0a <__copybits>:
   45d0a:	3901      	subs	r1, #1
   45d0c:	f102 0314 	add.w	r3, r2, #20
   45d10:	1149      	asrs	r1, r1, #5
   45d12:	b570      	push	{r4, r5, r6, lr}
   45d14:	3101      	adds	r1, #1
   45d16:	6914      	ldr	r4, [r2, #16]
   45d18:	1f05      	subs	r5, r0, #4
   45d1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   45d1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   45d22:	42a3      	cmp	r3, r4
   45d24:	d30c      	bcc.n	45d40 <__copybits+0x36>
   45d26:	1aa3      	subs	r3, r4, r2
   45d28:	3211      	adds	r2, #17
   45d2a:	3b11      	subs	r3, #17
   45d2c:	f023 0303 	bic.w	r3, r3, #3
   45d30:	42a2      	cmp	r2, r4
   45d32:	bf88      	it	hi
   45d34:	2300      	movhi	r3, #0
   45d36:	4418      	add	r0, r3
   45d38:	2300      	movs	r3, #0
   45d3a:	4288      	cmp	r0, r1
   45d3c:	d305      	bcc.n	45d4a <__copybits+0x40>
   45d3e:	bd70      	pop	{r4, r5, r6, pc}
   45d40:	f853 6b04 	ldr.w	r6, [r3], #4
   45d44:	f845 6f04 	str.w	r6, [r5, #4]!
   45d48:	e7eb      	b.n	45d22 <__copybits+0x18>
   45d4a:	f840 3b04 	str.w	r3, [r0], #4
   45d4e:	e7f4      	b.n	45d3a <__copybits+0x30>

00045d50 <__any_on>:
   45d50:	f100 0214 	add.w	r2, r0, #20
   45d54:	114b      	asrs	r3, r1, #5
   45d56:	6900      	ldr	r0, [r0, #16]
   45d58:	4298      	cmp	r0, r3
   45d5a:	b510      	push	{r4, lr}
   45d5c:	db11      	blt.n	45d82 <__any_on+0x32>
   45d5e:	dd0a      	ble.n	45d76 <__any_on+0x26>
   45d60:	f011 011f 	ands.w	r1, r1, #31
   45d64:	d007      	beq.n	45d76 <__any_on+0x26>
   45d66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   45d6a:	fa24 f001 	lsr.w	r0, r4, r1
   45d6e:	fa00 f101 	lsl.w	r1, r0, r1
   45d72:	428c      	cmp	r4, r1
   45d74:	d10b      	bne.n	45d8e <__any_on+0x3e>
   45d76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   45d7a:	4293      	cmp	r3, r2
   45d7c:	d803      	bhi.n	45d86 <__any_on+0x36>
   45d7e:	2000      	movs	r0, #0
   45d80:	bd10      	pop	{r4, pc}
   45d82:	4603      	mov	r3, r0
   45d84:	e7f7      	b.n	45d76 <__any_on+0x26>
   45d86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   45d8a:	2900      	cmp	r1, #0
   45d8c:	d0f5      	beq.n	45d7a <__any_on+0x2a>
   45d8e:	2001      	movs	r0, #1
   45d90:	e7f6      	b.n	45d80 <__any_on+0x30>

00045d92 <_calloc_r>:
   45d92:	434a      	muls	r2, r1
   45d94:	b513      	push	{r0, r1, r4, lr}
   45d96:	4611      	mov	r1, r2
   45d98:	9201      	str	r2, [sp, #4]
   45d9a:	f7f9 f9a1 	bl	3f0e0 <_malloc_r>
   45d9e:	4604      	mov	r4, r0
   45da0:	b118      	cbz	r0, 45daa <_calloc_r+0x18>
   45da2:	9a01      	ldr	r2, [sp, #4]
   45da4:	2100      	movs	r1, #0
   45da6:	f7fe ffbe 	bl	44d26 <memset>
   45daa:	4620      	mov	r0, r4
   45dac:	b002      	add	sp, #8
   45dae:	bd10      	pop	{r4, pc}

00045db0 <_realloc_r>:
   45db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45db2:	4607      	mov	r7, r0
   45db4:	4614      	mov	r4, r2
   45db6:	460e      	mov	r6, r1
   45db8:	b921      	cbnz	r1, 45dc4 <_realloc_r+0x14>
   45dba:	4611      	mov	r1, r2
   45dbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   45dc0:	f7f9 b98e 	b.w	3f0e0 <_malloc_r>
   45dc4:	b922      	cbnz	r2, 45dd0 <_realloc_r+0x20>
   45dc6:	4625      	mov	r5, r4
   45dc8:	f7f9 f93a 	bl	3f040 <_free_r>
   45dcc:	4628      	mov	r0, r5
   45dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   45dd0:	f000 f970 	bl	460b4 <_malloc_usable_size_r>
   45dd4:	42a0      	cmp	r0, r4
   45dd6:	d20f      	bcs.n	45df8 <_realloc_r+0x48>
   45dd8:	4621      	mov	r1, r4
   45dda:	4638      	mov	r0, r7
   45ddc:	f7f9 f980 	bl	3f0e0 <_malloc_r>
   45de0:	4605      	mov	r5, r0
   45de2:	2800      	cmp	r0, #0
   45de4:	d0f2      	beq.n	45dcc <_realloc_r+0x1c>
   45de6:	4631      	mov	r1, r6
   45de8:	4622      	mov	r2, r4
   45dea:	f7fe ff7c 	bl	44ce6 <memcpy>
   45dee:	4631      	mov	r1, r6
   45df0:	4638      	mov	r0, r7
   45df2:	f7f9 f925 	bl	3f040 <_free_r>
   45df6:	e7e9      	b.n	45dcc <_realloc_r+0x1c>
   45df8:	4635      	mov	r5, r6
   45dfa:	e7e7      	b.n	45dcc <_realloc_r+0x1c>

00045dfc <__ssputs_r>:
   45dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   45e00:	688e      	ldr	r6, [r1, #8]
   45e02:	4682      	mov	sl, r0
   45e04:	460c      	mov	r4, r1
   45e06:	4690      	mov	r8, r2
   45e08:	429e      	cmp	r6, r3
   45e0a:	461f      	mov	r7, r3
   45e0c:	d838      	bhi.n	45e80 <__ssputs_r+0x84>
   45e0e:	898a      	ldrh	r2, [r1, #12]
   45e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
   45e14:	d032      	beq.n	45e7c <__ssputs_r+0x80>
   45e16:	6825      	ldr	r5, [r4, #0]
   45e18:	3301      	adds	r3, #1
   45e1a:	6909      	ldr	r1, [r1, #16]
   45e1c:	eba5 0901 	sub.w	r9, r5, r1
   45e20:	6965      	ldr	r5, [r4, #20]
   45e22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   45e26:	444b      	add	r3, r9
   45e28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   45e2c:	106d      	asrs	r5, r5, #1
   45e2e:	429d      	cmp	r5, r3
   45e30:	bf38      	it	cc
   45e32:	461d      	movcc	r5, r3
   45e34:	0553      	lsls	r3, r2, #21
   45e36:	d531      	bpl.n	45e9c <__ssputs_r+0xa0>
   45e38:	4629      	mov	r1, r5
   45e3a:	f7f9 f951 	bl	3f0e0 <_malloc_r>
   45e3e:	4606      	mov	r6, r0
   45e40:	b950      	cbnz	r0, 45e58 <__ssputs_r+0x5c>
   45e42:	230c      	movs	r3, #12
   45e44:	f04f 30ff 	mov.w	r0, #4294967295
   45e48:	f8ca 3000 	str.w	r3, [sl]
   45e4c:	89a3      	ldrh	r3, [r4, #12]
   45e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   45e52:	81a3      	strh	r3, [r4, #12]
   45e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   45e58:	464a      	mov	r2, r9
   45e5a:	6921      	ldr	r1, [r4, #16]
   45e5c:	f7fe ff43 	bl	44ce6 <memcpy>
   45e60:	89a3      	ldrh	r3, [r4, #12]
   45e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   45e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   45e6a:	81a3      	strh	r3, [r4, #12]
   45e6c:	6126      	str	r6, [r4, #16]
   45e6e:	444e      	add	r6, r9
   45e70:	6165      	str	r5, [r4, #20]
   45e72:	eba5 0509 	sub.w	r5, r5, r9
   45e76:	6026      	str	r6, [r4, #0]
   45e78:	463e      	mov	r6, r7
   45e7a:	60a5      	str	r5, [r4, #8]
   45e7c:	42be      	cmp	r6, r7
   45e7e:	d900      	bls.n	45e82 <__ssputs_r+0x86>
   45e80:	463e      	mov	r6, r7
   45e82:	4632      	mov	r2, r6
   45e84:	4641      	mov	r1, r8
   45e86:	6820      	ldr	r0, [r4, #0]
   45e88:	f7ff fbee 	bl	45668 <memmove>
   45e8c:	68a3      	ldr	r3, [r4, #8]
   45e8e:	6822      	ldr	r2, [r4, #0]
   45e90:	2000      	movs	r0, #0
   45e92:	1b9b      	subs	r3, r3, r6
   45e94:	4432      	add	r2, r6
   45e96:	60a3      	str	r3, [r4, #8]
   45e98:	6022      	str	r2, [r4, #0]
   45e9a:	e7db      	b.n	45e54 <__ssputs_r+0x58>
   45e9c:	462a      	mov	r2, r5
   45e9e:	f7ff ff87 	bl	45db0 <_realloc_r>
   45ea2:	4606      	mov	r6, r0
   45ea4:	2800      	cmp	r0, #0
   45ea6:	d1e1      	bne.n	45e6c <__ssputs_r+0x70>
   45ea8:	6921      	ldr	r1, [r4, #16]
   45eaa:	4650      	mov	r0, sl
   45eac:	f7f9 f8c8 	bl	3f040 <_free_r>
   45eb0:	e7c7      	b.n	45e42 <__ssputs_r+0x46>

00045eb2 <_sungetc_r>:
   45eb2:	b538      	push	{r3, r4, r5, lr}
   45eb4:	1c4b      	adds	r3, r1, #1
   45eb6:	4614      	mov	r4, r2
   45eb8:	d103      	bne.n	45ec2 <_sungetc_r+0x10>
   45eba:	f04f 35ff 	mov.w	r5, #4294967295
   45ebe:	4628      	mov	r0, r5
   45ec0:	bd38      	pop	{r3, r4, r5, pc}
   45ec2:	8993      	ldrh	r3, [r2, #12]
   45ec4:	b2cd      	uxtb	r5, r1
   45ec6:	f023 0320 	bic.w	r3, r3, #32
   45eca:	8193      	strh	r3, [r2, #12]
   45ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   45ece:	6852      	ldr	r2, [r2, #4]
   45ed0:	b18b      	cbz	r3, 45ef6 <_sungetc_r+0x44>
   45ed2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   45ed4:	4293      	cmp	r3, r2
   45ed6:	dd08      	ble.n	45eea <_sungetc_r+0x38>
   45ed8:	6823      	ldr	r3, [r4, #0]
   45eda:	1e5a      	subs	r2, r3, #1
   45edc:	6022      	str	r2, [r4, #0]
   45ede:	f803 5c01 	strb.w	r5, [r3, #-1]
   45ee2:	6863      	ldr	r3, [r4, #4]
   45ee4:	3301      	adds	r3, #1
   45ee6:	6063      	str	r3, [r4, #4]
   45ee8:	e7e9      	b.n	45ebe <_sungetc_r+0xc>
   45eea:	4621      	mov	r1, r4
   45eec:	f000 f89e 	bl	4602c <__submore>
   45ef0:	2800      	cmp	r0, #0
   45ef2:	d0f1      	beq.n	45ed8 <_sungetc_r+0x26>
   45ef4:	e7e1      	b.n	45eba <_sungetc_r+0x8>
   45ef6:	6921      	ldr	r1, [r4, #16]
   45ef8:	6823      	ldr	r3, [r4, #0]
   45efa:	b151      	cbz	r1, 45f12 <_sungetc_r+0x60>
   45efc:	4299      	cmp	r1, r3
   45efe:	d208      	bcs.n	45f12 <_sungetc_r+0x60>
   45f00:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   45f04:	42a9      	cmp	r1, r5
   45f06:	d104      	bne.n	45f12 <_sungetc_r+0x60>
   45f08:	3b01      	subs	r3, #1
   45f0a:	3201      	adds	r2, #1
   45f0c:	6023      	str	r3, [r4, #0]
   45f0e:	6062      	str	r2, [r4, #4]
   45f10:	e7d5      	b.n	45ebe <_sungetc_r+0xc>
   45f12:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   45f16:	f104 0344 	add.w	r3, r4, #68	; 0x44
   45f1a:	6363      	str	r3, [r4, #52]	; 0x34
   45f1c:	2303      	movs	r3, #3
   45f1e:	63a3      	str	r3, [r4, #56]	; 0x38
   45f20:	4623      	mov	r3, r4
   45f22:	f803 5f46 	strb.w	r5, [r3, #70]!
   45f26:	6023      	str	r3, [r4, #0]
   45f28:	2301      	movs	r3, #1
   45f2a:	e7dc      	b.n	45ee6 <_sungetc_r+0x34>

00045f2c <__ssrefill_r>:
   45f2c:	b510      	push	{r4, lr}
   45f2e:	460c      	mov	r4, r1
   45f30:	6b49      	ldr	r1, [r1, #52]	; 0x34
   45f32:	b169      	cbz	r1, 45f50 <__ssrefill_r+0x24>
   45f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
   45f38:	4299      	cmp	r1, r3
   45f3a:	d001      	beq.n	45f40 <__ssrefill_r+0x14>
   45f3c:	f7f9 f880 	bl	3f040 <_free_r>
   45f40:	2000      	movs	r0, #0
   45f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
   45f44:	6360      	str	r0, [r4, #52]	; 0x34
   45f46:	6063      	str	r3, [r4, #4]
   45f48:	b113      	cbz	r3, 45f50 <__ssrefill_r+0x24>
   45f4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   45f4c:	6023      	str	r3, [r4, #0]
   45f4e:	bd10      	pop	{r4, pc}
   45f50:	6923      	ldr	r3, [r4, #16]
   45f52:	f04f 30ff 	mov.w	r0, #4294967295
   45f56:	6023      	str	r3, [r4, #0]
   45f58:	2300      	movs	r3, #0
   45f5a:	6063      	str	r3, [r4, #4]
   45f5c:	89a3      	ldrh	r3, [r4, #12]
   45f5e:	f043 0320 	orr.w	r3, r3, #32
   45f62:	81a3      	strh	r3, [r4, #12]
   45f64:	e7f3      	b.n	45f4e <__ssrefill_r+0x22>

00045f66 <__sccl>:
   45f66:	b570      	push	{r4, r5, r6, lr}
   45f68:	780b      	ldrb	r3, [r1, #0]
   45f6a:	4604      	mov	r4, r0
   45f6c:	2b5e      	cmp	r3, #94	; 0x5e
   45f6e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   45f72:	bf13      	iteet	ne
   45f74:	1c48      	addne	r0, r1, #1
   45f76:	1c88      	addeq	r0, r1, #2
   45f78:	784b      	ldrbeq	r3, [r1, #1]
   45f7a:	2200      	movne	r2, #0
   45f7c:	bf08      	it	eq
   45f7e:	2201      	moveq	r2, #1
   45f80:	1e61      	subs	r1, r4, #1
   45f82:	f801 2f01 	strb.w	r2, [r1, #1]!
   45f86:	42a9      	cmp	r1, r5
   45f88:	d1fb      	bne.n	45f82 <__sccl+0x1c>
   45f8a:	b90b      	cbnz	r3, 45f90 <__sccl+0x2a>
   45f8c:	3801      	subs	r0, #1
   45f8e:	bd70      	pop	{r4, r5, r6, pc}
   45f90:	f082 0101 	eor.w	r1, r2, #1
   45f94:	1c42      	adds	r2, r0, #1
   45f96:	54e1      	strb	r1, [r4, r3]
   45f98:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   45f9c:	1e56      	subs	r6, r2, #1
   45f9e:	4610      	mov	r0, r2
   45fa0:	2d2d      	cmp	r5, #45	; 0x2d
   45fa2:	d006      	beq.n	45fb2 <__sccl+0x4c>
   45fa4:	2d5d      	cmp	r5, #93	; 0x5d
   45fa6:	d0f2      	beq.n	45f8e <__sccl+0x28>
   45fa8:	b90d      	cbnz	r5, 45fae <__sccl+0x48>
   45faa:	4630      	mov	r0, r6
   45fac:	e7ef      	b.n	45f8e <__sccl+0x28>
   45fae:	462b      	mov	r3, r5
   45fb0:	e7f0      	b.n	45f94 <__sccl+0x2e>
   45fb2:	7816      	ldrb	r6, [r2, #0]
   45fb4:	2e5d      	cmp	r6, #93	; 0x5d
   45fb6:	d0fa      	beq.n	45fae <__sccl+0x48>
   45fb8:	42b3      	cmp	r3, r6
   45fba:	dcf8      	bgt.n	45fae <__sccl+0x48>
   45fbc:	4618      	mov	r0, r3
   45fbe:	3001      	adds	r0, #1
   45fc0:	4286      	cmp	r6, r0
   45fc2:	5421      	strb	r1, [r4, r0]
   45fc4:	dcfb      	bgt.n	45fbe <__sccl+0x58>
   45fc6:	43d8      	mvns	r0, r3
   45fc8:	1c5d      	adds	r5, r3, #1
   45fca:	3202      	adds	r2, #2
   45fcc:	4430      	add	r0, r6
   45fce:	42b3      	cmp	r3, r6
   45fd0:	bfa8      	it	ge
   45fd2:	2000      	movge	r0, #0
   45fd4:	182b      	adds	r3, r5, r0
   45fd6:	e7df      	b.n	45f98 <__sccl+0x32>

00045fd8 <_raise_r>:
   45fd8:	291f      	cmp	r1, #31
   45fda:	b538      	push	{r3, r4, r5, lr}
   45fdc:	4604      	mov	r4, r0
   45fde:	460d      	mov	r5, r1
   45fe0:	d904      	bls.n	45fec <_raise_r+0x14>
   45fe2:	2316      	movs	r3, #22
   45fe4:	6003      	str	r3, [r0, #0]
   45fe6:	f04f 30ff 	mov.w	r0, #4294967295
   45fea:	bd38      	pop	{r3, r4, r5, pc}
   45fec:	6c42      	ldr	r2, [r0, #68]	; 0x44
   45fee:	b112      	cbz	r2, 45ff6 <_raise_r+0x1e>
   45ff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   45ff4:	b94b      	cbnz	r3, 4600a <_raise_r+0x32>
   45ff6:	4620      	mov	r0, r4
   45ff8:	f000 f816 	bl	46028 <_getpid_r>
   45ffc:	462a      	mov	r2, r5
   45ffe:	4601      	mov	r1, r0
   46000:	4620      	mov	r0, r4
   46002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   46006:	f7fb b901 	b.w	4120c <_kill_r>
   4600a:	2b01      	cmp	r3, #1
   4600c:	d00a      	beq.n	46024 <_raise_r+0x4c>
   4600e:	1c59      	adds	r1, r3, #1
   46010:	d103      	bne.n	4601a <_raise_r+0x42>
   46012:	2316      	movs	r3, #22
   46014:	6003      	str	r3, [r0, #0]
   46016:	2001      	movs	r0, #1
   46018:	e7e7      	b.n	45fea <_raise_r+0x12>
   4601a:	2400      	movs	r4, #0
   4601c:	4628      	mov	r0, r5
   4601e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   46022:	4798      	blx	r3
   46024:	2000      	movs	r0, #0
   46026:	e7e0      	b.n	45fea <_raise_r+0x12>

00046028 <_getpid_r>:
   46028:	f7fc bb1c 	b.w	42664 <_getpid>

0004602c <__submore>:
   4602c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46030:	460c      	mov	r4, r1
   46032:	6b49      	ldr	r1, [r1, #52]	; 0x34
   46034:	f104 0344 	add.w	r3, r4, #68	; 0x44
   46038:	4299      	cmp	r1, r3
   4603a:	d11a      	bne.n	46072 <__submore+0x46>
   4603c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   46040:	f7f9 f84e 	bl	3f0e0 <_malloc_r>
   46044:	b918      	cbnz	r0, 4604e <__submore+0x22>
   46046:	f04f 30ff 	mov.w	r0, #4294967295
   4604a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4604e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   46052:	6360      	str	r0, [r4, #52]	; 0x34
   46054:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   46058:	63a3      	str	r3, [r4, #56]	; 0x38
   4605a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   4605e:	7083      	strb	r3, [r0, #2]
   46060:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   46064:	7043      	strb	r3, [r0, #1]
   46066:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   4606a:	7003      	strb	r3, [r0, #0]
   4606c:	6020      	str	r0, [r4, #0]
   4606e:	2000      	movs	r0, #0
   46070:	e7eb      	b.n	4604a <__submore+0x1e>
   46072:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   46074:	0077      	lsls	r7, r6, #1
   46076:	463a      	mov	r2, r7
   46078:	f7ff fe9a 	bl	45db0 <_realloc_r>
   4607c:	4605      	mov	r5, r0
   4607e:	2800      	cmp	r0, #0
   46080:	d0e1      	beq.n	46046 <__submore+0x1a>
   46082:	eb00 0806 	add.w	r8, r0, r6
   46086:	4601      	mov	r1, r0
   46088:	4632      	mov	r2, r6
   4608a:	4640      	mov	r0, r8
   4608c:	f7fe fe2b 	bl	44ce6 <memcpy>
   46090:	f8c4 8000 	str.w	r8, [r4]
   46094:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   46098:	e7e9      	b.n	4606e <__submore+0x42>

0004609a <__ascii_wctomb>:
   4609a:	b149      	cbz	r1, 460b0 <__ascii_wctomb+0x16>
   4609c:	2aff      	cmp	r2, #255	; 0xff
   4609e:	bf8d      	iteet	hi
   460a0:	238a      	movhi	r3, #138	; 0x8a
   460a2:	2001      	movls	r0, #1
   460a4:	700a      	strbls	r2, [r1, #0]
   460a6:	6003      	strhi	r3, [r0, #0]
   460a8:	bf88      	it	hi
   460aa:	f04f 30ff 	movhi.w	r0, #4294967295
   460ae:	4770      	bx	lr
   460b0:	4608      	mov	r0, r1
   460b2:	4770      	bx	lr

000460b4 <_malloc_usable_size_r>:
   460b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   460b8:	1f18      	subs	r0, r3, #4
   460ba:	2b00      	cmp	r3, #0
   460bc:	bfbc      	itt	lt
   460be:	580b      	ldrlt	r3, [r1, r0]
   460c0:	18c0      	addlt	r0, r0, r3
   460c2:	4770      	bx	lr
